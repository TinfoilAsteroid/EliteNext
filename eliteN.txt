# file opened: eliteNext.asm
   1  0000                  DEVICE ZXSPECTRUMNEXT
   2  0000                  DEFINE  DOUBLEBUFFER 1
   3  0000               ;DEFINE  LOGMATHS     1
   4  0000               ;DEFINE  DIAGSPRITES 1
   5  0000               ; DEFINE   SKIPATTRACT 1
   6  0000               ; DEFINE DEBUGMISSILETEST 1
   7  0000                   DEFINE  LASER_V2    1
   8  0000               CSPECTMAP eliteN.map
   9  0000               OPT --zxnext=cspect --syntax=a --reversepop
  10  0000                              DEFINE  SOUNDPACE 3
  11  0000                              DEFINE  ENABLE_SOUND 1
  12  0000              ; DEFINE     MAIN_INTERRUPTENABLE 1
  13  0000               ;               DEFINE INTERRUPT_BLOCKER 1
  14  0000              DEBUGSEGSIZE   equ 1
  15  0000              DEBUGLOGSUMMARY equ 1
  16  0000              ;DEBUGLOGDETAIL equ 1
  17  0000
  18  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  19  0000              ; Game Defines
  20  0000              ScreenLocal      EQU 0
  21  0000              ScreenGalactic   EQU ScreenLocal + 1
  22  0000              ScreenMarket     EQU ScreenGalactic + 1
  23  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  24  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  25  0000              ScreenInvent     EQU ScreenStatus + 1
  26  0000              ScreenPlanet     EQU ScreenInvent + 1
  27  0000              ScreenEquip      EQU ScreenPlanet + 1
  28  0000              ScreenLaunch     EQU ScreenEquip + 1
  29  0000              ScreenFront      EQU ScreenLaunch + 1
  30  0000              ScreenAft        EQU ScreenFront+1
  31  0000              ScreenLeft       EQU ScreenAft+1
  32  0000              ScreenRight      EQU ScreenLeft+1
  33  0000              ScreenDocking    EQU ScreenRight+1
  34  0000              ScreenHyperspace EQU ScreenDocking+1
  35  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  36  0000              ; Colour Defines
  37  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  38  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  39  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  40  0000              ; Total screen list
  41  0000              ; Local Chart
  42  0000              ; Galactic Chart
  43  0000              ; Market Prices
  44  0000              ; Inventory
  45  0000              ; Comander status
  46  0000              ; System Data
  47  0000              ; Mission Briefing
  48  0000              ; missio completion
  49  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  50  0000              ; Pause Menu (only place you can load from )
  51  0000              ; byint and selling equipment
  52  0000              ; bying and selling stock
  53  0000
  54  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU 0
 120+ 0000              VERSION_REGISTER						EQU 1
 121+ 0000              RESET_REGISTER		    				EQU 2
 122+ 0000              MACHINE_TYPE_REGISTER					EQU 3
 123+ 0000              PAGE_RAM_REGISTER						EQU 4
 124+ 0000              PERIPHERAL_1_REGISTER					EQU 5   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU 6   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU 7
 127+ 0000              PERIPHERAL_3_REGISTER					EQU 8   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU 9   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU 10  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU 14
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 16
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU 17
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU 27
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU 38
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU 39
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
 170+ 0000              PALETTE_INDEX_REGISTER					EQU 64
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU 69
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU 70
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU 71
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU 80
 180+ 0000              MMU_SLOT_1_REGISTER						EQU 81
 181+ 0000              MMU_SLOT_2_REGISTER						EQU 82
 182+ 0000              MMU_SLOT_3_REGISTER						EQU 83
 183+ 0000              MMU_SLOT_4_REGISTER						EQU 84
 184+ 0000              MMU_SLOT_5_REGISTER						EQU 85
 185+ 0000              MMU_SLOT_6_REGISTER						EQU 86
 186+ 0000              MMU_SLOT_7_REGISTER						EQU 87
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU 96
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU 99
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU 100
 193+ 0000              ULA_CONTROL_REGISTER                    EQU 104
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
 195+ 0000              LORES_CONTROL_REGISTER                  EQU 106
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU 107
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU 108
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU 110
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU 111
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1          EQU 114
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2          EQU 115
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3          EQU 116
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4          EQU 117
 207+ 0000              USER_STORAGE_0_REGISTER                 EQU 118 ; general purpose variable, e.g. for copper
 208+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU 128
 209+ 0000              EXTENDED_KEYS_0_REGISTER                EQU 176
 210+ 0000              EXTENDED_KEYS_1_REGISTER                EQU 177
 211+ 0000
 212+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 213+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 214+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 215+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 216+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 217+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 218+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 219+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 220+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 221+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 222+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 223+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 224+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 225+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 226+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 227+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 228+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 229+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 230+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 231+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 232+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 233+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 234+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 235+ 0000
 236+ 0000
 237+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 238+ 0000
 239+ 0000
 240+ 0000              GetNextRegSaveBC:	MACRO register
 241+ 0000 ~                                push bc
 242+ 0000 ~                                ld bc,$243B
 243+ 0000 ~                                ld a,register
 244+ 0000 ~                                out (c),a
 245+ 0000 ~                                inc b
 246+ 0000 ~                                in a,(c)
 247+ 0000 ~                                pop bc
 248+ 0000                                  ENDM
 249+ 0000
 250+ 0000              GetNextReg:	MACRO register
 251+ 0000 ~                        ld bc,$243B
 252+ 0000 ~                        ld a,register
 253+ 0000 ~                        out (c),a
 254+ 0000 ~                        inc b
 255+ 0000 ~                        in a,(c)
 256+ 0000                          ENDM
 257+ 0000
# file closed: ./Hardware/register_defines.asm
  55  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  56  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              UniverseBankAddr	    equ $c000
  28+ 0000              LaunchShipAddr          equ $c000
  29+ 0000              membank7 			    equ $e000
  30+ 0000              L1membankAddr   	    equ $e000
  31+ 0000              L2membankAddr   	    equ $e000
  32+ 0000              ShipModelsAddr	        equ $e000
  33+ 0000              SpritemembankAddr       equ $e000
  34+ 0000              ResetUniverseAddr       equ $e000
  35+ 0000              StockTableAddr	        equ $e000
  36+ 0000              CommanderAddr           equ $e000
  37+ 0000              LAYER2Addr              equ $e000
  38+ 0000              LAYER1Addr              equ $e000
  39+ 0000              SPRITEAddr              equ $e000
  40+ 0000              ConsoleImageAddr        equ $e000
  41+ 0000              GalaxyDataAddr          equ $e000
  42+ 0000              SoundAddr               equ $e000
  43+ 0000
  44+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  45+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  46+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  47+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  48+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  49+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  50+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  51+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  52+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  63+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  64+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  66+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  67+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  68+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  69+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  70+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  71+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  72+ 0000
  73+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  74+ 0000              BankResetUniv           equ 49
  75+ 0000              BankMenuShrCht          equ 50
  76+ 0000              BankMenuGalCht          equ 51
  77+ 0000              BankMenuInvent          equ 52
  78+ 0000              BankMenuSystem          equ 53
  79+ 0000              BankMenuMarket          equ 54
  80+ 0000              BankStockTable          equ 55
  81+ 0000              BankCommander           equ 56
  82+ 0000              BankLAYER2              equ 57
  83+ 0000              BankLAYER1              equ 58
  84+ 0000              BankShipModels1         equ 59
  85+ 0000              BankSPRITE              equ 60
  86+ 0000              BankConsole             equ 61
  87+ 0000              BankFrontView           equ 62
  88+ 0000              BankMenuStatus          equ 63
  89+ 0000              BankMenuEquipS          equ 64
  90+ 0000              BankLaunchShip          equ 65
  91+ 0000              BankDispMarket          equ 66
  92+ 0000              BankShipModels2         equ 67
  93+ 0000              BankShipModels3         equ 68
  94+ 0000              BankShipModels4         equ 69
  95+ 0000
  96+ 0000              BankUNIVDATA0           equ 70
  97+ 0000              BankUNIVDATA1           equ 71
  98+ 0000              BankUNIVDATA2           equ 72
  99+ 0000              BankUNIVDATA3           equ 73
 100+ 0000              BankUNIVDATA4           equ 74
 101+ 0000              BankUNIVDATA5           equ 75
 102+ 0000              BankUNIVDATA6           equ 76
 103+ 0000              BankUNIVDATA7           equ 77
 104+ 0000              BankUNIVDATA8           equ 78
 105+ 0000              BankUNIVDATA9           equ 79
 106+ 0000              BankUNIVDATA10          equ 80
 107+ 0000              BankUNIVDATA11          equ 81
 108+ 0000              BankUNIVDATA12          equ 82
 109+ 0000              BankSunData             equ 83
 110+ 0000              BankPlanetData          equ 84
 111+ 0000
 112+ 0000              BankGalaxyData0         equ 91
 113+ 0000              BankGalaxyData1         equ 92
 114+ 0000              BankGalaxyData2         equ 93
 115+ 0000              BankGalaxyData3         equ 94
 116+ 0000              BankGalaxyData4         equ 95
 117+ 0000              BankGalaxyData5         equ 96
 118+ 0000              BankGalaxyData6         equ 97
 119+ 0000              BankGalaxyData7         equ 98
 120+ 0000
 121+ 0000              BankMathsTables         equ 99
 122+ 0000              BankSound               equ 100
 123+ 0000
 124+ 0000              BankROM                 equ 255
 125+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  57  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  58  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ./Data/ShipModelEquates.asm
  59  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  60  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
# file closed: ./Macros/graphicsMacros.asm
  61  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  62  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  63  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  64  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  77+ 0000 ~                                    ld       hl,(memfrom)
  78+ 0000 ~                                    ld       (memto),hl
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteConst            MACRO  memfrom, memto
  82+ 0000 ~                                    ld       a,memfrom
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldWriteZero             MACRO  memto
  87+ 0000 ~                                    xor      a
  88+ 0000 ~                                    ld       (memto),a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXLaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixl,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIXHaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		ixh,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYLaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyl,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ldIYHaFromN:	        MACRO memfrom
 107+ 0000 ~                                    ld		a,(memfrom)
 108+ 0000 ~                                    ld		iyh,a
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ; Read a 32 bit value from address HL into BCDE
 112+ 0000              ldBCDEatHL:             MACRO
 113+ 0000 ~                                    ld      e,(hl)
 114+ 0000 ~                                    inc     hl
 115+ 0000 ~                                    ld      d,(hl)
 116+ 0000 ~                                    inc     hl
 117+ 0000 ~                                    ld      c,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      b,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              ldBCatHL:               MACRO
 124+ 0000 ~                                    ld      c,(hl)
 125+ 0000 ~                                    inc     hl
 126+ 0000 ~                                    ld      b,(hl)
 127+ 0000 ~                                    inc     hl
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ldhlde:			        MACRO
 131+ 0000 ~                                    ld		h,d
 132+ 0000 ~                                    ld		l,e
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ldhlbc:			        MACRO
 136+ 0000 ~                                    ld		h,b
 137+ 0000 ~                                    ld		l,c
 138+ 0000                                      ENDM
 139+ 0000
 140+ 0000              ldbcde:			        MACRO
 141+ 0000 ~                                    ld		b,d
 142+ 0000 ~                                    ld		c,e
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              lddebc:			        MACRO
 146+ 0000 ~                                    ld		d,b
 147+ 0000 ~                                    ld		e,c
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ldbchl:			        MACRO
 151+ 0000 ~                                    ld		b,h
 152+ 0000 ~                                    ld		c,l
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              lddeiy:			        MACRO
 156+ 0000 ~                                    ld		d,iyh
 157+ 0000 ~                                    ld		e,iyl
 158+ 0000                                      ENDM
 159+ 0000
 160+ 0000              ldiyde:			        MACRO
 161+ 0000 ~                                    ld		iyh,d
 162+ 0000 ~                                    ld		iyl,e
 163+ 0000                                      ENDM
 164+ 0000
 165+ 0000
 166+ 0000              FourLDIInstrunctions:   MACRO
 167+ 0000 ~                                    ldi
 168+ 0000 ~                                    ldi
 169+ 0000 ~                                    ldi
 170+ 0000 ~                                    ldi
 171+ 0000                                      ENDM
 172+ 0000
 173+ 0000              FiveLDIInstrunctions:   MACRO
 174+ 0000 ~                                    ldi
 175+ 0000 ~                                    ldi
 176+ 0000 ~                                    ldi
 177+ 0000 ~                                    ldi
 178+ 0000 ~                                    ldi
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              SixLDIInstrunctions:    MACRO
 182+ 0000 ~                                    ldi
 183+ 0000 ~                                    ldi
 184+ 0000 ~                                    ldi
 185+ 0000 ~                                    ldi
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000                                      ENDM
 189+ 0000
 190+ 0000              EightLDIInstrunctions:  MACRO
 191+ 0000 ~            		                ldi
 192+ 0000 ~            		                ldi
 193+ 0000 ~            		                ldi
 194+ 0000 ~            		                ldi
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000                                      ENDM
 200+ 0000
 201+ 0000              NineLDIInstrunctions:  MACRO
 202+ 0000 ~            		                ldi
 203+ 0000 ~            		                ldi
 204+ 0000 ~            		                ldi
 205+ 0000 ~            		                ldi
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  65  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  66  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000
  63+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  64+ 0000 ~                                    bit 	bitnbr, a
  65+ 0000 ~                                    jp      nz,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      z,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABit5Set:         MACRO   target
  74+ 0000 ~                                    and     Bit5Only
  75+ 0000 ~                                    jp      nz,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Clear:       MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  84+ 0000 ~                                    and     bitmask
  85+ 0000 ~                                    jp      nz,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      z,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  94+ 0000 ~                                    ld      a,(mem)
  95+ 0000 ~                                    and     bitmask
  96+ 0000 ~                                    jp      nz,target
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 100+ 0000 ~                                    ld      a,(mem)
 101+ 0000 ~                                    and     bitmask
 102+ 0000 ~                                    jp      z,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 106+ 0000 ~                                    bit 	bitnbr,reg
 107+ 0000 ~                                    jp      nz,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      z,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Comparison Routines
 116+ 0000              JumpIfAGTEusng:         MACRO
 117+ 0000 ~                                    jp		nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfAGTENusng:        MACRO reg,target
 121+ 0000 ~                                    cp     reg
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 126+ 0000 ~                                    ld      hl,mem
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    jp		nc,target
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              JumpIfALTMemusng:       MACRO mem,target
 132+ 0000 ~                                    ld      hl,mem
 133+ 0000 ~                                    cp      (hl)
 134+ 0000 ~                                    jp		c,target
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 138+ 0000 ~                                    ld     a,(mem)
 139+ 0000 ~                                    cp     value
 140+ 0000 ~                                    jp	  nc,target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 144+ 0000 ~                                    ld   a,(mem)
 145+ 0000 ~                                    ld   hl,address
 146+ 0000 ~                                    cp   (hl)
 147+ 0000 ~                                    jp	  nc,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 151+ 0000 ~                                    ld   a,(mem)
 152+ 0000 ~                                    ld   hl,address
 153+ 0000 ~                                    cp   (hl)
 154+ 0000 ~                                    jp	  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 158+ 0000 ~                                    ld   a,(mem)
 159+ 0000 ~                                    ld   hl,address
 160+ 0000 ~                                    cp   (hl)
 161+ 0000 ~                                    jp	  nz,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              JumpIfMemTrue:          MACRO mem, target
 165+ 0000 ~                                    ld      a,(mem)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jp      z, target
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              JumpIfMemFalse:         MACRO mem, target
 171+ 0000 ~                                    ld      a,(mem)
 172+ 0000 ~                                    and     a
 173+ 0000 ~                                    jp      nz, target
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              JumpIfATrue:            MACRO target
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      z, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfAFalse:           MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      nz, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfANotFalse:        MACRO target
 187+ 0000 ~                                    cp      $FF
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfALTusng:          MACRO target
 192+ 0000 ~                                    jp		c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfALTNusng:         MACRO value, target
 196+ 0000 ~                                    cp      value
 197+ 0000 ~                                    jp		c, target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 201+ 0000 ~                                    ld      a,(mem)
 202+ 0000 ~                                    cp      value
 203+ 0000 ~                                    jp	  c,target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 207+ 0000 ~                                    ld    a,(mem)
 208+ 0000 ~                                    ld    hl,value
 209+ 0000 ~                                    cp    (hl)
 210+ 0000 ~                                    jp	  c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 214+ 0000 ~                                    ld  a,(mem)
 215+ 0000 ~                                    cp  value
 216+ 0000 ~                                    jp  z,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 220+ 0000 ~                                    ld  a,(mem)
 221+ 0000 ~                                    cp  value
 222+ 0000 ~                                    jp  nz,target
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              JumpIfMemZero:          MACRO mem,target
 226+ 0000 ~                                    ld  a,(mem)
 227+ 0000 ~                                    and a
 228+ 0000 ~                                    jp  z,target
 229+ 0000                                      ENDM
 230+ 0000
 231+ 0000              JumpIfMemNotZero:       MACRO mem,target
 232+ 0000 ~                                    ld  a,(mem)
 233+ 0000 ~                                    and a
 234+ 0000 ~                                    jp  nz,target
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              JumpIfALTMemHLusng:     MACRO target
 238+ 0000 ~                                    cp    (hl)
 239+ 0000 ~                                    jp	  c,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfANENusng:         MACRO value, target
 243+ 0000 ~                                    cp     value
 244+ 0000 ~                                    jp      nz,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANEquNusng:       MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp     z,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEMemusng:       MACRO  value, target
 253+ 0000 ~                                    ld    hl,value
 254+ 0000 ~                                    cp    (hl)
 255+ 0000 ~                                    jp      nz,target
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              JumpIfAEqNusng:         MACRO value, target
 259+ 0000 ~                                    cp     value
 260+ 0000 ~                                    jp      z,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAIsZero:	        MACRO target
 264+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 265+ 0000 ~                                    jp	    z, target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 269+ 0000 ~                                    ld      a,reg
 270+ 0000 ~                                    and     a
 271+ 0000 ~                                    jp	    nz,target
 272+ 0000                                      ENDM
 273+ 0000
 274+ 0000              JumpIfAIsNotZero:       MACRO target
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 280+ 0000 ~                                    ld      a,(value)
 281+ 0000 ~                                    and     a
 282+ 0000 ~                                    jp	    nz,target
 283+ 0000                                      ENDM
 284+ 0000              IfResultZeroGoto:	    MACRO target
 285+ 0000 ~                                    jp	z,target
 286+ 0000                                      ENDM
 287+ 0000
 288+ 0000              IfResultNotZeroGoto:    MACRO target
 289+ 0000 ~                                    jp	nz,target
 290+ 0000                                      ENDM
 291+ 0000
# file closed: ./Macros/jumpMacros.asm
  67  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              ABSa2c:                 MACRO
   3+ 0000 ~                                    bit     7,a
   4+ 0000 ~                                    jp      z,.DoneABSa
   5+ 0000 ~                                    neg
   6+ 0000 ~            .DoneABSa:
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              DEEquSquareA:           MACRO
  10+ 0000 ~                                    ld  d,a
  11+ 0000 ~                                    ld  e,a
  12+ 0000 ~                                    mul de
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  16+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  17+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  18+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  19+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  20+ 0000 ~                                    xor $80                             ;
  21+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  22+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  24+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  25+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  26+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              SignedHLTo2C:           MACRO
  30+ 0000 ~                                    bit     7,h
  31+ 0000 ~                                    jr      z,.Done2c
  32+ 0000 ~                                    ld      a,h
  33+ 0000 ~                                    and     SignMask8Bit
  34+ 0000 ~                                    ld      h,a
  35+ 0000 ~                                    NegHL
  36+ 0000 ~            .Done2c:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              MemSignedTo2C:          MACRO   memfrom
  40+ 0000 ~                                    ld      hl,(memfrom)
  41+ 0000 ~                                    bit     7,h
  42+ 0000 ~                                    jr      z,.Done2c
  43+ 0000 ~                                    ld      a,h
  44+ 0000 ~                                    and     SignMask8Bit
  45+ 0000 ~                                    ld      h,a
  46+ 0000 ~            .Done2c:                ld      (memfrom),hl
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000
  50+ 0000                  ;returns result in H
  51+ 0000              EDiv10Inline:           MACRO
  52+ 0000 ~                                    ld      d,0
  53+ 0000 ~                                    ld      hl,de
  54+ 0000 ~                                    add     hl,hl
  55+ 0000 ~                                    add     hl,de
  56+ 0000 ~                                    add     hl,hl
  57+ 0000 ~                                    add     hl,hl
  58+ 0000 ~                                    add     hl,de
  59+ 0000 ~                                    add     hl,hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              cpHLDE:                 MACRO
  63+ 0000 ~                                    push    hl
  64+ 0000 ~                                    and     a
  65+ 0000 ~                                    sbc     hl,de
  66+ 0000 ~                                    pop     hl
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              cpABSDEHL:              MACRO
  70+ 0000 ~                                    push     hl,,de
  71+ 0000 ~                                    ld      a,h
  72+ 0000 ~                                    and     $7F
  73+ 0000 ~                                    ld      h,a
  74+ 0000 ~                                    ld      a,d
  75+ 0000 ~                                    and     $7F
  76+ 0000 ~                                    ld      d,a
  77+ 0000 ~                                    ex      de,hl
  78+ 0000 ~                                    sbc     hl,de
  79+ 0000 ~                                    pop     hl,,de
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              ; Simple are they both the same setting z if they are
  83+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
  84+ 0000              ; so jp needs to be to a target
  85+ 0000              cpHLEquDE:              MACRO   passedCheck
  86+ 0000 ~                                    ld      a,h
  87+ 0000 ~                                    cp      d
  88+ 0000 ~                                    jp      nz, passedCheck
  89+ 0000 ~                                    ld      a,l
  90+ 0000 ~                                    cp      e
  91+ 0000 ~            .NoTheSame:
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              cpHLEquBC:              MACRO   passedCheck
  95+ 0000 ~                                    ld      a,h
  96+ 0000 ~                                    cp      b
  97+ 0000 ~                                    jp      nz, passedCheck
  98+ 0000 ~                                    ld      a,l
  99+ 0000 ~                                    cp      c
 100+ 0000 ~            .NoTheSame:
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              cpDEEquBC:              MACRO   passedCheck
 104+ 0000 ~                                    ld      a,d
 105+ 0000 ~                                    cp      b
 106+ 0000 ~                                    jp      nz, passedCheck
 107+ 0000 ~                                    ld      a,e
 108+ 0000 ~                                    cp      c
 109+ 0000 ~            .NoTheSame:
 110+ 0000                                      ENDM
 111+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 112+ 0000              cpHLDELeadSign:         MACRO
 113+ 0000 ~                                    ld      a,h
 114+ 0000 ~                                    cp      d
 115+ 0000 ~                                    jr      nz,.FullCompare
 116+ 0000 ~                                    ld      a,l
 117+ 0000 ~                                    cp      e
 118+ 0000 ~                                    ret     z
 119+ 0000 ~            .FullCompare:           ld      a,h
 120+ 0000 ~                                    xor     d
 121+ 0000 ~                                    and     $80
 122+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 123+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 124+ 0000 ~                                    and     $80
 125+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 126+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 127+ 0000 ~            .OppositeSigns:         ld      a,h
 128+ 0000 ~                                    and     $80
 129+ 0000 ~                                    and     $80
 130+ 0000 ~                                    jp      z,.HLGTDE
 131+ 0000 ~            .HLLTDE:                SetCarryFlag
 132+ 0000 ~                                    ret
 133+ 0000 ~            .HLGTDE:                ClearCarryFlag
 134+ 0000 ~                                    ret
 135+ 0000 ~
 136+ 0000 ~            ;Unsigned
 137+ 0000 ~            ;If HL == DE, then Z flag is set.
 138+ 0000 ~            ;If HL != DE, then Z flag is reset.
 139+ 0000 ~            ;If HL <  DE, then C flag is set.
 140+ 0000 ~            ;If HL >= DE, then C flag is reset.
 141+ 0000 ~            ;
 142+ 0000 ~            ;Signed
 143+ 0000 ~            ;If HL == DE, then Z flag is set.
 144+ 0000 ~            ;If HL != DE, then Z flag is reset.
 145+ 0000 ~            ;If HL <  DE, then S and P/V are different.
 146+ 0000 ~            ;If HL >= DE, then S and P/V are the same.
 147+ 0000 ~
 148+ 0000 ~
 149+ 0000 ~            N0equN1byN2div256:      MACRO param1,param2,param3
 150+ 0000 ~                                    ld      a,param3                        ;
 151+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 152+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 153+ 0000 ~                                    ld      d,a
 154+ 0000 ~                                    mul
 155+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 156+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              AequN1xorN2:            MACRO  param1,param2
 160+ 0000 ~                                    ld      a,(param1)
 161+ 0000 ~                                    xor     param2
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 165+ 0000 ~                                    ld      e,speedreg
 166+ 0000 ~                                    ld      hl,(axis)
 167+ 0000 ~                                    ld      a,h
 168+ 0000 ~                                    ClearSignBitA
 169+ 0000 ~                                    ld      d,a
 170+ 0000 ~                                    mul     de
 171+ 0000 ~                                    ld      a,h
 172+ 0000 ~                                    SignBitOnlyA
 173+ 0000 ~                                    ld      b,a;ld      c,a
 174+ 0000 ~                                    ld      h,d;ld      e,d
 175+ 0000 ~                                    ld      c,0;ld      d,0
 176+ 0000                                      ENDM
 177+ 0000
 178+ 0000
 179+ 0000              AddSpeedToVert:         MACRO   vertex
 180+ 0000 ~                                    ld      de,(vertex+1)
 181+ 0000 ~                                    ld      a,(vertex)
 182+ 0000 ~                                    ld      l,a
 183+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 184+ 0000 ~                                    ld      a,l
 185+ 0000 ~                                    ld      (vertex),a
 186+ 0000 ~                                    ld      (vertex+1),de
 187+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
  68  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectSpriteBank: MACRO
  15+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectConsoleBank: MACRO
  19+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectLayer1: 	 MACRO
  23+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer2: 	 MACRO
  27+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectResetUniv:  MACRO
  31+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  32+ 0000                                   ENDM
  33+ 0000
  34+ 0000              MMUSelectShipARead:  MACRO
  35+ 0000 ~                                 add    a,BankUNIVDATA0
  36+ 0000 ~                                 nextreg ShipReadMMU,       a
  37+ 0000                                   ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBank1:  MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  41+ 0000              					 ENDM
  42+ 0000              MMUSelectShipBank2:  MACRO
  43+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  44+ 0000              					 ENDM
  45+ 0000              MMUSelectShipBank3:  MACRO
  46+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  47+ 0000              					 ENDM
  48+ 0000              MMUSelectShipBank4:  MACRO
  49+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  50+ 0000              					 ENDM
  51+ 0000
  52+ 0000              MMUSelectShipBankA   MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    a
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankN:  MACRO value
  57+ 0000 ~            					 nextreg ShipModelMMU,	    value
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectCommander:	 MACRO
  61+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectStockTable: MACRO
  65+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCpySrcA:    MACRO
  69+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcN:    MACRO value
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectSun:        MACRO
  77+ 0000 ~                                 nextreg SunMMU,            BankSunData
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectPlanet:     MACRO
  81+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectUniverseA:  MACRO
  85+ 0000 ~                                 add    a,BankUNIVDATA0
  86+ 0000 ~                                 nextreg UniverseMMU,       a
  87+ 0000                                   ENDM
  88+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  89+ 0000              MMUSelectUnivBankA:  MACRO
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000
  93+ 0000              MMUSelectUniverseN:  MACRO value
  94+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectGalaxyA:    MACRO
  98+ 0000 ~                                 nextreg GalaxyDataMMU,     a
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectGalaxyN:    MACRO value
 102+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 103+ 0000                                   ENDM
 104+ 0000              MMUSelectGalaxyACopy:MACRO
 105+ 0000 ~                                 nextreg UniverseMMU,       a
 106+ 0000                                   ENDM
 107+ 0000
 108+ 0000              MMUSelectUniverseAbs:MACRO value
 109+ 0000 ~                                 nextreg UniverseMMU,       value
 110+ 0000                                   ENDM
 111+ 0000
 112+ 0000              MMUSelectMenuGalCht: MACRO
 113+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 114+ 0000              					 ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuShrCht: MACRO
 117+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuInvent: MACRO
 121+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuSystem: MACRO
 125+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuMarket: MACRO
 129+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuStatus: MACRO
 133+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectViewFront:  MACRO
 137+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectScreenA:    MACRO
 141+ 0000 ~                                 nextreg ScreenBankMMU,		a
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectSound:      MACRO
 145+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 146+ 0000              					 ENDM
# file closed: ./Macros/MMUMacros.asm
  69  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  70  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              ReturnIfZero:           MACRO
  90+ 0000 ~                                    ret     z
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              ReturnIfNegative:       MACRO
  94+ 0000 ~                                    ret     m
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000
  98+ 0000              ReturnIfMemNotZero:     MACRO mem
  99+ 0000 ~                                    ld     a,(mem)
 100+ 0000 ~                                    and     a
 101+ 0000 ~                                    ret    nz
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              ReturnIfAGTEusng:       MACRO value
 105+ 0000 ~                                    cp    value
 106+ 0000 ~                                    ret	 nc
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 110+ 0000 ~                                    ld      a,reg
 111+ 0000 ~                                    cp      value
 112+ 0000 ~                                    ret	    c
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ReturnIfALTNusng:       MACRO value
 116+ 0000 ~                                    cp    value
 117+ 0000 ~                                    ret	 c
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ReturnIfAGTENusng:      MACRO value
 121+ 0000 ~                                    cp    value
 122+ 0000 ~                                    ret	 nc
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfAGTEMemusng:    MACRO value
 126+ 0000 ~                                    ld      hl,value
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    ret	    nc
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              ReturnIfANENusng:       MACRO value
 132+ 0000 ~                                    cp      value
 133+ 0000 ~                                    ret     nz
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              ReturnIfAEqNusng:       MACRO value
 137+ 0000 ~                                    cp      value
 138+ 0000 ~                                    ret     z
 139+ 0000                                      ENDM
 140+ 0000
# file closed: ./Macros/returnMacros.asm
  71  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000              BarrelHLLeft3: MACRO
  47+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  48+ 0000 ~                           push     bc      ; 10
  49+ 0000 ~                           ld       b,3     ; 7
  50+ 0000 ~                           bsrl     de,b    ; 8
  51+ 0000 ~                           pop      bc      ; 10
  52+ 0000 ~                           ex       de,hl   ; 4
  53+ 0000                             ENDM
  54+ 0000
  55+ 0000              BarrelHLRight3: MACRO
  56+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  57+ 0000 ~                           push     bc      ; 10
  58+ 0000 ~                           ld       b,3     ; 7
  59+ 0000 ~                           bsrl     de,b    ; 8
  60+ 0000 ~                           pop      bc      ; 10
  61+ 0000 ~                           ex       de,hl   ; 4
  62+ 0000                             ENDM
  63+ 0000
  64+ 0000              RollDELeft1:   MACRO	; 16 T states
  65+ 0000 ~                           rl  e
  66+ 0000 ~                           rl  d
  67+ 0000                             ENDM
  68+ 0000
  69+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
  70+ 0000 ~            			   sla c
  71+ 0000 ~            			   rl  b
  72+ 0000              			   ENDM
  73+ 0000
  74+ 0000              ShiftMem16Right1:   MACRO memaddr
  75+ 0000 ~                                ld    hl,(memaddr)
  76+ 0000 ~                                srl   h
  77+ 0000 ~                                rr    l
  78+ 0000 ~                                ld    (memaddr),hl
  79+ 0000                                  ENDM
  80+ 0000
  81+ 0000              ShiftMem8Right1:    MACRO memaddr
  82+ 0000 ~                                ld      a,(memaddr)
  83+ 0000 ~                                srl     a
  84+ 0000 ~                                ld      (memaddr),a
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000
  88+ 0000              ShiftMem8Left1A:    MACRO memaddr
  89+ 0000 ~                                ld      a,(memaddr)
  90+ 0000 ~                                sla     a
  91+ 0000 ~                                ld      (memaddr),a
  92+ 0000                                  ENDM
  93+ 0000
# file closed: ./Macros/ShiftMacros.asm
  72  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  73  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  74  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              ClearWarpPressed:       MACRO
 252+ 0000 ~                                    SetMemFalse WarpPressed
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              CoolCabin:              MACRO
 256+ 0000 ~                                    ld      a,(CabinTemperature)
 257+ 0000 ~                                    and     a
 258+ 0000 ~                                    jr      z,.AlreadyCool
 259+ 0000 ~                                    dec     a
 260+ 0000 ~                                    ld      (CabinTemperature),a
 261+ 0000 ~            .AlreadyCool:
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              CoolLasers:             MACRO
 265+ 0000 ~                                    ld      a,(GunTemperature)
 266+ 0000 ~                                    and     a
 267+ 0000 ~                                    jr      z,.AlreadyCool
 268+ 0000 ~                                    dec     a
 269+ 0000 ~                                    ld      (GunTemperature),a
 270+ 0000 ~            .AlreadyCool:
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              ; type 255 is "not fitted"
 274+ 0000
 275+ 0000
 276+ 0000              InitEventCounter:       MACRO
 277+ 0000 ~                                    xor     a
 278+ 0000 ~                                    ld      (EventCounter),a
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000              ClearMissJump:          MACRO
 282+ 0000 ~                                    ld      a,$FF
 283+ 0000 ~                                    ld      (MissJumpFlag),a
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000
 287+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 288+ 0000 ~                                    ld      a,(DrainMem)
 289+ 0000 ~                                    ld      b,a
 290+ 0000 ~                                    ld      a,(SystemMem)
 291+ 0000 ~                                    sub     a,b
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~                                    jr      c,.ZeroSystem
 294+ 0000 ~                                    jp      .ExitPoint
 295+ 0000 ~            .ZeroSystem:            ZeroA
 296+ 0000 ~                                    ld      (SystemMem),a
 297+ 0000 ~            .ExitPoint
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 301+ 0000 ~                                    ld      a,(BoostMem)
 302+ 0000 ~                                    ld      b,a
 303+ 0000 ~                                    ld      a,(SystemMem)
 304+ 0000 ~                                    add     b
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~                                    jr      c, .MaxSystem
 307+ 0000 ~                                    jp      .ExitPoint
 308+ 0000 ~            .MaxSystem:             ld      a,255
 309+ 0000 ~                                    ld      (SystemMem),a
 310+ 0000 ~            .ExitPoint
 311+ 0000                                      ENDM
 312+ 0000
 313+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 314+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 315+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 316+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 317+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 318+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 319+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 320+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 321+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 322+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 323+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 324+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 325+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 326+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 327+ 0000
# file closed: ./Variables/general_variables_macros.asm
  75  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  76  0000
  77  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
  78  0000
  79  0000
  80  0000                  IFNDEF  LASER_V2
  81  0000 ~            UpdateLaserCountersold: MACRO
  82  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
  83  0000 ~                                    dec     a                                               ; .
  84  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
  85  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
  86  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
  87  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
  88  0000 ~                                    dec     a                                               ;       .
  89  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
  90  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
  91  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
  92  0000 ~                                    dec     a
  93  0000 ~                                    ld      (CurrLaserPulseRestCount),a
  94  0000 ~                                    jr      nz,.SkipRestCounter
  95  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
  96  0000 ~            .SkipRestCounter:
  97  0000 ~                                    ENDM
  98  0000                  ENDIF
  99  0000              MessageAt:              MACRO   x,y,message
 100  0000 ~                                    MMUSelectLayer1
 101  0000 ~                                    ld      d,y
 102  0000 ~                                    ld      e,x
 103  0000 ~                                    ld      hl,message
 104  0000 ~                                    call    l1_print_at_wrap
 105  0000                                      ENDM
 106  0000
 107  0000              SetBorder:              MACRO   value
 108  0000 ~                                    MMUSelectLayer1
 109  0000 ~                                    ld          a,value
 110  0000 ~                                    call        l1_set_border
 111  0000                                      ENDM
 112  0000
 113  0000              charactersetaddr		equ 15360
 114  0000              STEPDEBUG               equ 1
 115  0000
 116  0000              TopOfStack              equ $5CCB ;$6100
 117  0000
 118  0000                                      ORG $5DCB;      $6200
 119  5DCB F3           EliteNextStartup:       di
 120  5DCC CD 6E AB     .InitiliseFileIO:       call        GetDefaultDrive
 121  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 122  5DD3              .InitialiseLayerOrder:
 123  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 124  5DD3                                      ; "STARTUP"
 125  5DD3                                      ; Make sure  rom is in page 0 during load
 126  5DD3                                      MMUSelectSpriteBank
 126  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 127  5DD7 CD 94 E5                             call		init_sprites
 128  5DDA                                      MMUSelectLayer2
 128  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129  5DDE CD 0F E0                             call        asm_disable_l2_readwrite
 130  5DE1                                      MMUSelectROMS
 130  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 130  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 131  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 132  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 133  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 134  5DF5 ED 91 68 10                          nextreg     ULA_CONTROL_REGISTER,  %00010000                ; set up ULA CONRTROL may need to change bit 0 at least, but bit 4 is separate extended keys from main matrix
 135  5DF9                                      MMUSelectSound
 135  5DF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 136  5DFD CD 4B E0                             call        InitAudio
 137  5E00 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 138  5E02 ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 139  5E04 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 140  5E08 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 141  5E0C ED 5E                                im	2
 142  5E0E              .GenerateDefaultCmdr:   MMUSelectCommander
 142  5E0E ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 143  5E12 CD 52 E2                             call		defaultCommander
 144  5E15 CD 18 E2                             call        saveCommander
 145  5E18                                      MMUSelectLayer1
 145  5E18 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 146  5E1C CD 80 E0                             call		l1_cls
 147  5E1F 3E 07                                ld			a,7
 148  5E21 CD 9B E0                             call		l1_attr_cls_to_a
 149  5E24                                      SetBorder   $FF
 149  5E24             >                        MMUSelectLayer1
 149  5E24 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 149  5E28 3E FF       >                        ld          a,$FF
 149  5E2A CD A5 E0    >                        call        l1_set_border
 150  5E2D              .InitialiseL2:          MMUSelectLayer2
 150  5E2D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 151  5E31 CD 45 E2                             call 		l2_initialise
 152  5E34              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 152  5E34             >                        MMUSelectLayer1
 152  5E34 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152  5E38 16 00       >                        ld      d,0
 152  5E3A 1E 00       >                        ld      e,0
 152  5E3C 21 81 66    >                        ld      hl,InitialiseMessage
 152  5E3F CD 15 E1    >                        call    l1_print_at_wrap
 153  5E42                                      SetBorder   $01
 153  5E42             >                        MMUSelectLayer1
 153  5E42 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 153  5E46 3E 01       >                        ld          a,$01
 153  5E48 CD A5 E0    >                        call        l1_set_border
 154  5E4B                                      MessageAt   0,8,LoadingSpritesMessage
 154  5E4B             >                        MMUSelectLayer1
 154  5E4B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 154  5E4F 16 08       >                        ld      d,8
 154  5E51 1E 00       >                        ld      e,0
 154  5E53 21 8D 66    >                        ld      hl,LoadingSpritesMessage
 154  5E56 CD 15 E1    >                        call    l1_print_at_wrap
 155  5E59                                      ZeroA
 155  5E59 AF          >                        xor a
 156  5E5A 32 B1 66                             ld          (LoadCounter),a
 157  5E5D              .StreamSpriteData:      MMUSelectSpriteBank
 157  5E5D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 158  5E61 CD 20 E6                             call        load_pattern_files
 159  5E64 CD 44 7E                             call        init_keyboard
 160  5E67              .PostDiag:              ClearForceTransition
 160  5E67 3E FF       >                        ld      a,$FF
 160  5E69 32 87 69    >                        ld      (ScreenTransitionForced),a
 161  5E6C                                      SetBorder   $04
 161  5E6C             >                        MMUSelectLayer1
 161  5E6C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 161  5E70 3E 04       >                        ld          a,$04
 161  5E72 CD A5 E0    >                        call        l1_set_border
 162  5E75                                      MMUSelectSpriteBank
 162  5E75 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 163  5E79 CD AF E5                             call        sprite_diagnostic
 164  5E7C                                      SetBorder   $05
 164  5E7C             >                        MMUSelectLayer1
 164  5E7C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 164  5E80 3E 05       >                        ld          a,$05
 164  5E82 CD A5 E0    >                        call        l1_set_border
 165  5E85 CD 44 7F     .PostDiag2:             call        WaitForAnyKey
 166  5E88                                      MMUSelectSpriteBank
 166  5E88 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 167  5E8C CD 9F E5                             call        sprite_diagnostic_clear
 168  5E8F 3E 10        TidyDEBUG:              ld          a,16
 169  5E91 32 25 68                             ld          (TidyCounter),a
 170  5E94 AF           TestText:               xor			a
 171  5E95 32 0A 81                             ld      (JSTX),a
 172  5E98              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 172  5E98 3E FF       >                        ld      a,$FF
 172  5E9A 32 8F 82    >                        ld      (SpaceStationSafeZone),a
 173  5E9D                                      SetBorder   $06
 173  5E9D             >                        MMUSelectLayer1
 173  5E9D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 173  5EA1 3E 06       >                        ld          a,$06
 173  5EA3 CD A5 E0    >                        call        l1_set_border
 174  5EA6
 175  5EA6              ;.ClearLayer2Buffers:    DoubleBufferIfPossible
 176  5EA6              ;                        DoubleBufferIfPossible
 177  5EA6              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 178  5EA6                                      SetBorder   $07
 178  5EA6             >                        MMUSelectLayer1
 178  5EA6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 178  5EAA 3E 07       >                        ld          a,$07
 178  5EAC CD A5 E0    >                        call        l1_set_border
 179  5EAF              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 179  5EAF             >                        MMUSelectLayer1
 179  5EAF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179  5EB3 16 18       >                        ld      d,24
 179  5EB5 1E 00       >                        ld      e,0
 179  5EB7 21 9C 66    >                        ld      hl,InitialisingGalaxies
 179  5EBA CD 15 E1    >                        call    l1_print_at_wrap
 180  5EBD CD 88 69                             call		ResetUniv                       ; Reset ship data
 181  5EC0 CD B0 69                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 182  5EC3 CD D9 69                             call        SeedAllGalaxies
 183  5EC6                                      MMUSelectSpriteBank
 183  5EC6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 184  5ECA CD 8A E5                             call        sprite_cls_all
 185  5ECD                                      MMUSelectLayer1
 185  5ECD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 186  5ED1 CD 80 E0                             call		l1_cls
 187  5ED4                                      SetBorder   $00
 187  5ED4             >                        MMUSelectLayer1
 187  5ED4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 187  5ED8 3E 00       >                        ld          a,$00
 187  5EDA CD A5 E0    >                        call        l1_set_border
 188  5EDD                                      IFDEF SKIPATTRACT
 189  5EDD ~                                        jp DefaultCommander
 190  5EDD                                      ENDIF
 191  5EDD F3           StartAttractMode:       di                                          ; we are changing interrupts
 192  5EDE                                      MMUSelectSound
 192  5EDE ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 193  5EE2 CD B7 E0                             call        InitAudioMusic
 194  5EE5 21 0D B2                             ld          hl,AttractInterrrupt
 195  5EE8 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 196  5EEB CD 6F 77                             call        AttractModeInit
 197  5EEE FB                                   ei
 198  5EEF CD C4 77                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 199  5EF2 F3                                   di                                          ; set up for main
 200  5EF3 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 201  5EF6 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 202  5EF9                                      MMUSelectSound
 202  5EF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 203  5EFD CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 204  5F00                                      IFDEF MAIN_INTERRUPTENABLE
 205  5F00 ~                                        ei
 206  5F00                                      ENDIF
 207  5F00                                      JumpIfAIsZero  SkipDefaultCommander
 207  5F00 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 207  5F01 CA 0E 5F    >                        jp	    z, SkipDefaultCommander
 208  5F04              DefaultCommander:       MMUSelectCommander
 208  5F04 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 209  5F08 CD 52 E2                             call		defaultCommander
 210  5F0B C3 0E 5F                             jp          InitialiseMainLoop
 210  5F0E
 211  5F0E              SkipDefaultCommander:
 212  5F0E              ;                        call    FindNextFreeSlotInA
 213  5F0E              ;                        ld      b,a
 214  5F0E              ;                        ld      a,13 ;Coriolis station
 215  5F0E              ;                        call    InitialiseShipAUnivB
 216  5F0E              ;                        xor     a
 217  5F0E CD 6B 86     InitialiseMainLoop:     call    InitMainLoop
 218  5F11              ;..MAIN GAME LOOP..................................................................................................................
 219  5F11              ; MACRO BLOCKS.....................................................................................................................
 220  5F11              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 221  5F11
 222  5F11
 223  5F11
 224  5F11              ; if beam on count > 0
 225  5F11              ;    then beam on count --
 226  5F11              ;         if beam on count = 0
 227  5F11              ;            then beam off count = beam off
 228  5F11              ; if beam off > 0
 229  5F11              ;    then beam off --
 230  5F11              ;         if beam off = 0 and pulse rate count = max count
 231  5F11              ;            then pulse rest count = pulse rest
 232  5F11              ; if pulse rest > 0 then pulse rest --
 233  5F11              ;    if pulse rest = 0
 234  5F11              ;       then pulse rate count = 0
 235  5F11
 236  5F11
 237  5F11              ; counter logic
 238  5F11              ;    if beam on count > 0 then beam on count --
 239  5F11              ;    if beam on = 0 then
 240  5F11              ;       if beam off count >0 then beam off count --
 241  5F11              ;       if beam off count = 0 them
 242  5F11              ;          if pulse rest count > 0 then pulse rest count --
 243  5F11              ;             if reset count = 0 then pulse rate count = 0
 244  5F11              ; shoting logic
 245  5F11              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 246  5F11              ;       then  if fire pressed is OK
 247  5F11              ;                if not beam type
 248  5F11              ;                   then pulse rate count ++
 249  5F11              ;                        if pulse rate count < pulse max count
 250  5F11              ;                           then pulse on count = pulse on time
 251  5F11              ;                                pulse off count = pulse off time
 252  5F11              ;                                pulse rest count = pulse rest time
 253  5F11              ;                           else pulse rest count = pulse rest time
 254  5F11              ;                                pulse rate count, pulse on count, pulse off count = 0
 255  5F11              ;                   else pulse on count = $FF
 256  5F11              ;                        pulse off time , rest time = 0
 257  5F11
 258  5F11              ;..................................................................................................................................
 259  5F11                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5F11
   2+ 5F11                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 5F11                  DEFINE  MAINLOOP_ECM
   4+ 5F11                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 5F11              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 5F11              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
   7+ 5F11                  DEFINE  MAINLOOP_INPUTHANDLER
   8+ 5F11                  DEFINE  MAINLOOP_EVENTHANDLER
   9+ 5F11                  DEFINE  MAINLOOP_RECHARGE
  10+ 5F11                  DEFINE  MAINLOOP_LAUNCHMISSILE
  11+ 5F11                  DEFINE  MAINLOOP_UPDATEUNIVERSE
  12+ 5F11                  DEFINE  MAINLOOP_SUN_RENDER 1
  13+ 5F11                  DEFINE  MAINLOOP_PLANET_RENDER 1
  14+ 5F11                  DEFINE  MAINLOOP_MODEL_RENDER    1
  15+ 5F11                  DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  16+ 5F11                  DEFINE  MAINLOOP_WARP_ENABLED 1
  17+ 5F11
  18+ 5F11              ;.................................................................................................................................
  19+ 5F11 CD 3B 88     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
  20+ 5F14                              IFDEF LASER_V2
  21+ 5F14 CD 02 61                             call    LaserBeamV2
  22+ 5F17                              ELSE
  23+ 5F17 ~                                    UpdateLaserOnCounter
  24+ 5F17 ~                                    UpdateLaserOffCounter
  25+ 5F17 ~                                    UpdateLaserRestCounter
  26+ 5F17 ~                                    CoolLasers
  27+ 5F17                              ENDIF
  28+ 5F17                              IFDEF MAINLOOP_ECM
  29+ 5F17                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F17 3A 97 82     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F1A A7                                   and     a
   3++5F1B CA 2D 5F                             jp      z, .DonePlayerECM
   4++5F1E 3D                                   dec     a
   5++5F1F 32 97 82                             ld      (PlayerECMActiveCount),a
   6++5F22 3A 23 85                             ld      a,(PlayerEnergy)
   7++5F25 A7                                   and     a
   8++5F26 CA 2D 5F                             jp      z, .DonePlayerECM
   9++5F29 3D                                   dec     a
  10++5F2A 32 23 85                             ld      (PlayerEnergy),a
  11++5F2D              .DonePlayerECM:
  12++5F2D 3A 08 81     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F30 A7                                   and     a
  14++5F31 CA 38 5F                             jp      z, .DoneCommonECM
  15++5F34 3D                                   dec     a
  16++5F35 32 08 81                             ld      (ECMCountDown),a
  17++5F38              .DoneCommonECM:
  18++5F38
# file closed: ././GameEngine/MainLoop_ECM.asm
  30+ 5F38                              ENDIF
  31+ 5F38                              IFDEF MAINLOOP_WARP_ENABLED
  32+ 5F38 3A A8 83                             ld      a,(WarpCooldown)
  33+ 5F3B A7                                   and     a
  34+ 5F3C CA 43 5F                             jp      z,.AlreadyCool
  35+ 5F3F 3D                                   dec     a
  36+ 5F40 32 A8 83                             ld      (WarpCooldown),a
  37+ 5F43              .AlreadyCool
  38+ 5F43                              ENDIF
  39+ 5F43                              IFDEF MAINLOOP_KEYBOARDSCAN
  40+ 5F43 CD 50 7E                             call    scan_keyboard                                           ; perform the physical input scan
  41+ 5F46                              ENDIF
  42+ 5F46              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  43+ 5F46                              IFDEF MAINLOOP_DEMOSHIPS
  44+ 5F46 ~            DemoOfShipsDEBUG:       call    TestForNextShip
  45+ 5F46                              ENDIF
  46+ 5F46              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  47+ 5F46 3E 00        InputBlockerCheck:      ld      a,$0
  48+ 5F48                              IFDEF MAINLOOP_INPUTHANDLER
  49+ 5F48                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  49+ 5F48 FE 01       >                        cp     $01
  49+ 5F4A CA 74 5F    >                        jp      z,SkipInputHandlers
  50+ 5F4D                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  50+ 5F4D 3A CC 83    >                        ld      a,(TextInputMode)
  50+ 5F50 A7          >                        and     a
  50+ 5F51 CA 74 5F    >                        jp      z, SkipInputHandlers
  51+ 5F54 CD AE 6A                             call    ViewKeyTest
  52+ 5F57 CD 94 67                             call    TestPauseMode
  53+ 5F5A 3A A1 83                             ld      a,(GamePaused)
  54+ 5F5D FE 00                                cp      0
  55+ 5F5F C2 11 5F                             jp      nz,MainLoop
  56+ 5F62 CD 43 80                             call    MovementKeyTest
  57+ 5F65              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  58+ 5F65                              ENDIF
  59+ 5F65 3A 73 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
  60+ 5F68                                      JumpIfAIsZero     TestAreWeDocked
  60+ 5F68 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  60+ 5F69 CA 74 5F    >                        jp	    z, TestAreWeDocked
  61+ 5F6C              ;.. Handle displaying correct screen ..............................................................................................
  62+ 5F6C 3E 00        HandleBankSelect:       ld      a,$00
  63+ 5F6E                                      MMUSelectScreenA
  63+ 5F6E ED 92 56    >                     nextreg ScreenBankMMU,		a
  64+ 5F71 CD 00 00     CallCursorRoutine:      call    $0000
  65+ 5F74              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  66+ 5F74              ;.. Also end up here if we have the screen input blocker set
  67+ 5F74              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
  68+ 5F74              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
  69+ 5F74              SkipInputHandlers:
  70+ 5F74              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  71+ 5F74              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  71+ 5F74 3A A0 83    >                        ld  a,(DockedFlag)
  71+ 5F77 FE 00       >                        cp  StateNormal
  71+ 5F79 C2 B8 60    >                        jp  nz,UpdateLoop
  72+ 5F7C                              IFDEF MAINLOOP_EVENTHANDLER
  73+ 5F7C 21 A9 83     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  74+ 5F7F 35                                   dec     (hl)
  75+ 5F80 CC C8 61     .ProcessEvent:          call    z,LoopEventTriggered
  76+ 5F83                              ENDIF
  77+ 5F83                              IFDEF MAINLOOP_RECHARGE
  78+ 5F83 3A A9 83     .ProcessRecharge:       ld      a,(EventCounter)
  79+ 5F86 E6 07                                and     7
  80+ 5F88 CC DB 86                             call    z, RechargeShip
  81+ 5F8B                              ENDIF
  82+ 5F8B                              IFDEF MAINLOOP_LAUNCHMISSILE
  83+ 5F8B              .PlayerMissileLaunch:   AnyMissilesLeft
  83+ 5F8B 3A 96 82    >                        ld      a,(NbrMissiles)
  83+ 5F8E A7          >                        and     a
  84+ 5F8F 28 08                                jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  85+ 5F91                                      IsMissileLaunchFlagged
  85+ 5F91 3A 26 85    >                        ld      a,(MissileTargettingFlag)
  85+ 5F94 E6 80       >                        and     $80
  86+ 5F96 CC 39 62                             call    z,  LaunchPlayerMissile
  87+ 5F99              .NoMissiles
  88+ 5F99                              ENDIF
  89+ 5F99              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  90+ 5F99              ;.. we do one universe slot each loop update ......................................................................................
  91+ 5F99              ;.. First update Sun...............................................................................................................
  92+ 5F99                              IFDEF MAINLOOP_WARP_ENABLED
  93+ 5F99              ProcessWarp:            JumpIfMemFalse  WarpPressed, .NoWarp
  93+ 5F99 3A CF 83    >                        ld      a,(WarpPressed)
  93+ 5F9C A7          >                        and     a
  93+ 5F9D C2 26 60    >                        jp      nz, .NoWarp
  94+ 5FA0              .WarpIsPressed:         SetMemFalse     WarpPressed                               ; clear and acknowlege
  94+ 5FA0 3E FF       >                        ld      a,$FF
  94+ 5FA2 32 CF 83    >                        ld      (WarpPressed),a
  95+ 5FA5                                      JumpIfMemZero   WarpCooldown, .WarpDriveCool
  95+ 5FA5 3A A8 83    >                        ld  a,(WarpCooldown)
  95+ 5FA8 A7          >                        and a
  95+ 5FA9 CA AF 5F    >                        jp  z,.WarpDriveCool
  96+ 5FAC              ;Need logic for jump drive malfunction
  97+ 5FAC              .JumpDriveHot:          ; call bong jump drive hot
  98+ 5FAC                                      ; flash jump drive status icon
  99+ 5FAC C3 26 60                             jp      .NoWarp
 100+ 5FAF              .WarpDriveCool:         JumpIfMemFalse    SpaceStationSafeZone, .NotInSpaceStationRange
 100+ 5FAF 3A 8F 82    >                        ld      a,(SpaceStationSafeZone)
 100+ 5FB2 A7          >                        and     a
 100+ 5FB3 C2 B9 5F    >                        jp      nz, .NotInSpaceStationRange
 101+ 5FB6              .MassLocked:            ; call bong
 102+ 5FB6                                      ; message mass locked
 103+ 5FB6 C3 26 60                             jp      .NoWarp
 104+ 5FB9 CD BD 87     .NotInSpaceStationRange:call    AreShipsPresent
 105+ 5FBC 30 F8                                jr      nc,     .MassLocked
 106+ 5FBE              .NoShipsInSystem:      ;MMUSelectPlanet
 107+ 5FBE                                     ;ld      a,(PBnKzsgn)
 108+ 5FBE                                     ;and     $80
 109+ 5FBE                                     ;jp      z,.JumpToPlanetCheck
 110+ 5FBE                                      MMUSelectSun
 110+ 5FBE ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 111+ 5FC2 3A 18 C0                             ld      a,(SBnKzsgn)
 112+ 5FC5 E6 80                                and     $80
 113+ 5FC7 CA F5 5F                             jp      z,.JumpToSunCheck
 114+ 5FCA              .NotCorrectFacing:      ;       call bong, align with body
 115+ 5FCA C3 26 60                             jp      .NoWarp
 116+ 5FCD 3A 17 C0     .JumpToPlanetCheck:     ld      a,(PBnKzhi)
 117+ 5FD0                                      JumpIfAGTENusng  2, .PlanetRangeOK
 117+ 5FD0 FE 02       >                        cp     2
 117+ 5FD2 D2 E8 5F    >                        jp		nc,.PlanetRangeOK
 118+ 5FD5 3A 14 C0                             ld      a,(PBnKyhi)
 119+ 5FD8                                      JumpIfAGTENusng  2, .PlanetRangeOK
 119+ 5FD8 FE 02       >                        cp     2
 119+ 5FDA D2 E8 5F    >                        jp		nc,.PlanetRangeOK
 120+ 5FDD 3A 11 C0                             ld      a,(PBnKxhi)
 121+ 5FE0                                      JumpIfAGTENusng  2, .PlanetRangeOK
 121+ 5FE0 FE 02       >                        cp     2
 121+ 5FE2 D2 E8 5F    >                        jp		nc,.PlanetRangeOK
 122+ 5FE5 C3 B6 5F                             jp      .MassLocked
 123+ 5FE8 CD BA C0     .PlanetRangeOK:         call    WarpPlanetCloser
 124+ 5FEB                                      MMUSelectSun
 124+ 5FEB ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 125+ 5FEF CD C4 C1                             call    WarpSunFurther
 126+ 5FF2 C3 14 60                             jp      .MoveJunk
 127+ 5FF5 3A 18 C0     .JumpToSunCheck:        ld      a,(SBnKzsgn)
 128+ 5FF8 21 12 C0                             ld      hl,SBnKxsgn
 129+ 5FFB B6                                   or      (hl)
 130+ 5FFC 21 15 C0                             ld      hl,SBnKysgn
 131+ 5FFF B6                                   or      (hl)
 132+ 6000 E6 7F                                and     SignMask8Bit
 133+ 6002                                      JumpIfAGTENusng  2, .SunRangeOK
 133+ 6002 FE 02       >                        cp     2
 133+ 6004 D2 0A 60    >                        jp		nc,.SunRangeOK
 134+ 6007 C3 B6 5F                             jp      .MassLocked
 135+ 600A CD BB C1     .SunRangeOK:            call    WarpSunCloser
 136+ 600D                                      MMUSelectPlanet
 136+ 600D ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 137+ 6011 CD C3 C0                             call    WarpPlanetFurther
 138+ 6014 CD 78 87     .MoveJunk:              call    ClearJunk;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
 139+ 6017 3E 5A                                ld      a,WarpCoolDownPeriod
 140+ 6019 32 A8 83                             ld      (WarpCooldown),a
 141+ 601C                                      MMUSelectLayer1
 141+ 601C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 142+ 6020 CD BA 61                             call    WarpSFX             ; Do the visual SFX based on facing
 143+ 6023 C3 2A 60                             jp      .DoneWarp
 144+ 6026              .NoWarp:                MMUSelectLayer1
 144+ 6026 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 145+ 602A              .DoneWarp:
 146+ 602A                              ENDIF
 147+ 602A 3E 00        UpdateShipsControl:     ld      a,0
 148+ 602C A7                                   and     a
 149+ 602D                  IFDEF MAINLOOP_UPDATEUNIVERSE
 150+ 602D CC FF 63     .UpdateShips:           call    z, UpdateUniverseObjects
 151+ 6030                  ENDIF
 152+ 6030                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
 152+ 6030 3A 87 69    >                        ld  a,(ScreenTransitionForced)
 152+ 6033 FE FF       >                        cp  $FF
 152+ 6035 C2 BF 62    >                        jp  nz,BruteForceChange
 153+ 6038 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
 154+ 603A                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
 154+ 603A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 154+ 603B CA B8 60    >                        jp	    z, UpdateLoop
 155+ 603E              ;..Processing a view...............................................................................................................
 156+ 603E              ;..Display any message ............................................................................................................
 157+ 603E              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 157+ 603E 2A A6 83    >                        ld      hl,(InnerHyperCount)
 157+ 6041 7C          >                        ld      a,h
 157+ 6042 B5          >                        or      l
 157+ 6043 28 03       >                        jr      z, .HandleMessages
 158+ 6045 CD 33 75                             call    HyperSpaceMessage
 159+ 6048              .HandleMessages:        AnyMessagesMacro  .NoMessages
 159+ 6048 3A 12 81    >                        ld      a, (MessageCount)
 159+ 604B A7          >                        and     a
 159+ 604C 28 06       >                        jr      z, .NoMessages
 160+ 604E CD 15 75                             call    DisplayCurrentMessage
 161+ 6051 CD F4 74                             call    UpdateMessageTimer
 162+ 6054
 163+ 6054              .NoMessages:            MMUSelectLayer2
 163+ 6054 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ 6058 21 CA 83     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 165+ 605B 35                                   dec     (hl)
 166+ 605C CA 6C 60                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 167+ 605F FA 6A 60                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 168+ 6062              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 168+ 6062 3E FF       >                        ld      a,$FF
 168+ 6064 32 CB 83    >                        ld      (ConsoleRedrawFlag),a
 169+ 6067 C3 76 60                             jp      .JustViewPortCLS
 170+ 606A 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 171+ 606C              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 171+ 606C AF          >                        xor     a
 171+ 606D 32 CB 83    >                        ld      (ConsoleRedrawFlag),a
 172+ 6070 CD 0E E2                             call    l2_cls                                                  ; Clear layer 2 for graphics
 173+ 6073 C3 79 60                             jp      .ViewPortCLSDone
 174+ 6076 CD 8E E1     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 175+ 6079              .ViewPortCLSDone:
 176+ 6079                                      MMUSelectLayer1
 176+ 6079 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 177+ 607D              .UpdateSun:             MMUSelectSun
 177+ 607D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 178+ 6081              .DEBUGFORCE:
 179+ 6081                                     ;ld          hl,$0081
 180+ 6081                                     ;ld          (SBnKxlo),hl
 181+ 6081                                     ;ld          hl,$0001
 182+ 6081                                     ;ld          (SBnKylo),hl
 183+ 6081                                     ; ld          hl,$0160
 184+ 6081                                     ; ld          (SBnKzlo),hl
 185+ 6081                                      ;ld          a,$80
 186+ 6081                                      ;ld          (SBnKxsgn),a
 187+ 6081                                      ;ld          (SBnKysgn),a
 188+ 6081                                     ; ZeroA
 189+ 6081                                    ;  ld          (SBnKzsgn),a
 190+ 6081                  IFDEF   MAINLOOP_SUN_RENDER
 191+ 6081 CD 21 C7                                 call    SunUpdateAndRender
 192+ 6084                  ENDIF
 193+ 6084              .UpdatePlanet:          MMUSelectPlanet
 193+ 6084 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 194+ 6088                  IFDEF   MAINLOOP_PLANET_RENDER
 195+ 6088 CD 52 C3                                 call    PlanetUpdateAndRender
 196+ 608B                  ENDIF
 197+ 608B              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 198+ 608B 3E DF        DrawDustForwards:       ld     a,$DF
 199+ 608D 32 87 F0                             ld     (line_gfx_colour),a
 200+ 6090              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 200+ 6090 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 201+ 6094 CD 0E 7B     DustUpdateRoutine:      call   DustForward                                              ; This needs to be self modifying
 202+ 6097              ;ProcessSun:             call    DrawForwardSun
 203+ 6097                          IFDEF   LASER_V2
 204+ 6097              ProcessLaser:           MMUSelectSpriteBank
 204+ 6097 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 205+ 609B                                      JumpIfMemFalse LaserBeamOn, .NoLaser
 205+ 609B 3A 3E 85    >                        ld      a,(LaserBeamOn)
 205+ 609E A7          >                        and     a
 205+ 609F C2 AB 60    >                        jp      nz, .NoLaser
 206+ 60A2 CD 3E E3     .FireLaser:             call    sprite_laser_show
 207+ 60A5 CD 9F 85                             call    LaserDrainSystems
 208+ 60A8 C3 AE 60                             jp      ProcessPlanet
 209+ 60AB CD DC E4     .NoLaser:               call    sprite_laser_hide
 210+ 60AE                          ELSE
 211+ 60AE ~            ProcessLaser:           ld      a,(CurrLaserPulseRate)
 212+ 60AE ~                                    JumpIfAIsNotZero .CheckForPulse
 213+ 60AE ~                                    JumpIfMemFalse FireLaserPressed, .NoLaser
 214+ 60AE ~                                    jp      .FireLaser
 215+ 60AE ~            .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 216+ 60AE ~            .FireLaser:             MMUSelectSpriteBank
 217+ 60AE ~                                    call    sprite_laser_show
 218+ 60AE ~                                    call    LaserDrainSystems
 219+ 60AE ~                                    jp      ProcessPlanet
 220+ 60AE ~            .NoLaser:               MMUSelectSpriteBank
 221+ 60AE ~                                    call    sprite_laser_hide
 222+ 60AE                          ENDIF
 223+ 60AE              ProcessPlanet:
 224+ 60AE                  IFDEF   MAINLOOP_MODEL_RENDER
 225+ 60AE CD F7 65     ProcessShipModels:      call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 226+ 60B1                  ENDIF
 227+ 60B1                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 228+ 60B1                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 229+ 60B1                                      ; now will CLS bottom thrid
 230+ 60B1                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 230+ 60B1 3A CB 83    >                        ld      a,(ConsoleRedrawFlag)
 230+ 60B4 A7          >                        and     a
 230+ 60B5 CC 10 6D    >                        call    z, UpdateConsole
 231+ 60B8              ;..If we were not in views then we were in display screens/menus...................................................................
 232+ 60B8              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 232+ 60B8 3A C5 60    >                        ld  a,(ScreenLoopJP+1)
 232+ 60BB A7          >                        and a
 232+ 60BC CA C7 60    >                        jp  z,LoopRepeatPoint
 233+ 60BF              ;..This is the screen update routine for menus.....................................................................................
 234+ 60BF              ;.. Also used by transition routines
 235+ 60BF 3E 00        ScreenLoopBank:         ld      a,$0
 236+ 60C1                                      MMUSelectScreenA
 236+ 60C1 ED 92 56    >                     nextreg ScreenBankMMU,		a
 237+ 60C4 CD 00 00     ScreenLoopJP:           call    $0000
 238+ 60C7 3A A0 83     LoopRepeatPoint:        ld      a,(DockedFlag)
 239+ 60CA              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 239+ 60CA FE FD       >                        cp     StateCompletedLaunch
 239+ 60CC CA E6 60    >                        jp      z,WeHaveCompletedLaunch
 240+ 60CF                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 240+ 60CF FE FE       >                        cp     StateInTransition
 240+ 60D1 CA A4 62    >                        jp      z,WeAreInTransition
 241+ 60D4                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 241+ 60D4 FE FC       >                        cp     StateHJumping
 241+ 60D6 CA EC 60    >                        jp      z,WeAreHJumping
 242+ 60D9                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 242+ 60D9 FE FB       >                        cp     StateHEntering
 242+ 60DB CA FA 60    >                        jp      z,WeAreHEntering
 243+ 60DE                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 243+ 60DE FE FA       >                        cp     StateCompletedHJump
 243+ 60E0 CA 5C 61    >                        jp      z,WeHaveCompletedHJump
 244+ 60E3
 245+ 60E3 C3 A4 62                             jp  DoubleBufferCheck
 246+ 60E6 CD EA 69     WeHaveCompletedLaunch:  call    LaunchedFromStation
 247+ 60E9 C3 A4 62                             jp      DoubleBufferCheck
 248+ 60EC CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 249+ 60EF DA A4 62                             jp      c,DoubleBufferCheck
 250+ 60F2 3E FB                                ld      a,StateHEntering
 251+ 60F4 32 A0 83                             ld      (DockedFlag),a
 252+ 60F7 C3 A4 62                             jp      DoubleBufferCheck
 253+ 60FA 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 254+ 60FC 32 A0 83                             ld      (DockedFlag),a
 255+ 60FF C3 A4 62                             jp      DoubleBufferCheck
 256+ 6102
 257+ 6102              ; laser duration goign below 0 for some reason
 258+ 6102              ; if laser is on
 259+ 6102              ;    if laser duration = master duration - do sfx
 260+ 6102              ;    laser duration ---
 261+ 6102              ;    if laser duration = 0
 262+ 6102              ;          **should set beam off***
 263+ 6102              ;       curr burst count --
 264+ 6102              ;       if busrt count = 0
 265+ 6102              ;          set cooldown to post pulserests
 266+ 6102              ;       else
 267+ 6102              ;          set cooldown to 0
 268+ 6102              ;          pause = pulse off time
 269+ 6102              ;    else
 270+ 6102              ;       return
 271+ 6102              ;  else
 272+ 6102              ;     if burst count <> 0
 273+ 6102              ;        current burst pause --
 274+ 6102              ;        return if not zero
 275+ 6102              ;        set laser beam on
 276+ 6102              ;        return
 277+ 6102              ;      else
 278+ 6102              ;         cooldown-- if not zero
 279+ 6102
 280+ 6102              LaserBeamV2:            JumpIfMemFalse LaserBeamOn, .LaserIsOff                          ; If laser is not on then skip
 280+ 6102 3A 3E 85    >                        ld      a,(LaserBeamOn)
 280+ 6105 A7          >                        and     a
 280+ 6106 C2 38 61    >                        jp      nz, .LaserIsOff
 281+ 6109 21 3B 85     .LaserIsOn:             ld          hl,CurrLaserPulseOnTime
 282+ 610C 3A 3F 85                             ld          a,(CurrLaserDuration)
 283+ 610F BE                                   cp          (hl)                                                ; if duration just started
 284+ 6110                                      ;call        z, SoundLaserFiring                                ; queue sound
 285+ 6110 3D                                   dec         a
 286+ 6111 32 3F 85                             ld          (CurrLaserDuration),a                               ; if duration is 0
 287+ 6114                                      ;break
 288+ 6114                                      ReturnIfANotZero                                                ; the do the end of pulse
 288+ 6114 A7          >                        and     a
 288+ 6115 C0          >                        ret     nz
 289+ 6116              .EndOfPulse:            SetMemFalse LaserBeamOn
 289+ 6116 3E FF       >                        ld      a,$FF
 289+ 6118 32 3E 85    >                        ld      (LaserBeamOn),a
 290+ 611B 3A 43 85                             ld          a,(CurrLaserBurstCount)
 291+ 611E 3D                                   dec         a
 292+ 611F 32 43 85                             ld          (CurrLaserBurstCount),a                             ; if we have run out of
 293+ 6122                                      JumpIfAIsNotZero    .SkipBurstEnd                               ; pulses then
 293+ 6122 A7          >                        and     a
 293+ 6123 C2 2D 61    >                        jp	    nz,.SkipBurstEnd
 294+ 6126              .EndOfBurst:            ldCopyByte  CurrLaserPulseRest,  CurrentCooldown                ; main cool down
 294+ 6126 3A 3D 85    >                        ld       a,(CurrLaserPulseRest)
 294+ 6129 32 41 85    >                        ld       (CurrentCooldown),a
 295+ 612C C9                                   ret
 296+ 612D              .SkipBurstEnd:          SetMemZero  CurrentCooldown                                     ; else its just pulse
 296+ 612D AF          >                        xor     a
 296+ 612E 32 41 85    >                        ld      (CurrentCooldown),a
 297+ 6131                                      ldCopyByte  CurrLaserPulseOffTime,  CurrentBurstPause           ; cooldown
 297+ 6131 3A 3C 85    >                        ld       a,(CurrLaserPulseOffTime)
 297+ 6134 32 40 85    >                        ld       (CurrentBurstPause),a
 298+ 6137 C9           .SkipPulseEnd:          ret
 299+ 6138 3A 43 85     .LaserIsOff:            ld          a,(CurrLaserBurstCount)
 300+ 613B                                      JumpIfAIsZero .FullCool
 300+ 613B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ 613C CA 52 61    >                        jp	    z, .FullCool
 301+ 613F 3A 40 85     .BurstCool:             ld          a,(CurrentBurstPause)
 302+ 6142 3D                                   dec         a
 303+ 6143 32 40 85                             ld          (CurrentBurstPause),a
 304+ 6146 C0                                   ret         nz
 305+ 6147                                      SetMemTrue  LaserBeamOn
 305+ 6147 AF          >                        xor     a
 305+ 6148 32 3E 85    >                        ld      (LaserBeamOn),a
 306+ 614B                                      ldCopyByte  CurrLaserPulseOnTime, CurrLaserDuration
 306+ 614B 3A 3B 85    >                        ld       a,(CurrLaserPulseOnTime)
 306+ 614E 32 3F 85    >                        ld       (CurrLaserDuration),a
 307+ 6151 C9                                   ret
 308+ 6152 3A 41 85     .FullCool:              ld          a,(CurrentCooldown)
 309+ 6155                                      ReturnIfAIsZero
 309+ 6155 A7          >                        and     a
 309+ 6156 C8          >                        ret     z
 310+ 6157 3D                                   dec         a
 311+ 6158 32 41 85                             ld          (CurrentCooldown),a
 312+ 615B C9                                   ret
 313+ 615C
 314+ 615C              ; to create planet position
 315+ 615C              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 316+ 615C              ;       take result and divide by 2 then store in x and y sign
 317+ 615C              ;
 318+ 615C              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 319+ 615C              ;       take seed 6 AND %00000011 and store in x sign and y sign
 320+ 615C              ;       set pitch and roll to 0
 321+ 615C              ;
 322+ 615C              ;
 323+ 615C              ;
 324+ 615C              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 325+ 615C 3A 76 82     WeHaveCompletedHJump:   ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 326+ 615F                                      MMUSelectGalaxyA
 326+ 615F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 327+ 6162 2A 8B 82                             ld      hl,(TargetSystemX)
 328+ 6165 22 89 82                             ld      (PresentSystemX),hl
 329+ 6168 44                                   ld      b,h
 330+ 6169 4D                                   ld      c,l
 331+ 616A                                      CorrectPostJumpFuel
 331+ 616A 3A 04 88    >                        ld      a,(Fuel)
 331+ 616D 21 AB 82    >                        ld      hl,Distance
 331+ 6170 96          >                        sub     a,(hl)
 331+ 6171 32 04 88    >                        ld      (Fuel),a
 332+ 6174                                      ForceTransition ScreenFront            ; This will also trigger stars
 332+ 6174 3E 09       >                        ld      a,ScreenFront
 332+ 6176 32 87 69    >                        ld      (ScreenTransitionForced), a
 333+ 6179 3E 00                                ld      a,$00
 334+ 617B 32 90 82                             ld      (ExtraVesselsCounter),a
 335+ 617E 32 A0 83                             ld      (DockedFlag),a
 336+ 6181 CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 337+ 6184 CD B9 88                             call    copy_working_to_system         ; and propogate copies of seeds
 338+ 6187 CD B1 88                             call    copy_working_to_galaxy         ; .
 339+ 618A CD 9F 89                             call    get_planet_data_working_seed   ; sort out system data
 340+ 618D                                      ;call    GetDigramGalaxySeed           ; .
 341+ 618D                                      MMUSelectStockTable                    ; .
 341+ 618D ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 342+ 6191 CD AA E0                             call    generate_stock_market          ; generate new prices
 343+ 6194 CD 31 87                             call    ClearUnivSlotList              ; clear out any ships
 344+ 6197 CD C9 85                             call    ResetPlayerShip
 345+ 619A                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 345+ 619A 21 98 82    >                        ld      hl,FugitiveInnocentStatus
 345+ 619D CB 3E       >                        srl     (hl)
 346+ 619F                                      MMUSelectSun
 346+ 619F ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 347+ 61A3 CD 73 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 348+ 61A6                                      MMUSelectPlanet
 348+ 61A6 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 349+ 61AA CD CC C0                             call    CreatePlanet
 350+ 61AD              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 351+ 61AD              ;TODO.CreateSun:             call    SetSunSlot
 352+ 61AD              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 353+ 61AD              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 354+ 61AD              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 355+ 61AD              ;;TODO                        call    CopyBodyToUniverse
 356+ 61AD              ;;TODO                        call    CreateSun
 357+ 61AD              ;;TODOCreatePlanet:          call    SetPlanetSlot
 358+ 61AD              ;;TODO                       MMUSelectShipBank1
 359+ 61AD              ;;TODO                    eliteb       call    GetShipBankId
 360+ 61AD              ;;TODO                       MMUSelectUniverseBankN 1
 361+ 61AD              ;;TODO                       call    CopyBodyToUniverse
 362+ 61AD                                      SetMemFalse DockedFlag
 362+ 61AD 3E FF       >                        ld      a,$FF
 362+ 61AF 32 A0 83    >                        ld      (DockedFlag),a
 363+ 61B2 3E FF        .TriggerEngineSound:    ld      a,$FF
 364+ 61B4 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 365+ 61B7 C3 A4 62                             jp  DoubleBufferCheck
 366+ 61BA
 367+ 61BA
 368+ 61BA 3A C5 61     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 369+ 61BD A7                                   and     a
 370+ 61BE C8                                   ret     z
 371+ 61BF 3E 00        WarpMMUBank:            ld      a,$00
 372+ 61C1                                      MMUSelectScreenA
 372+ 61C1 ED 92 56    >                     nextreg ScreenBankMMU,		a
 373+ 61C4 CD 00 00     WarpRoutineAddr:        call    0000
 374+ 61C7 C9                                   ret
 375+ 61C8
 376+ 61C8              ;--- From here is the new simplified logic. This uses the current spawn table
 377+ 61C8              ;--- Events such as jumping to a system, ending up in which space,
 378+ 61C8              ;--- special mission events
 379+ 61C8              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 380+ 61C8              ;--- Would be difficult
 381+ 61C8              ;--- load the table to work from. This then leaves all teh logic configurable
 382+ 61C8              LoopEventTriggered:     ; for now just do spawn
 383+ 61C8 C3 CB 61                             jp      SpawnEvent
 384+ 61CB                                      ; implicit ret from jp
 385+ 61CB
 386+ 61CB                  DEFINE  SPAWN_TABLE_SELECT   1
 387+ 61CB                  DEFINE  SPAWN_GENERATE_COUNT 1
 388+ 61CB                  DEFINE  SPAWN_LOOP           1
 389+ 61CB              ;    DEFINE  SPAWN_IGNORE         1
 390+ 61CB
 391+ 61CB
 392+ 61CB              SpawnEvent:             IFDEF   SPAWN_IGNORE
 393+ 61CB ~                                        ret
 394+ 61CB                                      ENDIF
 395+ 61CB CD E2 87                             call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 396+ 61CE D8                                   ret     c                                   ; then may as well just skip routine
 397+ 61CF                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 398+ 61CF                                          SetMemFalse SpaceStationSafeZone
 398+ 61CF 3E FF       >                        ld      a,$FF
 398+ 61D1 32 8F 82    >                        ld      (SpaceStationSafeZone),a
 399+ 61D4                                      ENDIF
 400+ 61D4 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 401+ 61D6 CD 3C 63                             call    SelectSpawnTable                    ; ix = correct row in spawn table
 402+ 61D9 CD 24 63     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data,
 403+ 61DC 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0
 404+ 61DD B7                                   or      a                                   ; then its an invalid
 405+ 61DE C8                                   ret     z                                   ; ship or just not to spawn
 406+ 61DF E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; b will be set to the
 407+ 61E1 CD 3B 88                             call    doRandom                            ; actual number to spawn
 408+ 61E4 C1                                   pop     bc                                  ; a is not really needed now as de and hl hold
 409+ 61E5 A0                                   and     b                                   ; addresses for table and handler code
 410+ 61E6 F6 01                                or      1                                   ; at least 1
 411+ 61E8 47                                   ld      b,a                                 ; so b = the number to spawn
 412+ 61E9 E1                                   pop     hl                                  ; get back address of spawn handler
 413+ 61EA              ; b = nbr to spawn, hl = handler for spawn, de = lookup table of ship type to spawn
 414+ 61EA C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler
 415+ 61ED EB                                   ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 416+ 61EE CD 5B 63                             call    SelectSpawnType                     ; a = shipId to Spawn
 417+ 61F1 CD FA 61                             call    .SpawnAShipTypeA                    ; if we get a carry then stop spawning
 418+ 61F4 E1 D1 C1                             pop     bc,,de,,hl                          ; get back values
 419+ 61F7 10 F1                                djnz    .SpawnLoop                          ; repeat until B = 0
 420+ 61F9 C9                                   ret                                         ; we are done
 421+ 61FA EB           .SpawnAShipTypeA        ex      de,hl                               ; hl= handler to spawn, a = ship to spawn
 422+ 61FB E9                                   jp      hl                                  ; we call this so we can do a dynamic jp
 423+ 61FC                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 424+ 61FC
 425+ 61FC
 426+ 61FC
 427+ 61FC 00           EnemyShipBank:          DS 1
 428+ 61FD 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 429+ 6206 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 430+ 620C
 431+ 620C
 432+ 620C              LaunchEnemyMissile:     ; break
 433+ 620C 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 434+ 620F 32 FC 61                             ld      (EnemyShipBank),a                   ;
 435+ 6212 3E 05                                ld      a,5
 436+ 6214 CD 79 A6                             call    CalcLaunchOffset
 437+ 6217 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 438+ 6219                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 438+ 6219 21 00 77    >                    ld          hl,ShipMissileTable
 438+ 621C ED 31       >                    add         hl,a
 438+ 621E 7E          >                    ld          a,(hl)
 439+ 621F CD 62 62                             call    SpawnShipTypeA                      ; spawn the ship
 440+ 6222 D8                                   ret     c                                   ; return if failed
 441+ 6223 CD DB C7                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 442+ 6226 3E FF                                ld      a,$FF
 443+ 6228 32 45 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 444+ 622B 3A FC 61                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 445+ 622E                                      MMUSelectUnivBankA                          ;
 445+ 622E ED 92 56    >                     nextreg UniverseMMU,       a
 446+ 6231 21 5C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 447+ 6234 35                                   dec     (hl)
 448+ 6235 C9                                   ret
 449+ 6236
 450+ 6236 3E 0A        LaunchEnemyFighter:     ld      a,10
 451+ 6238                                      ;break;call    CopyUBnKtoLaunchParameters
 452+ 6238                                      ;copymatrix,rot and speed
 453+ 6238 C9                                   ret
 454+ 6239
 455+ 6239              LaunchPlayerMissile:   ; break
 456+ 6239 CD E2 87                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 457+ 623C 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 458+ 623E 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 459+ 6240                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 459+ 6240 21 00 77    >                    ld          hl,ShipMissileTable
 459+ 6243 ED 31       >                    add         hl,a
 459+ 6245 7E          >                    ld          a,(hl)
 460+ 6246 CD 62 62                             call    SpawnShipTypeA                      ; spawn the ship
 461+ 6249 3A 26 85                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 462+ 624C 32 45 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 463+ 624F CD 23 C8                             call    UnivSetPlayerMissile                ; .
 464+ 6252                                      ClearMissileTargetting                      ; reset targetting
 464+ 6252 3E FF       >                        ld      a,StageMissileNotTargeting
 464+ 6254 32 26 85    >                        ld      (MissileTargettingFlag),a
 465+ 6257 21 96 82                             ld      hl, NbrMissiles
 466+ 625A 35                                   dec     (hl)
 467+ 625B                                      ; TODO handle removal of missile from inventory and console
 468+ 625B C9                                   ret
 469+ 625C              .MissileMissFire:       ClearMissileTargetting
 469+ 625C 3E FF       >                        ld      a,StageMissileNotTargeting
 469+ 625E 32 26 85    >                        ld      (MissileTargettingFlag),a
 470+ 6261 C9                                   ret ; TODO bing bong noise misfire message
 471+ 6262
 472+ 6262                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++6262              ;.. SpawnShipTypeA
   2++6262              ; IN
   3++6262              ;  a = ship type to create (equates to the ship model)
   4++6262              ; OUT
   5++6262              ;  b = ship class
   6++6262              ;  a = iyh = slot number
   7++6262              SpawnShipTypeA:         ;break
   8++6262 FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++6264 CD E2 87                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++6267 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++6268 FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++626A                                      MMUSelectShipBank1                          ; select bank 1
  12++626A ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  13++626E FD 7C                                ld      a,iyh                               ; A = slot number
  14++6270 FD 45                                ld      b,iyl                               ; b = ship type
  15++6272 CD 48 87                             call    SetSlotAToTypeB                     ; Allocate slot as used
  16++6275                                      MMUSelectUniverseA                          ; .
  16++6275 C6 46       >                     add    a,BankUNIVDATA0
  16++6277 ED 92 56    >                     nextreg UniverseMMU,       a
  17++627A FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  18++627C C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  19++627E 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  20++6281 FD 7D                                ld      a,iyl                               ; get ship model type
  21++6283 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  22++6286 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  23++6289                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  23++6289 ED 92 57    >					 nextreg ShipModelMMU,	    a
  24++628C 78                                   ld      a,b                                 ; b = computed ship id for bank
  25++628D CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  26++6290 CD BB C8                             call    UnivSetSpawnPosition                ; set initial spawn position
  27++6293 CD A6 C9                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  28++6296 3A A9 C3                             ld      a,(ShipTypeAddr)                    ; get ship type
  29++6299 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  30++629C 47                                   ld      b,a                                 ; and set the type into slot table
  31++629D FD 7C                                ld      a,iyh                               ;
  32++629F CD 4F 87                             call    SetSlotAToClassB                    ;
  33++62A2                                      ClearCarryFlag                              ; no carry on success
  33++62A2 B7          >                        or a
  34++62A3 C9                                   ret
  35++62A4
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 473+ 62A4
 474+ 62A4                                      ; reset main loop counters
 475+ 62A4                                      ; from BBC TT18 jump code
 476+ 62A4                                      ; need to set system corrodinates, flush out univere ships etc
 477+ 62A4                                      ; set up new star system and landing location in system
 478+ 62A4                                      ; reset ship speed etc (RES2)
 479+ 62A4                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 480+ 62A4                                      ;   put planet into data blokc 1 of FRIN
 481+ 62A4                                      ;   put sun inot data block (NWWSHIP)
 482+ 62A4                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 483+ 62A4
 484+ 62A4              WeAreInTransition:
 485+ 62A4 3E 00        DoubleBufferCheck:      ld      a,00
 486+ 62A6                                      IFDEF DOUBLEBUFFER
 487+ 62A6 FE 00                                    cp      0
 488+ 62A8 CA B7 62                                 jp      z,TestTransition
 489+ 62AB                                          MMUSelectLayer2
 489+ 62AB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 490+ 62AF 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 491+ 62B2 FE 00                                    cp     0
 492+ 62B4 C4 97 E2                                 call   nz,l2_flip_buffers
 493+ 62B7                                      ENDIF
 494+ 62B7 3A 87 69     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 495+ 62BA FE FF                                cp      $FF
 496+ 62BC CA 11 5F                             jp      z,MainLoop
 497+ 62BF CD 25 6A     BruteForceChange:       call    SetScreenA
 498+ 62C2 C3 11 5F                             jp MainLoop
 499+ 62C5
 500+ 62C5
 501+ 62C5              ;......................................................................
 502+ 62C5              ; Sound Code
 503+ 62C5
 504+ 62C5
 505+ 62C5
 506+ 62C5              ;As speed goes up so does pitch
 507+ 62C5
# file closed: ./GameEngine/MainLoop.asm
 260  62C5                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 62C5
   2+ 62C5 CD 62 62     SpawnStationHandler:            call    SpawnShipTypeA
   3+ 62C8 D8                                           ret     c                                   ; abort if failed
   4+ 62C9 C9                                           ret
   5+ 62CA
   6+ 62CA
   7+ 62CA CD 62 62     SpawnHermitHandler:             call    SpawnShipTypeA
   8+ 62CD D8                                           ret     c                                   ; abort if failed
   9+ 62CE C9                                           ret
  10+ 62CF
  11+ 62CF CD 62 62     SpawnAsteroidHandler:           call    SpawnShipTypeA
  12+ 62D2 D8                                           ret     c                                   ; abort if failed
  13+ 62D3                                              ;Set random position and vector
  14+ 62D3                                              ; if its a hermit jump to that to so special
  15+ 62D3
  16+ 62D3 C9                                           ret
  17+ 62D4
  18+ 62D4 F5           SpawnTypeJunkHandler:           push    af
  19+ 62D5                                              TestRoomForJunk .CanAddJunk
  19+ 62D5 3E 03       >                        ld      a,3
  19+ 62D7             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  19+ 62D7 3A 8F 82    >                        ld      a,(SpaceStationSafeZone)
  19+ 62DA A7          >                        and     a
  19+ 62DB CA E0 62    >                        jp      z, .DoTest
  19+ 62DE C6 02       >                        add     a,2
  19+ 62E0             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  19+ 62E0 21 91 82    >                        ld      hl,JunkCount
  19+ 62E3 BE          >                        cp      (hl)
  19+ 62E4 DA E8 62    >                        jp		c,.CanAddJunk
  20+ 62E7 C9                                           ret
  21+ 62E8 F1           .CanAddJunk:                    pop     af
  22+ 62E9 CD 62 62                                     call    SpawnShipTypeA
  23+ 62EC                                              AddJunkCount
  23+ 62EC 21 91 82    >                        ld      hl,JunkCount
  23+ 62EF 34          >                        inc     (hl)
  24+ 62F0 D8                                           ret     c                                   ; abort if failed
  25+ 62F1 C9                                           ret
  26+ 62F2
  27+ 62F2 CD 62 62     SpawnTypeCopHandler:            call    SpawnShipTypeA
  28+ 62F5 D8                                           ret     c                                   ; abort if failed
  29+ 62F6                                              ; Cops will be non hostile if there are no other ones in area
  30+ 62F6                                              ; if there are, then check out cargo and fist to evalutate
  31+ 62F6                                              ; if not hostile and in space station area, then patrol orbiting station
  32+ 62F6                                              ; if not in space station area even split on orbiting a random point in space at distance random
  33+ 62F6                                              ;                                            travelling to station
  34+ 62F6                                              ;                                            travelling to sun
  35+ 62F6 C9                                           ret
  36+ 62F7 CD 62 62     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  37+ 62FA D8                                           ret     c                                   ; abort if failed
  38+ 62FB                                              ; 50/50 goign to planet or sun
  39+ 62FB                                              ;                main loop AI determines if our FIST status will force a jump
  40+ 62FB C9                                           ret
  41+ 62FC CD 62 62     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  42+ 62FF D8                                           ret     c                                   ; abort if failed
  43+ 6300                                              ; 50/50 goign to planet or sun
  44+ 6300                                              ; if FIST is high then 10% chance will auto go hostile
  45+ 6300 C9                                           ret
  46+ 6301 CD 62 62     SpawnTypePirateHandler:         call    SpawnShipTypeA
  47+ 6304 D8                                           ret     c                                   ; abort if failed
  48+ 6305                                              ; set random position
  49+ 6305                                              ; 50/50 going to station or sun
  50+ 6305                                              ; if in safe zone, then not hostile
  51+ 6305                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  52+ 6305                                              AddPirateCount                              ; another pirate has been spawned
  52+ 6305 21 95 82    >                        ld      hl,PirateCount
  52+ 6308 34          >                        inc     (hl)
  53+ 6309 C9                                           ret
  54+ 630A CD 62 62     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  55+ 630D D8                                           ret     c                                   ; abort if failed
  56+ 630E                                              ; initially hunters will be non hostile and by default going to station
  57+ 630E                                              ; set random position
  58+ 630E                                              ; 50/50 going to station or sun
  59+ 630E                                              ; Check out FIST status, if very high auto hostile
  60+ 630E                                              ; else its checked on ship event loop
  61+ 630E C9                                           ret
  62+ 630F CD 62 62     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
  63+ 6312 D8                                           ret     c                                   ; abort if failed
  64+ 6313                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
  65+ 6313                                              ; start in random position
  66+ 6313 C9                                           ret
  67+ 6314 C9           SpawnTypeMissionHandler:        ret
  68+ 6315
  69+ 6315 CD 62 62     SpawnTypeStationDebrisHandler: call    SpawnShipTypeA
  70+ 6318 D8                                           ret     c                                   ; abort if failed
  71+ 6319                                              ;Set random position and vector
  72+ 6319 C9                                           ret
  73+ 631A              SpawnTypeMissionEventHandler:
  74+ 631A C9           SpawnTypeDoNotSpawnHandler:    ret
  75+ 631B
  76+ 631B
  77+ 631B
  78+ 631B 3E 29        SpawnHostileCop:        ld      a,ShipID_Viper
  79+ 631D CD 62 62                             call    SpawnShipTypeA                      ; call rather than jump
  80+ 6320 CD 46 C7                             call    SetShipHostile                      ; as we have correct universe banked in now
  81+ 6323 C9                                   ret
  82+ 6324
  83+ 6324              SpawnTrader:       ; TODO
  84+ 6324
  85+ 6324              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
  86+ 6324              ; DEFUNCT?                        inc     (hl)                                ;
  87+ 6324              ; DEFUNCT?                        and     3                                   ; a = random 0..3
  88+ 6324              ; DEFUNCT?                        MMUSelectShipBank1
  89+ 6324              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
  90+ 6324              ; DEFUNCT?                        call    SpawnShipTypeA
  91+ 6324              ; DEFUNCT?                        call    SetShipHostile
  92+ 6324              ; DEFUNCT?                        ret
  93+ 6324
  94+ 6324
  95+ 6324
  96+ 6324              ; input IX = table for spawn data
  97+ 6324              ; output A  = table type
  98+ 6324              ;        b = maximum to spawn
  99+ 6324              ;        de = spawn table address
 100+ 6324              ;        hl = spawn handler address
 101+ 6324 DD 7E 08     SelectSpawnTableData:   ld      a,(ix+1*SpawnTableSize)             ; Table Type
 102+ 6327 21 D0 63                             ld      hl,SpawnTypeHandlers                ; hl = the location in spawn table for the call address for setting up a spawn
 103+ 632A ED 31                                add     hl,a                                ; of type A
 104+ 632C ED 31                                add     hl,a                                ;
 105+ 632E 7E                                   ld      a,(hl)
 106+ 632F 23                                   inc     hl
 107+ 6330 66                                   ld      h,(hl)
 108+ 6331 6F                                   ld      l,a                                 ; hl now is proper address
 109+ 6332 DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Nbr to Spawn
 110+ 6335 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Table Addr Low
 111+ 6338 DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Table Addr Hi
 112+ 633B C9                                   ret
 113+ 633C
 114+ 633C              ; Output IX = pointer to correct row in table
 115+ 633C              ; its up to the caller if DE is right table and it it needs to load into
 116+ 633C              ; it is up to the main loop code to maintain SpaceStationSafeZone
 117+ 633C              SelectSpawnTable:
 118+ 633C              .SelectCorrectTable:    JumpIfMemTrue SpaceStationSafeZone, .SelectSpaceStationTable
 118+ 633C 3A 8F 82    >                        ld      a,(SpaceStationSafeZone)
 118+ 633F A7          >                        and     a
 118+ 6340 CA 4A 63    >                        jp      z, .SelectSpaceStationTable
 119+ 6343 DD 21 80 63                          ld      ix,FreeSpaceSpawnTableLow
 120+ 6347 C3 4E 63                             jp      .RandomShip
 121+ 634A DD 21 A8 63  .SelectSpaceStationTable:ld      ix,StationSpawnTableLow
 122+ 634E CD 3B 88     .RandomShip:            call    doRandom
 123+ 6351 DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 124+ 6354 D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 125+ 6355 C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 126+ 6356 DD 23                                inc     ix                                  ; move to next row
 127+ 6358 C3 51 63                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 128+ 635B
 129+ 635B              ; Returns with carry set if no ship to spawn
 130+ 635B              ; In = hl = address of first byte of table
 131+ 635B 06 03        SelectSpawnType:        ld      b,3                                 ; maxium of 3 goes
 132+ 635D E5 FD E1                             ld      iy,hl                               ; save hl as we may need it if the spawn is too high rank
 133+ 6360 CD 3B 88     .SelectSpawnType:       call    doRandom
 134+ 6363 E6 0F                                and     %00001111                           ; random 1 to 15
 135+ 6365 CB 27                                sla     a                                   ; * 2 as its 2 bytes per row
 136+ 6367 ED 31                                add     hl,a
 137+ 6369 7E                                   ld      a,(hl)
 138+ 636A 47                                   ld      b,a
 139+ 636B 3A 9B 82                             ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 140+ 636E                                      JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 140+ 636E B8          >                        cp     b
 140+ 636F D2 79 63    >                        jp		nc,.GoodToSpawn
 141+ 6372 FD E5 E1     .TooLowRank:            ld      hl,iy
 142+ 6375 10 E9                                djnz    .SelectSpawnType                    ; 3 goes then fail out
 143+ 6377              .NoSpawn:               SetCarryFlag
 143+ 6377 37          >                        scf
 144+ 6378 C9                                   ret
 145+ 6379 3E 08        .GoodToSpawn:           ld      a,8                                 ; so we shift by 8
 146+ 637B ED 31                                add     hl,a                                ; to get to the ship id
 147+ 637D 7E                                   ld      a,(hl)                              ; and fetch it in a
 148+ 637E                                      ClearCarryFlag
 148+ 637E B7          >                        or a
 149+ 637F C9                                   ret
 150+ 6380
 151+ 6380              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 152+ 6380              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 153+ 6380              ; Probability high
 154+ 6380              ; Class of table,       0=Station,
 155+ 6380              ; Table to pick from (this is then based on ranking )
 156+ 6380
 157+ 6380              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 158+ 6380 54 9F FA FF  FreeSpaceSpawnTableLow:    DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 158+ 6384 FF FF FF FF
 159+ 6388 03 04 05 06  FreeSpaceSpawnTableType:   DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 159+ 638C 0C 0C 0C 0C
 160+ 6390 01 01 01 02  FreeSpaceSpawnTableCount:  DB 1,                        1,                              1,                              2,                          0,                   0,                   0,                   0
 160+ 6394 00 00 00 00
 161+ 6398 AE 9E 9E 6E  FreeSpaceSpawnTableAddrLo: DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 161+ 639C 00 00 00 00
 162+ 63A0 76 76 76 76  FreeSpaceSpawnTableAddrHi: DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 162+ 63A4 00 00 00 00
 163+ 63A8
 164+ 63A8 54 9F FA FF  StationSpawnTableLow:      DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 164+ 63AC FF FF FF FF
 165+ 63B0 03 04 05 06  StationSpawnTableType:     DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 165+ 63B4 0C 0C 0C 0C
 166+ 63B8 01 01 01 03  StationSpawnTableCount:    DB 1,                        1,                              1,                              3,                          0,                   0,                   0,                   0
 166+ 63BC 00 00 00 00
 167+ 63C0 AE 9E 9E 6E  StationSpawnTableAddrLo:   DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 167+ 63C4 00 00 00 00
 168+ 63C8 76 76 76 76  StationSpawnTableAddrHi:   DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 168+ 63CC 00 00 00 00
 169+ 63D0
 170+ 63D0              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 171+ 63D0
 172+ 63D0              ; Looko in constant equates, Spawntype equates for the values for this jump table
 173+ 63D0              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 174+ 63D0 C5 62 CF 62  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 174+ 63D4 D4 62 F2 62
 175+ 63D8 F7 62 FC 62                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 175+ 63DC 01 63 0A 63
 176+ 63E0 0F 63 14 63                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 176+ 63E4 15 63 1A 63
 177+ 63E8 1A 63                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 261  63EA              ;..................................................................................................................................
 262  63EA              ;..Process A ship..................................................................................................................
 263  63EA              ; Apply Damage b to ship based on shield value of a
 264  63EA              ; returns a with new shield value
 265  63EA                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 63EA              ;..Process A ship..................................................................................................................
   2+ 63EA              ; Apply Damage b to ship based on shield value of a
   3+ 63EA              ; returns a with new shield value
   4+ 63EA              ApplyDamage:            ClearCarryFlag
   4+ 63EA B7          >                        or a
   5+ 63EB 98                                   sbc     b
   6+ 63EC D0                                   ret     nc                  ; no carry so was not negative
   7+ 63ED ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 63EF 4F                                   ld      c,a                 ; save overhit in c
   9+ 63F0 3A 23 85                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 63F3                                      ClearCarryFlag
  10+ 63F3 B7          >                        or a
  11+ 63F4 99                                   sbc     c
  12+ 63F5 F2 F9 63                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 63F8 AF           .KilledPlayer:          xor     a
  14+ 63F9 32 23 85     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 63FC AF                                   xor     a                   ; shield is gone
  16+ 63FD C9                                   ret
  17+ 63FE
# file closed: ./GameEngine/DamagePlayer.asm
 266  63FE              ;..Update Universe Objects.........................................................................................................
 267  63FE                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 63FE              ;..................................................................................................................................
   2+ 63FE              ;                           DEFINE ROTATIONDEBUG 1
   3+ 63FE              ;                           DEFINE CLIPDEBUG 1
   4+ 63FE 00           CurrentShipUniv:        DB      0
   5+ 63FF              ;..................................................................................................................................
   6+ 63FF              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 63FF              IsShipDestroyedOrExploding: MACRO
   8+ 63FF ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   9+ 63FF ~                                        and     %10100000                                       ; or exploding
  10+ 63FF                                          ENDM
  11+ 63FF
  12+ 63FF              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 63FF ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  14+ 63FF ~                                        ld      de,(UBnKylo)                                    ; .
  15+ 63FF ~                                        ld      bc,(UBnKzlo)                                    ; .
  16+ 63FF ~                                        or      h                                               ; .
  17+ 63FF ~                                        or      d                                               ; .
  18+ 63FF ~                                        or      b                                               ; .
  19+ 63FF ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 63FF ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 63FF ~                                        or      e                                               ; .
  22+ 63FF ~                                        or      c                                               ; .
  23+ 63FF ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 63FF ~                                        and     $80                                             ; .
  25+ 63FF ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 63FF                                          ENDM
  27+ 63FF
  28+ 63FF              VeryCloseCheck:             MACRO
  29+ 63FF ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 63FF ~                                        and     %11000000
  31+ 63FF                                          ENDM
  32+ 63FF
  33+ 63FF              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 63FF ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 63FF ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 63FF ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 63FF ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 63FF ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 63FF ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 63FF ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 63FF ~                                        and     SignMask8Bit                                    ; .
  42+ 63FF ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 63FF                                          ENDM
  44+ 63FF
  45+ 63FF              ;..................................................................................................................................
  46+ 63FF AF           UpdateUniverseObjects:  xor     a
  47+ 6400 32 A3 83                             ld      (SelectedUniverseSlot),a
  48+ 6403 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  49+ 6404              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  50+ 6404 CD D6 87                             call    GetTypeAtSlotA
  51+ 6407 FE FF                                cp      $FF                                             ; we don't process empty slots
  52+ 6409 CA 59 65                             jp      z,.UniverseSlotIsEmpty                          ; .
  53+ 640C FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  54+ 640E 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  55+ 640F                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  55+ 640F C6 46       >                     add    a,BankUNIVDATA0
  55+ 6411 ED 92 56    >                     nextreg UniverseMMU,       a
  56+ 6414                                      IFDEF   CLIPDEBUG
  57+ 6414 ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)
  58+ 6414 ~                                        cp      0
  59+ 6414 ~                                        jr      nz,.ProperUpdate
  60+ 6414 ~            .DebugUpdate:               call    FixStationPos
  61+ 6414 ~                                        jp      .CheckExploding
  62+ 6414                                      ENDIF
  63+ 6414 CD 9F D9     .ProperUpdate:          call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  64+ 6417 3A 49 C0                             ld      a,(UBnKRotZCounter)
  65+ 641A FE 00                                cp      0
  66+ 641C CD 7B DB                             call    ApplyShipRollAndPitch
  67+ 641F CD C1 DC                             call    ApplyShipSpeed
  68+ 6422 CD B8 C7                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  69+ 6425              ;.. apply ships movement
  70+ 6425              ;.. If its a space station then see if we are ready to dock........................................................................
  71+ 6425              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  71+ 6425 3A 51 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  71+ 6428 E6 A0       >                            and     %10100000                                       ; or exploding
  72+ 642A C2 41 65                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  73+ 642D              ;.. we can't collide with missiles, they collide with us as part of tactics
  74+ 642D              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  74+ 642D 3A A9 C3    >                        ld  a,(ShipTypeAddr)
  74+ 6430 FE 01       >                        cp  ShipTypeMissile
  74+ 6432 CA 06 65    >                        jp  z,.CollisionDone
  75+ 6435 CD 8C C7     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  76+ 6438              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  76+ 6438 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  76+ 643B ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  76+ 643F ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  76+ 6443 B4          >                            or      h                                               ; .
  76+ 6444 B2          >                            or      d                                               ; .
  76+ 6445 B0          >                            or      b                                               ; .
  76+ 6446 C2 06 65    >                            jp      nz,.PostCollisionTest                               ; .
  76+ 6449 B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  76+ 644A B3          >                            or      e                                               ; .
  76+ 644B B1          >                            or      c                                               ; .
  76+ 644C FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  76+ 644E E6 80       >                            and     $80                                             ; .
  76+ 6450 C2 06 65    >                            jp      nz,.PostCollisionTest                              ; .
  77+ 6453              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  77+ 6453 3A A9 C3    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  77+ 6456             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  77+ 6456 FE 02       >                        cp     ShipTypeStation
  77+ 6458 C2 8C 64    >                        jp      nz,.CollisionCheck
  77+ 645B             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  77+ 645B 3A AA C3    >                        ld      a,(ShipNewBitsAddr)
  77+ 645E CB 57       >                        bit 	ShipHostileNewBitNbr,a
  77+ 6460 C2 8C 64    >                        jp      nz,.CollisionCheck
  77+ 6463             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  77+ 6463 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  77+ 6466 FE D6       >                        cp      214
  77+ 6468 DA 8C 64    >                        jp	  c,.CollisionCheck
  77+ 646B CD BF 67    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  77+ 646E             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  77+ 646E FE 59       >                        cp      89
  77+ 6470 DA 8C 64    >                        jp		c, .CollisionCheck
  77+ 6473 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  77+ 6476 E6 7F       >                            and     SignMask8Bit                                    ; .
  77+ 6478             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  77+ 6478 FE 50       >                        cp      80
  77+ 647A DA 8C 64    >                        jp		c, .CollisionCheck
  78+ 647D              ;.. Its passed all validation and we are docking...................................................................................
  79+ 647D              .WeAreDocking:          MMUSelectLayer1
  79+ 647D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  80+ 6481 3E 06                                ld        a,$6
  81+ 6483 CD A5 E0                             call      l1_set_border
  82+ 6486              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  82+ 6486 3E 0D       >                        ld      a,ScreenDocking
  82+ 6488 32 87 69    >                        ld      (ScreenTransitionForced), a
  83+ 648B C9                                   ret                                                     ;  don't bother with other objects
  84+ 648C                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  85+ 648C              ;.. else we are just colliding and have to handle that
  86+ 648C FD 7D        .CollisionCheck:        ld      a,iyl
  87+ 648E                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  87+ 648E FE 02       >                        cp     ShipTypeStation
  87+ 6490 CA C9 64    >                        jp      z,.HaveCollided
  88+ 6493                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  88+ 6493 FE 01       >                        cp     ShipTypeMissile
  88+ 6495 CA 06 65    >                        jp      z,.PostCollisionTest
  89+ 6498              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  89+ 6498 FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  89+ 649A E6 C0       >                            and     %11000000
  90+ 649C 20 68                                jr      nz,.PostCollisionTest                            ; .
  91+ 649E FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  92+ 64A0                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  92+ 64A0 FE 04       >                        cp     ShipTypeScoopable
  92+ 64A2 C2 C9 64    >                        jp      nz,.HaveCollided
  93+ 64A5 3A 23 88     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  94+ 64A8                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  94+ 64A8 FE FF       >                        cp     EquipmentItemFitted
  94+ 64AA C2 C9 64    >                        jp      nz,.HaveCollided
  95+ 64AD 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
  96+ 64B0                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
  96+ 64B0 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  96+ 64B1 CA C9 64    >                        jp	    z, .HaveCollided
  97+ 64B4 CD 0F C9     .CollectedCargo:        call    ShipCargoType
  98+ 64B7 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
  99+ 64B8 CD 26 86                             call    CanWeScoopCargoD
 100+ 64BB 38 03                                jr      c, .NoRoom
 101+ 64BD CD 1E 86     .CanScoop:              call    AddCargoTypeD
 102+ 64C0              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
 102+ 64C0 3A A3 83    >                        ld      a,(SelectedUniverseSlot)
 102+ 64C3 CD 6A 87    >                        call    ClearSlotA
 103+ 64C6 C3 06 65                             jp      .PostCollisionTest
 104+ 64C9              ; ... Generic collision
 105+ 64C9              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 105+ 64C9 3A ED 81    >                        ld      a,(DELTA)
 105+ 64CC FE 05       >                        cp      5
 105+ 64CE DA DD 64    >                        jp	  c,.SmallBump
 106+ 64D1 3A 58 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 107+ 64D4                                      SetCarryFlag
 107+ 64D4 37          >                        scf
 108+ 64D5 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 109+ 64D6 47                                   ld      b,a
 110+ 64D7 CD 2F DF                             call    KillShip                                        ; mark ship as dead (if possible)
 111+ 64DA C3 E7 64                             jp      .ApplyDamage
 112+ 64DD 3A ED 81     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 113+ 64E0 47                                   ld      b,a
 114+ 64E1 CD 51 DF                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 115+ 64E4 C3 E7 64                             jp      .ApplyDamage
 116+ 64E7 CD D0 86     .ApplyDamage:           call    SetSpeedZero
 117+ 64EA 3A 28 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 118+ 64ED E6 80                                and     $80
 119+ 64EF 20 0C                                jr      nz,.HitRear
 120+ 64F1 3A 21 85                             ld      a,(ForeShield)
 121+ 64F4 CD EA 63                             call    ApplyDamage
 122+ 64F7 32 21 85                             ld      (ForeShield),a
 123+ 64FA C3 06 65                             jp      .CollisionDone
 124+ 64FD 3A 22 85     .HitRear:               ld      a,(AftShield)
 125+ 6500 CD EA 63                             call    ApplyDamage
 126+ 6503 32 22 85                             ld      (AftShield),a
 127+ 6506              .CollisionDone:
 128+ 6506              ;.. Now check laser to see if the ship is being shot in sights
 129+ 6506 CD 45 6B     .PostCollisionTest:     call    ShipInSights
 130+ 6509 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 131+ 650B 3A 3A 85                             ld      a,(CurrLaserPulseRate)
 132+ 650E                                      JumpIfAIsNotZero .CheckForPulse
 132+ 650E A7          >                        and     a
 132+ 650F C2 1C 65    >                        jp	    nz,.CheckForPulse
 133+ 6512                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 133+ 6512 3A CE 83    >                        ld      a,(FireLaserPressed)
 133+ 6515 A7          >                        and     a
 133+ 6516 C2 31 65    >                        jp      nz, .NoLaser
 134+ 6519 C3 23 65                             jp      .LaserDamage
 135+ 651C              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 135+ 651C 3A 49 85    >                        ld  a,(CurrLaserPulseOnCount)
 135+ 651F A7          >                        and a
 135+ 6520 CA 31 65    >                        jp  z,.NoLaser
 136+ 6523 3A 44 85     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 137+ 6526 CD 51 DF                             call    DamageShip
 138+ 6529 3A 51 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 139+ 652C E6 A0                                and     %10100000
 140+ 652E C2 41 65                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 141+ 6531              .NoLaser:
 142+ 6531              ; Now check missile lock
 143+ 6531              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 143+ 6531 3A 26 85    >                        ld  a,(MissileTargettingFlag)
 143+ 6534 FE FE       >                        cp  StageMissileTargeting
 143+ 6536 C2 41 65    >                        jp  nz,.ProcessedUniverseSlot
 144+ 6539 3A A3 83     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 145+ 653C                                      LockMissileToA                                          ; .
 145+ 653C F6 80       >                        or      $80
 145+ 653E 32 26 85    >                        ld      (MissileTargettingFlag),a
 146+ 6541              .ProcessedUniverseSlot:
 147+ 6541              ;...Tactics Section................................................................................................................
 148+ 6541 3A A3 83     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 149+ 6544                                      IsSlotMissile                                           ; Missiles update every iteration
 149+ 6544 21 BE 83    >                        ld      hl,UniverseSlotType
 149+ 6547 ED 31       >                        add     hl,a
 149+ 6549 7E          >                        ld      a,(hl)
 149+ 654A FE 01       >                        cp      ShipTypeMissile
 150+ 654C CA 8C 65                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 151+ 654F              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 151+ 654F 3A A3 83    >                        ld      a,(SelectedUniverseSlot)
 151+ 6552 21 A2 83    >                        ld      hl,CurrentUniverseAI
 151+ 6555 BE          >                        cp      (hl)
 151+ 6556 CC 6F A1    >                        call    z,UpdateShip
 152+ 6559              .UniverseSlotIsEmpty:
 153+ 6559 3A A3 83     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 154+ 655C 3C                                   inc     a                                               ; .
 155+ 655D                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 155+ 655D FE 0C       >                        cp     UniverseSlotListSize
 155+ 655F D2 68 65    >                        jp		nc,.UpdateAICounter
 156+ 6562 32 A3 83                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 157+ 6565 C3 03 64                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 158+ 6568              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 158+ 6568 3A A2 83    >                        ld      a,(CurrentUniverseAI)
 158+ 656B 3C          >                        inc     a
 158+ 656C FE 0C       >                        cp      UniverseSlotListSize
 158+ 656E 38 01       >                        jr      c,.IncMaxed
 158+ 6570 AF          >                        xor     a
 158+ 6571 32 A2 83    >.IncMaxed:              ld      (CurrentUniverseAI),a
 159+ 6574              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 159+ 6574 3A A4 83    >                        ld      a,(SetStationHostileFlag)
 159+ 6577 A7          >                        and     a
 159+ 6578 C0          >                        ret     nz
 160+ 6579              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 160+ 6579 3A B2 83    >                        ld   a,(UniverseSlotList)
 160+ 657C FE 02       >                        cp     ShipTypeStation
 160+ 657E C8          >                        ret    z
 161+ 657F                                      MMUSelectUniverseN 0
 161+ 657F ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 162+ 6583 CD 46 C7                             call    SetShipHostile
 163+ 6586                                      SetMemFalse    SetStationHostileFlag
 163+ 6586 3E FF       >                        ld      a,$FF
 163+ 6588 32 A4 83    >                        ld      (SetStationHostileFlag),a
 164+ 658B C9                                   ret
 165+ 658C              .UpdateMissile:         ;break
 166+ 658C CD 6F A1                             call    UpdateShip                                      ; we do it this way top avoid double calling
 167+ 658F C3 59 65                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 168+ 6592              ;..................................................................................................................................
 169+ 6592
 170+ 6592 00 00 00...  SaveUBNK:               DS 3*3
 171+ 659B
 172+ 659B E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 173+ 659F 3A FE 63                             ld      a,(CurrentShipUniv)
 174+ 65A2 FE 02                                cp      2
 175+ 65A4 20 31                                jr      nz,.DoneSave
 176+ 65A6                                      ;break
 177+ 65A6 21 20 C0                             ld      hl, UBnKxlo
 178+ 65A9 11 92 65                             ld      de, SaveUBNK
 179+ 65AC 01 09 00                             ld      bc, 3*3
 180+ 65AF ED B0                                ldir
 181+ 65B1 3E 00                                ld      a,0
 182+ 65B3 32 24 C0                             ld      (UBnKyhi)  ,a
 183+ 65B6 32 21 C0                             ld      (UBnKxhi)  ,a
 184+ 65B9 32 27 C0                             ld      (UBnKzhi)  ,a
 185+ 65BC 32 22 C0                             ld      (UBnKxsgn) ,a
 186+ 65BF 32 25 C0                             ld      (UBnKysgn) ,a
 187+ 65C2 32 27 C0                             ld      (UBnKzhi)  ,a
 188+ 65C5 32 28 C0                             ld      (UBnKzsgn) ,a
 189+ 65C8 3E 05                                ld      a, $5
 190+ 65CA 32 23 C0                             ld      (UBnKylo)  ,a
 191+ 65CD 3E 05                                ld      a, $5
 192+ 65CF 32 20 C0                             ld      (UBnKxlo)  ,a
 193+ 65D2 3E 6E                                ld      a, $6E
 194+ 65D4 32 26 C0                             ld      (UBnKzlo)  ,a
 195+ 65D7 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 196+ 65DB C9                                   ret
 197+ 65DC
 198+ 65DC E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 199+ 65E0 3A FE 63                             ld      a,(CurrentShipUniv)
 200+ 65E3 FE 02                                cp      2
 201+ 65E5 20 0B                                jr      nz,.DoneSave
 202+ 65E7                                      ;break
 203+ 65E7 21 92 65                             ld      hl, SaveUBNK
 204+ 65EA 11 20 C0                             ld      de, UBnKxlo
 205+ 65ED 01 09 00                             ld      bc, 3*3
 206+ 65F0 ED B0                                ldir
 207+ 65F2 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 208+ 65F6 C9                                   ret
 209+ 65F7
 210+ 65F7
 211+ 65F7 AF           DrawForwardShips:       xor     a
 212+ 65F8 32 FE 63     .DrawShipLoop:          ld      (CurrentShipUniv),a
 213+ 65FB CD D6 87                             call    GetTypeAtSlotA
 214+ 65FE FE FF                                cp      $FF
 215+ 6600 28 12                                jr      z,.ProcessedDrawShip
 216+ 6602                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 217+ 6602 3A FE 63     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 218+ 6605                                      MMUSelectUniverseA
 218+ 6605 C6 46       >                     add    a,BankUNIVDATA0
 218+ 6607 ED 92 56    >                     nextreg UniverseMMU,       a
 219+ 660A                                      IFDEF ROTATIONDEBUG
 220+ 660A ~                                        call    SavePosition
 221+ 660A                                      ENDIF
 222+ 660A CD E8 DD     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 223+ 660D              ; Debris still appears on radar
 224+ 660D                                      IFDEF ROTATIONDEBUG
 225+ 660D ~                                        call    RestorePosition
 226+ 660D                                      ENDIF
 227+ 660D              .UpdateRadar:
 228+ 660D              ;;;Does nothing                       ld      a,BankFrontView
 229+ 660D              ;;;Does nothing                       MMUSelectScreenA
 230+ 660D              ;;;Does nothing         ld      a,(CurrentShipUniv)
 231+ 660D              ;;;Does nothing         MMUSelectUniverseA
 232+ 660D
 233+ 660D                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 233+ 660D 3A CB 83    >                        ld      a,(ConsoleRedrawFlag)
 233+ 6610 A7          >                        and     a
 233+ 6611 CC CD 73    >                        call    z, UpdateScannerShip
 234+ 6614 3A FE 63     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 235+ 6617 3C                                   inc     a
 236+ 6618                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 236+ 6618 FE 0C       >                        cp      UniverseSlotListSize
 236+ 661A DA F8 65    >                        jp		c, .DrawShipLoop
 237+ 661D              .DrawSunCompass:        MMUSelectSun
 237+ 661D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 238+ 6621 CD E8 6F                             call    UpdateCompassSun                ; Always update the sun position
 239+ 6624 CD 4B 72                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 240+ 6627              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 240+ 6627 3A 8F 82    >                        ld      a,(SpaceStationSafeZone)
 240+ 662A A7          >                        and     a
 240+ 662B C2 39 66    >                        jp      nz, .DrawStationCompass
 241+ 662E              .DrawPlanetCompass:     MMUSelectPlanet
 241+ 662E ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 242+ 6632 CD 68 70                             call    UpdateCompassPlanet
 243+ 6635 CD 0C 73                             call    UpdateScannerPlanet
 244+ 6638 C9                                   ret
 245+ 6639              .DrawStationCompass:
 246+ 6639
 247+ 6639 C9                                   ret
 248+ 663A
 249+ 663A
 250+ 663A              ;..................................................................................................................................
 251+ 663A
 252+ 663A 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 253+ 663C CD EF 7E                             call    is_key_pressed
 254+ 663F C0                                   ret     nz
 255+ 6640 3A BE 67                             ld      a,(currentDemoShip)
 256+ 6643 3C                                   inc     a
 257+ 6644 FE 2C                                cp      44
 258+ 6646 20 01                                jr      nz,.TestOK
 259+ 6648 AF                                   xor     a
 260+ 6649 32 BE 67     .TestOK:                ld      (currentDemoShip),a
 261+ 664C CD 31 87                             call    ClearUnivSlotList
 262+ 664F 3A BE 67                             ld      a,(currentDemoShip)
 263+ 6652 47                                   ld      b,a
 264+ 6653 AF                                   xor     a
 265+ 6654 CD 48 87                             call    SetSlotAToTypeB
 266+ 6657 F5                                   push    af
 267+ 6658                                      MMUSelectUniverseN 2
 267+ 6658 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 268+ 665C                                      SetSlotAToUnivClass
 268+ 665C 08          >                        ex      af,af'
 268+ 665D 3A A9 C3    >                        ld      a,(ShipTypeAddr)
 268+ 6660 47          >                        ld      b,a
 268+ 6661 08          >                        ex      af,af'
 268+ 6662 CD 4F 87    >                        call    SetSlotAToClassB
 269+ 6665 F1                                   pop     af
 270+ 6666 CD 58 C7                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 271+ 6669 3A BE 67                             ld      a,(currentDemoShip)
 272+ 666C                                      MMUSelectShipBank1
 272+ 666C ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 273+ 6670 CD 0F E0                             call    GetShipBankId
 274+ 6673                                      MMUSelectShipBankA
 274+ 6673 ED 92 57    >					 nextreg ShipModelMMU,	    a
 275+ 6676 78                                   ld      a,b
 276+ 6677 CD 6A E0                             call    CopyShipToUniverse
 277+ 667A CD 1A 6B                             call    SetInitialShipPosition
 278+ 667D CD 26 68                             call    DEBUGSETNODES
 279+ 6680 C9                                   ret
 280+ 6681
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 268  6681              ;..................................................................................................................................
 269  6681              ;; TODODrawForwardSun:         MMUSelectSun
 270  6681              ;; TODO                        ld      a,(SunKShipType)
 271  6681              ;; TODO.ProcessBody:           cp      129
 272  6681              ;; TODO                        jr      nz,.ProcessPlanet
 273  6681              ;; TODO.ProcessSun:            call    ProcessSun
 274  6681              ;; TODO
 275  6681              ;; TODOProcessSun:             call    CheckSunDistance
 276  6681              ;; TODO
 277  6681              ;; TODO                        ret
 278  6681              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 279  6681              ;; TODO                        ret
 280  6681              ;..................................................................................................................................
 281  6681
 282  6681
 283  6681              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 284  6681              ;;;                        ret     c
 285  6681              ;;;                        ld      a,(UbnkDrawAsDot)
 286  6681              ;;;                        and     a
 287  6681              ;;;                        jr      z,.CarryOnWithDraw
 288  6681              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 289  6681              ;;;                        ld      a,$FF                       ; just draw a pixel
 290  6681              ;;;                        MMUSelectLayer2                     ; then go to update radar
 291  6681              ;;;                        call    l2_plot_pixel               ;
 292  6681              ;;;                        ClearCarryFlag
 293  6681              ;;;                        ret
 294  6681              ;;;.ProcessShipNodes:      call    ProcessShip
 295  6681              ;;;
 296  6681              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 297  6681              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 298  6681              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 299  6681              ;;;                        ld      a,(CurrentShipUniv)
 300  6681              ;;;                        MMUSelectUniverseA
 301  6681              ;;;                        call   DrawLines
 302  6681              ;;;                        ClearCarryFlag
 303  6681              ;;;                        ret
 304  6681
 305  6681
 306  6681              ;----------------------------------------------------------------------------------------------------------------------------------
 307  6681 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 307  6685 61 6C 69 73
 307  6689 69 6E 67 00
 308  668D 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 308  6691 69 6E 67 53
 308  6695 70 72 69 74
 308  6699 65 73 00
 309  669C 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 309  66A0 61 69 6C 69
 309  66A4 73 69 6E 67
 309  66A8 47 61 6C 61
 309  66AC 78 69 65 73
 309  66B0 00
 310  66B1 00           LoadCounter             DB 0
 311  66B2 2A 00        SpriteProgress          DB "*",0
 312  66B4              ;----------------------------------------------------------------------------------------------------------------------------------
 313  66B4
 314  66B4              NeedAMessageQueue:
 315  66B4
 316  66B4              ;..................................................................................................................................
 317  66B4                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 66B4              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 66B4 3A A7 83     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 66B7 11 0E 67                             ld		de,Hyp_counter
   4+ 66BA 0E 9C                                ld	c, -100
   5+ 66BC CD C6 66                             call	.Num1
   6+ 66BF 0E F6                                ld	c,-10
   7+ 66C1 CD C6 66                             call	.Num1
   8+ 66C4 0E FF                                ld	c,-1
   9+ 66C6 06 2F        .Num1:	                ld	b,'0'-1
  10+ 66C8 04           .Num2:	                inc		b
  11+ 66C9 81                                   add		a,c
  12+ 66CA 38 FC                                jr		c,.Num2
  13+ 66CC 91                                   sub 	c
  14+ 66CD C5                                   push	bc
  15+ 66CE F5                                   push	af
  16+ 66CF 79                                   ld		a,c
  17+ 66D0 FE FF                                cp		-1
  18+ 66D2 78                                   ld		a,b
  19+ 66D3 12                                   ld		(de),a
  20+ 66D4 13                                   inc		de
  21+ 66D5 F1                                   pop		af
  22+ 66D6 C1                                   pop		bc
  23+ 66D7 C9                                   ret
  24+ 66D8
  25+ 66D8              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 66D8 54 6F 3A     Hyp_message             DB "To:"
  27+ 66DB 00 00 00...  Hyp_to                  DS 32
  28+ 66FB 20           Hyp_space1              DB " "
  29+ 66FC 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 66FF 2E           Hyp_decimal             DB "."
  31+ 6700 30           Hyp_fraction            DB "0"
  32+ 6701 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 6705 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 6709 67 69 6E 67
  33+ 670D 3A
  34+ 670E 30 30 30 00  Hyp_counter             DB "000",0
  35+ 6712 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 6732 00           Hyp_centeredEol         DB 0
  37+ 6733 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6753 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 6773 00           Hyp_centeredEol2        DB 0
  40+ 6774 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 6794
  42+ 6794
# file closed: ./GameEngine/HyperSpaceTimers.asm
 318  6794
 319  6794
 320  6794
 321  6794              ;DisplayTargetAndRange
 322  6794              ;DisplayCountDownNumber
 323  6794              ;----------------------------------------------------------------------------------------------------------------------------------
 324  6794 3A A1 83     TestPauseMode:          ld      a,(GamePaused)
 325  6797 FE 00                                cp      0
 326  6799 20 12                                jr      nz,.TestForResume
 327  679B 3A FC 81     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 328  679E                                      ReturnIfAGTENusng       ScreenFront
 328  679E FE 09       >                        cp    ScreenFront
 328  67A0 D0          >                        ret	 nc
 329  67A1 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 330  67A3 CD EF 7E                             call    is_key_pressed
 331  67A6 C0                                   ret     nz
 332  67A7              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 332  67A7 3E FF       >                        ld      a,$FF
 333  67A9 32 A1 83                             ld      (GamePaused),a
 334  67AC C9                                   ret
 335  67AD 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 336  67AF CD EF 7E                             call    is_key_pressed
 337  67B2 C0                                   ret     nz
 338  67B3 AF           .ResumePressed:         xor     a
 339  67B4 32 A1 83                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 340  67B7 C9                                   ret
 341  67B8
 342  67B8 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 343  67BA CD EF 7E                             call    is_key_pressed
 344  67BD C9                                   ret
 345  67BE 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 346  67BF
 347  67BF
 348  67BF 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 349  67C2 11 11 82                             ld      de,varVector9ByteWork
 350  67C5 ED A0                                ldi
 351  67C7 ED A0                                ldi
 352  67C9 ED A0                                ldi
 353  67CB ED A0                                ldi
 354  67CD ED A0                                ldi
 355  67CF ED A0                                ldi
 356  67D1 ED A0                                ldi
 357  67D3 ED A0                                ldi
 358  67D5 ED A0                                ldi
 359  67D7 2A 11 82     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 360  67DA ED 5B 14 82                          ld      de, (varVector9ByteWork+3); Y
 361  67DE ED 4B 17 82                          ld      bc, (varVector9ByteWork+6); Z
 362  67E2 7D                                   ld      a,l
 363  67E3 B3                                   or      e
 364  67E4 B1                                   or      c
 365  67E5 F6 01                                or      1
 366  67E7 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 367  67E9 7C                                   ld      a,h
 368  67EA B2                                   or      d
 369  67EB B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 370  67EC C5           .MulBy2Loop:            push    bc
 371  67ED DD 45                                ld      b,ixl
 372  67EF CB 20                                sla     b                       ; Shift ixl left
 373  67F1 DD 68                                ld      ixl,b
 374  67F3 C1                                   pop     bc
 375  67F4 CB 17                                rl      a                       ; roll into a
 376  67F6 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 377  67F8                                      ShiftHLLeft1                    ; Shift Left X
 377  67F8 CB 25       >			   sla l
 377  67FA CB 14       >			   rl  h
 378  67FC                                      ShiftDELeft1                    ; Shift Left Y
 378  67FC CB 23       >			   sla e
 378  67FE CB 12       >			   rl  d
 379  6800                                      ShiftBCLeft1                    ; Shift Left Z
 379  6800 CB 21       >			   sla c
 379  6802 CB 10       >			   rl  b
 380  6804 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 381  6806 3A 13 82     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 382  6809 CB 3C                                srl     h
 383  680B B4                                   or      h
 384  680C 32 A6 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 385  680F 3A 16 82                             ld      a,(varVector9ByteWork+5); y sign
 386  6812 CB 3A                                srl     d
 387  6814 B2                                   or      d
 388  6815 32 A7 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 389  6818 3A 19 82                             ld      a,(varVector9ByteWork+8); y sign
 390  681B CB 38                                srl     b
 391  681D B0                                   or      b
 392  681E 32 A8 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 393  6821 CD E1 99                             call    normaliseXX1596S7
 394  6824 C9                                   ret                          ; will return with a holding Vector Z
 395  6825
 396  6825 00           TidyCounter             DB  0
 397  6826
 398  6826                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6826
   2+ 6826
   3+ 6826 21 49 68     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 6829 11 20 C0                             ld      de,UBnKxlo
   5+ 682C 01 09 00                             ld      bc,9
   6+ 682F ED B0                                ldir
   7+ 6831 21 52 68                             ld      hl,DEBUGROTMATDATA
   8+ 6834 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 6837 01 12 00                             ld      bc,6*3
  10+ 683A ED B0                                ldir
  11+ 683C C9                                   ret
  12+ 683D
  13+ 683D 21 49 68     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6840 11 20 C0                             ld      de,UBnKxlo
  15+ 6843 01 06 00                             ld      bc,9 - 3
  16+ 6846 ED B0                                ldir
  17+ 6848 C9                                   ret
  18+ 6849
  19+ 6849              ; culltest
  20+ 6849              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 6849 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 684D 00 00 5C 07
  21+ 6851 00
  22+ 6852 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6856 00 00
  23+ 6858 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 685C 00 00
  24+ 685E 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6862 00 E0
  25+ 6864
  26+ 6864              ; FAILS due to sharp angle, OK now
  27+ 6864              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6864              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6864              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6864              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6864              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6864              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6864              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6864              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6864              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6864              ; Looks OK
  37+ 6864              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6864              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6864              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6864              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6864              ;
  42+ 6864              ; Massive horizontal line
  43+ 6864              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6864              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6864              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6864              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6864              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6864              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6864              ; Line lost in clipping
  50+ 6864              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6864              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6864              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6864              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6864              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6864              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6864              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6864              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6864              ;
  59+ 6864              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6864              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6864              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6864              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6864              ; top left off right issue
  64+ 6864              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6864              ; test middle of screen
  69+ 6864              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6864              ;
  71+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6864              ; test middle of screen futher away
  75+ 6864              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6864              ;
  77+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6864
  81+ 6864              ; Test left center clip still warping
  82+ 6864              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6864              ;
  84+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6864              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6864              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6864              ;
  90+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6864              ; Test top center clip test 1 - good test many ships fail
  94+ 6864              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6864              ;
  96+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6864              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6864              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6864              ;
 102+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6864              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6864              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6864              ; looks better now may have some clipping issues maybe ship data
 107+ 6864              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6864              ;
 109+ 6864              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6864              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6864 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 6868 B0 55
 112+ 686A              ; Test left top center clip
 113+ 686A
 114+ 686A              ; Test right top center clip
 115+ 686A              ; Test left bottom center clip
 116+ 686A              ; Test right bottom center clip
 117+ 686A
 118+ 686A              ; Tests with no clip
 119+ 686A              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 686A              ;
 121+ 686A              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 686A              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 686A              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 686A              ;
 125+ 686A              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 686A              ;
 127+ 686A              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 686A              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 686A
# file closed: ./debugMatrices.asm
 399  686A
 400  686A
 401  686A              ;TODO Optimisation
 402  686A              ; Need this table to handle differnet events
 403  686A              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 404  686A              ; cursor key, joystick press
 405  686A              ; cursor key, joystick press
 406  686A              ; non cursor keys presses
 407  686A              ;
 408  686A                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 686A              ; First byte is now docked flag
   2+ 686A              ;
   3+ 686A              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 686A              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 686A              ; Byte 1   - Screen Id
   6+ 686A              ; Byte 2,3 - address of keypress table
   7+ 686A              ; Byte 4   - Bank with Display code
   8+ 686A              ; Byte 5,6 - Function for display
   9+ 686A              ; Byte 7,8 - Main loop update routine
  10+ 686A              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 686A              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 686A              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 686A              ; byte 12,13  - cursor key input routine
  14+ 686A              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 686A              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 686A              ; byte 16  - block update ship
  17+ 686A              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 686A              ; later will add a routine for drawing
  19+ 686A              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 686A 00 00 CA 7D  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 686E 32 FC C3 00
  20+ 6872 00 00 00 00
  20+ 6876 5A C4 01 00
  20+ 687A 00 00 00
  21+ 687D 00 01 C8 7D  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 6881 33 48 C1 78
  21+ 6885 C2 00 00 00
  21+ 6889 00 C3 01 00
  21+ 688D 00 00 00
  22+ 6890 01 02 CC 7D                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 6894 36 43 C3 FA
  22+ 6898 C3 00 00 00
  22+ 689C 00 00 01 00
  22+ 68A0 00 00 00
  23+ 68A3 02 03 CC 7D                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 68A7 36 43 C3 00
  23+ 68AB 00 00 00 00
  23+ 68AF 00 00 01 00
  23+ 68B3 00 00 00
  24+ 68B6 00 04 CE 7D  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 68BA 3F 04 D0 4D
  24+ 68BE D0 00 00 00
  24+ 68C2 00 00 01 00
  24+ 68C6 00 00 00
  25+ 68C9 00 05 D0 7D                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 68CD 34 F5 C1 00
  25+ 68D1 00 00 00 00
  25+ 68D5 00 00 01 00
  25+ 68D9 00 00 00
  26+ 68DC 00 06 DE 7D                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 68E0 35 F0 C2 00
  26+ 68E4 00 00 00 00
  26+ 68E8 00 00 01 00
  26+ 68EC 00 00 00
  27+ 68EF 01 07 C6 7D                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 68F3 40 EA D3 86
  27+ 68F7 D4 00 00 00
  27+ 68FB 00 00 01 00
  27+ 68FF 00 00 00
  28+ 6902 01 08 C0 7D                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 6906 41 79 C1 63
  28+ 690A C2 00 01 01
  28+ 690E 00 00 01 00
  28+ 6912 FF 00 00
  29+ 6915 02 09 96 7D  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 6919 3E 6A C0 D2
  29+ 691D C0 01 00 01
  29+ 6921 F6 C2 00 00
  29+ 6925 00 E2 C2
  30+ 6928 02 0A 96 7D                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 692C 3E 6A C0 00
  30+ 6930 00 01 00 01
  30+ 6934 F6 C2 00 00
  30+ 6938 00 E2 C2
  31+ 693B 02 0B 96 7D                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 693F 3E 6A C0 00
  31+ 6943 00 01 00 01
  31+ 6947 F6 C2 00 00
  31+ 694B 00 E2 C2
  32+ 694E 02 0C 96 7D                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6952 3E 6A C0 00
  32+ 6956 00 01 00 01
  32+ 695A F6 C2 00 00
  32+ 695E 00 E2 C2
  33+ 6961 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 6965 41 F5 C1 98
  33+ 6969 C2 00 01 01
  33+ 696D 00 00 01 00
  33+ 6971 FF 00 00
  34+ 6974 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 6978 3E 9C C2 F3
  34+ 697C C2 00 01 01
  34+ 6980 00 00 01 00
  34+ 6984 FF 00 00
  35+ 6987
  36+ 6987              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6987              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 6987              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 6987              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 6987              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 6987              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 6987              ScreenCount         EQU 15
  43+ 6987
# file closed: ./Tables/ScreenControlTable.asm
 409  6987
 410  6987 FF           ScreenTransitionForced  DB $FF
 411  6988                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 6988              ; Use bank 0 as source and bank 7 as write target
   2+ 6988              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 6988 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 698C 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 698E 06 0C                                ld		b,12
   5+ 6990 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6992                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6992 C6 46       >                     add    a,BankUNIVDATA0
   6+ 6994 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 6997 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 699A 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 699D 01 A8 20                             ld		bc,UnivBankSize
  10+ 69A0 CD 29 7D                             call	memcopy_dma
  11+ 69A3 F1 C1                                pop		bc,,af
  12+ 69A5 57                                   ld      d,a
  13+ 69A6 C6 41                                add     "A"
  14+ 69A8 32 0B C0                             ld      (StartOfUnivN),a
  15+ 69AB 7A                                   ld      a,d
  16+ 69AC 3C                                   inc		a
  17+ 69AD 10 E1                                djnz	.ResetCopyLoop
  18+ 69AF C9                                   ret
  19+ 69B0
  20+ 69B0              ; Use bank 0 as source and bank 7 as write target
  21+ 69B0              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 69B0 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 69B4 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 69B6 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 69B8 0E 01                                ld      c,1                              ;
  25+ 69BA F5           .ResetCopyLoop:         push	af                               ;
  26+ 69BB C5                                   push	bc                               ;
  27+ 69BC                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 69BC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 69BF 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 69C2 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 69C5 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 69C8 CD 29 7D                             call	memcopy_dma                      ; .
  32+ 69CB C1                                   pop		bc                               ; .
  33+ 69CC 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 69CF 79                                   ld      a,c                              ;
  35+ 69D0 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 69D2 77                                   ld      (hl),a                           ; .
  37+ 69D3 0C                                   inc     c                                ; Do next bank
  38+ 69D4 F1                                   pop     af                               ; .
  39+ 69D5 3C                                   inc		a                                ; .
  40+ 69D6 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 69D8 C9                                   ret
  42+ 69D9
  43+ 69D9 06 08        SeedAllGalaxies:        ld          b,8
  44+ 69DB 0E 5B                                ld          c,BankGalaxyData0
  45+ 69DD C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 69DE 79                                   ld          a,c
  47+ 69DF                                      MMUSelectGalaxyA
  47+ 69DF ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 69E2 CD 9F FC                             call        SeedGalaxy
  49+ 69E5 C1                                   pop         bc
  50+ 69E6 0C                                   inc         c
  51+ 69E7 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 69E9 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 412  69EA
 413  69EA
 414  69EA              ;----------------------------------------------------------------------------------------------------------------------------------
 415  69EA              LaunchedFromStation:    MMUSelectSun
 415  69EA ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 416  69EE CD 97 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 417  69F1                                      MMUSelectPlanet
 417  69F1 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 418  69F5 CD F4 C0                             call    CreatePlanetLaunched
 419  69F8 CD 31 87                             call    ClearUnivSlotList                   ; slot list is clear to 0 is gauranteed next slot
 420  69FB 3E 0D                                ld      a,CoriloisStation
 421  69FD CD 62 62                             call    SpawnShipTypeA
 422  6A00
 423  6A00              ;;.SpawnSpaceStation:     call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 424  6A00              ;;                        MMUSelectUniverseN 0                        ; Prep Target universe
 425  6A00              ;;                        MMUSelectShipBank1                          ; Bank in the ship model code
 426  6A00              ;;                        ld      iyh,0                               ; Zero ship runtime data
 427  6A00              ;;                        ld      iyl,ShipTypeStation                 ; and mark as spece station
 428  6A00              ;;                        call    UnivInitRuntime                     ; its always slot 0
 429  6A00              ;;                        ld      a,CoriloisStation
 430  6A00              ;;                        call    GetShipBankId
 431  6A00              ;;                        MMUSelectShipBankA                          ; Select the correct bank found
 432  6A00              ;;                        ld      a,b                                 ; Select the correct ship
 433  6A00              ;;                        call    CopyShipToUniverse
 434  6A00 CD 6F C9     .BuiltStation:          call    ResetStationLaunch
 435  6A03                                      IFDEF DEBUGMISSILETEST
 436  6A03 ~            ;                            ld      a,0
 437  6A03 ~            ;                            ld      (UBnKRotXCounter),a             ; kill station roll
 438  6A03 ~
 439  6A03 ~            .TestMissileTarget:         ld      a,ShipID_Viper
 440  6A03 ~                                        call    SpawnShipTypeA                      ; call rather than jump, returns with a = slot number
 441  6A03 ~                                        ZeroA
 442  6A03 ~                                        ld      (UBnKSpeed),a
 443  6A03 ~                                        ld      a,$80
 444  6A03 ~                                        ld      (UBnKxsgn),a
 445  6A03 ~                                        ;ld      a,$80
 446  6A03 ~                                        ZeroA
 447  6A03 ~                                        ld      (UBnKysgn),a
 448  6A03 ~                                        ld      a,$80
 449  6A03 ~                                       ZeroA
 450  6A03 ~                                        ld      (UBnKzsgn),a
 451  6A03 ~                                        ld      a,$60
 452  6A03 ~                                        ZeroA
 453  6A03 ~                                        ld      (UBnKxlo),a
 454  6A03 ~                                        ld      a,$10
 455  6A03 ~                                        ;ZeroA
 456  6A03 ~                                        ld      (UBnKxhi),a
 457  6A03 ~                                        ld      a,$60
 458  6A03 ~                                        ;ZeroA
 459  6A03 ~                                        ld      (UBnKylo),a
 460  6A03 ~                                        ld      a,$1B
 461  6A03 ~                                        ;ZeroA
 462  6A03 ~                                        ld      (UBnKyhi),a
 463  6A03 ~                                        ZeroA
 464  6A03 ~                                        ld      (UBnKzlo),a
 465  6A03 ~                                        ld      a,$2B
 466  6A03 ~                                        ld      (UBnKzhi),a
 467  6A03                                      ENDIF
 468  6A03 3E 00        .NowInFlight:           ld      a,StateNormal
 469  6A05 32 A0 83                             ld      (DockedFlag),a
 470  6A08                                      ForceTransition ScreenFront
 470  6A08 3E 09       >                        ld      a,ScreenFront
 470  6A0A 32 87 69    >                        ld      (ScreenTransitionForced), a
 471  6A0D 3E FF                                ld      a,$FF
 472  6A0F 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 473  6A12 CD C9 85                             call    ResetPlayerShip
 474  6A15                                      IFDEF DEBUGMISSILETEST
 475  6A15 ~                                        ld  a,1
 476  6A15 ~                                        LockMissileToA
 477  6A15                                      ENDIF
 478  6A15 C9                                   ret
 479  6A16
 480  6A16 3A B7 68     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 481  6A19 C3 25 6A                             jp      SetScreenA
 482  6A1C
 483  6A1C 3A 16 69     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 484  6A1F C3 25 6A                             jp      SetScreenA
 485  6A22              ; false ret here as we get it free from jp
 486  6A22              ;----------------------------------------------------------------------------------------------------------------------------------
 487  6A22                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6A22              ; SetScreenA.asm
   2+ 6A22              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6A22 C3 22 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6A25              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6A25 FE 0F       >                        cp     ScreenCount
   4+ 6A27 D2 22 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6A2A 32 FC 81     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6A2D 57           .SetUpIX:               ld      d,a
   7+ 6A2E 1E 13                                ld      e,ScreenMapRow
   8+ 6A30 ED 30                                mul
   9+ 6A32 DD 21 6A 68                          ld      ix,ScreenKeyMap
  10+ 6A36 DD 19                                add     ix,de
  11+ 6A38 DD 22 FD 81                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6A3C                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6A3C 3E FF       >                        ld      a,$FF
  12+ 6A3E 32 87 69    >                        ld      (ScreenTransitionForced),a
  13+ 6A41 32 FB 81                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6A44 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6A47 32 39 60                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6A4A                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6A4A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6A4B CA 5A 6A    >                        jp	    z, .NotViewPort
  17+ 6A4E DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6A51 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6A53                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6A53 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6A57 CD 0E E3                             call    LoadLaserToCurrent              ;
  21+ 6A5A DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6A5D 32 C0 60                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6A60 32 6D 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6A63 32 C0 61                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6A66                                      MMUSelectScreenA
  25+ 6A66 ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6A69 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6A6C 32 AC 6A                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6A6F DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6A72 32 AD 6A                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6A75 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6A78 32 C5 60                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6A7B DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6A7E 32 C6 60                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6A81 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6A84 32 47 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6A87 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6A8A 32 A5 62                             ld      (DoubleBufferCheck+1),a
  38+ 6A8D DD 7E 0C                             ld      a,(ix+12)
  39+ 6A90 32 72 5F                             ld      (CallCursorRoutine+1),a
  40+ 6A93 DD 7E 0D                             ld      a,(ix+13)
  41+ 6A96 32 73 5F                             ld      (CallCursorRoutine+2),a
  42+ 6A99 DD 7E 10                             ld      a,(ix+16)
  43+ 6A9C 32 2B 60                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6A9F DD 7E 11                             ld      a,(ix+17)
  45+ 6AA2 32 C5 61                             ld      (WarpRoutineAddr+1),a
  46+ 6AA5 DD 7E 12                             ld      a,(ix+18)
  47+ 6AA8 32 C6 61                             ld      (WarpRoutineAddr+2),a
  48+ 6AAB C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6AAE
# file closed: ./GameEngine/SetScreenA.asm
 488  6AAE                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6AAE 3A FC 81     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6AB1 4F                                   ld      c,a
   3+ 6AB2 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6AB4 DD 21 6A 68                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6AB8 2A A6 83                             ld      hl,(InnerHyperCount)
   6+ 6ABB 7C                                   ld      a,h
   7+ 6ABC B5                                   or      l
   8+ 6ABD FD 67                                ld      iyh,a
   9+ 6ABF FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6AC1 A7           .HyperspaceCountdown:   and     a
  11+ 6AC2 28 08                                jr      z,.CheckDockedFlag
  12+ 6AC4 DD 7E 0E                             ld      a,(ix+14)
  13+ 6AC7 FE 01                                cp      1
  14+ 6AC9 CA 12 6B                             jp      z,NotReadNextKey
  15+ 6ACC DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6ACF              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6ACF                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6ACF FE 03       >                        cp     3
  17+ 6AD1 CA 12 6B    >                        jp      z,NotReadNextKey
  18+ 6AD4                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6AD4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6AD5 CA EF 6A    >                        jp	    z, .CanReadKey
  19+ 6AD8 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6AD9                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6AD9 3A A0 83    >                        ld  a,(DockedFlag)
  20+ 6ADC FE 00       >                        cp  StateNormal
  20+ 6ADE CA E9 6A    >                        jp  z,.NotDockedCheck
  21+ 6AE1 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6AE2                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6AE2 FE 01       >                        cp     1
  22+ 6AE4 C2 12 6B    >                        jp      nz,NotReadNextKey
  23+ 6AE7 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6AE9 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6AEA                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6AEA FE 02       >                        cp     2
  25+ 6AEC C2 12 6B    >                        jp      nz,NotReadNextKey
  26+ 6AEF DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6AF2 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6AF3 5F                                   ld      e,a
  29+ 6AF4 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6AF6 DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6AF9 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6AFB 28 15                                jr      z,NotReadNextKey
  33+ 6AFD 32 08 6B                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6B00 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6B03 32 07 6B                             ld      (ReadKeyAddr+1),a
  36+ 6B06 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6B09 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6B0A                                      JumpIfAIsZero NotReadNextKey
  38+ 6B0A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6B0B CA 12 6B    >                        jp	    z, NotReadNextKey
  39+ 6B0E 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6B0F C3 25 6A                             jp      SetScreenA
  41+ 6B12              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6B12 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6B15 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6B17 10 A6                                djnz    ViewScanLoop
  45+ 6B19 C9                                   ret
  46+ 6B1A
# file closed: ./GameEngine/ViewKeyTest.asm
 489  6B1A              ;----------------------------------------------------------------------------------------------------------------------------------
 490  6B1A 21 00 00     SetInitialShipPosition: ld      hl,$0000
 491  6B1D 22 20 C0                             ld      (UBnKxlo),hl
 492  6B20 21 00 00                             ld      hl,$0000
 493  6B23 22 23 C0                             ld      (UBnKylo),hl
 494  6B26 21 B4 03                             ld      hl,$03B4
 495  6B29 22 26 C0                             ld      (UBnKzlo),hl
 496  6B2C AF                                   xor     a
 497  6B2D 32 22 C0                             ld      (UBnKxsgn),a
 498  6B30 32 25 C0                             ld      (UBnKysgn),a
 499  6B33 32 28 C0                             ld      (UBnKzsgn),a
 500  6B36              ;    call    Reset TODO
 501  6B36 CD 24 CA                             call	InitialiseOrientation            ;#00;
 502  6B39 3E 01                                ld      a,1
 503  6B3B 32 ED 81                             ld      (DELTA),a
 504  6B3E 21 04 00                             ld      hl,4
 505  6B41 22 EE 81                             ld      (DELTA4),hl
 506  6B44 C9                                   ret
 507  6B45
 508  6B45              ; Checks to see if current ship swapped in is in our sights
 509  6B45              ; we don;t need to deal with planets or sun as they have their own memory bank
 510  6B45              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 510  6B45 B7          >                        or a
 511  6B46                                      ReturnIfMemIsNegative UBnKzsgn
 511  6B46 3A 28 C0    >                        ld      a,(UBnKzsgn)
 511  6B49 E6 80       >                        and     $80
 511  6B4B C0          >                        ret     nz
 512  6B4C 3A 51 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 513  6B4F 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 514  6B52 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
 515  6B56 B4                                   or      h
 516  6B57 B0                                   or      b
 517  6B58 C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 518  6B59 7D                                   ld      a,l                             ; hl =xlo ^ 2
 519  6B5A                                      DEEquSquareA                            ; .
 519  6B5A 57          >                        ld  d,a
 519  6B5B 5F          >                        ld  e,a
 519  6B5C ED 30       >                        mul de
 520  6B5E 62 6B                                ld      hl,de                           ; .
 521  6B60 79                                   ld      a,c                             ; de = de = ylo ^ 2
 522  6B61                                      DEEquSquareA                            ; .
 522  6B61 57          >                        ld  d,a
 522  6B62 5F          >                        ld  e,a
 522  6B63 ED 30       >                        mul de
 523  6B65 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 524  6B66 D8                                   ret     c                               ; if there was a carry then out of line of sight
 525  6B67 ED 5B 93 C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 526  6B6B                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 526  6B6B E5          >                        push    hl
 526  6B6C A7          >                        and     a
 526  6B6D ED 52       >                        sbc     hl,de
 526  6B6F E1          >                        pop     hl
 527  6B70 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 528  6B72 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 529  6B73              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 529  6B73 37          >                        scf
 530  6B74 C9                                   ret
 531  6B75
 532  6B75
 533  6B75                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6B75              ; bc = start position, d = length, e = colour
   2+ 6B75              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6B75 1E 10        Draw3LineBar:           ld      e,16
   4+ 6B77 C5 D5                                push    bc,,de
   5+ 6B79                                      MMUSelectLayer2
   5+ 6B79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6B7D CD 83 E4                             call    l2_draw_horz_line
   7+ 6B80 D1 C1                                pop     bc,,de
   8+ 6B82 05                                   dec     b
   9+ 6B83 C5 D5                                push    bc,,de
  10+ 6B85 1E 14                                ld      e,20
  11+ 6B87                                      MMUSelectLayer2
  11+ 6B87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6B8B CD 83 E4                             call    l2_draw_horz_line
  13+ 6B8E D1 C1                                pop     bc,,de
  14+ 6B90 05                                   dec     b
  15+ 6B91                                      MMUSelectLayer2
  15+ 6B91 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6B95 CD 83 E4                             call    l2_draw_horz_line
  17+ 6B98 C9                                   ret
  18+ 6B99
  19+ 6B99 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6B9B FE 28                                cp      40
  21+ 6B9D 30 18                                jr      nc,DrawColourEBar
  22+ 6B9F 1E 54                                ld      e,84
  23+ 6BA1 FE 1E                                cp      30
  24+ 6BA3 30 12                                jr      nc,DrawColourEBar
  25+ 6BA5 1E D8                                ld      e,216
  26+ 6BA7 FE 14                                cp      20
  27+ 6BA9 1E EC                                ld      e,236
  28+ 6BAB FE 0A                                cp      10
  29+ 6BAD 30 08                                jr      nc,DrawColourEBar
  30+ 6BAF 1E E1                                ld      e,225
  31+ 6BB1 FE 05                                cp      5
  32+ 6BB3 30 02                                jr      nc,DrawColourEBar
  33+ 6BB5 1E E0                                ld      e,224
  34+ 6BB7 C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6BB9                                      MMUSelectLayer2
  35+ 6BB9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6BBD CD 83 E4                             call    l2_draw_horz_line
  37+ 6BC0 D1 C1                                pop     bc,,de
  38+ 6BC2 05                                   dec     b
  39+ 6BC3 C5 D5                                push    bc,,de
  40+ 6BC5                                      MMUSelectLayer2
  40+ 6BC5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6BC9 CD 83 E4                             call    l2_draw_horz_line
  42+ 6BCC D1 C1                                pop     bc,,de
  43+ 6BCE 05                                   dec     b
  44+ 6BCF                                      MMUSelectLayer2
  44+ 6BCF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6BD3 CD 83 E4                             call    l2_draw_horz_line
  46+ 6BD6 C9                                   ret
  47+ 6BD7
  48+ 6BD7                                      ; no ret needed as jp handles it
  49+ 6BD7
  50+ 6BD7 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6BD9 CD 12 E3                             call    l2_print_chr_at
  52+ 6BDC C9                                   ret
  53+ 6BDD
  54+ 6BDD 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6BDF CD 12 E3                             call    l2_print_chr_at
  56+ 6BE2 C9                                   ret
  57+ 6BE3
  58+ 6BE3 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6BE5 CD 12 E3                             call    l2_print_chr_at
  60+ 6BE8 C9                                   ret
  61+ 6BE9
  62+ 6BE9 1E FF        MissileValue:           ld      e,$FF
  63+ 6BEB FE 00                                cp      0
  64+ 6BED F5                                   push    af
  65+ 6BEE CC E3 6B                             call    z,MissileDiagZero
  66+ 6BF1 F1                                   pop     af
  67+ 6BF2 C8                                   ret     z
  68+ 6BF3 CB 7F                                bit     7,a
  69+ 6BF5 F5                                   push    af
  70+ 6BF6 CC DD 6B                             call    z,MissileDiagNegative
  71+ 6BF9 F1                                   pop     af
  72+ 6BFA C8                                   ret     z
  73+ 6BFB C4 D7 6B                             call    nz,MissileDiagPositive
  74+ 6BFE C9                                   ret
  75+ 6BFF
  76+ 6BFF 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6C03 34 35 36 37
  76+ 6C07 38 39 41 42
  76+ 6C0B 43 44 45 46
  77+ 6C0F
  78+ 6C0F F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6C13 E6 0F                                and     $0F
  80+ 6C15 21 FF 6B                             ld      hl, Hex2Char
  81+ 6C18 ED 31                                add     hl,a
  82+ 6C1A 56                                   ld      d,(hl)
  83+ 6C1B CD 12 E3                             call    l2_print_chr_at
  84+ 6C1E D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6C22 C9                                   ret
  86+ 6C23
  87+ 6C23 ED 23        MissileHexToChar:       swapnib
  88+ 6C25 E6 0F                                and     $0F
  89+ 6C27 1E FF                                ld      e,$FF
  90+ 6C29                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6C29 FE 08       >                        cp      8
  90+ 6C2B DA 32 6C    >                        jp		c, .SkipNeg
  91+ 6C2E 1E 68                                ld      e,$68
  92+ 6C30 D6 08                                sub     8
  93+ 6C32 CD 0F 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6C35 ED 23                                swapnib
  95+ 6C37 F5                                   push    af
  96+ 6C38 79                                   ld      a,c
  97+ 6C39 C6 08                                add     8
  98+ 6C3B 4F                                   ld      c,a
  99+ 6C3C F1                                   pop     af
 100+ 6C3D E6 0F                                and     $0F
 101+ 6C3F CD 0F 6C                             call    MissileHexDigit
 102+ 6C42 C9                                   ret
 103+ 6C43
 104+ 6C43 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6C45 7E                                   ld      a,(hl)
 106+ 6C46 23                                   inc     hl
 107+ 6C47 B6                                   or      (hl)
 108+ 6C48 FE 00                                cp      0
 109+ 6C4A F5                                   push    af
 110+ 6C4B CC E3 6B                             call    z,MissileDiagZero
 111+ 6C4E F1                                   pop     af
 112+ 6C4F C8                                   ret     z
 113+ 6C50 7E                                   ld      a,(hl)
 114+ 6C51 CB 7F                                bit     7,a
 115+ 6C53 F5                                   push    af
 116+ 6C54 CC DD 6B                             call    z,MissileDiagNegative
 117+ 6C57 F1                                   pop     af
 118+ 6C58 C8                                   ret     z
 119+ 6C59 C4 D7 6B                             call    nz,MissileDiagPositive
 120+ 6C5C C9                                   ret
 121+ 6C5D
 122+ 6C5D 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6C5F 1E 30                                ld      e, $30
 124+ 6C61 01 88 80                             ld      bc,$8088
 125+ 6C64 CD 12 E3                             call    l2_print_chr_at
 126+ 6C67 01 88 88                             ld      bc,$8888
 127+ 6C6A 16 7A                                ld      d,"z"
 128+ 6C6C 1E 30                                ld      e, $30
 129+ 6C6E CD 12 E3                             call    l2_print_chr_at
 130+ 6C71 01 88 90                             ld      bc,$9088
 131+ 6C74 16 73                                ld      d,"s"
 132+ 6C76 1E 30                                ld      e, $30
 133+ 6C78 CD 12 E3                             call    l2_print_chr_at
 134+ 6C7B 01 48 90                             ld      bc,$9048
 135+ 6C7E 16 6E                                ld      d,"n"
 136+ 6C80 1E 30                                ld      e, $30
 137+ 6C82 CD 12 E3                             call    l2_print_chr_at
 138+ 6C85 01 48 80                             ld      bc,$8048
 139+ 6C88 16 73                                ld      d,"s"
 140+ 6C8A 1E 30                                ld      e, $30
 141+ 6C8C CD 12 E3                             call    l2_print_chr_at
 142+ 6C8F 01 48 88                             ld      bc,$8848
 143+ 6C92 16 72                                ld      d,"r"
 144+ 6C94 1E 30                                ld      e, $30
 145+ 6C96 CD 12 E3                             call    l2_print_chr_at
 146+ 6C99 C9                                   ret
 147+ 6C9A
 148+ 6C9A              MissileDiagnotics:      MMUSelectLayer2
 148+ 6C9A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6C9E CD 5D 6C                             call    MissileDiagPrintBoiler
 150+ 6CA1 1E FF                                ld      e,$FF
 151+ 6CA3 01 90 80                             ld      bc,$8090
 152+ 6CA6 3A D7 A3                             ld      a,(TacticsRotX)
 153+ 6CA9 CD 23 6C                             call    MissileHexToChar; MissileValue
 154+ 6CAC 01 90 88                             ld      bc,$8890
 155+ 6CAF 3A D9 A3                             ld      a,(TacticsRotZ)
 156+ 6CB2 CD 23 6C                             call    MissileHexToChar; MissileValue
 157+ 6CB5 01 90 90                             ld      bc,$9090
 158+ 6CB8 3A DB A3                             ld      a,(TacticsSpeed)
 159+ 6CBB CD 23 6C                             call    MissileHexToChar; MissileValue
 160+ 6CBE 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6CC1 3A A7 A3                             ld      a,(TacticsSideX+1)
 162+ 6CC4 CD 23 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6CC7 01 62 80                             ld      bc,$8062
 164+ 6CCA 3A AB A3                             ld      a,(TacticsSideY+1)
 165+ 6CCD CD 23 6C                             call    MissileHexToChar
 166+ 6CD0 01 74 80                             ld      bc,$8074
 167+ 6CD3 3A AF A3                             ld      a,(TacticsSideZ+1)
 168+ 6CD6 CD 23 6C                             call    MissileHexToChar
 169+ 6CD9 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6CDC 3A B7 A3                             ld      a,(TacticsRoofX+1)
 171+ 6CDF CD 23 6C                             call    MissileHexToChar
 172+ 6CE2 01 62 88                             ld      bc,$8862
 173+ 6CE5 3A BB A3                             ld      a,(TacticsRoofY+1)
 174+ 6CE8 CD 23 6C                             call    MissileHexToChar
 175+ 6CEB 01 74 88                             ld      bc,$8874
 176+ 6CEE 3A BF A3                             ld      a,(TacticsRoofZ+1)
 177+ 6CF1 CD 23 6C                             call    MissileHexToChar
 178+ 6CF4 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6CF7 3A C7 A3                             ld      a,(TacticsNoseX+1)
 180+ 6CFA CD 23 6C                             call    MissileHexToChar
 181+ 6CFD 01 62 90                             ld      bc,$9062
 182+ 6D00 3A CB A3                             ld      a,(TacticsNoseY+1)
 183+ 6D03 CD 23 6C                             call    MissileHexToChar
 184+ 6D06 01 74 90                             ld      bc,$9074
 185+ 6D09 3A BF A3                             ld      a,(TacticsRoofZ+1)
 186+ 6D0C CD 23 6C                             call    MissileHexToChar
 187+ 6D0F C9                                   ret
 188+ 6D10
 189+ 6D10              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6D10 ~                                            call    MissileDiagnotics
 191+ 6D10                                      ENDIF
 192+ 6D10 3A ED 81                             ld      a,(DELTA)
 193+ 6D13 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6D15 28 0C                                jr      z,.UpdateRoll
 195+ 6D17 01 D1 84                             ld      bc,SpeedoStart
 196+ 6D1A 21 76 85                             ld      hl,SpeedoMapping
 197+ 6D1D ED 31                                add     hl,a
 198+ 6D1F 56                                   ld      d,(hl)
 199+ 6D20 CD 75 6B                             call    Draw3LineBar
 200+ 6D23 3A 0D 81     .UpdateRoll:            ld      a,(ALP1)
 201+ 6D26 FE 00                                cp      0
 202+ 6D28 CA 5C 6D                             jp      z,.UpdatePitch
 203+ 6D2B 21 E0 8C                             ld      hl,RollMiddle
 204+ 6D2E 3A 0E 81                             ld      a,(ALP2)
 205+ 6D31 FE 00                                cp      0
 206+ 6D33 CA 4E 6D                             jp     z,.PosRoll
 207+ 6D36 16 00        .NegRoll:               ld      d,0
 208+ 6D38 3A 0D 81                             ld      a,(ALP1)
 209+ 6D3B CB 27                                sla     a
 210+ 6D3D 5F                                   ld      e,a
 211+ 6D3E B7                                   or      a
 212+ 6D3F ED 52                                sbc     hl,de
 213+ 6D41 44 4D                                ld      bc,hl
 214+ 6D43 3E E1                                ld      a,DialMiddleXPos
 215+ 6D45 91                                   sub     c
 216+ 6D46 57                                   ld      d,a
 217+ 6D47 1E FF                                ld      e,$FF
 218+ 6D49 CD 75 6B                             call    Draw3LineBar
 219+ 6D4C 18 0E                                jr      .UpdatePitch
 220+ 6D4E 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6D51 3A 0D 81                             ld      a,(ALP1)
 222+ 6D54 CB 27                                sla     a
 223+ 6D56 57                                   ld      d,a
 224+ 6D57 1E FF                                ld      e,$FF
 225+ 6D59 CD 75 6B                             call    Draw3LineBar
 226+ 6D5C 3A 01 81     .UpdatePitch:           ld      a,(BET1)
 227+ 6D5F FE 00                                cp      0
 228+ 6D61 CA 96 6D                             jp      z,.Fuel
 229+ 6D64 21 E0 94                             ld      hl,PitchMiddle
 230+ 6D67 3A 02 81                             ld      a,(BET2)
 231+ 6D6A FE 00                                cp      0
 232+ 6D6C CA 88 6D                             jp      z,.PosPitch
 233+ 6D6F 16 00        .NegPitch:              ld      d,0
 234+ 6D71 3A 01 81                             ld      a,(BET1)
 235+ 6D74 CB 27                                sla     a
 236+ 6D76 5F                                   ld      e,a
 237+ 6D77 B7                                   or      a
 238+ 6D78 ED 52                                sbc     hl,de
 239+ 6D7A 44 4D                                ld      bc,hl
 240+ 6D7C 3E E1                                ld      a,DialMiddleXPos
 241+ 6D7E 91                                   sub     c
 242+ 6D7F 57                                   ld      d,a
 243+ 6D80 1E FF                                ld      e,$FF
 244+ 6D82 CD 75 6B                             call    Draw3LineBar
 245+ 6D85 C3 96 6D                             jp      .Fuel
 246+ 6D88 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6D8B 3A 01 81                             ld      a,(BET1)
 248+ 6D8E CB 27                                sla     a
 249+ 6D90 57                                   ld      d,a
 250+ 6D91 1E FF                                ld      e,$FF
 251+ 6D93 CD 75 6B                             call    Draw3LineBar
 252+ 6D96 3A 04 88     .Fuel:                  ld      a,(Fuel)
 253+ 6D99 CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6D9B 21 51 85                             ld      hl,FuelMapping
 255+ 6D9E ED 31                                add     hl,a
 256+ 6DA0 7E                                   ld      a,(hl)
 257+ 6DA1 01 10 94                             ld      bc,FuelStart
 258+ 6DA4 57                                   ld      d,a
 259+ 6DA5 CD 99 6B                             call    DrawColourCodedBar
 260+ 6DA8 3A 21 85     .FrontShield:           ld      a,(ForeShield)
 261+ 6DAB CB 3F                                srl     a
 262+ 6DAD CB 3F                                srl     a
 263+ 6DAF CB 3F                                srl     a
 264+ 6DB1 01 10 84                             ld      bc,FShieldStart
 265+ 6DB4 57                                   ld      d,a
 266+ 6DB5 CD 99 6B                             call    DrawColourCodedBar
 267+ 6DB8 3A 22 85     .AftShield:             ld      a,(AftShield)
 268+ 6DBB CB 3F                                srl     a
 269+ 6DBD CB 3F                                srl     a
 270+ 6DBF CB 3F                                srl     a
 271+ 6DC1 01 10 8D                             ld      bc,AShieldStart
 272+ 6DC4 57                                   ld      d,a
 273+ 6DC5 CD 99 6B                             call    DrawColourCodedBar
 274+ 6DC8              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6DC8 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6DCC 3A 08 81     .DrawECM:               ld      a,(ECMCountDown)
 276+ 6DCF                                      JumpIfAIsZero   .HideECM
 276+ 6DCF A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 6DD0 CA D9 6D    >                        jp	    z, .HideECM
 277+ 6DD3 CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 6DD6 C3 DC 6D                             jp      .ProcessedECM
 279+ 6DD9 CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 6DDC              .ProcessedECM:
 281+ 6DDC 3A 96 82     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 6DDF FD 6F                                ld      iyl,a
 283+ 6DE1                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 6DE1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 6DE2 CA 20 6E    >                        jp	    z, .HideAllMissiles
 284+ 6DE5 3A 26 85     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 6DE8                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 6DE8 FE FF       >                        cp     StageMissileNotTargeting
 285+ 6DEA CA F8 6D    >                        jp      z,.MissileReady
 286+ 6DED                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 6DED FE FE       >                        cp     StageMissileTargeting
 286+ 6DEF CA FE 6D    >                        jp      z,.MissileArmed
 287+ 6DF2 CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 6DF5 C3 01 6E                             jp      .DrawMissile_2
 289+ 6DF8 CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 6DFB C3 01 6E                             jp      .DrawMissile_2
 291+ 6DFE CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 6E01 FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 6E03                                      JumpIfALTNusng 2, .Only1Missile
 293+ 6E03 FE 02       >                        cp      2
 293+ 6E05 DA 23 6E    >                        jp		c, .Only1Missile
 294+ 6E08 CD E5 E1                             call    show_missile_2_ready
 295+ 6E0B FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 6E0D                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 6E0D FE 03       >                        cp      3
 296+ 6E0F DA 26 6E    >                        jp		c, .Only2Missiles
 297+ 6E12 CD F0 E1                             call    show_missile_3_ready
 298+ 6E15 FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 6E17                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 6E17 FE 04       >                        cp      4
 299+ 6E19 DA 26 6E    >                        jp		c, .Only2Missiles
 300+ 6E1C CD FB E1                             call    show_missile_4_ready
 301+ 6E1F C9                                   ret
 302+ 6E20 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 6E23 CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 6E26 CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 6E29 CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 6E2C              ;PlayerEnergy
 307+ 6E2C              ; BNEED LASER temp
 308+ 6E2C              ; NEED CABIN TEMP
 309+ 6E2C              ;NEED ALTITUDE
 310+ 6E2C              ; Draw compas - if in range draw station, else do planet
 311+ 6E2C 3A 23 85     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 6E2F CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 6E31                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 6E31 FE 20       >                        cp      31 + 1
 313+ 6E33 DA 43 6E    >                        jp		c, Draw1EnergyBar
 314+ 6E36                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 6E36 FE 3F       >                        cp      (31*2) + 1
 314+ 6E38 DA 4D 6E    >                        jp		c, Draw2EnergyBars
 315+ 6E3B                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 6E3B FE 5E       >                        cp      (31*3) + 1
 315+ 6E3D DA 63 6E    >                        jp		c, Draw3EnergyBars
 316+ 6E40 C3 85 6E                             jp      Draw4EnergyBars
 317+ 6E43
 318+ 6E43 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 6E45 57                                   ld      d,a
 320+ 6E46 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 6E49 CD B7 6B                             call    DrawColourEBar
 322+ 6E4C C9                                   ret
 323+ 6E4D 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 6E4F D6 1F                                sub     31
 325+ 6E51 57                                   ld      d,a
 326+ 6E52 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 6E55 CD B7 6B                             call    DrawColourEBar
 328+ 6E58 16 1F                                ld      d,31
 329+ 6E5A 1E D8                                ld      e,216
 330+ 6E5C 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 6E5F CD B7 6B                             call    DrawColourEBar
 332+ 6E62 C9                                   ret
 333+ 6E63 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 6E65 D6 3E                                sub     31*2
 335+ 6E67 57                                   ld      d,a
 336+ 6E68 1E 14                                ld      e,20
 337+ 6E6A 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 6E6D CD B7 6B                             call    DrawColourEBar
 339+ 6E70 16 1F                                ld      d,31
 340+ 6E72 1E 14                                ld      e,20
 341+ 6E74 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 6E77 CD B7 6B                             call    DrawColourEBar
 343+ 6E7A 16 1F                                ld      d,31
 344+ 6E7C 1E 14                                ld      e,20
 345+ 6E7E 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 6E81 CD B7 6B                             call    DrawColourEBar
 347+ 6E84 C9                                   ret
 348+ 6E85 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 6E87 D6 5D                                sub     31*3
 350+ 6E89                                      JumpIfALTNusng 31,.NoMax
 350+ 6E89 FE 1F       >                        cp      31
 350+ 6E8B DA 90 6E    >                        jp		c, .NoMax
 351+ 6E8E 3E 1F        .Max                    ld      a,31
 352+ 6E90 57           .NoMax:                 ld      d,a
 353+ 6E91 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 6E94 CD B7 6B                             call    DrawColourEBar
 355+ 6E97 16 1F                                ld      d,31
 356+ 6E99 1E 18                                ld      e,24
 357+ 6E9B 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 6E9E CD B7 6B                             call    DrawColourEBar
 359+ 6EA1 16 1F                                ld      d,31
 360+ 6EA3 1E 18                                ld      e,24
 361+ 6EA5 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 6EA8 CD B7 6B                             call    DrawColourEBar
 363+ 6EAB 16 1F                                ld      d,31
 364+ 6EAD 1E 18                                ld      e,24
 365+ 6EAF 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 6EB2 CD B7 6B                             call    DrawColourEBar
 367+ 6EB5 C9                                   ret
 368+ 6EB6
 369+ 6EB6              ScannerBottom           equ 190
 370+ 6EB6              ScannerTypeMissle       equ 2
 371+ 6EB6              ScannerXRangeOffset     equ $35
 372+ 6EB6              ScannerCenter           equ 127
 373+ 6EB6
 374+ 6EB6              ScannerDefault          equ 0
 375+ 6EB6              ScannerMissile          equ 2
 376+ 6EB6              ScannerStation          equ 4
 377+ 6EB6              ScannerEnemy            equ 6
 378+ 6EB6
 379+ 6EB6
 380+ 6EB6 00           SunXScaled              DB  0
 381+ 6EB7 00           SunYScaled              DB  0
 382+ 6EB8 00           SunZScaled              DB  0
 383+ 6EB9
 384+ 6EB9                                      ;   ShipTypeNormal
 385+ 6EB9 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 6EBD 12 1F 80 E0
 386+ 6EC1 C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 6EC5 C0 E0 C0 E0
 387+ 6EC9
 388+ 6EC9              GetShipColor:           MACRO
 389+ 6EC9 ~                                    ld      hl,ScannerColourTable
 390+ 6EC9 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 6EC9 ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 6EC9 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 6EC9 ~                                    ld      a,(ShipNewBitsAddr)
 394+ 6EC9 ~                                    and     ShipIsHostile
 395+ 6EC9 ~                                    jr      z,.UsingColourTable
 396+ 6EC9 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 6EC9 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 6EC9 ~                                    sla     a                            ; as its byte pairs * 2
 399+ 6EC9 ~                                    add     hl,a
 400+ 6EC9 ~                                    ld      a,(hl)
 401+ 6EC9                                      ENDM
 402+ 6EC9              GetShipColorBright:     MACRO
 403+ 6EC9 ~                                    ld      hl,ScannerColourTable
 404+ 6EC9 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 6EC9 ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 6EC9 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 6EC9 ~                                    ld      a,(ShipNewBitsAddr)
 408+ 6EC9 ~                                    and     ShipIsHostile
 409+ 6EC9 ~                                    jr      z,.UsingColourTable
 410+ 6EC9 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 6EC9 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 6EC9 ~                                    sla     a                            ; as its byte pairs * 2
 413+ 6EC9 ~                                    inc     a
 414+ 6EC9 ~                                    add     hl,a
 415+ 6EC9 ~                                    ld      a,(hl)
 416+ 6EC9                                      ENDM
 417+ 6EC9
 418+ 6EC9              Shift24BitScan:         MACRO   regHi, reglo
 419+ 6EC9 ~                                    ld      hl,(regHi)
 420+ 6EC9 ~                                    ld      b,h
 421+ 6EC9 ~                                    ld      a,h
 422+ 6EC9 ~                                    and     SignMask8Bit
 423+ 6EC9 ~                                    ld      h,a
 424+ 6EC9 ~                                    ld      a,(reglo)
 425+ 6EC9 ~                                    sla     a
 426+ 6EC9 ~                                    rl      l
 427+ 6EC9 ~                                    rl      h
 428+ 6EC9 ~                                    sla     a
 429+ 6EC9 ~                                    rl      l
 430+ 6EC9 ~                                    rl      h
 431+ 6EC9 ~                                    sla     a
 432+ 6EC9 ~                                    rl      l
 433+ 6EC9 ~                                    rl      h
 434+ 6EC9 ~                                    sla     a
 435+ 6EC9 ~                                    rl      l
 436+ 6EC9 ~                                    rl      h
 437+ 6EC9 ~                                    sla     a
 438+ 6EC9 ~                                    rl      l
 439+ 6EC9 ~                                    rl      h
 440+ 6EC9 ~                                    sla     a
 441+ 6EC9 ~                                    rl      l
 442+ 6EC9 ~                                    rl      h
 443+ 6EC9                                      ENDM
 444+ 6EC9
 445+ 6EC9              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 6EC9 ~                                    ld      a,regsgn
 447+ 6EC9 ~                                    srl     a
 448+ 6EC9 ~                                    rr      reghi
 449+ 6EC9 ~                                    rr      reglo
 450+ 6EC9 ~                                    ld      regsgn,a
 451+ 6EC9                                      ENDM
 452+ 6EC9
 453+ 6EC9              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 6EC9              ;                        ld      a,(SBnKzsgn)
 455+ 6EC9              ;                        push    af
 456+ 6EC9              ;                        and     SignMask8Bit
 457+ 6EC9              ;                        ld      iyl,a
 458+ 6EC9              ;                        ld      hl,(SBnKxlo)
 459+ 6EC9              ;                        ld      a,(SBnKxsgn)
 460+ 6EC9              ;                        push    af
 461+ 6EC9              ;                        and     SignMask8Bit
 462+ 6EC9              ;                        ld      ixl,a
 463+ 6EC9              ;                        ld      bc,(SBnKylo)
 464+ 6EC9              ;                        ld      a,(SBnKysgn)
 465+ 6EC9              ;                        and     SignMask8Bit
 466+ 6EC9              ;                        push    af
 467+ 6EC9              ;                        ld      iyh,a
 468+ 6EC9              ;.ShiftLoop:             ld      a,iyh
 469+ 6EC9              ;                        or      iyl
 470+ 6EC9              ;                        or      ixl
 471+ 6EC9              ;                        jr      z,.ShiftBit15
 472+ 6EC9              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 6EC9              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 6EC9              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 6EC9              ;                        jr      .ShipLoop
 476+ 6EC9              ;.ShiftBit15:            ld      a,iyh
 477+ 6EC9              ;                        or      iyl
 478+ 6EC9              ;                        or      ixl
 479+ 6EC9              ;                        jr      z,.CompletedShift
 480+ 6EC9              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 6EC9              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 6EC9              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 6EC9              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 6EC9              ;                        and     SignOnly8Bit
 485+ 6EC9              ;                        or      b
 486+ 6EC9              ;                        ld      b,a
 487+ 6EC9              ;                        pop     af                          ; get xsgn
 488+ 6EC9              ;                        and     SignOnly8Bit
 489+ 6EC9              ;                        or      h
 490+ 6EC9              ;                        ld      h,a
 491+ 6EC9              ;                        pop     af                          ; get zsgn
 492+ 6EC9              ;                        and     SignOnly8Bit
 493+ 6EC9              ;                        or      d
 494+ 6EC9              ;                        ld      d,a
 495+ 6EC9              ;                        ret
 496+ 6EC9              ;
 497+ 6EC9 ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 498+ 6ECD 7A                                   ld      a,d                         ; .
 499+ 6ECE F5                                   push    af                          ; .
 500+ 6ECF E6 7F                                and     SignMask8Bit                ; .
 501+ 6ED1 57                                   ld      d,a                         ; .
 502+ 6ED2 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 503+ 6ED5 7C                                   ld      a,h                         ; .
 504+ 6ED6 F5                                   push    af                          ; .
 505+ 6ED7 E6 7F                                and     SignMask8Bit                ; .
 506+ 6ED9 67                                   ld      h,a                         ; .
 507+ 6EDA ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 508+ 6EDE 78                                   ld      a,b                         ; .
 509+ 6EDF F5                                   push    af                          ; .
 510+ 6EE0 E6 7F                                and     SignMask8Bit                ; .
 511+ 6EE2 47                                   ld      b,a                         ; .
 512+ 6EE3 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 6EE4 B2                                   or      d                           ; .
 514+ 6EE5 B4                                   or      h                           ; .
 515+ 6EE6 28 0E                                jr      z,.Shifted                  ; .
 516+ 6EE8                                      ShiftBCRight1                       ; .
 516+ 6EE8 CB 38       >			   srl b
 516+ 6EEA CB 19       >			   rr  c
 517+ 6EEC                                      ShiftHLRight1                       ; .
 517+ 6EEC CB 3C       >			   srl h
 517+ 6EEE CB 1D       >			   rr  l
 518+ 6EF0                                      ShiftDERight1                       ; .
 518+ 6EF0 CB 3A       >			   srl d
 518+ 6EF2 CB 1B       >			   rr  e
 519+ 6EF4 18 ED                                jr      .ShiftLoop
 520+ 6EF6 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 6EF7 B5                                   or      l                           ;
 522+ 6EF8 B3                                   or      e                           ;
 523+ 6EF9 E6 80                                and     $80                         ;
 524+ 6EFB 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 6EFD                                      ShiftBCRight1                       ; we want 7 bit
 525+ 6EFD CB 38       >			   srl b
 525+ 6EFF CB 19       >			   rr  c
 526+ 6F01                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 6F01 CB 3C       >			   srl h
 526+ 6F03 CB 1D       >			   rr  l
 527+ 6F05                                      ShiftDERight1                       ; .
 527+ 6F05 CB 3A       >			   srl d
 527+ 6F07 CB 1B       >			   rr  e
 528+ 6F09 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 6F0A E6 80                                and     SignOnly8Bit                ;
 530+ 6F0C 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 6F0D F1                                   pop     af                          ; get xsgn
 532+ 6F0E E6 80                                and     SignOnly8Bit                ;
 533+ 6F10 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 6F11 F1                                   pop     af                          ; get zsgn
 535+ 6F12 E6 80                                and     SignOnly8Bit                ;
 536+ 6F14 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 6F15 C9                                   ret
 538+ 6F16
 539+ 6F16 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 6F1A 7A                                   ld      a,d                         ; .
 541+ 6F1B F5                                   push    af                          ; .
 542+ 6F1C E6 7F                                and     SignMask8Bit                ; .
 543+ 6F1E 57                                   ld      d,a                         ; .
 544+ 6F1F 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 6F22 7C                                   ld      a,h                         ; .
 546+ 6F23 F5                                   push    af                          ; .
 547+ 6F24 E6 7F                                and     SignMask8Bit                ; .
 548+ 6F26 67                                   ld      h,a                         ; .
 549+ 6F27 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 6F2B 78                                   ld      a,b                         ; .
 551+ 6F2C F5                                   push    af                          ; .
 552+ 6F2D E6 7F                                and     SignMask8Bit                ; .
 553+ 6F2F 47                                   ld      b,a                         ; .
 554+ 6F30 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 6F31 B2                                   or      d                           ; .
 556+ 6F32 B4                                   or      h                           ; .
 557+ 6F33 28 0E                                jr      z,.Shifted                  ; .
 558+ 6F35                                      ShiftBCRight1                       ; .
 558+ 6F35 CB 38       >			   srl b
 558+ 6F37 CB 19       >			   rr  c
 559+ 6F39                                      ShiftHLRight1                       ; .
 559+ 6F39 CB 3C       >			   srl h
 559+ 6F3B CB 1D       >			   rr  l
 560+ 6F3D                                      ShiftDERight1                       ; .
 560+ 6F3D CB 3A       >			   srl d
 560+ 6F3F CB 1B       >			   rr  e
 561+ 6F41 18 ED                                jr      .ShiftLoop
 562+ 6F43 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 6F44 B5                                   or      l                           ;
 564+ 6F45 B3                                   or      e                           ;
 565+ 6F46 E6 80                                and     $80                         ;
 566+ 6F48 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 6F4A                                      ShiftBCRight1                       ; we want 7 bit
 567+ 6F4A CB 38       >			   srl b
 567+ 6F4C CB 19       >			   rr  c
 568+ 6F4E                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 6F4E CB 3C       >			   srl h
 568+ 6F50 CB 1D       >			   rr  l
 569+ 6F52                                      ShiftDERight1                       ; .
 569+ 6F52 CB 3A       >			   srl d
 569+ 6F54 CB 1B       >			   rr  e
 570+ 6F56 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 6F57 E6 80                                and     SignOnly8Bit                ;
 572+ 6F59 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 6F5A F1                                   pop     af                          ; get xsgn
 574+ 6F5B E6 80                                and     SignOnly8Bit                ;
 575+ 6F5D 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 6F5E F1                                   pop     af                          ; get zsgn
 577+ 6F5F E6 80                                and     SignOnly8Bit                ;
 578+ 6F61 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 6F62 C9                                   ret
 580+ 6F63
 581+ 6F63              ;compass sun
 582+ 6F63              ;            if value is still 24 bit
 583+ 6F63              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 6F63              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 6F63              ;                tempk39 = OR 3 low bytes
 586+ 6F63              ;                tempkA = OR 3 high bytes
 587+ 6F63              ;                 TAL2:    repeat
 588+ 6F63              ;                             asl tempka tempk39
 589+ 6F63              ;                             exit if carry set
 590+ 6F63              ;                             x coord << 1
 591+ 6F63              ;                             y corrd << 1
 592+ 6F63              ;                             z coord << 1
 593+ 6F63              ;                          until carry clear
 594+ 6F63              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 6F63              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 6F63              ;                          RQ = AP = X ^ 2
 597+ 6F63              ;                          TP = AP = Y ^ 2
 598+ 6F63              ;                          RQ = RQ + TP
 599+ 6F63              ;                          TP = AP = Z ^ 2
 600+ 6F63              ;                          RQ = RQ + TP
 601+ 6F63              ;                          Q = SQRT (RQ)
 602+ 6F63              ;                          for each coord - A = A/Q * 3/ 8
 603+ 6F63              ;
 604+ 6F63              ;
 605+ 6F63
 606+ 6F63 ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 6F67 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 6F6A ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 6F6E 7A                                   ld      a,d
 610+ 6F6F E6 80                                and     SignOnly8Bit
 611+ 6F71 CB 3F                                srl     a
 612+ 6F73 FD 6F                                ld      iyl,a
 613+ 6F75 7C                                   ld      a,h
 614+ 6F76 E6 80                                and     SignOnly8Bit
 615+ 6F78 FD B5                                or      iyl
 616+ 6F7A CB 3F                                srl     a
 617+ 6F7C 78                                   ld      a,b
 618+ 6F7D E6 80                                and     SignOnly8Bit
 619+ 6F7F FD B5                                or      iyl
 620+ 6F81 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 6F83                                      ClearSignBit d
 621+ 6F83 7A          >                        ld      a,d
 621+ 6F84 E6 7F       >                        and     SignMask8Bit
 621+ 6F86 57          >                        ld      d,a
 622+ 6F87                                      ClearSignBit h
 622+ 6F87 7C          >                        ld      a,h
 622+ 6F88 E6 7F       >                        and     SignMask8Bit
 622+ 6F8A 67          >                        ld      h,a
 623+ 6F8B                                      ClearSignBit b
 623+ 6F8B 78          >                        ld      a,b
 623+ 6F8C E6 7F       >                        and     SignMask8Bit
 623+ 6F8E 47          >                        ld      b,a
 624+ 6F8F 78                                   ld      a,b
 625+ 6F90 B3                                   or      e
 626+ 6F91 B4                                   or      h
 627+ 6F92 B5                                   or      l
 628+ 6F93 B0                                   or      b
 629+ 6F94 B1                                   or      c
 630+ 6F95 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 6F97 7A                                   ld      a,d
 632+ 6F98 B3                                   or      e
 633+ 6F99 B4                                   or      h
 634+ 6F9A CB 27                                sla     a
 635+ 6F9C 38 15                                jr      c,.DoneCalc
 636+ 6F9E 28 13                                jr      z,.DoneCalc
 637+ 6FA0              .UpscaleLoop:           ShiftDELeft1
 637+ 6FA0 CB 23       >			   sla e
 637+ 6FA2 CB 12       >			   rl  d
 638+ 6FA4                                      ShiftHLLeft1
 638+ 6FA4 CB 25       >			   sla l
 638+ 6FA6 CB 14       >			   rl  h
 639+ 6FA8                                      ShiftBCLeft1
 639+ 6FA8 CB 21       >			   sla c
 639+ 6FAA CB 10       >			   rl  b
 640+ 6FAC CB 27                                sla     a
 641+ 6FAE 38 03                                jr      c,.DoneCalc
 642+ 6FB0 C3 A0 6F                             jp      .UpscaleLoop
 643+ 6FB3              .DoneCalc               ShiftDERight1
 643+ 6FB3 CB 3A       >			   srl d
 643+ 6FB5 CB 1B       >			   rr  e
 644+ 6FB7                                      ShiftHLRight1
 644+ 6FB7 CB 3C       >			   srl h
 644+ 6FB9 CB 1D       >			   rr  l
 645+ 6FBB                                      ShiftBCRight1
 645+ 6FBB CB 38       >			   srl b
 645+ 6FBD CB 19       >			   rr  c
 646+ 6FBF 5A           .NowSetResultInLowByte: ld      e,d
 647+ 6FC0 6C                                   ld      l,h
 648+ 6FC1 48                                   ld      c,b
 649+ 6FC2 FD 7D                                ld      a,iyl
 650+ 6FC4 E6 80                                and     SignOnly8Bit
 651+ 6FC6 47                                   ld      b,a
 652+ 6FC7 FD 7D                                ld      a,iyl
 653+ 6FC9 CB 27                                sla     a
 654+ 6FCB FD 6F                                ld      iyl,a
 655+ 6FCD E6 80                                and     SignOnly8Bit
 656+ 6FCF 67                                   ld      h,a
 657+ 6FD0 FD 7D                                ld      a,iyl
 658+ 6FD2 CB 27                                sla     a
 659+ 6FD4 E6 80                                and     SignOnly8Bit
 660+ 6FD6 57                                   ld      d,a
 661+ 6FD7 C9                                   ret
 662+ 6FD8 3E 01        .Setto1:                ld      a,1
 663+ 6FDA 4F                                   ld      c,a
 664+ 6FDB 5F                                   ld      e,a
 665+ 6FDC 6F                                   ld      l,a
 666+ 6FDD FD 7D                                ld      a,iyl
 667+ 6FDF CB 27                                sla     a
 668+ 6FE1 CB 27                                sla     a
 669+ 6FE3 E6 80                                and     SignOnly8Bit
 670+ 6FE5 B3                                   or      e
 671+ 6FE6 5F                                   ld      e,a
 672+ 6FE7 C9                                   ret
 673+ 6FE8
 674+ 6FE8
 675+ 6FE8              UpdateCompassSun:       MMUSelectSun
 675+ 6FE8 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 676+ 6FEC CD 16 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 6FEF C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 6FF2 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 6FF3 59                                   ld      e,c                         ; .
 680+ 6FF4 ED 30                                mul                                 ; .
 681+ 6FF6 42 4B                                ld      bc,de                       ; .
 682+ 6FF8 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 6FF9 5D                                   ld      e,l                         ; .
 684+ 6FFA ED 30                                mul                                 ; .
 685+ 6FFC EB                                   ex      de,hl                       ; .
 686+ 6FFD D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 6FFE 53                                   ld      d,e                         ; de = z ^
 688+ 6FFF ED 30                                mul                                 ; .
 689+ 7001 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 7002 09                                   add     hl,bc                       ; .
 691+ 7003 EB                                   ex      de,hl                       ; .
 692+ 7004 CD 85 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 7007                                      ; if h <> 0 then more difficult
 694+ 7007 55                                   ld      d,l                         ; iyl = q
 695+ 7008 FD 6A                                ld      iyl,d                       ; .
 696+ 700A E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 700B 7C                                   ld      a,h                         ; c = sign
 698+ 700C E6 80                                and     SignOnly8Bit                ; .
 699+ 700E 4F                                   ld      c,a                         ; .
 700+ 700F C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 7010 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 7011 CD 6F 9B                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 7014 5F                                   ld      e,a                         ; .
 704+ 7015                                      EDiv10Inline                        ; a = e / 10
 704+ 7015 16 00       >                        ld      d,0
 704+ 7017 62 6B       >                        ld      hl,de
 704+ 7019 29          >                        add     hl,hl
 704+ 701A 19          >                        add     hl,de
 704+ 701B 29          >                        add     hl,hl
 704+ 701C 29          >                        add     hl,hl
 704+ 701D 19          >                        add     hl,de
 704+ 701E 29          >                        add     hl,hl
 705+ 701F 7C                                   ld      a,h                         ; .
 706+ 7020 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 7021 FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 7023 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 7025 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 7027 28 02                                jr      z,.DoneNormX
 711+ 7029 ED 44                                neg
 712+ 702B DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 702D FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 702F E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7030 7C                                   ld      a,h                         ; c = sign
 716+ 7031 E6 80                                and     SignOnly8Bit                ; .
 717+ 7033 4F                                   ld      c,a                         ; .
 718+ 7034 C5                                   push    bc                          ; +1 save sign to stack
 719+ 7035 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 7036 CD 6F 9B                             call    AequAdivQmul96ABS           ; .
 721+ 7039 5F                                   ld      e,a                         ; a = e / 10
 722+ 703A                                      EDiv10Inline                        ; .
 722+ 703A 16 00       >                        ld      d,0
 722+ 703C 62 6B       >                        ld      hl,de
 722+ 703E 29          >                        add     hl,hl
 722+ 703F 19          >                        add     hl,de
 722+ 7040 29          >                        add     hl,hl
 722+ 7041 29          >                        add     hl,hl
 722+ 7042 19          >                        add     hl,de
 722+ 7043 29          >                        add     hl,hl
 723+ 7044 7C                                   ld      a,h                         ; retrieve sign
 724+ 7045 C1                                   pop     bc                          ; +1 retrieve sign
 725+ 7046 FE 00                                cp      0
 726+ 7048 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 704A CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 704C 28 02                                jr      z,.DoneNormY
 729+ 704E ED 44                                neg                                 ;
 730+ 7050 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 7051 DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 7053              .SetSprite:             MMUSelectSpriteBank
 732+ 7053 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 7057 CD 05 E1                             call    compass_sun_move
 734+ 705A DD 7D                                ld      a,ixl
 735+ 705C CB 7F                                bit     7,a
 736+ 705E 20 04                                jr      nz,.SunBehind
 737+ 7060 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 7063 C9                                   ret
 739+ 7064 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 7067 C9                                   ret
 741+ 7068
 742+ 7068
 743+ 7068              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 7068 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 706C CD C9 6E                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 706F C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 7072 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 7073 59                                   ld      e,c                         ; .
 748+ 7074 ED 30                                mul                                 ; .
 749+ 7076 42 4B                                ld      bc,de                       ; .
 750+ 7078 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 7079 5D                                   ld      e,l                         ; .
 752+ 707A ED 30                                mul                                 ; .
 753+ 707C EB                                   ex      de,hl                       ; .
 754+ 707D D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 707E 53                                   ld      d,e                         ; de = z ^
 756+ 707F ED 30                                mul                                 ; .
 757+ 7081 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 7082 09                                   add     hl,bc
 759+ 7083 EB                                   ex      de,hl
 760+ 7084 CD 85 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 7087                                      ; if h <> 0 then more difficult
 762+ 7087 55                                   ld      d,l                         ; iyl = q
 763+ 7088 FD 6A                                ld      iyl,d                       ; .
 764+ 708A E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 708B 7C                                   ld      a,h                         ; c = sign
 766+ 708C E6 80                                and     SignOnly8Bit                ; .
 767+ 708E 4F                                   ld      c,a                         ; .
 768+ 708F C5                                   push    bc                          ; save sign to stack
 769+ 7090 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 7091 CD 6F 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 7094 5F                                   ld      e,a                         ; .
 772+ 7095                                      EDiv10Inline                        ; a = e / 10
 772+ 7095 16 00       >                        ld      d,0
 772+ 7097 62 6B       >                        ld      hl,de
 772+ 7099 29          >                        add     hl,hl
 772+ 709A 19          >                        add     hl,de
 772+ 709B 29          >                        add     hl,hl
 772+ 709C 29          >                        add     hl,hl
 772+ 709D 19          >                        add     hl,de
 772+ 709E 29          >                        add     hl,hl
 773+ 709F 7C                                   ld      a,h                         ; .
 774+ 70A0 C1                                   pop     bc                          ; retrieve sign
 775+ 70A1 FE 00                                cp      0
 776+ 70A3 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 70A5 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 70A7 28 02                                jr      z,.DoneNormX
 779+ 70A9 ED 44                                neg
 780+ 70AB DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 70AD FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 70AF E1                                   pop     hl                          ; hl y scaled
 783+ 70B0 7C                                   ld      a,h                         ; c = sign
 784+ 70B1 E6 80                                and     SignOnly8Bit                ; .
 785+ 70B3 4F                                   ld      c,a                         ; .
 786+ 70B4 C5                                   push    bc                          ; save sign to stack
 787+ 70B5 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 70B6 CD 6F 9B                             call    AequAdivQmul96ABS           ; .
 789+ 70B9 5F                                   ld      e,a                         ; a = e / 10
 790+ 70BA                                      EDiv10Inline                        ; .
 790+ 70BA 16 00       >                        ld      d,0
 790+ 70BC 62 6B       >                        ld      hl,de
 790+ 70BE 29          >                        add     hl,hl
 790+ 70BF 19          >                        add     hl,de
 790+ 70C0 29          >                        add     hl,hl
 790+ 70C1 29          >                        add     hl,hl
 790+ 70C2 19          >                        add     hl,de
 790+ 70C3 29          >                        add     hl,hl
 791+ 70C4 7C                                   ld      a,h                         ; retrieve sign
 792+ 70C5 C1                                   pop     bc                          ; retrieve sign
 793+ 70C6 FE 00                                cp      0
 794+ 70C8 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 70CA CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 70CC 28 02                                jr      z,.DoneNormY
 797+ 70CE ED 44                                neg                                 ;
 798+ 70D0 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 70D1 DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 70D3              .SetSprite:             MMUSelectSpriteBank
 800+ 70D3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 70D7 CD 17 E1                             call    compass_station_move
 802+ 70DA DD 7D                                ld      a,ixl
 803+ 70DC CB 7F                                bit     7,a
 804+ 70DE 20 04                                jr      nz,.PlanetBehind
 805+ 70E0 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 70E3 C9                                   ret
 807+ 70E4 CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 70E7 C9                                   ret
 809+ 70E8
 810+ 70E8              UpdatePlanetSun:        MMUSelectPlanet
 810+ 70E8 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 70EC                                      Shift24BitScan  PBnKyhi, PBnKylo
 811+ 70EC 2A 14 C0    >                        ld      hl,(PBnKyhi)
 811+ 70EF 44          >                        ld      b,h
 811+ 70F0 7C          >                        ld      a,h
 811+ 70F1 E6 7F       >                        and     SignMask8Bit
 811+ 70F3 67          >                        ld      h,a
 811+ 70F4 3A 13 C0    >                        ld      a,(PBnKylo)
 811+ 70F7 CB 27       >                        sla     a
 811+ 70F9 CB 15       >                        rl      l
 811+ 70FB CB 14       >                        rl      h
 811+ 70FD CB 27       >                        sla     a
 811+ 70FF CB 15       >                        rl      l
 811+ 7101 CB 14       >                        rl      h
 811+ 7103 CB 27       >                        sla     a
 811+ 7105 CB 15       >                        rl      l
 811+ 7107 CB 14       >                        rl      h
 811+ 7109 CB 27       >                        sla     a
 811+ 710B CB 15       >                        rl      l
 811+ 710D CB 14       >                        rl      h
 811+ 710F CB 27       >                        sla     a
 811+ 7111 CB 15       >                        rl      l
 811+ 7113 CB 14       >                        rl      h
 811+ 7115 CB 27       >                        sla     a
 811+ 7117 CB 15       >                        rl      l
 811+ 7119 CB 14       >                        rl      h
 812+ 711B 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 813+ 711E 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 814+ 7121 B6                                   or      (hl)                        ; then its too far away
 815+ 7122 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 816+ 7125 B6                                   or      (hl)                        ; so rely on the compass
 817+ 7126 E6 7F                                and     SignMask8Bit                ;
 818+ 7128 C0                                   ret     nz                          ;
 819+ 7129 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 820+ 712C ED 5B 10 C0                          ld      de,(PBnKxlo)
 821+ 7130 ED 4B 13 C0                          ld      bc,(PBnKylo)
 822+ 7134 7C                                   ld      a,h
 823+ 7135 B2                                   or      d
 824+ 7136 B0                                   or      b
 825+ 7137 E6 C0                                and     %11000000
 826+ 7139 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 713A 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 828+ 713D CB 7F                                bit     7,a
 829+ 713F 28 04                                jr      z,.absXHi
 830+ 7141                                      NegD
 830+ 7141 7A          >                    ld      a,d
 830+ 7142 ED 44       >                    neg
 830+ 7144 57          >                    ld      d,a
 831+ 7145 7A           .absXHi:                ld      a,d
 832+ 7146 C6 80                                add     ScannerX
 833+ 7148 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 714A CB 3C        .ProcessZCoord:         srl     h
 835+ 714C CB 3C                                srl     h
 836+ 714E 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 837+ 7151 CB 7F                                bit     7,a
 838+ 7153 28 04                                jr      z,.absZHi
 839+ 7155                                      NegH
 839+ 7155 7C          >                    ld      a,h
 839+ 7156 ED 44       >                    neg
 839+ 7158 67          >                    ld      h,a
 840+ 7159 3E AB        .absZHi:                ld      a,ScannerY
 841+ 715B 94                                   sub     h
 842+ 715C FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 715E CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 7160 20 0B                                jr      nz,.StickHasLength
 845+ 7162 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 7164 FD 6F                                ld      iyl,a
 847+ 7166                                      MMUSelectLayer2
 847+ 7166 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 716A C3 95 71                             jp      .NoStick
 849+ 716D 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 850+ 7170 CB 7F                                bit     7,a
 851+ 7172 28 04                                jr      z,.absYHi
 852+ 7174                                      NegB
 852+ 7174 78          >                    ld      a,b
 852+ 7175 ED 44       >                    neg
 852+ 7177 47          >                    ld      b,a
 853+ 7178 FD 7C        .absYHi:                ld      a,iyh
 854+ 717A 90           .SetStickPos:           sub     b
 855+ 717B                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 717B FE BE       >                        cp      ScannerBottom
 855+ 717D DA 82 71    >                        jp		c, .StickOnScreen
 856+ 7180 3E BE                                ld      a,ScannerBottom
 857+ 7182 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 7184 DD 6F                                ld      ixl,a
 859+ 7186 FD 44                                ld      b,iyh                       ; from row
 860+ 7188 DD 4C                                ld      c,ixh                       ; from col
 861+ 718A FD 55                                ld      d,iyl                       ; to row
 862+ 718C 1E B4                                ld      e,L2SunScanner
 863+ 718E                                      MMUSelectLayer2
 863+ 718E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 7192 CD 54 E5                             call    l2_draw_vert_line_to
 865+ 7195 FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 7197 DD 4C                                ld      c,ixh                       ; col
 867+ 7199 3E FC                                ld      a,L2SunScannerBright
 868+ 719B CD B5 E2                             call    l2_plot_pixel
 869+ 719E FD 45                                ld      b,iyl
 870+ 71A0 DD 4C                                ld      c,ixh
 871+ 71A2 0C                                   inc     c
 872+ 71A3 3E FC                                ld      a,L2SunScannerBright
 873+ 71A5 CD B5 E2                             call    l2_plot_pixel
 874+ 71A8 C9                                   ret
 875+ 71A9
 876+ 71A9              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 71A9 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 71AD
 878+ 71AD CD 16 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 71B0 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 71B4 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 71B5 59                                   ld      e,c                         ; .
 882+ 71B6 ED 30                                mul                                 ; .
 883+ 71B8 42 4B                                ld      bc,de                       ; .
 884+ 71BA 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 71BB 5D                                   ld      e,l                         ; .
 886+ 71BC ED 30                                mul                                 ; .
 887+ 71BE EB                                   ex      de,hl                       ; .
 888+ 71BF D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 71C0 53                                   ld      d,e                         ; de = z ^
 890+ 71C1 ED 30                                mul                                 ; .
 891+ 71C3 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 71C4 09                                   add     hl,bc
 893+ 71C5 EB                                   ex      de,hl
 894+ 71C6 CD 85 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 71C9                                      ; if h <> 0 then more difficult
 896+ 71C9 55                                   ld      d,l                         ; iyl = q
 897+ 71CA FD 6A                                ld      iyl,d                       ; .
 898+ 71CC E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 71CD 7C                                   ld      a,h                         ; c = sign
 900+ 71CE E6 80                                and     SignOnly8Bit                ; .
 901+ 71D0 4F                                   ld      c,a                         ; .
 902+ 71D1 C5                                   push    bc                          ; save sign to stack
 903+ 71D2 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 71D3 CD 6F 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 71D6 5F                                   ld      e,a                         ; .
 906+ 71D7                                      EDiv10Inline                        ; a = e / 10
 906+ 71D7 16 00       >                        ld      d,0
 906+ 71D9 62 6B       >                        ld      hl,de
 906+ 71DB 29          >                        add     hl,hl
 906+ 71DC 19          >                        add     hl,de
 906+ 71DD 29          >                        add     hl,hl
 906+ 71DE 29          >                        add     hl,hl
 906+ 71DF 19          >                        add     hl,de
 906+ 71E0 29          >                        add     hl,hl
 907+ 71E1 7C                                   ld      a,h                         ; .
 908+ 71E2 C1                                   pop     bc                          ; retrieve sign
 909+ 71E3 FE 00                                cp      0
 910+ 71E5 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 71E7 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 71E9 28 02                                jr      z,.DoneNormX
 913+ 71EB ED 44                                neg
 914+ 71ED DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 71EF FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 71F1 E1                                   pop     hl                          ; hl z scaled
 917+ 71F2 7C                                   ld      a,h                         ; c = sign
 918+ 71F3 E6 80                                and     SignOnly8Bit                ; .
 919+ 71F5 4F                                   ld      c,a                         ; .
 920+ 71F6 C5                                   push    bc                          ; save sign to stack
 921+ 71F7 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 71F8 CD 6F 9B                             call    AequAdivQmul96ABS              ; .
 923+ 71FB 5F                                   ld      e,a                         ; a = e / 10
 924+ 71FC                                      EDiv10Inline                        ; .
 924+ 71FC 16 00       >                        ld      d,0
 924+ 71FE 62 6B       >                        ld      hl,de
 924+ 7200 29          >                        add     hl,hl
 924+ 7201 19          >                        add     hl,de
 924+ 7202 29          >                        add     hl,hl
 924+ 7203 29          >                        add     hl,hl
 924+ 7204 19          >                        add     hl,de
 924+ 7205 29          >                        add     hl,hl
 925+ 7206 7C                                   ld      a,h                         ; retrieve sign
 926+ 7207 C1                                   pop     bc                          ; retrieve sign
 927+ 7208 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 720A 28 02                                jr      z,.DoneNormZ
 929+ 720C ED 44                                neg
 930+ 720E DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 7210 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 7212 E1                                   pop     hl                          ; hl y scaled
 933+ 7213 7C                                   ld      a,h                         ; c = sign
 934+ 7214 E6 80                                and     SignOnly8Bit                ; .
 935+ 7216 4F                                   ld      c,a                         ; .
 936+ 7217 C5                                   push    bc                          ; save sign to stack
 937+ 7218 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 7219 CD 6F 9B                             call    AequAdivQmul96ABS              ; .
 939+ 721C 5F                                   ld      e,a                         ; a = e / 10
 940+ 721D                                      EDiv10Inline                        ; .
 940+ 721D 16 00       >                        ld      d,0
 940+ 721F 62 6B       >                        ld      hl,de
 940+ 7221 29          >                        add     hl,hl
 940+ 7222 19          >                        add     hl,de
 940+ 7223 29          >                        add     hl,hl
 940+ 7224 29          >                        add     hl,hl
 940+ 7225 19          >                        add     hl,de
 940+ 7226 29          >                        add     hl,hl
 941+ 7227 7C                                   ld      a,h                         ; retrieve sign
 942+ 7228 C1                                   pop     bc                          ; retrieve sign
 943+ 7229 FE 00                                cp      0
 944+ 722B 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 722D CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 722F 28 02                                jr      z,.DoneNormY
 947+ 7231 ED 44                                neg
 948+ 7233 47           .DoneNormY:             ld      b,a                         ; .
 949+ 7234 DD 4C                                ld      c,ixh
 950+ 7236              .SetSprite:             MMUSelectSpriteBank
 950+ 7236 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 723A CD 05 E1                             call    compass_sun_move
 952+ 723D DD 7D                                ld      a,ixl
 953+ 723F CB 7F                                bit     7,a
 954+ 7241 20 04                                jr      nz,.SunBehind
 955+ 7243 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 7246 C9                                   ret
 957+ 7247 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 724A C9                                   ret
 959+ 724B
 960+ 724B
 961+ 724B              UpdateScannerSun:       MMUSelectSun
 961+ 724B ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 962+ 724F                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 724F 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 7252 44          >                        ld      b,h
 962+ 7253 7C          >                        ld      a,h
 962+ 7254 E6 7F       >                        and     SignMask8Bit
 962+ 7256 67          >                        ld      h,a
 962+ 7257 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 725A CB 27       >                        sla     a
 962+ 725C CB 15       >                        rl      l
 962+ 725E CB 14       >                        rl      h
 962+ 7260 CB 27       >                        sla     a
 962+ 7262 CB 15       >                        rl      l
 962+ 7264 CB 14       >                        rl      h
 962+ 7266 CB 27       >                        sla     a
 962+ 7268 CB 15       >                        rl      l
 962+ 726A CB 14       >                        rl      h
 962+ 726C CB 27       >                        sla     a
 962+ 726E CB 15       >                        rl      l
 962+ 7270 CB 14       >                        rl      h
 962+ 7272 CB 27       >                        sla     a
 962+ 7274 CB 15       >                        rl      l
 962+ 7276 CB 14       >                        rl      h
 962+ 7278 CB 27       >                        sla     a
 962+ 727A CB 15       >                        rl      l
 962+ 727C CB 14       >                        rl      h
 963+ 727E 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 7281 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 7284 B6                                   or      (hl)                        ; then its too far away
 966+ 7285 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 7288 B6                                   or      (hl)                        ; so rely on the compass
 968+ 7289 E6 7F                                and     SignMask8Bit                ;
 969+ 728B C0                                   ret     nz                          ;
 970+ 728C 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 728F ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 7293 ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 7297 7C                                   ld      a,h
 974+ 7298 B2                                   or      d
 975+ 7299 B0                                   or      b
 976+ 729A E6 C0                                and     %11000000
 977+ 729C C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 729D 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 72A0 CB 7F                                bit     7,a
 980+ 72A2 28 04                                jr      z,.absXHi
 981+ 72A4                                      NegD
 981+ 72A4 7A          >                    ld      a,d
 981+ 72A5 ED 44       >                    neg
 981+ 72A7 57          >                    ld      d,a
 982+ 72A8 7A           .absXHi:                ld      a,d
 983+ 72A9 C6 80                                add     ScannerX
 984+ 72AB DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 72AD CB 3C        .ProcessZCoord:         srl     h
 986+ 72AF CB 3C                                srl     h
 987+ 72B1 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 72B4 CB 7F                                bit     7,a
 989+ 72B6 28 04                                jr      z,.absZHi
 990+ 72B8                                      NegH
 990+ 72B8 7C          >                    ld      a,h
 990+ 72B9 ED 44       >                    neg
 990+ 72BB 67          >                    ld      h,a
 991+ 72BC 3E AB        .absZHi:                ld      a,ScannerY
 992+ 72BE 94                                   sub     h
 993+ 72BF FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 72C1 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 72C3 20 0B                                jr      nz,.StickHasLength
 996+ 72C5 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 72C7 FD 6F                                ld      iyl,a
 998+ 72C9                                      MMUSelectLayer2
 998+ 72C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 72CD C3 F8 72                             jp      .NoStick
1000+ 72D0 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 72D3 CB 7F                                bit     7,a
1002+ 72D5 28 04                                jr      z,.absYHi
1003+ 72D7                                      NegB
1003+ 72D7 78          >                    ld      a,b
1003+ 72D8 ED 44       >                    neg
1003+ 72DA 47          >                    ld      b,a
1004+ 72DB FD 7C        .absYHi:                ld      a,iyh
1005+ 72DD 90           .SetStickPos:           sub     b
1006+ 72DE                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 72DE FE BE       >                        cp      ScannerBottom
1006+ 72E0 DA E5 72    >                        jp		c, .StickOnScreen
1007+ 72E3 3E BE                                ld      a,ScannerBottom
1008+ 72E5 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 72E7 DD 6F                                ld      ixl,a
1010+ 72E9 FD 44                                ld      b,iyh                       ; from row
1011+ 72EB DD 4C                                ld      c,ixh                       ; from col
1012+ 72ED FD 55                                ld      d,iyl                       ; to row
1013+ 72EF 1E B4                                ld      e,L2SunScanner
1014+ 72F1                                      MMUSelectLayer2
1014+ 72F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 72F5 CD 54 E5                             call    l2_draw_vert_line_to
1016+ 72F8 FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 72FA DD 4C                                ld      c,ixh                       ; col
1018+ 72FC 3E FC                                ld      a,L2SunScannerBright
1019+ 72FE CD B5 E2                             call    l2_plot_pixel
1020+ 7301 FD 45                                ld      b,iyl
1021+ 7303 DD 4C                                ld      c,ixh
1022+ 7305 0C                                   inc     c
1023+ 7306 3E FC                                ld      a,L2SunScannerBright
1024+ 7308 CD B5 E2                             call    l2_plot_pixel
1025+ 730B C9                                   ret
1026+ 730C
1027+ 730C              ; This will do a planet update if we are not in space station range
1028+ 730C              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 730C ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 7310                                      Shift24BitScan  PBnKyhi, PBnKylo
1029+ 7310 2A 14 C0    >                        ld      hl,(PBnKyhi)
1029+ 7313 44          >                        ld      b,h
1029+ 7314 7C          >                        ld      a,h
1029+ 7315 E6 7F       >                        and     SignMask8Bit
1029+ 7317 67          >                        ld      h,a
1029+ 7318 3A 13 C0    >                        ld      a,(PBnKylo)
1029+ 731B CB 27       >                        sla     a
1029+ 731D CB 15       >                        rl      l
1029+ 731F CB 14       >                        rl      h
1029+ 7321 CB 27       >                        sla     a
1029+ 7323 CB 15       >                        rl      l
1029+ 7325 CB 14       >                        rl      h
1029+ 7327 CB 27       >                        sla     a
1029+ 7329 CB 15       >                        rl      l
1029+ 732B CB 14       >                        rl      h
1029+ 732D CB 27       >                        sla     a
1029+ 732F CB 15       >                        rl      l
1029+ 7331 CB 14       >                        rl      h
1029+ 7333 CB 27       >                        sla     a
1029+ 7335 CB 15       >                        rl      l
1029+ 7337 CB 14       >                        rl      h
1029+ 7339 CB 27       >                        sla     a
1029+ 733B CB 15       >                        rl      l
1029+ 733D CB 14       >                        rl      h
1030+ 733F 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
1031+ 7342 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
1032+ 7345 B6                                   or      (hl)                        ; then its too far away
1033+ 7346 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
1034+ 7349 B6                                   or      (hl)                        ; so rely on the compass
1035+ 734A E6 7F                                and     SignMask8Bit                ;
1036+ 734C C0                                   ret     nz                          ;
1037+ 734D 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
1038+ 7350 ED 5B 10 C0                          ld      de,(PBnKxlo)
1039+ 7354 ED 4B 13 C0                          ld      bc,(PBnKylo)
1040+ 7358 7C                                   ld      a,h
1041+ 7359 B2                                   or      d
1042+ 735A B0                                   or      b
1043+ 735B E6 C0                                and     %11000000
1044+ 735D C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 735E 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
1046+ 7361 CB 7F                                bit     7,a
1047+ 7363 28 04                                jr      z,.absXHi
1048+ 7365                                      NegD
1048+ 7365 7A          >                    ld      a,d
1048+ 7366 ED 44       >                    neg
1048+ 7368 57          >                    ld      d,a
1049+ 7369 7A           .absXHi:                ld      a,d
1050+ 736A C6 80                                add     ScannerX
1051+ 736C DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 736E CB 3C        .ProcessZCoord:         srl     h
1053+ 7370 CB 3C                                srl     h
1054+ 7372 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
1055+ 7375 CB 7F                                bit     7,a
1056+ 7377 28 04                                jr      z,.absZHi
1057+ 7379                                      NegH
1057+ 7379 7C          >                    ld      a,h
1057+ 737A ED 44       >                    neg
1057+ 737C 67          >                    ld      h,a
1058+ 737D 3E AB        .absZHi:                ld      a,ScannerY
1059+ 737F 94                                   sub     h
1060+ 7380 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 7382 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 7384 20 0B                                jr      nz,.StickHasLength
1063+ 7386 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 7388 FD 6F                                ld      iyl,a
1065+ 738A                                      MMUSelectLayer2
1065+ 738A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 738E C3 B9 73                             jp      .NoStick
1067+ 7391 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
1068+ 7394 CB 7F                                bit     7,a
1069+ 7396 28 04                                jr      z,.absYHi
1070+ 7398                                      NegB
1070+ 7398 78          >                    ld      a,b
1070+ 7399 ED 44       >                    neg
1070+ 739B 47          >                    ld      b,a
1071+ 739C FD 7C        .absYHi:                ld      a,iyh
1072+ 739E 90           .SetStickPos:           sub     b
1073+ 739F                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 739F FE BE       >                        cp      ScannerBottom
1073+ 73A1 DA A6 73    >                        jp		c, .StickOnScreen
1074+ 73A4 3E BE                                ld      a,ScannerBottom
1075+ 73A6 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 73A8 DD 6F                                ld      ixl,a
1077+ 73AA FD 44                                ld      b,iyh                       ; from row
1078+ 73AC DD 4C                                ld      c,ixh                       ; from col
1079+ 73AE FD 55                                ld      d,iyl                       ; to row
1080+ 73B0 1E B4                                ld      e,L2SunScanner
1081+ 73B2                                      MMUSelectLayer2
1081+ 73B2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 73B6 CD 54 E5                             call    l2_draw_vert_line_to
1083+ 73B9 FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 73BB DD 4C                                ld      c,ixh                       ; col
1085+ 73BD 3E FC                                ld      a,L2SunScannerBright
1086+ 73BF CD B5 E2                             call    l2_plot_pixel
1087+ 73C2 FD 45                                ld      b,iyl
1088+ 73C4 DD 4C                                ld      c,ixh
1089+ 73C6 0C                                   inc     c
1090+ 73C7 3E FC                                ld      a,L2SunScannerBright
1091+ 73C9 CD B5 E2                             call    l2_plot_pixel
1092+ 73CC C9                                   ret
1093+ 73CD
1094+ 73CD
1095+ 73CD              ; As the space station is always ship 0 then we can just use the scanner
1096+ 73CD
1097+ 73CD              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 73CD 3A 51 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1099+ 73D0 CB 67                                bit     4,a                         ; .
1100+ 73D2                                      ;DEBUG ret     z                           ; .
1101+ 73D2 3A A9 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1102+ 73D5 CB 7F                                bit     7,a
1103+ 73D7 C0                                   ret     nz
1104+ 73D8              ; DEBUG Add in station types later
1105+ 73D8 2A 26 C0     .NotMissile:            ld      hl,(UBnKzlo)
1106+ 73DB ED 5B 20 C0                          ld      de,(UBnKxlo)
1107+ 73DF ED 4B 23 C0                          ld      bc,(UBnKylo)
1108+ 73E3 7C                                   ld      a,h
1109+ 73E4 B2                                   or      d
1110+ 73E5 B0                                   or      b
1111+ 73E6 E6 C0                                and     %11000000
1112+ 73E8 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1113+ 73E9 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1114+ 73EC CB 7F                                bit     7,a
1115+ 73EE 28 04                                jr      z,.absXHi
1116+ 73F0                                      NegD
1116+ 73F0 7A          >                    ld      a,d
1116+ 73F1 ED 44       >                    neg
1116+ 73F3 57          >                    ld      d,a
1117+ 73F4 7A           .absXHi:                ld      a,d
1118+ 73F5 C6 80                                add     ScannerX
1119+ 73F7 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1120+ 73F9 CB 3C        .ProcessZCoord:         srl     h
1121+ 73FB CB 3C                                srl     h
1122+ 73FD 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1123+ 7400 CB 7F                                bit     7,a
1124+ 7402 28 04                                jr      z,.absZHi
1125+ 7404                                      NegH
1125+ 7404 7C          >                    ld      a,h
1125+ 7405 ED 44       >                    neg
1125+ 7407 67          >                    ld      h,a
1126+ 7408 3E AB        .absZHi:                ld      a,ScannerY
1127+ 740A 94                                   sub     h
1128+ 740B FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1129+ 740D CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1130+ 740F 20 2A                                jr      nz,.StickHasLength
1131+ 7411 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1132+ 7413 FD 6F                                ld      iyl,a
1133+ 7415 DD 7D                                ld      a,ixl
1134+ 7417                                      GetShipColorBright
1134+ 7417 21 B9 6E    >                        ld      hl,ScannerColourTable
1134+ 741A 3A A9 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1134+ 741D FE 01       >                        cp      1                        ; for now to bypass hostile missile
1134+ 741F 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1134+ 7421 3A AA C3    >                        ld      a,(ShipNewBitsAddr)
1134+ 7424 E6 04       >                        and     ShipIsHostile
1134+ 7426 28 03       >                        jr      z,.UsingColourTable
1134+ 7428 21 C1 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1134+ 742B 3A A9 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1134+ 742E CB 27       >                        sla     a                            ; as its byte pairs * 2
1134+ 7430 3C          >                        inc     a
1134+ 7431 ED 31       >                        add     hl,a
1134+ 7433 7E          >                        ld      a,(hl)
1135+ 7434                                      MMUSelectLayer2
1135+ 7434 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1136+ 7438 C3 83 74                             jp      .NoStick
1137+ 743B 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1138+ 743E CB 7F                                bit     7,a
1139+ 7440 28 04                                jr      z,.absYHi
1140+ 7442                                      NegB
1140+ 7442 78          >                    ld      a,b
1140+ 7443 ED 44       >                    neg
1140+ 7445 47          >                    ld      b,a
1141+ 7446 FD 7C        .absYHi:                ld      a,iyh
1142+ 7448 90           .SetStickPos:           sub     b
1143+ 7449                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1143+ 7449 FE BE       >                        cp      ScannerBottom
1143+ 744B DA 50 74    >                        jp		c, .StickOnScreen
1144+ 744E 3E BE                                ld      a,ScannerBottom
1145+ 7450 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1146+ 7452                                      GetShipColor
1146+ 7452 21 B9 6E    >                        ld      hl,ScannerColourTable
1146+ 7455 3A A9 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1146+ 7458 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1146+ 745A 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1146+ 745C 3A AA C3    >                        ld      a,(ShipNewBitsAddr)
1146+ 745F E6 04       >                        and     ShipIsHostile
1146+ 7461 28 03       >                        jr      z,.UsingColourTable
1146+ 7463 21 C1 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1146+ 7466 3A A9 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1146+ 7469 CB 27       >                        sla     a                            ; as its byte pairs * 2
1146+ 746B ED 31       >                        add     hl,a
1146+ 746D 7E          >                        ld      a,(hl)
1147+ 746E DD 6F                                ld      ixl,a
1148+ 7470 FD 44                                ld      b,iyh                       ; from row
1149+ 7472 DD 4C                                ld      c,ixh                       ; from col
1150+ 7474 FD 55                                ld      d,iyl                       ; to row
1151+ 7476 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1152+ 7478 E5                                   push    hl
1153+ 7479                                      MMUSelectLayer2
1153+ 7479 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1154+ 747D CD 54 E5                             call    l2_draw_vert_line_to
1155+ 7480 E1                                   pop     hl
1156+ 7481 23                                   inc     hl
1157+ 7482 7E                                   ld      a,(hl)
1158+ 7483 FD 45        .NoStick:               ld      b,iyl                       ; row
1159+ 7485 DD 4C                                ld      c,ixh                       ; col
1160+ 7487 F5                                   push    af
1161+ 7488 CD B5 E2                             call    l2_plot_pixel
1162+ 748B F1                                   pop     af
1163+ 748C FD 45                                ld      b,iyl
1164+ 748E DD 4C                                ld      c,ixh
1165+ 7490 0C                                   inc     c
1166+ 7491 CD B5 E2                             call    l2_plot_pixel
1167+ 7494 C9                                   ret
1168+ 7495
1169+ 7495
# file closed: ./Views/ConsoleDrawing.asm
 534  7495                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 7495
   2+ 7495
   3+ 7495              ResetMessageQueue:      ZeroA
   3+ 7495 AF          >                        xor a
   4+ 7496 32 12 81                             ld      (MessageCount),a
   5+ 7499 32 13 81                             ld      (MessageCurrent),a
   6+ 749C 21 16 81                             ld      hl,MessageQueue
   7+ 749F 11 14 81                             ld      de,MessageIndex
   8+ 74A2 06 05                                ld      b,5
   9+ 74A4 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 74A5 12                                   ld      (de),a                              ;
  11+ 74A6 13                                   inc     de                                  ;
  12+ 74A7 7C                                   ld      a,h                                 ;
  13+ 74A8 12                                   ld      (de),a                              ;
  14+ 74A9 13                                   inc     de                                  ;
  15+ 74AA 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 74AC ED 31                                add     hl,a                                ;
  17+ 74AE 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 74B0 21 16 81     .ClearText:             ld      hl,MessageQueue
  19+ 74B3 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 74B6 3E 00                                ld      a,0
  21+ 74B8 CD 03 7D                             call	memfill_dma
  22+ 74BB C9                                   ret
  23+ 74BC
  24+ 74BC              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 74BC              ;                                       IYH = timer for message
  26+ 74BC 3A 12 81     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 74BF                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 74BF FE 05       >                        cp    MAXMESSAGES
  27+ 74C1 D0          >                        ret	 nc
  28+ 74C2 3C                                   inc     a
  29+ 74C3 32 12 81                             ld      (MessageCount),a                    ; get ready for next message
  30+ 74C6 4F           .AddMessage:            ld      c,a
  31+ 74C7 3A 13 81                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 74CA 81                                   add     c                                   ;
  33+ 74CB                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 74CB FE 05       >                        cp      MAXMESSAGES
  33+ 74CD DA D2 74    >                        jp		c, .ReadyToAdd
  34+ 74D0 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 74D2 21 BB 81     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 74D5 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 74D7 4F                                   ld      c,a                                 ;
  38+ 74D8 FD 7C                                ld      a,iyh                               ;
  39+ 74DA 77                                   ld      (hl),a                              ;
  40+ 74DB 79                                   ld      a,c                                 ; get back index
  41+ 74DC 21 14 81                             ld      hl,MessageIndex
  42+ 74DF                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 74DF CB 27       >                    sla         a
  42+ 74E1 ED 31       >                    add         hl,a
  42+ 74E3 7E          >                    ld          a,(hl)
  42+ 74E4 23          >                    inc         hl
  42+ 74E5 66          >                    ld          h,(hl)
  42+ 74E6 6F          >                    ld          l,a
  43+ 74E7 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 74E8                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 74E8 7E          >.CopyLoop:              ld      a,(hl)
  44+ 74E9 12          >                        ld      (de),a
  44+ 74EA FE 00       >                        cp      0
  44+ 74EC CA F3 74    >                        jp      z,.DoneCopy
  44+ 74EF 23          >                        inc     hl
  44+ 74F0 13          >                        inc     de
  44+ 74F1 18 F5       >                        jr      .CopyLoop
  44+ 74F3             >.DoneCopy:
  45+ 74F3 C9                                   ret
  46+ 74F4
  47+ 74F4 3A 13 81     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 74F7 21 BB 81                             ld      hl,MessageTimeout
  49+ 74FA ED 31                                add     hl,a
  50+ 74FC 7E                                   ld      a,(hl)
  51+ 74FD 3D                                   dec     a
  52+ 74FE 28 02                                jr      z,.UpdateQueue
  53+ 7500 77           .UpdateTimer            ld      (hl),a
  54+ 7501 C9                                   ret
  55+ 7502 77           .UpdateQueue:           ld      (hl),a
  56+ 7503 21 12 81                             ld      hl,MessageCount
  57+ 7506 35                                   dec     (hl)
  58+ 7507 3A 13 81                             ld      a,(MessageCurrent)
  59+ 750A 23                                   inc     hl
  60+ 750B                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 750B FE 05       >                        cp      MAXMESSAGES
  60+ 750D DA 11 75    >                        jp		c, .ReadyToUpdate
  61+ 7510              .CircularQueue:         ZeroA
  61+ 7510 AF          >                        xor a
  62+ 7511 32 13 81     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 7514 C9                                   ret
  64+ 7515
  65+ 7515 3A 12 81     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 7518                                      ReturnIfAIsZero
  66+ 7518 A7          >                        and     a
  66+ 7519 C8          >                        ret     z
  67+ 751A 3A 13 81                             ld      a,(MessageCurrent)
  68+ 751D 21 14 81                             ld      hl,MessageIndex
  69+ 7520                                      HLEquAddrAtHLPlusA
  69+ 7520 CB 27       >                    sla         a
  69+ 7522 ED 31       >                    add         hl,a
  69+ 7524 7E          >                    ld          a,(hl)
  69+ 7525 23          >                    inc         hl
  69+ 7526 66          >                    ld          h,(hl)
  69+ 7527 6F          >                    ld          l,a
  70+ 7528                                      MMUSelectLayer1
  70+ 7528 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 752C 11 01 00                             ld      de,MESSAGELINE
  72+ 752F CD 15 E1                             call    l1_print_at_wrap
  73+ 7532 C9                                   ret
  74+ 7533
  75+ 7533              HyperSpaceMessage:      MMUSelectLayer1
  75+ 7533 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 7537 11 DB 66     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 753A 21 AD 92                             ld      hl,name_expanded
  78+ 753D                                      ldCopyTextAtHLtoDE
  78+ 753D 7E          >.CopyLoop:              ld      a,(hl)
  78+ 753E 12          >                        ld      (de),a
  78+ 753F FE 00       >                        cp      0
  78+ 7541 CA 48 75    >                        jp      z,.DoneCopy
  78+ 7544 23          >                        inc     hl
  78+ 7545 13          >                        inc     de
  78+ 7546 18 F5       >                        jr      .CopyLoop
  78+ 7548             >.DoneCopy:
  79+ 7548 AF           .DoneName:              xor     a
  80+ 7549 12                                   ld      (de),a
  81+ 754A 32 F7 66                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 754D 21 D8 66     .CentreJustify:         ld      hl,Hyp_message
  83+ 7550                                      HalfLengthHL
  83+ 7550 06 00       >                        ld      b,0
  83+ 7552 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 7553 FE 00       >                        cp      0
  83+ 7555 28 04       >                        jr      z,.DoneCount
  83+ 7557 04          >                        inc     b
  83+ 7558 23          >                        inc     hl
  83+ 7559 18 F7       >                        jr      .CountLenLoop
  83+ 755B 3E 20       >.DoneCount:             ld      a,32
  83+ 755D 90          >                        sub     b
  83+ 755E CB 2F       >                        sra     a
  84+ 7560 21 12 67                             ld      hl,Hyp_centeredTarget
  85+ 7563                                      ldClearTextLoop 32
  85+ 7563 47          >                        ld      b,a
  85+ 7564 3E 20       >                        ld      a,32
  85+ 7566 77          >.ClearLoop:             ld      (hl),a
  85+ 7567 23          >                        inc     hl
  85+ 7568 10 FC       >                        djnz    .ClearLoop
  86+ 756A EB                                   ex      de,hl
  87+ 756B 21 D8 66                             ld      hl,Hyp_message
  88+ 756E                                      ldCopyTextAtHLtoDE
  88+ 756E 7E          >.CopyLoop:              ld      a,(hl)
  88+ 756F 12          >                        ld      (de),a
  88+ 7570 FE 00       >                        cp      0
  88+ 7572 CA 79 75    >                        jp      z,.DoneCopy
  88+ 7575 23          >                        inc     hl
  88+ 7576 13          >                        inc     de
  88+ 7577 18 F5       >                        jr      .CopyLoop
  88+ 7579             >.DoneCopy:
  89+ 7579                                      ZeroA
  89+ 7579 AF          >                        xor a
  90+ 757A 32 32 67                             ld      (Hyp_centeredEol),a
  91+ 757D 21 0E 67                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 7580 3E 20                                ld      a,32                     ; clear counter digits
  93+ 7582 77                                   ld      (hl),a                   ; clear counter digits
  94+ 7583 23                                   inc     hl                       ; clear counter digits
  95+ 7584 77                                   ld      (hl),a                   ; clear counter digits
  96+ 7585 23                                   inc     hl                       ; clear counter digits
  97+ 7586 77                                   ld      (hl),a                   ; clear counter digits
  98+ 7587 CD B4 66                             call    UpdateCountdownNumber
  99+ 758A 21 05 67                             ld      hl,Hyp_charging
 100+ 758D                                      HalfLengthHL
 100+ 758D 06 00       >                        ld      b,0
 100+ 758F 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 7590 FE 00       >                        cp      0
 100+ 7592 28 04       >                        jr      z,.DoneCount
 100+ 7594 04          >                        inc     b
 100+ 7595 23          >                        inc     hl
 100+ 7596 18 F7       >                        jr      .CountLenLoop
 100+ 7598 3E 20       >.DoneCount:             ld      a,32
 100+ 759A 90          >                        sub     b
 100+ 759B CB 2F       >                        sra     a
 101+ 759D 21 53 67                             ld      hl,Hyp_centeredCharging
 102+ 75A0                                      ldClearTextLoop 32
 102+ 75A0 47          >                        ld      b,a
 102+ 75A1 3E 20       >                        ld      a,32
 102+ 75A3 77          >.ClearLoop:             ld      (hl),a
 102+ 75A4 23          >                        inc     hl
 102+ 75A5 10 FC       >                        djnz    .ClearLoop
 103+ 75A7 EB                                   ex      de,hl
 104+ 75A8 21 05 67                             ld      hl,Hyp_charging
 105+ 75AB                                      ldCopyTextAtHLtoDE
 105+ 75AB 7E          >.CopyLoop:              ld      a,(hl)
 105+ 75AC 12          >                        ld      (de),a
 105+ 75AD FE 00       >                        cp      0
 105+ 75AF CA B6 75    >                        jp      z,.DoneCopy
 105+ 75B2 23          >                        inc     hl
 105+ 75B3 13          >                        inc     de
 105+ 75B4 18 F5       >                        jr      .CopyLoop
 105+ 75B6             >.DoneCopy:
 106+ 75B6 AF                                   xor     a
 107+ 75B7 32 73 67                             ld      (Hyp_centeredEol2),a
 108+ 75BA 2A A6 83     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 75BD 2D                                   dec     l
 110+ 75BE 20 26                                jr      nz,.decHyperInnerOnly
 111+ 75C0 25                                   dec     h
 112+ 75C1 FA EA 75                             jp      m,.HyperCountDone
 113+ 75C4 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 75C6 E5                                   push    hl
 115+ 75C7 16 0C                                ld      d,12
 116+ 75C9 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 75CB CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 75CE 16 60                                ld      d,12 * 8
 119+ 75D0 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 75D3 11 00 60                             ld      de,$6000
 121+ 75D6 21 12 67                             ld      hl,Hyp_centeredTarget
 122+ 75D9 CD C8 E0                             call    l1_print_at
 123+ 75DC 11 00 68                             ld      de,$6800
 124+ 75DF 21 53 67                             ld      hl,Hyp_centeredCharging
 125+ 75E2 CD C8 E0                             call    l1_print_at
 126+ 75E5 E1                                   pop     hl
 127+ 75E6 22 A6 83     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 75E9 C9                                   ret
 129+ 75EA 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 75ED 22 A6 83                             ld      (InnerHyperCount),hl
 131+ 75F0 16 0C                                ld      d,12
 132+ 75F2 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 75F4 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 75F7 16 60                                ld      d,12 * 8
 135+ 75F9 CD 74 E0                             call    l1_cls_2_lines_d
 136+ 75FC                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 75FC 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 75FE 32 87 69    >                        ld      (ScreenTransitionForced), a
 137+ 7601 C9                                   ret
 138+ 7602
# file closed: ./Tables/message_queue.asm
 535  7602                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 7602              ; LaserTypeTable
   2+ 7602              ; laser type = id of laser
   3+ 7602              ; laser pulse pause = time before next pulse
   4+ 7602              ; laser pulse duration = time laser is on per shot
   5+ 7602              ; laser damage output
   6+ 7602              ;
   7+ 7602              ; LaserType
   8+ 7602              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 7602              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 7602              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 7602              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 7602              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 7602              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 7602              ; LaserHeat                               ; amount of heat generated
  15+ 7602              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 7602              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 7602              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 7602              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 7602              ;
  20+ 7602              LaserStatsTableWidth    EQU 12
  21+ 7602              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 7602              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 7602 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 7606 40 03 10 02
  23+ 760A 20 10 00 00
  24+ 760E 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7612 20 03 10 08
  24+ 7616 20 10 00 01
  25+ 761A 02 03 06 06                          DB $02, $03, $06, $06, $3A, $03, $05, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 761E 3A 03 05 02
  25+ 7622 20 10 00 02
  26+ 7626 03 01 05 05                          DB $03, $01, $05, $05, $01, $02, $04, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 762A 01 02 04 05
  26+ 762E 30 10 00 03
  27+ 7632 04 01 01 00                          DB $04, $01, $01, $00, $00, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 7636 00 03 03 10
  27+ 763A 20 10 00 04
  28+ 763E 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7642 60 03 02 02
  28+ 7646 20 10 00 05
  29+ 764A 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 764E 06 05 05 05
  29+ 7652 10 10 00 08
  30+ 7656 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 765A 20 22 01 30
  30+ 765E 30 11 01 10
  31+ 7662 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 7666 80 70 02 03
  31+ 766A 60 11 01 10
  32+ 766E
  33+ 766E
  34+ 766E
  35+ 766E
  36+ 766E
  37+ 766E
  38+ 766E
# file closed: ./Tables/LaserStatsTable.asm
 536  766E                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 766E              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   2+ 766E              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   3+ 766E
   4+ 766E              ; Each ship type table is constructed as follows
   5+ 766E              ; Header - nbr of ships
   6+ 766E              ; table of min rank
   7+ 766E              ; table of ship ids
   8+ 766E              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
   9+ 766E
  10+ 766E              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  11+ 766E              ; Coding limit for simplicity, each table has 15 ships in it
  12+ 766E 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  12+ 7672 02 03 07 07
  13+ 7676 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  13+ 767A 05 07 1F 01
  14+ 767E
  15+ 767E 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  15+ 7682 07 04 05 05
  16+ 7686 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  16+ 768A 01 07 1F 01
  17+ 768E
  18+ 768E 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  18+ 7692 00 00 00 06
  19+ 7696 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  19+ 769A 06 06 06 20
  20+ 769E
  21+ 769E 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  21+ 76A2 02 03 03 05
  22+ 76A6 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  22+ 76AA 16 13 1E 01
  23+ 76AE
  24+ 76AE 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  24+ 76B2 00 00 03 05
  25+ 76B6 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  25+ 76BA 29 29 1E 01
  26+ 76BE
  27+ 76BE 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  27+ 76C2 04 05 05 05
  28+ 76C6 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  28+ 76CA 16 12 18 0E
  29+ 76CE
  30+ 76CE 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  30+ 76D2 06 06 07 07
  31+ 76D6 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  31+ 76DA 10 13 18 01
  32+ 76DE
  33+ 76DE 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  33+ 76E2 07 08 09 0A
  34+ 76E6 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  34+ 76EA 13 14 1C 26
  35+ 76EE
  36+ 76EE 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  36+ 76F2 00 03 04 05
  37+ 76F6 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  37+ 76FA 04 24 11 20
  38+ 76FE
  39+ 76FE              ShipSuperstructureTableA
  40+ 76FE
  41+ 76FE
  42+ 76FE              ; This is determined by system algorithm so there is no rank factor
  43+ 76FE 0D           MasterStations:         DB ShipID_Coriolis
  44+ 76FF 0F                                   DB ShipID_Dodo
  45+ 7700
  46+ 7700 19           ShipMissileTable        DB  ShipID_Missile
  47+ 7701              ShipMissileTableSize    EQU $ - ShipMissileTable
  48+ 7701
  49+ 7701
  50+ 7701
  51+ 7701              ;; clean up below or delte
  52+ 7701              ;ShipPirateTable:
  53+ 7701              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  54+ 7701              ;ShipPackTableSize       EQU $ - ShipPackList
  55+ 7701              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  56+ 7701              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  57+ 7701              ;
  58+ 7701              ;MasterShipTable:
  59+ 7701              ;MasterStations:         DB ShipID_Coriolis
  60+ 7701              ;                        DB ShipID_Dodo
  61+ 7701              ;
  62+ 7701              ;
  63+ 7701              ;
  64+ 7701              ;MasterJunk:             DB ShipID_Asteroid
  65+ 7701              ;                        DB ShipID_Plate
  66+ 7701              ;                        DB ShipID_CargoType5
  67+ 7701              ;                        DB ShipID_Splinter
  68+ 7701              ;                        DB ShipID_Escape_Pod
  69+ 7701              ;                        DB ShipID_Rock_Hermit
  70+ 7701              ;MasterSuperstructure:
  71+ 7701              ;MasterMissile:          DB ShipID_Missile
  72+ 7701
  73+ 7701
  74+ 7701
  75+ 7701
  76+ 7701
  77+ 7701 26           MasterThargoid:         DB ShipID_Thargoid
  78+ 7702 27                                   DB ShipID_Thargon
  79+ 7703
  80+ 7703 0C           MasterMission:          DB ShipID_Constrictor
  81+ 7704
  82+ 7704
  83+ 7704
  84+ 7704
  85+ 7704
  86+ 7704 17                                   DB ShipID_Logo
  87+ 7705 25                                   DB ShipID_TestVector
  88+ 7706
# file closed: ./Tables/ShipClassTable.asm
 537  7706
 538  7706 AF           SeedGalaxy0:            xor     a
 539  7707                                      MMUSelectGalaxyA
 539  7707 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 540  770A DD 21 16 E0                          ld      ix,galaxy_data
 541  770E AF                                   xor		a
 542  770F 32 F8 81                             ld		(XSAV),a
 543  7712 CD 8E 88                             call    copy_galaxy_to_system
 544  7715 DD E5        SeedGalaxy0Loop:        push    ix
 545  7717 D1                                   pop     de
 546  7718 21 5F 82                             ld      hl,SystemSeed
 547  771B CD 94 88                             call    copy_seed
 548  771E DD E5                                push    ix
 549  7720 E1                                   pop     hl
 550  7721 ED 34 08 00                          add     hl,8
 551  7725 E5                                   push    hl
 552  7726 DD E1                                pop     ix
 553  7728 CD C9 88                             call    next_system_seed
 554  772B 3A F8 81                             ld		a,(XSAV)
 555  772E 3D                                   dec		a
 556  772F FE 00                                cp		0
 557  7731 C8                                   ret		z
 558  7732 32 F8 81                             ld		(XSAV),a
 559  7735 20 DE                                jr      nz,SeedGalaxy0Loop
 560  7737 C9                                   ret
 561  7738
 562  7738
 563  7738
 564  7738
 565  7738                  ;include "./ModelRender/testdrawing.asm"
 566  7738                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 7738              AttractDuration             EQU $00F0
   2+ 7738              AttractCounterStart         EQU $80
   3+ 7738 F0 00        AttractTimer:              DW      AttractDuration
   4+ 773A 80           AttractCounter:            DB      AttractCounterStart
   5+ 773B
   6+ 773B 3D 08        Attract_boiler_text		DW $083D
   7+ 773D
   8+ 773D
   9+ 773D 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 7741 20 43 6F 6D
   9+ 7745 6D 61 6E 64
   9+ 7749 65 72 20 28
   9+ 774D 59 2F 4E 29
   9+ 7751 00
  10+ 7752
  11+ 7752 FF           LocalXCounter           DB $FF
  12+ 7753 FF           LocalZCounter           DB $FF
  13+ 7754 00           LastInterrupt           DB 0
  14+ 7755
  15+ 7755 CD 3B 88     RandomXCounter:         call    doRandom
  16+ 7758 C0                                   ret     nz
  17+ 7759 3A 52 77                             ld      a,(LocalXCounter)
  18+ 775C EE 80                                xor     $80
  19+ 775E 32 52 77                             ld      (LocalXCounter),a
  20+ 7761 C9                                   ret
  21+ 7762
  22+ 7762 CD 3B 88     RandomYCounter:         call    doRandom
  23+ 7765 C0                                   ret     nz
  24+ 7766                                      ;ReturnIfALTNusng 254
  25+ 7766 3A 53 77                             ld      a,(LocalZCounter)
  26+ 7769 EE 80                                xor     $80
  27+ 776B 32 53 77                             ld      (LocalZCounter),a
  28+ 776E C9                                   ret
  29+ 776F
  30+ 776F
  31+ 776F              AttractModeInit:        MMUSelectLayer1
  31+ 776F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 7773 CD 80 E0                             call	l1_cls
  33+ 7776 3E 07                                ld		a,7
  34+ 7778 CD 9B E0                             call	l1_attr_cls_to_a
  35+ 777B 1E FF                                ld      e,$FF
  36+ 777D ED 5B 3B 77                          ld      de,(Attract_boiler_text)
  37+ 7781 21 3D 77                             ld      hl,ATTR_LoadCommander
  38+ 7784 CD C8 E0                             call    l1_print_at
  39+ 7787                                      MMUSelectSpriteBank
  39+ 7787 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 778B CD 6E E5                             call        sprite_cls_cursors
  41+ 778E              .ClearLayer2:           MMUSelectLayer2
  41+ 778E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 7792 CD 04 E0                             call    asm_l2_double_buffer_on
  43+ 7795 CD 0E E2                             call    l2_cls
  44+ 7798 CD 97 E2                             call    l2_flip_buffers
  45+ 779B CD 0E E2                             call    l2_cls
  46+ 779E                                      MMUSelectConsoleBank
  46+ 779E ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 77A2 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  48+ 77A5 11 00 E0                             ld          de,ConsoleImageData
  49+ 77A8 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 77AB CD 29 7D                             call        memcopy_dma
  51+ 77AE 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  52+ 77B1 11 00 E8                             ld          de,ConsoleAttributes
  53+ 77B4 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 77B7 CD 29 7D                             call        memcopy_dma
  55+ 77BA 3A F1 81                             ld          a,(InterruptCounter)
  56+ 77BD 32 54 77                             ld          (LastInterrupt),a
  57+ 77C0 CD 69 78                             call        SelectARandomShip
  58+ 77C3 C9                                   ret
  59+ 77C4
  60+ 77C4
  61+ 77C4              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 77C4              ;                        ld          hl,LastInterrupt
  63+ 77C4              ;                        cp          (hl)
  64+ 77C4              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 77C4              ;                        ld          (hl),a
  66+ 77C4
  67+ 77C4 CD 50 7E     AttractModeMain:        call    scan_keyboard
  68+ 77C7 3E 50                                ld      a,c_Pressed_Yes
  69+ 77C9 CD E2 7E                             call    is_key_up_state
  70+ 77CC 20 0A                                jr      nz,.YPressed
  71+ 77CE 3E 52                                ld      a,c_Pressed_No
  72+ 77D0 CD E2 7E                             call    is_key_up_state
  73+ 77D3 20 06                                jr      nz,.NPressed
  74+ 77D5 C3 C4 77                             jp      AttractModeMain
  75+ 77D8 3E 00        .YPressed:              ld      a,0
  76+ 77DA C9                                   ret
  77+ 77DB 3E FF        .NPressed:              ld      a,$FF
  78+ 77DD C9                                   ret
  79+ 77DE
  80+ 77DE              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  81+ 77DE 00           AttractStep             DB      0
  82+ 77DF
  83+ 77DF 2A 38 77     AttractModeUpdate:      ld      hl,(AttractTimer)
  84+ 77E2 2B                                   dec     hl
  85+ 77E3 22 38 77                             ld      (AttractTimer),hl
  86+ 77E6 7C                                   ld      a,h
  87+ 77E7 B5                                   or      l
  88+ 77E8 C2 EF 77                             jp      nz,.DrawShip
  89+ 77EB CD 69 78                             call    SelectARandomShip
  90+ 77EE C9                                   ret
  91+ 77EF              .DrawShip:              ;BREAK
  92+ 77EF CD 3B 88     .SelectShipData:        call    doRandom
  93+ 77F2                                      MMUSelectUniverseN  1
  93+ 77F2 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  94+ 77F6 3A DE 77                             ld      a,(AttractStep)
  95+ 77F9 A7                                   and     a       ; 0
  96+ 77FA CA 04 78                             jp      z,.ApplyShipRollAndPitch
  97+ 77FD 3D                                   dec     a       ; 1
  98+ 77FE CA 23 78                             jp      z,.ProcessNodes
  99+ 7801 C3 2C 78                             jp      .PrepLines ; 2
 100+ 7804
 101+ 7804 CD 7B DB     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 102+ 7807 CD 55 77                             call    RandomXCounter
 103+ 780A CD 62 77                             call    RandomYCounter
 104+ 780D 3A 52 77                             ld      a,(LocalXCounter)
 105+ 7810 32 48 C0                             ld      (UBnKRotXCounter),a
 106+ 7813 3A 53 77                             ld      a,(LocalZCounter)
 107+ 7816 32 49 C0                             ld      (UBnKRotZCounter),a
 108+ 7819              .ClearScreen:           MMUSelectLayer2
 108+ 7819 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 109+ 781D CD 8E E1                             call    l2_cls_upper_two_thirds
 110+ 7820 C3 5A 78                             jp      .DoneIM2
 111+ 7823 CD 99 DD     .ProcessNodes:          call    ProcessNodes
 112+ 7826 CD E6 D4     .CullV2:                call    CullV2
 113+ 7829 C3 5A 78                             jp      .DoneIM2
 114+ 782C CD F0 DF     .PrepLines:             call    PrepLines
 115+ 782F CD 3D DD     .DrawLines:             call    DrawLines
 116+ 7832 01 01 01     .Drawbox:               ld		bc,$0101
 117+ 7835 11 FD 7F                             ld		de,$7FFD
 118+ 7838 3E C0                                ld		a,$C0
 119+ 783A                                      MMUSelectLayer2
 119+ 783A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 120+ 783E CD F8 E3                             call	l2_draw_box
 121+ 7841 CD 97 E2     .DoubleBuffer:          call    l2_flip_buffers
 122+ 7844 3A 3A 77     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 123+ 7847 A7                                   and     a
 124+ 7848 CA 5A 78                             jp      z,.DoneIM2
 125+ 784B 3D                                   dec     a
 126+ 784C 32 3A 77                             ld      (AttractCounter),a
 127+ 784F 2A 26 C0                             ld      hl, (UBnKzlo)
 128+ 7852 11 08 00     .UpdatePos:             ld      de, $0008
 129+ 7855 ED 52                                sbc     hl,de
 130+ 7857 22 26 C0                             ld      (UBnKzlo),hl
 131+ 785A 3A DE 77     .DoneIM2:               ld      a,(AttractStep)
 132+ 785D 3C                                   inc     a
 133+ 785E FE 03                                cp      3
 134+ 7860 32 DE 77                             ld      (AttractStep),a
 135+ 7863 C0                                   ret     nz
 136+ 7864                                      ZeroA
 136+ 7864 AF          >                        xor a
 137+ 7865 32 DE 77                             ld      (AttractStep),a
 138+ 7868 C9                                   ret
 139+ 7869
 140+ 7869
 141+ 7869
 142+ 7869 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 143+ 786B                                      MMUSelectUniverseN  1
 143+ 786B ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 144+ 786F                                      MMUSelectShipBank1
 144+ 786F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 145+ 7873 FD 26 01                             ld      iyh, 1
 146+ 7876 CD 3B 88     .SelectRandom:          call    doRandom
 147+ 7879                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 147+ 7879 FE 2C       >                        cp     ShipID_Rattler+1
 147+ 787B D2 76 78    >                        jp		nc,.SelectRandom
 148+ 787E FD 6F                                ld      iyl,a
 149+ 7880 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 150+ 7883                                      MMUSelectShipBankA
 150+ 7883 ED 92 57    >					 nextreg ShipModelMMU,	    a
 151+ 7886 78                                   ld      a,b
 152+ 7887 CD 6A E0                             call    CopyShipToUniverse
 153+ 788A 3A A9 C3                             ld      a,(ShipTypeAddr)
 154+ 788D CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 155+ 788F 20 E5                                jr      nz,.SelectRandom
 156+ 7891 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 157+ 7893 CD A6 C9                             call    UnivInitRuntime
 158+ 7896 CD 82 C8                             call    UnivSetDemoPostion
 159+ 7899 21 E0 01                             ld      hl,AttractDuration*2
 160+ 789C 22 38 77                             ld      (AttractTimer),hl
 161+ 789F 3E 80                                ld      a, AttractCounterStart
 162+ 78A1 32 3A 77                             ld      (AttractCounter),a
 163+ 78A4                                      ZeroA
 163+ 78A4 AF          >                        xor a
 164+ 78A5 32 DE 77                             ld      (AttractStep),a
 165+ 78A8 C9                                   ret
 166+ 78A9
 167+ 78A9
 168+ 78A9
# file closed: ./Menus/AttractMode.asm
 567  78A9
 568  78A9                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 78A9              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 78A9              ; so xx12 = XX15 * XX16 row
   3+ 78A9              XX12ProcessOneRow:
   4+ 78A9              XX12CalcXCell:
   5+ 78A9 ED 4B A6 C0          ld		bc,(UBnkXScaled)
   6+ 78AD 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 78AE 23           		inc		hl
   8+ 78AF 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 78B0 7A           		ld		a,d
  10+ 78B1 A8                   xor     b
  11+ 78B2 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 78B4 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 78B6 78           		ld		a,b                                     ; now make bc abs bc
  14+ 78B7 E6 7F        		and		SignMask8Bit
  15+ 78B9 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 78BA E5           		push	hl
  17+ 78BB 16 00                ld      d,0                                     ; d = value
  18+ 78BD 60           		ld		h,b
  19+ 78BE 69           		ld		l,c
  20+ 78BF CD B2 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 78C2 22 44 7D     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 78C5 DD 7C        		ld		a,ixh
  23+ 78C7 32 4B 7D     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 78CA E1           		pop		hl
  25+ 78CB              XX12CalcYCell:
  26+ 78CB ED 4B A8 C0          ld		bc,(UBnkYScaled)
  27+ 78CF 23           		inc		hl
  28+ 78D0 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 78D1 23           		inc		hl
  30+ 78D2 56           		ld		d,(hl)
  31+ 78D3 7A           		ld		a,d
  32+ 78D4 A8                   xor     b
  33+ 78D5 E6 80        		and		SignOnly8Bit
  34+ 78D7 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 78D9 78           		ld		a,b                                     ; now make bc abs bc
  36+ 78DA E6 7F        		and		SignMask8Bit
  37+ 78DC 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 78DD E5           		push	hl
  39+ 78DE 16 00                ld      d,0                                     ; d = value
  40+ 78E0 60           		ld		h,b
  41+ 78E1 69           		ld		l,c
  42+ 78E2 CD B2 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 78E5 22 46 7D     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 78E8 DD 7C        		ld		a,ixh
  45+ 78EA 32 4A 7D     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 78ED E1           		pop		hl
  47+ 78EE              XX12CalcZCell:
  48+ 78EE ED 4B AA C0          ld		bc,(UBnkZScaled)
  49+ 78F2 23           		inc		hl
  50+ 78F3 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 78F4 23           		inc		hl
  52+ 78F5 56           		ld		d,(hl)
  53+ 78F6 7A           		ld		a,d
  54+ 78F7 A8                   xor     b
  55+ 78F8 E6 80        		and		SignOnly8Bit
  56+ 78FA DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 78FC 78           		ld		a,b                                     ; now make bc abs bc
  58+ 78FD E6 7F        		and		SignMask8Bit
  59+ 78FF 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 7900 16 00                ld      d,0                                     ; d = value
  61+ 7902 60           		ld		h,b
  62+ 7903 69           		ld		l,c
  63+ 7904 CD B2 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 7907 22 48 7D     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 790A DD 7C        		ld		a,ixh
  66+ 790C 32 4C 7D     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 790F              XX12CalcCellResult:
  68+ 790F 2A 44 7D     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7912 ED 5B 46 7D  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 7916 ED 4B 4A 7D  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 791A              XX12MSBOnly:
  72+ 791A 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 791B 5A           		ld		e,d									    ; for both results
  74+ 791C AF           		xor		a									    ;
  75+ 791D 67           		ld		h,a									    ;
  76+ 791E 57           		ld		d,a									    ; so set high byte to 0
  77+ 791F CD EF 92     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7922 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7923 3A 4C 7D     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 7926 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 7927 ED 5B 48 7D  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 792B 5A           		ld		e,d                                     ; d = result /256
  83+ 792C 16 00        		ld		d,0									    ; and only us high byte
  84+ 792E CD EF 92     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7931 C9           		ret											    ; hl = result, a = sign
  86+ 7932              								    ; hl = result, a = sign
  87+ 7932
  88+ 7932              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7932              ;...X cell
  90+ 7932 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 7935 CD A9 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 7938 47           		ld		b,a                                 ; b = sign
  93+ 7939 7C           		ld		a,h                                 ; a = high byte
  94+ 793A B0           		or		b
  95+ 793B 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 793E 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 793F 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7942              ;...Y cell
  99+ 7942 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 7945 CD A9 78             call    XX12ProcessOneRow
 101+ 7948 47           		ld		b,a
 102+ 7949 7C           		ld		a,h
 103+ 794A              ;		ld		a,l
 104+ 794A B0           		or		b
 105+ 794B 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 794E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 794F 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7952              ;...Z cell
 109+ 7952 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7955 CD A9 78             call    XX12ProcessOneRow
 111+ 7958 47           		ld		b,a
 112+ 7959 7C                   ld		a,h
 113+ 795A              ;		ld		a,l
 114+ 795A B0           		or		b
 115+ 795B 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 795E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 795F 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7962 C9                   ret
 119+ 7963
 120+ 7963              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7963              ;...X cell
 122+ 7963 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7966 CD A9 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 7969 47           		ld		b,a                                 ; b = sign
 125+ 796A 7C           		ld		a,h                                 ; a = high byte
 126+ 796B B0           		or		b
 127+ 796C 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 796F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7970 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7973              ;...Y cell
 131+ 7973 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7976 CD A9 78             call    XX12ProcessOneRow
 133+ 7979 47           		ld		b,a
 134+ 797A 7C           		ld		a,h
 135+ 797B              ;		ld		a,l
 136+ 797B B0           		or		b
 137+ 797C 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 797F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 7980 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 7983              ;...Z cell
 141+ 7983 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 7986 CD A9 78             call    XX12ProcessOneRow
 143+ 7989 47           		ld		b,a
 144+ 798A 7C                   ld		a,h
 145+ 798B              ;		ld		a,l
 146+ 798B B0           		or		b
 147+ 798C 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 798F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 7990 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 7993 C9                   ret
 151+ 7994
 152+ 7994              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 7994              ;...X cell
 154+ 7994 21 61 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 7997 CD A9 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 799A 47           		ld		b,a                                 ; b = sign
 157+ 799B 7C           		ld		a,h                                 ; a = high byte
 158+ 799C B0           		or		b
 159+ 799D 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 79A0 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 79A1 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 79A4              ;...Y cell
 163+ 79A4 21 67 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 79A7 CD A9 78             call    XX12ProcessOneRow
 165+ 79AA 47           		ld		b,a
 166+ 79AB 7C           		ld		a,h
 167+ 79AC              ;		ld		a,l
 168+ 79AC B0           		or		b
 169+ 79AD 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 79B0 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 79B1 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 79B4              ;...Z cell
 173+ 79B4 21 6D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 79B7 CD A9 78             call    XX12ProcessOneRow
 175+ 79BA 47           		ld		b,a
 176+ 79BB 7C                   ld		a,h
 177+ 79BC              ;		ld		a,l
 178+ 79BC B0           		or		b
 179+ 79BD 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 79C0 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 79C1 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 79C4 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 569  79C5                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 79C5 21 AC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 79C8 11 A6 C0                             ld      de,XX15
   3+ 79CB 01 06 00                             ld      bc,6
   4+ 79CE ED B0                                ldir
   5+ 79D0 C9                                   ret
   6+ 79D1
   7+ 79D1 21 AC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 79D4 11 B2 C0                             ld      de,XX12Save
   9+ 79D7 01 06 00                             ld      bc,6
  10+ 79DA ED B0                                ldir
  11+ 79DC C9                                   ret
  12+ 79DD
  13+ 79DD 21 B2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 79E0 11 AC C0                             ld      de,XX12
  15+ 79E3 01 06 00                             ld      bc,6
  16+ 79E6 ED B0                                ldir
  17+ 79E8 C9                                   ret
  18+ 79E9
  19+ 79E9 21 AC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 79EC 11 B8 C0                             ld      de,XX12Save2
  21+ 79EF 01 06 00                             ld      bc,6
  22+ 79F2 ED B0                                ldir
  23+ 79F4 C9                                   ret
  24+ 79F5
  25+ 79F5 21 B8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 79F8 11 AC C0                             ld      de,XX12
  27+ 79FB 01 06 00                             ld      bc,6
  28+ 79FE ED B0                                ldir
  29+ 7A00 C9                                   ret
  30+ 7A01
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 570  7A01                  ;;DEFUNCTinclude "./ModelRender/CopyXX15ToXX12.asm"
 571  7A01                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7A01              ScaleXX16Matrix197:
   2+ 7A01                      IFDEF LOGMATHS
   3+ 7A01 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7A01 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7A01 ~                                    MMUSelectMathsTables
   6+ 7A01 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7A01 ~                                    inc		hl                  ;
   8+ 7A01 ~                                    ld		a,(hl)              ;
   9+ 7A01 ~                                    ld		d,a                 ;
  10+ 7A01 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7A01 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7A01 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7A01 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7A01 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7A01 ~                                    push	hl                  ; save HL
  16+ 7A01 ~                                    call    AEquAmul256Div197Log;
  17+ 7A01 ~                                    pop		hl
  18+ 7A01 ~                                    dec     hl                  ; move back to low byte
  19+ 7A01 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7A01 ~                                    inc     hl                  ; move back to high byte
  21+ 7A01 ~                                    ld      a,ixl
  22+ 7A01 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7A01 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7A01 ~                                    inc     hl                  ; no to next vertex value
  25+ 7A01 ~                                    djnz	.ScaleXX16Loop
  26+ 7A01 ~                                    MMUSelectROM0
  27+ 7A01 ~                                    ret
  28+ 7A01                      ELSE
  29+ 7A01 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7A03 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7A05 21 61 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7A08 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7A09 5F                                   ld		e,a                 ;
  34+ 7A0A 23                                   inc		hl                  ;
  35+ 7A0B 7E                                   ld		a,(hl)              ;
  36+ 7A0C 57                                   ld		d,a                 ;
  37+ 7A0D E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7A0F DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7A11                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7A11 CB 23       >			   sla e
  39+ 7A13 CB 12       >			   rl  d
  40+ 7A15 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7A16 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7A17 E5                                   push	hl                  ; save HL
  43+ 7A18 CD 34 98                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7A1B E1                                   pop		hl
  45+ 7A1C 2B                                   dec     hl                  ; move back to low byte
  46+ 7A1D 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7A1E 23                                   inc     hl                  ; move back to high byte
  48+ 7A1F                                  ;    ld      a,(hl)
  49+ 7A1F                                  ;    and     $80
  50+ 7A1F DD 7D                                ld      a,ixl
  51+ 7A21 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7A22 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7A23 23                                   inc     hl                  ; no to next vertex value
  54+ 7A24 10 E2                                djnz	.ScaleXX16Loop
  55+ 7A26 C9                                   ret
  56+ 7A27                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 572  7A27
 573  7A27                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7A27              ;note: DIV16Amul256dCUNDOC as per
   2+ 7A27              ;                                   BC = A0
   3+ 7A27              ;                                   DE = 0C
   4+ 7A27              ;                                   so BC = a * 256 / C
   5+ 7A27
   6+ 7A27              ; We can cheat here, Speed is always 0 or positive
   7+ 7A27              ; z postion will always be positive if we can see it
   8+ 7A27
   9+ 7A27 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7A28 CD 3B 88                             call    doRND               ; a = random OR bit 5
  11+ 7A2B EB                                   ex      de,hl               ; .
  12+ 7A2C F6 08                                or      8                   ; .
  13+ 7A2E 77                                   ld      (hl),a              ; save to x pos
  14+ 7A2F E6 7F                                and     $7F                 ; a = abs a
  15+ 7A31 23                                   inc     hl                  ;
  16+ 7A32 77                                   ld      (hl),a              ;
  17+ 7A33 EB                                   ex      de,hl               ; preserving hl
  18+ 7A34 CD 3B 88                             call    doRND               ; a = -ve (random / 2)
  19+ 7A37 EB                                   ex      de,hl               ; .
  20+ 7A38 0F                                   rrca                        ; .
  21+ 7A39 E6 80                                and     $80                 ; .
  22+ 7A3B B6                                   or      (hl)                ; or with
  23+ 7A3C 77                                   ld      (hl),a
  24+ 7A3D 23                                   inc     hl
  25+ 7A3E EB                                   ex      de,hl
  26+ 7A3F CD 3B 88                             call    doRND
  27+ 7A42 EB                                   ex      de,hl
  28+ 7A43 F6 04                                or      4
  29+ 7A45 77                                   ld      (hl),a
  30+ 7A46 23                                   inc     hl
  31+ 7A47 E6 7F                                and     $7F
  32+ 7A49 77                                   ld      (hl),a
  33+ 7A4A EB                                   ex      de,hl
  34+ 7A4B CD 3B 88                             call    doRND
  35+ 7A4E EB                                   ex      de,hl
  36+ 7A4F 0F                                   rrca
  37+ 7A50 E6 80                                and     $80
  38+ 7A52 B6                                   or      (hl)
  39+ 7A53 77                                   ld      (hl),a
  40+ 7A54 23                                   inc     hl
  41+ 7A55 EB                                   ex      de,hl
  42+ 7A56 CD 3B 88                             call    doRND
  43+ 7A59 EB                                   ex      de,hl
  44+ 7A5A F6 90                                or      144
  45+ 7A5C 77                                   ld      (hl),a
  46+ 7A5D 23                                   inc     hl
  47+ 7A5E F6 70                                or      %01110000
  48+ 7A60 E6 7F                                and     $7f     ; bodge
  49+ 7A62 77                                   ld      (hl),a
  50+ 7A63 23                                   inc     hl
  51+ 7A64 C9                                   ret
  52+ 7A65
  53+ 7A65 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7A66 CD 3B 88                             call    doRND
  55+ 7A69 CB 27                                sla     a
  56+ 7A6B CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7A6D EB                                   ex      de,hl
  58+ 7A6E E6 F8                                and     %11111000
  59+ 7A70 77                                   ld      (hl),a
  60+ 7A71 E6 7F                                and     $7F
  61+ 7A73 23                                   inc     hl
  62+ 7A74 77                                   ld      (hl),a
  63+ 7A75 EB                                   ex      de,hl
  64+ 7A76 CD 3B 88                             call    doRND
  65+ 7A79 EB                                   ex      de,hl
  66+ 7A7A 0F                                   rrca
  67+ 7A7B E6 80                                and     $80
  68+ 7A7D B6                                   or      (hl)
  69+ 7A7E 77                                   ld      (hl),a
  70+ 7A7F 23                                   inc     hl
  71+ 7A80 EB                                   ex      de,hl
  72+ 7A81 CD 3B 88                             call    doRND
  73+ 7A84 CB 27                                sla     a
  74+ 7A86 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7A88 EB                                   ex      de,hl
  76+ 7A89 E6 F8                                and     %11111000
  77+ 7A8B 77                                   ld      (hl),a
  78+ 7A8C 23                                   inc     hl
  79+ 7A8D E6 7F                                and     $7F
  80+ 7A8F 77                                   ld      (hl),a
  81+ 7A90 EB                                   ex      de,hl
  82+ 7A91 CD 3B 88                             call    doRND
  83+ 7A94 EB                                   ex      de,hl
  84+ 7A95 0F                                   rrca
  85+ 7A96 E6 80                                and     $80
  86+ 7A98 B6                                   or      (hl)
  87+ 7A99 77                                   ld      (hl),a
  88+ 7A9A 23                                   inc     hl
  89+ 7A9B EB                                   ex      de,hl
  90+ 7A9C CD 3B 88                             call    doRND
  91+ 7A9F EB                                   ex      de,hl
  92+ 7AA0 F6 5F                                or      95
  93+ 7AA2 77                                   ld      (hl),a
  94+ 7AA3 23                                   inc     hl
  95+ 7AA4 F6 70                                or      %01110000
  96+ 7AA6 E6 7F                                and     $7f     ; bodge
  97+ 7AA8 77                                   ld      (hl),a
  98+ 7AA9 23                                   inc     hl
  99+ 7AAA C9                                   ret
 100+ 7AAB
 101+ 7AAB              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7AAB 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7AAD 21 04 83                             ld      hl,varDust
 104+ 7AB0 CD 27 7A     .InitStarsLoop:         call    InitStarAtHL
 105+ 7AB3 10 FB                                djnz    .InitStarsLoop
 106+ 7AB5 C9                                   ret
 107+ 7AB6              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7AB6 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7AB8 21 04 83                             ld      hl,varDust
 110+ 7ABB CD 65 7A     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7ABE 10 FB                                djnz    .InitStarsLoop
 112+ 7AC0 C9                                   ret
 113+ 7AC1              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7AC1 FD 21 04 83  SaveCurrentDust:        ld          iy,varDust
 115+ 7AC5 DD 21 EE 82                          ld          ix,varDustWarpRender
 116+ 7AC9 06 0B                                ld          b, MaxNumberOfStars
 117+ 7ACB FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7ACE 6F                                   ld          l,a
 119+ 7ACF E6 7F                                and         $7F
 120+ 7AD1                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7AD1 CB 7D       >                        bit 	7,l
 120+ 7AD3 C2 DC 7A    >                        jp      nz,.StarNegXPt
 121+ 7AD6 C6 80                                add         a,$80
 122+ 7AD8 5F                                   ld          e,a
 123+ 7AD9 C3 E1 7A                             jp          .StarDoneX
 124+ 7ADC 57           .StarNegXPt:            ld          d,a
 125+ 7ADD 3E 80                                ld          a,$80
 126+ 7ADF 92                                   sub         d
 127+ 7AE0 5F                                   ld          e,a
 128+ 7AE1 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7AE4 6F                                   ld          l,a
 130+ 7AE5 E6 7F                                and         $7F
 131+ 7AE7                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7AE7 CB 7D       >                        bit 	7,l
 131+ 7AE9 C2 F2 7A    >                        jp      nz,.StarNegYPt
 132+ 7AEC C6 60                                add         a,$60
 133+ 7AEE 57                                   ld          d,a
 134+ 7AEF C3 F7 7A                             jp          .StarDoneY
 135+ 7AF2 57           .StarNegYPt:            ld          d,a
 136+ 7AF3 3E 60                                ld          a,$60
 137+ 7AF5 92                                   sub         d
 138+ 7AF6 57                                   ld          d,a
 139+ 7AF7 DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7AFA DD 72 01                             ld          (ix+1),d
 141+ 7AFD DD 23                                inc         ix
 142+ 7AFF DD 23                                inc         ix
 143+ 7B01 FD E5 E1                             ld          hl,iy
 144+ 7B04 3E 06                                ld          a,6
 145+ 7B06 ED 31                                add         hl,a
 146+ 7B08 E5 FD E1                             ld          iy,hl
 147+ 7B0B 10 BE                                djnz        .SaveLoop
 148+ 7B0D C9                                   ret
 149+ 7B0E
 150+ 7B0E              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7B0E 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7B10 FD 21 04 83                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7B14 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7B15 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7B18 5F                                   ld      e,a                                 ; d = 0
 156+ 7B19 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7B1B 3A ED 81                             ld      a,(DELTA)                           ; a = speed
 158+ 7B1E                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7B1E A7          >                        and     a
 158+ 7B1F C2 23 7B    >                        jp	    nz,.NormalSpeed
 159+ 7B22 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7B23 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7B24 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7B26 CD C0 98                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7B29                                      ShiftHLRight1
 163+ 7B29 CB 3C       >			   srl h
 163+ 7B2B CB 1D       >			   rr  l
 164+ 7B2D                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7B2D CB 3C       >			   srl h
 164+ 7B2F CB 1D       >			   rr  l
 165+ 7B31 7D                                   ld      a,l                                 ;
 166+ 7B32 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7B34 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7B36 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7B3A 66 05
 169+ 7B3C ED 5B EE 81                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7B40 CD E1 93                             call    subHLDES15
 171+ 7B43                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7B43 CB 7C       >                        bit 	7,h
 171+ 7B45 C2 9A 7C    >                        jp      nz,ResetStar
 172+ 7B48 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7B4C 74 05
 173+ 7B4E FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7B52 66 01
 174+ 7B54 7C                                   ld      a,h                                 ;
 175+ 7B55 E6 7F                                and     $7F                                 ;
 176+ 7B57 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7B58 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7B5A ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7B5C 7C                                   ld      a,h                                 ;
 180+ 7B5D E6 80                                and     $80                                 ;
 181+ 7B5F B2                                   or      d                                   ; set sign bit in d
 182+ 7B60 57                                   ld      d,a                                 ;
 183+ 7B61 CD 12 93                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 184+ 7B64 7C                                   ld      a,h
 185+ 7B65 E6 7F                                and     $7F
 186+ 7B67                                      JumpIfAGTENusng $70, ResetStar
 186+ 7B67 FE 70       >                        cp     $70
 186+ 7B69 D2 9A 7C    >                        jp		nc,ResetStar
 187+ 7B6C FD 75 00 FD                          ld      (iy+0),hl                           ;
 187+ 7B70 74 01
 188+ 7B72 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 188+ 7B76 66 03
 189+ 7B78 7C                                   ld      a,h                                 ;
 190+ 7B79 E6 7F                                and     $7F                                 ;
 191+ 7B7B 57                                   ld      d,a                                 ; d = abs(y hi)
 192+ 7B7C DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 193+ 7B7E ED 30                                mul                                         ; de =  abs(y hi) * Q
 194+ 7B80 7C                                   ld      a,h                                 ;
 195+ 7B81 E6 80                                and     $80                                 ;
 196+ 7B83 B2                                   or      d                                   ; set sign bit in d
 197+ 7B84 57                                   ld      d,a                                 ;
 198+ 7B85 CD 12 93                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 199+ 7B88 7C                                   ld      a,h
 200+ 7B89 E6 7F                                and     $7F
 201+ 7B8B                                      JumpIfAGTENusng $60, ResetStar
 201+ 7B8B FE 60       >                        cp     $60
 201+ 7B8D D2 9A 7C    >                        jp		nc,ResetStar
 202+ 7B90 7C                                   ld      a,h
 203+ 7B91 E6 80                                and     $80
 204+ 7B93 20 06                                jr      nz,.NoSecondCheck
 205+ 7B95 7C                                   ld      a,h
 206+ 7B96                                      JumpIfAGTENusng $20, ResetStar
 206+ 7B96 FE 20       >                        cp     $20
 206+ 7B98 D2 9A 7C    >                        jp		nc,ResetStar
 207+ 7B9B FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 207+ 7B9F 74 03
 208+ 7BA1              ; Now roll
 209+ 7BA1              ;  6. x = x - alpha * y / 256
 210+ 7BA1 3A 0D 81     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 211+ 7BA4 FE 00                                cp      0
 212+ 7BA6 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 7BA8                                   ;   break
 214+ 7BA8 6F                                   ld      l,a                                 ; roll magnitude
 215+ 7BA9 3A 0F 81                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 216+ 7BAC E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 217+ 7BAE 67                                   ld      h,a                                 ; h = roll sign
 218+ 7BAF E5                                   push    hl                                  ; save on the stack
 219+ 7BB0 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 7BB1 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 7BB2 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 7BB5 5F                                   ld      e,a                                 ; save signed byte
 223+ 7BB6 E6 80                                and     SignOnly8Bit                        ; a = sign only
 224+ 7BB8 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 7BB9 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 226+ 7BBA E6 7F                                and     SignMask8Bit
 227+ 7BBC 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 7BBD ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 7BBF 79                                   ld      a,c                                 ; get back sign from roll
 230+ 7BC0 A8                                   xor     b                                   ; handle muliple sign bits
 231+ 7BC1 B2                                   or      d
 232+ 7BC2 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 7BC3 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 7BC7 66 01
 234+ 7BC9 CD E1 93                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 235+ 7BCC FD 75 00 FD                          ld      (iy+0),hl
 235+ 7BD0 74 01
 236+ 7BD2              ;  5. y = y + alpha * x / 256
 237+ 7BD2              .YRoll:                 ;break
 238+ 7BD2 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 7BD3 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 240+ 7BD4 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 241+ 7BD5 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 242+ 7BD8 5F                                   ld      e,a
 243+ 7BD9 E6 80                                and     SignOnly8Bit
 244+ 7BDB 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 245+ 7BDC 7B           .ryEEquABSignX:         ld      a,e
 246+ 7BDD E6 7F                                and     SignMask8Bit
 247+ 7BDF 5F                                   ld      e,a                                 ; save abs x hi in e
 248+ 7BE0 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 249+ 7BE2 79                                   ld      a,c
 250+ 7BE3 A8                                   xor     b                                   ; handle muliple sign bits
 251+ 7BE4 B2                                   or      d
 252+ 7BE5 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 253+ 7BE6 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 253+ 7BEA 66 03
 254+ 7BEC CD 12 93                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 255+ 7BEF FD 75 02 FD                          ld      (iy+2),hl
 255+ 7BF3 74 03
 256+ 7BF5 3A 01 81     .NoRoll:                ld      a,(BET1)
 257+ 7BF8 FE 00                                cp      0
 258+ 7BFA 28 22                                jr      z,.NoPitch
 259+ 7BFC              ;  8. y = y - beta * 256
 260+ 7BFC 57           .YPitch:                ld      d,a                                 ; d = BET1
 261+ 7BFD FD 7E 02                             ld      a,(iy+2)
 262+ 7C00 5F                                   ld      e,a                                 ; e = Y HI
 263+ 7C01 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 264+ 7C03 5F                                   ld      e,a
 265+ 7C04 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 266+ 7C06                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 266+ 7C06 CB 23       >			   sla e
 266+ 7C08 CB 12       >			   rl  d
 267+ 7C0A 3A 02 81                             ld      a,(BET2)                            ; get inverted Sign
 268+ 7C0D B2                                   or      d
 269+ 7C0E 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 270+ 7C0F FD 6E 02 FD                          ld      hl,(iy+2)
 270+ 7C13 66 03
 271+ 7C15 CD 12 93                             call    ADDHLDESignedV4
 272+ 7C18 FD 75 02 FD                          ld      (iy+2),hl
 272+ 7C1C 74 03
 273+ 7C1E              ; now work out screen pos
 274+ 7C1E              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 275+ 7C1E              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 276+ 7C1E              ;        pop     de
 277+ 7C1E               ;       call    ProjectStarXToScreen
 278+ 7C1E                                      ;pop     de
 279+ 7C1E              .NoPitch:
 280+ 7C1E FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 281+ 7C21 6F                                   ld      l,a
 282+ 7C22 E6 7F                                and     $7F
 283+ 7C24                                      JumpOnBitSet l,7,StarNegXPt
 283+ 7C24 CB 7D       >                        bit 	7,l
 283+ 7C26 C2 2F 7C    >                        jp      nz,StarNegXPt
 284+ 7C29 C6 80                                add     a,$80
 285+ 7C2B 4F                                   ld      c,a
 286+ 7C2C C3 34 7C                             jp      StarDoneX
 287+ 7C2F 47           StarNegXPt:             ld      b,a
 288+ 7C30 3E 80                                ld      a,$80
 289+ 7C32 90                                   sub     b
 290+ 7C33 4F                                   ld      c,a
 291+ 7C34 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 292+ 7C37 6F                                   ld      l,a
 293+ 7C38 E6 7F                                and     $7F
 294+ 7C3A                                      JumpOnBitSet l,7,StarNegYPt
 294+ 7C3A CB 7D       >                        bit 	7,l
 294+ 7C3C C2 45 7C    >                        jp      nz,StarNegYPt
 295+ 7C3F C6 60                                add     a,$60
 296+ 7C41 47                                   ld      b,a
 297+ 7C42 C3 4A 7C                             jp      StarDoneY
 298+ 7C45 47           StarNegYPt:             ld      b,a
 299+ 7C46 3E 60                                ld      a,$60
 300+ 7C48 90                                   sub     b
 301+ 7C49 47                                   ld      b,a
 302+ 7C4A 3E 92        StarDoneY:              ld      a,L2DustColour
 303+ 7C4C C5                                   push    bc
 304+ 7C4D              .DrawStar:              MMUSelectLayer2
 304+ 7C4D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ 7C51 CD B5 E2                             call    l2_plot_pixel
 306+ 7C54 FD 7E 05                             ld      a,(iy+5)
 307+ 7C57 C1                                   pop    bc
 308+ 7C58                                      JumpIfAGTENusng $60,EndofStarsLoop
 308+ 7C58 FE 60       >                        cp     $60
 308+ 7C5A D2 8A 7C    >                        jp		nc,EndofStarsLoop
 309+ 7C5D 3E 92                                ld      a,L2DustColour
 310+ 7C5F 0C                                   inc     c
 311+ 7C60 C5                                   push    bc
 312+ 7C61                                      MMUSelectLayer2
 312+ 7C61 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 313+ 7C65 CD B5 E2                             call    l2_plot_pixel
 314+ 7C68 FD 7E 05                             ld      a,(iy+5)
 315+ 7C6B C1                                   pop    bc
 316+ 7C6C                                      JumpIfAGTENusng $37,EndofStarsLoop
 316+ 7C6C FE 37       >                        cp     $37
 316+ 7C6E D2 8A 7C    >                        jp		nc,EndofStarsLoop
 317+ 7C71 3E 92                                ld      a,L2DustColour
 318+ 7C73 04                                   inc     b
 319+ 7C74 C5                                   push    bc
 320+ 7C75                                      MMUSelectLayer2
 320+ 7C75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ 7C79 CD B5 E2                             call    l2_plot_pixel
 322+ 7C7C FD 7E 05                             ld      a,(iy+5)
 323+ 7C7F C1                                   pop    bc
 324+ 7C80 3E 92                                ld      a,L2DustColour
 325+ 7C82 0D                                   dec     c
 326+ 7C83                                      MMUSelectLayer2
 326+ 7C83 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ 7C87 CD B5 E2                             call    l2_plot_pixel
 328+ 7C8A C1           EndofStarsLoop:         pop     bc                                      ;  0
 329+ 7C8B FD E5        NextStarLoop3:          push    iy                                      ; +1
 330+ 7C8D E1                                   pop     hl                                      ;  0
 331+ 7C8E ED 34 06 00                          add     hl,6
 332+ 7C92 E5           NextStarLoop2:          push    hl                                      ; +1
 333+ 7C93 FD E1                                pop     iy                                      ;  0
 334+ 7C95 05                                   dec     b
 335+ 7C96 C2 14 7B                             jp      nz,StarProcessLoop
 336+ 7C99 C9                                   ret
 337+ 7C9A C1           ResetStar:              pop     bc                                      ; 0
 338+ 7C9B FD E5                                push    iy                                      ; +1 (current star)
 339+ 7C9D E1                                   pop     hl                                      ; 0
 340+ 7C9E CD 27 7A                             call    InitStarAtHL
 341+ 7CA1 C3 8B 7C                             jp      NextStarLoop3
 342+ 7CA4              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ 7CA4 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 344+ 7CA7 FD 7E 01                             ld      a,(iy+1)
 345+ 7CAA 6F                                   ld      l,a
 346+ 7CAB E6 7F                                and     $7F
 347+ 7CAD 47                                   ld      b,a
 348+ 7CAE CD 4B 98                             call    DIV16BCDivDEUNDOC
 349+ 7CB1 7D                                   ld      a,l
 350+ 7CB2                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 350+ 7CB2 CB 7F       >                        bit 	7,a
 350+ 7CB4 C2 BF 7C    >                        jp      nz,StarXNegativePoint
 351+ 7CB7              ;StarXPositivePoint:									; x was positive result
 352+ 7CB7 2E 80                                ld          l,ScreenCenterX						;
 353+ 7CB9 26 00                                ld          h,0
 354+ 7CBB 09                                   add         hl,bc								; hl = Screen Centre + X
 355+ 7CBC C3 C6 7C                             jp          StarStoreXPoint
 356+ 7CBF              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 357+ 7CBF 2E 80                                ld          l,ScreenCenterX
 358+ 7CC1 26 00                                ld          h,0
 359+ 7CC3                                      ClearCarryFlag
 359+ 7CC3 B7          >                        or a
 360+ 7CC4 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 361+ 7CC6              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 362+ 7CC6 7D                                   ld          a,l
 363+ 7CC7 32 5C 83                             ld          (varStarX),a
 364+ 7CCA C9                                   ret
 365+ 7CCB
 366+ 7CCB FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 367+ 7CCE FD 7E 03                             ld          a,(iy+3)
 368+ 7CD1 6F                                   ld          l,a
 369+ 7CD2 E6 7F                                and         $7F
 370+ 7CD4 47                                   ld          b,a
 371+ 7CD5 CD 4B 98                             call        DIV16BCDivDEUNDOC
 372+ 7CD8 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 373+ 7CD9                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 373+ 7CD9 CB 7F       >                        bit 	7,a
 373+ 7CDB C2 E6 7C    >                        jp      nz,StarNegativeYPoint
 374+ 7CDE                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 375+ 7CDE 2E 60                               ld          l,ScreenCenterY
 376+ 7CE0                                      ClearCarryFlag
 376+ 7CE0 B7          >                        or a
 377+ 7CE1 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 378+ 7CE3 C3 EB 7C                             jp          StarStoreYPoint
 379+ 7CE6              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 380+ 7CE6 2E 60                                ld          l,ScreenCenterY
 381+ 7CE8 26 00                                ld          h,0
 382+ 7CEA 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 383+ 7CEB              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 384+ 7CEB 7D                                   ld          a,l
 385+ 7CEC 32 5D 83                             ld          (varStarY),a
 386+ 7CEF C9                                   ret
 387+ 7CF0
 388+ 7CF0
# file closed: ./Universe/StarDust/StarRoutines.asm
 574  7CF0              ;    include "Universe/move_object-MVEIT.asm"
 575  7CF0              ;    include "./ModelRender/draw_object.asm"
 576  7CF0              ;    include "./ModelRender/draw_ship_point.asm"
 577  7CF0              ;    include "./ModelRender/drawforwards-LL17.asm"
 578  7CF0              ;    include "./ModelRender/drawforwards-LL17.asm"
 579  7CF0
 580  7CF0                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7CF0
   2+ 7CF0 00           memfillvalue		DB 0
   3+ 7CF1 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7CF5 7D
   4+ 7CF6 F0 7C        memfill_astrt  		DW memfillvalue
   5+ 7CF8 00 40        memfill_length 		DB $00,$40
   6+ 7CFA 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7CFD 00 00        memfill_bstrt  		DB $00,$00
   8+ 7CFF 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7D03              memfill_cmd_len	  	EQU $ - memfill
  10+ 7D03
  11+ 7D03              memfill_dma:
  12+ 7D03              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7D03              .set_fill_value:
  14+ 7D03 32 F0 7C     	ld 		(memfillvalue),a
  15+ 7D06              .set_target:
  16+ 7D06 22 FD 7C     	ld		(memfill_bstrt),hl
  17+ 7D09              .set_length:
  18+ 7D09 ED 53 F8 7C  	ld		(memfill_length),de
  19+ 7D0D              .write_dma:
  20+ 7D0D 21 F1 7C     	ld 		hl, memfill
  21+ 7D10 06 12        	ld 		b, memfill_cmd_len
  22+ 7D12 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7D14 ED B3        	otir
  24+ 7D16 C9           	ret
  25+ 7D17
# file closed: ./Hardware/memfill_dma.asm
 581  7D17                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7D17
   2+ 7D17 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7D1B 7D
   3+ 7D1C 00 00        memcopy_astrt  		DB $00,$00
   4+ 7D1E 00 40        memcopy_length 		DB $00,$40
   5+ 7D20 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7D23 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7D25 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7D29              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7D29
  10+ 7D29              memcopy_dma:
  11+ 7D29              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7D29              .set_target:
  13+ 7D29 22 23 7D     	ld		(memcopy_bstrt),hl
  14+ 7D2C              .set_source:
  15+ 7D2C ED 53 1C 7D  	ld		(memcopy_astrt),de
  16+ 7D30              .set_length:
  17+ 7D30 ED 43 1E 7D  	ld		(memcopy_length),bc
  18+ 7D34              .write_dma:
  19+ 7D34 21 17 7D     	ld 		hl, memcopy
  20+ 7D37 06 12        	ld 		b, memcopy_cmd_len
  21+ 7D39 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7D3B ED B3        	otir
  23+ 7D3D C9           	ret
  24+ 7D3E
# file closed: ./Hardware/memcopy_dma.asm
 582  7D3E 00 00        XX12PVarQ			DW 0
 583  7D40 00 00        XX12PVarR			DW 0
 584  7D42 00 00        XX12PVarS			DW 0
 585  7D44 00 00        XX12PVarResult1		DW 0
 586  7D46 00 00        XX12PVarResult2		DW 0
 587  7D48 00 00        XX12PVarResult3		DW 0
 588  7D4A 00           XX12PVarSign2		DB 0
 589  7D4B 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 590  7D4C 00           XX12PVarSign3		DB 0
 591  7D4D                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 7D4D              ;
   2+ 7D4D              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 7D4D              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 7D4D              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 7D4D              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 7D4D              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 7D4D              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 7D4D              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 7D4D              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 7D4D              ;
  11+ 7D4D              ; Keyboard
  12+ 7D4D              ;
  13+ 7D4D              ;   0      1       2       3       4       5        6       7       8       9
  14+ 7D4D              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 7D4D              ;   10     11      12      13      14      15       16      17      18      19
  16+ 7D4D              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 7D4D              ;   20     21      22      23      24      25       26      27      28      29
  18+ 7D4D              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 7D4D              ;   30     31      32      33      34      35       36      37      38      39
  20+ 7D4D              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 7D4D              ;
  22+ 7D4D              ; ZX Spectrum Next Compound keys
  23+ 7D4D              ;   40     41       42       43      44      45       46       47
  24+ 7D4D              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ 7D4D              ;   48       49      50       51         52          53       54      55
  26+ 7D4D              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ 7D4D              ; Default map
  28+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 7D4D              ;   0          1           2             3              4           5           6           7           8           9
  30+ 7D4D              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ 7D4D              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ 7D4D              ;                                                                                                       Find System
  33+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ 7D4D              ;   10         11          12            13             14          15          16          17          18          19
  35+ 7D4D              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ 7D4D              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 7D4D              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ 7D4D              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ 7D4D              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ 7D4D              ;   PlanetData                                                      PauseGame   SaveGame
  42+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ 7D4D              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ 7D4D              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ 7D4D              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ 7D4D              ;              ResumeGame                WarpJump
  47+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ 7D4D              ;   40         41          42            43             44          45          46          47          48          49
  49+ 7D4D              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ 7D4D              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ 7D4D              ;
  52+ 7D4D              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ 7D4D              ;   50         51          52            53             54          55
  54+ 7D4D              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ 7D4D              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ 7D4D              ;
  57+ 7D4D
  58+ 7D4D              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ 7D4D
  60+ 7D4D              c_Pressed_Front         equ 0  * 2
  61+ 7D4D              c_Pressed_Aft           equ 1  * 2
  62+ 7D4D              c_Pressed_Left          equ 2  * 2
  63+ 7D4D              c_Pressed_Right         equ 3  * 2
  64+ 7D4D              c_Pressed_RollLeft      equ 4  * 2
  65+ 7D4D              c_Pressed_RollRight     equ 5  * 2
  66+ 7D4D              c_Pressed_Dive          equ 6  * 2
  67+ 7D4D              c_Pressed_Climb         equ 7  * 2
  68+ 7D4D              c_Pressed_Accellerate   equ 8  * 2
  69+ 7D4D              c_Pressed_Decellerate   equ 9  * 2
  70+ 7D4D              c_Pressed_FireLaser     equ 10 * 2
  71+ 7D4D              c_Pressed_TargetMissle  equ 11 * 2
  72+ 7D4D              c_Pressed_FireMissile   equ 12 * 2
  73+ 7D4D              c_Pressed_UnarmMissile  equ 13 * 2
  74+ 7D4D              c_Pressed_ECM           equ 14 * 2
  75+ 7D4D              c_Pressed_EnergyBomb    equ 15 * 2
  76+ 7D4D              c_Pressed_EscapePod     equ 16 * 2
  77+ 7D4D              c_Pressed_DockingComp   equ 17 * 2
  78+ 7D4D              c_Pressed_Hyperspace    equ 18 * 2
  79+ 7D4D              c_Pressed_Distance      equ 19 * 2
  80+ 7D4D              c_Pressed_HomeCursor    equ 20 * 2
  81+ 7D4D              c_Pressed_Launch        equ 21 * 2
  82+ 7D4D              c_Pressed_BuyCargo      equ 22 * 2
  83+ 7D4D              c_Pressed_SellCargo     equ 23 * 2
  84+ 7D4D              c_Pressed_Equip         equ 24 * 2
  85+ 7D4D              c_Pressed_GalacticChrt  equ 25 * 2
  86+ 7D4D              c_Pressed_LocalChart    equ 26 * 2
  87+ 7D4D              c_Pressed_MarketPrices  equ 27 * 2
  88+ 7D4D              c_Pressed_Status        equ 28 * 2
  89+ 7D4D              c_Pressed_Inventory     equ 29 * 2
  90+ 7D4D              c_Pressed_GameSkip      equ 30 * 2
  91+ 7D4D              c_Pressed_Save          equ 31 * 2
  92+ 7D4D              c_Pressed_Freeze        equ 32 * 2
  93+ 7D4D              c_Pressed_Resume        equ 33 * 2
  94+ 7D4D              c_Pressed_Recentre      equ 34 * 2
  95+ 7D4D              c_Pressed_Quit          equ 35 * 2
  96+ 7D4D              c_Pressed_PlanetData    equ 36 * 2
  97+ 7D4D              c_Pressed_CursorUp      equ 37 * 2
  98+ 7D4D              c_Pressed_CursorDown    equ 38 * 2
  99+ 7D4D              c_Pressed_Find          equ 39 * 2
 100+ 7D4D              c_Pressed_Yes           equ 40 * 2
 101+ 7D4D              c_Pressed_No            equ 41 * 2
 102+ 7D4D              c_Pressed_Warp          equ 42 * 2
 103+ 7D4D              c_Pressed_ExtMarket     equ 43 * 2
 104+ 7D4D              c_Pressed_ExtEquip      equ 44 * 2
 105+ 7D4D              c_Pressed_ExtPlanet     equ 45 * 2
 106+ 7D4D              c_Pressed_ExtNearest    equ 46 * 2
 107+ 7D4D              c_Pressed_ExtCurUp      equ 47 * 2
 108+ 7D4D              c_Pressed_ExtCurDown    equ 48 * 2
 109+ 7D4D              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ 7D4D              c_Pressed_ExtCurRight   equ 50 * 2
 111+ 7D4D              c_Pressed_ExtDelete     equ 51 * 2
 112+ 7D4D              c_Pressed_ExtFindSystem equ 52 * 2
 113+ 7D4D              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ 7D4D              c_Pressed_ExtInventory  equ 54 * 2
 115+ 7D4D              c_Pressed_ExtStatus     equ 55 * 2
 116+ 7D4D              c_Pressed_ExtGlactic    equ 56 * 2
 117+ 7D4D              c_Pressed_ExtLocal      equ 57 * 2
 118+ 7D4D              c_Pressed_ExtSystemJump equ 58 * 2
 119+ 7D4D
 120+ 7D4D              ; half row 1
 121+ 7D4D              VK_CAPS  				equ 0
 122+ 7D4D              VK_Z  					equ 1
 123+ 7D4D              VK_X  					equ 2
 124+ 7D4D              VK_C  					equ 3
 125+ 7D4D              VK_V  					equ 4
 126+ 7D4D              ; half row 2
 127+ 7D4D              VK_A  					equ 5
 128+ 7D4D              VK_S  					equ 6
 129+ 7D4D              VK_D  					equ 7
 130+ 7D4D              VK_F					equ 8
 131+ 7D4D              VK_G  					equ 9
 132+ 7D4D              ; half row 3
 133+ 7D4D              VK_Q  					equ 10
 134+ 7D4D              VK_W  					equ 11
 135+ 7D4D              VK_E  					equ 12
 136+ 7D4D              VK_R  					equ 13
 137+ 7D4D              VK_T  					equ 14
 138+ 7D4D              ; half row 4
 139+ 7D4D              VK_1  					equ 15
 140+ 7D4D              VK_2  					equ 16
 141+ 7D4D              VK_3  					equ 17
 142+ 7D4D              VK_4  					equ 18
 143+ 7D4D              VK_5  					equ 19
 144+ 7D4D              ; half row 5
 145+ 7D4D              VK_0 					equ 20
 146+ 7D4D              VK_9 					equ 21
 147+ 7D4D              VK_8 					equ 22
 148+ 7D4D              VK_7 					equ 23
 149+ 7D4D              VK_6 					equ 24
 150+ 7D4D              ; half row 6
 151+ 7D4D              VK_P  					equ 25
 152+ 7D4D              VK_O  					equ 26
 153+ 7D4D              VK_I  					equ 27
 154+ 7D4D              VK_U  					equ 28
 155+ 7D4D              VK_Y  					equ 29
 156+ 7D4D              ; half row 7
 157+ 7D4D              VK_ENTER 				equ 30
 158+ 7D4D              VK_L  					equ 31
 159+ 7D4D              VK_K  					equ 32
 160+ 7D4D              VK_J  					equ 33
 161+ 7D4D              VK_H  					equ 34
 162+ 7D4D              ; half row 8
 163+ 7D4D              VK_SPACE 				equ 35
 164+ 7D4D              VK_SYM  				equ 36
 165+ 7D4D              VK_M  					equ 37
 166+ 7D4D              VK_N  					equ 38
 167+ 7D4D              VK_B  					equ 39
 168+ 7D4D              ; Extended Group B0
 169+ 7D4D              VK_SEMI                 equ 40
 170+ 7D4D              VK_QUOTE                equ 41
 171+ 7D4D              VK_COMMA                equ 42
 172+ 7D4D              VK_STOP                 equ 43
 173+ 7D4D              VK_UP                   equ 44
 174+ 7D4D              VK_DOWN                 equ 45
 175+ 7D4D              VK_LEFT                 equ 46
 176+ 7D4D              VK_RIGHT                equ 47
 177+ 7D4D              ; Extended Group B1
 178+ 7D4D              VK_DELETE               equ 48
 179+ 7D4D              VK_EDIT                 equ 49
 180+ 7D4D              VK_BREAK                equ 50
 181+ 7D4D              VK_INV_VID              equ 51
 182+ 7D4D              VK_TRUE_VID             equ 52
 183+ 7D4D              VK_GRAPH                equ 53
 184+ 7D4D              VK_EXTCAPS              equ 54
 185+ 7D4D              VK_EXTEND               equ 55
 186+ 7D4D              ;KeyboardMapping
 187+ 7D4D              KeyCode_Front        	equ VK_1
 188+ 7D4D              KeyCode_Aft          	equ VK_2
 189+ 7D4D              KeyCode_Left         	equ VK_3
 190+ 7D4D              KeyCode_Right        	equ VK_4
 191+ 7D4D              KeyCode_RollLeft     	equ VK_O
 192+ 7D4D              KeyCode_RollRight    	equ VK_P
 193+ 7D4D              KeyCode_Dive         	equ VK_Q
 194+ 7D4D              KeyCode_Climb        	equ VK_A
 195+ 7D4D              KeyCode_Accellerate  	equ VK_W
 196+ 7D4D              KeyCode_Decellerate  	equ VK_S
 197+ 7D4D              KeyCode_FireLaser    	equ VK_SPACE
 198+ 7D4D              KeyCode_TargetMissle 	equ VK_T
 199+ 7D4D              KeyCode_FireMissile  	equ VK_STOP
 200+ 7D4D              KeyCode_Find        	equ VK_F
 201+ 7D4D              KeyCode_UnarmMissile 	equ VK_R
 202+ 7D4D              KeyCode_ECM          	equ VK_E
 203+ 7D4D              KeyCode_EnergyBomb   	equ VK_U
 204+ 7D4D              KeyCode_EscapePod    	equ VK_CAPS
 205+ 7D4D              KeyCode_DockingComp  	equ VK_N
 206+ 7D4D              KeyCode_Hyperspace   	equ VK_H
 207+ 7D4D              KeyCode_Distance     	equ VK_J
 208+ 7D4D              KeyCode_HomeCursor   	equ VK_G
 209+ 7D4D              KeyCode_Launch       	equ VK_L
 210+ 7D4D              KeyCode_BuyCargo     	equ VK_B
 211+ 7D4D              KeyCode_SellCargo    	equ VK_V
 212+ 7D4D              KeyCode_Equip        	equ VK_C
 213+ 7D4D              KeyCode_GalacticChrt 	equ VK_5
 214+ 7D4D              KeyCode_LocalChart   	equ VK_6
 215+ 7D4D              KeyCode_MarketPrices 	equ VK_7
 216+ 7D4D              KeyCode_Status       	equ VK_8
 217+ 7D4D              KeyCode_Inventory    	equ VK_9
 218+ 7D4D              KeyCode_GameSkip     	equ VK_Z
 219+ 7D4D              KeyCode_Save         	equ VK_O
 220+ 7D4D              KeyCode_Freeze       	equ VK_B
 221+ 7D4D              KeyCode_Resume       	equ VK_L
 222+ 7D4D              KeyCode_Recentre     	equ VK_STOP
 223+ 7D4D              KeyCode_Quit         	equ VK_Y
 224+ 7D4D              KeyCode_PlanetData   	equ VK_0
 225+ 7D4D              KeyCode_CursorUp        equ VK_Q
 226+ 7D4D              KeyCode_CursorDown      equ VK_A
 227+ 7D4D              KeyCode_PressedYes      equ VK_Y
 228+ 7D4D              KeyCode_PressedNo       equ VK_N
 229+ 7D4D              KeyCode_Warp            equ VK_J
 230+ 7D4D              KeyCode_ExtMarket       equ VK_SEMI
 231+ 7D4D              KeyCode_ExtEquip        equ VK_QUOTE
 232+ 7D4D              KeyCode_ExtPlanet       equ VK_COMMA
 233+ 7D4D              KeyCode_ExtNearest      equ VK_STOP
 234+ 7D4D              KeyCode_ExtCurUp        equ VK_UP
 235+ 7D4D              KeyCode_ExtCurDown      equ VK_DOWN
 236+ 7D4D              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ 7D4D              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ 7D4D              KeyCode_ExtDelete       equ VK_DELETE
 239+ 7D4D              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ 7D4D              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ 7D4D              KeyCode_ExtInventory    equ VK_INV_VID
 242+ 7D4D              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ 7D4D              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ 7D4D              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ 7D4D              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ 7D4D
 247+ 7D4D 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ 7D84              c_KeyBoardLen 			equ $ - Keys
 249+ 7D84 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ 7D8E FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ 7D92 EF DF BF 7F
 251+ 7D96              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ 7D96              ; of updating this table with the respective location to look up
 253+ 7D96              ; key list sequence is in table above
 254+ 7D96 5C 7D 5D 7D  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ 7D9A 5E 7D 5F 7D
 254+ 7D9E 67 7D
 255+ 7DA0 66 7D 57 7D                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ 7DA4 52 7D 58 7D
 255+ 7DA8 53 7D
 256+ 7DAA 70 7D 5B 7D                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ 7DAE 78 7D 5A 7D
 256+ 7DB2 59 7D
 257+ 7DB4 69 7D 4D 7D                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ 7DB8 73 7D 6F 7D
 257+ 7DBC 6E 7D
 258+ 7DBE 56 7D 6C 7D                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ 7DC2 74 7D 51 7D
 258+ 7DC6 50 7D
 259+ 7DC8 60 7D 65 7D                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ 7DCC 64 7D 63 7D
 259+ 7DD0 62 7D
 260+ 7DD2 4E 7D 67 7D                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ 7DD6 74 7D 6C 7D
 260+ 7DDA 78 7D
 261+ 7DDC 6A 7D 61 7D                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ 7DE0 57 7D 52 7D
 261+ 7DE4 55 7D
 262+ 7DE6 6A 7D 73 7D                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ 7DEA 6E 7D 75 7D
 262+ 7DEE 76 7D
 263+ 7DF0 77 7D 78 7D                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ 7DF4 79 7D 7A 7D
 263+ 7DF8 7B 7D
 264+ 7DFA 7C 7D 7D 7D                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ 7DFE 7E 7D 7F 7D
 264+ 7E02 80 7D
 265+ 7E04 81 7D 82 7D                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ 7E08 83 7D 84 7D
 266+ 7E0C              s
 267+ 7E0C 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 267+ 7E10 56
 268+ 7E11 41 53 44 46                          DB "A","S","D","F","G"
 268+ 7E15 47
 269+ 7E16 51 57 45 52                          DB "Q","W","E","R","T"
 269+ 7E1A 54
 270+ 7E1B 31 32 33 34                          DB "1","2","3","4","5"
 270+ 7E1F 35
 271+ 7E20 30 39 38 37                          DB "0","9","8","7","6"
 271+ 7E24 36
 272+ 7E25 50 4F 49 55                          DB "P","O","I","U","Y"
 272+ 7E29 59
 273+ 7E2A 3E 4C 4B 4A                          DB ">","L","K","J","H"
 273+ 7E2E 48
 274+ 7E2F 20 5E 4D 4E                          DB " ","^","M","N","B"
 274+ 7E33 42
 275+ 7E34 3F 3F 3F 3F                          DB "?","?","?","?","?"  ; Extended keys
 275+ 7E38 3F
 276+ 7E39 3F 3F 3F 23                          DB "?","?","?","#","?"  ; delete key is marked as hash
 276+ 7E3D 3F
 277+ 7E3E 3F 3F 3F 3F                          DB "?","?","?","?","?"
 277+ 7E42 3F
 278+ 7E43 3F                                   DB "?"
 279+ 7E44              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 280+ 7E44              ; for the raw key press status
 281+ 7E44              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 282+ 7E44              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 283+ 7E44              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 284+ 7E44              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 285+ 7E44              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 286+ 7E44              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 287+ 7E44              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 288+ 7E44              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 289+ 7E44              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 290+ 7E44              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 291+ 7E44              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 292+ 7E44              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 293+ 7E44              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 294+ 7E44              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 295+ 7E44              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 296+ 7E44              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 297+ 7E44              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 298+ 7E44              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 299+ 7E44              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 300+ 7E44              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 301+ 7E44              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 302+ 7E44              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 303+ 7E44              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 304+ 7E44              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 305+ 7E44              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 306+ 7E44              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 307+ 7E44              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 308+ 7E44              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 309+ 7E44              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 310+ 7E44              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 311+ 7E44              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 312+ 7E44              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 313+ 7E44              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 314+ 7E44              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 315+ 7E44              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 316+ 7E44              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 317+ 7E44              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 318+ 7E44              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 319+ 7E44              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 320+ 7E44              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 321+ 7E44              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 322+ 7E44
 323+ 7E44
 324+ 7E44              MIsKeyPressed:          MACRO   keyaddress, misstarget
 325+ 7E44 ~                                    ld      hl,(keyaddress)
 326+ 7E44 ~                                    ld      a,(hl)
 327+ 7E44 ~                                    JumpIfAIsZero   misstarget
 328+ 7E44                                      ENDM
 329+ 7E44
 330+ 7E44 21 4D 7D     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 331+ 7E47 11 37 00                             ld		de, c_KeyBoardLen               ;
 332+ 7E4A 3E 00                                ld		a,0                             ;
 333+ 7E4C CD 03 7D                             call	memfill_dma                     ;
 334+ 7E4F C9                                   ret                                     ;
 335+ 7E50
 336+ 7E50
 337+ 7E50
 338+ 7E50 DD 21 84 7D  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 339+ 7E54 21 8E 7D                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 340+ 7E57 0E 08                                ld		c,8                             ; 8 ports to ready
 341+ 7E59 11 4D 7D                             ld      de,Keys                         ; ix = table of key states from raw read
 342+ 7E5C 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 343+ 7E5D DB FE                                in		a,($FE)							; read port to a
 344+ 7E5F DD 77 00                             ld      (ix+0),a                        ; save raw scan
 345+ 7E62 DD 23                                inc     ix
 346+ 7E64 23                                   inc		hl                              ; and ready for next read
 347+ 7E65 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 348+ 7E67 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 349+ 7E68 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 350+ 7E6A FD 6F                                ld      iyl,a
 351+ 7E6C                                      ZeroA
 351+ 7E6C AF          >                        xor a
 352+ 7E6D C3 7A 7E                             jp      .SetKey
 353+ 7E70 20 0B                                jr		nz,.SkipKeySet
 354+ 7E72 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 355+ 7E74 1A                                   ld      a,(de)                          ; get current keystate
 356+ 7E75 FE 02                                cp      2
 357+ 7E77 28 02                                jr      z,.AlreadyHeld
 358+ 7E79 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 359+ 7E7A 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 360+ 7E7B FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 361+ 7E7D 13           .SkipKeySet:	        inc		de								; move to next key
 362+ 7E7E 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 363+ 7E80 0D                                   dec     c                               ; thats one row of bits all processed
 364+ 7E81 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 365+ 7E83              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 365+ 7E83 01 3B 24    >            ld bc,$243B
 365+ 7E86 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 365+ 7E88 ED 79       >            out (c),a
 365+ 7E8A 04          >            inc b
 365+ 7E8B ED 78       >            in a,(c)
 366+ 7E8D 32 8C 7D                             ld      (RawKeys+8),a                      ; save to extended slot
 367+ 7E90 06 08                                ld      b,8
 368+ 7E92 21 75 7D                             ld      hl,Keys + VK_SEMI
 369+ 7E95 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 370+ 7E96 30 04                                jr      nc,.SetExtend0KeyPressed
 371+ 7E98              .Extend0NotPressed:     ZeroA
 371+ 7E98 AF          >                        xor a
 372+ 7E99 C3 A2 7E                             jp      .SetExtend0Key
 373+ 7E9C 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 374+ 7E9D FE 02                                cp      2
 375+ 7E9F 28 02                                jr      z,.Extend0AlreadyHeld
 376+ 7EA1 3C                                   inc     a
 377+ 7EA2 77           .SetExtend0Key:         ld      (hl),a
 378+ 7EA3 23           .Extend0AlreadyHeld:    inc     hl
 379+ 7EA4 10 EF                                djnz    .ProcessExtend0
 380+ 7EA6              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 380+ 7EA6 01 3B 24    >            ld bc,$243B
 380+ 7EA9 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 380+ 7EAB ED 79       >            out (c),a
 380+ 7EAD 04          >            inc b
 380+ 7EAE ED 78       >            in a,(c)
 381+ 7EB0 32 8D 7D                             ld      (RawKeys+9),a                      ; save to extended slot
 382+ 7EB3 06 08                                ld      b,8
 383+ 7EB5 21 7D 7D                             ld      hl,Keys + VK_DELETE
 384+ 7EB8 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 385+ 7EB9 30 04                                jr      nc,.SetExtend1KeyPressed
 386+ 7EBB              .Extend1NotPressed:     ZeroA
 386+ 7EBB AF          >                        xor a
 387+ 7EBC C3 C5 7E                             jp      .SetExtend1Key
 388+ 7EBF 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 389+ 7EC0 FE 02                                cp      2
 390+ 7EC2 28 02                                jr      z,.Extend1AlreadyHeld
 391+ 7EC4 3C                                   inc     a
 392+ 7EC5 77           .SetExtend1Key:         ld      (hl),a
 393+ 7EC6 23           .Extend1AlreadyHeld:    inc     hl
 394+ 7EC7 10 EF                                djnz    .ProcessExtend1
 395+ 7EC9 C9                                   ret
 396+ 7ECA
 397+ 7ECA
 398+ 7ECA
 399+ 7ECA              GetKeyStateAddressDE:   MACRO
 400+ 7ECA ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 401+ 7ECA ~                                    add     hl,a
 402+ 7ECA ~                                    ld      e,(hl)
 403+ 7ECA ~                                    inc     hl
 404+ 7ECA ~                                    ld      d,(hl)                          ; now de = address in keypress list
 405+ 7ECA                                      ENDM
 406+ 7ECA
 407+ 7ECA              GetKeyStateAddressHL:   MACRO
 408+ 7ECA ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 409+ 7ECA ~                                    add     hl,a
 410+ 7ECA ~                                    ld      a,(hl)
 411+ 7ECA ~                                    inc     hl
 412+ 7ECA ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 413+ 7ECA ~                                    ld      l,a
 414+ 7ECA                                      ENDM
 415+ 7ECA
 416+ 7ECA
 417+ 7ECA              ;;old debug codeCurrentX            DB 0
 418+ 7ECA              ;;old debug codeCurrentY            DB 0
 419+ 7ECA              ;;old debug code
 420+ 7ECA              ;;old debug codedisplayKeyStatus:       xor         a
 421+ 7ECA              ;;old debug code                        ld          (CurrentX),a
 422+ 7ECA              ;;old debug code                        ld          hl,RawKeys
 423+ 7ECA              ;;old debug code                        ld          a,(hl)
 424+ 7ECA              ;;old debug code                        and         %00011111
 425+ 7ECA              ;;old debug code                        ld          b,5
 426+ 7ECA              ;;old debug code.displayLoop:           push        bc,,hl
 427+ 7ECA              ;;old debug code                        rra
 428+ 7ECA              ;;old debug code                        jr          c,.displayNoPress
 429+ 7ECA              ;;old debug code.displayPress:          push        af
 430+ 7ECA              ;;old debug code                        ld          a,(CurrentX)
 431+ 7ECA              ;;old debug code                        ld          e,a
 432+ 7ECA              ;;old debug code                        ld          a,(CurrentY)
 433+ 7ECA              ;;old debug code                        ld          d,a
 434+ 7ECA              ;;old debug code                        ld          a,'*'
 435+ 7ECA              ;;old debug code                        MMUSelectLayer1
 436+ 7ECA              ;;old debug code                        call        l1_print_char
 437+ 7ECA              ;;old debug code                        ld          a,(CurrentX)
 438+ 7ECA              ;;old debug code                        add         a,8
 439+ 7ECA              ;;old debug code                        ld          (CurrentX),a
 440+ 7ECA              ;;old debug code                        pop         af
 441+ 7ECA              ;;old debug code                        pop         bc,,hl
 442+ 7ECA              ;;old debug code                        djnz        .displayLoop
 443+ 7ECA              ;;old debug code                        ret
 444+ 7ECA              ;;old debug code.displayNoPress:        push        af
 445+ 7ECA              ;;old debug code                        ld          a,(CurrentX)
 446+ 7ECA              ;;old debug code                        ld          e,a
 447+ 7ECA              ;;old debug code                        ld          a,(CurrentY)
 448+ 7ECA              ;;old debug code                        ld          d,a
 449+ 7ECA              ;;old debug code                        ld          a,'O'
 450+ 7ECA              ;;old debug code                        MMUSelectLayer1
 451+ 7ECA              ;;old debug code                        call        l1_print_char
 452+ 7ECA              ;;old debug code                        ld          a,(CurrentX)
 453+ 7ECA              ;;old debug code                        add         a,8
 454+ 7ECA              ;;old debug code                        ld          (CurrentX),a
 455+ 7ECA              ;;old debug code                        pop         af
 456+ 7ECA              ;;old debug code                        pop         bc,,hl
 457+ 7ECA              ;;old debug code                        djnz        .displayLoop
 458+ 7ECA              ;;old debug code                        ret
 459+ 7ECA              ;;old debug code
 460+ 7ECA              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 461+ 7ECA              ;;old debug code                        cp  0
 462+ 7ECA              ;;old debug code                        jr      z,.displayNoUp
 463+ 7ECA              ;;old debug code                        cp  1
 464+ 7ECA              ;;old debug code                        jr      z,.displayUp
 465+ 7ECA              ;;old debug code.displayHeld:           ld      de,8*15
 466+ 7ECA              ;;old debug code                        ld      a,"*"
 467+ 7ECA              ;;old debug code                        MMUSelectLayer1
 468+ 7ECA              ;;old debug code                        call        l1_print_char
 469+ 7ECA              ;;old debug code                        ret
 470+ 7ECA              ;;old debug code.displayUp:             ld      de,8*15
 471+ 7ECA              ;;old debug code                        ld      a,"+"
 472+ 7ECA              ;;old debug code                        MMUSelectLayer1
 473+ 7ECA              ;;old debug code                        call        l1_print_char
 474+ 7ECA              ;;old debug code                        ret
 475+ 7ECA              ;;old debug code.displayNoUp:             ld      de,8*15
 476+ 7ECA              ;;old debug code                        ld      a,"O"
 477+ 7ECA              ;;old debug code                        MMUSelectLayer1
 478+ 7ECA              ;;old debug code                        call        l1_print_char
 479+ 7ECA              ;;old debug code                        ret
 480+ 7ECA              ;;old debug code
 481+ 7ECA
 482+ 7ECA
 483+ 7ECA              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 484+ 7ECA              ; it will have to be let go to reset of 0 and scan again
 485+ 7ECA              ; Deprecated as not used as yet
 486+ 7ECA              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 487+ 7ECA              ;;;;;;                        push    hl
 488+ 7ECA              ;;;;;;.wait_loop:             call    scan_keyboard
 489+ 7ECA              ;;;;;;                        pop     hl                              ; get key address into hl
 490+ 7ECA              ;;;;;;                        push    hl
 491+ 7ECA              ;;;;;;                        ld      a,(hl)
 492+ 7ECA              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 493+ 7ECA              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 494+ 7ECA              ;;;;;;                        ret
 495+ 7ECA              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 496+ 7ECA              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 497+ 7ECA              ;;;;;;                        push    hl
 498+ 7ECA              ;;;;;;.wait_loop:             call    scan_keyboard
 499+ 7ECA              ;;;;;;                        pop     hl
 500+ 7ECA              ;;;;;;                        push    hl
 501+ 7ECA              ;;;;;;                        ld      a,(hl)
 502+ 7ECA              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 503+ 7ECA              ;;;;;;                        pop     hl
 504+ 7ECA              ;;;;;;                        ret
 505+ 7ECA
 506+ 7ECA              ; Gets the current keystate of the c_Pressed Key in a register
 507+ 7ECA              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 507+ 7ECA 21 96 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 507+ 7ECD ED 31       >                        add     hl,a
 507+ 7ECF 7E          >                        ld      a,(hl)
 507+ 7ED0 23          >                        inc     hl
 507+ 7ED1 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 507+ 7ED2 6F          >                        ld      l,a
 508+ 7ED3 7E                                   ld      a,(hl)                          ; a = keystate
 509+ 7ED4 C9                                   ret
 510+ 7ED5
 511+ 7ED5              ; sets they keystate of c pressed key in a register to 1 (pressed)
 512+ 7ED5              ; This will be used by auto dock
 513+ 7ED5              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 513+ 7ED5 21 96 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 513+ 7ED8 ED 31       >                        add     hl,a
 513+ 7EDA 7E          >                        ld      a,(hl)
 513+ 7EDB 23          >                        inc     hl
 513+ 7EDC 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 513+ 7EDD 6F          >                        ld      l,a
 514+ 7EDE 3E 01                                ld      a,1
 515+ 7EE0 77                                   ld      (hl),a
 516+ 7EE1 C9                                   ret
 517+ 7EE2
 518+ 7EE2              is_key_up_state:        GetKeyStateAddressHL
 518+ 7EE2 21 96 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 518+ 7EE5 ED 31       >                        add     hl,a
 518+ 7EE7 7E          >                        ld      a,(hl)
 518+ 7EE8 23          >                        inc     hl
 518+ 7EE9 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 518+ 7EEA 6F          >                        ld      l,a
 519+ 7EEB 7E                                   ld      a,(hl)
 520+ 7EEC FE 00                                cp      0
 521+ 7EEE C9                                   ret
 522+ 7EEF
 523+ 7EEF              ; returns z is set if c_ key is pressed
 524+ 7EEF              is_key_pressed:         GetKeyStateAddressHL
 524+ 7EEF 21 96 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 524+ 7EF2 ED 31       >                        add     hl,a
 524+ 7EF4 7E          >                        ld      a,(hl)
 524+ 7EF5 23          >                        inc     hl
 524+ 7EF6 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 524+ 7EF7 6F          >                        ld      l,a
 525+ 7EF8 7E                                   ld      a,(hl)                          ; a = keystate
 526+ 7EF9 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 527+ 7EFB C9                                   ret
 528+ 7EFC
 529+ 7EFC              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 530+ 7EFC              is_key_held:            GetKeyStateAddressHL
 530+ 7EFC 21 96 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 530+ 7EFF ED 31       >                        add     hl,a
 530+ 7F01 7E          >                        ld      a,(hl)
 530+ 7F02 23          >                        inc     hl
 530+ 7F03 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 530+ 7F04 6F          >                        ld      l,a
 531+ 7F05 7E                                   ld      a,(hl)                          ; a = keystate
 532+ 7F06 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 533+ 7F08 C9                                   ret
 534+ 7F09
 535+ 7F09              ; checks to see if any key is pressed in the key table
 536+ 7F09 21 4D 7D     is_any_key_pressed:     ld      hl,Keys
 537+ 7F0C 01 28 00                             ld      bc,40
 538+ 7F0F 3E 01                                ld      a,1
 539+ 7F11 ED B1                                cpir                                    ; search for the value 1
 540+ 7F13 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 541+ 7F15                                      SetAFalse
 541+ 7F15 3E FF       >                        ld      a,$FF
 542+ 7F17 C9                                   ret
 543+ 7F18 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 544+ 7F1A 91                                   sub     c                               ; so a = 40 - c to get to result
 545+ 7F1B C9                                   ret
 546+ 7F1C
 547+ 7F1C 21 4D 7D     is_any_key_held:        ld      hl,Keys
 548+ 7F1F 06 28                                ld      b,40
 549+ 7F21 0E 00                                ld      c,0
 550+ 7F23 7E           .KeyReadLoop:           ld      a,(hl)
 551+ 7F24 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 552+ 7F26 C2 30 7F                             jp      nz,.KeyPressed
 553+ 7F29 23                                   inc     hl
 554+ 7F2A 0C                                   inc     c
 555+ 7F2B 10 F6                                djnz    .KeyReadLoop
 556+ 7F2D                                      SetAFalse
 556+ 7F2D 3E FF       >                        ld      a,$FF
 557+ 7F2F C9                                   ret
 558+ 7F30 79           .KeyPressed:            ld      a,c
 559+ 7F31 C9                                   ret
 560+ 7F32
 561+ 7F32
 562+ 7F32 21 8E 7D     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 563+ 7F35 06 08                                ld		b,8                             ; 8 ports to ready
 564+ 7F37 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 565+ 7F38 DB FE                                in		a,($FE)							; read port to a
 566+ 7F3A E6 1F                                and     %00011111
 567+ 7F3C FE 1F                                cp      %00011111
 568+ 7F3E 20 F2                                jr      nz ,WaitForNoKey
 569+ 7F40 23                                   inc		hl                              ; and ready for next read
 570+ 7F41 10 F4                                djnz    .PortReadLoop
 571+ 7F43 C9                                   ret
 572+ 7F44
 573+ 7F44 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 574+ 7F48 CD 32 7F                             call    WaitForNoKey
 575+ 7F4B 21 8E 7D     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 576+ 7F4E 06 08                                ld		b,8                             ; 8 ports to ready
 577+ 7F50 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 578+ 7F51 DB FE                                in		a,($FE)							; read port to a
 579+ 7F53 E6 1F                                and     %00011111
 580+ 7F55 FE 1F                                cp      %00011111
 581+ 7F57 C2 61 7F                             jp      nz,.WaitComplete
 582+ 7F5A C0                                   ret     nz
 583+ 7F5B 23                                   inc		hl                              ; and ready for next read
 584+ 7F5C 10 F2                                djnz    .PortReadLoop
 585+ 7F5E C3 4B 7F                             jp      .waitKeyLoop
 586+ 7F61 E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 587+ 7F65 C9                                   ret
 588+ 7F66
 589+ 7F66
 590+ 7F66 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 591+ 7F84 00                                   DB  0               ; end of string marker as a safety
 592+ 7F85 00           InputCursor             DB  0
 593+ 7F86 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 594+ 7F87 00           InputChanged            DB  0
 595+ 7F88              InputLimit              EQU 20
 596+ 7F88
 597+ 7F88 21 66 7F     keyboard_copy_input_to_de:  ld      hl,InputString
 598+ 7F8B 3A 85 7F                                 ld      a,(InputCursor)
 599+ 7F8E FE 00                                    cp      0
 600+ 7F90 28 05                                    jr      z,.NoString
 601+ 7F92 4F                                       ld      c,a
 602+ 7F93 06 00                                    ld      b,0
 603+ 7F95 ED B0                                    ldir
 604+ 7F97 3E 00        .NoString                   ld      a,0
 605+ 7F99 12                                       ld      (de),a
 606+ 7F9A C9                                       ret
 607+ 7F9B
 608+ 7F9B AF           initInputText:          xor     a
 609+ 7F9C 32 85 7F                             ld      (InputCursor),a
 610+ 7F9F                                      SetMemFalse EnterPressed
 610+ 7F9F 3E FF       >                        ld      a,$FF
 610+ 7FA1 32 86 7F    >                        ld      (EnterPressed),a
 611+ 7FA4                                      SetMemFalse InputChanged
 611+ 7FA4 3E FF       >                        ld      a,$FF
 611+ 7FA6 32 87 7F    >                        ld      (InputChanged),a
 612+ 7FA9 21 66 7F                             ld      hl,InputString
 613+ 7FAC 06 1E                                ld      b,30
 614+ 7FAE 77           .wipeloop:              ld      (hl),a
 615+ 7FAF 23                                   inc     hl
 616+ 7FB0 10 FC                                djnz    .wipeloop
 617+ 7FB2 C9                                   ret
 618+ 7FB3
 619+ 7FB3              InputName:              SetMemFalse InputChanged
 619+ 7FB3 3E FF       >                        ld      a,$FF
 619+ 7FB5 32 87 7F    >                        ld      (InputChanged),a
 620+ 7FB8 CD 09 7F                             call    is_any_key_pressed
 621+ 7FBB FE FF                                cp      $FF
 622+ 7FBD C8                                   ret     z
 623+ 7FBE 4F           .KeyPressed:            ld      c,a
 624+ 7FBF 3A 85 7F                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 625+ 7FC2 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 626+ 7FC4 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 627+ 7FC6 21 0C 7E                             ld      hl,ASCII_Map
 628+ 7FC9 79                                   ld      a,c
 629+ 7FCA ED 31                                add     hl,a
 630+ 7FCC 7E                                   ld      a,(hl)
 631+ 7FCD FE 41                                cp      "A"
 632+ 7FCF 30 09                                jr      nc,.AlphaPressed
 633+ 7FD1              ; CAPS and Symbol act as delete for now
 634+ 7FD1 FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 635+ 7FD3 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 636+ 7FD5 FE 3E                                cp      ">"         ; ENTER
 637+ 7FD7 28 17                                jr      z,.EnterPressed
 638+ 7FD9 C9                                   ret
 639+ 7FDA 47           .AlphaPressed:          ld      b,a
 640+ 7FDB 3A 85 7F                             ld      a,(InputCursor)
 641+ 7FDE 4F                                   ld      c,a
 642+ 7FDF 21 66 7F                             ld      hl,InputString
 643+ 7FE2 ED 31                                add     hl,a
 644+ 7FE4 78                                   ld      a,b
 645+ 7FE5 70                                   ld      (hl),b
 646+ 7FE6 79                                   ld      a,c
 647+ 7FE7 21 85 7F                             ld      hl,InputCursor
 648+ 7FEA 34                                   inc     (hl)
 649+ 7FEB                                      SetMemTrue InputChanged
 649+ 7FEB AF          >                        xor     a
 649+ 7FEC 32 87 7F    >                        ld      (InputChanged),a
 650+ 7FEF C9                                   ret
 651+ 7FF0 3A 85 7F     .EnterPressed:          ld      a,(InputCursor)
 652+ 7FF3 21 66 7F                             ld      hl,InputString
 653+ 7FF6 ED 31                                add     hl,a
 654+ 7FF8                                      ZeroA
 654+ 7FF8 AF          >                        xor a
 655+ 7FF9 77                                   ld      (hl),a
 656+ 7FFA                                      SetMemTrue EnterPressed
 656+ 7FFA AF          >                        xor     a
 656+ 7FFB 32 86 7F    >                        ld      (EnterPressed),a
 657+ 7FFE                                      SetMemTrue InputChanged
 657+ 7FFE AF          >                        xor     a
 657+ 7FFF 32 87 7F    >                        ld      (InputChanged),a
 658+ 8002 CD 44 7E                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 659+ 8005 C9                                   ret
 660+ 8006 3A 85 7F     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 661+ 8009 FE 00                                cp      0                       ; if input is zero length then can not delete
 662+ 800B C8                                   ret     z
 663+ 800C 3D                                   dec     a                       ; move back one and update cursor pos
 664+ 800D 32 85 7F                             ld      (InputCursor),a         ;
 665+ 8010 21 66 7F                             ld      hl,InputString          ; now update end of line to null
 666+ 8013 ED 31                                add     hl,a                    ; .
 667+ 8015                                      ZeroA                           ; .
 667+ 8015 AF          >                        xor a
 668+ 8016 77                                   ld      (hl),a                  ; .
 669+ 8017                                      SetMemTrue InputChanged
 669+ 8017 AF          >                        xor     a
 669+ 8018 32 87 7F    >                        ld      (InputChanged),a
 670+ 801B C9                                   ret
 671+ 801C
 672+ 801C              TargetMissileTest:      AnyMissilesLeft
 672+ 801C 3A 96 82    >                        ld      a,(NbrMissiles)
 672+ 801F A7          >                        and     a
 673+ 8020                                      JumpIfZero      .ClearTargetting
 673+ 8020 CA 37 80    >                        jp	z,.ClearTargetting
 674+ 8023                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 674+ 8023 3A 26 85    >                        ld      a,(MissileTargettingFlag)
 674+ 8026 E6 80       >                        and     $80
 675+ 8028 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 676+ 8029 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 677+ 802B CD EF 7E                             call            is_key_pressed              ; .
 678+ 802E C0                                   ret             nz                          ; .
 679+ 802F 3A 26 85     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 680+ 8032                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 680+ 8032 FE FF       >                        cp     StageMissileNotTargeting
 680+ 8034 CA 3D 80    >                        jp      z,.SetTargetting
 681+ 8037              .ClearTargetting:       ClearMissileTargetting
 681+ 8037 3E FF       >                        ld      a,StageMissileNotTargeting
 681+ 8039 32 26 85    >                        ld      (MissileTargettingFlag),a
 682+ 803C C9                                   ret
 683+ 803D              .SetTargetting:         SetMissileTargetting
 683+ 803D 3E FE       >                        ld      a,StageMissileTargeting
 683+ 803F 32 26 85    >                        ld      (MissileTargettingFlag),a
 684+ 8042 C9                                   ret
 685+ 8043
 686+ 8043 AF           MovementKeyTest:        xor     a
 687+ 8044 32 CD 83                             ld      (CursorKeysPressed),a
 688+ 8047 3A 00 82                             ld      a,(MenuIdMax)
 689+ 804A E6 FC                                and     $FC
 690+ 804C 20 26                                jr      nz,CursorKeys
 691+ 804E 2A A4 7D     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 692+ 8051 7E                                   ld      a,(hl)
 693+ 8052                                      JumpIfAIsZero ScanDiveKey
 693+ 8052 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 693+ 8053 CA 61 80    >                        jp	    z, ScanDiveKey
 694+ 8056 3A CD 83                             ld      a,(CursorKeysPressed)
 695+ 8059 F6 80                                or      CursorClimb
 696+ 805B 32 CD 83                             ld      (CursorKeysPressed),a
 697+ 805E C3 97 80                             jp      ScanLeftKey
 698+ 8061 2A A2 7D     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 699+ 8064 7E                                   ld      a,(hl)
 700+ 8065                                      JumpIfAIsZero ScanLeftKey
 700+ 8065 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 700+ 8066 CA 97 80    >                        jp	    z, ScanLeftKey
 701+ 8069 3A CD 83                             ld      a,(CursorKeysPressed)
 702+ 806C F6 40                                or      CursorDive
 703+ 806E 32 CD 83                             ld      (CursorKeysPressed),a
 704+ 8071 C3 97 80                             jp      ScanLeftKey
 705+ 8074 2A E0 7D     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 706+ 8077 7E                                   ld      a,(hl)
 707+ 8078                                      JumpIfAIsZero ScanCursorDownKey
 707+ 8078 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 707+ 8079 CA 87 80    >                        jp	    z, ScanCursorDownKey
 708+ 807C 3A CD 83                             ld      a,(CursorKeysPressed)
 709+ 807F F6 80                                or      CursorClimb
 710+ 8081 32 CD 83                             ld      (CursorKeysPressed),a
 711+ 8084 C3 97 80                             jp      ScanLeftKey
 712+ 8087 2A E2 7D     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 713+ 808A 7E                                   ld      a,(hl)
 714+ 808B                                      JumpIfAIsZero ScanLeftKey
 714+ 808B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 714+ 808C CA 97 80    >                        jp	    z, ScanLeftKey
 715+ 808F 3A CD 83                             ld      a,(CursorKeysPressed)
 716+ 8092 F6 40                                or      CursorDive
 717+ 8094 32 CD 83                             ld      (CursorKeysPressed),a
 718+ 8097 2A 9E 7D     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 719+ 809A 7E                                   ld      a,(hl)
 720+ 809B                                      JumpIfAIsZero ScanRightKey
 720+ 809B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 720+ 809C CA A8 80    >                        jp	    z, ScanRightKey
 721+ 809F 3A CD 83                             ld      a,(CursorKeysPressed)
 722+ 80A2 F6 20                                or      CursorLeft
 723+ 80A4 32 CD 83                             ld      (CursorKeysPressed),a
 724+ 80A7 C9                                   ret
 725+ 80A8 2A A0 7D     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 726+ 80AB 7E                                   ld      a,(hl)
 727+ 80AC                                      JumpIfAIsZero ScanHomeKey
 727+ 80AC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 727+ 80AD CA B9 80    >                        jp	    z, ScanHomeKey
 728+ 80B0 3A CD 83                             ld      a,(CursorKeysPressed)
 729+ 80B3 F6 10                                or      CursorRight
 730+ 80B5 32 CD 83                             ld      (CursorKeysPressed),a
 731+ 80B8 C9                                   ret
 732+ 80B9 2A BE 7D     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 733+ 80BC 7E                                   ld      a,(hl)
 734+ 80BD                                      JumpIfAIsZero ScanRecentreKey
 734+ 80BD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 734+ 80BE CA CA 80    >                        jp	    z, ScanRecentreKey
 735+ 80C1 3A CD 83                             ld      a,(CursorKeysPressed)
 736+ 80C4 F6 08                                or      CursorHome
 737+ 80C6 32 CD 83                             ld      (CursorKeysPressed),a
 738+ 80C9 C9                                   ret
 739+ 80CA 2A DA 7D     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 740+ 80CD 7E                                   ld      a,(hl)
 741+ 80CE                                      ReturnIfAIsZero
 741+ 80CE A7          >                        and     a
 741+ 80CF C8          >                        ret     z
 742+ 80D0 3A CD 83                             ld      a,(CursorKeysPressed)
 743+ 80D3 F6 04                                or      CursorRecenter
 744+ 80D5 32 CD 83                             ld      (CursorKeysPressed),a
 745+ 80D8 C9                                   ret
 746+ 80D9
 747+ 80D9
# file closed: ./Hardware/keyboard.asm
 592  80D9
 593  80D9                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 80D9              ;Contants
   2+ 80D9
   3+ 80D9              SignMask8Bit		equ %01111111
   4+ 80D9              SignMask16Bit		equ %0111111111111111
   5+ 80D9              SignOnly8Bit		equ $80
   6+ 80D9              SignOnly16Bit		equ $8000
   7+ 80D9
   8+ 80D9              Bit7Only            equ %10000000
   9+ 80D9              Bit6Only            equ %01000000
  10+ 80D9              Bit5Only            equ %00100000
  11+ 80D9              Bit4Only            equ %00010000
  12+ 80D9              Bit3Only            equ %00001000
  13+ 80D9              Bit2Only            equ %00000100
  14+ 80D9              Bit1Only            equ %00000010
  15+ 80D9              Bit0Only            equ %00000001
  16+ 80D9              Bit7Clear           equ %01111111
  17+ 80D9              Bit6Clear           equ %10111111
  18+ 80D9              Bit5Clear           equ %11011111
  19+ 80D9              Bit4Clear           equ %11101111
  20+ 80D9              Bit3Clear           equ %11110111
  21+ 80D9              Bit2Clear           equ %11111011
  22+ 80D9              Bit1Clear           equ %11111101
  23+ 80D9              Bit0Clear           equ %11111110
  24+ 80D9              ConstPi				equ $80
  25+ 80D9              ConstNorm           equ 197
  26+ 80D9
  27+ 80D9              ;Text Tokens
  28+ 80D9              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 80D9              BrabenBellToken 	equ $0D
  30+ 80D9              AcorToken			equ $0C
  31+ 80D9              ; Cursor Bits
  32+ 80D9              CursorClimb         equ %10000000
  33+ 80D9              CursorDive          equ %01000000
  34+ 80D9              CursorLeft          equ %00100000
  35+ 80D9              CursorRight         equ %00010000
  36+ 80D9              CursorHome          equ %00001000
  37+ 80D9              CursorRecenter      equ %00000100
  38+ 80D9
  39+ 80D9              ; Intro Screen
  40+ 80D9              TitleShip			equ	$8C
  41+ 80D9              RotationUnity		equ $60
  42+ 80D9              DBCheckCode			equ $DB
  43+ 80D9              MaxVisibility		equ $1F
  44+ 80D9              FarInFront			equ $C0
  45+ 80D9              ; Equipment Flags
  46+ 80D9              EquipmentItemFitted     equ $FF
  47+ 80D9              EquipmentItemNotFitted  equ 0
  48+ 80D9              ; Universe Managment
  49+ 80D9              ShipTotalModelCount     equ 44
  50+ 80D9              ShipTypeScoopable       equ 4         ; a sub set of junk
  51+ 80D9              ShipTypeJunk            equ 3
  52+ 80D9              ShipTypeStation         equ 2
  53+ 80D9              ShipTypeMissile         equ 1
  54+ 80D9              ShipTypeNormal          equ 0
  55+ 80D9              ShipTypeText            equ 253
  56+ 80D9              ShipTypeDebug           equ 254
  57+ 80D9              ShipTypeEmpty           equ 255
  58+ 80D9
  59+ 80D9              SpawnTypeStation        EQU 0
  60+ 80D9              SpawnTypeAsteroid       EQU SpawnTypeStation        + 1
  61+ 80D9              SpawnTypeJunk           EQU SpawnTypeAsteroid       + 1
  62+ 80D9              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  63+ 80D9              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  64+ 80D9              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  65+ 80D9              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  66+ 80D9              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  67+ 80D9              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  68+ 80D9              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  69+ 80D9              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  70+ 80D9              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  71+ 80D9              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  72+ 80D9
  73+ 80D9
  74+ 80D9              ; Laser and Missile Settings
  75+ 80D9              ; Laser and Missile
  76+ 80D9              ShipLaserPower          equ %11110000
  77+ 80D9              ShipMissileCount        equ %00001111
  78+ 80D9              ShipMissiles1           equ %00000001
  79+ 80D9              ShipMissiles2           equ %00000010
  80+ 80D9              ShipMissiles3           equ %00000011
  81+ 80D9              ShipMissiles4           equ %00000100
  82+ 80D9              ShipMissiles5           equ %00000101
  83+ 80D9              ShipMissiles6           equ %00000110
  84+ 80D9              ShipMissiles7           equ %00000111
  85+ 80D9              ShipMissiles8           equ %00001000
  86+ 80D9              ShipMissiles9           equ %00001001
  87+ 80D9              ShipMissiles10          equ %00001010
  88+ 80D9              ShipMissiles11          equ %00001011
  89+ 80D9              ShipMissiles12          equ %00001100
  90+ 80D9              ShipMissiles13          equ %00001101
  91+ 80D9              ShipMissiles14          equ %00001110
  92+ 80D9              ShipMissiles15          equ %00001111
  93+ 80D9              ; AI Flags  UniverseAIControl
  94+ 80D9              ShipCanAnger            equ %10000000   ; Yes or no
  95+ 80D9              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  96+ 80D9              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  97+ 80D9              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  98+ 80D9              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  99+ 80D9              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 100+ 80D9              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 101+ 80D9              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 102+ 80D9              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 103+ 80D9              ShipFighterWorm         equ %00000000
 104+ 80D9              ShipFighterSidewinder   equ %00000100
 105+ 80D9              ShipFighterViper        equ %00001000
 106+ 80D9              ShipFighterThargon      equ %00001100
 107+ 80D9              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 108+ 80D9              ShipFree                equ $00000011   ; Unused bits at present for later
 109+ 80D9              ; NewBTactics
 110+ 80D9              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 111+ 80D9              ShipIsBountyHunter      equ Bit1Only   ;
 112+ 80D9              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 113+ 80D9              ShipIsPirate            equ Bit3Only   ;
 114+ 80D9              ShipIsDocking           equ Bit4Only   ;
 115+ 80D9              ShipIsBystander         equ Bit5Only   ;
 116+ 80D9              ShipIsCop               equ Bit6Only   ;
 117+ 80D9              ShipHasEscapePod        equ Bit7Only   ;
 118+ 80D9              ShipHostileNewBitNbr    equ 2
 119+ 80D9
 120+ 80D9              ; UBnkaiatkecm
 121+ 80D9              ;Unused                 equ Bit0Only
 122+ 80D9              ;Unused                 equ Bit1Only
 123+ 80D9              ;Unused                 equ Bit2Only
 124+ 80D9              ShipIsDot               equ Bit3Only
 125+ 80D9              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 126+ 80D9              ShipExploding           equ Bit5Only
 127+ 80D9              ShipIsVisible           equ Bit6Only
 128+ 80D9              ShipAIEnabled           equ Bit7Only   ;
 129+ 80D9
 130+ 80D9
 131+ 80D9              ; UBnkaiakecm 2
 132+ 80D9              ;ShipAngryNewBitNbr      equ 4
 133+ 80D9              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 134+ 80D9              ShipNotHostile          equ Bit2Clear   ;
 135+ 80D9              ShipIsNotDot            equ Bit3Clear
 136+ 80D9              ShipIsDotBitNbr         equ 3
 137+ 80D9              ShipKilledBitNbr        equ 4
 138+ 80D9              ShipIsVisibleBitNbr     equ 6
 139+ 80D9              ShipIsScoopDockEsc      equ Bit7Only   ;
 140+ 80D9              ShipAIDisabled          equ Bit7Clear
 141+ 80D9              ShipAIEnabledBitNbr     equ 7
 142+ 80D9              ShipExplodingBitNbr     equ 5
 143+ 80D9              ; Equipment Defaults
 144+ 80D9              ECMCounterMax           equ $80
 145+ 80D9              ; Main Loop State
 146+ 80D9              StatePlayerDocked       equ $FF
 147+ 80D9              StateCompletedLaunch    equ $FD
 148+ 80D9              StateInTransition       equ $FE
 149+ 80D9              StateHJumping           equ $FC
 150+ 80D9              StateHEntering          equ $FB
 151+ 80D9              StateCompletedHJump     equ $FA
 152+ 80D9              StateNormal             equ 0
 153+ 80D9              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 154+ 80D9              StageMissileNotTargeting equ $FF
 155+ 80D9              StageMissileTargeting   equ $FE
 156+ 80D9
 157+ 80D9
 158+ 80D9              ShipMaxDistance     equ 192
 159+ 80D9              HyperSpaceTimers    equ $0B0B
 160+ 80D9
 161+ 80D9              ; -- game limts
 162+ 80D9              MaxNumberOfStars	equ 11
 163+ 80D9              ConsoleRefreshInterval  equ 5
 164+ 80D9              MaxJunkStation      equ 3
 165+ 80D9              MaxJunkFreeSpace    equ 5
 166+ 80D9              WarpCoolDownPeriod  equ 90
 167+ 80D9
 168+ 80D9              ShipTypeSize		equ	32 			;??????? just a guess for now
 169+ 80D9              ShipSST				equ 4			; its a space station
 170+ 80D9              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 171+ 80D9              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 172+ 80D9              ShipCountMax		equ	2			; For now just 2 ships to debug
 173+ 80D9              LineLimitPerShip	equ 70			; Max lines per ship
 174+ 80D9              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 175+ 80D9              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 176+ 80D9
 177+ 80D9              ; Memory page managment	(Refers to a memory slot as a place to access data)
 178+ 80D9              ShipDataSlot		equ	6			; this may move into rom swap out space later
 179+ 80D9              UniverseObjectSlot	equ	7
 180+ 80D9
 181+ 80D9              KeyForwardsView		equ	$20
 182+ 80D9              ; Game specific equates
 183+ 80D9              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 184+ 80D9              WarpSequenceCount   equ 50
 185+ 80D9
 186+ 80D9              ;...Game Colour Mapping
 187+ 80D9              L2DustColour        equ L2ColourGREY_1
 188+ 80D9              L2SunScannerBright  equ 252
 189+ 80D9              L2SunScanner        equ 180
 190+ 80D9              L2DebrisColour      equ L2ColourYELLOW_1
 191+ 80D9
 192+ 80D9
 193+ 80D9              ; Ship Data
 194+ 80D9              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 195+ 80D9              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 196+ 80D9              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 197+ 80D9              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 198+ 80D9              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 199+ 80D9              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 200+ 80D9              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 201+ 80D9              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 202+ 80D9              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 203+ 80D9              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 204+ 80D9              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 205+ 80D9              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 206+ 80D9              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 207+ 80D9              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 208+ 80D9              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 209+ 80D9              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 210+ 80D9              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 211+ 80D9              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 212+ 80D9              ;;;;00 00			 EQUW 0     \ type 18 is
 213+ 80D9              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 214+ 80D9              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 215+ 80D9              ;;;;00 00			 EQUW 0     \ type 21 is
 216+ 80D9              ;;;;00 00			 EQUW 0     \ type 22 is
 217+ 80D9              ;;;;00 00			 EQUW 0     \ type 23 is
 218+ 80D9              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 219+ 80D9              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 220+ 80D9              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 221+ 80D9              ;;;;00 00			 EQUW 0     \ type 27 is
 222+ 80D9              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 223+ 80D9              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 224+ 80D9              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 225+ 80D9              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 226+ 80D9              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 227+ 80D9              ;;;;			\ NEWB examples
 228+ 80D9              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 229+ 80D9              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 230+ 80D9              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 231+ 80D9              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 232+ 80D9              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 233+ 80D9
# file closed: ./Variables/constant_equates.asm
 594  80D9                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 80D9                  IFNDEF LASER_V2
   2+ 80D9 ~                DEFINE  LASER_V2    1
   3+ 80D9                  ENDIF
   4+ 80D9
   5+ 80D9 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   6+ 80DB 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   7+ 80DD              ; Variables to simulate 6502 registers until code fixed
   8+ 80DD              ; These must be here in this order as reading Y and X can then be a 16 bit read
   9+ 80DD 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  10+ 80DE 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  11+ 80DF 00           regA		DB	0
  12+ 80E0
  13+ 80E0
  14+ 80E0 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  15+ 80E1 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  16+ 80E3 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  17+ 80E5
  18+ 80E5
  19+ 80E5
  20+ 80E5              ;XX16		DS	16				; 16 byte Matrix
  21+ 80E5
  22+ 80E5              P0INWK							; page 0 & 46
  23+ 80E5              p0INWK31						; page 0 & 65
  24+ 80E5              P0INWK36						; PAGE 0 &6A
  25+ 80E5
  26+ 80E5 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  27+ 80E6              LastNormalVisible	equ	XX4
  28+ 80E6              varXX4              equ XX4
  29+ 80E6
  30+ 80E6
  31+ 80E6
  32+ 80E6 00           PATG		DB	0				; 6502 &03C9
  33+ 80E7 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  34+ 80E9
  35+ 80E9
  36+ 80E9              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  37+ 80E9              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  38+ 80E9
  39+ 80E9              ; Present System Variables
  40+ 80E9
  41+ 80E9 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  42+ 80EA 20           RandomSeed1				DB	32	            ; 01
  43+ 80EB 0C           RandomSeed2				DB	12			    ; 02
  44+ 80EC 42           RandomSeed3				DB	66			    ; 03
  45+ 80ED 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  46+ 80F1 00           varT1					DB	0				; 06
  47+ 80F2 00           SClo					DB 0				; 07
  48+ 80F3 00           SChi					DB 0				; 08
  49+ 80F4 00           varP					DB 0 				; 10	XX16+7
  50+ 80F5 00           varPhi					DB 0 				; 11	XX16+8
  51+ 80F6 00           varPhi2					DB 0 				; 12	XX16+9
  52+ 80F7              varPp1                  equ varPhi
  53+ 80F7              varPp2                  equ varPhi2
  54+ 80F7 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  55+ 80F8 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  56+ 80F9              UnivPointer				equ	UnivPointerLo
  57+ 80F9 00           varV					DB 0				; 22                          XX0+4
  58+ 80FA 00           varVHi					DB 0				; 23                          XX0+5
  59+ 80FB 00           varXXlo                 DB 0                ; 24
  60+ 80FC 00           varXXHi                 DB 0                ; 25
  61+ 80FD              varXX					equ	varXXlo
  62+ 80FD 00           YYlo                    DB 0                ; 26
  63+ 80FE 00           YYHi                    DB 0                ; 27
  64+ 80FF              varYY					equ	YYlo
  65+ 80FF              											;	28
  66+ 80FF              											;	29
  67+ 80FF              ;PlayerShipPositionData - Must be contiguous for setup
  68+ 80FF 00           BETA 					DB	0               ; 2A        (pitch done)
  69+ 8100 00           JSTY                    DB  0               ; Joystick analog
  70+ 8101 00           BET1 					DB	0               ; 2B        lower7 magnitude
  71+ 8102 00           BET2                    DB  0               ;            climb sign
  72+ 8103 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  73+ 8104 1F           BET1MAXC                DB  31              ; max climb
  74+ 8105 E1           BET1MAXD                DB  -31             ; max dive
  75+ 8106 00           XC						DB	0               ; 2C
  76+ 8107 00           YC						DB 	0               ; 2D
  77+ 8108              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  78+ 8108 00           ECMCountDown            DB  0
  79+ 8109 00           ECMLoopB                DB  0
  80+ 810A 00 00        JSTX                    DW  0               ;           Joystick analog value
  81+ 810C 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  82+ 810D 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  83+ 810E 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  84+ 810F 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  85+ 8110 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  86+ 8111 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  87+ 8112
  88+ 8112
  89+ 8112              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
  90+ 8112              MAXMESSAGES             EQU 5
  91+ 8112              MESSAGETIMELIMIT        EQU 20
  92+ 8112              MESSAGESIZE             EQU 33
  93+ 8112              MESSAGELINE             EQU $0001
  94+ 8112
  95+ 8112 00           MessageCount            DB  0                ; used for enquing messages later
  96+ 8113 00           MessageCurrent          DB  0
  97+ 8114 05 00        MessageIndex            DW  MAXMESSAGES
  98+ 8116 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  99+ 81BB 05           MessageTimeout          DB  MAXMESSAGES
 100+ 81BC 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 101+ 81E1
 102+ 81E1              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 103+ 81E1              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 104+ 81E1              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 105+ 81E1 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 106+ 81E2              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 107+ 81E2
 108+ 81E2
 109+ 81E2 00           QQ17					DB	0				;   72
 110+ 81E3 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 111+ 81E4 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 112+ 81E5 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 113+ 81E6 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 114+ 81E7 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 115+ 81E8 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 116+ 81E9 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 117+ 81EA 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 118+ 81EB 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 119+ 81EC
 120+ 81EC 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 121+ 81ED 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 122+ 81EE 00           DELT4Lo					DB 	0				; 7E
 123+ 81EF 00           DELT4Hi					DB 	0				; 7F
 124+ 81F0              DELTA4                  equ                 DELT4Lo
 125+ 81F0
 126+ 81F0              ; SoundFX Variables -------------------------------------------------------------------------------------------
 127+ 81F0              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 128+ 81F0 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 129+ 81F1 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 130+ 81F2
 131+ 81F2
 132+ 81F2              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 81F2 00           varU                    DB  0               ;   80
 134+ 81F3 00           varQ					DB  0 				;	81
 135+ 81F4 00           varR					DB  0 				;	82
 136+ 81F5 00           varS					DB  0 				;	83
 137+ 81F6              varRS                   equ varR
 138+ 81F6
 139+ 81F6 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 81F8
 141+ 81F8 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 81F9 00           YSAV                    DB  0               ; 85
 143+ 81FA 00           XX17					DB	0				; 86
 144+ 81FB              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 81FB              varXX17                 equ  XX17
 146+ 81FB 00           ScreenChanged           DB  0
 147+ 81FC 00           ScreenIndex             DB  0
 148+ 81FD 00 00        ScreenIndexTablePointer DW  0
 149+ 81FF 00           InvertedYAxis           DB  0
 150+ 8200 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 151+ 8201              											; Bit 7 Set  ShortRangeChart    $80
 152+ 8201              											; Bit 6 Set  Galactic Chart     $40
 153+ 8201              											; Bit 5 Set  Market Place       $20
 154+ 8201              											; Bit 4 Set  Status Screen      $10
 155+ 8201              											; Bit 3 Set  Display Inventory  $08
 156+ 8201                                                          ; Bit 2 Set  Planet Data        $04
 157+ 8201                                                          ; View bit combinations if the ones above not matched
 158+ 8201                                                          ; bits 1 0
 159+ 8201                                                          ;      1 1  Front view , i.e. $03
 160+ 8201                                                          ;      1 0  Aft View          $02
 161+ 8201                                                          ;      0 1  Left View         $01
 162+ 8201                                                          ;      0 0  Right view        $00
 163+ 8201              											; Bit 0 Set  Data On System
 164+ 8201              											; 0  Space View (Not a menu)
 165+ 8201 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 166+ 8202 00           XX13                    DB  0               ;   89
 167+ 8203 00           TYPE					DB	0				; 8C used for ship type in drawing
 168+ 8204              ;Docked flag = 00 = in free space
 169+ 8204              ;              FF = Docked
 170+ 8204              ;              FE = transition
 171+ 8204              ;              FD = Setup open space and transition to not docked
 172+ 8204              ;              FC = Hyperspace manimation
 173+ 8204              ;              FB = Hyperspace complete
 174+ 8204 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 175+ 8205 00           varCNT                  DB  0               ; 93
 176+ 8206
 177+ 8206 00           varK					DB	0				; 40
 178+ 8207 00           varKp1					DB	0				; 41
 179+ 8208 00           varKp2					DB	0				; 42
 180+ 8209 00           varKp3					DB	0				; 43
 181+ 820A
 182+ 820A 00           varK2                   DB  0               ; 9B
 183+ 820B 00           varK2p1                 DB  0               ; 9C K2 plus 1
 184+ 820C 00           varK2p2                 DB  0               ; 9D K2 plus 2
 185+ 820D 00           varK2p3                 DB  0               ; 9E K2 plus 3
 186+ 820E
 187+ 820E 00           Point                   DB  0               ; 9F      POINT
 188+ 820F
 189+ 820F 00           varT					DB	0				; D1
 190+ 8210 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 191+ 8211
 192+ 8211 00 00 00...  varVector9ByteWork      DS  9
 193+ 821A
 194+ 821A 00 00 00 00  varK3					DS	4				; D2
 195+ 821E 00           varK3p2					DB	0				; 42
 196+ 821F 00           varK3p3					DB	0				; 43
 197+ 8220              varK3p1					equ varK3+1			; D3
 198+ 8220 00 00 00 00  varK4					DS	4				; E0
 199+ 8224              varK4p1					equ varK4+1			; D3
 200+ 8224
 201+ 8224
 202+ 8224              ;Heap
 203+ 8224
 204+ 8224 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 205+ 8226 00 00 00...  HeapData				DS	50
 206+ 8258              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 207+ 8258              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 208+ 8258              ; i.e. a list of programmed missiles in universe slot list code
 209+ 8258 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 210+ 825F              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 211+ 825F              ;  #&5 Does J reverse both joystick channels
 212+ 825F              ;  #&4 Does Y reverse joystick Y channel			03CB
 213+ 825F              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 214+ 825F              ;  #&3 Does F toggle flashing information			03CA
 215+ 825F              ;  #&1 Does A toggle keyboard auto-recentering ?
 216+ 825F              ;  #&0 Caps-lock toggles keyboard flight damping
 217+ 825F
 218+ 825F              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 219+ 825F 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 220+ 8264 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 221+ 8274 00           AlienItemsAvaliability  DB	0				; 039D
 222+ 8275 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 223+ 8276 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 224+ 8277 00 00 00...  WorkingSeeds			DS	6
 225+ 827D 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 226+ 8283 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 227+ 8289 00           PresentSystemX			DB	0				; System we are currently in
 228+ 828A 00           PresentSystemY			DB  0				; System we are currently in
 229+ 828B 00           TargetSystemX			DB	0				; System we are targeting for jump
 230+ 828C 00           TargetSystemY			DB	0				; System we are targeting for jump
 231+ 828D              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 232+ 828D 00           GovPresentSystem		DB	0				; 03AE Govenment
 233+ 828E 00           TekPresentSystem		DB	0				; 03AF Technology
 234+ 828F 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 235+ 8290 00           ExtraVesselsCounter     DB  0
 236+ 8291 00           JunkCount				DB  0				; $033E
 237+ 8292 00           AsteroidCount           DB  0               ; Not used as yet
 238+ 8293 00           TransporterCount        DB  0
 239+ 8294 00           CopCount                DB  0
 240+ 8295 00           PirateCount             DB  0
 241+ 8296              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 242+ 8296 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 243+ 8297 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 244+ 8298 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 245+ 8299 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 246+ 829B 00           CurrentRank             DB  0   			;
 247+ 829C 00           MarketPrice				DB	0				; 03AA QQ24
 248+ 829D 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 249+ 829E 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 250+ 829F 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 251+ 82A0 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 252+ 82A2              											; this is ship lines stack pointer so may be redundant with paging
 253+ 82A2              											; LS = line stack so we will have one for now to remove later
 254+ 82A2              ; - no longer used, holding here intil its safe to delte
 255+ 82A2 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 256+ 82A3 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 257+ 82A4              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 258+ 82A4              ; - no longer used, holding here intil its safe to delte
 259+ 82A4
 260+ 82A4 00           DisplayEcononmy			DB	0				; 03B8
 261+ 82A5 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 262+ 82A6 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 263+ 82A7 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 264+ 82A9 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 265+ 82AB 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 266+ 82AD 00 00        DisplayRadius			DW	0
 267+ 82AF              ; --- Used in creation of sun and planet ------------------------------------------------------------------------------------------------
 268+ 82AF 00           PlanetXPos              DS  1
 269+ 82B0 00           PlanetYPos              DS  1
 270+ 82B1 00           PlanetZPos              DS  1
 271+ 82B2 00           PlanetType              DS  1
 272+ 82B3 00           SunXPos                 DS  1
 273+ 82B4 00           SunYPos                 DS  1
 274+ 82B5 00           SunZPos                 DS  1
 275+ 82B6              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 276+ 82B6 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 277+ 82B7 00 00        MissileXPos             DW      0
 278+ 82B9 00           MissileXSgn             DB      0
 279+ 82BA 00 00        MissileYPos             DW      0
 280+ 82BC 00           MissileYSgn             DB      0
 281+ 82BD 00 00        MissileZPos             DW      0
 282+ 82BF 00           MissileZSgn             DB      0
 283+ 82C0 00 00        CurrentTargetXpos       DS      2
 284+ 82C2 00 00        CurrentTargetXsgn       DS      2
 285+ 82C4 00 00        CurrentTargetYpos       DS      2
 286+ 82C6 00 00        CurrentTargetYsgn       DS      2
 287+ 82C8 00 00        CurrentTargetZpos       DS      2
 288+ 82CA 00 00        CurrentTargetZsgn       DS      2
 289+ 82CC 00 00        TargetVectorXpos        DS      2
 290+ 82CE 00 00        TargetVectorXsgn        DS      2
 291+ 82D0 00 00        TargetVectorYpos        DS      2
 292+ 82D2 00 00        TargetVectorYsgn        DS      2
 293+ 82D4 00 00        TargetVectorZpos        DS      2
 294+ 82D6 00 00        TargetVectorZsgn        DS      2
 295+ 82D8 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 296+ 82D9 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 297+ 82DA 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 298+ 82DB 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 299+ 82DC              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 300+ 82DC 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 301+ 82E2 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 302+ 82E8 00 00 00...  ShipClassId             DS 6
 303+ 82EE              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 304+ 82EE 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 305+ 8304 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 306+ 8346 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 307+ 835C 00           varStarX                DB 0
 308+ 835D 00           varStarY                DB 0
 309+ 835E 00 00 00...  varDustX                DS MaxNumberOfStars *2
 310+ 8374 00 00 00...  varDustY                DS MaxNumberOfStars *2
 311+ 838A 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 312+ 83A0              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 313+ 83A0 00           DockedFlag				DB	0				; 8E -
 314+ 83A1 00           GamePaused              DB  0
 315+ 83A2 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 316+ 83A3 00           SelectedUniverseSlot    DB  0
 317+ 83A4 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 318+ 83A5 00           ShipBlastCheckCounter   DB  0
 319+ 83A6 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 320+ 83A7 00           OuterHyperCount			DB 	0				; 2E QQ22
 321+ 83A8 00           WarpCooldown            DB  0
 322+ 83A9 00           EventCounter            DB  0
 323+ 83AA 00           HyperCircle             DB  0
 324+ 83AB 00           MissJumpFlag            DB  0
 325+ 83AC 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 326+ 83AD 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 327+ 83AE 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 328+ 83AF 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 329+ 83B0 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 330+ 83B1 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 331+ 83B2              UniverseSlotListSize    equ	12
 332+ 83B2 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 333+ 83BE 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 334+ 83CA              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 335+ 83CA 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 336+ 83CB 00           ConsoleRedrawFlag       DB  0
 337+ 83CC 00           TextInputMode           DB  0
 338+ 83CD 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 339+ 83CE                                                          ; 7    6    5    4     3    2        1    0
 340+ 83CE                                                          ; Up   Down Left Right Home Recentre
 341+ 83CE 00           FireLaserPressed        DB  0
 342+ 83CF 00           WarpPressed             DB  0
 343+ 83D0 00           CompassColor			DB	0				; 03C5
 344+ 83D1 00           SoundToggle				DB	0				; 03C6
 345+ 83D2 00           KeyboardRecenterToggle	DB	0				; 03C8
 346+ 83D3 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 347+ 83D4 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 348+ 83D5 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 349+ 83D6 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 350+ 83D7 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 351+ 83D8 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 352+ 83D9
 353+ 83D9              ; Working Data
 354+ 83D9
 355+ 83D9              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 356+ 83D9              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 357+ 83D9              ; $0925 =	EQUW page9+37* 1
 358+ 83D9              ; $094A =	EQUW page9+37* 2
 359+ 83D9              ; $096F =	EQUW page9+37* 3
 360+ 83D9              ; $0994 =	EQUW page9+37* 4
 361+ 83D9              ; $09B9 =	EQUW page9+37* 5
 362+ 83D9              ; $09DE =	EQUW page9+37* 6
 363+ 83D9              ; $0A03 =	EQUW page9+37* 7
 364+ 83D9              ; $0A28 =	EQUW page9+37* 8
 365+ 83D9              ; $0A4D =	EQUW page9+37* 9
 366+ 83D9              ; $0A72 =	EQUW page9+37*10
 367+ 83D9              ; $0A97 =	EQUW page9+37*11
 368+ 83D9              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 369+ 83D9
 370+ 83D9
 371+ 83D9
 372+ 83D9              ; 0b00 is start address of data to save
 373+ 83D9              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 374+ 83D9              											; Bit mask XXXX10XX - Thargoid plan mission
 375+ 83D9
 376+ 83D9 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 377+ 83DA
 378+ 83DA 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 379+ 83DC 00 00        CommanderLoadAddress	DW	0				;0C03
 380+ 83DE 00 00        LengthOfFile			DW	0				;0C0B
 381+ 83E0 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 382+ 83E2
 383+ 83E2 00 00 00...  EdgesBuffer				DS 50
 384+ 8414              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 385+ 8414              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 386+ 8414
 387+ 8414 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 388+ 845A              ShipLineStackTop		equ $ - ShipLineStack
 389+ 845A
 390+ 845A 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 391+ 851A              ; LSX vector overlaps with LSO
 392+ 851A 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 393+ 851B 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 394+ 851C
 395+ 851C              ; -- Player Runtime Data
 396+ 851C 00           GunTemperature          DB  0
 397+ 851D 00           CabinTemperature        DB  0
 398+ 851E 00           PlayerForwardSheild0	DB	0 ; ?????
 399+ 851F 00           PlayerForwardSheild1    DB	0
 400+ 8520 00           PlayerForwardSheild2    DB	0
 401+ 8521 00           ForeShield				DB	0				; These three must be contiguous
 402+ 8522 00           AftShield				DB	0				; .
 403+ 8523 00           PlayerEnergy			DB	0				; and in this order
 404+ 8524 00           CompassX				DB	0				; 03A8
 405+ 8525 00           CompassY				DB	0				; 03A9
 406+ 8526              ; Simplification of missile targetting
 407+ 8526              ; $FF no missile targettting enabled
 408+ 8526              ; $FE missile targetting, no target selected
 409+ 8526              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 410+ 8526              ; bit 7 clear launch at selected target in lower nibble
 411+ 8526 00           MissileTargettingFlag   DB  0
 412+ 8527              ;;MissileTarget			DB  0				; 45
 413+ 8527              ;;MissileLaunchFlag       DB  0
 414+ 8527 00 00 00...  CommanderName           DS  15
 415+ 8536 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 416+ 8537 00           BadnessStatus           DB  0
 417+ 8538              ;note rapidly changing views could reset these so need to consider it in an array
 418+ 8538              ; LaserType
 419+ 8538              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 420+ 8538              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 421+ 8538              ; LaserPulseRest                          ; time before pulse count resets to 0
 422+ 8538              ; LaserDamageOutput                       ; amount of damage for a laser hit
 423+ 8538              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 424+ 8538              ; LaserHeat                               ; amount of heat generated
 425+ 8538              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 426+ 8538              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 427+ 8538              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 428+ 8538              ; LaserTechLevel                          ; minimum tech level system to buy from
 429+ 8538              ; need to add copy table routines
 430+ 8538 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 431+ 8539 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 432+ 853A 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 433+ 853B 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 434+ 853C 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 435+ 853D 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 436+ 853E
 437+ 853E                  IFDEF LASER_V2
 438+ 853E 00           LaserBeamOn             DB  0
 439+ 853F 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 440+ 8540 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 441+ 8541 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 442+ 8542                  ENDIF
 443+ 8542 00           CurrLaserBurstRate      DB  0
 444+ 8543 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 445+ 8544 00           CurrLaserDamageOutput   DB  0
 446+ 8545 00           CurrLaserEnergyDrain    DB  0
 447+ 8546 00           CurrLaserHeat           DB  0
 448+ 8547 00           CurrLaserDurability     DB  0
 449+ 8548 00           CurrLaserDurabilityAmount DB  0
 450+ 8549
 451+ 8549              ; Count down timers must be aligned like this to work
 452+ 8549 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 453+ 854A 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 454+ 854B 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 455+ 854C 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 456+ 854D
 457+ 854D              ; -- Input variables
 458+ 854D 00           JoystickX				DB	0				; 034C JSTX
 459+ 854E 00           JoystickY				DB	0				; 034D JSTY
 460+ 854F 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 461+ 8550 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 462+ 8551
 463+ 8551              ; -- Console drawing data
 464+ 8551              FShieldStart            equ $8410
 465+ 8551              AShieldStart            equ $8D10
 466+ 8551              FuelStart               equ $9410
 467+ 8551
 468+ 8551              EnergyBar4Start         equ $A5D5
 469+ 8551              EnergyBar3Start         equ $ADD5
 470+ 8551              EnergyBar2Start         equ $B5D5
 471+ 8551              EnergyBar1Start         equ $BDD5
 472+ 8551              ; 70 /2 = 35 values
 473+ 8551              ;                            0                             1                             2                             3
 474+ 8551              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 475+ 8551 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 475+ 8555 04 04 05 06
 475+ 8559 06 07 08 09
 475+ 855D 0A 0A 0B 0C
 475+ 8561 0D 0E 0E 0F
 475+ 8565 10 10 11 13
 475+ 8569 14 15 15 16
 475+ 856D 17 18 19 1A
 475+ 8571 1B 1C 1E 1F
 475+ 8575 1F
 476+ 8576              SpeedoStart             equ $84D1
 477+ 8576              ;                            0                             1                             2                             3                             4
 478+ 8576              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 479+ 8576 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 479+ 857A 04 04 05 06
 479+ 857E 06 07 08 09
 479+ 8582 0A 0A 0B 0C
 479+ 8586 0D 0E 0E 0F
 479+ 858A 10 10 11 12
 479+ 858E 13 14 14 15
 479+ 8592 16 17 18 18
 479+ 8596 19 1A 1A 1B
 479+ 859A 1C 1C 1D 1E
 479+ 859E 1F
 480+ 859F
 481+ 859F              DialMiddleXPos          equ $E1
 482+ 859F              RollMiddle              equ $8CE0
 483+ 859F              PitchMiddle             equ $94E0
 484+ 859F
 485+ 859F
 486+ 859F
 487+ 859F
 488+ 859F
# file closed: ./Variables/general_variables.asm
 595  859F                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 859F              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 859F 3A 45 85    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 85A2 47          >                        ld      b,a
   1+ 85A3 3A 23 85    >                        ld      a,(PlayerEnergy)
   1+ 85A6 90          >                        sub     a,b
   1+ 85A7 32 23 85    >                        ld      (PlayerEnergy),a
   1+ 85AA 38 03       >                        jr      c,.ZeroSystem
   1+ 85AC C3 B3 85    >                        jp      .ExitPoint
   1+ 85AF             >.ZeroSystem:            ZeroA
   1+ 85AF AF          >                        xor a
   1+ 85B0 32 23 85    >                        ld      (PlayerEnergy),a
   1+ 85B3             >.ExitPoint
   2+ 85B3                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 85B3 3A 46 85    >                        ld      a,(CurrLaserHeat)
   2+ 85B6 47          >                        ld      b,a
   2+ 85B7 3A 1C 85    >                        ld      a,(GunTemperature)
   2+ 85BA 80          >                        add     b
   2+ 85BB 32 1C 85    >                        ld      (GunTemperature),a
   2+ 85BE 38 03       >                        jr      c, .MaxSystem
   2+ 85C0 C3 C8 85    >                        jp      .ExitPoint
   2+ 85C3 3E FF       >.MaxSystem:             ld      a,255
   2+ 85C5 32 1C 85    >                        ld      (GunTemperature),a
   2+ 85C8             >.ExitPoint
   3+ 85C8 C9                                   ret
   4+ 85C9
   5+ 85C9
   6+ 85C9              ResetPlayerShip:        ZeroThrottle
   6+ 85C9 AF          >                        xor     a
   6+ 85CA 32 ED 81    >                        ld      (DELTA),a
   6+ 85CD 32 EE 81    >                        ld      (DELT4Lo),a
   6+ 85D0 32 EF 81    >                        ld      (DELT4Lo+1),a
   7+ 85D3                                      ZeroPitch
   7+ 85D3 AF          >                        xor     a
   7+ 85D4 32 02 81    >                        ld      (BET2),a
   7+ 85D7 32 03 81    >                        ld      (BET2FLIP),a
   7+ 85DA 32 00 81    >                        ld      (JSTY),a
   7+ 85DD 32 FF 80    >                        ld      (BETA),a
   8+ 85E0                                      ZeroRoll
   8+ 85E0 AF          >                        xor     a                              ; zero roll and climb
   8+ 85E1 32 0E 81    >                        ld      (ALP2),a
   8+ 85E4 32 0F 81    >                        ld      (ALP2FLIP),a
   8+ 85E7 32 0A 81    >                        ld      (JSTX),a
   8+ 85EA 32 0C 81    >                        ld      (ALPHA),a
   9+ 85ED                                      ClearMissileTargetting
   9+ 85ED 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 85EF 32 26 85    >                        ld      (MissileTargettingFlag),a
  10+ 85F2                                      ClearECM
  10+ 85F2 AF          >                        xor     a
  10+ 85F3 32 08 81    >                        ld      (ECMCountDown),a
  11+ 85F6                                      ChargeEnergyAndShields
  11+ 85F6 3E FF       >                        ld      a,$FF
  11+ 85F8 32 23 85    >                        ld      (PlayerEnergy),a
  11+ 85FB 32 21 85    >                        ld      (ForeShield),a
  11+ 85FE 32 22 85    >                        ld      (AftShield),a
  12+ 8601                                      ClearTemperatures
  12+ 8601 AF          >                        xor     a
  12+ 8602 32 1D 85    >                        ld      (CabinTemperature),a
  12+ 8605 32 1C 85    >                        ld      (GunTemperature),a
  13+ 8608                                      ClearWarpPressed
  13+ 8608             >                        SetMemFalse WarpPressed
  13+ 8608 3E FF       >                        ld      a,$FF
  13+ 860A 32 CF 83    >                        ld      (WarpPressed),a
  14+ 860D CD 5F 86                             call    IsLaserUseable
  15+ 8610                                      SetMemFalse LaserBeamOn
  15+ 8610 3E FF       >                        ld      a,$FF
  15+ 8612 32 3E 85    >                        ld      (LaserBeamOn),a
  16+ 8615                                      MMUSelectCommander
  16+ 8615 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  17+ 8619 CD 0E E3                             call    LoadLaserToCurrent
  18+ 861C C8                                   ret     z
  19+ 861D
  20+ 861D C9                                   ret
  21+ 861E
  22+ 861E 21 07 88     AddCargoTypeD:          ld      hl,CargoTonnes
  23+ 8621 57                                   ld      d,a
  24+ 8622 ED 31                                add     hl,a
  25+ 8624 34                                   inc     (hl)
  26+ 8625 C9                                   ret
  27+ 8626
  28+ 8626 7A           CanWeScoopCargoD:       ld      a,d
  29+ 8627                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  29+ 8627 FE 0E       >                        cp     GoldIndex
  29+ 8629 D2 4B 86    >                        jp		nc,.ItMayNotBeTonnes
  30+ 862C 21 07 88     .ItsTonnes:             ld      hl,CargoTonnes
  31+ 862F 0E 00                                ld      c,0
  32+ 8631 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  33+ 8633 7E           .AddLoop:               ld      a,(hl)
  34+ 8634 81                                   add     c
  35+ 8635 4F                                   ld      c,a                     ; add to counter
  36+ 8636 05                                   dec     b
  37+ 8637 23                                   inc     hl
  38+ 8638 10 F9                                djnz    .AddLoop
  39+ 863A 21 18 88                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  40+ 863D 7E                                   ld      a,(hl)
  41+ 863E 81                                   add     c
  42+ 863F 4F                                   ld      c,a
  43+ 8640 3A 05 88                             ld      a,(CargoBaySize)        ; Get Bay Size
  44+ 8643                                      JumpIfAEqNusng c, .CargoFull
  44+ 8643 B9          >                        cp     c
  44+ 8644 CA 49 86    >                        jp      z,.CargoFull
  45+ 8647              .StillRoom:             ClearCarryFlag
  45+ 8647 B7          >                        or a
  46+ 8648 C9                                   ret
  47+ 8649              .CargoFull:             SetCarryFlag
  47+ 8649 37          >                        scf
  48+ 864A C9                                   ret
  49+ 864B              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  49+ 864B FE 11       >                        cp     AlienItemsIndex
  49+ 864D CA 2C 86    >                        jp      z,.ItsTonnes
  50+ 8650 21 07 88                             ld      hl,CargoTonnes
  51+ 8653 7A                                   ld      a,d
  52+ 8654 ED 31                                add     hl,a
  53+ 8656 7E                                   ld      a,(hl)
  54+ 8657                                      JumpIfAEqNusng  200, .StillRoom
  54+ 8657 FE C8       >                        cp     200
  54+ 8659 CA 47 86    >                        jp      z,.StillRoom
  55+ 865C C3 49 86                             jp      .CargoFull
  56+ 865F              ; END of rountine
  57+ 865F
  58+ 865F 3A 38 85     IsLaserUseable:         ld      a,(CurrLaserType)
  59+ 8662 FE FF                                cp      255
  60+ 8664 C8                                   ret     z
  61+ 8665 3A 39 85                             ld      a,(CurrLaserDamage)
  62+ 8668 FE FF                                cp      255
  63+ 866A C9                                   ret
  64+ 866B
  65+ 866B CD 31 87     InitMainLoop:           call    ClearUnivSlotList
  66+ 866E AF                                   xor     a
  67+ 866F 32 A2 83                             ld      (CurrentUniverseAI),a
  68+ 8672 3E 03                                ld      a,3
  69+ 8674 32 00 82                             ld      (MenuIdMax),a
  70+ 8677                                      SetMemFalse SetStationHostileFlag
  70+ 8677 3E FF       >                        ld      a,$FF
  70+ 8679 32 A4 83    >                        ld      (SetStationHostileFlag),a
  71+ 867C                                      SetMemFalse DockedFlag
  71+ 867C 3E FF       >                        ld      a,$FF
  71+ 867E 32 A0 83    >                        ld      (DockedFlag),a
  72+ 8681              ;                        call    InitialiseFrontView
  73+ 8681 CD 16 6A                             call    InitialiseCommander
  74+ 8684                                      MMUSelectUniverseN 2
  74+ 8684 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  75+ 8688 CD 1A 6B                             call    SetInitialShipPosition
  76+ 868B              ; Initialist screen refresh
  77+ 868B 3E 05                                ld      a, ConsoleRefreshInterval
  78+ 868D 32 CA 83                             ld      (ConsoleRefreshCounter),a
  79+ 8690                                      SetMemFalse    ConsoleRedrawFlag
  79+ 8690 3E FF       >                        ld      a,$FF
  79+ 8692 32 CB 83    >                        ld      (ConsoleRedrawFlag),a
  80+ 8695                                      MMUSelectStockTable
  80+ 8695 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  81+ 8699 CD AA E0                             call    generate_stock_market
  82+ 869C CD 95 74                             call    ResetMessageQueue
  83+ 869F                                      InitEventCounter
  83+ 869F AF          >                        xor     a
  83+ 86A0 32 A9 83    >                        ld      (EventCounter),a
  84+ 86A3                                      ClearMissJump
  84+ 86A3 3E FF       >                        ld      a,$FF
  84+ 86A5 32 AB 83    >                        ld      (MissJumpFlag),a
  85+ 86A8                                      SetMemFalse TextInputMode
  85+ 86A8 3E FF       >                        ld      a,$FF
  85+ 86AA 32 CC 83    >                        ld      (TextInputMode),a
  86+ 86AD C9                                   ret
  87+ 86AE
  88+ 86AE              ; needs to be called after a kill too
  89+ 86AE 2A 99 82     SetPlayerRank:          ld      hl,(KillTally)
  90+ 86B1 DD 21 D1 8A                          ld      ix,RankingTableLow
  91+ 86B5 06 00                                ld      b,0
  92+ 86B7 DD 56 01     .CompareLoop:           ld      d,(ix+1)
  93+ 86BA DD 5E 00                             ld      e,(ix+0)
  94+ 86BD A7                                   and     a             ; compare HL to DE
  95+ 86BE ED 52                                sbc     hl,de         ; we can throw away HL now
  96+ 86C0 28 09                                jr      z,.FoundRank
  97+ 86C2 38 07                                jr      c,.FoundRank
  98+ 86C4 DD 23                                inc     ix
  99+ 86C6 DD 23                                inc     ix
 100+ 86C8 04                                   inc     b
 101+ 86C9 18 EC                                jr      .CompareLoop
 102+ 86CB 78           .FoundRank:             ld      a,b
 103+ 86CC 32 9B 82                             ld      (CurrentRank),a
 104+ 86CF C9                                   ret
 105+ 86D0
 106+ 86D0 3E 00        SetSpeedZero:           ld      a,0
 107+ 86D2 32 ED 81                             ld      (DELTA),a                                       ;
 108+ 86D5 67                                   ld      h,a                                             ;
 109+ 86D6 6F                                   ld      l,a                                             ;
 110+ 86D7 22 EE 81                             ld      (DELT4Lo),hl                                    ;
 111+ 86DA C9                                   ret
 112+ 86DB
 113+ 86DB 21 23 85     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 114+ 86DE 7E                                   ld      a,(hl)
 115+ 86DF CB 7F                                bit     7,a                                             ; then we can recharge shields
 116+ 86E1 28 0D                                jr      z,.UpdatePlayerEnergy
 117+ 86E3 21 21 85     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 118+ 86E6 34                                   inc     (hl)
 119+ 86E7 20 01                                jr      nz,.DoneForeShield
 120+ 86E9 35           .ForeOverCharge:        dec     (hl)
 121+ 86EA 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 122+ 86EB 34                                   inc     (hl)
 123+ 86EC 20 01                                jr      nz,.DoneAftShield
 124+ 86EE 35                                   dec     (hl)                                            ; back to 255
 125+ 86EF 23           .DoneAftShield:         inc     hl                                              ; point to energy
 126+ 86F0 34           .UpdatePlayerEnergy:    inc     (hl)
 127+ 86F1 28 0A                                jr      z,.OverflowedEnergy
 128+ 86F3 3A 26 88                             ld      a,(ExtraEnergyUnit)
 129+ 86F6                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 129+ 86F6 FE FF       >                        cp      EquipmentItemFitted
 129+ 86F8 C0          >                        ret     nz
 130+ 86F9 34           .EnergyUnitFitted:      inc     (hl)
 131+ 86FA 28 01                                jr      z,.OverflowedEnergy
 132+ 86FC C9                                   ret
 133+ 86FD 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 134+ 86FE C9                                   ret
 135+ 86FF 21 23 85     .SkipShieldCharge:      ld      hl,PlayerEnergy
 136+ 8702 18 EC                                jr      .UpdatePlayerEnergy
 137+ 8704
 138+ 8704              ; sets carry to true if target
 139+ 8704 3A 26 85     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 140+ 8707 CB 7F                                bit     7,a
 141+ 8709 28 07                                jr      z, .TargetSelected
 142+ 870B E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 143+ 870D CA 12 87                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 144+ 8710                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 144+ 8710 B7          >                        or a
 145+ 8711 C9                                   ret
 146+ 8712              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 146+ 8712 21 B2 83    >                        ld      hl,UniverseSlotList
 146+ 8715 ED 31       >                        add     hl,a
 146+ 8717 7E          >                        ld      a,(hl)
 146+ 8718 3C          >                        inc     a
 146+ 8719 CA 1F 87    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 146+ 871C 3D          >                        dec     a           ; get original value back for later
 147+ 871D                                      SetCarryFlag
 147+ 871D 37          >                        scf
 148+ 871E C9                                   ret
 149+ 871F 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 150+ 8721 32 26 85                             ld      (MissileTargettingFlag),a
 151+ 8724 C9                                   ret
 152+ 8725
# file closed: ./Variables/general_variablesRoutines.asm
 596  8725                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 8725              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 8725 AF           ClearSlotCount:         xor     a
   3+ 8726 21 B2 83                             ld      hl,UniverseSlotList
   4+ 8729 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 872B 77           .fillLoop:              ld      (hl),a
   6+ 872C 23                                   inc     hl
   7+ 872D 10 FC                                djnz    .fillLoop
   8+ 872F C9                                   ret
   9+ 8730
  10+ 8730              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 8730              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 8730              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 8730              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 8730              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 8730              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 8730              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 8730              ; DOE NOT WORK                         cp      $FF
  18+ 8730              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 8730              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 8730              ; DOE NOT WORK                         inc     hl
  21+ 8730              ; DOE NOT WORK                         ld      (hl),1
  22+ 8730              ; DOE NOT WORK                         inc     hl
  23+ 8730              ; DOE NOT WORK                         inc     hl
  24+ 8730              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 8730              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 8730 C9                                   ret
  27+ 8731              ; Wipe all items
  28+ 8731 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 8733 21 B2 83                             ld      hl,UniverseSlotList
  30+ 8736 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 8738 77           .fillLoop:              ld      (hl),a
  32+ 8739 23                                   inc     hl
  33+ 873A 10 FC                                djnz    .fillLoop
  34+ 873C C9                                   ret
  35+ 873D
  36+ 873D 21 B2 83     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 8740 36 02                                ld      (hl),ShipTypeStation
  38+ 8742 21 BE 83                             ld      hl,UniverseSlotType
  39+ 8745 36 02                                ld      (hl),ShipTypeStation
  40+ 8747 C9                                   ret
  41+ 8748
  42+ 8748 21 B2 83     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 874B ED 31                                add     hl,a
  44+ 874D 70                                   ld      (hl),b
  45+ 874E C9                                   ret
  46+ 874F
  47+ 874F 21 BE 83     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 8752 ED 31                                add     hl,a
  49+ 8754 70                                   ld      (hl),b
  50+ 8755 C9                                   ret
  51+ 8756
  52+ 8756              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 8756 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 8757 0E 00                                ld      c,0
  55+ 8759 21 B2 83                             ld      hl,UniverseSlotList
  56+ 875C 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 875E 79           .fillLoop:              ld      a,c
  58+ 875F BA                                   cp      d
  59+ 8760 28 03                                jr      z,.SkipSlot
  60+ 8762 3E FF                                ld      a,$FF
  61+ 8764 77                                   ld      (hl),a
  62+ 8765 23           .SkipSlot:              inc     hl
  63+ 8766 23                                   inc     hl
  64+ 8767 10 F5                                djnz    .fillLoop
  65+ 8769 C9                                   ret
  66+ 876A
  67+ 876A 21 B2 83     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 876D ED 31                                add     hl,a
  69+ 876F 36 FF                                ld      (hl),$FF
  70+ 8771 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 8773 ED 31                                add     hl,a
  72+ 8775 36 FF                                ld      (hl),$FF
  73+ 8777 C9                                   ret
  74+ 8778
  75+ 8778              ; Space Station will always be slot 0
  76+ 8778 21 BF 83     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 877B 0E 01                                ld      c,1
  78+ 877D 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 877F 7E           .NextShip:              ld      a,(hl)
  80+ 8780 FE 03                                cp      ShipTypeJunk
  81+ 8782 CA 93 87                             jp      z,.ProcessJunk
  82+ 8785 FE 04                                cp      ShipTypeScoopable
  83+ 8787 CA 93 87                             jp      z,.ProcessJunk
  84+ 878A 23           .DoneIteration:         inc     hl
  85+ 878B 0C                                   inc     c
  86+ 878C 10 F1                                djnz    .NextShip
  87+ 878E                                      ClearJunkCount
  87+ 878E             >                        ZeroA
  87+ 878E AF          >                        xor a
  87+ 878F 32 91 82    >                        ld      (JunkCount),a
  88+ 8792 C9                                   ret
  89+ 8793 79           .ProcessJunk:           ld      a,c
  90+ 8794 CD 6A 87                             call    ClearSlotA
  91+ 8797 C3 8A 87                             jp      .DoneIteration
  92+ 879A
  93+ 879A
  94+ 879A 21 BF 83     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 879D 0E 01                                ld      c,1
  96+ 879F 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 87A1 7E           .NextShip:              ld      a,(hl)
  98+ 87A2 FE 03                                cp      ShipTypeJunk
  99+ 87A4 CA B1 87                             jp      z,.ProcessJunk
 100+ 87A7 FE 04                                cp      ShipTypeScoopable
 101+ 87A9 CA B1 87                             jp      z,.ProcessJunk
 102+ 87AC 23           .DoneIteration:         inc     hl
 103+ 87AD 0C                                   inc     c
 104+ 87AE 10 F1                                djnz    .NextShip
 105+ 87B0 C9                                   ret
 106+ 87B1 79           .ProcessJunk:           ld      a,c
 107+ 87B2                                      MMUSelectUniverseA
 107+ 87B2 C6 46       >                     add    a,BankUNIVDATA0
 107+ 87B4 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 87B7 CD 9E C7                             call    WarpOffset
 109+ 87BA C3 AC 87                             jp      .DoneIteration
 110+ 87BD
 111+ 87BD
 112+ 87BD 21 BF 83     AreShipsPresent:        ld      hl,UniverseSlotType+1
 113+ 87C0 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 114+ 87C2 7E           .NextShip:              ld      a,(hl)
 115+ 87C3 FE 00                                cp      ShipTypeNormal
 116+ 87C5                                      ClearCarryFlag
 116+ 87C5 B7          >                        or a
 117+ 87C6 C8                                   ret     z
 118+ 87C7 23                                   inc     hl
 119+ 87C8 10 F8                                djnz    .NextShip
 120+ 87CA                                      SetCarryFlag
 120+ 87CA 37          >                        scf
 121+ 87CB C9                                   ret
 122+ 87CC
 123+ 87CC 21 B2 83     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 124+ 87CF                                      ClearCarryFlag
 124+ 87CF B7          >                        or a
 125+ 87D0 7E           .SearchLoop:            ld      a,(hl)
 126+ 87D1                                      ReturnIfAEqNusng ShipTypeStation
 126+ 87D1 FE 02       >                        cp      ShipTypeStation
 126+ 87D3 C8          >                        ret     z
 127+ 87D4                                      SetCarryFlag
 127+ 87D4 37          >                        scf
 128+ 87D5 C9                                   ret
 129+ 87D6
 130+ 87D6 21 B2 83     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 131+ 87D9 ED 31                                add     hl,a
 132+ 87DB 7E                                   ld      a,(hl)
 133+ 87DC C9                                   ret
 134+ 87DD
 135+ 87DD 21 B3 83     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 136+ 87E0 7E                                   ld      a,(hl)
 137+ 87E1 C9                                   ret
 138+ 87E2
 139+ 87E2 21 B2 83     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 140+ 87E5 06 0C                                ld      b, UniverseSlotListSize
 141+ 87E7 0E 00                                ld      c, 0
 142+ 87E9 7E           .SearchLoop:            ld      a,(hl)
 143+ 87EA                                      JumpIfAEqNusng $FF, .FoundSlot
 143+ 87EA FE FF       >                        cp     $FF
 143+ 87EC CA F5 87    >                        jp      z,.FoundSlot
 144+ 87EF 0C                                   inc     c
 145+ 87F0 23                                   inc     hl
 146+ 87F1 10 F6                                djnz    .SearchLoop
 147+ 87F3                                      SetCarryFlag
 147+ 87F3 37          >                        scf
 148+ 87F4 C9                                   ret
 149+ 87F5              .FoundSlot:             ClearCarryFlag
 149+ 87F5 B7          >                        or a
 150+ 87F6 C9                                   ret
 151+ 87F7
 152+ 87F7
 153+ 87F7 CD E2 87     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 154+ 87FA 79                                   ld      a,c
 155+ 87FB C9                                   ret
 156+ 87FC
# file closed: ./Variables/UniverseSlotRoutines.asm
 597  87FC                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 87FC 00           AutoDocking				DB	0				; $033F
   2+ 87FD 00           PlayerECM				DB	0				; $0340
   3+ 87FE 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 87FF 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 8800 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 8804 19           Fuel					DB	25				; 0365  QQ14
   7+ 8805 46           CargoBaySize			DB	70				; 036E
   8+ 8806 00           CargoRunningLoad        DB  0
   9+ 8807 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 880B 00 00 00 00
   9+ 880F 00 00 00 00
   9+ 8813 00 00 00 00
  10+ 8817              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 8817              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 8817              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 8817              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 8817              GoldCargoKGs:           equ CargoTonnes+15
  15+ 8817              AlienItemsTonnes        equ CargoTonnes+17
  16+ 8817              ; For each view laser a localised copy of the stats
  17+ 8817              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 8817 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 881B 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 881F              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 881F              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 881F              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 881F              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 881F              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 881F              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 881F              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 881F              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 881F
  29+ 881F
  30+ 881F              QQ20                    equ CargoTonnes
  31+ 881F 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 8839              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 8839              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 8839              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 8839              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 8839              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 8839              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 8839              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 8839 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 883A
# file closed: ./Variables/EquipmentVariables.asm
 598  883A                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 883A              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 883A              doRND2:
   3+ 883A A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 883B              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 883B              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 883B              ; uses a c h l registers
   7+ 883B              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 883B 3A E9 80                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 883E CB 17                                rl		a								; Rotate L including carry
  10+ 8840 4F                                   ld		c,a								; c =  double lo
  11+ 8841 21 EB 80     .AddSeed2:              ld		hl,RandomSeed2
  12+ 8844 8E                                   adc		a,(hl)							; RAND+2
  13+ 8845 32 E9 80     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 8848 08           .SaveBtoSeed2:          ex		af,af'
  15+ 8849 79                                   ld		a,c
  16+ 884A 32 EB 80                             ld		(RandomSeed2),a
  17+ 884D 08                                   ex		af,af'
  18+ 884E 3A EA 80                             ld		a,(RandomSeed1)
  19+ 8851 4F                                   ld		c,a								; C = Seed1
  20+ 8852 21 EC 80     .AddSeed3:              ld		hl,RandomSeed3
  21+ 8855 8E                                   adc		a,(hl)
  22+ 8856 32 EA 80                             ld		(RandomSeed1),a
  23+ 8859 08                                   ex		af,af'
  24+ 885A 79                                   ld		a,c
  25+ 885B 32 EC 80                             ld		(RandomSeed3),a
  26+ 885E 08                                   ex		af,af'
  27+ 885F                                      ;exx                                     ; get bc,de,hl back
  28+ 885F C9                                   ret
  29+ 8860
  30+ 8860 21 E9 80     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 8863 11 ED 80                             ld      de,RandomSeedSave
  32+ 8866 01 04 00                             ld      bc,4
  33+ 8869 ED A0                                ldi
  34+ 886B ED A0                                ldi
  35+ 886D ED A0                                ldi
  36+ 886F ED A0                                ldi
  37+ 8871 C9                                   ret
  38+ 8872
  39+ 8872 21 ED 80     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 8875 11 E9 80                             ld      de,RandomSeed
  41+ 8878 01 04 00                             ld      bc,4
  42+ 887B ED A0                                ldi
  43+ 887D ED A0                                ldi
  44+ 887F ED A0                                ldi
  45+ 8881 ED A0                                ldi
  46+ 8883 C9                                   ret
# file closed: ./Variables/random_number.asm
 599  8884                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8884 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 8888 58 59 53 45
   1+ 888C 45 44
   2+ 888E 21 83 82     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8891 11 5F 82                             ld		de,SystemSeed
   4+ 8894 ED A0        copy_seed:		        ldi
   5+ 8896 ED A0                                ldi
   6+ 8898 ED A0                                ldi
   7+ 889A ED A0                                ldi
   8+ 889C ED A0                                ldi
   9+ 889E ED A0                                ldi
  10+ 88A0 C9                                   ret
  11+ 88A1
  12+ 88A1 21 5F 82     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 88A4 11 83 82                             ld		de,GalaxySeeds
  14+ 88A7 18 EB                                jr		copy_seed
  15+ 88A9
  16+ 88A9 21 83 82     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 88AC 11 77 82                             ld		de,WorkingSeeds
  18+ 88AF 18 E3                                jr		copy_seed
  19+ 88B1
  20+ 88B1 21 77 82     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 88B4 11 83 82                             ld		de,GalaxySeeds
  22+ 88B7 18 DB                                jr		copy_seed
  23+ 88B9
  24+ 88B9 21 77 82     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 88BC 11 5F 82                             ld		de,SystemSeed
  26+ 88BF 18 D3                                jr		copy_seed
  27+ 88C1
  28+ 88C1 21 5F 82     copy_system_to_working: ld		hl,SystemSeed
  29+ 88C4 11 77 82                             ld		de,WorkingSeeds
  30+ 88C7 18 CB                                jr		copy_seed
  31+ 88C9
  32+ 88C9              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 88C9 CD CC 88     		call	.NextStep					; This logic means we hard code x4
  34+ 88CC              .NextStep:
  35+ 88CC CD CF 88     		call	process_seed				; This logic means we hard code x2
  36+ 88CF              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 88CF 3A 5F 82     		ld		a,(SystemSeed)				; QQ15
  38+ 88D2 B7           		or		a							; clear carry flag
  39+ 88D3 21 61 82     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 88D6 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 88D7 47           		ld		b,a							; partial sum lo
  42+ 88D8 3A 60 82     		ld		a,(SystemSeed+1)
  43+ 88DB 21 62 82     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 88DE 8E           		adc		a,(hl)						; note add with carry
  45+ 88DF 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 88E0 3A 61 82     		ld		a,(SystemSeed+2)
  47+ 88E3 32 5F 82     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 88E6 3A 62 82     		ld		a,(SystemSeed+3)
  49+ 88E9 32 60 82     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 88EC 3A 64 82     		ld		a,(SystemSeed+5)
  51+ 88EF 32 62 82     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 88F2 3A 63 82     		ld		a,(SystemSeed+4)
  53+ 88F5 32 61 82     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 88F8 B7           		or		a
  55+ 88F9 78           		ld		a,b
  56+ 88FA 21 61 82     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 88FD 86           		add	    a,(hl)
  58+ 88FE 32 63 82     		ld		(SystemSeed+4),a
  59+ 8901 79           		ld		a,c
  60+ 8902 21 62 82     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 8905 8E           		adc		a,(hl)
  62+ 8906 32 64 82     		ld		(SystemSeed+5),a
  63+ 8909 C9           		ret
  64+ 890A
  65+ 890A              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 890A CD 0D 89     		call	.NextStep					; This logic means we hard code x4
  67+ 890D              .NextStep:
  68+ 890D CD 10 89     		call	working_seed				; This logic means we hard code x2
  69+ 8910              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 8910              ; x = a + c
  71+ 8910 3A 77 82     		ld		a,(WorkingSeeds)			; QQ15
  72+ 8913 B7           		or		a							; clear carry flag
  73+ 8914 21 79 82     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 8917 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 8918 47           		ld		b,a							; partial sum lo [x]
  76+ 8919              ; y = b + d	+ carry
  77+ 8919 3A 78 82     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 891C 21 7A 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 891F 8E           		adc		a,(hl)						; note add with carry
  80+ 8920 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 8921 3A 79 82     		ld		a,(WorkingSeeds+2)
  82+ 8924 32 77 82     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 8927 3A 7A 82     		ld		a,(WorkingSeeds+3)
  84+ 892A 32 78 82     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 892D 3A 7C 82     		ld		a,(WorkingSeeds+5)
  86+ 8930 32 7A 82     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 8933 3A 7B 82     		ld		a,(WorkingSeeds+4)
  88+ 8936 32 79 82     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 8939 B7           		or		a
  90+ 893A 78           		ld		a,b
  91+ 893B 21 79 82     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 893E 86           		add	    a,(hl)
  93+ 893F 32 7B 82     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 8942 79           		ld		a,c
  95+ 8943 21 7A 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 8946 8E           		adc		a,(hl)
  97+ 8947 32 7C 82     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 894A C9           		ret
  99+ 894B
 100+ 894B 32           working_distX	DB 50
 101+ 894C 32           working_distY	DB 50
 102+ 894D 00           current_distY	DB 0
 103+ 894E
 104+ 894E AF           find_present_system:    xor		a
 105+ 894F 32 F8 81                             ld		(XSAV),a
 106+ 8952 3A 60 82     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8955 4F                                   ld		c,a
 108+ 8956 3A 8A 82     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 8959 47                                   ld		b,a								; so b holds Y ccord
 110+ 895A 79                                   ld		a,c
 111+ 895B 90                                   sub		b
 112+ 895C CB 7F                                bit		7,a
 113+ 895E 28 02                                jr		z,.positivedy
 114+ 8960 ED 44        .negativedy:            neg
 115+ 8962 32 4D 89     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8965 ED 5B 4B 89                          ld		de,(working_distX)
 117+ 8969 BA                                   cp		d
 118+ 896A 30 24                                jr		nc,.toofar
 119+ 896C 3A 62 82     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 896F 4F                                   ld		c,a
 121+ 8970 3A 89 82                             ld		a,(PresentSystemX)
 122+ 8973 47                                   ld		b,a								; so b holds Y ccord
 123+ 8974 79                                   ld		a,c
 124+ 8975 90                                   sub		b
 125+ 8976 CB 7F                                bit		7,a
 126+ 8978 28 02                                jr		z,.positivedx
 127+ 897A ED 44        .negativedx:            neg
 128+ 897C 4F           .positivedx:            ld		c,a
 129+ 897D BB                                   cp		e
 130+ 897E 30 10                                jr		nc,.toofar
 131+ 8980 3A 4D 89     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8983 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8984 ED 43 4B 89                          ld		(working_distX),bc
 134+ 8988 C5                                   push	bc
 135+ 8989 CD C1 88                             call 	copy_system_to_working
 136+ 898C C1                                   pop		bc
 137+ 898D 78                                   ld		a,b								;
 138+ 898E B1                                   or		c								;
 139+ 898F C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8990 CD C9 88     .toofar:                call	next_system_seed
 141+ 8993 3A F8 81                             ld		a,(XSAV)
 142+ 8996 3D                                   dec		a
 143+ 8997 FE 00                                cp		0
 144+ 8999 C8                                   ret		z
 145+ 899A 32 F8 81                             ld		(XSAV),a
 146+ 899D 18 B3                                jr		.CounterLoop
 147+ 899F
 148+ 899F              get_planet_data_working_seed:
 149+ 899F 3A 78 82     		ld		a, (WorkingSeeds+1)
 150+ 89A2 E6 07        		and		7
 151+ 89A4 32 A4 82     		ld		(DisplayEcononmy),a
 152+ 89A7 3A 79 82     		ld		a, (WorkingSeeds+2)
 153+ 89AA CB 3F        		srl	a
 154+ 89AC CB 3F        		srl	a
 155+ 89AE CB 3F        		srl	a
 156+ 89B0 CB 3F        		srl	a								; c/8
 157+ 89B2 E6 07        		and		7
 158+ 89B4 32 A5 82     		ld		(DisplayGovernment),a
 159+ 89B7 CB 3F        		srl	a
 160+ 89B9 FE 00        		cp		0
 161+ 89BB 20 08        		jr		nz,.CanBeRich
 162+ 89BD              .Fedual:
 163+ 89BD 3A A4 82     		ld		a,(DisplayEcononmy)
 164+ 89C0 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 89C2 32 A4 82     		ld		(DisplayEcononmy),a
 166+ 89C5              .CanBeRich:
 167+ 89C5 3A A4 82     		ld		a,(DisplayEcononmy)
 168+ 89C8 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 89CA 32 A6 82     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 89CD 47           		ld		b,a
 171+ 89CE 3A 7A 82     		ld		a,(WorkingSeeds+3)
 172+ 89D1 E6 03        		and		3
 173+ 89D3 80           		add		a,b
 174+ 89D4 32 A6 82     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 89D7 3A A5 82     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 89DA CB 3F        		srl		a 							; gov/2
 177+ 89DC 47           		ld		b,a
 178+ 89DD 3A A6 82     		ld		a,(DisplayTekLevel)
 179+ 89E0 80           		add		a,b
 180+ 89E1 32 A6 82     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 89E4 CB 27        		sla		a
 182+ 89E6 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 89E8 47           		ld		b,a
 184+ 89E9 3A A4 82     		ld		a,(DisplayEcononmy)
 185+ 89EC 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 89ED 47           		ld		b,a
 187+ 89EE 3A A5 82     		ld		a,(DisplayGovernment)
 188+ 89F1 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 89F2 32 A7 82     		ld		(DisplayPopulation),a
 190+ 89F5 3A A4 82     		ld		a,(DisplayEcononmy)
 191+ 89F8 EE 07        		xor		7							; Onto productivity
 192+ 89FA C6 03        		add		3							;  (Flipped eco +3)
 193+ 89FC 57           		ld		d,a
 194+ 89FD 3A A5 82     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 8A00 C6 04        		add		4
 196+ 8A02 5F           		ld		e,a
 197+ 8A03 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 8A05 3A A7 82     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 8A08 57           		ld		d,a
 200+ 8A09 ED 30        		mul
 201+ 8A0B CB 23        		sla		e
 202+ 8A0D CB 1A        		rr		d
 203+ 8A0F CB 23        		sla		e
 204+ 8A11 CB 1A        		rr		d
 205+ 8A13 CB 23        		sla		e
 206+ 8A15 CB 1A        		rr		d							; de * 8
 207+ 8A17 ED 53 A9 82  		ld		(DisplayProductivity),de
 208+ 8A1B              .DoRadius:
 209+ 8A1B 3A 7A 82     		ld		a,(WorkingSeeds+3)
 210+ 8A1E 4F           		ld		c,a
 211+ 8A1F 3A 7C 82     		ld		a,(WorkingSeeds+5)
 212+ 8A22 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 8A24 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 8A26 47           		ld		b,a							;
 215+ 8A27 ED 43 AD 82  		ld		(DisplayRadius),bc
 216+ 8A2B C9           		ret
 217+ 8A2C
# file closed: ./Variables/galaxy_seed.asm
 600  8A2C                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 8A2C 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 8A30 65 00
   2+ 8A32 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 8A36 00
   3+ 8A37 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 8A3B 74 61 72 79
   3+ 8A3F 00
   4+ 8A40 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 8A44 6E 67 00
   5+ 8A47 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 8A4B 6F 6D 00
   6+ 8A4E
   7+ 8A4E 2C 8A 32 8A  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 8A52 37 8A 40 8A
   7+ 8A56 47 8A
   8+ 8A58              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8A58
  10+ 8A58 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 8A5C 65 64 00
  11+ 8A5F 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8A63 6E 00
  12+ 8A65 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 8A69 6F 77 00
  13+ 8A6C 52 65 64 00  ConditionName4		DB "Red",0
  14+ 8A70
  15+ 8A70 58 8A 5F 8A  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8A74 65 8A 6C 8A
  16+ 8A78              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8A78
  18+ 8A78 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 8A7C 53 45 49 54
  18+ 8A80 49 4C 45 54
  18+ 8A84 53 54 4F 4E
  18+ 8A88 4C 4F 4E 55
  18+ 8A8C 54 48 4E 4F
  18+ 8A90 41 4C 4C 45
  18+ 8A94 58 45 47 45
  18+ 8A98 5A 41 43 45
  18+ 8A9C 42 49 53 4F
  18+ 8AA0 55 53 45 53
  18+ 8AA4 41 52 4D 41
  18+ 8AA8 49 4E 44 49
  18+ 8AAC 52 45 41 3F
  18+ 8AB0 45 52 41 54
  18+ 8AB4 45 4E 42 45
  18+ 8AB8 52 41 4C 41
  18+ 8ABC 56 45 54 49
  18+ 8AC0 45 44 4F 52
  18+ 8AC4 51 55 41 4E
  18+ 8AC8 54 45 49 53
  18+ 8ACC 52 49 4F 4E
  18+ 8AD0 00
  19+ 8AD1
  20+ 8AD1 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 8AD5 08 00 10 00
  20+ 8AD9 20 00 00 01
  20+ 8ADD 00 02 00 0A
  20+ 8AE1 00 19 FF C1
  20+ 8AE5 FF FF
  21+ 8AE7 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 8AEB 0F 00 1F 00
  21+ 8AEF FF 00 FF 01
  21+ 8AF3 FF 09 FF 18
  21+ 8AF7 FF C0 FF FE
  21+ 8AFB FF FF
  22+ 8AFD
  23+ 8AFD 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 8B01 6C 65 73 73
  23+ 8B05 00
  24+ 8B06 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 8B0A 6C 79 20 48
  24+ 8B0E 61 72 6D 6C
  24+ 8B12 65 73 73 00
  25+ 8B16 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 8B1A 00
  26+ 8B1B 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 8B1F 61 67 65 00
  27+ 8B23 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 8B27 65 20 41 76
  27+ 8B2B 65 72 61 67
  27+ 8B2F 65 00
  28+ 8B31 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 8B35 65 74 65 6E
  28+ 8B39 74 00
  29+ 8B3B 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 8B3F 65 72 6F 75
  29+ 8B43 73 00
  30+ 8B45 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 8B49 6C 79 00
  31+ 8B4C 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 8B50 20 45 20 4C
  31+ 8B54 20 49 20 54
  31+ 8B58 20 45 20 2D
  31+ 8B5C 2D 2D 00
  32+ 8B5F 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 8B63 6C 6F 62 73
  32+ 8B67 67 6F 64 00
  33+ 8B6B 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 8B6F 65 72 00
  34+ 8B72
  35+ 8B72              RankingEQHarmless	EQU 0
  36+ 8B72              RankingEQMostly		EQU 1
  37+ 8B72              RankingEQPoor		EQU 2
  38+ 8B72              RankingEQAverage	EQU 3
  39+ 8B72              RankingEQAbove		EQU 4
  40+ 8B72              RankingEQCompetent  EQU 5
  41+ 8B72              RankingEQDangerous	EQU 6
  42+ 8B72              RankingEQDeadly		EQU 7
  43+ 8B72              RankingEQElite		EQU 8
  44+ 8B72              RankingEQSkollob	EQU 9
  45+ 8B72              RankingEQNutter		EQU 10
  46+ 8B72
  47+ 8B72
  48+ 8B72
  49+ 8B72 FD 8A 06 8B  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8B76 16 8B 1B 8B
  49+ 8B7A 23 8B 31 8B
  49+ 8B7E 3B 8B 45 8B
  49+ 8B82 4C 8B 5F 8B
  49+ 8B86 6B 8B
  50+ 8B88              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8B88
  52+ 8B88
  53+ 8B88              getTableText:
  54+ 8B88              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  55+ 8B88              ; ">Note for ranking first 2 bytes are target rank"
  56+ 8B88 D5           	push	de								; save DE as we will likley need it in caller
  57+ 8B89 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  58+ 8B8B ED 31        	add		hl,a
  59+ 8B8D 5E           	ld		e,(hl)
  60+ 8B8E 23           	inc		hl
  61+ 8B8F 56           	ld		d,(hl)							; de = indexed address
  62+ 8B90 EB           	ex		de,hl							; flip it to hl
  63+ 8B91 D1           	pop		de								; retrieve de
  64+ 8B92 C9           	ret										; return with hl as start entry
  65+ 8B93
  66+ 8B93
  67+ 8B93              ;               CF      ZF      Result
  68+ 8B93              ;               -----------------------------------
  69+ 8B93              ;               0       0       HL > DE
  70+ 8B93              ;               0       1       HL == DE
  71+ 8B93              ;               1       0       HL < DE
  72+ 8B93              ;               1       1       Impossible
  73+ 8B93              getRankIndex:
  74+ 8B93              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  75+ 8B93              ; ">Note for ranking first 2 bytes are target rank"
  76+ 8B93 7A           	ld		a,d
  77+ 8B94 B3           	or		e
  78+ 8B95 FE 00        	cp		0
  79+ 8B97 C8           	ret		z								; quicks skip for 0 kills
  80+ 8B98 AF           	xor 	a
  81+ 8B99 21 D1 8A     	ld		hl,RankingTableLow
  82+ 8B9C              .testLoop:
  83+ 8B9C 4E           	ld		c,(hl)
  84+ 8B9D 23           	inc		hl
  85+ 8B9E 46           	ld		b,(hl)							; bc = ranking
  86+ 8B9F E5           	push	hl
  87+ 8BA0 60           	ld		h,b
  88+ 8BA1 69           	ld		l,c
  89+ 8BA2 CD B6 99     	call	compare16HLDE
  90+ 8BA5 38 06        	jr		c,.HLLTDE
  91+ 8BA7              .HLGTEDE									; Found the correct rank
  92+ 8BA7 E1           	pop		hl
  93+ 8BA8 23           	inc		hl								; move to next value
  94+ 8BA9 23           	inc		hl
  95+ 8BAA 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  96+ 8BAB 18 EF        	jr		.testLoop
  97+ 8BAD              .HLLTDE:									; HL < Kills so found correct rank
  98+ 8BAD E1           	pop		hl
  99+ 8BAE C9           	ret
 100+ 8BAF
# file closed: ./Tables/text_tables.asm
 601  8BAF                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 8BAF              ; Could move this into rom area for access as it will be read only
   2+ 8BAF 58 00        WordDummy					DB  "X",0
   3+ 8BB1 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8BB5 74 00
   4+ 8BB7 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 8BBB 74 00
   5+ 8BBD 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 8BC1 00
   6+ 8BC2 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 8BC6 00
   7+ 8BC7 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 8BCB 65 00
   8+ 8BCD 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 8BD1 70 65 00
   9+ 8BD4 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 8BD8 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 8BDC 6F 00
  11+ 8BDE 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 8BE2 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 8BE6 00
  13+ 8BE7 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 8BEB 70 73 00
  14+ 8BEE 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 8BF2 4D 2E 00
  15+ 8BF5 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 8BF9 65 6D 00
  16+ 8BFC 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 8C00 67 79 00
  17+ 8C03 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 8C07 00
  18+ 8C08 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 8C0C 72 00
  19+ 8C0E 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 8C12 65 00
  20+ 8C14 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 8C18 00
  21+ 8C19 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 8C1D 61 72 79 00
  22+ 8C21 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 8C25 6E 67 00
  23+ 8C28 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 8C2C 6F 6D 00
  24+ 8C2F 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 8C33 00
  25+ 8C34 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8C38 6C 64 00
  26+ 8C3B 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 8C3F 69 6E 67 00
  27+ 8C43 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8C47 75 74 65 72
  27+ 8C4B 73 00
  28+ 8C4D 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8C51 72 73 70 61
  28+ 8C55 63 65 00
  29+ 8C58 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 8C5C 63 74 69 63
  29+ 8C60 00
  30+ 8C61 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8C65 61 00
  31+ 8C67 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 8C6B 6E 00
  32+ 8C6D 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8C71 6E 64 65 72
  32+ 8C75 00
  33+ 8C76 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8C7A 74 69 76 65
  33+ 8C7E 00
  34+ 8C7F 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8C83 00
  35+ 8C84 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8C88 69 6C 65 73
  35+ 8C8C 00
  36+ 8C8D 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8C91 6F 61 63 74
  36+ 8C95 69 76 65 73
  36+ 8C99 00
  37+ 8C9A 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 8C9E 65 73 00
  38+ 8CA1 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8CA5 6F 72 2F 57
  38+ 8CA9 69 6E 65 73
  38+ 8CAD 00
  39+ 8CAE 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8CB2 72 69 65 73
  39+ 8CB6 00
  40+ 8CB7 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 8CBB 6F 74 69 63
  40+ 8CBF 73 00
  41+ 8CC1 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 8CC5 69 6E 65 72
  41+ 8CC9 79 00
  42+ 8CCB 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 8CCF 79 73 00
  43+ 8CD2 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 8CD6 61 72 6D 73
  43+ 8CDA 00
  44+ 8CDB 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 8CDF 00
  45+ 8CE0 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 8CE4 72 61 6C 73
  45+ 8CE8 00
  46+ 8CE9 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 8CED 00
  47+ 8CEE 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 8CF2 69 6E 75 6D
  47+ 8CF6 00
  48+ 8CF7 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 8CFB 53 74 6F 6E
  48+ 8CFF 65 73 00
  49+ 8D02 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 8D06 6E 20 49 74
  49+ 8D0A 65 6D 73 00
  50+ 8D0E 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 8D12 65 73 00
  51+ 8D15 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 8D19 67 72 61 6D
  51+ 8D1D 73 00
  52+ 8D1F 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 8D23 73 00
  53+ 8D25 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 8D29 74 00
  54+ 8D2B 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 8D2F 65 00
  55+ 8D31 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8D35 74 00
  56+ 8D37 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8D3B 00
  57+ 8D3C 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8D3F 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8D43 61 6E 63 65
  58+ 8D47 00
  59+ 8D48 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8D4C 6F 6D 79 00
  60+ 8D50 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8D54 72 6E 6D 65
  60+ 8D58 6E 74 00
  61+ 8D5B 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8D5F 4C 65 76 65
  61+ 8D63 6C 00
  62+ 8D65 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8D69 6C 61 74 69
  62+ 8D6D 6F 6E 00
  63+ 8D70 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8D74 69 6F 6E 00
  64+ 8D78 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8D7C 69 6F 6E 00
  65+ 8D80 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8D84 73 00
  66+ 8D86 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8D8A 75 63 74 69
  66+ 8D8E 76 69 74 79
  66+ 8D92 00
  67+ 8D93 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8D97 61 67 65 00
  68+ 8D9B 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8D9F 75 73 00
  69+ 8DA2 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8DA5 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 8DA9 00
  71+ 8DAA 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 8DAE 00
  72+ 8DAF 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8DB3 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8DB7 6C 79 00
  74+ 8DBA 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 8DBE 00
  75+ 8DBF 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 8DC3 73 74 72 69
  75+ 8DC7 61 6C 00
  76+ 8DCA 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 8DCE 63 75 6C 74
  76+ 8DD2 75 72 61 6C
  76+ 8DD6 00
  77+ 8DD7 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 8DDB 63 68 79 00
  78+ 8DDF 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 8DE3 61 6C 00
  79+ 8DE6 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 8DEA 69 2D 47 6F
  79+ 8DEE 76 65 72 6E
  79+ 8DF2 6D 65 6E 74
  79+ 8DF6 00
  80+ 8DF7 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 8DFB 61 74 6F 72
  80+ 8DFF 73 68 69 70
  80+ 8E03 00
  81+ 8E04 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8E08 75 6E 69 73
  81+ 8E0C 74 00
  82+ 8E0E 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8E12 65 64 65 72
  82+ 8E16 61 63 79 00
  83+ 8E1A 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8E1E 63 72 61 63
  83+ 8E22 79 00
  84+ 8E24 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8E28 6F 72 61 74
  84+ 8E2C 65 20 53 74
  84+ 8E30 61 74 65 00
  85+ 8E34 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8E38 65 00
  86+ 8E3A 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8E3E 74 00
  87+ 8E40 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8E44 73 00
  88+ 8E46 30 00        Word0						DB  "0",0				   ;86
  89+ 8E48 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8E4C 65 74 00
  90+ 8E4F 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8E53 65 73 00
  91+ 8E56 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8E5A 75 63 74 00
  92+ 8E5E 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8E62 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8E66 65 00
  94+ 8E68 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8E6C 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8E70 00
  96+ 8E71 74 00        Wordt						DB  "t",0                  ;94
  97+ 8E73 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8E76 67 00        Wordg						DB  "g",0                  ;96
  99+ 8E78 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8E7C 69 74 69 74
  99+ 8E80 79 00
 100+ 8E82 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8E86 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8E8A 6B 00
 102+ 8E8C 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8E90 70 00
 103+ 8E92 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8E96 00
 104+ 8E97              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8E97 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8E9B 72 64 72 69
 105+ 8E9F 76 65 00
 106+ 8EA2 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8EA6 74 61 72 79
 106+ 8EAA 00
 107+ 8EAB 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8EAF 72 00
 108+ 8EB1 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8EB5 6F 6E 64 61
 108+ 8EB9 00
 109+ 8EBA 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8EBE 4D 6B 5F 32
 109+ 8EC2 00
 110+ 8EC3 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8EC7 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8ECB 6F 54 79 70
 111+ 8ECF 65 35 00
 112+ 8ED2 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8ED6 64 65 72 00
 113+ 8EDA 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8EDE 72 6F 69 64
 113+ 8EE2 00
 114+ 8EE3 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8EE7 6D 61 73 74
 114+ 8EEB 65 72 00
 115+ 8EEE 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8EF2 65 6C 65 6F
 115+ 8EF6 6E 00
 116+ 8EF8 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8EFC 61 4D 6B 33
 116+ 8F00 00
 117+ 8F01 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8F05 61 5F 4D 6B
 117+ 8F09 5F 31 00
 118+ 8F0C 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8F10 61 5F 4D 6B
 118+ 8F14 5F 33 5F 50
 118+ 8F18 00
 119+ 8F19 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8F1D 74 72 69 63
 119+ 8F21 74 6F 72 00
 120+ 8F25 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8F29 6F 6C 69 73
 120+ 8F2D 00
 121+ 8F2E 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8F32 61 72 00
 122+ 8F35 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8F39 00
 123+ 8F3A 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8F3E 6F 6E 00
 124+ 8F41 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8F45 70 65 5F 50
 124+ 8F49 6F 64 00
 125+ 8F4C 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8F50 44 65 5F 4C
 125+ 8F54 61 6E 63 65
 125+ 8F58 00
 126+ 8F59 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8F5D 6F 00
 127+ 8F5F 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8F63 69 61 6C 00
 128+ 8F67 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8F6B 6E 61 00
 129+ 8F6E 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8F72 74 00
 130+ 8F74 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8F78 00
 131+ 8F79 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8F7D 61 00
 132+ 8F7F 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8F83 69 6C 65 00
 133+ 8F87 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8F8B 74 6F 72 00
 134+ 8F8F 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8F93 79 00
 135+ 8F95 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8F99 64 69 61 6E
 135+ 8F9D 00
 136+ 8F9E 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8FA2 65 00
 137+ 8FA4 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8FA8 6F 6E 00
 138+ 8FAB 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8FAF 6F 6E 5F 50
 138+ 8FB3 00
 139+ 8FB4 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8FB8 5F 48 65 72
 139+ 8FBC 6D 69 74 00
 140+ 8FC0 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8FC4 74 6C 65 54
 140+ 8FC8 79 70 65 39
 140+ 8FCC 00
 141+ 8FCD 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8FD1 74 6C 65 5F
 141+ 8FD5 4D 6B 5F 32
 141+ 8FD9 00
 142+ 8FDA 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8FDE 77 69 6E 64
 142+ 8FE2 65 72 00
 143+ 8FE5 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8FE9 6E 74 65 72
 143+ 8FED 00
 144+ 8FEE 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8FF2 56 65 63 74
 144+ 8FF6 6F 72 00
 145+ 8FF9 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8FFD 67 6F 69 64
 145+ 9001 00
 146+ 9002 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 9006 67 6F 6E 00
 147+ 900A 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 900E 73 70 6F 72
 147+ 9012 74 54 79 70
 147+ 9016 65 31 30 00
 148+ 901A 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 901E 72 00
 149+ 9020 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 9024 00
 150+ 9025 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 9029 6C 65 72 00
 151+ 902D
 152+ 902D AF 8B B1 8B  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 9031 B7 8B BD 8B
 153+ 9035 C2 8B C7 8B  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 9039 CD 8B D4 8B
 154+ 903D D8 8B DE 8B  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 9041 E2 8B E7 8B
 155+ 9045 EE 8B F5 8B  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 9049 FC 8B 03 8C
 156+ 904D 08 8C 0E 8C  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 9051 14 8C 19 8C
 157+ 9055 21 8C 28 8C  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 9059 2F 8C 34 8C
 158+ 905D 3B 8C 43 8C  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 9061 4D 8C 58 8C
 159+ 9065 61 8C 67 8C  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 9069 6D 8C 76 8C
 160+ 906D 7F 8C 84 8C  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 9071 8D 8C 9A 8C
 161+ 9075 A1 8C AE 8C  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 9079 B7 8C C1 8C
 162+ 907D CB 8C D2 8C  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 9081 DB 8C E0 8C
 163+ 9085 E9 8C EE 8C  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 9089 F7 8C 02 8D
 164+ 908D 0E 8D 15 8D  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 9091 1F 8D 25 8D
 165+ 9095 2B 8D 31 8D  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 9099 37 8D 3C 8D
 166+ 909D 3F 8D 48 8D  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 90A1 50 8D 5B 8D
 167+ 90A5 65 8D 70 8D  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 90A9 78 8D 80 8D
 168+ 90AD 86 8D 93 8D  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 90B1 9B 8D A2 8D
 169+ 90B5 A5 8D        					DW  WordMCR																	;68
 170+ 90B7 AA 8D AF 8D  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 90BB B3 8D BA 8D
 171+ 90BF BF 8D CA 8D                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 90C3 D7 8D DF 8D  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 90C7 E6 8D F7 8D
 173+ 90CB 04 8E 0E 8E                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 90CF 1A 8E 24 8E
 174+ 90D3 34 8E 3A 8E  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 90D7 40 8E 46 8E
 175+ 90DB 48 8E 4F 8E  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 90DF 56 8E 5E 8E
 176+ 90E3 62 8E 68 8E                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 90E7 6C 8E
 177+ 90E9 71 8E 73 8E  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 90ED 76 8E
 178+ 90EF 78 8E 82 8E  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 90F3 86 8E 8C 8E
 179+ 90F7 92 8E 7F 8F                      DW  WordShip,           WordMissile       ; 101
 180+ 90FB AB 8E B1 8E  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 90FF BA 8E C3 8E
 181+ 9103 C7 8E D2 8E                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 9107 DA 8E E3 8E
 182+ 910B EE 8E F8 8E                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 910F 01 8F 0C 8F
 183+ 9113 19 8F 25 8F                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 9117 2E 8F 35 8F
 184+ 911B 3A 8F 41 8F                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 911F 4C 8F 59 8F
 185+ 9123 5F 8F 67 8F                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 9127 6E 8F 74 8F
 186+ 912B 79 8F 7F 8F                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 912F 87 8F 8F 8F
 187+ 9133 95 8F 9E 8F                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 9137 A4 8F AB 8F
 188+ 913B B4 8F C0 8F                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 913F CD 8F DA 8F
 189+ 9143 E5 8F EE 8F                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 9147 F9 8F 02 90
 190+ 914B 0A 90 1A 90                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 914F 20 90 25 90
 191+ 9153              ; Phrases
 192+ 9153 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 9157 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 915A 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 915D 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 9160 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 9163 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 9166 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 9169 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 916C 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 9170 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 9174 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 9178 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 917C 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 9180 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 9183 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 9186 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 9189 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 918C 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 918F 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 9192 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 9195 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 9198 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 919B 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 919E 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 91A1 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 91A5 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 91A8 64 65        TextEquipShip               DB  100,101          ;26
 219+ 91AA
 220+ 91AA 00           TextDummy					DB  0
 221+ 91AB
 222+ 91AB 53 91 57 91  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 91AF 5A 91
 223+ 91B1 5D 91 60 91  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 91B5 63 91
 224+ 91B7 66 91 69 91  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 91BB 6C 91 70 91  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 91BF 74 91 78 91
 226+ 91C3 7C 91 80 91  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 91C7 83 91
 227+ 91C9 86 91 89 91  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 91CD 8F 91 8C 91
 227+ 91D1 98 91 92 91
 227+ 91D5 95 91 9B 91
 228+ 91D9 9E 91        					DW  TextLightYears		                                            ; 21 23
 229+ 91DB A1 91 A5 91  					DW  Text0LightYears, TextMarketPrices
 230+ 91DF AA 91        					DW  TextDummy;  25
 231+ 91E1 00 00 00...  TextBuffer			DS	33
 232+ 9202
 233+ 9202              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 9202              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 9202
 236+ 9202              CapitaliseString:
 237+ 9202              ; ">CapitaliseString hl = address"
 238+ 9202              .CapLoop:
 239+ 9202 23           	inc		hl
 240+ 9203 7E           	ld		a,(hl)
 241+ 9204 FE 00        	cp		0
 242+ 9206 C8           	ret		z
 243+ 9207 FE 5B        	cp		'Z'+1
 244+ 9209 30 F7        	jr		nc,.CapLoop
 245+ 920B FE 41        	cp		'A'
 246+ 920D 38 F3        	jr		c,.CapLoop
 247+ 920F              .LowerCase:
 248+ 920F C6 20        	add		a,'a'-'A'
 249+ 9211 77           	ld		(hl),a
 250+ 9212 18 EE        	jr		.CapLoop
 251+ 9214
 252+ 9214 21 FB 90     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 9217 C3 1D 92                             jp      WordLookup
 254+ 921A
 255+ 921A 21 2D 90     WordIndexToAddress:     ld		hl,WordIdx
 256+ 921D ED 31        WordLookup:             add		hl,a
 257+ 921F ED 31                                add		hl,a
 258+ 9221 D5                                   push	de
 259+ 9222 5E                                   ld		e,(hl)
 260+ 9223 23                                   inc		hl
 261+ 9224 56                                   ld		d,(hl)
 262+ 9225 EB                                   ex		de,hl
 263+ 9226 D1                                   pop		de
 264+ 9227 C9                                   ret
 265+ 9228
 266+ 9228
 267+ 9228              expandTokenToString:
 268+ 9228              ; ">expandTokenToString a = texttoken"
 269+ 9228 21 AB 91     	ld		hl,TextTokens
 270+ 922B CD 88 8B     	call	getTableText
 271+ 922E 11 E1 91     	ld		de,TextBuffer
 272+ 9231              .ReadLoop:
 273+ 9231 7E           	ld		a,(hl)
 274+ 9232 FE 00        	cp		0
 275+ 9234 28 1B        	jr		z,.ReadDone
 276+ 9236 E5           	push	hl
 277+ 9237 D5           	push	de
 278+ 9238 21 2D 90     	ld		hl,WordIdx
 279+ 923B CD 88 8B     	call	getTableText
 280+ 923E D1           	pop		de
 281+ 923F              .WordExpandLoop:
 282+ 923F 7E           	ld		a,(hl)
 283+ 9240 FE 00        	cp		0
 284+ 9242 28 05        	jr		z,.AddSpace
 285+ 9244              ;.GetChar:
 286+ 9244 12           	ld		(de),a
 287+ 9245 13           	inc		de
 288+ 9246 23           	inc		hl
 289+ 9247 18 F6        	jr		.WordExpandLoop
 290+ 9249              .AddSpace:
 291+ 9249 3E 20        	ld		a,' '
 292+ 924B 12           	ld		(de),a
 293+ 924C 13           	inc		de
 294+ 924D E1           	pop		hl
 295+ 924E 23           	inc		hl
 296+ 924F 18 E0        	jr		.ReadLoop
 297+ 9251              .ReadDone:
 298+ 9251 1B           	dec		de
 299+ 9252 AF           	xor		a
 300+ 9253 12           	ld		(de),a
 301+ 9254 C9           	ret
 302+ 9255
# file closed: ./Tables/dictionary.asm
 602  9255                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9255 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9259 53 45 49 54
   1+ 925D 49 4C 45 54
   1+ 9261 53 54 4F 4E
   1+ 9265 4C 4F 4E 55
   1+ 9269 54 48 4E 4F
   2+ 926D 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9270 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9274 45 5A 41 43
   3+ 9278 45 42 49 53
   3+ 927C 4F 55 53 45
   3+ 9280 53 41 52 4D
   3+ 9284 41 49 4E 44
   3+ 9288 49 52 45 41
   4+ 928C 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9290 54 45 4E 42
   4+ 9294 45 52 41 4C
   4+ 9298 41 56 45 54
   4+ 929C 49 45 44 4F
   4+ 92A0 52 51 55 41
   4+ 92A4 4E 54 45 49
   4+ 92A8 53 52 49 4F
   4+ 92AC 4E
   5+ 92AD
   6+ 92AD              ; TODO Moveinto galaxy data module
   7+ 92AD 00 00 00...  name_expanded	DS 32
   8+ 92CD 00           				DB 0
   9+ 92CE
  10+ 92CE
  11+ 92CE
  12+ 92CE              NamingLoop:
  13+ 92CE 3A 7C 82     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 92D1 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 92D3 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 92D5 28 12        	jr		z,.SkipPhrase
  17+ 92D7 C6 0C        	add		a,12
  18+ 92D9 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 92DB 21 55 92     	ld		hl,name_digrams
  20+ 92DE ED 31        	add		hl,a
  21+ 92E0 ED A0        	ldi
  22+ 92E2 7E           	ld		a,(hl)
  23+ 92E3 FE 3F        	cp		'?'
  24+ 92E5 28 02        	jr		z,.SkipPhrase
  25+ 92E7              .AddExtra:
  26+ 92E7 ED A0        	ldi
  27+ 92E9              .SkipPhrase:
  28+ 92E9 D5           	push	de
  29+ 92EA CD 10 89     	call	working_seed
  30+ 92ED D1           	pop		de
  31+ 92EE C9           	ret
  32+ 92EF
  33+ 92EF              ;GetDigramGalaxySeed:
  34+ 92EF              ;	call	copy_galaxy_to_working
  35+ 92EF              ;	jr		GetDigramWorkingSeed
  36+ 92EF              ;GetDigramSystemSeed:
  37+ 92EF              ;	call	copy_system_to_working
  38+ 92EF              ;GetDigramWorkingSeed:
  39+ 92EF              ;; ">GetDigram a = digram seed"
  40+ 92EF              ;	ld		de,name_expanded
  41+ 92EF              ;	ld		b,3
  42+ 92EF              ;	ld		a,(WorkingSeeds)
  43+ 92EF              ;	and		$40
  44+ 92EF              ;	jr		z,.SmallSizeName
  45+ 92EF              ;.LargeSizeName:
  46+ 92EF              ;	call	NamingLoop
  47+ 92EF              ;.SmallSizeName:
  48+ 92EF              ;	call	NamingLoop
  49+ 92EF              ;	call	NamingLoop
  50+ 92EF              ;	call	NamingLoop
  51+ 92EF              ;.DoneName:
  52+ 92EF              ;	ex		de,hl
  53+ 92EF              ;	ld		(hl),0
  54+ 92EF              ;	ex		de,hl
  55+ 92EF              ;	ret
  56+ 92EF
  57+ 92EF
  58+ 92EF
  59+ 92EF              ;GetDigramWorkingSeed:
  60+ 92EF              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 92EF              ;	ld		b,5					; working seed
  62+ 92EF              ;	ld		de,name_expanded
  63+ 92EF              ;.ExpansionLoop:
  64+ 92EF              ;	push	bc
  65+ 92EF              ;	ld		hl,WorkingSeeds
  66+ 92EF              ;	ld		a,b
  67+ 92EF              ;	add		hl,a
  68+ 92EF              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 92EF              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 92EF              ;	cp		0					; 0 = skip 2 chars
  71+ 92EF              ;	jr		z,.SkipPhrase
  72+ 92EF              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 92EF              ;	call	TT27
  74+ 92EF              ;.SkipPhrase:
  75+ 92EF              ;	push	de
  76+ 92EF              ;	call	next_working_seed
  77+ 92EF              ;	pop		de
  78+ 92EF              ;	pop		bc
  79+ 92EF              ;	djnz	GetDigramWorkingSeed
  80+ 92EF              ;.DoneName:
  81+ 92EF              ;	ex		de,hl
  82+ 92EF              ;	ld		(hl),0
  83+ 92EF              ;	ex		de,hl
  84+ 92EF              ;	ret
  85+ 92EF              ;
  86+ 92EF              ;ExpandToken:
  87+ 92EF              ;	DE = target
  88+ 92EF              ;	a = token
  89+ 92EF              ;
  90+ 92EF              ;PlanetDigram:
  91+ 92EF              ;	cp		&A0							; >- 160
  92+ 92EF              ;	jr		c,MorePage4
  93+ 92EF              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 92EF              ;	asl		2							; Multiply by 2
  95+ 92EF              ;	ld		hl, name_digrams2
  96+ 92EF              ;	add		hl,a
  97+ 92EF              ;	ld		a,(hl)
  98+ 92EF              ;	call	ProcessTextToken
  99+ 92EF              ;	inc		hl
 100+ 92EF              ;	ld		a,(hl)
 101+ 92EF              ;	cp		'?'
 102+ 92EF              ;	ret		z
 103+ 92EF              ;	call	ProcessTextToken
 104+ 92EF              ;	ret
 105+ 92EF              ;MorePage4:
 106+ 92EF              ;	sub		$A0
 107+ 92EF              ;ExtraTokenCheck:
 108+ 92EF              ;	push	de							; save target address
 109+ 92EF              ;	push	bc
 110+ 92EF              ;	ld		b,a
 111+ 92EF              ;	ld		hl,varV
 112+ 92EF              ;	ld		(VarV),0400
 113+ 92EF              ;	ld		(varV),a
 114+ 92EF              ;	ld
 115+ 92EF              ;
 116+ 92EF              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 92EF              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 92EF              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 92EF              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 92EF              ;0A                      ASL A		      \ *= 2
 121+ 92EF              ;A8                      TAY 		      \ digram index = 0to62
 122+ 92EF              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 92EF              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 92EF              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 92EF              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 92EF              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 92EF              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 92EF              ;
 129+ 92EF              ;	.TT47	\ more page4, subtract #160
 130+ 92EF              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 92EF              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 92EF              ;AA                      TAX 		\ copy of word index
 133+ 92EF              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 92EF              ;85 22                   STA &22		\ V
 135+ 92EF              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 92EF              ;85 23                   STA &23		\ V+1
 137+ 92EF              ;A0 00                   LDY #0
 138+ 92EF              ;8A                      TXA 		\ token = word index
 139+ 92EF              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 92EF              ;	.TT51	\ counters Y letter, X token
 141+ 92EF              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 92EF              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 92EF              ;C8                      INY 		\ letter count
 144+ 92EF              ;D0 F9                   BNE TT51	\ loop Y
 145+ 92EF              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 92EF              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 92EF              ;	.TT49	\ word ended
 148+ 92EF              ;C8                      INY
 149+ 92EF              ;D0 02                   BNE TT59    	\ next word
 150+ 92EF              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 92EF              ;	.TT59	\ next word
 152+ 92EF              ;CA                      DEX 		\ token count
 153+ 92EF              ;D0 ED                   BNE TT51	\ loop X token
 154+ 92EF              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 92EF              ;98                      TYA
 156+ 92EF              ;48                      PHA 		\ store Yindex
 157+ 92EF              ;A5 23                   LDA &23		\ V+1
 158+ 92EF              ;48                      PHA 		\ correct pointer hi
 159+ 92EF              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 92EF              ;49 23                   EOR #&23	\ decode '#'
 161+ 92EF              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 92EF              ;68                      PLA 		\ restore this depth's Vhi
 163+ 92EF              ;85 23                   STA &23		\ V+1
 164+ 92EF              ;68                      PLA
 165+ 92EF              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 92EF              ;C8                      INY 		\ next letter
 167+ 92EF              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 92EF              ;E6 23                   INC &23		\ V+1
 169+ 92EF              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 92EF              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 92EF              ;	.TT48 	\ rts
 172+ 92EF              ;60                      RTS 		\ end of flight token printing TT27
 173+ 92EF              ;
 174+ 92EF              ;
 175+ 92EF              ;
 176+ 92EF              ;
 177+ 92EF              ;
 178+ 92EF              ;
 179+ 92EF              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 92EF              ;;AA                      TAX		\ copy token to count down
 181+ 92EF              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 92EF              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 92EF              ;CA                      DEX
 184+ 92EF              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 92EF              ;CA                      DEX
 186+ 92EF              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 92EF              ;CA                      DEX
 188+ 92EF              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 92EF              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 92EF              ;CA                      DEX
 191+ 92EF              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 92EF              ;CA                      DEX
 193+ 92EF              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 92EF              ;CA                      DEX
 195+ 92EF              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 92EF              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 92EF              ;85 72                   STA &72	 	\ QQ17
 198+ 92EF              ;60                      RTS
 199+ 92EF              ;CA                      DEX 		\ skip Acc ==7
 200+ 92EF              ;CA                      DEX
 201+ 92EF              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 92EF              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 92EF              ;60                      RTS
 204+ 92EF              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 92EF              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 92EF              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 92EF              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 92EF              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 92EF              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 92EF              ;C9 20                   CMP #32		\ < 32 ?
 211+ 92EF              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 92EF              ;		\ Token  < 14 or > 31
 213+ 92EF              ;A6 72                   LDX &72	 	\ QQ17
 214+ 92EF              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 92EF              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 92EF              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 92EF              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 92EF              ;	.TT42	\ Uppercase to lowercase
 219+ 92EF              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 92EF              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 92EF              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 92EF              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 92EF              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 92EF              ;	.TT44	\ print character as is with TT26
 225+ 92EF              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 92EF              ;
 227+ 92EF              ;	.TT41	\ QQ17 bit7 set
 228+ 92EF              ;24 72                   BIT &72		\ QQ17
 229+ 92EF              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 92EF              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 92EF              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 92EF              ;48                      PHA 		\ else store token Acc
 233+ 92EF              ;8A                      TXA 		\ QQ17 copy
 234+ 92EF              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 92EF              ;85 72                   STA &72	 	\ QQ17
 236+ 92EF              ;68                      PLA 		\ restore token
 237+ 92EF              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 92EF              ;
 239+ 92EF              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 92EF              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 92EF              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 92EF              ;
 243+ 92EF              ;	.crlf	\ Acc == 9,  colon on right
 244+ 92EF              ;A9 15                   LDA #21		\ on right
 245+ 92EF              ;85 2C                   STA &2C		\ XC
 246+ 92EF              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 92EF              ;
 248+ 92EF              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 92EF              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 92EF              ;F0 63                   BEQ TT48	\ rts
 251+ 92EF              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 92EF              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 92EF              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 92EF              ;48                      PHA 		\ push token
 255+ 92EF              ;8A                      TXA 		\ QQ17 copy
 256+ 92EF              ;29 BF                   AND #&BF	\ clear bit6
 257+ 92EF              ;85 72                   STA &72	 	\ QQ17
 258+ 92EF              ;68                      PLA 		\ pull token
 259+ 92EF              ;	.TT74	\ TT26, print character.
 260+ 92EF              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 92EF              ;
 262+ 92EF              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 92EF              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 92EF              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 92EF              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 92EF              ;0A                      ASL A		      \ *= 2
 267+ 92EF              ;A8                      TAY 		      \ digram index = 0to62
 268+ 92EF              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 92EF              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 92EF              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 92EF              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 92EF              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 92EF              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 92EF              ;
 275+ 92EF              ;	.TT47	\ more page4, subtract #160
 276+ 92EF              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 92EF              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 92EF              ;AA                      TAX 		\ copy of word index
 279+ 92EF              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 92EF              ;85 22                   STA &22		\ V
 281+ 92EF              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 92EF              ;85 23                   STA &23		\ V+1
 283+ 92EF              ;A0 00                   LDY #0
 284+ 92EF              ;8A                      TXA 		\ token = word index
 285+ 92EF              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 92EF              ;	.TT51	\ counters Y letter, X token
 287+ 92EF              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 92EF              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 92EF              ;C8                      INY 		\ letter count
 290+ 92EF              ;D0 F9                   BNE TT51	\ loop Y
 291+ 92EF              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 92EF              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 92EF              ;	.TT49	\ word ended
 294+ 92EF              ;C8                      INY
 295+ 92EF              ;D0 02                   BNE TT59    	\ next word
 296+ 92EF              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 92EF              ;	.TT59	\ next word
 298+ 92EF              ;CA                      DEX 		\ token count
 299+ 92EF              ;D0 ED                   BNE TT51	\ loop X token
 300+ 92EF              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 92EF              ;98                      TYA
 302+ 92EF              ;48                      PHA 		\ store Yindex
 303+ 92EF              ;A5 23                   LDA &23		\ V+1
 304+ 92EF              ;48                      PHA 		\ correct pointer hi
 305+ 92EF              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 92EF              ;49 23                   EOR #&23	\ decode '#'
 307+ 92EF              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 92EF              ;68                      PLA 		\ restore this depth's Vhi
 309+ 92EF              ;85 23                   STA &23		\ V+1
 310+ 92EF              ;68                      PLA
 311+ 92EF              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 92EF              ;C8                      INY 		\ next letter
 313+ 92EF              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 92EF              ;E6 23                   INC &23		\ V+1
 315+ 92EF              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 92EF              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 92EF              ;	.TT48 	\ rts
 318+ 92EF              ;60                      RTS 		\ end of flight token printing TT27
 319+ 92EF              ;
 320+ 92EF              ;
 321+ 92EF              ;
# file closed: ./Tables/name_digrams.asm
 603  92EF              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 604  92EF              ; Include all maths libraries to test assembly
 605  92EF                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 92EF              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 92EF              ;; result HL with A as sign
   3+ 92EF              ;; special handling if result is zero forcign sign bit to be zero
   4+ 92EF
   5+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLSAHLEquBHLaddCDE:        ld      a,b
   6+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        xor     c
   7+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        and     SignOnly8Bit
   8+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative   .OppositeSigns
   9+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.SameSigns:             ld      ixh,b                      ; ixh = b
  10+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit b                     ; b = ABS b
  11+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        add     hl,de                      ; hl = hl + de
  12+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = b + c + carry
  13+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        adc     c                          ;
  14+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ;
  15+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ;
  16+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ;
  17+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ;
  18+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ;
  19+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeSigns:         ld      ixh,b                      ; save signed into ixh and ixl
  20+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      ixl,c                      ; .
  21+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit c                     ; c = ABS C
  22+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = abs b
  23+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBitA                      ; .
  24+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     c                          ; a = a - c
  25+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .OppositeCDEgtBHL  ; if c is positive
  26+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        push    hl
  27+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     hl,de                      ; then subtract de from hl
  28+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .HLDEWasNegative   ; if sub was positive
  29+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        pop     de                         ; at this stage the stack is just junk
  30+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ; then copy results to AHL
  31+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ; by just handling sign
  32+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ; .
  33+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ; .
  34+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ; .
  35+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeCDEgtBHL:      ex      de,hl                      ; save hl
  36+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      c,ixh                      ; swap signs over
  37+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,ixl                      ;
  38+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeSigns             ; and do calc again
  39+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.HLDEWasNegative:       pop     hl                         ; get back hl swap values and try again
  40+ 92EF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeCDEgtBHL
  41+ 92EF              ; example
  42+ 92EF              ; bhl - 00 00 06 CDE - 80 00 0B so equates to 000006 + (-00000B) or -000005 or 800005
  43+ 92EF
  44+ 92EF 78           ADDHLDESignBC:          ld      a,b
  45+ 92F0 E6 80                                and     SignOnly8Bit
  46+ 92F2 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 92F3                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 92F3 FA 01 93    >                        jp		m, ADDHLDEsBCOppSGN
  48+ 92F6 78           ADDHLDEsBCSameSigns:    ld      a,b
  49+ 92F7 B1                                   or      c
  50+ 92F8                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 92F8 FA FD 92    >                        jp		m, ADDHLDEsBCSameNeg
  51+ 92FB 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 92FC C9                                   ret
  53+ 92FD 19           ADDHLDEsBCSameNeg:      add     hl,de
  54+ 92FE 78                                   ld      a,b
  55+ 92FF B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  56+ 9300 C9                                   ret
  57+ 9301              ADDHLDEsBCOppSGN:       ClearCarryFlag
  57+ 9301 B7          >                        or a
  58+ 9302 ED 52                                sbc     hl,de
  59+ 9304 38 02                                jr      c,ADDHLDEsBCOppInvert
  60+ 9306 78           ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  61+ 9307 C9                                   ret
  62+ 9308              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  62+ 9308 AF          >                    xor a
  62+ 9309 95          >                    sub l
  62+ 930A 6F          >                    ld l,a
  62+ 930B 9F          >                    sbc a,a
  62+ 930C 94          >                    sub h
  62+ 930D 67          >                    ld h,a
  63+ 930E 78                                   ld      a,b
  64+ 930F EE 80                                xor     SignOnly8Bit                ; flip sign bit
  65+ 9311 C9                                   ret
  66+ 9312
  67+ 9312 7C           ADDHLDESignedV4:        ld      a,h
  68+ 9313 E6 80                                and     SignOnly8Bit
  69+ 9315 47                                   ld      b,a                         ;save sign bit in b
  70+ 9316 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  71+ 9317                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  71+ 9317 FA 2F 93    >                        jp		m, .ADDHLDEOppSGN
  72+ 931A 78           .ADDHLDESameSigns:      ld      a,b
  73+ 931B B2                                   or      d
  74+ 931C                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  74+ 931C FA 21 93    >                        jp		m, .ADDHLDESameNeg
  75+ 931F 19                                   add     hl,de
  76+ 9320 C9                                   ret
  77+ 9321 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  78+ 9322 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  79+ 9324 67                                   ld      h,a
  80+ 9325 7A                                   ld      a,d
  81+ 9326 E6 7F                                and     SignMask8Bit
  82+ 9328 57                                   ld      d,a
  83+ 9329 19                                   add     hl,de
  84+ 932A 3E 80                                ld      a,SignOnly8Bit
  85+ 932C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  86+ 932D 67                                   ld      h,a
  87+ 932E C9                                   ret
  88+ 932F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  89+ 9330 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  90+ 9332 67                                   ld      h,a
  91+ 9333 7A                                   ld      a,d
  92+ 9334 E6 7F                                and     SignMask8Bit
  93+ 9336 57                                   ld      d,a
  94+ 9337                                      ClearCarryFlag
  94+ 9337 B7          >                        or a
  95+ 9338 ED 52                                sbc     hl,de
  96+ 933A 38 04                                jr      c,.ADDHLDEOppInvert
  97+ 933C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  98+ 933D B4                                   or      h
  99+ 933E 67                                   ld      h,a                         ; set the previou sign value
 100+ 933F C9                                   ret
 101+ 9340              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 101+ 9340 AF          >                    xor a
 101+ 9341 95          >                    sub l
 101+ 9342 6F          >                    ld l,a
 101+ 9343 9F          >                    sbc a,a
 101+ 9344 94          >                    sub h
 101+ 9345 67          >                    ld h,a
 102+ 9346 78                                   ld      a,b
 103+ 9347 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 104+ 9349 B4                                   or      h
 105+ 934A 67                                   ld      h,a                         ; recover sign
 106+ 934B C9                                   ret
 107+ 934C
 108+ 934C              ;;;NOT USED addhldesigned:          bit     7,h
 109+ 934C              ;;;NOT USED                         jr      nz,.noneghl
 110+ 934C              ;;;NOT USED                         call    negate16hl
 111+ 934C              ;;;NOT USED .noneghl:               bit     7,d
 112+ 934C              ;;;NOT USED                         jr      nz,.nonegde
 113+ 934C              ;;;NOT USED                         call    negate16de
 114+ 934C              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 115+ 934C              ;;;NOT USED                         xor     a                           ; assume positive
 116+ 934C              ;;;NOT USED                         bit     7,h
 117+ 934C              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 118+ 934C              ;;;NOT USED                         call    negate16hl
 119+ 934C              ;;;NOT USED                         ld      a,$FF
 120+ 934C              ;;;NOT USED                         ret
 121+ 934C
 122+ 934C
 123+ 934C              ;; NOT USED MAY WORK ? ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 124+ 934C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 125+ 934C              ;; NOT USED MAY WORK ? HL2cEquHLSgnPlusAusgn:  ld      d,0
 126+ 934C              ;; NOT USED MAY WORK ?                         ld      e,a                         ; set up DE = A
 127+ 934C              ;; NOT USED MAY WORK ?                         ld      a,h
 128+ 934C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 129+ 934C              ;; NOT USED MAY WORK ?                         jr      z,.HLPositive               ; if HL is negative then do HL - A
 130+ 934C              ;; NOT USED MAY WORK ? .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 131+ 934C              ;; NOT USED MAY WORK ?                         NegHL                               ; hl = - hl
 132+ 934C              ;; NOT USED MAY WORK ? .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 133+ 934C              ;; NOT USED MAY WORK ?                         adc     hl,de                       ; aftert his hl will be 2's c
 134+ 934C              ;; NOT USED MAY WORK ?                         ret
 135+ 934C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 136+ 934C              ;; NOT USED MAY WORK ? HLEquHLSgnPlusAusgn:    ld      e,a
 137+ 934C              ;; NOT USED MAY WORK ?                         ld      a,h
 138+ 934C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 139+ 934C              ;; NOT USED MAY WORK ?                         jr      nz,.HLNegative              ; if HL is negative then do HL - A
 140+ 934C              ;; NOT USED MAY WORK ? .HLPositive:            ld      a,e                         ; else its HL + A
 141+ 934C              ;; NOT USED MAY WORK ?                         add     hl,a
 142+ 934C              ;; NOT USED MAY WORK ?                         ret
 143+ 934C              ;; NOT USED MAY WORK ? .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 144+ 934C              ;; NOT USED MAY WORK ?                         NegHL                               ; and convert to 2's C
 145+ 934C              ;; NOT USED MAY WORK ?                         ld      d,0
 146+ 934C              ;; NOT USED MAY WORK ?                         ClearCarryFlag
 147+ 934C              ;; NOT USED MAY WORK ?                         sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 148+ 934C              ;; NOT USED MAY WORK ?                         jp      m,.FlipResult               ; if it was negative then its really positive
 149+ 934C              ;; NOT USED MAY WORK ?                         SetSignBit      h
 150+ 934C              ;; NOT USED MAY WORK ?                         ret
 151+ 934C              ;; NOT USED MAY WORK ? .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 152+ 934C              ;; NOT USED MAY WORK ?                         ret
 153+ 934C
 154+ 934C
 155+ 934C              ; 06 06 2022 not used
 156+ 934C              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 157+ 934C 57           AddAusngToHLsng:        ld      d,a
 158+ 934D 5C                                   ld      e,h
 159+ 934E 7C                                   ld      a,h
 160+ 934F E6 7F                                and     SignMask8Bit
 161+ 9351 67                                   ld      h,a
 162+ 9352 7A                                   ld      a,d
 163+ 9353 ED 31                                add     hl,a
 164+ 9355 7B                                   ld      a,e
 165+ 9356 E6 80                                and     SignOnly8Bit
 166+ 9358 B4                                   or      h
 167+ 9359 C9                                   ret
 168+ 935A              ; 06 06 2022 not used
 169+ 935A              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 170+ 935A 44           HLEequAusngMinusHLsng:  ld      b,h
 171+ 935B 4F                                   ld      c,a
 172+ 935C 78                                   ld      a,b
 173+ 935D E6 80                                and     SignOnly8Bit
 174+ 935F 20 08                                jr      nz,.DoAdd
 175+ 9361 EB           .DoSubtract:            ex      de,hl               ; move hl into de
 176+ 9362 26 00                                ld      h,0                 ; hl = a
 177+ 9364 69                                   ld      l,c
 178+ 9365                                      ClearCarryFlag
 178+ 9365 B7          >                        or a
 179+ 9366 ED 52                                sbc     hl,de               ; hl = a - hl
 180+ 9368 C9                                   ret
 181+ 9369 79           .DoAdd:                 ld      a,c
 182+ 936A ED 31                                add hl,a
 183+ 936C C9                                   ret
 184+ 936D              ;tested mathstestsun2
 185+ 936D              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 186+ 936D 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 187+ 936E AA                                   xor     d                   ; .
 188+ 936F E6 80                                and     SignOnly8Bit        ; .
 189+ 9371 20 19                                jr      nz,.SignDifferent   ; .
 190+ 9373 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 191+ 9374 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 192+ 9376 FD 67                                ld      iyh,a               ;
 193+ 9378 78                                   ld      a,b                 ; bch = abs bch
 194+ 9379 E6 7F                                and     SignMask8Bit        ; .
 195+ 937B 47                                   ld      b,a                 ; .
 196+ 937C 7A                                   ld      a,d                 ; del = abs del
 197+ 937D E6 7F                                and     SignMask8Bit        ; .
 198+ 937F 57                                   ld      d,a                 ; .
 199+ 9380 7C                                   ld      a,h                 ; l = h + l
 200+ 9381 85                                   add     l                   ; .
 201+ 9382 6F                                   ld      l,a                 ; .
 202+ 9383 79                                   ld      a,c                 ; e = e + c + carry
 203+ 9384 8B                                   adc     e                   ; .
 204+ 9385 5F                                   ld      e,a                 ; .
 205+ 9386 78                                   ld      a,b                 ; d = b + d + carry (signed)
 206+ 9387 8A                                   adc     d                   ;
 207+ 9388 FD B4                                or      iyh                 ; d = or back in sign bit
 208+ 938A 57                                   ld      d,a                 ;
 209+ 938B C9                                   ret                         ; done
 210+ 938C 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 211+ 938D FD 67                                ld      iyh,a               ; iyh = b sign
 212+ 938F E6 7F                                and     SignMask8Bit        ; .
 213+ 9391 47                                   ld      b,a                 ; .
 214+ 9392 7A                                   ld      a,d                 ; del = abs del
 215+ 9393 FD 6F                                ld      iyl,a               ; iyl = d sign
 216+ 9395 E6 7F                                and     SignMask8Bit        ; .
 217+ 9397 57                                   ld      d,a                 ; .
 218+ 9398 E5                                   push    hl                  ; save hl
 219+ 9399 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 220+ 939B ED 52                                sbc     hl,de               ;
 221+ 939D E1                                   pop     hl                  ;
 222+ 939E 38 0E                                jr      c,.BCHltDEL
 223+ 93A0 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 224+ 93A2 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 225+ 93A3                                      JumpIfALTNusng l,.BCHltDEL
 225+ 93A3 BD          >                        cp      l
 225+ 93A4 DA AE 93    >                        jp		c, .BCHltDEL
 226+ 93A7 20 15                                jr      nz,.DELltBCH
 227+ 93A9              ; The same so its just zero
 228+ 93A9 AF           .BCHeqDEL:              xor     a                  ; its just zero
 229+ 93AA 57                                   ld      d,a                ; .
 230+ 93AB 5F                                   ld      e,a                ; .
 231+ 93AC 6F                                   ld      l,a                ; .
 232+ 93AD C9                                   ret                        ; .
 233+ 93AE              ;BCH is less than DEL so its DEL - BCH the sort out sign
 234+ 93AE 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 235+ 93AF 94                                   sub     h                  ; .                              ;   01D70F DEL
 236+ 93B0 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 237+ 93B1 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 238+ 93B2 99                                   sbc     c                  ; .                              ;
 239+ 93B3 5F                                   ld      e,a                ; .                              ;
 240+ 93B4 7A                                   ld      a,d                ; d = d - b - carry              ;
 241+ 93B5 98                                   sbc     b                  ; .                              ;
 242+ 93B6 57                                   ld      d,a                ; .                              ;
 243+ 93B7 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 244+ 93B9 E6 80                                and     SignOnly8Bit       ;
 245+ 93BB B2                                   or      d                  ;
 246+ 93BC 57                                   ld      d,a                ;
 247+ 93BD C9                                   ret
 248+ 93BE 7C           .DELltBCH:              ld      a,h                ; l = h - l
 249+ 93BF 95                                   sub     l                  ;
 250+ 93C0 6F                                   ld      l,a                ;
 251+ 93C1 79                                   ld      a,c                ; e = c - e - carry
 252+ 93C2 9B                                   sbc     e                  ;
 253+ 93C3 5F                                   ld      e,a                ;
 254+ 93C4 78                                   ld      a,b                ; d = b - d - carry
 255+ 93C5 9A                                   sbc     d                  ;
 256+ 93C6 57                                   ld      d,a                ;
 257+ 93C7 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 258+ 93C9 E6 80                                and     SignOnly8Bit       ;
 259+ 93CB B2                                   or      d                  ;
 260+ 93CC 57                                   ld      d,a                ;
 261+ 93CD C9                                   ret
 262+ 93CE
 263+ 93CE              ; 06 06 2022 not used
 264+ 93CE              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 265+ 93CE 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 266+ 93CF 4A                                   ld      c,d                     ; .
 267+ 93D0 A9                                   xor     c                       ; A = A xor C
 268+ 93D1 CB BA                                res     7,d                     ; clear sign bit of D
 269+ 93D3 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 270+ 93D5 19                                   add     hl,de                   ; HL = HL + DE
 271+ 93D6 C9                                   ret                             ; return
 272+ 93D7 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 273+ 93D9 D0                                   ret     nc                      ; if no carry return
 274+ 93DA 19                                   add     hl,de                   ; else HL = HL + DE
 275+ 93DB EB                                   ex      de,hl                   ;      swap HL and DE
 276+ 93DC A7                                   and     a                       ;      reset carry
 277+ 93DD ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 278+ 93DF 41                                   ld      b,c                     ;      B = sign of C
 279+ 93E0 C9                                   ret                             ;      ret
 280+ 93E1
 281+ 93E1
 282+ 93E1              ; 06 06 2022 not used
 283+ 93E1              ; a = value to add
 284+ 93E1              ; b = offset (equivalent to regX)
 285+ 93E1              ; returns INWK [x] set to new value
 286+ 93E1              ; NOT USED addINWKbasigned:
 287+ 93E1              ; NOT USED 		ld 		hl,UBnKxlo                  ; hl = INWK 0
 288+ 93E1              ; NOT USED 		ld      c,a                         ; preserve a
 289+ 93E1              ; NOT USED 		ld		a,b
 290+ 93E1              ; NOT USED 		add		hl,a                        ; hl = INWK[x]
 291+ 93E1              ; NOT USED         ld      a,c                         ; get back a value
 292+ 93E1              ; NOT USED         and     $80                         ; get sign bit from a
 293+ 93E1              ; NOT USED         ld      b,a                         ; now b = sign bit of a
 294+ 93E1              ; NOT USED         ld      a,c                         ; a = original value
 295+ 93E1              ; NOT USED         and     SignMask8Bit                ; a = unsigned version of original value
 296+ 93E1              ; 06 06 2022 not used
 297+ 93E1              ; hl = unsigned version of INWK0[b]
 298+ 93E1              ; a = value to add, also in c which will optimise later code
 299+ 93E1              ; b = sign bit of a ( in old code was varT)
 300+ 93E1              ; NOTUSEDaddhlcsigned:
 301+ 93E1              ; NOTUSED        ld      e,(hl)                      ; de = INKK value
 302+ 93E1              ; NOTUSED        inc     hl
 303+ 93E1              ; NOTUSED        ld      d,(hl)
 304+ 93E1              ; NOTUSED        inc     hl                          ; now pointing a sign
 305+ 93E1              ; NOTUSED        ld      a,(hl)                      ; a = sign bit
 306+ 93E1              ; NOTUSED        ex      de,hl                       ; hl = value now and de = pointer to sign
 307+ 93E1              ; NOTUSED        xor     b                           ; a = resultant sign
 308+ 93E1              ; NOTUSED        bit     7,a                         ; is it negative?
 309+ 93E1              ; NOTUSED        jr      z,.postivecalc
 310+ 93E1              ; NOTUSED.negativecalc:
 311+ 93E1              ; NOTUSED        ld      a,h
 312+ 93E1              ; NOTUSED        and     SignMask8Bit
 313+ 93E1              ; NOTUSED        ld      h,a                         ; strip high bit
 314+ 93E1              ; NOTUSED        ld      ixl,b                       ; save sign bit from b into d
 315+ 93E1              ; NOTUSED        ld      b,0                         ; c = value to subtract so now bc = value to subtract
 316+ 93E1              ; NOTUSED        sbc     hl,bc
 317+ 93E1              ; NOTUSED        ld      b,ixl                       ; get sign back
 318+ 93E1              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to sign
 319+ 93E1              ; NOTUSED        ld      a,(hl)                      ;
 320+ 93E1              ; NOTUSED        and     SignMask8Bit
 321+ 93E1              ; NOTUSED        sbc     a,0                         ; subtract carry which could flip sign bit
 322+ 93E1              ; NOTUSED        or      $80                         ; set bit 0
 323+ 93E1              ; NOTUSED        xor     b                           ; flip bit on sign (var T)
 324+ 93E1              ; NOTUSED        ld      (hl),a
 325+ 93E1              ; NOTUSED        dec     hl
 326+ 93E1              ; NOTUSED        ld      (hl),d
 327+ 93E1              ; NOTUSED        dec     hl
 328+ 93E1              ; NOTUSED        ld      (hl),e                      ; write out DE to INKW[x]0,1
 329+ 93E1              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 330+ 93E1              ; NOTUSED        ret     c                           ; if carry was set then we can exit now
 331+ 93E1              ; NOTUSED.nocarry:
 332+ 93E1              ; NOTUSED        NegHL                               ; get hl back to positive, a is still inkw+2
 333+ 93E1              ; NOTUSED        or      b                           ; b is still varT
 334+ 93E1              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 335+ 93E1              ; NOTUSED        ld      (hl),e
 336+ 93E1              ; NOTUSED        inc     hl
 337+ 93E1              ; NOTUSED        ld      (hl),d
 338+ 93E1              ; NOTUSED        inc     hl
 339+ 93E1              ; NOTUSED        ld      (hl),a                      ; set sign bit in INKK[x]+2
 340+ 93E1              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to sign
 341+ 93E1              ; NOTUSED        ret
 342+ 93E1              ; NOTUSED.postivecalc:
 343+ 93E1              ; NOTUSED        ld      ixl,b
 344+ 93E1              ; NOTUSED        ld      b,0
 345+ 93E1              ; NOTUSED        add     hl,de
 346+ 93E1              ; NOTUSED        ex      de,hl
 347+ 93E1              ; NOTUSED        or      ixl                         ; we don;t need to recover b here
 348+ 93E1              ; NOTUSED        ld      (hl),a                      ; push sign into INWK[x]
 349+ 93E1              ; NOTUSED        dec     hl
 350+ 93E1              ; NOTUSED        ld      (hl),d
 351+ 93E1              ; NOTUSED        dec     hl
 352+ 93E1              ; NOTUSED        ld      (hl),e
 353+ 93E1              ; NOTUSED        ret
 354+ 93E1
 355+ 93E1              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 356+ 93E1              ;MVT1
 357+ 93E1              ;    S = bits 6 to 0 of A
 358+ 93E1              ;    A = sign bit => T
 359+ 93E1              ;    xor sign bit with ink[x] Sign
 360+ 93E1              ;    if negative thn its not an add
 361+ 93E1              ;
 362+ 93E1              ;        and h, 7F
 363+ 93E1              ;        b = 0
 364+ 93E1              ;        c = varS
 365+ 93E1              ;        subtract INW[X]hilo, bc
 366+ 93E1              ;        retain carry
 367+ 93E1              ;        get INKW[x]Sign
 368+ 93E1              ;        and 7F
 369+ 93E1              ;        subtract carry (so will go negtive if negative)
 370+ 93E1              ;        xor bit 7 of h with T to flip bit
 371+ 93E1              ;        write to INKW[x]Sign
 372+ 93E1              ;
 373+ 93E1              ;    else
 374+ 93E1              ;MV10.
 375+ 93E1              ;        add INWK[x]hi,lo, varS
 376+ 93E1              ;        or      sign bit
 377+ 93E1
 378+ 93E1
# file closed: ./Maths/asm_add.asm
 606  93E1                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 93E1              ;...subtract routines
   2+ 93E1              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 93E1 7C           subHLDES15:             ld      a,h
   4+ 93E2 E6 80                                and     SignOnly8Bit
   5+ 93E4 47                                   ld      b,a                         ;save sign bit in b
   6+ 93E5 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 93E6                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 93E6 FA 14 94    >                        jp		m, .SUBHLDEOppSGN
   8+ 93E9 78           .SUBHLDESameSigns:      ld      a,b
   9+ 93EA B2                                   or      d
  10+ 93EB                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 93EB FA F5 93    >                        jp		m, .SUBHLDESameNeg
  11+ 93EE                                      ClearCarryFlag
  11+ 93EE B7          >                        or a
  12+ 93EF ED 52                                sbc     hl,de
  13+ 93F1                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 93F1 FA 08 94    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 93F4 C9                                   ret
  15+ 93F5 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 93F6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 93F8 67                                   ld      h,a
  18+ 93F9 7A                                   ld      a,d
  19+ 93FA E6 7F                                and     SignMask8Bit
  20+ 93FC 57                                   ld      d,a
  21+ 93FD                                      ClearCarryFlag
  21+ 93FD B7          >                        or a
  22+ 93FE ED 52                                sbc     hl,de
  23+ 9400                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 9400 FA 08 94    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 9403 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  25+ 9404 F6 80                                or      SignOnly8Bit
  26+ 9406 67                                   ld      h,a
  27+ 9407 C9                                   ret
  28+ 9408              .SUBHLDESameOvrFlw:     NegHL
  28+ 9408 AF          >                    xor a
  28+ 9409 95          >                    sub l
  28+ 940A 6F          >                    ld l,a
  28+ 940B 9F          >                    sbc a,a
  28+ 940C 94          >                    sub h
  28+ 940D 67          >                    ld h,a
  29+ 940E 78                                   ld      a,b
  30+ 940F EE 80                                xor     SignOnly8Bit                ; flip sign bit
  31+ 9411 B4                                   or      h
  32+ 9412 67                                   ld      h,a                         ; recover sign
  33+ 9413 C9                                   ret
  34+ 9414 B7           .SUBHLDEOppSGN:         or      a
  35+ 9415 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  36+ 9416 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  37+ 9418 67                                   ld      h,a
  38+ 9419 7A                                   ld      a,d
  39+ 941A E6 7F                                and     SignMask8Bit
  40+ 941C 57                                   ld      d,a
  41+ 941D 19                                   add     hl,de
  42+ 941E 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  43+ 941F B4                                   or      h
  44+ 9420 67                                   ld      h,a                         ; set the previou sign value
  45+ 9421 C9                                   ret
  46+ 9422
  47+ 9422
# file closed: ./Maths/asm_subtract.asm
 607  9422                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 9422              ; Note its big endian
   2+ 9422 2A 00 88     addDEtoCash:            ld      hl,(Cash)
   3+ 9425 19                                   add     hl,de
   4+ 9426 22 00 88                             ld      (Cash),hl
   5+ 9429 11 00 00                             ld      de,0
   6+ 942C 2A 02 88                             ld      hl,(Cash+2)
   7+ 942F ED 5A                                adc     hl,de
   8+ 9431 22 02 88                             ld      (Cash+2),hl
   9+ 9434 C9                                   ret
  10+ 9435
  11+ 9435 2A 00 88     subDEfromCash:          ld      hl,(Cash)
  12+ 9438 7C                                   ld      a,h
  13+ 9439 B5                                   or      l
  14+ 943A 2A 02 88                             ld      hl,(Cash+2)
  15+ 943D B4                                   or      h
  16+ 943E B5                                   or      l
  17+ 943F C8                                   ret     z               ; No cash return
  18+ 9440 B7                                   or      a
  19+ 9441 2A 00 88                             ld      hl,(Cash)
  20+ 9444 ED 52                                sbc     hl,de
  21+ 9446 22 00 88                             ld      (Cash),hl
  22+ 9449 11 00 00                             ld      de,0
  23+ 944C 2A 02 88                             ld      hl,(Cash+2)
  24+ 944F ED 52                                sbc     hl,de
  25+ 9451 22 02 88                             ld      (Cash+2),hl
  26+ 9454                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9454 CB 7C       >                        bit 	7,h
  26+ 9456 C2 5A 94    >                        jp      nz,.ZeroCash
  27+ 9459 C9                                   ret
  28+ 945A 21 00 00     .ZeroCash:              ld      hl,0
  29+ 945D 22 00 88                             ld      (Cash),hl
  30+ 9460 22 02 88                             ld      (Cash+2),hl
  31+ 9463 C9                                   ret
  32+ 9464
# file closed: ./Maths/Utilities/AddDEToCash.asm
 608  9464                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 9464              ;INPUTS: ahl = dividend cde = divisor
   2+ 9464              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 9464 47           Div24by24:              ld b,a
   4+ 9465 E5                                   push hl
   5+ 9466 DD E1                                pop ix
   6+ 9468 2E 18                                ld l,24
   7+ 946A E5                                   push hl
   8+ 946B AF                                   xor a
   9+ 946C 67                                   ld h,a
  10+ 946D 6F                                   ld l,a
  11+ 946E DD 29        .Div24by24loop:         add ix,ix
  12+ 9470 CB 10                                rl b
  13+ 9472 ED 6A                                adc hl,hl
  14+ 9474 17                                   rla
  15+ 9475 B9                                   cp c
  16+ 9476 38 0C                                jr c,.Div24by24skip
  17+ 9478 20 05                                jr nz,.Div24by24setbit
  18+ 947A ED 52                                sbc hl,de
  19+ 947C 19                                   add hl,de
  20+ 947D 38 05                                jr c,.Div24by24skip
  21+ 947F ED 52        .Div24by24setbit:       sbc hl,de
  22+ 9481 99                                   sbc a,c
  23+ 9482 DD 23                                inc ix
  24+ 9484 E3           .Div24by24skip:         ex (sp),hl
  25+ 9485 2D                                   dec l
  26+ 9486 E3                                   ex (sp),hl
  27+ 9487 20 E5                                jr nz,.Div24by24loop
  28+ 9489 D1                                   pop de
  29+ 948A 48                                   ld c,b
  30+ 948B DD E5                                push ix
  31+ 948D D1                                   pop de
  32+ 948E C9                                   ret
  33+ 948F
  34+ 948F FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 9491 E6 7F                                and     SignMask8Bit
  36+ 9493 CD 64 94                             call    Div24by24
  37+ 9496 F5                                   push    af
  38+ 9497 FD 7C                                ld      a,iyh
  39+ 9499 E6 80                                and     SignOnly8Bit
  40+ 949B B1                                   or      c
  41+ 949C 4F                                   ld      c,a
  42+ 949D F1                                   pop     af
  43+ 949E C9                                   ret
  44+ 949F
  45+ 949F                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 949F FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 94A1 A9                                   xor     c               ; flip sign if negative
  48+ 94A2 E6 80                                and     SignOnly8Bit    ; .
  49+ 94A4 FD 6F                                ld      iyl,a           ; .
  50+ 94A6 79                                   ld      a,c             ; make both values ABS
  51+ 94A7 E6 7F                                and     SignMask8Bit    ; .
  52+ 94A9 4F                                   ld      c,a             ; .
  53+ 94AA FD 7C                                ld      a,iyh           ; .
  54+ 94AC E6 7F                                and     SignMask8Bit    ; .
  55+ 94AE CD 64 94                             call    Div24by24       ; do abs divide
  56+ 94B1 FD B5                                or      iyl             ; bring in sign bit
  57+ 94B3 FD 67                                ld      iyh,a           ; save a
  58+ 94B5 79                                   ld      a,c             ; sort sign for c
  59+ 94B6 FD B5                                or      iyl             ;
  60+ 94B8 4F                                   ld      c,a             ;
  61+ 94B9 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 94BB C9                                   ret
  63+ 94BC
  64+ 94BC              ; --------------------------------------------------------------
  65+ 94BC              ;divdide by 16 using undocumented instrunctions
  66+ 94BC              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 94BC              ;Output: BC = Quotient, HL = Remainder
  68+ 94BC 47           PROJ256mulAdivQ:        ld      b,a
  69+ 94BD 0E 00                                ld      c,0
  70+ 94BF 16 00                                ld      d,0
  71+ 94C1 3A F3 81                             ld      a,(varQ)
  72+ 94C4 5F                                   ld      e,a
  73+ 94C5 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 94C8 78                                   ld      a,b
  75+ 94C9 06 10                                ld      b,16
  76+ 94CB CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 94CD 17                                   rla             ; ...
  78+ 94CE ED 6A                                adc     hl,hl       ; ...
  79+ 94D0 ED 52                                sbc     hl,de       ; ...
  80+ 94D2 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 94D4 19                                   add     hl,de       ; ...
  82+ 94D5 0D                                   dec     c       ; ...
  83+ 94D6 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 94D8 79                                   ld      a,c
  85+ 94D9 32 F4 81                             ld      (varR),a
  86+ 94DC C9                                   ret
  87+ 94DD
  88+ 94DD
  89+ 94DD
  90+ 94DD
# file closed: ./Maths/DIVD3B2.asm
 609  94DD                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 94DD              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 94DD 2A F4 81                             ld  hl,(varRS)
   3+ 94E0 3A F3 81                             ld  a,(varQ)
   4+ 94E3 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 94E5 11 00 00                             ld  de,0        ; de = XY
   6+ 94E8 47                                   ld  b,a         ; b = Q
   7+ 94E9                                      ShiftHLRight1
   7+ 94E9 CB 3C       >			   srl h
   7+ 94EB CB 1D       >			   rr  l
   8+ 94ED CB 20                                sla b
   9+ 94EF 30 03                                jr  nc,.LL126
  10+ 94F1 EB           .LL125:                 ex de,hl
  11+ 94F2 19                                   add hl,de
  12+ 94F3 EB                                   ex  de,hl       ; de = de + rs
  13+ 94F4              .LL126:                 ShiftHLRight1
  13+ 94F4 CB 3C       >			   srl h
  13+ 94F6 CB 1D       >			   rr  l
  14+ 94F8 CB 20                                sla b
  15+ 94FA 38 F5                                jr      c,.LL125
  16+ 94FC 20 F6                                jr      nz,.LL126
  17+ 94FE EB                                   ex      de,hl   ; hl = result
  18+ 94FF D1 C1                                pop     bc,,de
  19+ 9501 C9                                   ret
  20+ 9502
  21+ 9502
  22+ 9502              MacroDEEquQmulASigned:  MACRO
  23+ 9502 ~                                    ld      d,a                         ; save a into d
  24+ 9502 ~                                    ld      a,(varQ)
  25+ 9502 ~                                    ld      e,a
  26+ 9502 ~                                    xor     d                           ; a = a xor var Q
  27+ 9502 ~                                    and     SignOnly8Bit
  28+ 9502 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ 9502 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ 9502 ~                                    and     SignMask8Bit
  31+ 9502 ~                                    ld      d,a
  32+ 9502 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ 9502 ~                                    and     SignMask8Bit
  34+ 9502 ~                                    ld      e,a
  35+ 9502 ~                                    mul                                 ; de = a * Q
  36+ 9502 ~                                    ld      a,d
  37+ 9502 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ 9502 ~                                    ld      d,a
  39+ 9502                                      ENDM
  40+ 9502
  41+ 9502
  42+ 9502
  43+ 9502                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ 9502              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ 9502 57          >                        ld      d,a                         ; save a into d
  44+ 9503 3A F3 81    >                        ld      a,(varQ)
  44+ 9506 5F          >                        ld      e,a
  44+ 9507 AA          >                        xor     d                           ; a = a xor var Q
  44+ 9508 E6 80       >                        and     SignOnly8Bit
  44+ 950A 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ 950B 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ 950C E6 7F       >                        and     SignMask8Bit
  44+ 950E 57          >                        ld      d,a
  44+ 950F 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ 9510 E6 7F       >                        and     SignMask8Bit
  44+ 9512 5F          >                        ld      e,a
  44+ 9513 ED 30       >                        mul                                 ; de = a * Q
  44+ 9515 7A          >                        ld      a,d
  44+ 9516 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ 9517 57          >                        ld      d,a
  45+ 9518 2A F4 81                             ld		hl,(varR)
  46+ 951B CD 43 95                             call	madXAAddHLDESigned
  47+ 951E EB                                   ex      de,hl                       ; de = R.S + DE
  48+ 951F                                      ClearCarryFlag
  48+ 951F B7          >                        or a
  49+ 9520 DD 6B                                ld      ixl,e
  50+ 9522 7A                                   ld      a,d
  51+ 9523 C9                                   ret
  52+ 9524
  53+ 9524              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  53+ 9524 57          >                        ld      d,a                         ; save a into d
  53+ 9525 3A F3 81    >                        ld      a,(varQ)
  53+ 9528 5F          >                        ld      e,a
  53+ 9529 AA          >                        xor     d                           ; a = a xor var Q
  53+ 952A E6 80       >                        and     SignOnly8Bit
  53+ 952C 47          >                        ld      b,a                         ; b = sign of a xor q
  53+ 952D 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  53+ 952E E6 7F       >                        and     SignMask8Bit
  53+ 9530 57          >                        ld      d,a
  53+ 9531 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  53+ 9532 E6 7F       >                        and     SignMask8Bit
  53+ 9534 5F          >                        ld      e,a
  53+ 9535 ED 30       >                        mul                                 ; de = a * Q
  53+ 9537 7A          >                        ld      a,d
  53+ 9538 B0          >                        or      b                           ; de = a * Q leading sign bit
  53+ 9539 57          >                        ld      d,a
  54+ 953A 2A F4 81                             ld		hl,(varR)
  55+ 953D CD 43 95                             call	madXAAddHLDESigned
  56+ 9540 EB                                   ex      de,hl                       ; de = R.S + DE
  57+ 9541                                      ClearCarryFlag
  57+ 9541 B7          >                        or a
  58+ 9542 C9                                   ret
  59+ 9543
  60+ 9543 7C           madXAAddHLDESigned:     ld      a,h
  61+ 9544 E6 80                                and     SignOnly8Bit
  62+ 9546 47                                   ld      b,a                         ;save sign bit in b
  63+ 9547 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  64+ 9548                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  64+ 9548 FA 60 95    >                        jp		m, .ADDHLDEOppSGN
  65+ 954B 78           .ADDHLDESameSigns:       ld      a,b
  66+ 954C B2                                   or      d
  67+ 954D                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  67+ 954D FA 52 95    >                        jp		m, .ADDHLDESameNeg
  68+ 9550 19                                   add     hl,de
  69+ 9551 C9                                   ret
  70+ 9552 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  71+ 9553 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  72+ 9555 67                                   ld      h,a
  73+ 9556 7A                                   ld      a,d
  74+ 9557 E6 7F                                and     SignMask8Bit
  75+ 9559 57                                   ld      d,a
  76+ 955A 19                                   add     hl,de
  77+ 955B 3E 80                                ld      a,SignOnly8Bit
  78+ 955D B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  79+ 955E 67                                   ld      h,a
  80+ 955F C9                                   ret
  81+ 9560 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  82+ 9561 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  83+ 9563 67                                   ld      h,a
  84+ 9564 7A                                   ld      a,d
  85+ 9565 E6 7F                                and     SignMask8Bit
  86+ 9567 57                                   ld      d,a
  87+ 9568 B7                                   or      a
  88+ 9569 ED 52                                sbc     hl,de
  89+ 956B 38 04                                jr      c,.ADDHLDEOppInvert
  90+ 956D 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  91+ 956E B4                                   or      h
  92+ 956F 67                                   ld      h,a                         ; set the previou sign value
  93+ 9570 C9                                   ret
  94+ 9571              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  94+ 9571 AF          >                    xor a
  94+ 9572 95          >                    sub l
  94+ 9573 6F          >                    ld l,a
  94+ 9574 9F          >                    sbc a,a
  94+ 9575 94          >                    sub h
  94+ 9576 67          >                    ld h,a
  95+ 9577 78                                   ld      a,b
  96+ 9578 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  97+ 957A B4                                   or      h
  98+ 957B 67                                   ld      h,a                         ; recover sign
  99+ 957C C9                                   ret
 100+ 957D
 101+ 957D
 102+ 957D                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 103+ 957D                  ;
 104+ 957D                  ; enter : hl = 16-bit multiplier   = x
 105+ 957D                  ;          e =  8-bit multiplicand = y
 106+ 957D                  ;
 107+ 957D                  ; exit  : ahl = 24-bit product
 108+ 957D                  ;         carry reset
 109+ 957D                  ;
 110+ 957D                  ; uses  : af, de, hl
 111+ 957D 54           AHLequHLmulE:           ld d,h                      ; xh
 112+ 957E 63                                   ld h,e                      ; yl
 113+ 957F ED 30                                mul de                      ; xh*yl
 114+ 9581 EB                                   ex de,hl
 115+ 9582 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 116+ 9584
 117+ 9584 7A                                   ld  a,d                     ; sum products
 118+ 9585 85                                   add a,l
 119+ 9586 57                                   ld  d,a
 120+ 9587 EB                                   ex de,hl
 121+ 9588
 122+ 9588 7A                                   ld  a,d
 123+ 9589 CE 00                                adc a,0
 124+ 958B C9                                   ret
 125+ 958C
 126+ 958C 54           HLE0quH0mulE:           ld      d,h                 ; .
 127+ 958D 63                                   ld      h,e                 ; .
 128+ 958E ED 30                                mul     de                  ; de = xh * yl
 129+ 9590 EB                                   ex      de,hl
 130+ 9591 C9                                   ret
 131+ 9592
 132+ 9592                 ; multiplication of two 16-bit numbers into a 32-bit product
 133+ 9592                 ;
 134+ 9592                 ; enter : de = 16-bit multiplicand = y
 135+ 9592                 ;         hl = 16-bit multiplicand = x
 136+ 9592                 ;
 137+ 9592                 ; exit  : dehl = 32-bit product
 138+ 9592                 ;         carry reset
 139+ 9592                 ;
 140+ 9592                 ; uses  : af, bc, de, hl
 141+ 9592
 142+ 9592
 143+ 9592
 144+ 9592 45           DEHLequDEmulHL:         ld b,l                      ; x0
 145+ 9593 4B                                   ld c,e                      ; y0
 146+ 9594 5D                                   ld e,l                      ; x0
 147+ 9595 6A                                   ld l,d
 148+ 9596 E5                                   push hl                     ; x1 y1
 149+ 9597 69                                   ld l,c                      ; y0
 150+ 9598              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 151+ 9598 ED 30                                mul de                      ; y1*x0
 152+ 959A EB                                   ex de,hl
 153+ 959B ED 30                                mul de                      ; x1*y0
 154+ 959D
 155+ 959D AF                                   xor a                       ; zero A
 156+ 959E 19                                   add hl,de                   ; sum cross products p2 p1
 157+ 959F 8F                                   adc a,a                     ; capture carry p3
 158+ 95A0
 159+ 95A0 59                                   ld e,c                      ; x0
 160+ 95A1 50                                   ld d,b                      ; y0
 161+ 95A2 ED 30                                mul de                      ; y0*x0
 162+ 95A4
 163+ 95A4 47                                   ld b,a                      ; carry from cross products
 164+ 95A5 4C                                   ld c,h                      ; LSB of MSW from cross products
 165+ 95A6
 166+ 95A6 7A                                   ld a,d
 167+ 95A7 85                                   add a,l
 168+ 95A8 67                                   ld h,a
 169+ 95A9 6B                                   ld l,e                      ; LSW in HL p1 p0
 170+ 95AA
 171+ 95AA D1                                   pop de
 172+ 95AB ED 30                                mul de                      ; x1*y1
 173+ 95AD
 174+ 95AD EB                                   ex de,hl
 175+ 95AE ED 4A                                adc hl,bc
 176+ 95B0 EB                                   ex de,hl                    ; de = final MSW
 177+ 95B1
 178+ 95B1 C9                                   ret
 179+ 95B2
 180+ 95B2              ; multiplication of two 16-bit numbers into a 16-bit product
 181+ 95B2              ; enter : de = 16-bit multiplicand
 182+ 95B2              ;         hl = 16-bit multiplicand
 183+ 95B2              ; exit  : hl = 16-bit product
 184+ 95B2              ;         carry reset
 185+ 95B2              ; maths is
 186+ 95B2              ;        hl = y , de= x
 187+ 95B2              ;        hl = xhi,ylo + (yhigh * xlow)
 188+ 95B2              ;        hl = yhih & xlo + x
 189+ 95B2              ;
 190+ 95B2              ;
 191+ 95B2              ; uses  : af, bc, de, hl
 192+ 95B2 C5           mulDEbyHL:              push    bc
 193+ 95B3 7A                                   ld a,d                      ; a = xh
 194+ 95B4 54                                   ld d,h                      ; d = yh
 195+ 95B5 67                                   ld h,a                      ; h = xh
 196+ 95B6 4B                                   ld c,e                      ; c = xl
 197+ 95B7 45                                   ld b,l                      ; b = yl
 198+ 95B8 ED 30                                mul                         ; yh * yl
 199+ 95BA EB                                   ex de,hl
 200+ 95BB ED 30                                mul                         ; xh * yl
 201+ 95BD 19                                   add hl,de                   ; add cross products
 202+ 95BE 59                                   ld e,c
 203+ 95BF 50                                   ld d,b
 204+ 95C0 ED 30                                mul                         ; yl * xl
 205+ 95C2 7D                                   ld a,l                      ; cross products lsb
 206+ 95C3 82                                   add a,d                     ; add to msb final
 207+ 95C4 67                                   ld h,a
 208+ 95C5 6B                                   ld l,e                      ; hl = final
 209+ 95C6                                      ; 83 cycles, 19 bytes
 210+ 95C6 AF                                   xor a                       ; reset carry
 211+ 95C7 C1                                   pop     bc
 212+ 95C8 C9                                   ret
 213+ 95C9
 214+ 95C9
 215+ 95C9              ; CHL = multiplicand D = multiplier
 216+ 95C9              ; DCHL = CHL * D
 217+ 95C9 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 218+ 95CA AC                                   xor     h                   ; xor with h to get resultant sign
 219+ 95CB E6 80                                and     SignOnly8Bit        ; .
 220+ 95CD FD 67                                ld      iyh,a               ; iyh = copy of sign
 221+ 95CF 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 222+ 95D0 E6 7F                                and     SignMask8Bit        ; .
 223+ 95D2 4F                                   ld      c,a                 ; .
 224+ 95D3 7A                                   ld      a,d                 ; d = ABS D
 225+ 95D4 E6 7F                                and     SignMask8Bit        ; .
 226+ 95D6              ; At this point CHL = ABS (HLE), A = ABS(D)
 227+ 95D6 57           .mul1:                  ld      d,a                 ; first do D * L
 228+ 95D7 5D                                   ld      e,l                 ; .
 229+ 95D8 ED 30                                mul     de                  ; DE = L * D
 230+ 95DA 08                                   ex      af,af'              ; save multiplier
 231+ 95DB 6B                                   ld      l,e                 ; L = p0
 232+ 95DC 7A                                   ld      a,d                 ; carry byte
 233+ 95DD 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 234+ 95DE 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 235+ 95DF 57                                   ld      d,a                 ; and multiplier
 236+ 95E0 ED 30                                mul     de                  ; now its D & L
 237+ 95E2 08                                   ex      af,af'              ; get back carry byte with flags
 238+ 95E3 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 239+ 95E4 67                                   ld      h,a                 ; h = P1
 240+ 95E5 7A                                   ld      a,d                 ; a = carry byte
 241+ 95E6 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 242+ 95E7 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 243+ 95E8 57                                   ld      d,a                 ;
 244+ 95E9 ED 30                                mul     de                  ;
 245+ 95EB 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 246+ 95EC 8B                                   adc     a,e                 ;
 247+ 95ED FD B4                                or      iyh                 ; recover saved resultant sign
 248+ 95EF 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 249+ 95F0 C9                                   ret
 250+ 95F1
 251+ 95F1              ;  CHL = 53456 D = 1E
 252+ 95F1              ;  56 * 1E = A14 L = 14 carry = 0A
 253+ 95F1              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 254+ 95F1              ;  5  * 1E = 096 C = 96 + 6 = 9C
 255+ 95F1              ;  CHL = 9C2214
 256+ 95F1              ;mult3
 257+ 95F1              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 258+ 95F1              ; HLE = multiplicand D = multiplier
 259+ 95F1              ; tested by mathstestsun.asm all passed
 260+ 95F1              ; Algorithm
 261+ 95F1              ; AC =  E * D   (save carry)         H    L    E
 262+ 95F1              ; DE =  L * D                                  D
 263+ 95F1              ;  L =  A + E + carry                         E*D (lo)
 264+ 95F1              ; DE =  H * D                             L*D+ ^ (hi)
 265+ 95F1              ;  E =  A + E + carry                H*D (lo) + carry
 266+ 95F1              ;
 267+ 95F1              ;
 268+ 95F1 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 269+ 95F2 AC                                   xor     h                   ; xor with h to get resultant sign
 270+ 95F3 E6 80                                and     SignOnly8Bit        ; .
 271+ 95F5 FD 67                                ld      iyh,a               ; iyh = copy of sign
 272+ 95F7 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 273+ 95F8 E6 7F                                and     SignMask8Bit        ; .
 274+ 95FA 67                                   ld      h,a                 ; .
 275+ 95FB 7A                                   ld      a,d                 ; d = ABS D
 276+ 95FC E6 7F                                and     SignMask8Bit        ; .
 277+ 95FE 57                                   ld      d,a                 ; .
 278+ 95FF B7           .testEitherSideZero:    or      a
 279+ 9600 28 24                                jr      z,.ResultZero
 280+ 9602 7C                                   ld      a,h
 281+ 9603 B5                                   or      l
 282+ 9604 B3                                   or      e
 283+ 9605 28 1F                                jr      z,.ResultZero
 284+ 9607              ; At this point HLE = ABS (HLE), A = ABS(D)
 285+ 9607 42                                   ld      b,d                 ; save Quotient
 286+ 9608 ED 30        .mul1:                  mul     de                  ; C = E * D
 287+ 960A 4B                                   ld      c,e                 ; C = p0
 288+ 960B FD 6A                                ld      iyl,d               ; save carry (p1)
 289+ 960D 5D           .mul2:                  ld      e,l                 ; L = L * D
 290+ 960E 50                                   ld      d,b                 ; .
 291+ 960F ED 30                                mul     de                  ; .
 292+ 9611 FD 7D                                ld      a,iyl               ; get back p1
 293+ 9613 83           .carrybyte1:            add     a,e                 ; L = L + E
 294+ 9614 6F                                   ld      l,a                 ; .
 295+ 9615 FD 6A                                ld      iyl,d               ; save new carry byte
 296+ 9617 5C           .mul3:                  ld      e,h                 ; E = H * D
 297+ 9618 50                                   ld      d,b                 ; .
 298+ 9619 ED 30                                mul     de                  ; .
 299+ 961B FD 7D                                ld      a,iyl
 300+ 961D 8B                                   adc     a,e                 ; .
 301+ 961E 5F                                   ld      e,a                 ; .
 302+ 961F 7A           .ItsNotZero:            ld      a,d                 ;
 303+ 9620 CE 00                                adc     a,0                 ; final carry bit
 304+ 9622 FD B4                                or      iyh                 ; bring back sign
 305+ 9624 57                                   ld      d,a                 ; s = sign
 306+ 9625 C9                                   ret
 307+ 9626 11 00 00     .ResultZero:            ld      de,0
 308+ 9629                                      ZeroA
 308+ 9629 AF          >                        xor a
 309+ 962A 4F                                   ld      c,a
 310+ 962B 6F                                   ld      l,a
 311+ 962C C9                                   ret
 312+ 962D
 313+ 962D              ;;;
 314+ 962D              ;;;
 315+ 962D              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 316+ 962D              ;;;                        xor     h                   ; xor with h to get resultant sign
 317+ 962D              ;;;                        and     SignOnly8Bit        ; .
 318+ 962D              ;;;                        ld      iyh,a               ; iyh = copy of sign
 319+ 962D              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 320+ 962D              ;;;                        and     SignMask8Bit        ; .
 321+ 962D              ;;;                        ld      h,a                 ; .
 322+ 962D              ;;;                        ld      a,d                 ; d = ABS D
 323+ 962D              ;;;                        and     SignMask8Bit        ; .
 324+ 962D              ;;;                        ld      d,a                 ; .
 325+ 962D              ;;;.testEitherSideZero:    or      a
 326+ 962D              ;;;                        jr      z,.ResultZero
 327+ 962D              ;;;                        ld      a,h
 328+ 962D              ;;;                        or      l
 329+ 962D              ;;;                        or      e
 330+ 962D              ;;;                        jr      z,.ResultZero
 331+ 962D              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 332+ 962D              ;;;.mul1:                  mul     de                  ; C = E * D
 333+ 962D              ;;;                        ex      af,af'              ; save mulitplier
 334+ 962D              ;;;                        ld      c,e                 ; C = p0
 335+ 962D              ;;;                        ld      a,d                 ; save carry (p1)
 336+ 962D              ;;;                        ex      af,af'              ; .
 337+ 962D              ;;;.mul2:                  ld      e,l                 ; L = L * D
 338+ 962D              ;;;                        ld      d,a                 ; .
 339+ 962D              ;;;                        mul     de                  ; .
 340+ 962D              ;;;                        ex      af,af'              ; .
 341+ 962D              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 342+ 962D              ;;;                        ld      l,a                 ; .
 343+ 962D              ;;;                        ld      a,d
 344+ 962D              ;;;                        ex      af,af'              ; save new carry byte
 345+ 962D              ;;;.mul3:                  ld      e,h                 ; E = H * D
 346+ 962D              ;;;                        ld      d,a                 ; .
 347+ 962D              ;;;                        mul     de                  ; .
 348+ 962D              ;;;                        ex      af,af'              ; .
 349+ 962D              ;;;                        adc     a,e                 ; .
 350+ 962D              ;;;                        ld      e,a                 ; .
 351+ 962D              ;;;.ItsNotZero:            ld      a,d                 ;
 352+ 962D              ;;;                        adc     a,0                 ; final carry bit
 353+ 962D              ;;;                        or      iyh                 ; bring back sign
 354+ 962D              ;;;                        ld      d,a                 ; s = sign
 355+ 962D              ;;;                        ret
 356+ 962D              ;;;.ResultZero:            ld      de,0
 357+ 962D              ;;;                        ZeroA
 358+ 962D              ;;;                        ld      c,a
 359+ 962D              ;;;                        ld      l,a
 360+ 962D              ;;;                        ret
 361+ 962D
 362+ 962D              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 363+ 962D              ; enter : de = 16-bit multiplicand
 364+ 962D              ;         hl = 16-bit multiplicand
 365+ 962D              ; exit  : hl = 16-bit product
 366+ 962D              ;         carry reset
 367+ 962D              ;
 368+ 962D              ; uses  : af, bc, de, hl
 369+ 962D 00           mulDEbyHLSignByte       DB      0
 370+ 962E AF           mulDEbyHLSgnTo2c:       xor     a
 371+ 962F 32 2D 96                             ld      (mulDEbyHLSignByte),a
 372+ 9632 7A           .SignDE:                ld      a,d
 373+ 9633 ED 27 80                             test    $80
 374+ 9636 28 08                                jr      z,.SignHL
 375+ 9638 E6 7F        .NegativeDE:            and     $7F
 376+ 963A 57                                   ld      d,a
 377+ 963B 3E 80                                ld      a,$80
 378+ 963D 32 2D 96                             ld      (mulDEbyHLSignByte),a
 379+ 9640 7C           .SignHL:                ld      a,h
 380+ 9641 ED 27 80                             test    $80
 381+ 9644 28 0B                                jr      z,.AbsoluteMultiply
 382+ 9646 E6 7F        .NegativeHL:            and     $7F
 383+ 9648 67                                   ld      h,a
 384+ 9649 3A 2D 96                             ld      a,(mulDEbyHLSignByte)
 385+ 964C EE 80                                xor     $80
 386+ 964E 32 2D 96                             ld      (mulDEbyHLSignByte),a
 387+ 9651 CD B2 95     .AbsoluteMultiply:      call    mulDEbyHL
 388+ 9654 3A 2D 96     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 389+ 9657 ED 27 80                             test    $80
 390+ 965A C8                                   ret     z
 391+ 965B AF           .Negateghl: 			xor 	a
 392+ 965C 95                                   sub 	l
 393+ 965D 6F                                   ld 		l,a
 394+ 965E 9F                                   sbc 	a,a
 395+ 965F 94                                   sub 	h
 396+ 9660 67                                   ld 		h,a
 397+ 9661 C9                                   ret
 398+ 9662
 399+ 9662 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 400+ 9663 32 2D 96                             ld      (mulDEbyHLSignByte),a
 401+ 9666 7A           .SignDE:                ld      a,d
 402+ 9667 ED 27 80                             test    $80
 403+ 966A 28 08                                jr      z,.AbsoluteMultiply
 404+ 966C E6 7F        .NegativeDE:            and     $7F
 405+ 966E 57                                   ld      d,a
 406+ 966F 3E 80                                ld      a,$80
 407+ 9671 32 2D 96                             ld      (mulDEbyHLSignByte),a
 408+ 9674 CD B2 95     .AbsoluteMultiply:      call    mulDEbyHL
 409+ 9677 3A 2D 96     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 410+ 967A ED 27 80                             test    $80
 411+ 967D C8                                   ret     z
 412+ 967E AF           .Negateghl:             xor 	a
 413+ 967F 95                                   sub 	l
 414+ 9680 6F                                   ld 		l,a
 415+ 9681 9F                                   sbc 	a,a
 416+ 9682 94                                   sub 	h
 417+ 9683 67                                   ld 		h,a
 418+ 9684 C9                                   ret
 419+ 9685
 420+ 9685
# file closed: ./Maths/multiply.asm
 610  9685                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 9685              ; "ASM_SQUA : TESTGOOD"
   2+ 9685              ; "AP = A^2 A = low,P = hi"
   3+ 9685
   4+ 9685              inline_squde: MACRO
   5+ 9685 ~            			ld	e,a
   6+ 9685 ~            			ld  d,a
   7+ 9685 ~            			mul
   8+ 9685              			ENDM
   9+ 9685
  10+ 9685              inline_squa: MACRO
  11+ 9685 ~            			ld	e,a
  12+ 9685 ~            			ld  d,a
  13+ 9685 ~            			mul
  14+ 9685 ~            			ld	a,e
  15+ 9685              			ENDM
  16+ 9685
# file closed: ./Maths/asm_square.asm
 611  9685                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9685              ; "ASM SQRT : TESTGOOD"
   2+ 9685              ; "16-bit integer square root"
   3+ 9685              ; "call with de = number to square root"
   4+ 9685              ; "returns   hl = square root"
   5+ 9685              ; "corrupts  bc, de"
   6+ 9685              asm_sqrt:
   7+ 9685 01 00 80     	ld bc,$8000
   8+ 9688 61           	ld h,c
   9+ 9689 69           	ld l,c
  10+ 968A              .sqrloop:
  11+ 968A CB 38        	srl b
  12+ 968C CB 19        	rr c
  13+ 968E 09           	add hl,bc
  14+ 968F EB           	ex de,hl
  15+ 9690 ED 52        	sbc hl,de
  16+ 9692 38 04        	jr c,.sqrbit
  17+ 9694 EB           	ex de,hl
  18+ 9695 09           	add hl,bc
  19+ 9696 18 05        	jr .sqrfi
  20+ 9698              .sqrbit:
  21+ 9698 19           	add hl,de
  22+ 9699 EB           	ex de,hl
  23+ 969A B7           	or a
  24+ 969B ED 42        	sbc hl,bc
  25+ 969D              .sqrfi:
  26+ 969D CB 3C        	srl h
  27+ 969F CB 1D        	rr l
  28+ 96A1 CB 38        	srl b
  29+ 96A3 CB 19        	rr c
  30+ 96A5 30 E3        	jr nc,.sqrloop
  31+ 96A7 C9           	ret
  32+ 96A8
  33+ 96A8
  34+ 96A8              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 96A8 3A F3 81     	ld		a,(varQ)
  36+ 96AB 5F           	ld		e,a
  37+ 96AC 3A F4 81     	ld		a,(varR)
  38+ 96AF 57           	ld		d,a
  39+ 96B0 CD 85 96     	call	asm_sqrt
  40+ 96B3 7D               ld      a,l
  41+ 96B4 32 F3 81     	ld		(varQ),a
  42+ 96B7 C9           	ret
  43+ 96B8
# file closed: ./Maths/asm_sqrt.asm
 612  96B8                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 96B8
   2+ 96B8
   3+ 96B8
   4+ 96B8              ;
   5+ 96B8              ;   Set flags E to 11111110
   6+ 96B8              ;   Loop:   A << 2
   7+ 96B8              ;           if carry was 0
   8+ 96B8              ;               if a >= D
   9+ 96B8              ;                   A = A - D
  10+ 96B8              ;                   clear carry (probably irrelevant really)
  11+ 96B8              ;           else
  12+ 96B8
  13+ 96B8              ;               sla flags << bringing in carry of 1
  14+ 96B8              ;               if bit 7 of flag was set then loop
  15+ 96B8              ;                                        elase a = e and exit
  16+ 96B8              ;
  17+ 96B8              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  18+ 96B8              ;
  19+ 96B8              ;INPUTS: hl = dividend dbc = divisor
  20+ 96B8              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  21+ 96B8
  22+ 96B8 57           DVIDT:                  ld      d,a                     ; D = var P+1
  23+ 96B9 3A F3 81                             ld      a,(varQ)
  24+ 96BC 4F                                   ld      c,a                     ; C = var Q
  25+ 96BD 3A F4 80                             ld      a,(varP)
  26+ 96C0 5F                                   ld      e,a                     ; E = var P
  27+ 96C1                                      ; Need fast exists on ABS values
  28+ 96C1 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
  29+ 96C2 B3                                   or      e                       ; .
  30+ 96C3 28 2A                                jr      z,.ResultIsZero         ; .
  31+ 96C5 79                                   ld      a,c                     ; Fast exit is divide by 0
  32+ 96C6 A7                                   and     a                       ;
  33+ 96C7 28 29                                jr      z,.ResultIsFFFF         ;
  34+ 96C9 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  35+ 96CA A9                                   xor     c                       ;
  36+ 96CB E6 80                                and     $80
  37+ 96CD 6F                                   ld      l,a                     ; l = var T
  38+ 96CE 3E 00                                ld      a,0
  39+ 96D0 06 10                                ld      b,16
  40+ 96D2                                      ShiftDELeft1
  40+ 96D2 CB 23       >			   sla e
  40+ 96D4 CB 12       >			   rl  d
  41+ 96D6 CB 21                                sla     c                       ; c = abs c
  42+ 96D8 CB 39                                srl     c
  43+ 96DA CB 17        .DivideLoop:            rl      a
  44+ 96DC                                      JumpIfALTNusng c, .SkipSubtract
  44+ 96DC B9          >                        cp      c
  44+ 96DD DA E3 96    >                        jp		c, .SkipSubtract
  45+ 96E0                                      ClearCarryFlag
  45+ 96E0 B7          >                        or a
  46+ 96E1 99                                   sbc     c
  47+ 96E2                                      ClearCarryFlag
  47+ 96E2 B7          >                        or a
  48+ 96E3 3F           .SkipSubtract:          ccf
  49+ 96E4 CB 13                                rl      e
  50+ 96E6 CB 12                                rl      d
  51+ 96E8 05                                   dec     b
  52+ 96E9 20 EF                                jr      nz,.DivideLoop
  53+ 96EB 7B                                   ld      a,e
  54+ 96EC B5                                   or      l
  55+ 96ED 42                                   ld      b,d
  56+ 96EE C9                                   ret
  57+ 96EF              .ResultIsZero:          ZeroA
  57+ 96EF AF          >                        xor a
  58+ 96F0 47                                   ld      b,a
  59+ 96F1 C9                                   ret
  60+ 96F2 3E FF        .ResultIsFFFF:          ld      a,$FF
  61+ 96F4 47                                   ld      b,a
  62+ 96F5 C9                                   ret
  63+ 96F6
  64+ 96F6 57           DIV96:                  ld      d,a                     ; D = var P+1
  65+ 96F7 3A F3 81                             ld      a,(varQ)
  66+ 96FA 0E 60                                ld      c,96                    ; C = var Q
  67+ 96FC 3A F4 80                             ld      a,(varP)
  68+ 96FF 5F                                   ld      e,a                     ; E = var P
  69+ 9700                                      ; Need fast exists on ABS values
  70+ 9700 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
  71+ 9701 B3                                   or      e                       ; .
  72+ 9702 28 26                                jr      z,.ResultIsZero         ; .
  73+ 9704 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  74+ 9705 A9                                   xor     c                       ;
  75+ 9706 E6 80                                and     $80
  76+ 9708 6F                                   ld      l,a                     ; l = var T
  77+ 9709 3E 00                                ld      a,0
  78+ 970B 06 10                                ld      b,16
  79+ 970D                                      ShiftDELeft1
  79+ 970D CB 23       >			   sla e
  79+ 970F CB 12       >			   rl  d
  80+ 9711 CB 21                                sla     c                       ; c = abs c
  81+ 9713 CB 39                                srl     c
  82+ 9715 CB 17        .DivideLoop:            rl      a
  83+ 9717                                      JumpIfALTNusng c, .SkipSubtract
  83+ 9717 B9          >                        cp      c
  83+ 9718 DA 1E 97    >                        jp		c, .SkipSubtract
  84+ 971B                                      ClearCarryFlag
  84+ 971B B7          >                        or a
  85+ 971C 99                                   sbc     c
  86+ 971D                                      ClearCarryFlag
  86+ 971D B7          >                        or a
  87+ 971E 3F           .SkipSubtract:          ccf
  88+ 971F CB 13                                rl      e
  89+ 9721 CB 12                                rl      d
  90+ 9723 05                                   dec     b
  91+ 9724 20 EF                                jr      nz,.DivideLoop
  92+ 9726 7B                                   ld      a,e
  93+ 9727 B5                                   or      l
  94+ 9728 42                                   ld      b,d
  95+ 9729 C9                                   ret
  96+ 972A              .ResultIsZero:          ZeroA
  96+ 972A AF          >                        xor a
  97+ 972B 47                                   ld      b,a
  98+ 972C C9                                   ret
  99+ 972D
 100+ 972D 14           Div16by24usgn:          inc     d                           ; can we fast retu
 101+ 972E 15                                   dec     d
 102+ 972F 20 13                                jr      nz,.ResultZero
 103+ 9731 50 59                                ld      de,bc                       ; so prep for bc/de
 104+ 9733 44 4D                                ld      bc,hl
 105+ 9735 7A           .div16by16usng:         ld      a,d
 106+ 9736 B3                                   or      e
 107+ 9737 28 10                                jr      z,.DivideByZero
 108+ 9739 14                                   inc     d
 109+ 973A 15                                   dec     d
 110+ 973B CD C0 98                             call    BC_Div_DE
 111+ 973E                                      ZeroA
 111+ 973E AF          >                        xor a
 112+ 973F EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 113+ 9740 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 114+ 9742 4F                                   ld      c,a                         ; now fix c
 115+ 9743 C9                                   ret
 116+ 9744 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 117+ 9745 4F                                   ld      c,a                         ; c = 0
 118+ 9746 67                                   ld      h,a
 119+ 9747 6F                                   ld      l,a
 120+ 9748 C9                                   ret
 121+ 9749 3E FF        .DivideByZero:          ld      a,$FF
 122+ 974B 67                                   ld      h,a
 123+ 974C 6F                                   ld      l,a
 124+ 974D                                      SetCarryFlag
 124+ 974D 37          >                        scf
 125+ 974E C9                                   ret
 126+ 974F
 127+ 974F              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 128+ 974F 06 08        HLEquAmul256DivD:       ld		b,8							; counter
 129+ 9751 CB 27                                sla		a							;
 130+ 9753 67                                   ld		h,a							; r a * 2 we will build result in hl
 131+ 9754 CB 17        .DivideLoop:            rl		a							; a = a * 2
 132+ 9756 38 03                                jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 133+ 9758 BA                                   cp      d                           ; what was var Q
 134+ 9759 38 03                                jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 135+ 975B              .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 135+ 975B B7          >                        or a
 136+ 975C 9A                                   sbc     a,d                         ; a = a - q
 137+ 975D                                      ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 137+ 975D B7          >                        or a
 138+ 975E 3F           .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 139+ 975F CB 14                                rl      h                           ; roll d left bringing in carry if there was an sbc performed
 140+ 9761 10 F1                                djnz    .DivideLoop                 ; 8 cycles
 141+ 9763 BA           .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 142+ 9764 30 19                                jr      nc, .RemainderTooBig
 143+ 9766                                      ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 143+ 9766 B7          >                        or a
 144+ 9767 06 FE        .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 145+ 9769 68                                   ld      l,b                         ; and set l to capture result bits (R)
 146+ 976A CB 27        .RemainderLoop:         sla     a                           ; shift a left
 147+ 976C 38 0A                                jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 148+ 976E BA                                   cp      d                           ; if a < d then skip subtraction
 149+ 976F 38 01                                jr      c,.RemainderSkipSubtract    ; .
 150+ 9771 9A                                   sbc     d                           ; a > q so a = a - q, carry will be clear here
 151+ 9772 3F           .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 152+ 9773 CB 15                                rl      l                           ; rotate counter to the left
 153+ 9775 38 F3                                jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 154+ 9777 C9                                   ret
 155+ 9778 9A           .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 156+ 9779                                      SetCarryFlag                        ; roll in a carry bit to result
 156+ 9779 37          >                        scf
 157+ 977A CB 15                                rl      l                           ;
 158+ 977C 38 EC                                jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 159+ 977E C9                                   ret
 160+ 977F 2E FF        .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 161+ 9781 C9                                   ret
 162+ 9782
 163+ 9782 BA           AEquAmul256DivD:        cp      d
 164+ 9783 28 1D                                jr      z,.BothSame
 165+ 9785 30 1E                                jr      nc,.DgtA
 166+ 9787 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 167+ 9789 CB 27        .DivideLoop:            sla     a
 168+ 978B 38 0D                                jr      c,.LL29
 169+ 978D                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 169+ 978D BA          >                        cp      d
 169+ 978E DA 93 97    >                        jp		c, .SkipSub
 170+ 9791 92                                   sub     d
 171+ 9792                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 171+ 9792 B7          >                        or a
 172+ 9793              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 172+ 9793 3F          >                        ccf
 173+ 9794 CB 13                                rl      e
 174+ 9796 38 F1                                jr      c,.DivideLoop
 175+ 9798 7B                                   ld      a,e
 176+ 9799 C9                                   ret
 177+ 979A 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 178+ 979B                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 178+ 979B 37          >                        scf
 179+ 979C CB 13                                rl      e                           ; rotate counter e left
 180+ 979E 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 181+ 97A0 7B                                   ld      a,e                         ; stick result in a
 182+ 97A1 C9                                   ret
 183+ 97A2 3E 01        .BothSame:              ld  a,1
 184+ 97A4 C9                                   ret
 185+ 97A5 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 186+ 97A7 C9                                   ret
 187+ 97A8
 188+ 97A8
 189+ 97A8              ; Divide 8-bit values
 190+ 97A8              ; In: Divide E by divider C
 191+ 97A8              ; Out: A = result, B = rest
 192+ 97A8              ;
 193+ 97A8              ;;;Div8:
 194+ 97A8              ;;;    xor a
 195+ 97A8              ;;;    ld b,8
 196+ 97A8              ;;;Div8_Loop:
 197+ 97A8              ;;;    rl e
 198+ 97A8              ;;;    rla
 199+ 97A8              ;;;    sub c
 200+ 97A8              ;;;    jr nc,Div8_NoAdd
 201+ 97A8              ;;;    add a,c
 202+ 97A8              ;;;Div8_NoAdd:
 203+ 97A8              ;;;    djnz Div8_Loop
 204+ 97A8              ;;;    ld b,a0
 205+ 97A8              ;;;    ld a,e
 206+ 97A8              ;;;    rla
 207+ 97A8              ;;;    cpl
 208+ 97A8              ;;;    ret
 209+ 97A8
 210+ 97A8              ;;Inputs: DE is the numerator, BC is the divisor
 211+ 97A8              ;;Outputs: DE is the result
 212+ 97A8              ;;         A is a copy of E
 213+ 97A8              ;;         HL is the remainder
 214+ 97A8              ;;         BC is not changed
 215+ 97A8              ;; so DE = DE /BC
 216+ 97A8              ;140 bytes
 217+ 97A8              ;145cc
 218+ 97A8
 219+ 97A8              MacroDEDivBC:       MACRO
 220+ 97A8 ~                                rla
 221+ 97A8 ~                                adc     hl,hl
 222+ 97A8 ~                                sbc     hl,bc
 223+ 97A8 ~                                jr      nc,$+3
 224+ 97A8 ~                                add     hl,bc
 225+ 97A8                                  ENDM
 226+ 97A8
 227+ 97A8              DEequDEDivBC:
 228+ 97A8 AF               xor a
 229+ 97A9 ED 62            sbc hl,hl
 230+ 97AB 7A               ld a,d
 231+ 97AC                  MacroDEDivBC
 231+ 97AC 17          >                    rla
 231+ 97AD ED 6A       >                    adc     hl,hl
 231+ 97AF ED 42       >                    sbc     hl,bc
 231+ 97B1 30 01       >                    jr      nc,$+3
 231+ 97B3 09          >                    add     hl,bc
 232+ 97B4                  MacroDEDivBC
 232+ 97B4 17          >                    rla
 232+ 97B5 ED 6A       >                    adc     hl,hl
 232+ 97B7 ED 42       >                    sbc     hl,bc
 232+ 97B9 30 01       >                    jr      nc,$+3
 232+ 97BB 09          >                    add     hl,bc
 233+ 97BC                  MacroDEDivBC
 233+ 97BC 17          >                    rla
 233+ 97BD ED 6A       >                    adc     hl,hl
 233+ 97BF ED 42       >                    sbc     hl,bc
 233+ 97C1 30 01       >                    jr      nc,$+3
 233+ 97C3 09          >                    add     hl,bc
 234+ 97C4                  MacroDEDivBC
 234+ 97C4 17          >                    rla
 234+ 97C5 ED 6A       >                    adc     hl,hl
 234+ 97C7 ED 42       >                    sbc     hl,bc
 234+ 97C9 30 01       >                    jr      nc,$+3
 234+ 97CB 09          >                    add     hl,bc
 235+ 97CC                  MacroDEDivBC
 235+ 97CC 17          >                    rla
 235+ 97CD ED 6A       >                    adc     hl,hl
 235+ 97CF ED 42       >                    sbc     hl,bc
 235+ 97D1 30 01       >                    jr      nc,$+3
 235+ 97D3 09          >                    add     hl,bc
 236+ 97D4                  MacroDEDivBC
 236+ 97D4 17          >                    rla
 236+ 97D5 ED 6A       >                    adc     hl,hl
 236+ 97D7 ED 42       >                    sbc     hl,bc
 236+ 97D9 30 01       >                    jr      nc,$+3
 236+ 97DB 09          >                    add     hl,bc
 237+ 97DC                  MacroDEDivBC
 237+ 97DC 17          >                    rla
 237+ 97DD ED 6A       >                    adc     hl,hl
 237+ 97DF ED 42       >                    sbc     hl,bc
 237+ 97E1 30 01       >                    jr      nc,$+3
 237+ 97E3 09          >                    add     hl,bc
 238+ 97E4                  MacroDEDivBC
 238+ 97E4 17          >                    rla
 238+ 97E5 ED 6A       >                    adc     hl,hl
 238+ 97E7 ED 42       >                    sbc     hl,bc
 238+ 97E9 30 01       >                    jr      nc,$+3
 238+ 97EB 09          >                    add     hl,bc
 239+ 97EC 17               rla
 240+ 97ED 2F               cpl
 241+ 97EE 57               ld d,a
 242+ 97EF
 243+ 97EF 7B               ld a,e
 244+ 97F0                  MacroDEDivBC
 244+ 97F0 17          >                    rla
 244+ 97F1 ED 6A       >                    adc     hl,hl
 244+ 97F3 ED 42       >                    sbc     hl,bc
 244+ 97F5 30 01       >                    jr      nc,$+3
 244+ 97F7 09          >                    add     hl,bc
 245+ 97F8                  MacroDEDivBC
 245+ 97F8 17          >                    rla
 245+ 97F9 ED 6A       >                    adc     hl,hl
 245+ 97FB ED 42       >                    sbc     hl,bc
 245+ 97FD 30 01       >                    jr      nc,$+3
 245+ 97FF 09          >                    add     hl,bc
 246+ 9800                  MacroDEDivBC
 246+ 9800 17          >                    rla
 246+ 9801 ED 6A       >                    adc     hl,hl
 246+ 9803 ED 42       >                    sbc     hl,bc
 246+ 9805 30 01       >                    jr      nc,$+3
 246+ 9807 09          >                    add     hl,bc
 247+ 9808                  MacroDEDivBC
 247+ 9808 17          >                    rla
 247+ 9809 ED 6A       >                    adc     hl,hl
 247+ 980B ED 42       >                    sbc     hl,bc
 247+ 980D 30 01       >                    jr      nc,$+3
 247+ 980F 09          >                    add     hl,bc
 248+ 9810                  MacroDEDivBC
 248+ 9810 17          >                    rla
 248+ 9811 ED 6A       >                    adc     hl,hl
 248+ 9813 ED 42       >                    sbc     hl,bc
 248+ 9815 30 01       >                    jr      nc,$+3
 248+ 9817 09          >                    add     hl,bc
 249+ 9818                  MacroDEDivBC
 249+ 9818 17          >                    rla
 249+ 9819 ED 6A       >                    adc     hl,hl
 249+ 981B ED 42       >                    sbc     hl,bc
 249+ 981D 30 01       >                    jr      nc,$+3
 249+ 981F 09          >                    add     hl,bc
 250+ 9820                  MacroDEDivBC
 250+ 9820 17          >                    rla
 250+ 9821 ED 6A       >                    adc     hl,hl
 250+ 9823 ED 42       >                    sbc     hl,bc
 250+ 9825 30 01       >                    jr      nc,$+3
 250+ 9827 09          >                    add     hl,bc
 251+ 9828                  MacroDEDivBC
 251+ 9828 17          >                    rla
 251+ 9829 ED 6A       >                    adc     hl,hl
 251+ 982B ED 42       >                    sbc     hl,bc
 251+ 982D 30 01       >                    jr      nc,$+3
 251+ 982F 09          >                    add     hl,bc
 252+ 9830 17               rla
 253+ 9831 2F               cpl
 254+ 9832 5F               ld e,a
 255+ 9833 C9               ret
 256+ 9834
 257+ 9834
 258+ 9834
 259+ 9834              ;divdide by 16 using undocumented instrunctions
 260+ 9834              ;Input: BC = Dividend, DE = Divisor, HL = 0
 261+ 9834              ;Output: BC = Quotient, HL = Remainder
 262+ 9834              ; Our use
 263+ 9834              ; BC = A0
 264+ 9834              ; DE = 0C
 265+ 9834              ; so BC = a * 256 / C
 266+ 9834              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 266+ 9834 B9          >                        cp     c
 266+ 9835 D2 60 98    >                        jp		nc,DEV16ATooLarge
 267+ 9838 47                                   ld      b,a
 268+ 9839 59                                   ld      e,c
 269+ 983A 0E 00                                ld      c,0
 270+ 983C 16 00                                ld      d,0
 271+ 983E C3 4B 98                             jp      DIV16UNDOC
 272+ 9841 47           DIV16Amul256dQUNDOC:    ld      b,a
 273+ 9842 0E 00                                ld      c,0
 274+ 9844 21 F3 81                             ld      hl,varQ
 275+ 9847 7E                                   ld      a,(hl)
 276+ 9848 16 00                                ld      d,0
 277+ 984A 5F                                   ld      e,a
 278+ 984B              DIV16BCDivDEUNDOC:
 279+ 984B 21 00 00     DIV16UNDOC:             ld      hl,0
 280+ 984E 78                                   ld      a,b
 281+ 984F 06 10                                ld      b,16
 282+ 9851 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 283+ 9853 17                                   rla			; ...
 284+ 9854 ED 6A                                adc	hl,hl		; ...
 285+ 9856 ED 52                                sbc	hl,de		; ...
 286+ 9858 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 287+ 985A 19                                   add	hl,de		; ...
 288+ 985B 0D                                   dec	c		; ...
 289+ 985C 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 290+ 985E 47                                   ld   b,a
 291+ 985F C9                                   ret
 292+ 9860 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 293+ 9863 C9                                   ret
 294+ 9864              ; switch to logarithm version
 295+ 9864              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 296+ 9864 06 08        asm_div8:               ld b,8
 297+ 9866 AF                                   xor a
 298+ 9867 CB 21        .div8_loop:	            sla c
 299+ 9869 17                                   rla
 300+ 986A BA                                   cp d
 301+ 986B 38 02                                jr c,.div8_skip
 301+ 986D
 302+ 986D 0C                                   inc c
 303+ 986E 92                                   sub d
 304+ 986F 10 F6        .div8_skip:	            djnz .div8_loop
 305+ 9871 C9                                   ret
 306+ 9872              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 307+ 9872 06 10        asm_div16:              ld b,16
 308+ 9874 AF                                   xor a
 309+ 9875 CB 25        div16_loop:	            sla l
 310+ 9877 CB 14                                rl	h
 311+ 9879              ;    add hl,hl
 312+ 9879 17                                   rla
 313+ 987A B9                                   cp c
 314+ 987B 38 02                                jr c,div16_skip
 315+ 987D 2C                                   inc l
 316+ 987E 91                                   sub c
 317+ 987F 10 F4        div16_skip:		        djnz div16_loop
 318+ 9881 C9                                   ret
 319+ 9882              ;
 320+ 9882              ; Divide 16-bit values (with 16-bit result)
 321+ 9882              ; In: Divide BC by divider DE
 322+ 9882              ; Out: BC = result, HL = rest
 323+ 9882              ;
 324+ 9882              HLDivC_Iteration: 	    MACRO
 325+ 9882 ~                                    add	hl,hl		; unroll 16 times
 326+ 9882 ~                                    rla				; ...
 327+ 9882 ~                                    cp	c			; ...
 328+ 9882 ~                                    jr	1F
 329+ 9882 ~                                    sub	c			; ...
 330+ 9882 ~            1:
 331+ 9882 ~                                    inc	l			; ...
 332+ 9882                                      ENDM
 333+ 9882
 334+ 9882              EDivC_Iteration:        MACRO
 335+ 9882 ~                                    rl  e
 336+ 9882 ~                                    rla
 337+ 9882 ~                                    sub c
 338+ 9882 ~                                    jr  nc,.Div8_NoAdd
 339+ 9882 ~                                    add a,c
 340+ 9882 ~            .Div8_NoAdd:
 341+ 9882                                      ENDM
 342+ 9882
 343+ 9882              ; Switch to a logarithm version
 344+ 9882              ; Divide E by divider C Out: A = result, B = rest
 345+ 9882              E_Div_C:                ZeroA
 345+ 9882 AF          >                        xor a
 346+ 9883                                      EDivC_Iteration
 346+ 9883 CB 13       >                        rl  e
 346+ 9885 17          >                        rla
 346+ 9886 91          >                        sub c
 346+ 9887 30 01       >                        jr  nc,.Div8_NoAdd
 346+ 9889 81          >                        add a,c
 346+ 988A             >.Div8_NoAdd:
 347+ 988A                                      EDivC_Iteration
 347+ 988A CB 13       >                        rl  e
 347+ 988C 17          >                        rla
 347+ 988D 91          >                        sub c
 347+ 988E 30 01       >                        jr  nc,.Div8_NoAdd
 347+ 9890 81          >                        add a,c
 347+ 9891             >.Div8_NoAdd:
 348+ 9891                                      EDivC_Iteration
 348+ 9891 CB 13       >                        rl  e
 348+ 9893 17          >                        rla
 348+ 9894 91          >                        sub c
 348+ 9895 30 01       >                        jr  nc,.Div8_NoAdd
 348+ 9897 81          >                        add a,c
 348+ 9898             >.Div8_NoAdd:
 349+ 9898                                      EDivC_Iteration
 349+ 9898 CB 13       >                        rl  e
 349+ 989A 17          >                        rla
 349+ 989B 91          >                        sub c
 349+ 989C 30 01       >                        jr  nc,.Div8_NoAdd
 349+ 989E 81          >                        add a,c
 349+ 989F             >.Div8_NoAdd:
 350+ 989F                                      EDivC_Iteration
 350+ 989F CB 13       >                        rl  e
 350+ 98A1 17          >                        rla
 350+ 98A2 91          >                        sub c
 350+ 98A3 30 01       >                        jr  nc,.Div8_NoAdd
 350+ 98A5 81          >                        add a,c
 350+ 98A6             >.Div8_NoAdd:
 351+ 98A6                                      EDivC_Iteration
 351+ 98A6 CB 13       >                        rl  e
 351+ 98A8 17          >                        rla
 351+ 98A9 91          >                        sub c
 351+ 98AA 30 01       >                        jr  nc,.Div8_NoAdd
 351+ 98AC 81          >                        add a,c
 351+ 98AD             >.Div8_NoAdd:
 352+ 98AD                                      EDivC_Iteration
 352+ 98AD CB 13       >                        rl  e
 352+ 98AF 17          >                        rla
 352+ 98B0 91          >                        sub c
 352+ 98B1 30 01       >                        jr  nc,.Div8_NoAdd
 352+ 98B3 81          >                        add a,c
 352+ 98B4             >.Div8_NoAdd:
 353+ 98B4                                      EDivC_Iteration
 353+ 98B4 CB 13       >                        rl  e
 353+ 98B6 17          >                        rla
 353+ 98B7 91          >                        sub c
 353+ 98B8 30 01       >                        jr  nc,.Div8_NoAdd
 353+ 98BA 81          >                        add a,c
 353+ 98BB             >.Div8_NoAdd:
 354+ 98BB 47                                   ld      b,a
 355+ 98BC 7B                                   ld      a,e
 356+ 98BD 17                                   rla
 357+ 98BE 2F                                   cpl
 358+ 98BF C9                                   ret
 359+ 98C0
 360+ 98C0
 361+ 98C0              BCDIVDE_Iteration:      MACRO
 362+ 98C0 ~                                    rla
 363+ 98C0 ~                                    adc	    hl,hl
 364+ 98C0 ~                                    add	    hl,de
 365+ 98C0 ~                                    jr	    c,1F
 366+ 98C0 ~                                    sbc	    hl,de
 367+ 98C0 ~            1:
 368+ 98C0                                      ENDM
 369+ 98C0
 370+ 98C0
 371+ 98C0              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 372+ 98C0              ;BC/DE ==> BC, remainder in HL
 373+ 98C0              ;NOTE: BC/0 returns 0 as the quotient.
 374+ 98C0              ;min: 738cc
 375+ 98C0              ;max: 898cc
 376+ 98C0              ;avg: 818cc
 377+ 98C0              ;144 bytes
 378+ 98C0 AF           BC_Div_DE:              xor a
 379+ 98C1 67                                   ld h,a
 380+ 98C2 6F                                   ld l,a
 381+ 98C3 93                                   sub e
 382+ 98C4 5F                                   ld e,a
 383+ 98C5 9F                                   sbc a,a
 384+ 98C6 92                                   sub d
 385+ 98C7 57                                   ld d,a
 386+ 98C8 78                                   ld a,b
 387+ 98C9                                      BCDIVDE_Iteration
 387+ 98C9 17          >                        rla
 387+ 98CA ED 6A       >                        adc	    hl,hl
 387+ 98CC 19          >                        add	    hl,de
 387+ 98CD 38 02       >                        jr	    c,1F
 387+ 98CF ED 52       >                        sbc	    hl,de
 387+ 98D1             >1:
 388+ 98D1                                      BCDIVDE_Iteration
 388+ 98D1 17          >                        rla
 388+ 98D2 ED 6A       >                        adc	    hl,hl
 388+ 98D4 19          >                        add	    hl,de
 388+ 98D5 38 02       >                        jr	    c,1F
 388+ 98D7 ED 52       >                        sbc	    hl,de
 388+ 98D9             >1:
 389+ 98D9                                      BCDIVDE_Iteration
 389+ 98D9 17          >                        rla
 389+ 98DA ED 6A       >                        adc	    hl,hl
 389+ 98DC 19          >                        add	    hl,de
 389+ 98DD 38 02       >                        jr	    c,1F
 389+ 98DF ED 52       >                        sbc	    hl,de
 389+ 98E1             >1:
 390+ 98E1                                      BCDIVDE_Iteration
 390+ 98E1 17          >                        rla
 390+ 98E2 ED 6A       >                        adc	    hl,hl
 390+ 98E4 19          >                        add	    hl,de
 390+ 98E5 38 02       >                        jr	    c,1F
 390+ 98E7 ED 52       >                        sbc	    hl,de
 390+ 98E9             >1:
 391+ 98E9                                      BCDIVDE_Iteration
 391+ 98E9 17          >                        rla
 391+ 98EA ED 6A       >                        adc	    hl,hl
 391+ 98EC 19          >                        add	    hl,de
 391+ 98ED 38 02       >                        jr	    c,1F
 391+ 98EF ED 52       >                        sbc	    hl,de
 391+ 98F1             >1:
 392+ 98F1                                      BCDIVDE_Iteration
 392+ 98F1 17          >                        rla
 392+ 98F2 ED 6A       >                        adc	    hl,hl
 392+ 98F4 19          >                        add	    hl,de
 392+ 98F5 38 02       >                        jr	    c,1F
 392+ 98F7 ED 52       >                        sbc	    hl,de
 392+ 98F9             >1:
 393+ 98F9                                      BCDIVDE_Iteration
 393+ 98F9 17          >                        rla
 393+ 98FA ED 6A       >                        adc	    hl,hl
 393+ 98FC 19          >                        add	    hl,de
 393+ 98FD 38 02       >                        jr	    c,1F
 393+ 98FF ED 52       >                        sbc	    hl,de
 393+ 9901             >1:
 394+ 9901                                      BCDIVDE_Iteration
 394+ 9901 17          >                        rla
 394+ 9902 ED 6A       >                        adc	    hl,hl
 394+ 9904 19          >                        add	    hl,de
 394+ 9905 38 02       >                        jr	    c,1F
 394+ 9907 ED 52       >                        sbc	    hl,de
 394+ 9909             >1:
 395+ 9909 17                                   rla
 396+ 990A 47                                   ld b,a
 397+ 990B 79                                   ld a,c
 398+ 990C                                      BCDIVDE_Iteration
 398+ 990C 17          >                        rla
 398+ 990D ED 6A       >                        adc	    hl,hl
 398+ 990F 19          >                        add	    hl,de
 398+ 9910 38 02       >                        jr	    c,1F
 398+ 9912 ED 52       >                        sbc	    hl,de
 398+ 9914             >1:
 399+ 9914                                      BCDIVDE_Iteration
 399+ 9914 17          >                        rla
 399+ 9915 ED 6A       >                        adc	    hl,hl
 399+ 9917 19          >                        add	    hl,de
 399+ 9918 38 02       >                        jr	    c,1F
 399+ 991A ED 52       >                        sbc	    hl,de
 399+ 991C             >1:
 400+ 991C                                      BCDIVDE_Iteration
 400+ 991C 17          >                        rla
 400+ 991D ED 6A       >                        adc	    hl,hl
 400+ 991F 19          >                        add	    hl,de
 400+ 9920 38 02       >                        jr	    c,1F
 400+ 9922 ED 52       >                        sbc	    hl,de
 400+ 9924             >1:
 401+ 9924                                      BCDIVDE_Iteration
 401+ 9924 17          >                        rla
 401+ 9925 ED 6A       >                        adc	    hl,hl
 401+ 9927 19          >                        add	    hl,de
 401+ 9928 38 02       >                        jr	    c,1F
 401+ 992A ED 52       >                        sbc	    hl,de
 401+ 992C             >1:
 402+ 992C                                      BCDIVDE_Iteration
 402+ 992C 17          >                        rla
 402+ 992D ED 6A       >                        adc	    hl,hl
 402+ 992F 19          >                        add	    hl,de
 402+ 9930 38 02       >                        jr	    c,1F
 402+ 9932 ED 52       >                        sbc	    hl,de
 402+ 9934             >1:
 403+ 9934                                      BCDIVDE_Iteration
 403+ 9934 17          >                        rla
 403+ 9935 ED 6A       >                        adc	    hl,hl
 403+ 9937 19          >                        add	    hl,de
 403+ 9938 38 02       >                        jr	    c,1F
 403+ 993A ED 52       >                        sbc	    hl,de
 403+ 993C             >1:
 404+ 993C                                      BCDIVDE_Iteration
 404+ 993C 17          >                        rla
 404+ 993D ED 6A       >                        adc	    hl,hl
 404+ 993F 19          >                        add	    hl,de
 404+ 9940 38 02       >                        jr	    c,1F
 404+ 9942 ED 52       >                        sbc	    hl,de
 404+ 9944             >1:
 405+ 9944                                      BCDIVDE_Iteration
 405+ 9944 17          >                        rla
 405+ 9945 ED 6A       >                        adc	    hl,hl
 405+ 9947 19          >                        add	    hl,de
 405+ 9948 38 02       >                        jr	    c,1F
 405+ 994A ED 52       >                        sbc	    hl,de
 405+ 994C             >1:
 406+ 994C 17                                   rla
 407+ 994D 4F                                   ld c,a
 408+ 994E C9                                   ret
 409+ 994F
# file closed: ./Maths/asm_divide.asm
 613  994F                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 994F              asm_tis2:
   2+ 994F              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 994F              ; ">DOES NOT DO SIGNED YET"
   4+ 994F F5           	push af
   5+ 9950 E6 7F            and SignMask8Bit
   6+ 9952 57           	ld d,a				;; d = A
   7+ 9953 3A F3 81     	ld a,(varQ)
   8+ 9956 5F           	ld e,a
   9+ 9957 7A           	ld a,d
  10+ 9958 BB           	cp e
  11+ 9959 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 995B 1E 60        	ld e, 96
  13+ 995D ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 995F EB           	ex de,hl
  15+ 9960 3A F3 81     	ld a,(varQ)
  16+ 9963 4F           	ld c,a
  17+ 9964 CD 72 98     	call asm_div16
  18+ 9967 F1           	pop af
  19+ 9968 E6 80        	and $80
  20+ 996A B5           	or l
  21+ 996B C9           	ret
  22+ 996C              .tis2_set96:
  23+ 996C F1           	pop af
  24+ 996D E6 80        	and $80
  25+ 996F F6 96        	or $96
  26+ 9971 C9           	ret
  27+ 9972
  28+ 9972
  29+ 9972              asm_unit_vector:
  30+ 9972              squareregfx:
  31+ 9972 3A A6 C0     	ld a,(UBnkXScaled)
  32+ 9975 57           	ld d,a
  33+ 9976 5F           	ld e,a
  34+ 9977 ED 30        	mul
  35+ 9979 EB           	ex de,hl
  36+ 997A              squareregfy:
  37+ 997A 3A A8 C0     	ld a, (UBnkYScaled)
  38+ 997D 57           	ld d,a
  39+ 997E 5F           	ld e,a
  40+ 997F ED 30        	mul
  41+ 9981 19           	add hl,de
  42+ 9982              squareregfz:
  43+ 9982 3A AA C0     	ld a, (UBnkZScaled)
  44+ 9985 57           	ld d,a
  45+ 9986 5F           	ld e,a
  46+ 9987 ED 30        	mul
  47+ 9989 19           	add hl,de
  48+ 998A EB           	ex de,hl			; de de to number to root
  49+ 998B              hlequsquareroot:
  50+ 998B CD 85 96     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 998E E5           	push hl				; save it for work 3 copies
  52+ 998F E5           	push hl				; save it for work
  53+ 9990 E5           	push hl				; save it for work
  54+ 9991              normfx:
  55+ 9991 3A A6 C0     	ld a,(UBnkXScaled)
  56+ 9994 E1           	pop hl				; get copy #1
  57+ 9995 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 9996 4F           	ld c,a
  59+ 9997 CD 4F 99     	call asm_tis2
  60+ 999A 32 A6 C0     	ld (UBnkXScaled),a
  61+ 999D              normfy:
  62+ 999D 3A A8 C0     	ld a,(UBnkYScaled)
  63+ 99A0 E1           	pop hl				; get copy #2
  64+ 99A1 7D           	ld a,l
  65+ 99A2 4F           	ld c,a
  66+ 99A3 CD 4F 99     	call asm_tis2
  67+ 99A6 32 A8 C0     	ld (UBnkYScaled),a
  68+ 99A9              normfz:
  69+ 99A9 3A AA C0     	ld a,(UBnkZScaled)
  70+ 99AC E1           	pop hl				; get copy #2
  71+ 99AD 7D           	ld a,l
  72+ 99AE 4F           	ld c,a
  73+ 99AF CD 4F 99     	call asm_tis2
  74+ 99B2 32 AA C0     	ld (UBnkZScaled),a
  75+ 99B5              asm_unit_vector_end:
  76+ 99B5 C9           	ret
  77+ 99B6
# file closed: ./Maths/asm_unitvector.asm
 614  99B6                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 99B6              ; Input:
   2+ 99B6              ;       HL = 1st value
   3+ 99B6              ;       DE = 2nd value
   4+ 99B6              ; Output:
   5+ 99B6              ;       CF, ZF = results of comparison:
   6+ 99B6              ;
   7+ 99B6              ;               CF      ZF      Result
   8+ 99B6              ;               -----------------------------------
   9+ 99B6              ;               0       0       HL > DE
  10+ 99B6              ;               0       1       HL == DE
  11+ 99B6              ;               1       0       HL < DE
  12+ 99B6              ;               1       1       Impossible
  13+ 99B6              ;
  14+ 99B6
  15+ 99B6 E5           compare16HLDE:      push    hl
  16+ 99B7 A7                               and     a
  17+ 99B8 ED 52                            sbc     hl,de
  18+ 99BA E1                               pop     hl
  19+ 99BB C9                               ret
  20+ 99BC
  21+ 99BC              ; With compare signed we do ABS comparison
  22+ 99BC              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ 99BC
  24+ 99BC E5 D5        compare16HLDEABS:   push    hl,,de
  25+ 99BE 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ 99BF E6 7F                            and     SignMask8Bit
  27+ 99C1 67                               ld      h,a
  28+ 99C2 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ 99C3 E6 7F                            and     SignMask8Bit
  30+ 99C5 57                               ld      d,a
  31+ 99C6 A7                               and     a
  32+ 99C7 ED 52                            sbc     hl,de
  33+ 99C9 D1 E1                            pop     hl,,de
  34+ 99CB C9                               ret
  35+ 99CC
  36+ 99CC
# file closed: ./Maths/compare16.asm
 615  99CC                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 99CC              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 99CC              ;; 16-bit negate
   3+ 99CC              negate16:
   4+ 99CC              negate16hl:
   5+ 99CC                      ; Input:
   6+ 99CC                      ;       HL = value
   7+ 99CC                      ; Output:
   8+ 99CC                      ;       HL = -value
   9+ 99CC                      ; Destroys:
  10+ 99CC                      ;       AF
  11+ 99CC                      ;
  12+ 99CC AF           	xor 	a
  13+ 99CD 95           	sub 	l
  14+ 99CE 6F           	ld 		l,a
  15+ 99CF 9F           	sbc 	a,a
  16+ 99D0 94           	sub 	h
  17+ 99D1 67           	ld 		h,a
  18+ 99D2 C9           	ret
  19+ 99D3
  20+ 99D3              negate16de:
  21+ 99D3 AF           	xor 	a
  22+ 99D4 93           	sub 	e
  23+ 99D5 5F           	ld 		e,a
  24+ 99D6 9F           	sbc 	a,a
  25+ 99D7 92           	sub 	d
  26+ 99D8 57           	ld 		d,a
  27+ 99D9 C9           	ret
  28+ 99DA
  29+ 99DA              negate16bc:
  30+ 99DA AF           	xor 	a
  31+ 99DB 91           	sub 	c
  32+ 99DC 4F           	ld 		c,a
  33+ 99DD 9F           	sbc 	a,a
  34+ 99DE 90           	sub 	b
  35+ 99DF 47           	ld 		b,a
  36+ 99E0 C9           	ret
  37+ 99E1
  38+ 99E1
  39+ 99E1              macronegate16hl:	MACRO
  40+ 99E1 ~            					xor 	a
  41+ 99E1 ~            					sub 	l
  42+ 99E1 ~            					ld 		l,a
  43+ 99E1 ~            					sbc 	a,a
  44+ 99E1 ~            					sub 	h
  45+ 99E1 ~            					ld 		h,a
  46+ 99E1              					ENDM
  47+ 99E1
  48+ 99E1              macronegate16de:	MACRO
  49+ 99E1 ~            					xor 	a
  50+ 99E1 ~                                sub 	e
  51+ 99E1 ~                                ld 		e,a
  52+ 99E1 ~                                sbc 	a,a
  53+ 99E1 ~                                sub 	d
  54+ 99E1 ~                                ld 		d,a
  55+ 99E1              					ENDM
  56+ 99E1              macronegate16bc:	MACRO
  57+ 99E1 ~            					xor 	a
  58+ 99E1 ~                                sub 	c
  59+ 99E1 ~                                ld 		c,a
  60+ 99E1 ~                                sbc 	a,a
  61+ 99E1 ~                                sub 	b
  62+ 99E1 ~                                ld 		b,a
  63+ 99E1              					ENDM
  64+ 99E1
  65+ 99E1              macronegate16ix:	MACRO
  66+ 99E1 ~            					xor 	a
  67+ 99E1 ~                                sub 	ixl
  68+ 99E1 ~                                ld 		ixl,a
  69+ 99E1 ~                                sbc 	a,a
  70+ 99E1 ~                                sub 	ixh
  71+ 99E1 ~                                ld 		ixh,a
  72+ 99E1              					ENDM
# file closed: ./Maths/negate16.asm
 616  99E1                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 99E1              ; a equal a / d * 96
   2+ 99E1
   3+ 99E1
   4+ 99E1
   5+ 99E1              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
   6+ 99E1 3A A6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
   7+ 99E4 DD 67                                ld		ixh,a               ; ixh = signed x component
   8+ 99E6 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   9+ 99E8              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   9+ 99E8 5F          >			ld	e,a
   9+ 99E9 57          >			ld  d,a
   9+ 99EA ED 30       >			mul
  10+ 99EC 62                                   ld		h,d					; h == varR d = varO e= varA
  11+ 99ED 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  12+ 99EE 3A A7 C0     .n96SQY:                ld		a,(XX15VecY)
  13+ 99F1 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  14+ 99F3 E6 7F                                and		SignMask8Bit                 ; = abs
  15+ 99F5                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  15+ 99F5 5F          >			ld	e,a
  15+ 99F6 57          >			ld  d,a
  15+ 99F7 ED 30       >			mul
  16+ 99F9 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  17+ 99FA 3A A8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  18+ 99FD FD 67                                ld		iyh,a               ; iyh = signed
  19+ 99FF E6 7F                                and		SignMask8Bit                 ; unsigned
  20+ 9A01                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  20+ 9A01 5F          >			ld	e,a
  20+ 9A02 57          >			ld  d,a
  20+ 9A03 ED 30       >			mul
  21+ 9A05 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  22+ 9A06 EB                                   ex		de,hl				; hl => de ready for square root
  23+ 9A07 CD 85 96     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  24+ 9A0A 3A A6 C0     .n96NORMX:              ld		a,(XX15VecX)
  25+ 9A0D E6 7F                                and		SignMask8Bit
  26+ 9A0F 4F                                   ld		c,a
  27+ 9A10 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  28+ 9A11 CD A4 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  29+ 9A14 47                                   ld		b,a				    ;++SGN
  30+ 9A15 DD 7C                                ld		a,ixh			    ;++SGN
  31+ 9A17 E6 80                                and		$80				    ;++SGN
  32+ 9A19 B0                                   or		b				    ;++SGN
  33+ 9A1A 32 A6 C0                             ld		(XX15VecX),a
  34+ 9A1D 3A A7 C0     .n96NORMY:              ld		a,(XX15VecY)
  35+ 9A20 E6 7F                                and		SignMask8Bit
  36+ 9A22 4F                                   ld		c,a
  37+ 9A23 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  38+ 9A24 CD A4 9B                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  39+ 9A27 47                                   ld		b,a				    ;++SGN
  40+ 9A28 DD 7D                                ld		a,ixl			    ;++SGN
  41+ 9A2A E6 80                                and		$80				    ;++SGN
  42+ 9A2C B0                                   or		b				    ;++SGN
  43+ 9A2D 32 A7 C0                             ld		(XX15VecY),a
  44+ 9A30 3A A8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  45+ 9A33 E6 7F                                and		SignMask8Bit
  46+ 9A35 4F                                   ld		c,a
  47+ 9A36 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  48+ 9A37 CD A4 9B                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  49+ 9A3A 47                                   ld		b,a				    ;++SGN
  50+ 9A3B FD 7C                                ld		a,iyh			    ;++SGN
  51+ 9A3D E6 80                                and		$80				    ;++SGN
  52+ 9A3F B0                                   or		b				    ;++SGN
  53+ 9A40 32 A8 C0                             ld		(XX15VecZ),a
  54+ 9A43 C9                                   ret
  55+ 9A44
  56+ 9A44              ; Normalise vector
  57+ 9A44              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  58+ 9A44              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  59+ 9A44              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  60+ 9A44              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  61+ 9A44
# file closed: ./Maths/normalise96.asm
 617  9A44                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 9A44              ;Number in hl to decimal ASCII
   2+ 9A44              ;Thanks to z80 Bits
   3+ 9A44              ;inputs:	hl = number to ASCII
   4+ 9A44              ;example: hl=300 outputs '00300'
   5+ 9A44              ;destroys: af, bc, hl, de used
   6+ 9A44              DispHLtoDE:
   7+ 9A44              ; "DispHL, writes HL to DE address"
   8+ 9A44 01 F0 D8     	ld	bc,-10000
   9+ 9A47 CD 5D 9A     	call	Num1
  10+ 9A4A 01 18 FC     	ld	bc,-1000
  11+ 9A4D CD 5D 9A     	call	Num1
  12+ 9A50 01 9C FF     	ld	bc,-100
  13+ 9A53 CD 5D 9A     	call	Num1
  14+ 9A56 0E F6        	ld	c,-10
  15+ 9A58 CD 5D 9A     	call	Num1
  16+ 9A5B 0E FF        	ld	c,-1
  17+ 9A5D              Num1:
  18+ 9A5D 3E 2F        	ld	a,'0'-1
  19+ 9A5F              .Num2:
  20+ 9A5F 3C           	inc	a
  21+ 9A60 09           	add	hl,bc
  22+ 9A61 38 FC        	jr	c,.Num2
  23+ 9A63 ED 42        	sbc	hl,bc
  24+ 9A65 12           	ld	(de),a
  25+ 9A66 13           	inc	de
  26+ 9A67 C9           	ret
  27+ 9A68
  28+ 9A68              DispAtoDE:
  29+ 9A68 26 00        	ld h,0
  30+ 9A6A 6F           	ld l,a
  31+ 9A6B C3 44 9A     	jp DispHLtoDE
  32+ 9A6E
  33+ 9A6E              DispPriceAtoDE:
  34+ 9A6E 26 00        	ld h,0
  35+ 9A70 6F           	ld l,a
  36+ 9A71 01 9C FF     	ld	bc,-100
  37+ 9A74 CD 84 9A     	call	.NumLeadBlank1
  38+ 9A77 0E F6        	ld	c,-10
  39+ 9A79 CD 5D 9A     	call	Num1
  40+ 9A7C 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9A7E 12           	ld		(de),a					; we can optimse that later TODO
  42+ 9A7F 13           	inc		de						; with just an inc De
  43+ 9A80 0E FF        	ld	c,-1
  44+ 9A82 18 D9        	jr		Num1
  45+ 9A84              .NumLeadBlank1:
  46+ 9A84 3E 2F        	ld	a,'0'-1
  47+ 9A86              .NumLeadBlank2:
  48+ 9A86 3C           	inc	a
  49+ 9A87 09           	add	hl,bc
  50+ 9A88 38 FC        	jr	c,.NumLeadBlank2
  51+ 9A8A FE 30        	cp	'0'
  52+ 9A8C 20 02        	jr	nz,.DontBlank
  53+ 9A8E              .Blank:
  54+ 9A8E 3E 20        	ld	a,' '
  55+ 9A90              .DontBlank:
  56+ 9A90 ED 42        	sbc	hl,bc
  57+ 9A92 12           	ld	(de),a
  58+ 9A93 13           	inc	de
  59+ 9A94 C9           	ret
  60+ 9A95
  61+ 9A95              DispQtyAtoDE:
  62+ 9A95 FE 00        	cp	0
  63+ 9A97 28 23        	jr	z,.NoStock
  64+ 9A99 26 00        	ld h,0
  65+ 9A9B 6F           	ld l,a
  66+ 9A9C 01 9C FF     	ld	bc,-100
  67+ 9A9F CD AB 9A     	call	.NumLeadBlank1
  68+ 9AA2 0E F6        	ld	c,-10
  69+ 9AA4 CD AB 9A     	call	.NumLeadBlank1
  70+ 9AA7 0E FF        	ld	c,-1
  71+ 9AA9 18 B2        	jr		Num1
  72+ 9AAB              .NumLeadBlank1:
  73+ 9AAB 3E 2F        	ld	a,'0'-1
  74+ 9AAD              .NumLeadBlank2:
  75+ 9AAD 3C           	inc	a
  76+ 9AAE 09           	add	hl,bc
  77+ 9AAF 38 FC        	jr	c,.NumLeadBlank2
  78+ 9AB1 FE 30        	cp	'0'
  79+ 9AB3 20 02        	jr	nz,.DontBlank
  80+ 9AB5              .Blank:
  81+ 9AB5 3E 20        	ld	a,' '
  82+ 9AB7              .DontBlank:
  83+ 9AB7 ED 42        	sbc	hl,bc
  84+ 9AB9 12           	ld	(de),a
  85+ 9ABA 13           	inc	de
  86+ 9ABB C9           	ret
  87+ 9ABC              .NoStock:
  88+ 9ABC 3E 20        	ld	a,' '
  89+ 9ABE 12           	ld	(de),a
  90+ 9ABF 13           	inc	de
  91+ 9AC0 12           	ld	(de),a
  92+ 9AC1 13           	inc	de
  93+ 9AC2 3E 2D        	ld	a,'-'
  94+ 9AC4 12           	ld	(de),a
  95+ 9AC5 13           	inc de
  96+ 9AC6 C9           	ret
  97+ 9AC7
  98+ 9AC7
  99+ 9AC7              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ 9AC7              ;### Input      DE,IX=32bit value, IY=destination address
 101+ 9AC7              ;### Output     IY=last char in destination string
 102+ 9AC7              ;### Destroyed AF,BC,DE,HL,IX
 103+ 9AC7 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ 9ACB 0A 00 00 00
 103+ 9ACF 64 00 00 00
 103+ 9AD3 E8 03 00 00
 103+ 9AD7 10 27 00 00
 104+ 9ADB A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ 9ADF 40 42 0F 00
 104+ 9AE3 80 96 98 00
 104+ 9AE7 00 E1 F5 05
 104+ 9AEB 00 CA 9A 3B
 105+ 9AEF 00 00 00 00  clcn32z ds 4
 106+ 9AF3
 107+ 9AF3              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ 9AF3 CD 02 9B     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ 9AF6 FD 7E 00                             ld      a,(IY+0)
 110+ 9AF9 FD 77 01                             ld      (IY+1),a
 111+ 9AFC 3E 2E                                ld      a,"."
 112+ 9AFE FD 77 00                             ld      (IY+0),a
 113+ 9B01 C9                                   ret
 114+ 9B02
 115+ 9B02 DD 22 EF 9A  DispDEIXtoIY:           ld (clcn32z),ix
 116+ 9B06 ED 53 F1 9A                          ld (clcn32z+2),de
 117+ 9B0A DD 21 EB 9A                          ld ix,clcn32t+36
 118+ 9B0E 06 09                                ld b,9
 119+ 9B10 0E 00                                ld c,0
 120+ 9B12 3E 30        .clcn321:               ld a,'0'
 121+ 9B14 B7                                   or a
 122+ 9B15 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ 9B18 DD 56 01                             ld d,(ix+1)
 124+ 9B1B 2A EF 9A                             ld hl,(clcn32z)
 125+ 9B1E ED 52                                sbc hl,de
 126+ 9B20 22 EF 9A                             ld (clcn32z),hl
 127+ 9B23 DD 5E 02                             ld e,(ix+2)
 128+ 9B26 DD 56 03                             ld d,(ix+3)
 129+ 9B29 2A F1 9A                             ld hl,(clcn32z+2)
 130+ 9B2C ED 52                                sbc hl,de
 131+ 9B2E 22 F1 9A                             ld (clcn32z+2),hl
 132+ 9B31 38 04                                jr c,.clcn325
 133+ 9B33 0C                                   inc c
 134+ 9B34 3C                                   inc a
 135+ 9B35 18 DE                                jr .clcn322
 136+ 9B37 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ 9B3A DD 56 01                             ld d,(ix+1)
 138+ 9B3D 2A EF 9A                             ld hl,(clcn32z)
 139+ 9B40 19                                   add hl,de
 140+ 9B41 22 EF 9A                             ld (clcn32z),hl
 141+ 9B44 DD 5E 02                             ld e,(ix+2)
 142+ 9B47 DD 56 03                             ld d,(ix+3)
 143+ 9B4A 2A F1 9A                             ld hl,(clcn32z+2)
 144+ 9B4D ED 5A                                adc hl,de
 145+ 9B4F 22 F1 9A                             ld (clcn32z+2),hl
 146+ 9B52 11 FC FF                             ld de,-4
 147+ 9B55 DD 19                                add ix,de
 148+ 9B57 0C                                   inc c
 149+ 9B58 0D                                   dec c
 150+ 9B59 28 05                                jr z,.clcn323
 151+ 9B5B FD 77 00                             ld (iy+0),a
 152+ 9B5E FD 23                                inc iy
 153+ 9B60 10 B0        .clcn323:               djnz .clcn321
 154+ 9B62 3A EF 9A                             ld a,(clcn32z)
 155+ 9B65 C6 30                                add A,'0'
 156+ 9B67 FD 77 00                             ld (iy+0),a
 157+ 9B6A FD 36 01 00                          ld (iy+1),0
 158+ 9B6E C9                                   ret
 159+ 9B6F
# file closed: ./Maths/binary_to_decimal.asm
 618  9B6F                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9B6F              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9B6F BA          >                        cp     d
   1+ 9B70 D2 8B 9B    >                        jp		nc,.TIS2AccGTEQ
   2+ 9B73 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9B75 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9B77                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9B77 BA          >                        cp      d
   4+ 9B78 DA 8E 9B    >                        jp		c, .TIS2SkipSub
   5+ 9B7B 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9B7C 37                                   scf
   7+ 9B7D CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9B7F 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9B81 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9B82 CB 3F                                srl			a							; result / 2
  11+ 9B84 CB 3F                                srl			a							; result / 4
  12+ 9B86 47                                   ld			b,a							; t = t /4
  13+ 9B87 CB 3F                                srl			a							; result / 8
  14+ 9B89 80                                   add			a,b							; result /8 + result /4
  15+ 9B8A C9                                   ret
  16+ 9B8B 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9B8D C9                                   ret
  18+ 9B8E B7           .TIS2SkipSub:           or			a
  19+ 9B8F CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9B91 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9B93 C3 81 9B                             jp			.TIS2SKIPCont
  22+ 9B96
  23+ 9B96
  24+ 9B96              ; USES 			A DE BC
  25+ 9B96              ; DOES NOT USE 	HL
  26+ 9B96              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9B96 CB 7F        	bit			7,a
  28+ 9B98 28 04        	jr			z,AequAdivQmul96
  29+ 9B9A ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9B9C CB FF        	set			7,a
  31+ 9B9E              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9B9E              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9B9E              TIS2:
  34+ 9B9E 4F           	ld			c,a							; copy of Acc
  35+ 9B9F 3A F3 81     	ld			a,(varQ)
  36+ 9BA2 57           	ld			d,a							; d = varQ
  37+ 9BA3 79           	ld			a,c							; recover a
  38+ 9BA4              AequAdivDmul967Bit:
  39+ 9BA4 4F               ld          c,a
  40+ 9BA5 7A               ld          a,d
  41+ 9BA6 CB 27            sla         a
  42+ 9BA8 30 10            jr          nc, .OKToDivide
  43+ 9BAA              .ScaleDown:
  44+ 9BAA B7               or          a
  45+ 9BAB CB 3A            srl         d
  46+ 9BAD
  47+ 9BAD 79               ld          a,c
  48+ 9BAE E6 7F            and         SignMask8Bit
  49+ 9BB0 CB 3F            srl         a
  50+ 9BB2 47               ld          b,a
  51+ 9BB3 79               ld          a,c
  52+ 9BB4 E6 80            and         $80
  53+ 9BB6 B0               or          b
  54+ 9BB7 C3 BB 9B         jp          AequAdivDmul96
  55+ 9BBA              .OKToDivide:
  56+ 9BBA 79               ld          a,c
  57+ 9BBB              AequAdivDmul96:
  58+ 9BBB 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9BBC E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9BBE              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9BBE BA          >                        cp     d
  60+ 9BBF D2 DF 9B    >                        jp		nc,.TIS2AccGTEQ
  61+ 9BC2 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9BC4              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9BC4 CB 27        	sla			a
  64+ 9BC6              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9BC6 BA          >                        cp      d
  64+ 9BC7 DA E5 9B    >                        jp		c, .TIS2SkipSub
  65+ 9BCA 9A           	sbc			a,d							; do subtraction with carry
  66+ 9BCB 37           	scf                                     ; set carrry to roll into b
  67+ 9BCC CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9BCE 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9BD0              .TIS2SKIPCont:
  70+ 9BD0 78           	ld			a,b							; A = T = 4 / 4
  71+ 9BD1 CB 3F        	srl			a							; .
  72+ 9BD3 CB 3F        	srl			a							; .
  73+ 9BD5 47           	ld			b,a							; .
  74+ 9BD6 CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9BD8 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9BD9 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9BDA 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9BDB E6 80        	and			$80							; recover sign only
  79+ 9BDD B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9BDE C9           	ret
  81+ 9BDF              .TIS2AccGTEQ:
  82+ 9BDF              ;TI4:										;\ clean to +/- unity
  83+ 9BDF 79           	ld			a,c
  84+ 9BE0 E6 80        	and			$80							; copy of Acc
  85+ 9BE2 F6 60        	or			$60							; unity
  86+ 9BE4 C9           	ret
  87+ 9BE5              .TIS2SkipSub:
  88+ 9BE5              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9BE5 B7          >                        or a
  89+ 9BE6 CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9BE8 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9BEA C3 D0 9B     	jp			.TIS2SKIPCont
  92+ 9BED
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 619  9BED                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9BED              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9BED              fmltu:
   3+ 9BED 57           AequAmulQdiv256:        ld	d,a
   4+ 9BEE 3A F3 81                             ld	a,(varQ)
   5+ 9BF1 5F                                   ld	e,a
   6+ 9BF2 ED 30                                mul
   7+ 9BF4 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9BF5 C9                                   ret
   9+ 9BF6
  10+ 9BF6 5F           AequAmulDdiv256:        ld  e,a
  11+ 9BF7 ED 30                                mul
  12+ 9BF9 7A                                   ld  a,d
  13+ 9BFA C9                                   ret
  14+ 9BFB
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 620  9BFB                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9BFB              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9BFB              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9BFB 21 8A 83     		ld		hl,varDustZ
   4+ 9BFE FD 7D        		ld		a,iyl
   5+ 9C00 ED 31        		add		hl,a
   6+ 9C02 7E           		ld		a,(hl)
   7+ 9C03 C3 0F 9C     		jp		DV41
   8+ 9C06              DV42:										; travel step of dust particle front/rear
   9+ 9C06 21 8A 83     		ld		hl,varDustZ
  10+ 9C09 3A DE 80     		ld		a,(regY)
  11+ 9C0C ED 31        		add		hl,a
  12+ 9C0E 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9C0F              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9C0F 5F           		ld		e,a							; using E as Q var replacement
  15+ 9C10 3A ED 81     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9C13              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9C13 06 08        		ld		b,8							; counter
  18+ 9C15 CB 27        		sla		a							;
  19+ 9C17 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9C18 AF           		xor		a
  21+ 9C19              DVL4:										; counter x loop (b reg)
  22+ 9C19 CB 17        		rl		a							; a = a * 2
  23+ 9C1B 38 03        		jr		c,DV8						; jump on carry
  24+ 9C1D BB           		cp		e							; var Q
  25+ 9C1E 38 02        		jr		c,DV5						; skip subtraction
  26+ 9C20              DV8:
  27+ 9C20 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9C21 37           		scf									;  carry gets set
  29+ 9C22              DV5:										; skipped subtraction
  30+ 9C22 CB 12        		rl		d							; d (P hi)
  31+ 9C24 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9C26              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9C26              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9C26 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9C28 4F           		ld		c,a							; use c as R var
  36+ 9C29              .RollRemainder:
  37+ 9C29 CB 27        		sla		a
  38+ 9C2B 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9C2D B8           		cp		b							; a < q?
  40+ 9C2E 30 01        		jr		nc,.DontSBC
  41+ 9C30              .DoSBC:										; a is < q
  42+ 9C30 98           		sbc		a,b							; 	a -= q
  43+ 9C31              .DontSBC:
  44+ 9C31 CB 11        		rl		c							; r << 1
  45+ 9C33 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9C35 79           		ld		a,c
  47+ 9C36 32 F4 81     		ld		(varR),a					; for backwards compat
  48+ 9C39 7A           		ld		a,d
  49+ 9C3A 32 F4 80     		ld		(varP),a
  50+ 9C3D C9           		ret									; R (c) left with remainder
  51+ 9C3E              .Reduce:									; a geneated a carry
  52+ 9C3E 98           		sbc		a,b							; a = a - (q +1)
  53+ 9C3F 37           		scf									; set carry flag for rl
  54+ 9C40 CB 11        		rl		c							; r << 1 briging in carry
  55+ 9C42 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9C44 79           		ld		a,c
  57+ 9C45 32 F4 81     		ld		(varR),a					; for backwards compat
  58+ 9C48 7A           		ld		a,d
  59+ 9C49 32 F4 80     		ld		(varP),a
  60+ 9C4C C9           		ret
  61+ 9C4D              .AnswerTooBig:
  62+ 9C4D 0E FF        		ld		c,$FF						; arse its too big
  63+ 9C4F 79           		ld		a,c
  64+ 9C50 32 F4 81     		ld		(varR),a					; for backwards compat
  65+ 9C53 7A           		ld		a,d
  66+ 9C54 32 F4 80     		ld		(varP),a
  67+ 9C57 C9           		ret
  68+ 9C58
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 621  9C58                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ 9C58
   2+ 9C58              asm_defmutl:
   3+ 9C58              AequDmulEdiv256usgn:
   4+ 9C58              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ 9C58 ED 30        	mul
   6+ 9C5A 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ 9C5B C9           	ret
   8+ 9C5C
   9+ 9C5C
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 622  9C5C
 623  9C5C                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9C5C              APequQmulA:
   2+ 9C5C              asm_mult1:
   3+ 9C5C              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9C5C FE 00        	cp	0
   5+ 9C5E 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9C60 5F           	ld	e,a
   7+ 9C61 3A F3 81     	ld	a,(varQ)
   8+ 9C64 57           	ld	d,a
   9+ 9C65 FE 00        	cp	0				; compare a
  10+ 9C67 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9C69 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9C6A E6 80        	and $80				; get the resultant sign and save into b
  13+ 9C6C 47           	ld	b,a
  14+ 9C6D 7A           	ld	a,d
  15+ 9C6E E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9C70 57           	ld	d,a
  17+ 9C71 7B           	ld	a,e
  18+ 9C72 E6 7F        	and SignMask8Bit
  19+ 9C74 5F           	ld	e,a
  20+ 9C75 ED 30        	mul					; zxn de = d * e
  21+ 9C77 7B           	ld	a,e
  22+ 9C78 32 F4 80     	ld	(varP),a		; p = lo
  23+ 9C7B 7A           	ld	a,d				; a = hi
  24+ 9C7C B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9C7D 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9C7E C9           	ret
  27+ 9C7F              .mul0:
  28+ 9C7F AF           	xor	a
  29+ 9C80 32 F4 80     	ld	(varP),a
  30+ 9C83 57           	ld	d,a
  31+ 9C84 5F           	ld  e,a
  32+ 9C85 C9           	ret
  33+ 9C86
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 624  9C86                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9C86              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9C86              SAEquSRPlusAQ:
   3+ 9C86              ; Calculate the following between sign-magnitude numbers:
   4+ 9C86              ;   (S A) = (S R) + (A Q)
   5+ 9C86              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9C86              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9C86              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9C86              LL38:
   9+ 9C86              ;	ld		d,a
  10+ 9C86              ;	ld		a,(varQ)
  11+ 9C86              ;	ld		e,a
  12+ 9C86              ;	ld		a,(varS)
  13+ 9C86              ;	ld		h,a
  14+ 9C86              ;	ld		a,(varR)
  15+ 9C86              ;	ld		l,a
  16+ 9C86              ;	call	ADDHLDESignedv3
  17+ 9C86              ;	ld		a,h
  18+ 9C86              ;	ld		(varS),a
  19+ 9C86              ;	ld		a,l
  20+ 9C86              ;	ret
  21+ 9C86              ; calculation table
  22+ 9C86              ;   R     Q    Op            Sign calc
  23+ 9C86              ;	10    5    Add           +    sign same add R sign
  24+ 9C86              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9C86              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9C86              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9C86              ;   5    10    Add           +    sign same add R sign
  28+ 9C86              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9C86              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9C86              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9C86
  32+ 9C86              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9C86              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9C86              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9C86              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9C86
  37+ 9C86
  38+ 9C86              ; Calculate sign for Q from A and varS
  39+ 9C86 21 F5 81     	ld		hl,varS							;
  40+ 9C89 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9C8A FA 95 9C     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9C8D 3A F3 81     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9C90 21 F4 81     	ld		hl,varR
  44+ 9C93 86           	add		a,(hl)							; a = Q + R
  45+ 9C94 C9           	ret										; Done carry set if overflow
  46+ 9C95              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9C95 3A F4 81     	ld		a,(varR)						; a = R
  48+ 9C98 21 F3 81     	ld		hl,varQ                         ; Q
  49+ 9C9B              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9C9B              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9C9B B7          >                        or a
  51+ 9C9C 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9C9D 38 01            jr      c,.LL39SignCorrection
  53+ 9C9F              ;--    jr      a,.LL39ResultZero
  54+ 9C9F              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9C9F              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9C9F C9           	ret
  57+ 9CA0              .LL39SignCorrection:
  58+ 9CA0 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9CA2 28 0E            jr      z,.LL39ResultZero
  60+ 9CA4 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9CA6 08           	ex		af,af'							; save A temporarily
  62+ 9CA7 3A F5 81     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9CAA EE 80        	xor		$80							    ;
  64+ 9CAC 32 F5 81     	ld		(varS),a                        ; flip sign bit of a
  65+ 9CAF 08           	ex		af,af'                          ; get back a which is the result
  66+ 9CB0                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9CB0 B7          >                        or a
  67+ 9CB1 C9           	ret
  68+ 9CB2              .LL39ResultZero:
  69+ 9CB2 32 F5 81         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9CB5                  ClearCarryFlag                          ; clear carry
  70+ 9CB5 B7          >                        or a
  71+ 9CB6 C9               ret
  72+ 9CB7              ;--LL39SwapSubtraction:
  73+ 9CB7              ;--	push	bc
  74+ 9CB7              ;--	ld		b,a
  75+ 9CB7              ;--	ld		a,(hl)
  76+ 9CB7              ;--	sub		b
  77+ 9CB7              ;--	pop		bc
  78+ 9CB7              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9CB7              ;--	ld		a,(varS)
  80+ 9CB7              ;--	xor		$80
  81+ 9CB7              ;--	ld		(varS),a
  82+ 9CB7              ;--	ex		af,af'
  83+ 9CB7              ;--	ret
  84+ 9CB7
  85+ 9CB7              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9CB7              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9CB7              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9CB7              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9CB7              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9CB7              ;;;;LL38:
  91+ 9CB7              ;;;;; Calculate sign for Q from A and varS
  92+ 9CB7              ;;;;	ld		hl,varS							;
  93+ 9CB7              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9CB7              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9CB7              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9CB7              ;;;;	ld		hl,varR
  97+ 9CB7              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9CB7              ;;;;	ret										; Done
  99+ 9CB7              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9CB7              ;;;;	ld		hl,varQ                         ;
 101+ 9CB7              ;;;;	ld		a,(hl)
 102+ 9CB7              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9CB7              ;;;;	ld		a,(varR)						;
 104+ 9CB7              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9CB7              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9CB7              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9CB7              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9CB7              ;;;;	ret
 109+ 9CB7              ;;;;.SignCorrection:
 110+ 9CB7              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9CB7              ;;;;	ex		af,af'							; save A temporarily
 112+ 9CB7              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9CB7              ;;;;	xor		$80							    ;
 114+ 9CB7              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9CB7              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9CB7              ;;;;	ret
 117+ 9CB7              ;;;;LL39Sub16Bit:
 118+ 9CB7              ;;;;	ld		e,a
 119+ 9CB7              ;;;;	ld		d,0
 120+ 9CB7              ;;;;	ld		a,(varR)
 121+ 9CB7              ;;;;	ld		l,a
 122+ 9CB7              ;;;;	ld		h,0
 123+ 9CB7              ;;;;	ClearCarryFlag
 124+ 9CB7              ;;;;	sbc		hl,de
 125+ 9CB7              ;;;;	jr		c,.SignCorrection16bit
 126+ 9CB7              ;;;;	bit		7,h
 127+ 9CB7              ;;;;	jr		z,.GoodToReturn
 128+ 9CB7              ;;;;.Needtonegate:
 129+ 9CB7              ;;;;	macronegate16hl
 130+ 9CB7              ;;;;.GoodToReturn
 131+ 9CB7              ;;;;	ld		a,l
 132+ 9CB7              ;;;;	or		a
 133+ 9CB7              ;;;;	ret
 134+ 9CB7              ;;;;.SignCorrection16bit:
 135+ 9CB7              ;;;;	macronegate16hl
 136+ 9CB7              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9CB7              ;;;;	xor		$80							    ;
 138+ 9CB7              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9CB7              ;;;;	ld		a,l
 140+ 9CB7              ;;;;	ret
 141+ 9CB7
 142+ 9CB7
# file closed: ./Maths/Utilities/badd_ll38.asm
 625  9CB7              ;;DEFUNCT    INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
 626  9CB7
 627  9CB7                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9CB7              ;;;LL28:
   2+ 9CB7              ;;;    ld      c,a                         ;
   3+ 9CB7              ;;;    ld      a,(varQ)                    ;
   4+ 9CB7              ;;;    ld      b,a                         ;
   5+ 9CB7              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9CB7              ;;;RequAmul256divB:                        ;
   7+ 9CB7              ;;;LL28Breg:
   8+ 9CB7              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9CB7              ;;;	cp		b							; Check A >= Q
  10+ 9CB7              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9CB7              ;;;.CalcRemainder:
  12+ 9CB7              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9CB7              ;;;.RollRemainder:
  14+ 9CB7              ;;;	sla		a
  15+ 9CB7              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9CB7              ;;;	cp		b							; a < q?
  17+ 9CB7              ;;;	jr		nc,.DontSBC
  18+ 9CB7              ;;;.DoSBC:									; a is < q
  19+ 9CB7              ;;;	sbc		a,b							; 	a -= q
  20+ 9CB7              ;;;.DontSBC:
  21+ 9CB7              ;;;	rl		c							; r << 1
  22+ 9CB7              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9CB7              ;;;    ld      a,c
  24+ 9CB7              ;;;    ld      (varR),a
  25+ 9CB7              ;;;	ret									; R (c) left with remainder
  26+ 9CB7              ;;;.Reduce:								; a geneated a carry
  27+ 9CB7              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9CB7              ;;;	scf									; set carry flag for rl
  29+ 9CB7              ;;;	rl		c							; r << 1 briging in carry
  30+ 9CB7              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9CB7              ;;;    ld      a,c
  32+ 9CB7              ;;;    ld      (varR),a
  33+ 9CB7              ;;;	ret
  34+ 9CB7              ;;;.AnswerTooBig:
  35+ 9CB7              ;;;	ld	    c,$FF							; arse its too big
  36+ 9CB7              ;;;    ld      a,c
  37+ 9CB7              ;;;    ld      (varR),a
  38+ 9CB7              ;;;	ret
  39+ 9CB7
  40+ 9CB7              BCequAmul256DivC:
  41+ 9CB7 59             ld    e,c
  42+ 9CB8 67             ld    h,a
  43+ 9CB9 2E 00          ld    l,0
  44+ 9CBB              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9CBB 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9CBC B7             or a                                   ; from this time on the carry is cleared
  47+ 9CBD C8             ret z
  48+ 9CBE 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9CC1 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9CC3              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9CC3 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9CC5 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9CC6 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9CC8 C9             ret
  55+ 9CC9
  56+ 9CC9              HL_Div_C:
  57+ 9CC9              ; Integer divides HL by C
  58+ 9CC9              ; Result in HL, remainder in A
  59+ 9CC9              ; Clobbers F, B
  60+ 9CC9 06 10                ld b,16
  61+ 9CCB AF                   xor a
  62+ 9CCC              HL_Div_C_Loop:
  63+ 9CCC 29                   add hl,hl
  64+ 9CCD 17                   rla
  65+ 9CCE B9                   cp c
  66+ 9CCF 38 02                jr c,HL_DivC_Skip
  67+ 9CD1 91                   sub c
  68+ 9CD2 2C                   inc l
  69+ 9CD3              HL_DivC_Skip:
  70+ 9CD3 10 F7                djnz HL_Div_C_Loop
  71+ 9CD5 7D                   ld   a,l
  72+ 9CD6 32 F4 81             ld  (varR),a
  73+ 9CD9 C9                   ret
  74+ 9CDA
  75+ 9CDA
  76+ 9CDA
  77+ 9CDA              ; Entry point if varQ is populated with demoninator
  78+ 9CDA              RequAmul256divQ:
  79+ 9CDA              BFRDIV:
  80+ 9CDA F5           		push	af
  81+ 9CDB 3A F3 81     		ld		a,(varQ)
  82+ 9CDE 4F           		ld		c,a
  83+ 9CDF F1           		pop		af
  84+ 9CE0 FE 00        		cp		0
  85+ 9CE2 CA F9 9C     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9CE5              RequAmul256divC:
  87+ 9CE5 2E 00        		ld		l,0
  88+ 9CE7 67           		ld		h,a
  89+ 9CE8              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9CE8 06 10        		ld b,16
  91+ 9CEA AF           		xor a
  92+ 9CEB              LOOPPOINT:
  93+ 9CEB 29           		add hl,hl
  94+ 9CEC 17           		rla
  95+ 9CED B9           		cp c
  96+ 9CEE 38 02        		jr c,SKIPINCSUB
  97+ 9CF0 2C           		inc l
  98+ 9CF1 91           		sub c
  99+ 9CF2              SKIPINCSUB:
 100+ 9CF2 10 F7        		djnz LOOPPOINT
 101+ 9CF4 7D           		ld		a,l
 102+ 9CF5 32 F4 81     		ld 		(varR),a
 103+ 9CF8 C9           		ret
 104+ 9CF9              HLDIVC_0_BY:
 105+ 9CF9 32 F4 81     		ld		(varR),a
 106+ 9CFC C9           		ret
 107+ 9CFD              ;	push	af
 108+ 9CFD              ;	ld		a,b
 109+ 9CFD              ;	ld		(varQ),a
 110+ 9CFD              ;	pop		af
 111+ 9CFD              ;RequAmul256divQ:
 112+ 9CFD              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9CFD              ;	ld		hl,varQ
 114+ 9CFD              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9CFD              ;	ld		b,$FE						; b = X
 116+ 9CFD              ;	ld		c,a							; c = R	div roll counter
 117+ 9CFD              ;LL31:									; roll R
 118+ 9CFD              ;	sla		a
 119+ 9CFD              ;	jr		c,LL29						; hop to Reduce
 120+ 9CFD              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9CFD              ;	sbc		a,(hl)						; a = a - Q
 122+ 9CFD              ;	rl		c							; rotate R left
 123+ 9CFD              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9CFD              ;	jr		LL2Good
 125+ 9CFD              ;LL29:									; Reduce
 126+ 9CFD              ;	sbc		a,(hl)
 127+ 9CFD              ;	scf
 128+ 9CFD              ;	rl		c							; roll a carry flag into R
 129+ 9CFD              ;	jr		c,LL31						;  loop R
 130+ 9CFD              ;	jr		LL2Good
 131+ 9CFD              ;LL2:
 132+ 9CFD              ;	ld		c,$FF
 133+ 9CFD              ;LL2Good:
 134+ 9CFD              ;	ld		a,c
 135+ 9CFD              ;	ld		(varR),a
 136+ 9CFD              ;	ret
 137+ 9CFD
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 628  9CFD                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9CFD              RequAdivQ:
   2+ 9CFD              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9CFD              LL61:										; Handling division R=A/Q for case further down
   4+ 9CFD 4F           	ld		c,a								; c = A
   5+ 9CFE 3A F3 81     	ld		a,(varQ)						; test for divide by 0
   6+ 9D01 FE 00        	cp		0
   7+ 9D03 28 16        	jr		z,LL84							; divide by zero error
   8+ 9D05 57           	ld		d,a								; now we can do C/D
   9+ 9D06 06 08            ld b,8
  10+ 9D08 AF               xor a
  11+ 9D09              LL63:										; roll divide loop
  12+ 9D09 CB 21            sla c
  13+ 9D0B 17               rla
  14+ 9D0C BA               cp d
  15+ 9D0D 38 02            jr c,LL64
  16+ 9D0F 0C               inc c
  17+ 9D10 92               sub d
  18+ 9D11              LL64:
  19+ 9D11 10 F6            djnz LL63
  20+ 9D13 32 F2 81     	ld	(varU),a							; store remainder in U
  21+ 9D16 79           	ld	a,c
  22+ 9D17 32 F4 81     	ld	(varR),a							; store remainder in R
  23+ 9D1A C9               ret
  24+ 9D1B              LL84:										; div error  R=U=#5
  25+ 9D1B 3E 32        	ld		a,50
  26+ 9D1D 32 F4 81     	ld		(varR),a
  27+ 9D20 32 F2 81     	ld		(varU),a
  28+ 9D23 C9           	ret
  29+ 9D24
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 629  9D24                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9D24              asm_mult12:
   2+ 9D24              RSequQmulA:
   3+ 9D24              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9D24 CD 5C 9C     	call APequQmulA
   5+ 9D27 08           	ex 	af,af'
   6+ 9D28 7A           	ld	a,d
   7+ 9D29 32 F5 81     	ld	(varS),a
   8+ 9D2C 7B           	ld	a,e
   9+ 9D2D 32 F4 81     	ld	(varR),a
  10+ 9D30 08           	ex 	af,af'
  11+ 9D31 C9           	ret
  12+ 9D32
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 630  9D32
 631  9D32                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9D32              CopyRotMatNoseVtoXX15:
   2+ 9D32                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9D32 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9D35 32 A6 C0    >                        ld       (XX15VecX),a
   3+ 9D38                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9D38 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9D3B 32 A7 C0    >                        ld       (XX15VecY),a
   4+ 9D3E                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9D3E 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9D41 32 A8 C0    >                        ld       (XX15VecZ),a
   5+ 9D44 C9                   ret
   6+ 9D45
   7+ 9D45              CopyRotMatRoofVtoXX15:
   8+ 9D45                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9D45 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9D48 32 A6 C0    >                        ld       (XX15VecX),a
   9+ 9D4B                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9D4B 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9D4E 32 A7 C0    >                        ld       (XX15VecY),a
  10+ 9D51                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9D51 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9D54 32 A8 C0    >                        ld       (XX15VecZ),a
  11+ 9D57 C9                   ret
  12+ 9D58
  13+ 9D58              CopyRotMatSideVtoXX15:
  14+ 9D58                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9D58 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9D5B 32 A6 C0    >                        ld       (XX15VecX),a
  15+ 9D5E                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9D5E 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9D61 32 A7 C0    >                        ld       (XX15VecY),a
  16+ 9D64                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9D64 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9D67 32 A8 C0    >                        ld       (XX15VecZ),a
  17+ 9D6A C9                   ret
  18+ 9D6B
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
 632  9D6B                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9D6B              CopyXX15toRotMatNoseV:
   2+ 9D6B                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9D6B 3A A6 C0    >                        ld       a,(XX15VecX)
   2+ 9D6E 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9D71                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9D71 3A A7 C0    >                        ld       a,(XX15VecY)
   3+ 9D74 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9D77                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9D77 3A A8 C0    >                        ld       a,(XX15VecZ)
   4+ 9D7A 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9D7D                      ZeroA
   5+ 9D7D AF          >                        xor a
   6+ 9D7E 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9D81 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9D84 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9D87 C9                   ret
  10+ 9D88
  11+ 9D88              CopyXX15toRotMatRoofV:
  12+ 9D88                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9D88 3A A6 C0    >                        ld       a,(XX15VecX)
  12+ 9D8B 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9D8E                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9D8E 3A A7 C0    >                        ld       a,(XX15VecY)
  13+ 9D91 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9D94                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9D94 3A A8 C0    >                        ld       a,(XX15VecZ)
  14+ 9D97 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9D9A                      ZeroA
  15+ 9D9A AF          >                        xor a
  16+ 9D9B 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9D9E 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9DA1 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9DA4 C9                   ret
  20+ 9DA5
  21+ 9DA5              CopyXX15toRotMatSideV:
  22+ 9DA5                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9DA5 3A A6 C0    >                        ld       a,(XX15VecX)
  22+ 9DA8 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9DAB                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9DAB 3A A7 C0    >                        ld       a,(XX15VecY)
  23+ 9DAE 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9DB1                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9DB1 3A A8 C0    >                        ld       a,(XX15VecZ)
  24+ 9DB4 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9DB7                      ZeroA
  25+ 9DB7 AF          >                        xor a
  26+ 9DB8 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9DBB 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9DBE 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9DC1 C9                   ret
  30+ 9DC2
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
 633  9DC2                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9DC2              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9DC2              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9DC2              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9DC2              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9DC2              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9DC2              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9DC2              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9DC2              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9DC2              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9DC2              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9DC2              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9DC2              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9DC2              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9DC2              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9DC2              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9DC2              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9DC2              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9DC2              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9DC2              ;
  20+ 9DC2              ;rotmatFx	equ	rotmat0xHi
  21+ 9DC2              ;rotmatFy	equ	rotmat0yHi
  22+ 9DC2              ;rotmatFz	equ	rotmat0zHi
  23+ 9DC2              ;rotmatUx	equ	rotmat1xHi
  24+ 9DC2              ;rotmatUy	equ	rotmat1yHi
  25+ 9DC2              ;rotmatUz	equ	rotmat1zHi
  26+ 9DC2              ;
  27+ 9DC2              ;inwkarray			equ		INWK+10
  28+ 9DC2
  29+ 9DC2
  30+ 9DC2
  31+ 9DC2
  32+ 9DC2              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9DC2
  34+ 9DC2              ; (P+1 A) = (A P) / Q
  35+ 9DC2              ;  B A    = (A P) / Q
  36+ 9DC2              ; TESTED OK
  37+ 9DC2
  38+ 9DC2
  39+ 9DC2 2A A6 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9DC5 3A A8 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9DC8 E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9DCA FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9DCC 57           .ZSquared:              ld      d,a
  44+ 9DCD 5F                                   ld      e,a
  45+ 9DCE ED 30                                mul     de
  46+ 9DD0 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9DD2 7D           .ABSX:                  ld      a,l
  48+ 9DD3 E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9DD5 DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9DD7 57                                   ld      d,a
  51+ 9DD8 5F                                   ld      e,a
  52+ 9DD9 ED 30                                mul     de
  53+ 9DDB EB                                   ex      de,hl                       ; hl = x squared
  54+ 9DDC 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9DDD E6 7F                                and     SignMask8Bit
  56+ 9DDF DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9DE1 5F           .YSquared:              ld      e,a
  58+ 9DE2 57                                   ld      d,a
  59+ 9DE3 ED 30                                mul     de                          ; de = y squared
  60+ 9DE5 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9DE6 09                                   add     hl,bc                       ;
  62+ 9DE7 EB                                   ex      de,hl
  63+ 9DE8 CD 85 96                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9DEB 55                                   ld      d,l
  65+ 9DEC FD 6A                                ld      iyl,d
  66+ 9DEE DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9DF0 CD A4 9B                             call    AequAdivDmul967Bit
  68+ 9DF3 57                                   ld      d,a
  69+ 9DF4 3A A6 C0                             ld      a,(XX15VecX)
  70+ 9DF7 E6 80                                and     SignOnly8Bit
  71+ 9DF9 B2                                   or      d
  72+ 9DFA 32 A6 C0                             ld      (XX15VecX),a
  73+ 9DFD DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9DFF 55                                   ld      d,l
  75+ 9E00 CD A4 9B                             call    AequAdivDmul967Bit
  76+ 9E03 57                                   ld      d,a
  77+ 9E04 3A A7 C0                             ld      a,(XX15VecY)
  78+ 9E07 E6 80                                and     SignOnly8Bit
  79+ 9E09 B2                                   or      d
  80+ 9E0A 32 A7 C0                             ld      (XX15VecY),a
  81+ 9E0D FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9E0F 55                                   ld      d,l
  83+ 9E10 CD A4 9B                             call    AequAdivDmul967Bit
  84+ 9E13 57                                   ld      d,a
  85+ 9E14 3A A8 C0                             ld      a,(XX15VecZ)
  86+ 9E17 E6 80                                and     SignOnly8Bit
  87+ 9E19 B2                                   or      d
  88+ 9E1A 32 A8 C0                             ld      (XX15VecZ),a
  89+ 9E1D C9                                   ret
  90+ 9E1E
  91+ 9E1E              TidyNormaliseNoseV:     MACRO
  92+ 9E1E ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9E1E ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9E1E ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9E1E                                      ENDM
  96+ 9E1E              TidyNormaliseRoofV:     MACRO
  97+ 9E1E ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9E1E ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9E1E ~                                    call	CopyXX15toRotMatRoofV
 100+ 9E1E                                      ENDM
 101+ 9E1E
 102+ 9E1E
 103+ 9E1E              TidyUbnK:               ;break
 104+ 9E1E                                      TidyNormaliseNoseV
 104+ 9E1E CD 32 9D    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9E21 CD C2 9D    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9E24 CD 6B 9D    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9E27 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9E2A E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9E2C C2 C4 9E                             jp      nz,.ProcessRoofX            ; .
 108+ 9E2F 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9E32 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9E34 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9E36              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9E36 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9E39 32 F3 81                             ld		(varQ),a					; q = nosev_y
 114+ 9E3C 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9E3F CD 24 9D                             call	RSequQmulA
 116+ 9E42 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9E45 32 F3 81                             ld		(varQ),a					; b = regX for now
 118+ 9E48 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9E4B CD 24 95                             call	madDEequQmulAaddRS
 120+ 9E4E 7A                                   ld      a,d                         ; flip sign bit
 121+ 9E4F EE 80                                xor     SignOnly8Bit
 122+ 9E51 57                                   ld      d,a
 123+ 9E52 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9E55 32 F3 81                             ld      (varQ),a
 125+ 9E58 7A           .YTest0Div:             ld      a,d
 126+ 9E59 E6 7F                                and     $7F
 127+ 9E5B B3                                   or      e
 128+ 9E5C FE 00                                cp      0
 129+ 9E5E 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9E60                                      ZeroA
 130+ 9E60 AF          >                        xor a
 131+ 9E61 C3 BE 9E                             jp      .SetRoofZ
 132+ 9E64 FE 00        .YTestDiv0:             cp      0
 133+ 9E66 20 06                                jr      nz,.SkipYZeroTest
 134+ 9E68 3E 60        .YDivideByZero:         ld      a,96
 135+ 9E6A B2                                   or      d
 136+ 9E6B C3 BE 9E                             jp      .SetRoofZ
 137+ 9E6E 7B           .SkipYZeroTest:         ld      a,e
 138+ 9E6F 32 F4 80                             ld      (varP),a
 139+ 9E72 7A                                   ld      a,d
 140+ 9E73 CD B8 96                             call    DVIDT
 141+ 9E76 78                                   ld      a,b
 142+ 9E77 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9E7A C3 08 9F                             jp      .DoneRoof
 144+ 9E7D              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9E7D 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ 9E80 32 F3 81                             ld		(varQ),a				    ; q = nosev_y
 147+ 9E83 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ 9E86 CD 24 9D                             call	RSequQmulA
 149+ 9E89 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ 9E8C 32 F3 81                             ld		(varQ),a				    ; b = regX for now
 151+ 9E8F 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ 9E92 CD 24 95                             call	madDEequQmulAaddRS
 153+ 9E95 7A                                   ld      a,d                         ; flip sign bit
 154+ 9E96 EE 80                                xor     SignOnly8Bit
 155+ 9E98 57                                   ld      d,a
 156+ 9E99 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ 9E9C 32 F3 81                             ld      (varQ),a
 158+ 9E9F 7A           .ZTest0Div:             ld      a,d
 159+ 9EA0 E6 7F                                and     $7F
 160+ 9EA2 B3                                   or      e
 161+ 9EA3 FE 00                                cp      0
 162+ 9EA5 20 0E                                jr      nz,.SkipZZeroTest
 163+ 9EA7                                      ZeroA
 163+ 9EA7 AF          >                        xor a
 164+ 9EA8 C3 BE 9E                             jp      .SetRoofZ
 165+ 9EAB FE 00        .ZTestDiv0:             cp      0
 166+ 9EAD 20 06                                jr      nz,.SkipZZeroTest
 167+ 9EAF 3E 60        .ZDivideByZero:         ld      a,96
 168+ 9EB1 B2                                   or      d
 169+ 9EB2 C3 BE 9E                             jp      .SetRoofZ
 170+ 9EB5 7B           .SkipZZeroTest:         ld      a,e
 171+ 9EB6 32 F4 80                             ld      (varP),a
 172+ 9EB9 7A                                   ld      a,d
 173+ 9EBA CD B8 96                             call    DVIDT
 174+ 9EBD 78                                   ld      a,b
 175+ 9EBE 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ 9EC1 C3 08 9F                             jp      .DoneRoof
 177+ 9EC4              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ 9EC4 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ 9EC7 32 F3 81                             ld		(varQ),a					; q = nosev_y
 180+ 9ECA 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ 9ECD CD 24 9D                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ 9ED0 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ 9ED3 32 F3 81                             ld		(varQ),a					; b = regX for now
 184+ 9ED6 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ 9ED9 CD 24 95                             call	madDEequQmulAaddRS
 186+ 9EDC 7A                                   ld      a,d                         ; flip sign bit
 187+ 9EDD EE 80                                xor     SignOnly8Bit
 188+ 9EDF 57                                   ld      d,a
 189+ 9EE0 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ 9EE3 32 F3 81                             ld      (varQ),a
 191+ 9EE6 7A           .XTest0Div:             ld      a,d
 192+ 9EE7 E6 7F                                and     $7F
 193+ 9EE9 B3                                   or      e
 194+ 9EEA FE 00                                cp      0
 195+ 9EEC 20 0E                                jr      nz,.SkipXZeroTest
 196+ 9EEE                                      ZeroA
 196+ 9EEE AF          >                        xor a
 197+ 9EEF C3 BE 9E                             jp      .SetRoofZ
 198+ 9EF2 FE 00        .XTestDiv0:             cp      0
 199+ 9EF4 20 06                                jr      nz,.SkipXZeroTest
 200+ 9EF6 3E 60        .XDivideByZero:         ld      a,96
 201+ 9EF8 B2                                   or      d
 202+ 9EF9 C3 05 9F                             jp      .SetRoofX
 203+ 9EFC 7B           .SkipXZeroTest:         ld      a,e
 204+ 9EFD 32 F4 80                             ld      (varP),a
 205+ 9F00 7A                                   ld      a,d
 206+ 9F01 CD B8 96                             call    DVIDT
 207+ 9F04 78                                   ld      a,b
 208+ 9F05 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ 9F08              .DoneRoof:              TidyNormaliseRoofV
 209+ 9F08 CD 45 9D    >                        call	CopyRotMatRoofVtoXX15
 209+ 9F0B CD C2 9D    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ 9F0E CD 88 9D    >                        call	CopyXX15toRotMatRoofV
 210+ 9F11              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ 9F11 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ 9F14 EE 80                                xor     SignOnly8Bit
 213+ 9F16 32 F3 81                             ld		(varQ),a					; q = nosev_y
 214+ 9F19 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ 9F1C CD 24 9D                             call	RSequQmulA
 216+ 9F1F 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ 9F22 32 F3 81                             ld		(varQ),a							; b = regX for now
 218+ 9F25 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ 9F28 CD 24 95                             call	madDEequQmulAaddRS
 220+ 9F2B CD 00 97                             call    BAequDEdiv96
 221+ 9F2E 78                                   ld      a,b
 222+ 9F2F 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ 9F32              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ 9F32 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ 9F35 EE 80                                xor     SignOnly8Bit
 226+ 9F37 32 F3 81                             ld		(varQ),a					; q = nosev_y
 227+ 9F3A 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ 9F3D CD 24 9D                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ 9F40 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ 9F43 32 F3 81                             ld		(varQ),a					; b = regX for now
 231+ 9F46 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ 9F49 CD 24 95                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ 9F4C CD 00 97                             call    BAequDEdiv96
 234+ 9F4F 78                                   ld      a,b
 235+ 9F50 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ 9F53              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ 9F53 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ 9F56 EE 80                                xor     SignOnly8Bit
 239+ 9F58 32 F3 81                             ld		(varQ),a					; q = nosev_y
 240+ 9F5B 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ 9F5E CD 24 9D                             call	RSequQmulA
 242+ 9F61 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ 9F64 32 F3 81                             ld		(varQ),a							; b = regX for now
 244+ 9F67 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ 9F6A CD 24 95                             call	madDEequQmulAaddRS
 246+ 9F6D CD 00 97                             call    BAequDEdiv96
 247+ 9F70 78                                   ld      a,b
 248+ 9F71 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ 9F74                                      ZeroA
 249+ 9F74 AF          >                        xor a
 250+ 9F75 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ 9F78 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ 9F7B 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ 9F7E C9                                   ret
 254+ 9F7F
 255+ 9F7F
 256+ 9F7F              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ 9F7F              		; b = regX on entry
 258+ 9F7F              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ 9F7F 08           		ex		af,af'
 260+ 9F80 78           		ld		a,b
 261+ 9F81 32 F3 81     		ld		(varQ),a
 262+ 9F84 08           		ex		af,af'
 263+ 9F85 EE 80        		xor		$80							;	 flip sign of Acc
 264+ 9F87 CD 02 95     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ 9F8A              ; USES 				A BC E
 266+ 9F8A              ; DOES NOT USE		D HL
 267+ 9F8A              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ 9F8A 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ 9F8B E6 80        		and		SignOnly8Bit						; ..
 270+ 9F8D 5F           		ld		e,a							; ..
 271+ 9F8E 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ 9F8F E6 7F        		and		SignMask8Bit							; ..
 273+ 9F91 06 FE        		ld		b,$FE						; slide counter T1
 274+ 9F93              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ 9F93 CB 27        		sla		a
 276+ 9F95              		JumpIfALTNusng $60, TIS1SkipSub
 276+ 9F95 FE 60       >                        cp      $60
 276+ 9F97 DA A4 9F    >                        jp		c, TIS1SkipSub
 277+ 9F9A DE 60        		sbc		a,$60							; subtract 96
 278+ 9F9C 37           		scf
 279+ 9F9D CB 10        		rl		b							;  T1
 280+ 9F9F 38 F2        		jr		c,TIS1RollTLoop
 281+ 9FA1              TIS1KIPCont:
 282+ 9FA1 78           		ld		a,b							;   T1
 283+ 9FA2 B3           		or		e							;   restore T sign
 284+ 9FA3 C9           		ret
 285+ 9FA4              TIS1SkipSub:
 286+ 9FA4 B7           	or			a
 287+ 9FA5 CB 10        	rl			b							; T rolled left to push bit out the end
 288+ 9FA7 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ 9FA9 C3 A1 9F     	jp			TIS1KIPCont
 290+ 9FAC
 291+ 9FAC              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ 9FAC              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ 9FAC
 294+ 9FAC
 295+ 9FAC
 296+ 9FAC
 297+ 9FAC              TidyRotYSmall:
 298+ 9FAC CD D5 A0     		call	CalcRoofvZ
 299+ 9FAF 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 300+ 9FB2 C3 E6 9F     		jp		NormaliseRoofV
 301+ 9FB5
 302+ 9FB5              TidyRotXSmall:
 303+ 9FB5 AF           		xor		a
 304+ 9FB6 47           		ld		b,a
 305+ 9FB7 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 306+ 9FBA E6 60        		and		%01100000
 307+ 9FBC CA AC 9F     		jp		z,TidyRotYSmall
 308+ 9FBF 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 309+ 9FC2 47           		ld		b,a							; b = regX for now
 310+ 9FC3 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 311+ 9FC6 CD 9B A0     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 312+ 9FC9 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 313+ 9FCC C3 E6 9F     		jp		NormaliseRoofV
 314+ 9FCF              ; TIDY is broken
 315+ 9FCF
 316+ 9FCF
 317+ 9FCF              TIDY:
 318+ 9FCF
 319+ 9FCF              ORTHOGALISE:
 320+ 9FCF              ;-- NormaliseNosev
 321+ 9FCF CD 32 9D     		call	CopyRotMatNoseVtoXX15
 322+ 9FD2 CD E1 99     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 323+ 9FD5 CD 6B 9D     		call	CopyXX15toRotMatNoseV
 324+ 9FD8              .CheckNXSmall:
 325+ 9FD8 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 326+ 9FDB E6 60        		and		%01100000					; check top two magnitude bits
 327+ 9FDD CA B5 9F     		jp		z,TidyRotXSmall
 328+ 9FE0              .RotXIsBig:
 329+ 9FE0 CD 61 A0             call	CalcRoofvX
 330+ 9FE3 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 331+ 9FE6              NormaliseRoofV:
 332+ 9FE6 CD 45 9D     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 333+ 9FE9 CD E1 99     		call	normaliseXX1596S7			; normalise roof
 334+ 9FEC              ;calc sidev x
 335+ 9FEC CD 88 9D     		call	CopyXX15toRotMatRoofV		; get back normalised version
 336+ 9FEF 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 337+ 9FF2 32 F3 81     		ld		(varQ),a					; q = nosev_y
 338+ 9FF5 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 339+ 9FF8 CD 24 9D     		call	RSequQmulA
 340+ 9FFB 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 341+ 9FFE 47           		ld		b,a							; b = regX for now
 342+ 9FFF 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 343+ A002 CD 7F 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 344+ A005                      JumpIfAIsZero NormSideXNoNeg
 344+ A005 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 344+ A006 CA 0B A0    >                        jp	    z, NormSideXNoNeg
 345+ A009 EE 80        		xor		$80							; flip a to get -sidev_x
 346+ A00B              NormSideXNoNeg:
 347+ A00B 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 348+ A00E              ;calc sidev y
 349+ A00E 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 350+ A011 32 F3 81     		ld		(varQ),a
 351+ A014 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 352+ A017 CD 24 9D     		call	RSequQmulA
 353+ A01A 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 354+ A01D 47           		ld		b,a							; b = regX for now
 355+ A01E 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 356+ A021 CD 7F 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 357+ A024                      JumpIfAIsZero NormSideYNoNeg
 357+ A024 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 357+ A025 CA 2A A0    >                        jp	    z, NormSideYNoNeg
 358+ A028 EE 80        		xor		$80							; flip a to get -sidev_y
 359+ A02A              NormSideYNoNeg:
 360+ A02A 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 361+ A02D              ;calc sidev z
 362+ A02D 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 363+ A030 32 F3 81     		ld		(varQ),a
 364+ A033 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 365+ A036 CD 24 9D     		call	RSequQmulA
 366+ A039 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 367+ A03C 47           		ld		b,a							; b = regX for now
 368+ A03D 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 369+ A040 CD 7F 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 370+ A043                      JumpIfAIsZero NormSideZNoNeg
 370+ A043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 370+ A044 CA 49 A0    >                        jp	    z, NormSideZNoNeg
 371+ A047 EE 80        		xor		$80							; flip a to get -sidev_y
 372+ A049              NormSideZNoNeg:
 373+ A049 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 374+ A04C              .ClearLoBytes:
 375+ A04C 21 35 C0     		ld		hl,UBnkrotmatNosevX
 376+ A04F 06 09        		ld		b,9
 377+ A051 AF                   xor     a
 378+ A052              .ClearLoLoop:
 379+ A052 77           		ld		(hl),a						; zero out lo bytes
 380+ A053 23           		inc		hl
 381+ A054 23           		inc		hl
 382+ A055 10 FB        		djnz	.ClearLoLoop
 383+ A057 CD 58 9D     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 384+ A05A CD E1 99     		call	normaliseXX1596S7			; normalise roof
 385+ A05D              ;calc sidev x
 386+ A05D CD A5 9D     		call	CopyXX15toRotMatSideV		; get back normalised version
 387+ A060
 388+ A060 C9           		ret
 389+ A061
 390+ A061
 391+ A061              CalcRoofvX:
 392+ A061              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 393+ A061              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 393+ A061 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 393+ A064 32 F3 81    >                        ld       (varQ),a
 394+ A067 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 395+ A06A CD 24 9D     		call	RSequQmulA						; rs = nosez hi * roofz hi
 396+ A06D              		ldCopyByte UBnkrotmatNosevY+1,varQ
 396+ A06D 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 396+ A070 32 F3 81    >                        ld       (varQ),a
 397+ A073 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 398+ A076 CD 02 95     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 399+ A079 7A           		ld		a,d
 400+ A07A E6 80        		and 	$80
 401+ A07C FD 67        		ld		iyh,a
 402+ A07E              ;DEBUG		ld		c,a
 403+ A07E 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 404+ A081 4F           		ld		c,a								; temp save
 405+ A082 E6 80        		and		$80
 406+ A084 FD AC        		xor		iyh								; flip from saved multiply sign result
 407+ A086 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 408+ A088 79           		ld		a,c								; recover a
 409+ A089 E6 7F        		and		$7F								; a is unsigned nosev x
 410+ A08B 42           		ld		b,d
 411+ A08C 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 412+ A08D 57           		ld		d,a								; de = nosev x hi
 413+ A08E 1E 00        		ld		e,0
 414+ A090 CD C0 98     		call	BC_Div_DE
 415+ A093 FD 7C        		ld		a,iyh							; get back sign from nosevx
 416+ A095 EE 80        		xor		$80								; flip sign
 417+ A097 E6 80        		and		$80								; keep sign bit only
 418+ A099 B0           		or		b
 419+ A09A C9           		ret
 420+ A09B
 421+ A09B
 422+ A09B              CalcRoofvY:
 423+ A09B              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 424+ A09B              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 424+ A09B 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 424+ A09E 32 F3 81    >                        ld       (varQ),a
 425+ A0A1 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 426+ A0A4 CD 24 9D     		call	RSequQmulA
 427+ A0A7              		ldCopyByte UBnkrotmatNosevX+1,varQ
 427+ A0A7 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 427+ A0AA 32 F3 81    >                        ld       (varQ),a
 428+ A0AD 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 429+ A0B0 CD 02 95     		call	madXAequQmulAaddRS
 430+ A0B3 7A           		ld		a,d
 431+ A0B4 E6 80        		and 	$80
 432+ A0B6 FD 67        		ld		iyh,a
 433+ A0B8 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 434+ A0BB 4F           		ld		c,a								; temp save
 435+ A0BC E6 80        		and		$80
 436+ A0BE FD AC        		xor		iyh								; flip from saved multiply sign result
 437+ A0C0 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 438+ A0C2 79           		ld		a,c								; recover a
 439+ A0C3 E6 7F        		and		$7F								; a is unsigned nosev x
 440+ A0C5 42           		ld		b,d
 441+ A0C6 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 442+ A0C7 57           		ld		d,a								; de = nosev x hi
 443+ A0C8 1E 00        		ld		e,0
 444+ A0CA CD C0 98     		call	BC_Div_DE
 445+ A0CD FD 7C        		ld		a,iyh
 446+ A0CF EE 80        		xor		$80
 447+ A0D1 E6 80        		and		$80
 448+ A0D3 B0           		or		b
 449+ A0D4 C9           		ret
 450+ A0D5
 451+ A0D5              CalcRoofvZ:
 452+ A0D5              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 453+ A0D5              		ldCopyByte UBnkrotmatNosevY+1,varQ
 453+ A0D5 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 453+ A0D8 32 F3 81    >                        ld       (varQ),a
 454+ A0DB 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 455+ A0DE CD 24 9D     		call	RSequQmulA						; rs = NOSEy * ROOFy
 456+ A0E1              		ldCopyByte UBnkrotmatNosevX+1,varQ
 456+ A0E1 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 456+ A0E4 32 F3 81    >                        ld       (varQ),a
 457+ A0E7 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 458+ A0EA CD 02 95     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 459+ A0ED 7A           		ld		a,d
 460+ A0EE E6 80        		and 	$80
 461+ A0F0 FD 67        		ld		iyh,a
 462+ A0F2 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 463+ A0F5 4F           		ld		c,a								; temp save
 464+ A0F6 E6 80        		and		$80
 465+ A0F8 FD AC        		xor		iyh								; flip from saved multiply sign result
 466+ A0FA FD 67        		ld		iyh,a							; save nosesev sign to iyh
 467+ A0FC 79           		ld		a,c								; recover a
 468+ A0FD E6 7F        		and		$7F								; a is unsigned nosev x
 469+ A0FF 42           		ld		b,d
 470+ A100 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 471+ A101 57           		ld		d,a								; de = nosev x hi
 472+ A102 1E 00        		ld		e,0
 473+ A104 CD C0 98     		call	BC_Div_DE
 474+ A107 FD 7C        		ld		a,iyh
 475+ A109 EE 80        		xor		$80
 476+ A10B E6 80        		and		$80
 477+ A10D B0           		or		b
 478+ A10E C9           		ret
 479+ A10F
# file closed: ./Maths/Utilities/tidy.asm
 634  A10F                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A10F
   2+ A10F              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A10F BA          >                        cp     d
   2+ A110 D2 2E A1    >                        jp		nc,.Ll28Exit255
   3+ A113 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A115 CB 27        .LL31:                  sla     a
   5+ A117 38 0D                                jr      c,.LL29
   6+ A119                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A119 BA          >                        cp      d
   6+ A11A DA 1F A1    >                        jp		c, .SkipSub
   7+ A11D 92                                   sub     d
   8+ A11E                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A11E B7          >                        or a
   9+ A11F 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A120 CB 13                                rl      e
  11+ A122 38 F1                                jr      c,.LL31
  12+ A124 7B                                   ld      a,e
  13+ A125 C9                                   ret
  14+ A126 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A127 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A128 CB 13                                rl      e                           ; rotate counter e left
  17+ A12A 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A12C 7B                                   ld      a,e                         ; stick result in a
  19+ A12D C9                                   ret
  20+ A12E 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A130 C9                                   ret
  22+ A131
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 635  A131                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A131              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A131              TIS1:
   3+ A131 08           		ex		af,af'
   4+ A132 3A DD 80     		ld		a,(regX)
   5+ A135 47           		ld		b,a
   6+ A136 08           		ex		af,af'
   7+ A137              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A137 08           		ex		af,af'
   9+ A138 78           		ld		a,b
  10+ A139 32 F3 81     		ld		(varQ),a
  11+ A13C 08           		ex		af,af'
  12+ A13D EE 80        		xor		$80							;	 flip sign of Acc
  13+ A13F CD 02 95     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A142              ; USES 				A BC E
  15+ A142              ; DOES NOT USE		D HL
  16+ A142              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A142 47           		ld		b,a
  18+ A143 E6 80        		and		$80							;	hi sign
  19+ A145 5F           		ld		e,a							;   e = varT
  20+ A146 78           		ld		a,b
  21+ A147 E6 7F        		and		$7F							;	hi A7
  22+ A149 06 FE        		ld		b,$FE						;   slide counter
  23+ A14B 48           		ld		c,b							;   c == T1 ::  T1
  24+ A14C              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A14C CB 27        		sla		a
  26+ A14E FE 60        		cp		$60							; max 96
  27+ A150 30 02        		jr		nc,.DV4
  28+ A152 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A154              .DV4:										; skip subtraction
  30+ A154 CB 11        		rl		c							;  T1
  31+ A156 38 F4        		jr		c,.DVL3
  32+ A158 79           		ld		a,c							;   T1
  33+ A159 B3           		or		e							;   restore T sign
  34+ A15A C9           		ret
  35+ A15B
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 636  A15B
 637  A15B                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A15B
   2+ A15B                                      DEFINE TACTICSDEBUG 1
   3+ A15B              ;                       DEFINE ALWAYSANGRY 1
   4+ A15B              ;                        DEFINE TARGETDEBUG 1
   5+ A15B              MISSILEMAXPITCH         equ 3
   6+ A15B              MISSILEMINPITCH         equ -3
   7+ A15B              MISSILEMAXROLL          equ 3
   8+ A15B              MISSILEMINROLL          equ -3
   9+ A15B              ;Ship Tactics
  10+ A15B              ;ShipTypeNormal          equ 0
  11+ A15B              ;ShipTypeMissile         equ 1
  12+ A15B              ;ShipTypeStation         equ 2
  13+ A15B              ;ShipTypeJunk            equ 3
  14+ A15B              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A15B              ; To be added
  16+ A15B              ;ShipTypeTargoid
  17+ A15B              ;ShipTypeHermit
  18+ A15B              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A15B              ;ShipTypePirate
  20+ A15B              ;ShipTypeBountyHunter
  21+ A15B              ;ShipTypeTrader
  22+ A15B              ;ShipType.....
  23+ A15B              ;ShipTypeMissionTypeA
  24+ A15B              ;ShipTypeMissionTypeB
  25+ A15B              ;ShipTypeMissionTypeETC
  26+ A15B              ;ShipTypeNoAI
  27+ A15B
  28+ A15B
  29+ A15B
  30+ A15B 05 A7 DD A3  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A15F 8B A1 8C A1
  30+ A163 8D A1
  31+ A165 8E A1 8F A1                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A169 8F A1 8F A1
  31+ A16D 8F A1
  32+ A16F              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A16F
  34+ A16F
  35+ A16F
  36+ A16F              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A16F              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A16F              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A16F 21 25 68                            ld      hl,TidyCounter
  40+ A172 35                                  dec     (hl)
  41+ A173                                     ;call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE
  42+ A173                                     ; This shoudl be a call nz to tidy *****ret     nz
  43+ A173 3E 10                               ld      a,16
  44+ A175 32 25 68                            ld      (TidyCounter),a
  45+ A178                                     ;call    TidyUbnK
  46+ A178                                     ; add AI in here too
  47+ A178 3A A9 C3                            ld       a,(ShipTypeAddr)
  48+ A17B                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  48+ A17B FE 0A       >                        cp    ShipAiJumpTableMax
  48+ A17D D0          >                        ret	 nc
  49+ A17E 21 5B A1                            ld       hl,ShipAIJumpTable
  50+ A181 ED 31                               add      hl,a
  51+ A183 ED 31                               add      hl,a
  52+ A185 7E                                  ld       a,(hl)                                  ; contrary to the name
  53+ A186 23                                  inc      hl                                      ; jp (hl) is really
  54+ A187 66                                  ld       h,(hl)                                  ; jp hl
  55+ A188 6F                                  ld       l,a                                     ;
  56+ A189 E9                                  jp       hl                                      ; Follow the AI Jump Table
  57+ A18A C9                                  ret                                              ; not needed as jp handles this
  58+ A18B
  59+ A18B
  60+ A18B
  61+ A18B              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  62+ A18B
  63+ A18B
  64+ A18B C9           StationAI:              ret
  65+ A18C C9           JunkAI:                 ret
  66+ A18D C9           ScoopableAI:            ret
  67+ A18E C9           ThargoidAI:             ret
  68+ A18F C9           NoAI:                   ret
  69+ A190              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ A190              CalculateAgression:     IFDEF   ALWAYSANGRY
  71+ A190 ~                                        jp  UltraHostile
  72+ A190                                      ENDIF
  73+ A190 3A AB C3                             ld      a,(ShipAIFlagsAddr)
  74+ A193 47                                   ld      b,a
  75+ A194 E6 02                                and     %00000010
  76+ A196 20 20                                jr      nz,.UltraHostile
  77+ A198 78                                   ld      a,b
  78+ A199 E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  79+ A19B 21 5C C0                             ld      hl,UBnKMissilesLeft                     ; more missiles more agression
  80+ A19E B6                                   or      (hl)
  81+ A19F 47                                   ld      b,a
  82+ A1A0 3A AA C3                             ld      a,(ShipNewBitsAddr)
  83+ A1A3 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  84+ A1A5 B0                                   or      b
  85+ A1A6 47                                   ld      b,a
  86+ A1A7 3A 53 C0                             ld      a,(UBnKShipAggression)
  87+ A1AA                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  87+ A1AA FE 40       >                        cp      64
  87+ A1AC DA B3 A1    >                        jp		c, .NotAlreadyAgressive
  88+ A1AF 78                                   ld      a,b
  89+ A1B0 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
  90+ A1B2 47                                   ld      b,a
  91+ A1B3 78           .NotAlreadyAgressive:   ld      a,b
  92+ A1B4 32 53 C0                             ld      (UBnKShipAggression),a
  93+ A1B7 C9                                   ret
  94+ A1B8 3E FF        .UltraHostile:          ld      a,$FF
  95+ A1BA 32 53 C0                             ld      (UBnKShipAggression),a
  96+ A1BD C9                                   ret
  97+ A1BE              ;----------------------------------------------------------------------------------------------------------------------------------
  98+ A1BE              ; set angry if possible, if its an innocent then flag the space station to get angry
  99+ A1BE 3A AA C3     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 100+ A1C1                                      ;break
 101+ A1C1                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 101+ A1C1 3A A9 C3    >                        ld  a,(ShipTypeAddr)
 101+ A1C4 FE 02       >                        cp  ShipTypeStation
 101+ A1C6 CA E5 A1    >                        jp  z,.SetNewbHostile
 102+ A1C9 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 103+ A1CB C4 1F A2                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 104+ A1CE 3A 54 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
 105+ A1D1                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
 105+ A1D1 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
 105+ A1D3 C8          >                        ret		z
 106+ A1D4 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 107+ A1D5                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
 107+ A1D5 3E 02       >                        ld      a,2
 107+ A1D7 32 47 C0    >                        ld      (UBnKAccel),a
 108+ A1DA CB 27                                sla     a                                       ; set pitch to 4
 109+ A1DC 32 49 C0                             ld      (UBnKRotZCounter),a                     ; .
 110+ A1DF 3A AB C3                             ld      a,(ShipAIFlagsAddr)
 111+ A1E2                                      ReturnIfBitMaskClear ShipCanAnger
 111+ A1E2 E6 80       >                        and     ShipCanAnger
 111+ A1E4 C8          >                        ret     z
 112+ A1E5 CD 46 C7     .SetNewbHostile:        call    SetShipHostile
 113+ A1E8 C9                                   ret
 114+ A1E9
 115+ A1E9              ;----------------------------------------------------------------------------------------------------------------------------------
 116+ A1E9 C9           MissileDidHitUs:        ret ; TODO
 117+ A1EA
 118+ A1EA              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ A1EA              PlayerHitByMissile:     MMUSelectLayer1
 119+ A1EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 120+ A1EE 3E 05                                ld      a,L1ColourInkCyan
 121+ A1F0 CD A5 E0                             call    l1_set_border
 122+ A1F3 3A 3C C0                             ld      a,(UBnKMissileBlastDamage)
 123+ A1F6 47                                   ld      b,a                                     ; b = damage
 124+ A1F7 3A 28 C0                             ld      a,(UBnKzsgn)
 125+ A1FA E6 80                                and     $80
 126+ A1FC 20 0A                                jr      nz,.HitRear
 127+ A1FE 3A 21 85     .HitFront:              ld      a,(ForeShield)
 128+ A201 CD EA 63                             call    ApplyDamage
 129+ A204 32 21 85                             ld      (ForeShield),a
 130+ A207 C9                                   ret
 131+ A208 3A 22 85     .HitRear:               ld      a,(AftShield)
 132+ A20B CD EA 63                             call    ApplyDamage
 133+ A20E 32 22 85                             ld      (AftShield),a
 134+ A211 C9                                   ret; TODO , do hit set up blast radius etc
 135+ A212              ;----------------------------------------------------------------------------------------------------------------------------------
 136+ A212              MissileHitShipA:        MMUSelectLayer1
 136+ A212 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 137+ A216 3E 02                                ld      a,L1ColourInkRed
 138+ A218 CD A5 E0                             call    l1_set_border
 139+ A21B CD 71 C8                             call    UnivExplodeShip
 140+ A21E C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 141+ A21F              ;----------------------------------------------------------------------------------------------------------------------------------
 142+ A21F CD CC 87     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 143+ A222 D8                                   ret     c
 144+ A223 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 145+ A226 FD 67                                ld      iyh,a
 146+ A228                                      MMUSelectUniverseN 0                            ; space station is always 0
 146+ A228 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 147+ A22C CD 46 C7                             call    SetShipHostile
 148+ A22F FD 7C                                ld      a,iyh                                   ; get prev bank back
 149+ A231                                      MMUSelectUniverseA                              ;
 149+ A231 C6 46       >                     add    a,BankUNIVDATA0
 149+ A233 ED 92 56    >                     nextreg UniverseMMU,       a
 150+ A236 C9                                   ret
 151+ A237
 152+ A237              ;----------------------------------------------------------------------------------------------------------------------------------
 153+ A237              CheckMissileBlastInit:  ZeroA
 153+ A237 AF          >                        xor a
 154+ A238 32 B0 83                             ld      (CurrentMissileCheck),a
 155+ A23B 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 156+ A23E 01 0C 00                             ld      bc,12                           ; and Damage stats
 157+ A241 11 B7 82                             ld      de,MissileXPos
 158+ A244 ED B0                                ldir
 159+ A246                                      ZeroA                                   ; we have processd enque request
 159+ A246 AF          >                        xor a
 160+ A247 32 44 C0                             ld      (UBnKMissleHitToProcess),a      ;
 161+ A24A CD 07 A3                             call    CheckIfBlastHitUs               ; If we are in Range
 162+ A24D DC E9 A1                             call    c, MissileDidHitUs              ; Then we get hit
 163+ A250 C9                                   ret
 164+ A251
 165+ A251              ;----------------------------------------------------------------------------------------------------------------------------------
 166+ A251              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 167+ A251 ~                                    ld      a,(MissilePos)                      ; check X Coord
 168+ A251 ~                                    ld      hl,(ShipSign)
 169+ A251 ~                                    xor     (hl)
 170+ A251 ~                                    and     SignOnly8Bit
 171+ A251 ~                                    ld      hl,(ShipPos)
 172+ A251 ~                                    ld      de,(MissilePos)
 173+ A251 ~                                    jr      z,.SignsDiffernt
 174+ A251 ~            .XSame:                 and     a
 175+ A251 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 176+ A251 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 177+ A251 ~                                    NegHL
 178+ A251 ~                                    jp      .CheckDiff
 179+ A251 ~            .SignsDiffernt:         add     hl,de
 180+ A251 ~                                    ReturnIfNegative                            ; if we overflowed then return
 181+ A251 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 182+ A251 ~                                    ReturnIfANotZero
 183+ A251 ~                                    ld      a,l
 184+ A251 ~                                    and     a
 185+ A251 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 186+ A251                                      ENDM
 187+ A251              ;...................................................................
 188+ A251              ; We only do one test per loop for spreading the load of work
 189+ A251 3A B0 83     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 190+ A254                                      ReturnIfAGTENusng   UniverseSlotListSize
 190+ A254 FE 0C       >                        cp    UniverseSlotListSize
 190+ A256 D0          >                        ret	 nc
 191+ A257 FD 6F                                ld      iyl,a
 192+ A259 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 193+ A25A 32 B0 83                             ld      (CurrentMissileCheck),a
 194+ A25D                                      ReturnIfSlotAEmpty
 194+ A25D 21 B2 83    >                        ld      hl,UniverseSlotList
 194+ A260 ED 31       >                        add     hl,a
 194+ A262 7E          >                        ld      a,(hl)
 194+ A263 3C          >                        inc     a
 194+ A264 C8          >                        ret     z           ; if slot was ff inc would make it 0
 194+ A265 3D          >                        dec     a           ; get original value back for later
 195+ A266 CD CC 87                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 196+ A269 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 197+ A26A 3A 51 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 198+ A26D E6 20                                and     ShipExploding                       ;
 199+ A26F                                      ReturnIfNotZero                             ;
 199+ A26F C0          >                        ret     nz
 200+ A270 3A D8 82                             ld      a,(CurrentMissileBlastRange)
 201+ A273 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 202+ A275 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 203+ A277                                      MMUSelectUniverseA
 203+ A277 C6 46       >                     add    a,BankUNIVDATA0
 203+ A279 ED 92 56    >                     nextreg UniverseMMU,       a
 204+ A27C                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 204+ A27C 3A B7 82    >                        ld      a,(MissileXPos)                      ; check X Coord
 204+ A27F 2A 22 C0    >                        ld      hl,(UBnKxsgn)
 204+ A282 AE          >                        xor     (hl)
 204+ A283 E6 80       >                        and     SignOnly8Bit
 204+ A285 2A 20 C0    >                        ld      hl,(UBnKxlo)
 204+ A288 ED 5B B7 82 >                        ld      de,(MissileXPos)
 204+ A28C 28 0F       >                        jr      z,.SignsDiffernt
 204+ A28E A7          >.XSame:                 and     a
 204+ A28F ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 204+ A291             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 204+ A291 F2 9F A2    >                        jp		p, .CheckDiff
 204+ A294             >                        NegHL
 204+ A294 AF          >                    xor a
 204+ A295 95          >                    sub l
 204+ A296 6F          >                    ld l,a
 204+ A297 9F          >                    sbc a,a
 204+ A298 94          >                    sub h
 204+ A299 67          >                    ld h,a
 204+ A29A C3 9F A2    >                        jp      .CheckDiff
 204+ A29D 19          >.SignsDiffernt:         add     hl,de
 204+ A29E             >                        ReturnIfNegative                            ; if we overflowed then return
 204+ A29E F8          >                        ret     m
 204+ A29F 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 204+ A2A0             >                        ReturnIfANotZero
 204+ A2A0 A7          >                        and     a
 204+ A2A1 C0          >                        ret     nz
 204+ A2A2 7D          >                        ld      a,l
 204+ A2A3 A7          >                        and     a
 204+ A2A4             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 204+ A2A4 21 D8 82    >                        ld      hl,CurrentMissileBlastRange
 204+ A2A7 BE          >                        cp      (hl)
 204+ A2A8 D0          >                        ret	    nc
 205+ A2A9                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 205+ A2A9 3A BA 82    >                        ld      a,(MissileYPos)                      ; check X Coord
 205+ A2AC 2A 25 C0    >                        ld      hl,(UBnKysgn)
 205+ A2AF AE          >                        xor     (hl)
 205+ A2B0 E6 80       >                        and     SignOnly8Bit
 205+ A2B2 2A 23 C0    >                        ld      hl,(UBnKylo)
 205+ A2B5 ED 5B BA 82 >                        ld      de,(MissileYPos)
 205+ A2B9 28 0F       >                        jr      z,.SignsDiffernt
 205+ A2BB A7          >.XSame:                 and     a
 205+ A2BC ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 205+ A2BE             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 205+ A2BE F2 CC A2    >                        jp		p, .CheckDiff
 205+ A2C1             >                        NegHL
 205+ A2C1 AF          >                    xor a
 205+ A2C2 95          >                    sub l
 205+ A2C3 6F          >                    ld l,a
 205+ A2C4 9F          >                    sbc a,a
 205+ A2C5 94          >                    sub h
 205+ A2C6 67          >                    ld h,a
 205+ A2C7 C3 CC A2    >                        jp      .CheckDiff
 205+ A2CA 19          >.SignsDiffernt:         add     hl,de
 205+ A2CB             >                        ReturnIfNegative                            ; if we overflowed then return
 205+ A2CB F8          >                        ret     m
 205+ A2CC 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 205+ A2CD             >                        ReturnIfANotZero
 205+ A2CD A7          >                        and     a
 205+ A2CE C0          >                        ret     nz
 205+ A2CF 7D          >                        ld      a,l
 205+ A2D0 A7          >                        and     a
 205+ A2D1             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 205+ A2D1 21 D8 82    >                        ld      hl,CurrentMissileBlastRange
 205+ A2D4 BE          >                        cp      (hl)
 205+ A2D5 D0          >                        ret	    nc
 206+ A2D6                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 206+ A2D6 3A BD 82    >                        ld      a,(MissileZPos)                      ; check X Coord
 206+ A2D9 2A 28 C0    >                        ld      hl,(UBnKzsgn)
 206+ A2DC AE          >                        xor     (hl)
 206+ A2DD E6 80       >                        and     SignOnly8Bit
 206+ A2DF 2A 26 C0    >                        ld      hl,(UBnKzlo)
 206+ A2E2 ED 5B BD 82 >                        ld      de,(MissileZPos)
 206+ A2E6 28 0F       >                        jr      z,.SignsDiffernt
 206+ A2E8 A7          >.XSame:                 and     a
 206+ A2E9 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 206+ A2EB             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 206+ A2EB F2 F9 A2    >                        jp		p, .CheckDiff
 206+ A2EE             >                        NegHL
 206+ A2EE AF          >                    xor a
 206+ A2EF 95          >                    sub l
 206+ A2F0 6F          >                    ld l,a
 206+ A2F1 9F          >                    sbc a,a
 206+ A2F2 94          >                    sub h
 206+ A2F3 67          >                    ld h,a
 206+ A2F4 C3 F9 A2    >                        jp      .CheckDiff
 206+ A2F7 19          >.SignsDiffernt:         add     hl,de
 206+ A2F8             >                        ReturnIfNegative                            ; if we overflowed then return
 206+ A2F8 F8          >                        ret     m
 206+ A2F9 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 206+ A2FA             >                        ReturnIfANotZero
 206+ A2FA A7          >                        and     a
 206+ A2FB C0          >                        ret     nz
 206+ A2FC 7D          >                        ld      a,l
 206+ A2FD A7          >                        and     a
 206+ A2FE             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 206+ A2FE 21 D8 82    >                        ld      hl,CurrentMissileBlastRange
 206+ A301 BE          >                        cp      (hl)
 206+ A302 D0          >                        ret	    nc
 207+ A303 CD 60 C8                             call    ShipMissileBlast                    ; Ship hit by missile blast
 208+ A306 C9                                   ret                                         ; we are done
 209+ A307              ;...................................................................
 210+ A307 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 211+ A30A 4F                                   ld      c,a
 212+ A30B C3 12 A3                             jp      MissileHitUsCheckPos
 213+ A30E              ;...................................................................
 214+ A30E 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 215+ A311 4F                                   ld      c,a
 216+ A312              ;...................................................................
 217+ A312 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 218+ A315 ED 5B 23 C0                          ld      de, (UBnKylo)
 219+ A319 ED 4B 26 C0                          ld      bc, (UBnKzlo)
 220+ A31D 7C                                   ld      a,h
 221+ A31E B2                                   or      d
 222+ A31F B0                                   or      b
 223+ A320                                      ClearCarryFlag
 223+ A320 B7          >                        or a
 224+ A321                                      ReturnIfNotZero
 224+ A321 C0          >                        ret     nz
 225+ A322                                      SetCarryFlag
 225+ A322 37          >                        scf
 226+ A323 C9                                   ret
 227+ A324
 228+ A324                                      ZeroA
 228+ A324 AF          >                        xor a
 229+ A325 B4                                   or      h
 230+ A326                                      ClearCarryFlag
 230+ A326 B7          >                        or a
 231+ A327                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 231+ A327 C0          >                        ret     nz
 232+ A328 7D                                   ld      a,l
 233+ A329                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 233+ A329 B9          >                        cp    c
 233+ A32A D0          >                        ret	 nc
 234+ A32B 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 235+ A32E                                      ZeroA
 235+ A32E AF          >                        xor a
 236+ A32F B5                                   or      l
 237+ A330                                      ClearCarryFlag
 237+ A330 B7          >                        or a
 238+ A331                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 238+ A331 C0          >                        ret     nz
 239+ A332 7D                                   ld      a,l
 240+ A333                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 240+ A333 B9          >                        cp    c
 240+ A334 D0          >                        ret	 nc
 241+ A335 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 242+ A338                                      ZeroA
 242+ A338 AF          >                        xor a
 243+ A339 B5                                   or      l
 244+ A33A                                      ClearCarryFlag
 244+ A33A B7          >                        or a
 245+ A33B                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 245+ A33B C0          >                        ret     nz
 246+ A33C 7D                                   ld      a,l
 247+ A33D                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 247+ A33D B9          >                        cp    c
 247+ A33E D0          >                        ret	 nc
 248+ A33F              .ItsAHit:               SetCarryFlag                                ; So must have hit
 248+ A33F 37          >                        scf
 249+ A340 C9                                   ret
 250+ A341
 251+ A341              SelectMissileBank:      MACRO
 252+ A341 ~                                    ld      a,iyh
 253+ A341 ~                                    MMUSelectUnivBankA
 254+ A341                                      ENDM
 255+ A341
 256+ A341              SelectTargetBank:       MACRO
 257+ A341 ~                                    ld      a,iyl
 258+ A341 ~                                    MMUSelectUnivBankA
 259+ A341                                      ENDM
 260+ A341
 261+ A341              ;...................................................................
 262+ A341              ; ... Copy of target data for missile calcs etc
 263+ A341                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A341 00           TacticsTargetShip       DB 0
   2++A342 20           TacticsPad0A            DB " "
   3++A343 00           TacticsMissileBank      DB 0
   4++A344 00           TacticsTargetBank       DB 0
   5++A345 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A349 00 00        TacticsDotProduct1      DS 2
   7++A34B 3E           TacticsPad0C            DB ">"
   8++A34C 00 00        TacticsDotProduct2      DS 2
   9++A34E 3E           TacticsPad0D            DB ">"
  10++A34F 00 00        TacticsDotProduct3      DS 2
  11++A351 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A355 58
  12++A356 00 00 00     TacticsMissileX         DS 3
  13++A359 59           TacticsPad1B            DB "Y"
  14++A35A 00 00 00     TacticsMissileY         DS 3
  15++A35D 5A           TacticsPad1C            DB "Z"
  16++A35E 00 00 00     TacticsMissileZ         DS 3
  17++A361 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A365 58
  18++A366 20 59        TacticsPad2B            DB " Y"
  19++A368 20 5A        TacticsPad2C            DB " Z"
  20++A36A 00           TacticsRotMatX          DB 0
  21++A36B 00           TacticsToyMatXSign      DB 0
  22++A36C 00           TacticsRotMatY          DB 0
  23++A36D 00           TacticsToyMatYSign      DB 0
  24++A36E 00           TacticsRotMatZ          DB 0
  25++A36F 00           TacticsToyMatZSign      DB 0
  26++A370 20           TacticsPad2D            DB " "
  27++A371 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A375 3D
  28++A376 00 00 00     TacticsTargetX          DS 3
  29++A379 00 00 00     TacticsTargetY          DS 3
  30++A37C 00 00 00     TacticsTargetZ          DS 3
  31++A37F 3D 20        TacticsPad3B            DB "= "
  32++A381 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A385 58
  33++A386 00 00 00     TacticsVectorX:         DS 3
  34++A389 59           TacticsPad4B            DB "Y"
  35++A38A 00 00 00     TacticsVectorY:         DS 3
  36++A38D 5A           TacticsPad4C            DB "Z"
  37++A38E 00 00 00     TacticsVectorZ:         DS 3
  38++A391 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A395 58
  39++A396 00 00        TacticsNormX:           DS 2
  40++A398 20 59        TacticsPad5B            DB " Y"
  41++A39A 00 00        TacticsNormY:           DS 2
  42++A39C 20 5A        TacticsPad5C            DB " Z"
  43++A39E 00 00        TacticsNormZ:           DS 2
  44++A3A0 20           TacticsPad5D            DB " "
  45++A3A1 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A3A5 58
  46++A3A6 00 00        TacticsSideX            DS 2
  47++A3A8 20 59        TacticsPad7B            DB " Y"
  48++A3AA 00 00        TacticsSideY            DS 2
  49++A3AC 20 5A        TacticsPad7C            DB " Z"
  50++A3AE 00 00        TacticsSideZ            DS 2
  51++A3B0 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A3B4 66 58
  52++A3B6 00 00        TacticsRoofX            DS 2
  53++A3B8 20 59        TacticsPad8B            DB " Y"
  54++A3BA 00 00        TacticsRoofY            DS 2
  55++A3BC 20 5A        TacticsPad8C            DB " Z"
  56++A3BE 00 00        TacticsRoofZ            DS 2
  57++A3C0 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A3C4 65 58
  58++A3C6 00 00        TacticsNoseX            DS 2
  59++A3C8 20 59        TacticsPad9B            DB " Y"
  60++A3CA 00 00        TacticsNoseY            DS 2
  61++A3CC 20 5A        TacticsPad9C            DB " Z"
  62++A3CE 00 00        TacticsNoseZ            DS 2
  63++A3D0 20           TacticsPad9D            DB " "
  64++A3D1 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A3D5 4C 54
  65++A3D7 00           TacticsRotX             DS 1
  66++A3D8 20           TacticsPadAB            DB " "
  67++A3D9 00           TacticsRotZ             DS 1
  68++A3DA 20           TacticsPadAC            DB " "
  69++A3DB 00           TacticsSpeed            DS 1
  70++A3DC 20           TacticsPadAD            DB " "
  71++A3DD
  72++A3DD
# file closed: ./GameEngine/./TacticsWorkingData.asm
 264+ A3DD                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A3DD                                      DEFINE MISSILEDEBUG 1
   2++A3DD                                      DEFINE MISSILEDOHIT 1
   3++A3DD
   4++A3DD              MISSILEMAXACCEL         equ 3
   5++A3DD              MISSILEMAXDECEL         equ -3
   6++A3DD                                      ;DEFINE MISSILEBREAK
   7++A3DD              ;.. Thsi version uses new kind logic
   8++A3DD              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A3DD              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A3DD                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A3DD                                      IFDEF MISSILEDOHIT
  12++A3DD                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A3DD 3A 44 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A3E0 A7          >                        and     a
  12++A3E1 CA 43 A5    >                        jp      z, .ProcessMissileHit
  13++A3E4                                      ENDIF
  14++A3E4              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A3E4 3A 08 81    >                        ld  a,(ECMCountDown)
  14++A3E7 A7          >                        and a
  14++A3E8 C2 4C A5    >                        jp  nz,.ECMIsActive
  15++A3EB              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A3EB 3A AA C3    >                        ld      a,(ShipNewBitsAddr)
  15++A3EE E6 04       >                        and     ShipIsHostile
  16++A3F0                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A3F0 CA 16 A4    >                        jp	z,.MissileTargetingShip
  17++A3F3 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A3F6 3A 3D C0                             ld      a,(UBnKMissileDetonateRange)
  19++A3F9 4F                                   ld      c,a                                 ; c holds detonation range
  20++A3FA CD 12 A3                             call    MissileHitUsCheckPos
  21++A3FD D2 06 A4     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A400 CD EA A1     .MissleHitUs:           call    PlayerHitByMissile
  23++A403 C3 4C A5                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A406 CD 1F AA     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A409 CD FA A9                             call    CopyPosToVector
  26++A40C 3A A3 83                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A40F C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A411 FD 67                                ld      iyh,a
  29++A413 C3 21 A5                             jp      .NormaliseDirection
  30++A416              ;--- Missile is targeting other ship
  31++A416 3A A3 83     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A419 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A41B FD 67                                ld      iyh,a
  34++A41D                                      IFDEF MISSILEDEBUG
  35++A41D 32 43 A3                                 ld  (TacticsMissileBank),a
  36++A420                                      ENDIF
  37++A420 3A 45 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  38++A423 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A425 FD 6F                                ld      iyl,a                               ; save target
  40++A427                                      IFDEF MISSILEDEBUG
  41++A427 32 44 A3                                 ld  (TacticsTargetBank),a
  42++A42A                                      ENDIF
  43++A42A              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A42A 21 B2 83    >                        ld      hl,UniverseSlotList
  43++A42D ED 31       >                        add     hl,a
  43++A42F 7E          >                        ld      a,(hl)
  43++A430 3C          >                        inc     a
  43++A431 CA 4C A5    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A434 3D          >                        dec     a           ; get original value back for later
  44++A435              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A435              .SelectTargetShip:      SelectTargetBank
  45++A435 FD 7D       >                        ld      a,iyl
  45++A437             >                        MMUSelectUnivBankA
  45++A437 ED 92 56    >                     nextreg UniverseMMU,       a
  46++A43A 3A 54 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  47++A43D E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  48++A43F 28 08                                jr      z,.UpdateTargetingShipX
  49++A441              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  49++A441 FD 7C       >                        ld      a,iyh
  49++A443             >                        MMUSelectUnivBankA
  49++A443 ED 92 56    >                     nextreg UniverseMMU,       a
  50++A446 C3 4C A5                             jp      .ECMIsActive
  51++A449              ;--- At this point we already have the target banked in ready for calculating vector
  52++A449              ; Tactics vector = missile - target
  53++A449              .UpdateTargetingShipX:  IFDEF MISSILEBREAK
  54++A449 ~                                        break
  55++A449                                      ENDIF
  56++A449 ED 5B 20 C0                          ld      de,(UBnKxlo)                        ; get target ship X
  57++A44D 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  58++A450                                      IFDEF MISSILEDEBUG
  59++A450 ED 53 76 A3                              ld  (TacticsTargetX),de
  60++A454 32 78 A3                                 ld  (TacticsTargetX+2),a
  61++A457                                      ENDIF
  62++A457                                      FlipSignBitA
  62++A457 EE 80       >                        xor     SignOnly8Bit
  63++A459 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  64++A45A                                      SelectMissileBank
  64++A45A FD 7C       >                        ld      a,iyh
  64++A45C             >                        MMUSelectUnivBankA
  64++A45C ED 92 56    >                     nextreg UniverseMMU,       a
  65++A45F 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  66++A462 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  67++A465                                      IFDEF MISSILEDEBUG
  68++A465 22 56 A3                                 ld  (TacticsMissileX),hl
  69++A468 32 58 A3                                 ld  (TacticsMissileX+2),a
  70++A46B                                      ENDIF
  71++A46B 47                                   ld      b,a
  72++A46C CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  73++A46F 22 86 A3                             ld      (TacticsVectorX),hl
  74++A472 32 88 A3                             ld      (TacticsVectorX+2),a
  75++A475              .UpdateTargetingShipY:  SelectTargetBank
  75++A475 FD 7D       >                        ld      a,iyl
  75++A477             >                        MMUSelectUnivBankA
  75++A477 ED 92 56    >                     nextreg UniverseMMU,       a
  76++A47A ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  77++A47E 3A 25 C0                             ld      a,(UBnKysgn)
  78++A481                                      IFDEF MISSILEDEBUG
  79++A481 ED 53 79 A3                              ld  (TacticsTargetY),de
  80++A485 32 7B A3                                 ld  (TacticsTargetY+2),a
  81++A488                                      ENDIF
  82++A488                                      FlipSignBitA
  82++A488 EE 80       >                        xor     SignOnly8Bit
  83++A48A 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  84++A48B                                      SelectMissileBank
  84++A48B FD 7C       >                        ld      a,iyh
  84++A48D             >                        MMUSelectUnivBankA
  84++A48D ED 92 56    >                     nextreg UniverseMMU,       a
  85++A490 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
  86++A493 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
  87++A496                                      IFDEF MISSILEDEBUG
  88++A496 22 5A A3                                 ld  (TacticsMissileY),hl
  89++A499 32 5C A3                                 ld  (TacticsMissileY+2),a
  90++A49C                                      ENDIF
  91++A49C 47                                   ld      b,a
  92++A49D CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  93++A4A0 22 8A A3                             ld      (TacticsVectorY),hl
  94++A4A3 32 8C A3                             ld      (TacticsVectorY+2),a
  95++A4A6              .UpdateTargetingShipZ:  SelectTargetBank
  95++A4A6 FD 7D       >                        ld      a,iyl
  95++A4A8             >                        MMUSelectUnivBankA
  95++A4A8 ED 92 56    >                     nextreg UniverseMMU,       a
  96++A4AB ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
  97++A4AF 3A 28 C0                             ld      a,(UBnKzsgn)
  98++A4B2                                      IFDEF MISSILEDEBUG
  99++A4B2 ED 53 7C A3                              ld  (TacticsTargetZ),de
 100++A4B6 32 7E A3                                 ld  (TacticsTargetZ+2),a
 101++A4B9                                      ENDIF
 102++A4B9                                      FlipSignBitA
 102++A4B9 EE 80       >                        xor     SignOnly8Bit
 103++A4BB 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 104++A4BC                                      SelectMissileBank
 104++A4BC FD 7C       >                        ld      a,iyh
 104++A4BE             >                        MMUSelectUnivBankA
 104++A4BE ED 92 56    >                     nextreg UniverseMMU,       a
 105++A4C1 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 106++A4C4 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 107++A4C7                                      IFDEF MISSILEDEBUG
 108++A4C7 22 5E A3                                 ld  (TacticsMissileZ),hl
 109++A4CA 32 60 A3                                 ld  (TacticsMissileZ+2),a
 110++A4CD                                      ENDIF
 111++A4CD
 112++A4CD 47                                   ld      b,a
 113++A4CE CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 114++A4D1 22 8E A3                             ld      (TacticsVectorZ),hl
 115++A4D4 32 90 A3                             ld      (TacticsVectorZ+2),a
 116++A4D7              ; by here missile in in memory and TacticsVector now holds distance
 117++A4D7              ; if or ABS all high bytes is <> 0
 118++A4D7              .CheckDistance:         IFDEF MISSILEDOHIT
 119++A4D7 2A 87 A3                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 120++A4DA 7C                                       ld      a,h                                ; .
 121++A4DB ED 5B 8B A3                              ld      de,(TacticsVectorY+1)              ; .
 122++A4DF B2                                       or      d                                  ; .
 123++A4E0 ED 4B 8F A3                              ld      bc,(TacticsVectorZ+1)              ; .
 124++A4E4 B0                                       or      b                                  ; .
 125++A4E5                                          ClearSignBitA                              ; .
 125++A4E5 E6 7F       >                        and     SignMask8Bit
 126++A4E7                                          JumpIfNotZero       .FarAway               ; .
 126++A4E7 C2 F6 A4    >                        jp	nz,.FarAway
 127++A4EA B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 128++A4EB B3                                       or      e                                  ; .
 129++A4EC B1                                       or      c                                  ; .
 130++A4ED                                          JumpIfNotZero       .FarAway               ; .
 130++A4ED C2 F6 A4    >                        jp	nz,.FarAway
 131++A4F0                                      ELSE
 132++A4F0 ~                                        jp                  .FarAway
 133++A4F0                                      ENDIF
 134++A4F0              ; If we get here its close enough to detonate
 135++A4F0 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 136++A4F3 C3 12 A2                             jp      MissileHitShipA
 137++A4F6              ;   *far away ** TODO need to set memory read write on page 0
 138++A4F6              .FarAway:               SelectTargetBank
 138++A4F6 FD 7D       >                        ld      a,iyl
 138++A4F8             >                        MMUSelectUnivBankA
 138++A4F8 ED 92 56    >                     nextreg UniverseMMU,       a
 139++A4FB                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 139++A4FB 3A 5A C0    >                        ld      a,(UBnKECMFitted)
 139++A4FE A7          >                        and     a
 139++A4FF C2 1C A5    >                        jp      nz, .NoECM
 140++A502                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 140++A502 3A 58 C0    >                        ld      a,(UBnKEnergy)
 140++A505 FE 80       >                        cp      ECMCounterMax
 140++A507 DA 1C A5    >                        jp	  c,.NoECM
 141++A50A                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 141++A50A 3A 08 81    >                        ld      a,(ECMCountDown)
 141++A50D A7          >                        and     a
 141++A50E C2 1C A5    >                        jp	    nz,.NoECM
 142++A511 3A EB 80     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 143++A514                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 143++A514 FE 10       >                        cp     16
 143++A516 D2 1C A5    >                        jp		nc,.UpdateMissilePos
 144++A519              ;. If we get here then target is still paged in to fire ECM
 145++A519 C3 6E C7     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 146++A51C              ;                       implicit ret
 147++A51C              ;. If we get here then target is still paged in with no ECM
 148++A51C              .NoECM:
 149++A51C                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 150++A51C                                    ;;;         ** targeting computer looses track and destructs missiles
 151++A51C              ;--- Now we can actually update the missile AI
 152++A51C              .UpdateMissilePos:      ;break
 153++A51C                                      SelectMissileBank
 153++A51C FD 7C       >                        ld      a,iyh
 153++A51E             >                        MMUSelectUnivBankA
 153++A51E ED 92 56    >                     nextreg UniverseMMU,       a
 154++A521                                      ;break
 155++A521                                      ;call    ORTHOGALISE
 156++A521              .NormaliseDirection:    IFDEF MISSILEBREAK
 157++A521 ~                                        break
 158++A521                                      ENDIF
 159++A521 CD 80 AA                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 160++A524                                      IFDEF TACTICSDEBUG
 161++A524 CD 47 A9                                 call DebugTacticsCopy
 162++A527                                      ENDIF
 163++A527              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 163++A527 3A 88 A3    >                        ld  a,(TacticsVectorX+2)
 163++A52A EE 80       >                        xor SignOnly8Bit
 163++A52C 32 88 A3    >                        ld  (TacticsVectorX+2),a
 164++A52F                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 164++A52F 3A 8C A3    >                        ld  a,(TacticsVectorY+2)
 164++A532 EE 80       >                        xor SignOnly8Bit
 164++A534 32 8C A3    >                        ld  (TacticsVectorY+2),a
 165++A537                                      FlipSignMem TacticsVectorZ+2                ; .
 165++A537 3A 90 A3    >                        ld  a,(TacticsVectorZ+2)
 165++A53A EE 80       >                        xor SignOnly8Bit
 165++A53C 32 90 A3    >                        ld  (TacticsVectorZ+2),a
 166++A53F CD 56 A5                             call    SeekingLogic
 167++A542 C9                                   ret
 168++A543 3A B0 83     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 169++A546                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 169++A546 FE 0C       >                        cp    UniverseSlotListSize
 169++A548 D0          >                        ret	 nc
 170++A549 C3 37 A2     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 171++A54C                                      ; DUMMY RET get a free return by using jp
 172++A54C CD 71 C8     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 173++A54F                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 173++A54F AF          >                        xor     a
 173++A550 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 174++A553 C3 43 A5                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 175++A556                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 176++A556
 177++A556 CD 8C A9     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 178++A559 32 49 A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 179++A55C 3A F5 81                             ld      a,(varS)                            ; get sign from dot product
 180++A55F 32 4D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A562 CD E2 A9     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 182++A565 32 4C A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 183++A568 3A F5 81                             ld      a,(varS)                            ; .
 184++A56B 32 4D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 185++A56E CD 78 A5                             call    SimplifiedShipPitchv3
 186++A571 CD 9C A5                             call    SimplifiedShipRollv3
 187++A574 CD CA A5                             call    SimplifiedShipSpeedv3
 188++A577 C9                                   ret
 189++A578
 190++A578              SimplifiedShipPitchv3:  ;break
 191++A578 2A 4C A3                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 192++A57B 7C                                   ld      a,h                                ; .
 193++A57C EE 80                                xor     $80                                ; .
 194++A57E E6 80                                and     $80                                ; .
 195++A580 67                                   ld      h,a                                ; h  = flipped sign
 196++A581 7D                                   ld      a,l                                ; a = value * 2
 197++A582 CB 27                                sla     a                                  ;
 198++A584                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 198++A584 FE 10       >                        cp     16
 198++A586 D2 92 A5    >                        jp		nc,.skipPitchZero
 199++A589                                      ZeroA                                      ; else we zero pitch but
 199++A589 AF          >                        xor a
 200++A58A B4                                   or      h                                  ; we need to retain the sign
 201++A58B 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 202++A58E                                      IFDEF MISSILEDEBUG
 203++A58E 32 D9 A3                                 ld  (TacticsRotZ),a
 204++A591                                      ENDIF
 205++A591 C9                                   ret
 206++A592 3E 02        .skipPitchZero:         ld      a,2
 207++A594 B4                                   or      h
 208++A595 32 49 C0                             ld      (UBnKRotZCounter),a
 209++A598                                      IFDEF MISSILEDEBUG
 210++A598 32 D9 A3                                 ld  (TacticsRotZ),a
 211++A59B                                      ENDIF
 212++A59B C9                                   ret
 213++A59C
 214++A59C              ;Direct on dot product nose is $24
 215++A59C              ; Position                  Pitch   Roll    Speed
 216++A59C              ; Top left forwards         up      -ve     +
 217++A59C              ; Top right forwards        up      +ve     +
 218++A59C              ; Bottom left forwards      down    -ve     +
 219++A59C              ; Bottom right forwards     down    +ve     +
 220++A59C              ; Top left rear             up      -ve     -
 221++A59C              ; Top right rear            up      +ve     -
 222++A59C              ; Bottom left rear          down    -ve     -
 223++A59C              ; Bottom right rear         down    +ve     -
 224++A59C
 225++A59C
 226++A59C
 227++A59C              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 228++A59C                                     ; sla     a                                 ; * 2 to also abs
 229++A59C                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 230++A59C CD E8 A9                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 231++A59F 32 4F A3                             ld      (TacticsDotProduct3),a             ; .
 232++A5A2 6F                                   ld      l,a                                ; .
 233++A5A3 3A F5 81                             ld      a,(varS)                           ; .
 234++A5A6 32 50 A3                             ld      (TacticsDotProduct3+1),a           ; .
 235++A5A9 67                                   ld      h,a                                ; h = sign sidev
 236++A5AA 3A 4D A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 237++A5AD                                      ;xor     $80                               ; .
 238++A5AD                                      ;xor     h                                 ; b = flip against pitch sign
 239++A5AD                                      ;and     $80                               ; .
 240++A5AD                                      ;xor $80
 241++A5AD 47                                   ld      b,a                                ; b = roof product
 242++A5AE 7D                                   ld      a,l                                ; a = abs sidev  * 2
 243++A5AF CB 27                                sla     a                                  ;
 244++A5B1                                      JumpIfAGTENusng 16,.skipRollZero           ;
 244++A5B1 FE 10       >                        cp     16
 244++A5B3 D2 BF A5    >                        jp		nc,.skipRollZero
 245++A5B6                                      ZeroA                                      ; if its zoer then set rotx to zero
 245++A5B6 AF          >                        xor a
 246++A5B7 B0                                   or      b
 247++A5B8 32 48 C0                             ld      (UBnKRotXCounter),a
 248++A5BB                                      IFDEF MISSILEDEBUG
 249++A5BB 32 D7 A3                                 ld  (TacticsRotX),a
 250++A5BE                                      ENDIF
 251++A5BE C9                                   ret
 252++A5BF 3E 02        .skipRollZero:          ld      a,2
 253++A5C1 B4                                   or      h
 254++A5C2 A8                                   xor     b
 255++A5C3 32 48 C0                             ld      (UBnKRotXCounter),a
 256++A5C6                                      IFDEF MISSILEDEBUG
 257++A5C6 32 D7 A3                                 ld  (TacticsRotX),a
 258++A5C9                                      ENDIF
 259++A5C9 C9                                   ret
 260++A5CA
 261++A5CA 2A 49 A3     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 262++A5CD 7C                                   ld      a,h
 263++A5CE A7                                   and     a
 264++A5CF 20 13                                jr      nz,.SlowDown
 265++A5D1 ED 5B 4C A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 266++A5D5 7D                                   ld      a,l
 267++A5D6                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 267++A5D6 FE 16       >                        cp      22
 267++A5D8 DA E4 A5    >                        jp		c, .SlowDown
 268++A5DB 3E 03        .Accelerate:            ld      a,3                                 ; else
 269++A5DD 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 270++A5E0                                      IFDEF MISSILEDEBUG
 271++A5E0 32 DB A3                                 ld  (TacticsSpeed),a
 272++A5E3                                      ENDIF
 273++A5E3 C9                                   ret                                         ;  .
 274++A5E4              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 274++A5E4 FE 12       >                        cp      18
 274++A5E6 DA F2 A5    >                        jp		c, .NoSpeedChange
 275++A5E9 3E FE        .Deccelerate:           ld      a,-2
 276++A5EB 32 47 C0                             ld      (UBnKAccel),a
 277++A5EE                                      IFDEF MISSILEDEBUG
 278++A5EE 32 DB A3                                 ld  (TacticsSpeed),a
 279++A5F1                                      ENDIF
 280++A5F1 C9                                   ret
 281++A5F2              .NoSpeedChange:         ZeroA                                       ; else no change
 281++A5F2 AF          >                        xor a
 282++A5F3 32 47 C0                             ld      (UBnKAccel),a
 283++A5F6                                      IFDEF MISSILEDEBUG
 284++A5F6 32 DB A3                                 ld  (TacticsSpeed),a
 285++A5F9                                      ENDIF
 286++A5F9 C9                                   ret
 287++A5FA
 288++A5FA
 289++A5FA CD 39 A6     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 290++A5FD 7C                                   ld      a,h
 291++A5FE A7                                   and     a
 292++A5FF 06 16                                ld      b,22
 293++A601 20 08                                jr      nz,.NotSlow
 294++A603 7D           .CloseSlowTest:         ld      a,l
 295++A604                                      JumpIfAGTENusng 30, .NotSlow
 295++A604 FE 1E       >                        cp     30
 295++A606 D2 0B A6    >                        jp		nc,.NotSlow
 296++A609 06 3C                                ld      b,60
 297++A60B 2A 49 A3     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 298++A60E 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 299++A60F E6 80                                and     $80                                 ; do decelleration test
 300++A611 C2 22 A6                             jp      nz,.DecelTest                       ; .
 301++A614 7D                                   ld      a,l                                 ; .
 302++A615                                      JumpIfALTNusng b, .DecelTest                ; .
 302++A615 B8          >                        cp      b
 302++A616 DA 22 A6    >                        jp		c, .DecelTest
 303++A619 3E 03        .Accelerate:            ld      a,3                                 ; else
 304++A61B 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 305++A61E                                      IFDEF MISSILEDEBUG
 306++A61E 32 DB A3                                 ld  (TacticsSpeed),a
 307++A621                                      ENDIF
 308++A621 C9                                   ret                                         ;  .
 309++A622 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 310++A623                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 310++A623 FE 12       >                        cp     18
 310++A625 D2 30 A6    >                        jp		nc,.Deccelerate
 311++A628              .NoSpeedChange:         ZeroA                                       ; else no change
 311++A628 AF          >                        xor a
 312++A629 32 47 C0                             ld      (UBnKAccel),a
 313++A62C                                      IFDEF MISSILEDEBUG
 314++A62C 32 DB A3                                 ld  (TacticsSpeed),a
 315++A62F                                      ENDIF
 316++A62F C9                                   ret
 317++A630 3E FE        .Deccelerate:           ld      a,-2
 318++A632 32 47 C0                             ld      (UBnKAccel),a
 319++A635                                      IFDEF MISSILEDEBUG
 320++A635 32 DB A3                                 ld  (TacticsSpeed),a
 321++A638                                      ENDIF
 322++A638 C9                                   ret
 323++A639
 324++A639 2A 86 A3     GetDistance:            ld      hl,(TacticsVectorX)
 325++A63C ED 5B 8A A3                          ld      de,(TacticsVectorY)
 326++A640 ED 4B 8E A3                          ld      bc,(TacticsVectorZ)
 327++A644 7C                                   ld      a,h
 328++A645 E6 7F                                and     $7F
 329++A647 67                                   ld      h,a
 330++A648 78                                   ld      a,b
 331++A649 E6 7F                                and     $7F
 332++A64B 47                                   ld      b,a
 333++A64C 7A                                   ld      a,d
 334++A64D E6 7F                                and     $7F
 335++A64F 57                                   ld      d,a
 336++A650 09                                   add     hl,bc
 337++A651 19                                   add     hl,de
 338++A652                                      ShiftHLRight1
 338++A652 CB 3C       >			   srl h
 338++A654 CB 1D       >			   rr  l
 339++A656                                      ShiftHLRight1
 339++A656 CB 3C       >			   srl h
 339++A658 CB 1D       >			   rr  l
 340++A65A C9                                   ret
 341++A65B
 342++A65B
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 265+ A65B                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A65B               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A65B
   3++A65B 00 00 00     NewLaunchUBnKX          DS 3
   4++A65E 00 00 00     NewLaunchUBnKY          DS 3
   5++A661 00 00 00     NewLaunchUBnKZ          DS 3
   6++A664
   7++A664 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A676 00           NewLaunchSpeed          DS 1
   9++A677 00           NewLaunchRotX           DS 1
  10++A678 00           NewLaunchRotZ           DS 1
  11++A679
  12++A679              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A679              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A679              ; a = y offset negative from center of ship
  15++A679 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A67C 11 5B A6                             ld      de,NewLaunchUBnKX
  17++A67F 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A682 ED B0                                ldir
  19++A684 CB 27        .ApplyOffset:           sla     a
  20++A686 CB 27                                sla     a
  21++A688 FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A68A              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A68A 5F          >                        ld      e,a
  22++A68B 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A68E 7C          >                        ld      a,h
  22++A68F             >                        ClearSignBitA
  22++A68F E6 7F       >                        and     SignMask8Bit
  22++A691 57          >                        ld      d,a
  22++A692 ED 30       >                        mul     de
  22++A694 7C          >                        ld      a,h
  22++A695             >                        SignBitOnlyA
  22++A695 E6 80       >                        and     SignOnly8Bit
  22++A697 47          >                        ld      b,a;ld      c,a
  22++A698 62          >                        ld      h,d;ld      e,d
  22++A699 0E 00       >                        ld      c,0;ld      d,0
  23++A69B 78                                   ld      a,b
  24++A69C EE 80                                xor     $80
  25++A69E 47                                   ld      b,a
  26++A69F              .AddSpeedToX:           AddSpeedToVert NewLaunchUBnKX
  26++A69F ED 5B 5C A6 >                        ld      de,(NewLaunchUBnKX+1)
  26++A6A3 3A 5B A6    >                        ld      a,(NewLaunchUBnKX)
  26++A6A6 6F          >                        ld      l,a
  26++A6A7 CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A6AA 7D          >                        ld      a,l
  26++A6AB 32 5B A6    >                        ld      (NewLaunchUBnKX),a
  26++A6AE ED 53 5C A6 >                        ld      (NewLaunchUBnKX+1),de
  27++A6B2              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A6B2 FD 5D       >                        ld      e,iyl
  27++A6B4 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A6B7 7C          >                        ld      a,h
  27++A6B8             >                        ClearSignBitA
  27++A6B8 E6 7F       >                        and     SignMask8Bit
  27++A6BA 57          >                        ld      d,a
  27++A6BB ED 30       >                        mul     de
  27++A6BD 7C          >                        ld      a,h
  27++A6BE             >                        SignBitOnlyA
  27++A6BE E6 80       >                        and     SignOnly8Bit
  27++A6C0 47          >                        ld      b,a;ld      c,a
  27++A6C1 62          >                        ld      h,d;ld      e,d
  27++A6C2 0E 00       >                        ld      c,0;ld      d,0
  28++A6C4 78                                   ld      a,b
  29++A6C5 EE 80                                xor     $80
  30++A6C7 47                                   ld      b,a
  31++A6C8              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY
  31++A6C8 ED 5B 5F A6 >                        ld      de,(NewLaunchUBnKY+1)
  31++A6CC 3A 5E A6    >                        ld      a,(NewLaunchUBnKY)
  31++A6CF 6F          >                        ld      l,a
  31++A6D0 CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A6D3 7D          >                        ld      a,l
  31++A6D4 32 5E A6    >                        ld      (NewLaunchUBnKY),a
  31++A6D7 ED 53 5F A6 >                        ld      (NewLaunchUBnKY+1),de
  32++A6DB              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A6DB FD 5D       >                        ld      e,iyl
  32++A6DD 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A6E0 7C          >                        ld      a,h
  32++A6E1             >                        ClearSignBitA
  32++A6E1 E6 7F       >                        and     SignMask8Bit
  32++A6E3 57          >                        ld      d,a
  32++A6E4 ED 30       >                        mul     de
  32++A6E6 7C          >                        ld      a,h
  32++A6E7             >                        SignBitOnlyA
  32++A6E7 E6 80       >                        and     SignOnly8Bit
  32++A6E9 47          >                        ld      b,a;ld      c,a
  32++A6EA 62          >                        ld      h,d;ld      e,d
  32++A6EB 0E 00       >                        ld      c,0;ld      d,0
  33++A6ED 78                                   ld      a,b
  34++A6EE EE 80                                xor     $80
  35++A6F0 47                                   ld      b,a
  36++A6F1              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ
  36++A6F1 ED 5B 62 A6 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A6F5 3A 61 A6    >                        ld      a,(NewLaunchUBnKZ)
  36++A6F8 6F          >                        ld      l,a
  36++A6F9 CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A6FC 7D          >                        ld      a,l
  36++A6FD 32 61 A6    >                        ld      (NewLaunchUBnKZ),a
  36++A700 ED 53 62 A6 >                        ld      (NewLaunchUBnKZ+1),de
  37++A704 C9                                   ret
  38++A705
  39++A705
  40++A705
  41++A705                                      ;DEFINE MISSILEBREAK
  42++A705              ;.. Thsi version uses new kind logic
  43++A705              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A705              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A705                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A705 CD 7F C7     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A708 3A AA C3                             ld      a,(ShipNewBitsAddr)
  48++A70B E6 01        .IsItATrader:           and     ShipIsTrader
  49++A70D 20 06                                jr      nz, .NotATrader
  50++A70F CD 3B 88     .ItsATrader:            call    doRandom
  51++A712                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A712 FE 64       >                        cp    100
  51++A714 D8          >                        ret	 c
  52++A715                                      IFDEF DEBUGFORCEHOSTILE
  53++A715 ~                                            call SetShipHostile
  54++A715 ~                                            ld      a,(ShipNewBitsAddr)
  55++A715 ~                                            or      ShipIsBountyHunter
  56++A715 ~                                            ld      (ShipNewBitsAddr),a
  57++A715                                      ENDIF
  58++A715              .NotATrader:
  59++A715 3A AA C3     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A718 E6 02                                and     ShipIsBountyHunter
  61++A71A 20 08                                jr      nz, .NotBountyHunter
  62++A71C              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A71C 3A 98 82    >                        ld      a,(FugitiveInnocentStatus)
  62++A71F FE 28       >                        cp      40
  62++A721 D4 46 C7    >                        call    nc,SetShipHostile
  63++A724              .NotBountyHunter:
  64++A724 3A AA C3     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A727 E6 04                                and     ShipIsHostile
  66++A729 20 09                                jr      nz,.ItsHostile
  67++A72B 3A AA C3     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A72E E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A730 20 01                                jr      nz,.NotDocking
  70++A732              .ItsDocking:            ;break
  71++A732                                      ;       do docking algorithm
  72++A732                                      ;       return
  73++A732 C9                                   ret
  74++A733              .NotDocking:            ;break
  75++A733                                      ;       calcuilate vector to planet
  76++A733                                      ;       move towards planet
  77++A733                                      ;       return
  78++A733 C9                                   ret
  79++A734 3A AA C3     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A737 E6 08        .IsItPirate:            and     ShipIsPirate
  81++A739 20 0E                                jr      nz,.NotAPirate
  82++A73B              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A73B 3A AA C3     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A73E F6 81                                or      Bit7Only | ShipIsTrader
  85++A740 CD 1F AA     .NotSafeZone:           call    SetPlayerAsTarget
  86++A743 CD FA A9                             call    CopyPosToVector
  87++A746 CD 80 AA                             call    NormalizeTactics
  88++A749              .NotAPirate:
  89++A749 3A 5E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  90++A74C A7                                   and     a
  91++A74D 28 0C                                jr      z,.NoFighters
  92++A74F CD 3B 88     .CanSpawnFighter:       call    doRandom
  93++A752                                      JumpIfALTNusng 200, .NoFighters
  93++A752 FE C8       >                        cp      200
  93++A754 DA 5B A7    >                        jp		c, .NoFighters
  94++A757                                      ;break
  95++A757                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  96++A757 21 5E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  97++A75A 35                                   dec     (hl)
  98++A75B                                      ;inherits parent's ai angry
  99++A75B 3A EC 80     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A75E F6 68                                or      104                             ;set a noticable roll
 101++A760 3A A1 C3     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A763 47                                   ld      b,a
 103++A764 3A 58 C0                             ld      a,(UBnKEnergy)
 104++A767 CB 38                                srl     b                               ; max energy / 2
 105++A769                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A769 B8          >                        cp     b
 105++A76A D2 8D A7    >                        jp		nc,.EnergyOverHalf
 106++A76D CB 38                                srl     b
 107++A76F                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A76F B8          >                        cp     b
 107++A770 D2 8D A7    >                        jp		nc,.EnergyOverQuater
 108++A773 3A AA C3                             ld      a,(ShipNewBitsAddr)
 109++A776 E6 80                                and     ShipHasEscapePod
 110++A778 28 13                                jr      z, .NoEscapePod
 111++A77A 3A EB 80                             ld      a,(RandomSeed2)
 112++A77D                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A77D FE E6       >                        cp      230
 112++A77F DA 8D A7    >                        jp		c, .NoEscapePod
 113++A782 3A 54 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A785 E6 7F                                and     ShipAIDisabled                  ;  .
 115++A787 32 54 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A78A                                      ;ZeroA                                   ;  .
 117++A78A 32 5A C0                             ld      (UBnKECMFitted),a               ;  .
 118++A78D              .LaunchEscapePod:       ;break
 119++A78D                                      ;            goto spawn escape pod
 120++A78D              .EnergyOverHalf:
 121++A78D              .EnergyOverQuater:
 122++A78D 3A 5C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 123++A790 47                                   ld      b,a
 124++A791                                      JumpIfAIsZero .NoMissileLaunch
 124++A791 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A792 CA A8 A7    >                        jp	    z, .NoMissileLaunch
 125++A795 3A EC 80     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A798 E6 0F                                and     15
 127++A79A                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A79A B8          >                        cp      b
 127++A79B DA A8 A7    >                        jp		c, .NoMissileLaunch
 128++A79E 3A 08 81                             ld      a,(ECMCountDown)
 129++A7A1                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A7A1 A7          >                        and     a
 129++A7A2 C2 A8 A7    >                        jp	    nz,.NoMissileLaunch
 130++A7A5 C3 0C 62                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A7A8 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 132++A7AB 2A 24 C0                             ld      hl,(UBnKyhi)
 133++A7AE B6                                   or      (hl)
 134++A7AF 2A 27 C0                             ld      hl,(UBnKzhi)
 135++A7B2 B6                                   or      (hl)
 136++A7B3                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A7B3 FE A0       >                        cp     160
 136++A7B5 D2 DC A7    >                        jp		nc,.TooFarForLaser
 137++A7B8 CD 8C A9                             call    XX12EquTacticsDotNosev
 138++A7BB 47                                   ld      b,a
 139++A7BC 3A F5 81                             ld      a,(varS)
 140++A7BF                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A7BF A7          >                        and     a
 140++A7C0 C2 DC A7    >                        jp	    nz,.TooFarForLaser
 141++A7C3 78                                   ld      a,b                            ;    .
 142++A7C4                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A7C4 FE 20       >                        cp      32
 142++A7C6 DA D7 A7    >                        jp		c, .DoneLaserShot
 143++A7C9              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A7C9 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A7CA                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A7CA FE 23       >                        cp     35
 145++A7CC CA D7 A7    >                        jp      z,.LaserHitPlayer
 146++A7CF                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A7CF FE 24       >                        cp     36
 146++A7D1 CA D7 A7    >                        jp      z,.LaserHitPlayer
 147++A7D4 C3 D7 A7     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A7D7              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A7D7 21 47 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A7DA CB 26                                sla     (hl)
 151++A7DC              .TooFarForLaser:
 152++A7DC              .UpdateShip             ;break
 153++A7DC CD 90 A1                             call    CalculateAgression              ; refresh aggression levels
 154++A7DF 3A 27 C0                             ld      a,(UBnKzhi)
 155++A7E2                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A7E2 FE 03       >                        cp     3
 155++A7E4 D2 F2 A7    >                        jp		nc,.ShipFarAway
 156++A7E7 3A 21 C0                             ld      a,(UBnKxhi)
 157++A7EA 2A 24 C0                             ld      hl,(UBnKyhi)
 158++A7ED B6                                   or      (hl)
 159++A7EE E6 FE                                and     %11111110
 160++A7F0 28 26                                jr      z,.ShipTurnAway
 161++A7F2 3A EB 80     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A7F5                                      ;or      %10000000               ; .
 163++A7F5                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 163++A7F5 21 53 C0    >                        ld      hl,UBnKShipAggression
 163++A7F8 BE          >                        cp      (hl)
 163++A7F9 D2 18 A8    >                        jp		nc,.ShipTurnAway
 164++A7FC                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A7FC 3A 88 A3    >                        ld  a,(TacticsVectorX+2)
 164++A7FF EE 80       >                        xor SignOnly8Bit
 164++A801 32 88 A3    >                        ld  (TacticsVectorX+2),a
 165++A804                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A804 3A 8C A3    >                        ld  a,(TacticsVectorY+2)
 165++A807 EE 80       >                        xor SignOnly8Bit
 165++A809 32 8C A3    >                        ld  (TacticsVectorY+2),a
 166++A80C                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A80C 3A 90 A3    >                        ld  a,(TacticsVectorZ+2)
 166++A80F EE 80       >                        xor SignOnly8Bit
 166++A811 32 90 A3    >                        ld  (TacticsVectorZ+2),a
 167++A814 CD 1C A8                             call    ShipSeekingLogic            ;    seek as per missile
 168++A817 C9                                   ret
 169++A818 CD 1C A8     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A81B                                      ;              consider a random roll
 171++A81B C9                                   ret
 172++A81C
 173++A81C CD 8C A9     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A81F 32 49 A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A822 3A F5 81                             ld      a,(varS)                            ; get sign from dot product
 176++A825 32 4D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A828 CD E2 A9     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A82B 32 4C A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A82E 3A F5 81                             ld      a,(varS)                            ; .
 180++A831 32 4D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A834 CD 3E A8                             call    ShipPitchv3
 182++A837 CD 62 A8                             call    ShipRollv3
 183++A83A CD 90 A8                             call    ShipSpeedv3
 184++A83D C9                                   ret
 185++A83E
 186++A83E 2A 4C A3     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 187++A841 7C                                   ld      a,h                                ; .
 188++A842 EE 80                                xor     $80                                ; .
 189++A844 E6 80                                and     $80                                ; .
 190++A846 67                                   ld      h,a                                ; h  = flipped sign
 191++A847 7D                                   ld      a,l                                ; a = value * 2
 192++A848 CB 27                                sla     a                                  ;
 193++A84A                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 193++A84A FE 10       >                        cp     16
 193++A84C D2 58 A8    >                        jp		nc,.skipPitchZero
 194++A84F                                      ZeroA                                      ; else we zero pitch but
 194++A84F AF          >                        xor a
 195++A850 B4                                   or      h                                  ; we need to retain the sign
 196++A851 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 197++A854                                      IFDEF MISSILEDEBUG
 198++A854 32 D9 A3                                 ld  (TacticsRotZ),a
 199++A857                                      ENDIF
 200++A857 C9                                   ret
 201++A858 3E 02        .skipPitchZero:         ld      a,2
 202++A85A B4                                   or      h
 203++A85B 32 49 C0                             ld      (UBnKRotZCounter),a
 204++A85E                                      IFDEF MISSILEDEBUG
 205++A85E 32 D9 A3                                 ld  (TacticsRotZ),a
 206++A861                                      ENDIF
 207++A861 C9                                   ret
 208++A862
 209++A862 CD E8 A9     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 210++A865 32 4F A3                             ld      (TacticsDotProduct3),a             ; .
 211++A868 6F                                   ld      l,a                                ; .
 212++A869 3A F5 81                             ld      a,(varS)                           ; .
 213++A86C 32 50 A3                             ld      (TacticsDotProduct3+1),a           ; .
 214++A86F 67                                   ld      h,a                                ; h = sign sidev
 215++A870 3A 4D A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 216++A873 47                                   ld      b,a                                ; b = roof product
 217++A874 7D                                   ld      a,l                                ; a = abs sidev  * 2
 218++A875 CB 27                                sla     a                                  ;
 219++A877                                      JumpIfAGTENusng 16,.skipRollZero           ;
 219++A877 FE 10       >                        cp     16
 219++A879 D2 85 A8    >                        jp		nc,.skipRollZero
 220++A87C                                      ZeroA                                      ; if its zoer then set rotx to zero
 220++A87C AF          >                        xor a
 221++A87D B0                                   or      b
 222++A87E 32 48 C0                             ld      (UBnKRotXCounter),a
 223++A881                                      IFDEF MISSILEDEBUG
 224++A881 32 D7 A3                                 ld  (TacticsRotX),a
 225++A884                                      ENDIF
 226++A884 C9                                   ret
 227++A885 3E 02        .skipRollZero:          ld      a,2
 228++A887 B4                                   or      h
 229++A888 A8                                   xor     b
 230++A889 32 48 C0                             ld      (UBnKRotXCounter),a
 231++A88C                                      IFDEF MISSILEDEBUG
 232++A88C 32 D7 A3                                 ld  (TacticsRotX),a
 233++A88F                                      ENDIF
 234++A88F C9                                   ret
 235++A890
 236++A890 2A 49 A3     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 237++A893 7C                                   ld      a,h
 238++A894 A7                                   and     a
 239++A895 20 13                                jr      nz,.SlowDown
 240++A897 ED 5B 4C A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 241++A89B 7D                                   ld      a,l
 242++A89C                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 242++A89C FE 16       >                        cp      22
 242++A89E DA AA A8    >                        jp		c, .SlowDown
 243++A8A1 3E 03        .Accelerate:            ld      a,3                                 ; else
 244++A8A3 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 245++A8A6                                      IFDEF MISSILEDEBUG
 246++A8A6 32 DB A3                                 ld  (TacticsSpeed),a
 247++A8A9                                      ENDIF
 248++A8A9 C9                                   ret                                         ;  .
 249++A8AA              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 249++A8AA FE 12       >                        cp      18
 249++A8AC DA B8 A8    >                        jp		c, .NoSpeedChange
 250++A8AF 3E FF        .Deccelerate:           ld      a,-1
 251++A8B1 32 47 C0                             ld      (UBnKAccel),a
 252++A8B4                                      IFDEF MISSILEDEBUG
 253++A8B4 32 DB A3                                 ld  (TacticsSpeed),a
 254++A8B7                                      ENDIF
 255++A8B7 C9                                   ret
 256++A8B8              .NoSpeedChange:         ZeroA                                       ; else no change
 256++A8B8 AF          >                        xor a
 257++A8B9 32 47 C0                             ld      (UBnKAccel),a
 258++A8BC                                      IFDEF MISSILEDEBUG
 259++A8BC 32 DB A3                                 ld  (TacticsSpeed),a
 260++A8BF                                      ENDIF
 261++A8BF C9                                   ret
 262++A8C0              ;;;ShipPitchv2:  ;break
 263++A8C0              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 264++A8C0              ;;;                        ld      a,h                                ; .
 265++A8C0              ;;;                        xor     $80                                ; .
 266++A8C0              ;;;                        and     $80                                ; .
 267++A8C0              ;;;                        ld      h,a                                ; h  = flipped sign
 268++A8C0              ;;;                        ld      a,l                                ; a = value * 2
 269++A8C0              ;;;                        sla     a                                  ;
 270++A8C0              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 271++A8C0              ;;;                        ZeroA                                      ; else we zero pitch but
 272++A8C0              ;;;                        or      h                                  ; we need to retain the sign
 273++A8C0              ;;;                        ld      (UBnKRotZCounter),a                ; .
 274++A8C0              ;;;                        IFDEF MISSILEDEBUG
 275++A8C0              ;;;                            ld  (TacticsRotZ),a
 276++A8C0              ;;;                        ENDIF
 277++A8C0              ;;;                        ret
 278++A8C0              ;;;.skipPitchZero:         ld      a,3
 279++A8C0              ;;;                        or      h
 280++A8C0              ;;;                        ld      (UBnKRotZCounter),a
 281++A8C0              ;;;                        IFDEF MISSILEDEBUG
 282++A8C0              ;;;                            ld  (TacticsRotZ),a
 283++A8C0              ;;;                        ENDIF
 284++A8C0              ;;;                        ret
 285++A8C0
 286++A8C0
 287++A8C0              ;;;ShipRollv2:             ld      a,(UBnKRotXCounter)
 288++A8C0              ;;;                        and     $7F
 289++A8C0              ;;;                        cp      16
 290++A8C0              ;;;                        ret     z
 291++A8C0              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 292++A8C0              ;;;                        ld      (TacticsDotProduct3),a             ; .
 293++A8C0              ;;;                        ld      l,a                                ; .
 294++A8C0              ;;;                        ld      a,(varS)                           ; .
 295++A8C0              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 296++A8C0              ;;;                        ld      h,a                                ; h = sign sidev
 297++A8C0              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 298++A8C0              ;;;                        ld      b,a                                ; b = roof product
 299++A8C0              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 300++A8C0              ;;;                        sla     a                                  ;
 301++A8C0              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 302++A8C0              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 303++A8C0              ;;;                        or      b
 304++A8C0              ;;;                        ld      (UBnKRotXCounter),a
 305++A8C0              ;;;                        IFDEF MISSILEDEBUG
 306++A8C0              ;;;                            ld  (TacticsRotX),a
 307++A8C0              ;;;                        ENDIF
 308++A8C0              ;;;                        ret
 309++A8C0              ;;;.skipRollZero:          ld      a,3
 310++A8C0              ;;;                        or      h
 311++A8C0              ;;;                        xor     b
 312++A8C0              ;;;                        ld      (UBnKRotXCounter),a
 313++A8C0              ;;;                        IFDEF MISSILEDEBUG
 314++A8C0              ;;;                            ld  (TacticsRotX),a
 315++A8C0              ;;;                        ENDIF
 316++A8C0              ;;;                        ret
 317++A8C0              ;;;
 318++A8C0              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 319++A8C0              ;;;                        ld      a,h
 320++A8C0              ;;;                        and     a
 321++A8C0              ;;;                        jr      nz,.SlowDown
 322++A8C0              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 323++A8C0              ;;;                        ld      a,l
 324++A8C0              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 325++A8C0              ;;;.Accelerate:            ld      a,2                                 ; else
 326++A8C0              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 327++A8C0              ;;;                        IFDEF MISSILEDEBUG
 328++A8C0              ;;;                            ld  (TacticsSpeed),a
 329++A8C0              ;;;                        ENDIF
 330++A8C0              ;;;                        ret                                         ;  .
 331++A8C0              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 332++A8C0              ;;;.Deccelerate:           ld      a,-1
 333++A8C0              ;;;                        ld      (UBnKAccel),a
 334++A8C0              ;;;                        IFDEF MISSILEDEBUG
 335++A8C0              ;;;                            ld  (TacticsSpeed),a
 336++A8C0              ;;;                        ENDIF
 337++A8C0              ;;;                        ret
 338++A8C0              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 339++A8C0              ;;;                        ld      (UBnKAccel),a
 340++A8C0              ;;;                        IFDEF MISSILEDEBUG
 341++A8C0              ;;;                            ld  (TacticsSpeed),a
 342++A8C0              ;;;                        ENDIF
 343++A8C0              ;;;                        ret
 344++A8C0              ;;;
 345++A8C0              ;;;
 346++A8C0              ;;;
 347++A8C0              ;;;RAT2 equ    4           ; roll pitch threshold
 348++A8C0              ;;;RAT  equ    3           ; magnitude of counter
 349++A8C0              ;;;CNT2 equ    22          ; angle for ship slowdown
 350++A8C0              ;;;
 351++A8C0              ;;;
 352++A8C0              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 353++A8C0              ;;;                        ld      a,h                                ; .
 354++A8C0              ;;;                        xor     $80                                ; .
 355++A8C0              ;;;                        and     $80                                ; .
 356++A8C0              ;;;                        ld      h,a                                ; h  = flipped sign
 357++A8C0              ;;;                        ld      a,l                                ; a = value * 2
 358++A8C0              ;;;                        sla     a                                  ;
 359++A8C0              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 360++A8C0              ;;;                        ZeroA                                      ; else we zero pitch but
 361++A8C0              ;;;                        or      h                                  ; we need to retain the sign
 362++A8C0              ;;;                        ld      (UBnKRotZCounter),a                ; .
 363++A8C0              ;;;                        IFDEF MISSILEDEBUG
 364++A8C0              ;;;                            ld  (TacticsRotZ),a
 365++A8C0              ;;;                        ENDIF
 366++A8C0              ;;;                        ret
 367++A8C0              ;;;.skipPitchZero:         ld      a,l
 368++A8C0              ;;;                        or      h
 369++A8C0              ;;;                        ld      (UBnKRotZCounter),a
 370++A8C0              ;;;                        IFDEF MISSILEDEBUG
 371++A8C0              ;;;                            ld  (TacticsRotZ),a
 372++A8C0              ;;;                        ENDIF
 373++A8C0              ;;;                        ret
 374++A8C0              ;;;
 375++A8C0              ;;;
 376++A8C0              ;;;                        ;
 377++A8C0              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 378++A8C0              ;;;                        ld      (TacticsDotProduct3),a             ; .
 379++A8C0              ;;;                        ld      l,a                                ; .
 380++A8C0              ;;;                        ld      a,(varS)                           ; .
 381++A8C0              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 382++A8C0              ;;;                        ld      h,a                                ; h = sign sidev
 383++A8C0              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 384++A8C0              ;;;                        ld      b,a                                ; b = roof product
 385++A8C0              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 386++A8C0              ;;;                        sla     a                                  ;
 387++A8C0              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 388++A8C0              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 389++A8C0              ;;;                        or      b
 390++A8C0              ;;;                        ld      (UBnKRotXCounter),a
 391++A8C0              ;;;                        IFDEF MISSILEDEBUG
 392++A8C0              ;;;                            ld  (TacticsRotX),a
 393++A8C0              ;;;                        ENDIF
 394++A8C0              ;;;                        ret
 395++A8C0              ;;;.skipRollZero:          ld      a,1
 396++A8C0              ;;;                        or      h
 397++A8C0              ;;;                        xor     b
 398++A8C0              ;;;                        ld      (UBnKRotXCounter),a
 399++A8C0              ;;;                        IFDEF MISSILEDEBUG
 400++A8C0              ;;;                            ld  (TacticsRotX),a
 401++A8C0              ;;;                        ENDIF
 402++A8C0              ;;;                        ret
 403++A8C0              ;;;
 404++A8C0              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 405++A8C0              ;;;                        ld      a,h
 406++A8C0              ;;;                        and     a
 407++A8C0              ;;;                        jr      nz,.SlowDown
 408++A8C0              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 409++A8C0              ;;;                        ld      a,l
 410++A8C0              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 411++A8C0              ;;;.Accelerate:            ld      a,3                                 ; else
 412++A8C0              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 413++A8C0              ;;;                        IFDEF MISSILEDEBUG
 414++A8C0              ;;;                            ld  (TacticsSpeed),a
 415++A8C0              ;;;                        ENDIF
 416++A8C0              ;;;                        ret                                         ;  .
 417++A8C0              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 418++A8C0              ;;;.Deccelerate:           ld      a,-1
 419++A8C0              ;;;                        ld      (UBnKAccel),a
 420++A8C0              ;;;                        IFDEF MISSILEDEBUG
 421++A8C0              ;;;                            ld  (TacticsSpeed),a
 422++A8C0              ;;;                        ENDIF
 423++A8C0              ;;;                        ret
 424++A8C0              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 425++A8C0              ;;;                        ld      (UBnKAccel),a
 426++A8C0              ;;;                        IFDEF MISSILEDEBUG
 427++A8C0              ;;;                            ld  (TacticsSpeed),a
 428++A8C0              ;;;                        ENDIF
 429++A8C0              ;;;                        ret
 430++A8C0
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 266+ A8C0
 267+ A8C0              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 268+ A8C0              ; on exit a == new roll
 269+ A8C0 EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 270+ A8C2 E6 80                                and     SignOnly8Bit                    ; .
 271+ A8C4 4F                                   ld      c,a                             ; . (varT in effect)
 272+ A8C5 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 273+ A8C7 3A 49 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 274+ A8CA C9                                   ret
 275+ A8CB
 276+ A8CB E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 277+ A8CD 47                                   ld      b,a                             ; .
 278+ A8CE 3A 4C A3                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 279+ A8D1                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 279+ A8D1 FE 04       >                        cp      MISSILEMAXPITCH+1
 279+ A8D3 DA E0 A8    >                        jp		c, .calcNPitch2
 280+ A8D6 78                                   ld      a,b
 281+ A8D7 E6 80                                and     SignOnly8Bit
 282+ A8D9                                      ;jr      z,.NPitchPositive
 283+ A8D9                                     ; ld      a,
 284+ A8D9 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 285+ A8DB B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 286+ A8DC 32 49 C0                             ld      (UBnKRotZCounter),a             ;    .
 287+ A8DF C9                                   ret                                     ; else (a LT current abs z)
 288+ A8E0 B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 289+ A8E1 32 49 C0                             ld      (UBnKRotZCounter),a             ;
 290+ A8E4 C9                                   ret                                     ;
 291+ A8E5
 292+ A8E5 3A 49 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 293+ A8E8 E6 80                                and     SignOnly8Bit
 294+ A8EA EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 295+ A8EC F6 05                                or      5
 296+ A8EE 32 48 C0                             ld      (UBnKRotXCounter),a
 297+ A8F1 C9                                   ret
 298+ A8F2
 299+ A8F2 4F                                   ld      c,a
 300+ A8F3 F6 03                                or      MISSILEMAXPITCH
 301+ A8F5 3A 48 C0                             ld      a,(UBnKRotXCounter)
 302+ A8F8 C9                                   ret
 303+ A8F9
 304+ A8F9
 305+ A8F9
 306+ A8F9 E6 7F                                and     SignMask8Bit                    ; get ABS value
 307+ A8FB 47                                   ld      b,a
 308+ A8FC 3A 4C A3                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 309+ A8FF                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 309+ A8FF FE 04       >                        cp      MISSILEMAXROLL+1
 309+ A901 DA 0B A9    >                        jp		c, .calcNRoll2
 310+ A904 3E 03                                ld      a,MISSILEMAXROLL
 311+ A906 B1                                   or      c
 312+ A907 32 48 C0                             ld      (UBnKRotXCounter),a
 313+ A90A C9                                   ret
 314+ A90B B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 315+ A90C 32 48 C0                             ld      (UBnKRotXCounter),a
 316+ A90F C9                                   ret
 317+ A910
 318+ A910
 319+ A910 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 320+ A913 C3 1F A9                             jp      CopyRotmatToTacticsMat
 321+ A916
 322+ A916 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 323+ A919 C3 1F A9                             jp      CopyRotmatToTacticsMat
 324+ A91C
 325+ A91C 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 326+ A91F              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 327+ A91F 11 6A A3     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 328+ A922 7E                                   ld      a,(hl)              ; matrix high byte of x
 329+ A923 47                                   ld      b,a
 330+ A924 E6 7F                                and     SignMask8Bit
 331+ A926 12                                   ld      (de),a              ; set rot mat value
 332+ A927 13                                   inc     de
 333+ A928 78                                   ld      a,b
 334+ A929 E6 80                                and     SignOnly8Bit
 335+ A92B 12                                   ld      (de),a              ; set rot mat sign
 336+ A92C 13                                   inc     de                  ; move to next rot mat element
 337+ A92D 23                                   inc     hl
 338+ A92E 23                                   inc     hl                  ; matrix high byte of y
 339+ A92F 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 340+ A930 47                                   ld      b,a
 341+ A931 E6 7F                                and     SignMask8Bit
 342+ A933 12                                   ld      (de),a              ; set rot mat value
 343+ A934 13                                   inc     de
 344+ A935 78                                   ld      a,b
 345+ A936 E6 80                                and     SignOnly8Bit
 346+ A938 12                                   ld      (de),a              ; set rot mat sign
 347+ A939 13                                   inc     de                  ; move to next rot mat element
 348+ A93A 23                                   inc     hl
 349+ A93B 23                                   inc     hl                  ; matrix high byte of z
 350+ A93C 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 351+ A93D 47                                   ld      b,a
 352+ A93E E6 7F                                and     SignMask8Bit
 353+ A940 12                                   ld      (de),a              ; set rot mat value
 354+ A941 13                                   inc     de
 355+ A942 78                                   ld      a,b
 356+ A943 E6 80                                and     SignOnly8Bit
 357+ A945 12                                   ld      (de),a              ; set rot mat sign
 358+ A946 C9                                   ret
 359+ A947
 360+ A947                                      IFDEF TACTICSDEBUG
 361+ A947              DebugTacticsCopy:
 362+ A947 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 363+ A94A ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 364+ A94E ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 365+ A952 22 A6 A3                             ld      (TacticsSideX),hl
 366+ A955 ED 53 AA A3                          ld      (TacticsSideY),de
 367+ A959 ED 43 AE A3                          ld      (TacticsSideZ),bc
 368+ A95D
 369+ A95D 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 370+ A960 ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 371+ A964 ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 372+ A968 22 B6 A3                             ld      (TacticsRoofX),hl
 373+ A96B ED 53 BA A3                          ld      (TacticsRoofY),de
 374+ A96F ED 43 BE A3                          ld      (TacticsRoofZ),bc
 375+ A973
 376+ A973 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 377+ A976 ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 378+ A97A ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 379+ A97E 22 C6 A3                             ld      (TacticsNoseX),hl
 380+ A981 ED 53 CA A3                          ld      (TacticsNoseY),de
 381+ A985 ED 43 CE A3                          ld      (TacticsNoseZ),bc
 382+ A989
 383+ A989 C9                                   ret
 384+ A98A                                      ENDIF
 385+ A98A
 386+ A98A 00 00        TacticsVarResult        DW 0
 387+ A98C CD 16 A9     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 388+ A98F 21 6A A3     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 389+ A992 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 390+ A993 5F                                   ld      e,a                                 ; .
 391+ A994 3A 86 A3                             ld      a,(TacticsVectorX)                  ; .
 392+ A997 57                                   ld      d,a                                 ; .
 393+ A998 ED 30                                mul                                         ; .
 394+ A99A 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 395+ A99B 32 F5 81                             ld      (varS),a                            ; .
 396+ A99E 23                                   inc     hl                                  ; move to sign byte
 397+ A99F 3A 88 A3     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 398+ A9A2 AE                                   xor     (hl)                                ; .
 399+ A9A3 47                                   ld      b,a                                 ; .
 400+ A9A4 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 401+ A9A5 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 402+ A9A6 5F                                   ld      e,a                                 ; .
 403+ A9A7 3A 8A A3                             ld      a,(TacticsVectorY)                  ; .
 404+ A9AA 57                                   ld      d,a                                 ; .
 405+ A9AB ED 30                                mul     de                                  ; .
 406+ A9AD 5A                                   ld      e,d                                 ; .
 407+ A9AE 16 00                                ld      d,0                                 ; .
 408+ A9B0 23                                   inc     hl                                  ; move to sign byte
 409+ A9B1 3A 8C A3     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 410+ A9B4 AE                                   xor     (hl)                                ;
 411+ A9B5 4F                                   ld      c,a                                 ;
 412+ A9B6 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 413+ A9B7 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 414+ A9B8 3A F5 81                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 415+ A9BB 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 416+ A9BD 6F                                   ld      l,a                                 ;
 417+ A9BE CD EF 92                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 418+ A9C1 47                                   ld      b,a                                 ; b = sign of result
 419+ A9C2 22 8A A9                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 420+ A9C5 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 421+ A9C6 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 422+ A9C7 5F                                   ld      e,a                                 ; .
 423+ A9C8 3A 8E A3                             ld      a,(TacticsVectorZ)                  ; .
 424+ A9CB 57                                   ld      d,a                                 ; .
 425+ A9CC ED 30                                mul     de                                  ; .
 426+ A9CE 5A                                   ld      e,d                                 ; .
 427+ A9CF 16 00                                ld      d,0                                 ; .
 428+ A9D1 23                                   inc     hl                                  ; move to sign byte
 429+ A9D2 3A 90 A3     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 430+ A9D5 AE                                   xor     (hl)
 431+ A9D6 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 432+ A9D7 2A 8A A9                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 433+ A9DA CD EF 92                             call    ADDHLDESignBC                       ; so AHL = X y z products
 434+ A9DD 32 F5 81                             ld      (varS),a                            ; for backwards compatibility
 435+ A9E0 7D                                   ld      a,l                                  ; .
 436+ A9E1 C9                                   ret
 437+ A9E2
 438+ A9E2 CD 1C A9     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 439+ A9E5 C3 8F A9                             jp      XX12EquTacticsDotHL
 440+ A9E8
 441+ A9E8 CD 10 A9     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 442+ A9EB C3 8F A9                             jp      XX12EquTacticsDotHL
 443+ A9EE
 444+ A9EE 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 445+ A9F1 11 76 A3                             ld      de,TacticsTargetX
 446+ A9F4 01 09 00                             ld      bc,9
 447+ A9F7 ED B0                                ldir
 448+ A9F9 C9                                   ret
 449+ A9FA
 450+ A9FA 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 451+ A9FD 3A 22 C0                             ld      a,(UBnKxsgn)
 452+ AA00                                      ;xor     $80
 453+ AA00 22 86 A3                             ld      (TacticsVectorX),hl
 454+ AA03 32 88 A3                             ld      (TacticsVectorX+2),a
 455+ AA06
 456+ AA06 2A 23 C0                             ld      hl,(UBnKylo)
 457+ AA09 3A 25 C0                             ld      a,(UBnKysgn)
 458+ AA0C                                      ;xor     $80
 459+ AA0C 22 8A A3                             ld      (TacticsVectorY),hl
 460+ AA0F 32 8C A3                             ld      (TacticsVectorY+2),a
 461+ AA12
 462+ AA12 2A 26 C0                             ld      hl,(UBnKzlo)
 463+ AA15 3A 28 C0                             ld      a,(UBnKzsgn)
 464+ AA18                                      ;xor     $80
 465+ AA18 22 8E A3                             ld      (TacticsVectorZ),hl
 466+ AA1B 32 90 A3                             ld      (TacticsVectorZ+2),a
 467+ AA1E C9                                   ret
 468+ AA1F
 469+ AA1F              SetPlayerAsTarget:      ZeroA
 469+ AA1F AF          >                        xor a
 470+ AA20 21 76 A3                             ld      hl,TacticsTargetX
 471+ AA23 06 09                                ld      b, 3*3
 472+ AA25 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 473+ AA26 23                                   inc     hl
 474+ AA27 10 FC                                djnz    .ZeroLoop
 475+ AA29 C9                                   ret
 476+ AA2A
 477+ AA2A CD 1F AA     CalcVectorToMyShip:     call    SetPlayerAsTarget
 478+ AA2D CD FA A9                             call    CopyPosToVector
 479+ AA30                                      ;call    CopyToTargetVector
 480+ AA30                                      ;FlipSignMem     TacticsTargetX+2
 481+ AA30                                      ;FlipSignMem     TacticsTargetY+2
 482+ AA30                                      ;FlipSignMem     TacticsTargetZ+2
 483+ AA30 C9                                   ret
 484+ AA31
 485+ AA31 ED 5B 76 A3  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 486+ AA35 3A 78 A3                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 487+ AA38                                      FlipSignBitA
 487+ AA38 EE 80       >                        xor     SignOnly8Bit
 488+ AA3A 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 489+ AA3B 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 490+ AA3E 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 491+ AA41 47                                   ld      b,a
 492+ AA42 CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 493+ AA45 22 86 A3                             ld      (TacticsVectorX),hl
 494+ AA48 32 88 A3                             ld      (TacticsVectorX+2),a
 495+ AA4B ED 5B 79 A3  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 496+ AA4F 3A 7B A3                             ld      a,(TacticsTargetY+2)
 497+ AA52                                      FlipSignBitA
 497+ AA52 EE 80       >                        xor     SignOnly8Bit
 498+ AA54 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 499+ AA55 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 500+ AA58 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 501+ AA5B 47                                   ld      b,a
 502+ AA5C CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 503+ AA5F 22 8A A3                             ld      (TacticsVectorY),hl
 504+ AA62 32 8C A3                             ld      (TacticsVectorY+2),a
 505+ AA65 ED 5B 7C A3  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 506+ AA69 3A 7E A3                             ld      a,(TacticsTargetZ+2)
 507+ AA6C                                      FlipSignBitA
 507+ AA6C EE 80       >                        xor     SignOnly8Bit
 508+ AA6E 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 509+ AA6F 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 510+ AA72 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 511+ AA75 47                                   ld      b,a
 512+ AA76 CD EF 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 513+ AA79 22 8E A3                             ld      (TacticsVectorZ),hl
 514+ AA7C 32 90 A3                             ld      (TacticsVectorZ+2),a
 515+ AA7F C9                                   ret
 516+ AA80
 517+ AA80              ;-- Now its scaled we can normalise
 518+ AA80              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 519+ AA80              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 520+ AA80 2A 86 A3     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 521+ AA83 ED 5B 8A A3                          ld      de, (TacticsVectorY)        ; .
 522+ AA87 ED 4B 8E A3                          ld      bc, (TacticsVectorZ)        ; .
 523+ AA8B 7C           .ScaleLoop:             ld      a,h
 524+ AA8C B2                                   or      d
 525+ AA8D B0                                   or      b
 526+ AA8E 28 0F                                jr      z,.DoneScaling
 527+ AA90                                      ShiftHLRight1
 527+ AA90 CB 3C       >			   srl h
 527+ AA92 CB 1D       >			   rr  l
 528+ AA94                                      ShiftDERight1
 528+ AA94 CB 3A       >			   srl d
 528+ AA96 CB 1B       >			   rr  e
 529+ AA98                                      ShiftBCRight1
 529+ AA98 CB 38       >			   srl b
 529+ AA9A CB 19       >			   rr  c
 530+ AA9C C3 8B AA                             jp      .ScaleLoop
 531+ AA9F              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 531+ AA9F CB 3C       >			   srl h
 531+ AAA1 CB 1D       >			   rr  l
 532+ AAA3                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 532+ AAA3 CB 3A       >			   srl d
 532+ AAA5 CB 1B       >			   rr  e
 533+ AAA7                                      ShiftBCRight1                       ; now values are in L E C
 533+ AAA7 CB 38       >			   srl b
 533+ AAA9 CB 19       >			   rr  c
 534+ AAAB E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 535+ AAAE 53                                   ld      d,e                         ; hl = y(e) ^ 2
 536+ AAAF ED 30                                mul     de                          ; .
 537+ AAB1 EB                                   ex      de,hl                       ; .
 538+ AAB2 53                                   ld      d,e                         ; de = x(l) ^ 2
 539+ AAB3 ED 30                                mul     de                          ; .
 540+ AAB5 19                                   add     hl,de                       ; hl = hl + de
 541+ AAB6 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 542+ AAB7 59                                   ld      e,c                         ; .
 543+ AAB8 ED 30                                mul     de                          ; .
 544+ AABA 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 545+ AABB EB                                   ex      de,hl                       ; fix as hl was holding square
 546+ AABC CD 85 96                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 547+ AABF                                      ; add in logic if h is low then use lower bytes for all
 548+ AABF 7D                                   ld      a,l                         ;
 549+ AAC0 FD 67                                ld      iyh,a                       ;
 550+ AAC2 57                                   ld      d,a                         ; D = sqrt
 551+ AAC3 C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 552+ AAC4 79                                   ld      a,c                         ; a = scaled byte
 553+ AAC5 CD A4 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 554+ AAC8 32 8E A3                             ld      (TacticsVectorZ),a          ; z = normalised z
 555+ AACB D1                                   pop     de
 556+ AACC 7B                                   ld      a,e
 557+ AACD FD 54                                ld      d,iyh
 558+ AACF CD A4 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 559+ AAD2 32 8A A3                             ld      (TacticsVectorY),a
 560+ AAD5 E1                                   pop     hl
 561+ AAD6 7D                                   ld      a,l
 562+ AAD7 FD 54                                ld      d,iyh
 563+ AAD9 CD A4 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 564+ AADC 32 86 A3                             ld      (TacticsVectorX),a
 565+ AADF                                      ; BODGE FOR NOW
 566+ AADF                                     ; BODGE FOR NOW
 567+ AADF                                      ZeroA                              ;; added to help debugging
 567+ AADF AF          >                        xor a
 568+ AAE0 32 87 A3                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 569+ AAE3 32 8B A3                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 570+ AAE6 32 8F A3                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 571+ AAE9                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 571+ AAE9 3A 88 A3    >                        ld      a, (TacticsVectorX+2)
 571+ AAEC E6 80       >                        and     SignOnly8Bit
 571+ AAEE 32 88 A3    >                        ld      (TacticsVectorX+2),a
 572+ AAF1                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 572+ AAF1 3A 8C A3    >                        ld      a, (TacticsVectorY+2)
 572+ AAF4 E6 80       >                        and     SignOnly8Bit
 572+ AAF6 32 8C A3    >                        ld      (TacticsVectorY+2),a
 573+ AAF9                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 573+ AAF9 3A 90 A3    >                        ld      a, (TacticsVectorZ+2)
 573+ AAFC E6 80       >                        and     SignOnly8Bit
 573+ AAFE 32 90 A3    >                        ld      (TacticsVectorZ+2),a
 574+ AB01 C9                                   ret
 575+ AB02
 576+ AB02
 577+ AB02              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 578+ AB02              ;;TODO                        check range
 579+ AB02              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 580+ AB02              ;;TODO                        else
 581+ AB02              ;;TODO                            normalise teh vector for direction
 582+ AB02              ;;TODO                            dot product = missile nosev . normalised vector
 583+ AB02              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 584+ AB02              ;;TODO                            negate normalised vector so its opposite product
 585+ AB02              ;;TODO                            invert sign of cnt
 586+ AB02              ;;TODO                            AK = roovf . XX15
 587+ AB02              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 588+ AB02              ;;TODO                            if pitch * 2 < 32 then
 589+ AB02              ;;TODO                                ax = sidev . xx15
 590+ AB02              ;;TODO                                    a = x xort current pitch direction
 591+ AB02              ;;TODO                                    shipts roll = nroll
 592+ AB02              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 593+ AB02
 594+ AB02              ;;TODO
 595+ AB02              ;;TODO
 596+ AB02              ;;TODO
 597+ AB02              ;;TODOget the targetted ship inbto bank
 598+ AB02              ;;TODO                        check range as per player
 599+ AB02              ;;TODO                        handle explosion enc
 600+ AB02
 601+ AB02              ;                    else see how close it is to target
 602+ AB02              ;                         if close to target
 603+ AB02              ;                            then explodes destroy missile
 604+ AB02              ;                                 if ship is not station
 605+ AB02              ;                                    then set up signal target ship hit my missile flag
 606+ AB02              ;                                         set blastcheckcounter to slotlist length  (12)
 607+ AB02              ;                                 end if
 608+ AB02              ;                                 if we are in range of missle blast
 609+ AB02              ;                                    cause blast damage to our ship (this will signal death is needed)
 610+ AB02              ;                                 end if
 611+ AB02              ;                                 return
 612+ AB02              ;                         end if
 613+ AB02              ;                 end if
 614+ AB02              ;         end if
 615+ AB02
 616+ AB02
 617+ AB02                          ;            else if ship is angry at us
 618+ AB02              ;
 619+ AB02
 620+ AB02              ; Part 1 - if type is missile and enquing a missile blast and slot free
 621+ AB02              ;             then enqueue missile blast details
 622+ AB02              ;                  mark as exploded
 623+ AB02              ;                  remove missile from universe slot list
 624+ AB02
 625+ AB02              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 626+ AB02              ; also for future ship vs ship combat
 627+ AB02              ;... Tactics........................................................................
 628+ AB02              ;.PART 1
 629+ AB02              ; if shiphitbymissleflag <> false
 630+ AB02              ;    then dec blast check counter
 631+ AB02              ;         if blast check counter = 0
 632+ AB02              ;            then set shiphitbymissileflag to FF
 633+ AB02              ;    else if SetShipHitByMissileFlag = current ship number
 634+ AB02              ;            then cause damage to ship
 635+ AB02              ;         else if ship is in range and ship is not a station
 636+ AB02              ;                  then cause blast damage to ship
 637+ AB02              ;         if destroyed
 638+ AB02              ;            then explode ship
 639+ AB02              ;                 return
 640+ AB02              ; end if
 641+ AB02              ; if ship is a missle (I think we allow missile on missle action)
 642+ AB02              ;    then if ecm is active
 643+ AB02              ;            then destroy missile and return
 644+ AB02              ;            else if ship is angry at us
 645+ AB02              ;                    then if ship is close to us
 646+ AB02              ;                            then explodes causing damage to our ship
 647+ AB02              ;                                 enque missile blast
 648+ AB02              ;                                 destroy missile
 649+ AB02              ;                                 set blastcheckcounter to slotlist length
 650+ AB02              ;                                 set shiphitbymissileflag to FE (general blast)
 651+ AB02              ;                                 return
 652+ AB02              ;                            else jump to part 3 to do updates
 653+ AB02              ;                         end if
 654+ AB02              ;                    else see how close it is to target
 655+ AB02              ;                         if close to target
 656+ AB02              ;                            then
 657+ AB02              ;                                 enque missile blast
 658+ AB02              ;                                 destroy missile
 659+ AB02              ;                                 if ship is not station
 660+ AB02              ;                                    then set up signal target ship hit my missile flag
 661+ AB02              ;                                         set blastcheckcounter to slotlist length  (12)
 662+ AB02              ;                                 end if
 663+ AB02              ;                                 if we are in range of missle blast
 664+ AB02              ;                                    cause blast damage to our ship (this will signal death is needed)
 665+ AB02              ;                                 end if
 666+ AB02              ;                                 return
 667+ AB02              ;                         end if
 668+ AB02              ;                 end if
 669+ AB02              ;         end if
 670+ AB02              ;.PART 2A ** adding in a collision logic
 671+ AB02              ;    else if ship is close to another ship
 672+ AB02              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 673+ AB02              ;                    then if aligned correctly
 674+ AB02              ;                         then remove ship as docked
 675+ AB02              ;                              return
 676+ AB02              ;         else
 677+ AB02              ;            call collision route and determine daamage based on sizes and bounce vectors
 678+ AB02              ;            return
 679+ AB02              ;.PART 2 ** Need to check if ship has AI flag
 680+ AB02              ;    else if not hostile
 681+ AB02              ;            then if not docking or station not present
 682+ AB02              ;                    then calculate vector to planet
 683+ AB02              ;                         jump to part 7
 684+ AB02              ;                    else calculate verctor to docking slot
 685+ AB02              ;                         call caluclate vector to docking slot (DOCKIT)
 686+ AB02              ;                         jump to part 7
 687+ AB02              ;                 end if
 688+ AB02              ;            else case ship type
 689+ AB02              ;                      >>escape pod>> point at planet and jump to step 7
 690+ AB02              ;                      >>space station>> if hostile
 691+ AB02              ;                                           then if cop counter < 7 and 6.2% chance
 692+ AB02              ;                                                   then spawm hostile cop
 693+ AB02              ;                                                end if
 694+ AB02              ;                                           else
 695+ AB02              ;                                                if 0.8% change and transporter count = 0
 696+ AB02              ;                                                   then if 50% chance
 697+ AB02              ;                                                           then spawn transporter
 698+ AB02              ;                                                           else spawn shuttle
 699+ AB02              ;                                                        end if
 700+ AB02              ;                                                end if
 701+ AB02              ;                                        end if
 702+ AB02              ;                                        return
 703+ AB02              ;                      >>targoid and no mother ship in slot list>> set random drift
 704+ AB02              ;                                                                  return
 705+ AB02              ;                      >>if bounty hunter flag>> if ship not hostile
 706+ AB02              ;                                                   then if trader flag clear or 20% chance
 707+ AB02              ;                                                        then if fugitive or offender
 708+ AB02              ;                                                                then set hosile
 709+ AB02              ;                                                end if
 710+ AB02              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 711+ AB02              ;                                         then spawn agressive hosting one of types carried
 712+ AB02              ;                                              reduce ships in hanger by 1
 713+ AB02              ;                                              return
 714+ AB02              ;                      >>rock hermit>> if 22% chance
 715+ AB02              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 716+ AB02              ;                                              return
 717+ AB02              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 718+ AB02              ;                 end case
 719+ AB02              ;         end if
 720+ AB02              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 721+ AB02              ; .PART 3
 722+ AB02              ;         calulcate dot product of ship nose to us
 723+ AB02              ; .PART 4
 724+ AB02              ;         2.5% change ship rill roll a noticable amount
 725+ AB02              ;         if ship has > 50% energy jump to part 6
 726+ AB02              ;         if ship > 1/8th energy jump to part 5
 727+ AB02              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 728+ AB02              ;            then launch escape pod
 729+ AB02              ;                 set AI to null
 730+ AB02              ;                 set random pitch and roll
 731+ AB02              ;                 set accelleation to 0
 732+ AB02              ;         end if
 733+ AB02              ; .PART 5
 734+ AB02              ;         if ship does not have any missilesor ECM is firing to part 6
 735+ AB02              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 736+ AB02              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 737+ AB02              ;                            then launch thargon
 738+ AB02              ;                            else spawn angry missle under ship
 739+ AB02              ;                         end if
 740+ AB02              ;                 end if
 741+ AB02              ;            else return
 742+ AB02              ;         end if
 743+ AB02              ; .PART 6
 744+ AB02              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 745+ AB02              ;            then jump to part 7
 746+ AB02              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 747+ AB02              ;                    then fire laser at us (which reduces energy)
 748+ AB02              ;                         cause laser damage to our ship (this will signal death is needed)
 749+ AB02              ;                         decellerate by half as ship has lock on
 750+ AB02              ;                         return
 751+ AB02              ;                    else fire laser into space (which reduces energy)
 752+ AB02              ;                 end if
 753+ AB02              ;         end if
 754+ AB02              ; .PART 7#
 755+ AB02              ;        if ship is a msile targetting us
 756+ AB02              ;           then ship turns towards us some more
 757+ AB02              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 758+ AB02              ;                    then do random wiht bit 7 set
 759+ AB02              ;                         if random < AI flag
 760+ AB02              ;                            then   ship turned towards us
 761+ AB02              ;                            else   ship turns away from us
 762+ AB02              ;                         end if
 763+ AB02              ;                end if
 764+ AB02              ;           end if
 765+ AB02              ;           calculate new roll, pitch and accelleration based on new targe vector
 766+ AB02
 767+ AB02
 768+ AB02              ;        determine ship direction based on agression and type
 769+ AB02              ;        set pitch and roll coutners
 770+ AB02              ;        adjust speed depleding on relationship to us
 771+ AB02              ; .PART 8 - new
 772+ AB02              ;        if ship has ECM, another ECM is not active and missile targeted at it
 773+ AB02              ;           if ship has enery of ECM energey cost + 1/8th total
 774+ AB02              ;              if chance 25%
 775+ AB02              ;                 then fire ECM
 776+ AB02              ;
 777+ AB02
 778+ AB02
 779+ AB02
 780+ AB02
 781+ AB02 2A 86 A3     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 782+ AB05 ED 5B 8A A3                      ld      de, (TacticsVectorY)        ; .
 783+ AB09 ED 4B 8E A3                      ld      bc, (TacticsVectorZ)        ; .
 784+ AB0D 3A 88 A3                         ld      a,(TacticsVectorX+2)        ; .
 785+ AB10 FD 67                            ld      iyh,a                       ; iyh = X sign
 786+ AB12 3A 8C A3                         ld      a,(TacticsVectorY+2)        ; .
 787+ AB15 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 788+ AB17 3A 90 A3                         ld      a,(TacticsVectorZ+2)        ; .
 789+ AB1A DD 67                            ld      ixh,a                       ; ixh = z sign
 790+ AB1C FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 791+ AB1E FD B5                            or      iyl                         ; .
 792+ AB20                                  ClearSignBitA                       ;  exluding sign bit
 792+ AB20 E6 7F       >                        and     SignMask8Bit
 793+ AB22 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 794+ AB24 FD 7C        .ScaledDownBy2:     ld      a,iyh
 795+ AB26 CB 2F                            sra     a
 796+ AB28 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 797+ AB2A CB 1C                            rr      h                           ; Deal with X
 798+ AB2C CB 1D                            rr      l                           ;
 799+ AB2E FD 7D                            ld      a,iyl
 800+ AB30 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 801+ AB32 FD 6F                            ld      iyl,a
 802+ AB34 CB 1A                            rr      d                           ; Deal with Y
 803+ AB36 CB 1B                            rr      e                           ;
 804+ AB38 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 805+ AB3A CB 2F                            sra     a
 806+ AB3C DD 6F                            ld      ixl,a
 807+ AB3E CB 18                            rr      b                           ; Deal with Z
 808+ AB40 CB 19                            rr      c                           ;
 809+ AB42 C3 1C AB                         jp      .ScaleLoop
 810+ AB45 7C           .DoneScaling:       ld      a,h
 811+ AB46 B2                               or      d
 812+ AB47 B0                               or      b
 813+ AB48                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 813+ AB48 E6 80       >                        and     SignOnly8Bit
 814+ AB4A 28 0C                            jr      z,.OKToNormalise
 815+ AB4C              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 815+ AB4C CB 3C       >			   srl h
 815+ AB4E CB 1D       >			   rr  l
 816+ AB50                                  ShiftDERight1                       ; to do sign bytes
 816+ AB50 CB 3A       >			   srl d
 816+ AB52 CB 1B       >			   rr  e
 817+ AB54                                  ShiftBCRight1                       ; as value must be 0
 817+ AB54 CB 38       >			   srl b
 817+ AB56 CB 19       >			   rr  c
 818+ AB58 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 819+ AB59 FD B4                            or      iyh                         ; so by the end of here
 820+ AB5B 67                               ld      h,a                         ;   hl = x
 821+ AB5C 7A                               ld      a,d                         ;   de = y
 822+ AB5D FD B5                            or      iyl                         ;   bc = z
 823+ AB5F 57                               ld      d,a                         ; all scaled to 15 bit + sign
 824+ AB60 78                               ld      a,b                         ;
 825+ AB61 DD B4                            or      ixh                         ;
 826+ AB63 47                               ld      b,a                         ;
 827+ AB64 22 96 A3                         ld      (TacticsNormX),hl
 828+ AB67 22 9A A3                         ld      (TacticsNormY),hl
 829+ AB6A 22 9E A3                         ld      (TacticsNormZ),hl
 830+ AB6D C9                               ret
 831+ AB6E                                 ; ***SIgn bits*** need to be in byte 3
 832+ AB6E
# file closed: ./GameEngine/Tactics.asm
 638  AB6E                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ AB6E              M_GETSETDRV             equ $89
   2+ AB6E              F_OPEN                  equ $9a
   3+ AB6E              F_CLOSE                 equ $9b
   4+ AB6E              F_READ                  equ $9d
   5+ AB6E              F_WRITE                 equ $9e
   6+ AB6E              F_SEEK                  equ $9f
   7+ AB6E
   8+ AB6E              FA_READ                 equ $01
   9+ AB6E              FA_APPEND               equ $06
  10+ AB6E              FA_OVERWRITE            equ $0C
  11+ AB6E              DISK_FILEMAP            equ $85
  12+ AB6E              DISK_STRMSTART          equ $86
  13+ AB6E              DISK_STRMEND            equ $87
  14+ AB6E
  15+ AB6E              ESX_MODE_READ           equ $01
  16+ AB6E              ESX_MODE_OPEN_EXIST     equ $00
  17+ AB6E
  18+ AB6E              FILEMAP_SIZE            equ $20
  19+ AB6E              FILEMAP_BLOCK_SIZE      equ $06
  20+ AB6E
  21+ AB6E              ; Success 1 = default drive, carry reset
  22+ AB6E              ; Failure HL = -1 , carry set, errno set
  23+ AB6E F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ AB72 DD E5
  24+ AB74 AF                                   xor	    a	; a = 0 means get default drive into A
  25+ AB75 CF                                   rst	    $08
  26+ AB76 89                                   db	    M_GETSETDRV
  27+ AB77 32 0C AC                             ld	    (DefaultDrive),a
  28+ AB7A DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ AB7E C1 F1
  29+ AB80 C9                                   ret
  30+ AB81
  31+ AB81
  32+ AB81              ; Disable NMI Multi face - needed for streaming
  33+ AB81              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ AB81              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ AB81              ;                        out     (c),a
  36+ AB81              ;                        inc     b
  37+ AB81              ;                        in      a,(c)
  38+ AB81              ;                        and     %11110111
  39+ AB81              ;                        out     (c),a
  40+ AB81              ;                        ret
  41+ AB81              ;
  42+ AB81              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ AB81              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ AB81              ;                        out     (c),a
  45+ AB81              ;                        inc     b
  46+ AB81              ;                        in      a,(c)
  47+ AB81              ;                        or      %00001000
  48+ AB81              ;                        out     (c),a
  49+ AB81              ;                        ret
  50+ AB81              ;
  51+ AB81              ; *******************************************************************************************************
  52+ AB81              ;	Function:	Open a file read for reading/writing
  53+ AB81              ;	In:		ix = filename
  54+ AB81              ;			b  = Open filemode
  55+ AB81              ;	ret		a  = handle, 0 on error
  56+ AB81              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ AB81              ; *******************************************************************************************************
  58+ AB81              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ AB81              ;                        call    GetDefaultDrive
  60+ AB81              ;                        call    fOpen
  61+ AB81              ;                        call    fRefill_map
  62+ AB81              ;                        jp      c,.RefilMapError
  63+ AB81              ;                        jp      z,.RefilMapEmpty
  64+ AB81              ;                        ret
  65+ AB81              ;.RefilMapError:         jp      .RefilMapError
  66+ AB81              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ AB81              ;
  68+ AB81              ;
  69+ AB81
  70+ AB81 3A 0C AC     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ AB84 CF                                   rst	    $08
  72+ AB85 9A                                   db	    F_OPEN
  73+ AB86 32 0D AC                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ AB89 38 01                                jr      c,.FileOpenError
  75+ AB8B C9                                   ret
  76+ AB8C C3 8C AB     .FileOpenError:         jp      .FileOpenError
  77+ AB8F
  78+ AB8F              ; *******************************************************************************************************
  79+ AB8F              ;	Function	refills the buffer map with card addresses for the file
  80+ AB8F              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ AB8F              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ AB8F              ;           de = filemap size (which should equal 4 in our case)
  83+ AB8F              ;			bc  = amount to read
  84+ AB8F              ;	ret:		carry set = error
  85+ AB8F              ;               zero set  = no data loaded so still error
  86+ AB8F              ;   you can use fRefill_map to pull default valuess
  87+ AB8F              ; *******************************************************************************************************
  88+ AB8F              ;fRefill_map:            ld      a,(FileHandle)
  89+ AB8F              ;                        ld      ix,FilemapBuffer
  90+ AB8F              ;                        ld      de,FILEMAP_SIZE
  91+ AB8F              ;fRefill_mapA:           rst     $08
  92+ AB8F              ;                        db      DISK_FILEMAP
  93+ AB8F              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ AB8F              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ AB8F              ;                        ld      de,FilemapBuffer
  96+ AB8F              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ AB8F              ;                        ld      a,$ff
  98+ AB8F              ;                        ret
  99+ AB8F              ;
 100+ AB8F              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ AB8F              ;                        ldBCDEatHL                              ; load the disk address
 102+ AB8F              ;                        push    bc                              ; into IXDE
 103+ AB8F              ;                        pop     ix                              ; now IXDE = card address
 104+ AB8F              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ AB8F              ;                        ld      (FilemapBlockCount),bc
 106+ AB8F              ;                        ret
 107+ AB8F              ; Start up stream of data
 108+ AB8F              ; If successful, the call returns with:
 109+ AB8F              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ AB8F              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ AB8F              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ AB8F              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ AB8F              ;                        ZeroA
 114+ AB8F              ;                        ld      (FilereadsPerformed),a
 115+ AB8F              ;                        call    read_stream_block
 116+ AB8F              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ AB8F              ;                        rst     $08
 118+ AB8F              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ AB8F              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ AB8F              ;                        ret
 121+ AB8F
 122+ AB8F              ; *******************************************************************************************************
 123+ AB8F              ;	Function	stream in a block of data to memory
 124+ AB8F              ;	In:		ix  = address to read into
 125+ AB8F              ;			bc  = amount to read
 126+ AB8F              ;	ret:		carry set = error
 127+ AB8F              ; *******************************************************************************************************
 128+ AB8F              ;fStream_block:          ld      ix,FileBuffer
 129+ AB8F              ;                        ld      a,(CardFlags)
 130+ AB8F              ;                        ld      bc,(FileStreamPort)
 131+ AB8F              ;                        ld      hl,FileBuffer
 132+ AB8F              ;                        ld      (FilemapBufferPointer),hl
 133+ AB8F              ;.StreamLoop:            ld      b,0
 134+ AB8F              ;                        ld      a,(TargetSize+1)
 135+ AB8F              ;                        cp      2
 136+ AB8F              ;                        jr      c,.stream_partial_block
 137+ AB8F              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ AB8F              ;                        inir                                ; read 256 bytes to hl+256
 139+ AB8F              ;                        dec     b                           ; update byte count
 140+ AB8F              ;                        dec     b                           ; .
 141+ AB8F              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ AB8F              ;                        ld      de,512
 143+ AB8F              ;                        ClearCarryFlag
 144+ AB8F              ;                        sbc     hl,de
 145+ AB8F              ;                        ld      (TargetSize),hl
 146+ AB8F              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ AB8F              ;                        and     a
 148+ AB8F              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ AB8F              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ AB8F              ;                        nop                                 ; as the max performance of the interface is
 151+ AB8F              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ AB8F              ;                        in      a,(c)
 153+ AB8F              ;                        nop
 154+ AB8F              ;                        nop
 155+ AB8F              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ AB8F              ;                        cp      $FF
 157+ AB8F              ;                        jr      z,.wait_for_next_block
 158+ AB8F              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ AB8F              ;                        jr      nz,.token_error
 160+ AB8F              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ AB8F              ;                        ld      a,d
 162+ AB8F              ;                        or      e
 163+ AB8F              ;                        jr      z,.streaming_complete
 164+ AB8F              ;                        ret
 165+ AB8F              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ AB8F              ;                        jr      z,.under256_bytes
 167+ AB8F              ;                        inir                                ; get 256 bytes
 168+ AB8F              ;.under256_bytes:        ld      b,e
 169+ AB8F              ;                        inc     b
 170+ AB8F              ;                        dec     b
 171+ AB8F              ;                        jr      z,.streaming_complete
 172+ AB8F              ;                        inir
 173+ AB8F              ;.streaming_complete:    ld      a,(CardFlags)
 174+ AB8F              ;                        rst     $08
 175+ AB8F              ;                        DB      DISK_STRMEND
 176+ AB8F              ;                        ld      a,(FileHandle)
 177+ AB8F              ;                        call    fClose
 178+ AB8F              ;                        ret
 179+ AB8F              ;.token_error:           jp      .token_error
 180+ AB8F              ;
 181+ AB8F              ;
 182+ AB8F              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ AB8F              ;                        call    disable_multiface
 184+ AB8F              ;                        call    fOpen_read_exists
 185+ AB8F              ;.SetupStream:           call    fStream_start
 186+ AB8F              ;                        jr      c,.FileStreamError
 187+ AB8F              ;                        ret
 188+ AB8F              ;
 189+ AB8F              ;.FileStreamError:       jp      .FileStreamError
 190+ AB8F              ;
 191+ AB8F              ; *******************************************************************************************************
 192+ AB8F              ;	Function	Read bytes from the open file
 193+ AB8F              ;	In:		ix  = address to read into
 194+ AB8F              ;			bc  = amount to read
 195+ AB8F              ;	ret:		carry set = error
 196+ AB8F              ; *******************************************************************************************************
 197+ AB8F B7           fRead:                  or   	a             ; is it zero?
 198+ AB90 C8                                   ret  	z             ; if so return
 199+ AB91 E5                                   push    hl
 200+ AB92 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ AB95 CF                                   rst	    $08
 202+ AB96 9D                                   db	    F_READ
 203+ AB97 E1                                   pop	    hl
 204+ AB98 C9                                   ret
 205+ AB99
 206+ AB99              ; *******************************************************************************************************
 207+ AB99              ;	Function	Write bytes to the open file
 208+ AB99              ;	In:		ix  = address to read from
 209+ AB99              ;			bc  = amount to write
 210+ AB99              ;	ret:		carry set = error
 211+ AB99              ; *******************************************************************************************************
 212+ AB99 B7           fWrite:                 or   	a             ; is it zero?
 213+ AB9A C8                                   ret  	z             ; if so return
 214+ AB9B E5                                   push	hl
 215+ AB9C DD E5 E1                             ld      hl,ix
 216+ AB9F CF                                   rst	    $08
 217+ ABA0 9E                                   db	    F_WRITE
 218+ ABA1 E1                                   pop	    hl
 219+ ABA2 C9                                   ret
 220+ ABA3
 221+ ABA3              ; *******************************************************************************************************
 222+ ABA3              ;	Function:	Close open file
 223+ ABA3              ;	In:		a  = handle
 224+ ABA3              ;	ret		a  = handle, 0 on error
 225+ ABA3              ; *******************************************************************************************************
 226+ ABA3 B7           fClose:		            or   	a             ; is it zero?
 227+ ABA4 C8                                   ret  	z             ; if so return
 228+ ABA5 CF                                   rst	    $08
 229+ ABA6 9B                                   db	    F_CLOSE
 230+ ABA7 C9                                   ret
 231+ ABA8
 232+ ABA8              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ ABA8              ;                        ld      bc,0
 234+ ABA8              ;                        ld      de,0
 235+ ABA8              ;                        ld      l,0
 236+ ABA8              ;                        call    fSeek
 237+ ABA8              ;                        pop     bc,,de,,hl,,ix
 238+ ABA8              ;                        ret
 239+ ABA8              ;
 240+ ABA8              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ ABA8              ;                        ld      bc,0
 242+ ABA8              ;                        ld      de,256
 243+ ABA8              ;                        ld      l,1
 244+ ABA8              ;                        call    fSeek
 245+ ABA8              ;                        pop     bc,,de,,hl,,ix
 246+ ABA8              ;                        ret
 247+ ABA8
 248+ ABA8              ; *******************************************************************************************************
 249+ ABA8              ;	Function	Read bytes from the open file
 250+ ABA8              ;	In:		a   = file handle
 251+ ABA8              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ ABA8              ;			BCDE = bytes to seek
 253+ ABA8              ;	ret:		BCDE = file pos from start
 254+ ABA8              ; *******************************************************************************************************
 255+ ABA8 DD E5 E5     fSeek:                  push	ix,,hl
 256+ ABAB CF                                   rst	    $08
 257+ ABAC 9F                                   db	    F_SEEK
 258+ ABAD E1 DD E1                             pop	    ix,,hl
 259+ ABB0 C9                                   ret
 260+ ABB1
 261+ ABB1              ; *******************************************************************************************************
 262+ ABB1              ; Init the file system
 263+ ABB1              ; *******************************************************************************************************
 264+ ABB1 CD 6E AB     InitFileSystem:         call    GetDefaultDrive
 265+ ABB4 C9                                   ret
 266+ ABB5
 267+ ABB5              ; *******************************************************************************************************
 268+ ABB5              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ ABB5              ; In:		hl = file data pointer
 270+ ABB5              ;		    ix = address to load to
 271+ ABB5              ;           bc = filelength
 272+ ABB5              ; *******************************************************************************************************
 273+ ABB5 CD 6E AB     FileLoad:	            call    GetDefaultDrive
 274+ ABB8 C5 D5 F5                             push	bc,,de,,af
 275+ ABBB                                      ; get file size
 276+ ABBB C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ ABBE E5 DD E1                             ld      ix,hl
 278+ ABC1 06 01                                ld      b,FA_READ		; mode open for reading
 279+ ABC3 CD 81 AB                             call    fOpen
 280+ ABC6 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ ABC8 FE 00                                cp	    0				; was file handle 0?
 282+ ABCA 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ ABCC DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ ABCF F5                                   push	af				; remember handle
 285+ ABD0 CD 8F AB                             call	fRead			; read data from A to address IX of length BC
 286+ ABD3 38 0C                                jr	    c,.error_reading
 287+ ABD5 F1                                   pop	    af			    ; get handle back
 288+ ABD6 CD A3 AB                             call	fClose			; close file
 289+ ABD9 38 07                                jr	    c,.error_closing
 290+ ABDB F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ ABDE C9                                   ret
 292+ ABDF              ;
 293+ ABDF              ; On error, display error code an lock up so we can see it
 294+ ABDF              ;
 295+ ABDF DD E1        .error_opening:         pop	ix
 296+ ABE1 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ ABE2
 298+ ABE2              .error_closing:
 299+ ABE2 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ ABE3 D1                                   pop	de
 301+ ABE4 C1                                   pop	bc
 302+ ABE5 C9                                   ret
 303+ ABE6
 304+ ABE6              ; *******************************************************************************************************
 305+ ABE6              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ ABE6              ; In:		hl = file name
 307+ ABE6              ;		    ix = address to save from
 308+ ABE6              ;		    bc = size
 309+ ABE6              ; *******************************************************************************************************
 310+ ABE6 CD 6E AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ ABE9 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ ABEC E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ ABEF 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ ABF1 CD 81 AB                             call    fOpen
 315+ ABF4 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ ABF6 FE 00                                cp	    0			        ; was file handle 0?
 317+ ABF8 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ ABFA DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ ABFD F5                                   push	af			        ; remember handle
 320+ ABFE CD 99 AB                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AC01 38 04                                jr	c,.error
 322+ AC03 F1                                   pop	af			            ; get handle back
 323+ AC04 CD A3 AB                             call	fClose			    ; close file
 324+ AC07 C9           .error:                 ret
 325+ AC08              ;
 326+ AC08              ; On error, display error code an lock up so we can see it
 327+ AC08              ;
 328+ AC08 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AC0B C9                                   ret
 330+ AC0C
 331+ AC0C 00           DefaultDrive:	        DB	0
 332+ AC0D 00           FileHandle:             DB  0
 333+ AC0E 00           CardFlags               DB  0
 334+ AC0F 00 00        TargetSize              DW  0
 335+ AC11 00 00        FileStreamPort          DW  0
 336+ AC13 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ AE13 00           FilereadsPerformed      DB  0
 338+ AE14 00 00        FilemapBlockCount       DW  0
 339+ AE16 00 00        FilemapBufferPointer    DW  0
 340+ AE18 00 00        FilemapBufferLast       DW  0
 341+ AE1A 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ AEDA
# file closed: ./Hardware/drive_access.asm
 639  AEDA
 640  AEDA                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AEDA 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AEDE 41 4E 44 45
   1+ AEE2 52 00
   2+ AEE4 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AEE8 4E 54 4F 52
   2+ AEEC 59 00
   3+ AEEE 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AEF2 65 6E 74 20
   3+ AEF6 53 79 73 74
   3+ AEFA 65 6D 20 20
   3+ AEFE 20 3A 00
   4+ AF01 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AF05 72 73 70 61
   4+ AF09 63 65 20 53
   4+ AF0D 79 73 74 65
   4+ AF11 6D 3A 00
   5+ AF14 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AF18 69 74 69 6F
   5+ AF1C 6E 20 20 20
   5+ AF20 3A 00
   6+ AF22 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AF26 20 20 20 20
   6+ AF2A 20 20 20 20
   6+ AF2E 3A 00
   7+ AF30 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AF34 20 20 20 20
   7+ AF38 20 20 20 20
   7+ AF3C 3A 00
   8+ AF3E 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AF42 6C 20 53 74
   8+ AF46 61 74 75 73
   8+ AF4A 3A 00
   9+ AF4C 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AF50 6E 67 20 20
   9+ AF54 20 20 20 20
   9+ AF58 3A 00
  10+ AF5A 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AF5E 50 4D 45 4E
  10+ AF62 54 3A 00
  11+ AF65
  12+ AF65 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AF69 20 4C 69 67
  12+ AF6D 68 74 20 59
  12+ AF71 65 61 72 73
  12+ AF75 00
  13+ AF76 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AF7A 58 58 58 58
  13+ AF7E 58 58 00
  14+ AF81 2E           txt_cash_decimal        DB "."
  15+ AF82 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AF86 00
  16+ AF87
  17+ AF87              txt_status_colour		equ $FF
  18+ AF87
  19+ AF87              ;;DEFUNCTprint_boiler_text_l2:
  20+ AF87              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ AF87              ;;DEFUNCTBoilerTextLoop:
  22+ AF87              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ AF87              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ AF87              ;;DEFUNCT	inc			hl
  25+ AF87              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ AF87              ;;DEFUNCT	inc			hl
  27+ AF87              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ AF87              ;;DEFUNCT	inc			hl
  29+ AF87              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ AF87              ;;DEFUNCT	inc			hl
  31+ AF87              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AF87              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ AF87              ;;DEFUNCT	ld			e,txt_status_colour
  34+ AF87              ;;DEFUNCT    MMUSelectLayer2
  35+ AF87              ;;DEFUNCT	call		l1_print_at
  36+ AF87              ;;DEFUNCT	pop			hl
  37+ AF87              ;;DEFUNCT	pop			bc
  38+ AF87              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ AF87              ;;DEFUNCT	ret
  40+ AF87
  41+ AF87
  42+ AF87              ;:DEFUNCT print_boiler_text:
  43+ AF87              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ AF87              ;:DEFUNCT .BoilerTextLoop:
  45+ AF87              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ AF87              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ AF87              ;:DEFUNCT 	inc			hl
  48+ AF87              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ AF87              ;:DEFUNCT 	inc			hl
  50+ AF87              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ AF87              ;:DEFUNCT 	inc			hl
  52+ AF87              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ AF87              ;:DEFUNCT 	inc			hl
  54+ AF87              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AF87              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ AF87              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ AF87              ;:DEFUNCT 	push		bc
  58+ AF87              ;:DEFUNCT 	pop			de
  59+ AF87              ;:DEFUNCT 	call		l1_print_at
  60+ AF87              ;:DEFUNCT 	pop			hl
  61+ AF87              ;:DEFUNCT 	pop			bc
  62+ AF87              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ AF87              ;:DEFUNCT 	ret
  64+ AF87
  65+ AF87              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ AF87
  67+ AF87              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ AF87              ;;DEFUNCT                        ex      de,hl
  69+ AF87              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ AF87              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ AF87              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AF87              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AF87              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ AF87              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AF87              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AF87              ;;DEFUNCT                        cp		0
  77+ AF87              ;;DEFUNCT                        ret		z
  78+ AF87              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AF87              ;;DEFUNCT                        ret
  80+ AF87
# file closed: ./Menus/common_menu.asm
 641  AF87                  DISPLAY "Main Non Banked Code Ends at ",$
 642  AF87
 643  AF87                  org $B000
 644  B000                  DISPLAY "Vector Table Starts at ",$
 645  B000              VectorTable:
 646  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 646  B004 B1 B1 B1 B1
 646  B008 B1 B1 B1 B1
 646  B00C B1 B1 B1 B1
 646  B010 B1 B1 B1 B1
 646  B014 B1 B1 B1 B1
 646  B018 B1 B1 B1 B1
 646  B01C B1 B1 B1 B1
 647  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 647  B024 B1 B1 B1 B1
 647  B028 B1 B1 B1 B1
 647  B02C B1 B1 B1 B1
 647  B030 B1 B1 B1 B1
 647  B034 B1 B1 B1 B1
 647  B038 B1 B1 B1 B1
 647  B03C B1 B1 B1 B1
 648  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 648  B044 B1 B1 B1 B1
 648  B048 B1 B1 B1 B1
 648  B04C B1 B1 B1 B1
 648  B050 B1 B1 B1 B1
 648  B054 B1 B1 B1 B1
 648  B058 B1 B1 B1 B1
 648  B05C B1 B1 B1 B1
 649  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 649  B064 B1 B1 B1 B1
 649  B068 B1 B1 B1 B1
 649  B06C B1 B1 B1 B1
 649  B070 B1 B1 B1 B1
 649  B074 B1 B1 B1 B1
 649  B078 B1 B1 B1 B1
 649  B07C B1 B1 B1 B1
 650  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 650  B084 B1 B1 B1 B1
 650  B088 B1 B1 B1 B1
 650  B08C B1 B1 B1 B1
 650  B090 B1 B1 B1 B1
 650  B094 B1 B1 B1 B1
 650  B098 B1 B1 B1 B1
 650  B09C B1 B1 B1 B1
 651  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 651  B0A4 B1 B1 B1 B1
 651  B0A8 B1 B1 B1 B1
 651  B0AC B1 B1 B1 B1
 651  B0B0 B1 B1 B1 B1
 651  B0B4 B1 B1 B1 B1
 651  B0B8 B1 B1 B1 B1
 651  B0BC B1 B1 B1 B1
 652  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 652  B0C4 B1 B1 B1 B1
 652  B0C8 B1 B1 B1 B1
 652  B0CC B1 B1 B1 B1
 652  B0D0 B1 B1 B1 B1
 652  B0D4 B1 B1 B1 B1
 652  B0D8 B1 B1 B1 B1
 652  B0DC B1 B1 B1 B1
 653  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 653  B0E4 B1 B1 B1 B1
 653  B0E8 B1 B1 B1 B1
 653  B0EC B1 B1 B1 B1
 653  B0F0 B1 B1 B1 B1
 653  B0F4 B1 B1 B1 B1
 653  B0F8 B1 B1 B1 B1
 653  B0FC B1 B1 B1 B1
 654  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
 655  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
 656  B104
 657  B104 60 00        IR_COUNT        dw  $0060
 658  B106
 659  B106 00           LAST_DELTA      db  0
 660  B107 00           SavedMMU6       db  0
 661  B108 00           SavedMMU7       db  0
 662  B109              SoundInterrupt      EQU IM2Sound
 663  B109              DanubeInterrupt     EQU IM2PlayDanube
 664  B109              AttractInterrrupt   EQU IM2AttractMode
 665  B109
 666  B109
 667  B109              StartOfInterruptHandler:
 668  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
 669  B109
 670  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
 671  B109                              org $B1B1
 672  B1B1                  DISPLAY "Interrupt Handler Starts at",$
 673  B1B1              ; keeping the handler to a minimal size in order to make best use of
 674  B1B1              ; non pageable memory
 675  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
 676  B1B1 ~                                            ei
 677  B1B1 ~                                            reti
 678  B1B1                                      ENDIF
 679  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
 679  B1B5 DD E5 FD E5
 680  B1B9 08                                   ex      af,af'
 681  B1BA D9                                   exx
 682  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
 683  B1BF 21 F1 81                             ld      hl,InterruptCounter
 684  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
 685  B1C3                                      ;break
 686  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
 687  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
 688  B1CA 08                                   ex      af,af'
 689  B1CB D9                                   exx
 690  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
 690  B1D0 E1 D1 C1 F1
 691  B1D4 FB           .IMFinishup:            ei
 692  B1D5 ED 4D                                reti
 693  B1D7                  DISPLAY "Interrupt Handler Ends at",$
 694  B1D7              EndOfNonBanked:
 695  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
 696  B1D7
 697  B1D7
 698  B1D7              SaveMMU6:               MACRO
 699  B1D7 ~                                    GetNextReg  MMU_SLOT_6_REGISTER
 700  B1D7 ~                                    ld      (SavedMMU6),a
 701  B1D7                                      ENDM
 702  B1D7
 703  B1D7              RestoreMMU6:            MACRO
 704  B1D7 ~                                    ld      a,(SavedMMU6)               ; now restore up post interrupt
 705  B1D7 ~                                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 706  B1D7                                      ENDM
 707  B1D7
 708  B1D7              SaveMMU7:               MACRO
 709  B1D7 ~                                    GetNextReg  MMU_SLOT_7_REGISTER
 710  B1D7 ~                                    ld      (SavedMMU7),a
 711  B1D7                                      ENDM
 712  B1D7
 713  B1D7              RestoreMMU7:            MACRO
 714  B1D7 ~                                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 715  B1D7 ~                                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 716  B1D7                                      ENDM
 717  B1D7
 718  B1D7              IM2Sound:               SaveMMU7
 718  B1D7             >                        GetNextReg  MMU_SLOT_7_REGISTER
 718  B1D7 01 3B 24    >            ld bc,$243B
 718  B1DA 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 718  B1DC ED 79       >            out (c),a
 718  B1DE 04          >            inc b
 718  B1DF ED 78       >            in a,(c)
 718  B1E1 32 08 B1    >                        ld      (SavedMMU7),a
 719  B1E4                                      MMUSelectSound
 719  B1E4 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 720  B1E8                                      ; This is a self modifying code address to change the
 721  B1E8                                      ; actual sound vector if we are doing special music
 722  B1E8                                      ; e.g. intro or docking
 723  B1E8 CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
 724  B1EB              .DoneInterrupt:         RestoreMMU7
 724  B1EB 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 724  B1EE ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 725  B1F1 C9                                   ret
 726  B1F2
 727  B1F2
 728  B1F2              IM2PlayDanube:          SaveMMU7
 728  B1F2             >                        GetNextReg  MMU_SLOT_7_REGISTER
 728  B1F2 01 3B 24    >            ld bc,$243B
 728  B1F5 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 728  B1F7 ED 79       >            out (c),a
 728  B1F9 04          >            inc b
 728  B1FA ED 78       >            in a,(c)
 728  B1FC 32 08 B1    >                        ld      (SavedMMU7),a
 729  B1FF                                      MMUSelectSound
 729  B1FF ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 730  B203                                      ; This is a self modifying code address to change the
 731  B203                                      ; actual sound vector if we are doing special music
 732  B203                                      ; e.g. intro or docking
 733  B203 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
 734  B206              .DoneInterrupt:         RestoreMMU7
 734  B206 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 734  B209 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 735  B20C C9                                   ret
 736  B20D
 737  B20D CD F2 B1     IM2AttractMode:         call    IM2PlayDanube
 738  B210                                      SaveMMU6
 738  B210             >                        GetNextReg  MMU_SLOT_6_REGISTER
 738  B210 01 3B 24    >            ld bc,$243B
 738  B213 3E 56       >            ld a,MMU_SLOT_6_REGISTER
 738  B215 ED 79       >            out (c),a
 738  B217 04          >            inc b
 738  B218 ED 78       >            in a,(c)
 738  B21A 32 07 B1    >                        ld      (SavedMMU6),a
 739  B21D CD DF 77                             call    AttractModeUpdate
 740  B220                                      RestoreMMU6
 740  B220 3A 07 B1    >                        ld      a,(SavedMMU6)               ; now restore up post interrupt
 740  B223 ED 92 56    >                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 741  B226 C9                                   ret
 742  B227
 743  B227              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 744  B227              ;INCLUDE "./title_page.asm"
 745  B227
 746  B227              ; Blocks dependent on variables in Universe Banks
 747  B227              ; Bank 49
 748  B227              ;    SEG RESETUNIVSEG
 749  B227              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 750  B227              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 751  B227
 752  B227
 753  B227
 754  B227              ;	ORG ResetUniverseAddr
 755  B227              ;INCLUDE "./GameEngine/resetUniverse.asm"
 756  B227              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 757  B227                  SLOT    MenuShrChtAddr
 758  B227                  PAGE    BankMenuShrCht
 759  B227              	ORG     MenuShrChtAddr,BankMenuShrCht
 760  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 E1 91  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C0C3 4E                                   ld			c,(hl)		; Get Row into b
   5++C0C4 23                                   inc			hl
   6++C0C5 46                                   ld			b,(hl)		; Get Col into b
   7++C0C6 23                                   inc			hl
   8++C0C7 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C0C8 23                                   inc			hl
  10++C0C9 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C0CA 23                                   inc			hl
  12++C0CB E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C0CC EB                                   ex			de,hl		; now hl = address of text data
  14++C0CD 1E FF                                ld			e,txt_status_colour
  15++C0CF C5                                   push		bc
  16++C0D0 D1                                   pop			de
  17++C0D1                                      MMUSelectLayer1
  17++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0D5 CD C8 E0                             call		l1_print_at
  19++C0D8 E1                                   pop			hl
  20++C0D9 C1                                   pop			bc
  21++C0DA 10 E6                                djnz		.BoilerTextLoop
  22++C0DC C9                                   ret
  23++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 89 82                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 04 88                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 26 ED                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 8B 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B 89 82                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 76 82     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  58+ C113 ED 4B 8B 82                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 AD 92                             ld		hl,name_expanded
  65+ C127 CD 02 92                             call	CapitaliseString
  66+ C12A 21 AD 92                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 8B 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B 89 82                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 83 E4                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 76 82     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 124+ C193 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD BD E3                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD BD E3                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 76 82     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 89 82                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 8B 82                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A AB 82                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 02 9B                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD B6 99                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD B6 99                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD B6 99                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD C1 88     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 76 82                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 AD 92                             ld		hl,name_expanded
 258+ C2C2 CD 02 92                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 AD 92                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 AD 92                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD BD E3                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 BC 81                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD C1 88     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 76 82     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 AD 92     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 02 92                             call	CapitaliseString
 333+ C34C 21 AD 92     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD BD E3                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 F8 81                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 03 7D                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 76 82                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 5F 82                             ld      de,SystemSeed
 359+ C388 CD 94 88                             call    copy_seed
 360+ C38B 3A 60 82                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 8A 82     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 62 82     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 89 82                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 60 82     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 8A 82                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 62 82                             ld		a,(SystemSeed+3)
 390+ C3C5 21 89 82                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 64 82                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 9A EF                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A F8 81                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 F8 81                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 0A E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD 0E E2    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 00 82                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A 89 82    >                        ld      hl,(PresentSystemX)
 420+ C421 22 8B 82    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD F8 E3                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD 83 E4                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD 28 92                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 8E 88     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A CD 83     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D                                      ReturnIfAIsZero
 442+ C45D A7          >                        and     a
 442+ C45E C8          >                        ret     z
 443+ C45F 17                                   rla
 444+ C460 DC 78 C4                             call   c,src_UpPressed
 445+ C463 17                                   rla
 446+ C464 DC 95 C4                             call   c,src_DownPressed
 447+ C467 17                                   rla
 448+ C468 DC B4 C4                             call   c,src_LeftPressed
 449+ C46B 17                                   rla
 450+ C46C DC D1 C4                             call   c,src_RightPressed
 451+ C46F 17                                   rla
 452+ C470 DC F0 C4                             call   c,src_HomePressed
 453+ C473 17                                   rla
 454+ C474 DC FA C4                             call   c,src_RecenterPressed
 455+ C477 C9                                   ret
 456+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 457+ C478 3A 8C 82     src_UpPressed:          ld     a,(TargetSystemY)
 458+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 458+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 458+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 459+ C47F 47                                   ld      b,a                         ; save target as we will need it
 460+ C480 3A 8A 82                             ld      a,(PresentSystemY)
 461+ C483 90                                   sub     b                           ; get the difference between present and target
 462+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 463+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 463+ C487 FE 28       >                        cp     40
 463+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 464+ C48C 78           .SkipBoundsTest:        ld      a,b
 465+ C48D 3D                                   dec     a
 466+ C48E 32 8C 82                             ld      (TargetSystemY),a
 467+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 468+ C494 C9                                   ret
 469+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 470+ C495 3A 8A 82     src_DownPressed:        ld     a,(PresentSystemY)
 471+ C498 47                                   ld      b,a
 472+ C499 3A 8C 82                             ld      a,(TargetSystemY)
 473+ C49C 4F                                   ld      c,a
 474+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 474+ C49D FE 80       >                        cp     128
 474+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 475+ C4A2 90                                   sub     b
 476+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 477+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 477+ C4A6 FE 28       >                        cp     40
 477+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 478+ C4AB 79           .SkipBoundsTest:        ld      a,c
 479+ C4AC 3C                                   inc    a
 480+ C4AD 32 8C 82                             ld      (TargetSystemY),a
 481+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 482+ C4B3 C9                                   ret
 483+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ C4B4 3A 8B 82     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 485+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 485+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 485+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 486+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 487+ C4BC 3A 89 82                             ld      a,(PresentSystemX)
 488+ C4BF 90                                   sub     b                           ; get the difference between present and target
 489+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 490+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 490+ C4C3 FE 14       >                        cp     20
 490+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 491+ C4C8 78           .SkipBoundsTest:        ld      a,b
 492+ C4C9 3D                                   dec     a
 493+ C4CA 32 8B 82                             ld      (TargetSystemX),a
 494+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 495+ C4D0 C9                                   ret
 496+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 497+ C4D1 3A 89 82     src_RightPressed:       ld      a,(PresentSystemX)
 498+ C4D4 47                                   ld      b,a
 499+ C4D5 3A 8B 82                             ld      a,(TargetSystemX)
 500+ C4D8 4F                                   ld      c,a
 501+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 501+ C4D9 FE FF       >                        cp     255
 501+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 502+ C4DE 90                                   sub     b
 503+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 504+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 504+ C4E2 FE 14       >                        cp     20
 504+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 505+ C4E7 79           .SkipBoundsTest:        ld      a,c
 506+ C4E8 3C                                   inc    a
 507+ C4E9 32 8B 82                             ld      (TargetSystemX),a
 508+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 509+ C4EF C9                                   ret
 510+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 511+ C4F0 2A 89 82     src_HomePressed:        ld      hl,(PresentSystemX)
 512+ C4F3 22 8B 82                             ld      (TargetSystemX),hl
 513+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4F9 C9                                   ret
 515+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4FA 3A 76 82     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 517+ C4FD                                      MMUSelectGalaxyA
 517+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 518+ C500 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 519+ C504 CD 70 FB                             call    find_nearest_to_bc
 520+ C507 ED 43 8B 82                          ld      (TargetSystemX),bc
 521+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 522+ C50E C9                                   ret
 523+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 524+ C50F AF           src_BoundsLimit:        xor     a
 525+ C510 C9                                   ret
 526+ C511
# file closed: ./Menus/short_range_chart_menu.asm
 761  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 762  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 763  C511                  SLOT    MenuGalChtAddr
 764  C511                  PAGE    BankMenuGalCht
 765  C511              	ORG     MenuGalChtAddr
 766  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 E1 91  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C08F 4E                                   ld			c,(hl)		; Get Row into b
   5++C090 23                                   inc			hl
   6++C091 46                                   ld			b,(hl)		; Get Col into b
   7++C092 23                                   inc			hl
   8++C093 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C094 23                                   inc			hl
  10++C095 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C096 23                                   inc			hl
  12++C097 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C098 EB                                   ex			de,hl		; now hl = address of text data
  14++C099 1E FF                                ld			e,txt_status_colour
  15++C09B C5                                   push		bc
  16++C09C D1                                   pop			de
  17++C09D                                      MMUSelectLayer1
  17++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0A1 CD C8 E0                             call		l1_print_at
  19++C0A4 E1                                   pop			hl
  20++C0A5 C1                                   pop			bc
  21++C0A6 10 E6                                djnz		.BoilerTextLoop
  22++C0A8 C9                                   ret
  23++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 89 82  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 04 88     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD 26 ED     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B 8B 82  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 F8 81                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 76 82     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 5F 82                             ld      de,SystemSeed
  68+ C0F5 CD 94 88                             call    copy_seed
  69+ C0F8 3A 62 82                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A 60 82                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD B5 E2                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 63 82                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD B5 E2                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A F8 81                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 F8 81                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 0A E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD 0E E2    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 00 82                                 ld      (MenuIdMax),a
 105+ C16D 2A 89 82                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4B C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD F8 E3                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD 83 E4                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD 28 92                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 76 82                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C1A7 ED 4B 8B 82                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A 89 82    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 8B 82    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B 8B 82                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 76 82     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A3 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 CC 83    >                        ld      (TextInputMode),a
 140+ C1D8 C9                                       ret
 141+ C1D9
 142+ C1D9              gcDelayVal                  equ $0A
 143+ C1D9              gcBlinkVal                  equ $10
 144+ C1D9
 145+ C1D9
 146+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 147+ C1DA 20           gcCursorChar                DB  " "
 148+ C1DB 00           gcEndOfString               DB  0
 149+ C1DC 00 00 00...  gcInputText                 DS  31
 150+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 150+ C1FF 00
 151+ C200 00 00 00...  gcBlank                     DS  32
 152+ C220
 153+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 154+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 155+ C223 21 3C C0                             ld      hl,galactic_find_message
 156+ C226                                      MMUSelectLayer1
 156+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 157+ C22A CD C8 E0                             call	l1_print_at
 158+ C22D C9                                   ret
 159+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 161+ C231 CD 88 7F                             call    keyboard_copy_input_to_de
 162+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 163+ C237 ED A0                                ldi                             ; Copy cursor to local
 164+ C239 3A 85 7F                             ld      a,(InputCursor)
 165+ C23C 3C                                   inc     a
 166+ C23D 47                                   ld      b,a
 167+ C23E 3E 14                                ld      a,20
 168+ C240 90                                   sub     b
 169+ C241 47                                   ld      b,a
 170+ C242 3E 20                                ld      a," "
 171+ C244 12           .SpacePad:              ld      (de),a
 172+ C245 13                                   inc     de
 173+ C246 10 FC                                djnz    .SpacePad
 174+ C248 AF                                   xor     a
 175+ C249 12                                   ld      (de),a
 176+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 177+ C24D 21 DC C1                             ld      hl,gcInputText
 178+ C250                                      MMUSelectLayer1
 178+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C254 CD C8 E0                             call	l1_print_at
 180+ C257 C9                                   ret
 181+ C258
 182+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 183+ C25B 3D                                   dec     a
 184+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 185+ C25F C0                                   ret     nz
 186+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 187+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 188+ C265 3A DA C1                             ld      a,(gcCursorChar)
 189+ C268 FE 20                                cp      " "
 190+ C26A 28 06                                jr      z,.ChangeToStar
 191+ C26C 3E 20                                ld      a," "
 192+ C26E 32 DA C1                             ld      (gcCursorChar),a
 193+ C271 C9                                   ret
 194+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 195+ C274 32 DA C1                             ld      (gcCursorChar),a
 196+ C277 C9                                   ret
 197+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ C278              ; The main loop handles the find key
 199+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 199+ C278 3A CC 83    >                        ld      a,(TextInputMode)
 199+ C27B A7          >                        and     a
 199+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 200+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 201+ C281 CD EF 7E                             call    is_key_pressed
 202+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 203+ C285 CD 9B 7F                             call    initInputText                           ;Initialise find input
 204+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 204+ C288 AF          >                        xor     a
 204+ C289 32 CC 83    >                        ld      (TextInputMode),a
 205+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 205+ C28C 3E 10       >                        ld      a,gcBlinkVal
 205+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 206+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 207+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 208+ C295              ;Already in input mode post pressing find
 209+ C295 CD B3 7F     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 210+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 210+ C298 3A 87 7F    >                        ld      a,(InputChanged)
 210+ C29B A7          >                        and     a
 210+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 211+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 211+ C29F 3A 86 7F    >                        ld      a,(EnterPressed)
 211+ C2A2 A7          >                        and     a
 211+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 212+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 213+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 214+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 214+ C2AC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 214+ C2AF FE 10       >                        cp      gcBlinkVal
 214+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 215+ C2B4 C9                                   ret
 216+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 216+ C2B5 3E FF       >                        ld      a,$FF
 216+ C2B7 32 86 7F    >                        ld      (EnterPressed),a
 217+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 217+ C2BA 3E FF       >                        ld      a,$FF
 217+ C2BC 32 CC 83    >                        ld      (TextInputMode),a
 218+ C2BF 3A 76 82                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 219+ C2C2                                      MMUSelectGalaxyA
 219+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 220+ C2C5 21 66 7F                             ld      hl,InputString
 221+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 222+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 223+ C2CE CD 39 FB                             call    find_system_by_name
 224+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 225+ C2D3 28 1D                                jr      z,.FindNoMatch
 226+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 227+ C2D8 4F                                   ld      c,a
 228+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 229+ C2DC 47                                   ld      b,a
 230+ C2DD ED 43 8B 82                          ld      (TargetSystemX),bc
 231+ C2E1 CD 84 C3                             call    UpdateGalacticCursor
 232+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 233+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 234+ C2EA                                      MMUSelectLayer1
 234+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 235+ C2EE CD C8 E0                             call	l1_print_at
 236+ C2F1 C9                                   ret
 237+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 238+ C2F2                                      ; move curor if found
 239+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 240+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 241+ C2F8                                      MMUSelectLayer1
 241+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C2FC CD C8 E0                             call	l1_print_at
 243+ C2FF C9                                   ret; DOSTUFFHERE
 244+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 245+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 245+ C300 3A CC 83    >                        ld      a,(TextInputMode)
 245+ C303 A7          >                        and     a
 245+ C304 C8          >                        ret     z
 246+ C305 3A CD 83                             ld      a,(CursorKeysPressed)
 247+ C308                                      ReturnIfAIsZero
 247+ C308 A7          >                        and     a
 247+ C309 C8          >                        ret     z
 248+ C30A 17                                   rla
 249+ C30B DC 23 C3                             call   c,gc_UpPressed
 250+ C30E 17                                   rla
 251+ C30F DC 33 C3                             call   c,gc_DownPressed
 252+ C312 17                                   rla
 253+ C313 DC 43 C3                             call   c,gc_LeftPressed
 254+ C316 17                                   rla
 255+ C317 DC 53 C3                             call   c,gc_RightPressed
 256+ C31A 17                                   rla
 257+ C31B DC 63 C3                             call   c,gc_HomePressed
 258+ C31E 17                                   rla
 259+ C31F DC 6D C3                             call   c,gc_RecenterPressed
 260+ C322 C9                                   ret
 261+ C323              ;----------------------------------------------------------------------------------------------------------------------------------
 262+ C323 3A 8C 82     gc_UpPressed:           ld     a,(TargetSystemX+1)
 263+ C326                                      JumpIfAEqNusng 1,gc_BoundsLimit
 263+ C326 FE 01       >                        cp     1
 263+ C328 CA 82 C3    >                        jp      z,gc_BoundsLimit
 264+ C32B 3D                                   dec     a
 265+ C32C 32 8C 82                             ld      (TargetSystemX+1),a
 266+ C32F CD 84 C3                             call    UpdateGalacticCursor
 267+ C332 C9                                   ret
 268+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 269+ C333 3A 8C 82     gc_DownPressed:         ld     a,(TargetSystemX+1)
 270+ C336                                      JumpIfAEqNusng 255,gc_BoundsLimit
 270+ C336 FE FF       >                        cp     255
 270+ C338 CA 82 C3    >                        jp      z,gc_BoundsLimit
 271+ C33B 3C                                   inc    a
 272+ C33C 32 8C 82                             ld      (TargetSystemX+1),a
 273+ C33F CD 84 C3                             call    UpdateGalacticCursor
 274+ C342 C9                                   ret
 275+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C343 3A 8B 82     gc_LeftPressed:         ld     a,(TargetSystemX)
 277+ C346                                      JumpIfAEqNusng 2,gc_BoundsLimit
 277+ C346 FE 02       >                        cp     2
 277+ C348 CA 82 C3    >                        jp      z,gc_BoundsLimit
 278+ C34B 3D                                   dec    a
 279+ C34C 32 8B 82                             ld      (TargetSystemX),a
 280+ C34F CD 84 C3                             call    UpdateGalacticCursor
 281+ C352 C9                                   ret
 282+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 283+ C353 3A 8B 82     gc_RightPressed:        ld     a,(TargetSystemX)
 284+ C356                                      JumpIfAEqNusng 253,gc_BoundsLimit
 284+ C356 FE FD       >                        cp     253
 284+ C358 CA 82 C3    >                        jp      z,gc_BoundsLimit
 285+ C35B 3C                                   inc    a
 286+ C35C 32 8B 82                             ld      (TargetSystemX),a
 287+ C35F CD 84 C3                             call    UpdateGalacticCursor
 288+ C362 C9                                   ret
 289+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 290+ C363 2A 89 82     gc_HomePressed:         ld      hl,(PresentSystemX)
 291+ C366 22 8B 82                             ld      (TargetSystemX),hl
 292+ C369 CD 84 C3                             call    UpdateGalacticCursor
 293+ C36C C9                                   ret
 294+ C36D              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C36D 3A 76 82     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 296+ C370                                      MMUSelectGalaxyA
 296+ C370 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 297+ C373 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 298+ C377 CD 70 FB                             call    find_nearest_to_bc
 299+ C37A ED 43 8B 82                          ld      (TargetSystemX),bc
 300+ C37E CD 84 C3                             call    UpdateGalacticCursor
 301+ C381 C9                                   ret
 302+ C382              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C382 AF           gc_BoundsLimit          xor     a
 304+ C383 C9                                   ret
 305+ C384
 306+ C384              ;----------------------------------------------------------------------------------------------------------------------------------
 307+ C384 ED 4B 8B 82  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 308+ C388              OnGalacticChart:        MMUSelectSpriteBank
 308+ C388 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 309+ C38C CD A9 E0                             call	sprite_ghc_move
 310+ C38F 3A 76 82                             ld      a,(Galaxy)
 311+ C392                                      MMUSelectGalaxyA
 311+ C392 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 312+ C395 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 313+ C399 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 314+ C39D CD 64 FC                             call    galaxy_system_under_cursor
 315+ C3A0 FE 00                                cp      0
 316+ C3A2 C8                                   ret     z
 317+ C3A3              ; just fall into gc_name_if_possible
 318+ C3A3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 319+ C3A6 CD D1 C3                             call    gc_clear_name_area
 320+ C3A9 21 AD 92                             ld		hl,name_expanded
 321+ C3AC CD 02 92                             call	CapitaliseString
 322+ C3AF 21 AD 92                             ld		hl, name_expanded
 323+ C3B2 01 0A A0                             ld      bc,$A00A
 324+ C3B5 1E FF                                ld		e,$FF
 325+ C3B7                                      MMUSelectLayer2
 325+ C3B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ C3BB CD BD E3                             call	l2_print_7at
 327+ C3BE CD EB C3                             call    gc_calc_distance
 328+ C3C1 21 14 C0                             ld      hl,galactic_chart_distance
 329+ C3C4 01 0A A8                             ld      bc,$A80A
 330+ C3C7 1E FF                                ld		e,$FF
 331+ C3C9                                      MMUSelectLayer2
 331+ C3C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ C3CD CD BD E3                             call	l2_print_7at
 333+ C3D0 C9                                   ret
 334+ C3D1              ;----------------------------------------------------------------------------------------------------------------------------------
 335+ C3D1 26 08        gc_clear_name_area:     ld      h,8
 336+ C3D3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 337+ C3D6 01 0A A0                             ld      bc,$A00A
 338+ C3D9 E5           .ClearLoop:             push    hl
 339+ C3DA D5                                   push    de
 340+ C3DB C5                                   push    bc
 341+ C3DC                                      MMUSelectLayer2
 341+ C3DC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C3E0 CD 83 E4                             call	l2_draw_horz_line
 343+ C3E3 C1                                   pop     bc
 344+ C3E4 D1                                   pop     de
 345+ C3E5 E1                                   pop     hl
 346+ C3E6 04                                   inc     b
 347+ C3E7 25                                   dec     h
 348+ C3E8 20 EF                                jr      nz,.ClearLoop
 349+ C3EA C9                                   ret
 350+ C3EB              ;----------------------------------------------------------------------------------------------------------------------------------
 351+ C3EB 3A 76 82     gc_calc_distance:       ld      a,(Galaxy)
 352+ C3EE                                      MMUSelectGalaxyA
 352+ C3EE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 353+ C3F1 11 1E C0                             ld      de,galactic_chart_dist_amount
 354+ C3F4 21 30 C0                             ld      hl,galactic_default_dist
 355+ C3F7 ED A0                                ldi
 356+ C3F9 ED A0                                ldi
 357+ C3FB ED A0                                ldi
 358+ C3FD ED A0                                ldi
 359+ C3FF ED A0                                ldi
 360+ C401 ED 4B 89 82                          ld      bc,(PresentSystemX)
 361+ C405 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 362+ C409 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 363+ C40D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 364+ C411 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 365+ C414 DD 2A AB 82                          ld      ix,(Distance)
 366+ C418 11 00 00                             ld      de,0
 367+ C41B FD 21 36 C0                          ld      iy,galactic_distance
 368+ C41F CD 02 9B                             call    DispDEIXtoIY
 369+ C422 FD E5                                push    iy
 370+ C424 E1                                   pop     hl
 371+ C425 11 36 C0                             ld      de,galactic_distance
 372+ C428 7E                                   ld		a,(hl)				;Push last digit to post decimal
 373+ C429 32 22 C0                             ld		(galactic_chart_fraction),a
 374+ C42C 2B                                   dec     hl
 375+ C42D CD B6 99                             call    compare16HLDE
 376+ C430 38 18                                jr      c,.done_number
 377+ C432 7E                                   ld      a,(hl)
 378+ C433 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 379+ C436 2B                                   dec     hl
 380+ C437 CD B6 99                             call    compare16HLDE
 381+ C43A 38 0E                                jr      c,.done_number
 382+ C43C 7E                                   ld      a,(hl)
 383+ C43D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 384+ C440 2B                                   dec     hl
 385+ C441 CD B6 99                             call    compare16HLDE
 386+ C444 38 04                                jr      c,.done_number
 387+ C446 7E                                   ld      a,(hl)
 388+ C447 32 1E C0                             ld      (galactic_chart_dist_amount),a
 389+ C44A C9           .done_number:           ret
 390+ C44B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C44B AF           gc_present_system:      xor     a
 392+ C44C 32 F8 81                             ld		(XSAV),a
 393+ C44F DD 21 16 E0                          ld      ix,galaxy_data
 394+ C453 3A 76 82     GCCounterLoop:          ld      a,(Galaxy)
 395+ C456                                      MMUSelectGalaxyA
 395+ C456 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 396+ C459 2A 89 82                             ld      hl,(PresentSystemX)
 397+ C45C DD E5                                push    ix
 398+ C45E 7D                                   ld      a,l
 399+ C45F DD BE 03                             cp      (ix+3)                          ; seed x
 400+ C462 20 14                                jr      nz,.ItsNotThisX
 401+ C464 7C                                   ld      a,h
 402+ C465 DD BE 01                             cp      (ix+1)                          ; seed x
 403+ C468 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 404+ C46A DD E5                                push    ix
 405+ C46C E1                                   pop     hl
 406+ C46D 11 7D 82                             ld      de,PresentSystemSeeds
 407+ C470 CD 94 88                             call    copy_seed
 408+ C473 3E FF                                ld      a,$FF
 409+ C475 DD E1                                pop     ix
 410+ C477 C9                                   ret
 411+ C478 E1           .ItsNotThisX:           pop     hl
 412+ C479 ED 34 08 00                          add     hl,8
 413+ C47D E5                                   push    hl
 414+ C47E DD E1                                pop     ix
 415+ C480 3A F8 81                             ld		a,(XSAV)
 416+ C483 3D                                   dec		a
 417+ C484 32 F8 81                             ld      (XSAV),a
 418+ C487 FE 00                                cp		0
 419+ C489 C8                                   ret		z
 420+ C48A 18 C7                                jr		GCCounterLoop
 421+ C48C
# file closed: ./Menus//galactic_chart_menu.asm
 767  C48C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 768  C48C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 769  C48C                  SLOT    MenuInventAddr
 770  C48C                  PAGE    BankMenuInvent
 771  C48C              	ORG     MenuInventAddr
 772  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C071 4E                                   ld			c,(hl)		; Get Row into b
   5++C072 23                                   inc			hl
   6++C073 46                                   ld			b,(hl)		; Get Col into b
   7++C074 23                                   inc			hl
   8++C075 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C076 23                                   inc			hl
  10++C077 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C078 23                                   inc			hl
  12++C079 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C07A EB                                   ex			de,hl		; now hl = address of text data
  14++C07B 1E FF                                ld			e,txt_status_colour
  15++C07D C5                                   push		bc
  16++C07E D1                                   pop			de
  17++C07F                                      MMUSelectLayer1
  17++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C083 CD C8 E0                             call		l1_print_at
  19++C086 E1                                   pop			hl
  20++C087 C1                                   pop			bc
  21++C088 10 E6                                djnz		.BoilerTextLoop
  22++C08A C9                                   ret
  23++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 04 88     	ld		a,(Fuel)
   4++C136 11 65 AF     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 07 88                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 88 8B                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 2D 90                             ld		hl, WordIdx
 118+ C17A CD 88 8B                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 88 8B                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 2D 90                             ld		hl,WordIdx
 148+ C1C1 CD 88 8B                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 02 88     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 00 88                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 0A E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 0E E2    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 00 82                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F8 E3                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 83 E4                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 65 AF                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 5D E3                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 5D E3                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 773  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 774  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 775  C281                  SLOT    MenuSystemAddr
 776  C281                  PAGE    BankMenuSystem
 777  C281              	ORG     MenuSystemAddr
 778  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 E1 91  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 AD 92  						DW $0280,name_expanded
   5+ C018 08 0B 3F 8D  						DW $0B08,WordDistance
   6+ C01C 08 13 48 8D  						DW $1308,WordEconomy
   7+ C020 08 1B 50 8D  						DW $1B08,WordGovernment
   8+ C024 08 23 5B 8D  						DW $2308,WordTechLevel
   9+ C028 08 2B 65 8D  						DW $2B08,WordPopulation
  10+ C02C 08 3B 80 8D  						DW $3B08,WordGross
  11+ C030 38 3B 86 8D  						DW $3B38,WordProductivity
  12+ C034 08 43 93 8D  						DW $4308,WordAverage
  13+ C038 48 43 9B 8D  						DW $4348,WordRadius
  14+ C03C 60 0B E1 91  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 E1 91  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 76 82     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B 89 82                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C2C6 4E                                   ld			c,(hl)		; Get Row into b
   5++C2C7 23                                   inc			hl
   6++C2C8 46                                   ld			b,(hl)		; Get Col into b
   7++C2C9 23                                   inc			hl
   8++C2CA 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C2CB 23                                   inc			hl
  10++C2CC 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C2CD 23                                   inc			hl
  12++C2CE E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C2CF EB                                   ex			de,hl		; now hl = address of text data
  14++C2D0 1E FF                                ld			e,txt_status_colour
  15++C2D2 C5                                   push		bc
  16++C2D3 D1                                   pop			de
  17++C2D4                                      MMUSelectLayer1
  17++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C2D8 CD C8 E0                             call		l1_print_at
  19++C2DB E1                                   pop			hl
  20++C2DC C1                                   pop			bc
  21++C2DD 10 E6                                djnz		.BoilerTextLoop
  22++C2DF C9                                   ret
  23++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 0A E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 0E E2    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 00 82                             ld		(MenuIdMax),a
 134+ C316 3A 76 82     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B 8B 82  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 89 82  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 8B 82  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 89 82                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 77 82     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F8 E3                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 83 E4                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 28 92                             call	expandTokenToString
 170+ C37B 3A 76 82     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 AD 92                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 AD 92                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A AB 82  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD F3 9A                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 28 92                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 28 92                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 1A 92                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD F3 9A                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 76 82     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 02 9B                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 76 82     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 02 9B                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 76 82     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 779  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 780  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 781  C4F7                  SLOT    MenuMarketAddr
 782  C4F7                  PAGE    BankMenuMarket
 783  C4F7                  ORG     MenuMarketAddr
 784  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 E1 91  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 AD 92  						DW $0220,name_expanded
   4+ C018 80 0B 2F 8C  						DW $0B80,WordUnit
   5+ C01C B0 0B 78 8E  						DW $0BB0,WordQuantity
   6+ C020 08 13 56 8E  						DW $1308,WordProduct
   7+ C024 60 13 5E 8E  						DW $1360,WordUoM
   8+ C028 80 13 62 8E  						DW $1380,WordPrice
   9+ C02C B0 13 86 8E  						DW $13B0,WordStock
  10+ C030 E0 13 82 8E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C214 4E                                   ld			c,(hl)		; Get Row into b
   5++C215 23                                   inc			hl
   6++C216 46                                   ld			b,(hl)		; Get Col into b
   7++C217 23                                   inc			hl
   8++C218 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C219 23                                   inc			hl
  10++C21A 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C21B 23                                   inc			hl
  12++C21C E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C21D EB                                   ex			de,hl		; now hl = address of text data
  14++C21E 1E FF                                ld			e,txt_status_colour
  15++C220 C5                                   push		bc
  16++C221 D1                                   pop			de
  17++C222                                      MMUSelectLayer1
  17++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C226 CD C8 E0                             call		l1_print_at
  19++C229 E1                                   pop			hl
  20++C22A C1                                   pop			bc
  21++C22B 10 E6                                djnz		.BoilerTextLoop
  22++C22D C9                                   ret
  23++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 02 88     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 00 88                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 06 88                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 07 88                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 2D 90                             ld		hl,WordIdx
 273+ C2C5 CD 88 8B                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 2D 90                             ld		hl,WordIdx
 281+ C2DF CD 88 8B                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 0A E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD 0E E2    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 00 82                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F8 E3                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 83 E4                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 83 E4                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 83 E4                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 83 E4                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 83 E4                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 83 E4                             call	l2_draw_horz_line
 340+ C3AA 3A 76 82     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 28 92                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD EF 7E                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD EF 7E                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD EF 7E                             call    is_key_pressed
 384+ C40F CC 46 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD EF 7E                             call    is_key_pressed
 387+ C417 CC 89 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD CA 7E                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 00                                jr      z,.ItsOK
 404+ C435 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 405+ C438 FE 10                                cp      16
 406+ C43A C8                                   ret     z
 407+ C43B CD C3 C0                             call    mkt_lowlight_row
 408+ C43E 21 74 C0                             ld      hl,mkt_selected_row
 409+ C441 34                                   inc     (hl)
 410+ C442 CD B3 C0                             call    mkt_highlight_row
 411+ C445 C9                                   ret
 412+ C446              ;----------------------------------------------------------------------------------------------------------------------------------
 413+ C446 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 414+ C449 21 07 88                             ld      hl,CargoTonnes
 415+ C44C ED 31                                add     hl,a
 416+ C44E 7E                                   ld      a,(hl)
 417+ C44F FE 00                                cp      0
 418+ C451 C8                                   ret     z
 419+ C452 35                                   dec     (hl)
 420+ C453 DD 21 00 E0                          ld      ix,StockFood
 421+ C457 3A 74 C0                             ld      a,(mkt_selected_row)
 422+ C45A 16 08                                ld      d,8
 423+ C45C 5F                                   ld      e,a
 424+ C45D ED 30                                mul
 425+ C45F DD 19                                add     ix,de
 426+ C461                                      MMUSelectStockTable
 426+ C461 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 427+ C465 DD 34 01                             inc     (ix+1)
 428+ C468 DD 7E 07                             ld      a,(ix+7)
 429+ C46B FE 30                                cp      48
 430+ C46D 20 04                                jr      nz,.UnderATonne
 431+ C46F 21 06 88                             ld      hl,CargoRunningLoad
 432+ C472 35                                   dec     (hl)            ; We need to cosider UoM
 433+ C473 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 434+ C476 16 00                                ld      d,0
 435+ C478 5F                                   ld      e,a
 436+ C479 CD 22 94                             call    addDEtoCash
 437+ C47C                                      ; DO ADD CASH
 438+ C47C 3A 74 C0                             ld      a,(mkt_selected_row)
 439+ C47F CD 8B C2                             call    PrintMarketItem
 440+ C482 CD 69 C2                             call    MKT_DisplayCargo
 441+ C485 CD 7A C2                             call    MKT_DisplayCash
 442+ C488 C9                                   ret
 443+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ C489              mkt_RightPressed:       MMUSelectStockTable
 444+ C489 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 445+ C48D DD 21 00 E0                          ld      ix,StockFood
 446+ C491 3A 74 C0                             ld      a,(mkt_selected_row)
 447+ C494 16 08                                ld      d,8
 448+ C496 5F                                   ld      e,a
 449+ C497 ED 30                                mul
 450+ C499 DD 19                                add     ix,de
 451+ C49B 4F                                   ld      c,a
 452+ C49C DD 7E 01                             ld      a,(ix+1)
 453+ C49F FE 00                                cp      0
 454+ C4A1 C8                                   ret     z
 455+ C4A2 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 456+ C4A5 FE 30                                cp      48
 457+ C4A7 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 458+ C4A9 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 459+ C4AC 21 07 88                             ld      hl,CargoTonnes
 460+ C4AF ED 31                                add     hl,a
 461+ C4B1 7E                                   ld      a,(hl)
 462+ C4B2 FE C8                                cp      200
 463+ C4B4 C8                                   ret     z                                   ; else its a 200 UoM limit
 464+ C4B5 C3 BE C4                             jp      .CheckCash
 465+ C4B8 2A 05 88     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 466+ C4BB 7C                                   ld      a,h
 467+ C4BC BD                                   cp      l
 468+ C4BD C8                                   ret     z                                   ; return if we have already maxed out
 469+ C4BE 2A 02 88     .CheckCash:             ld      hl,(Cash+2)
 470+ C4C1 7C                                   ld      a,h
 471+ C4C2 B5                                   or      l
 472+ C4C3 20 0F                                jr      nz,.MoreThanRequired
 473+ C4C5 2A 00 88                             ld      hl,(Cash)
 474+ C4C8 7C                                   ld      a,h
 475+ C4C9 FE 00                                cp      0
 476+ C4CB 20 07                                jr      nz,.MoreThanRequired
 477+ C4CD DD 7E 02                             ld      a,(ix+2)
 478+ C4D0 BD                                   cp      l
 479+ C4D1 30 01                                jr      nc,.MoreThanRequired
 480+ C4D3 C9                                   ret                         ; Insufficient Funds
 481+ C4D4 19           .MoreThanRequired:      add     hl,de
 482+ C4D5 7C                                   ld      a,h
 483+ C4D6 B3                                   or      e
 484+ C4D7                                      ; check cash can we buy, and cargo capacity
 485+ C4D7 DD 35 01                             dec     (ix+1)
 486+ C4DA 3A 74 C0                             ld      a,(mkt_selected_row)
 487+ C4DD 21 07 88                             ld      hl,CargoTonnes
 488+ C4E0 ED 31                                add     hl,a
 489+ C4E2 34                                   inc     (hl)
 490+ C4E3 DD 7E 07                             ld      a,(ix+7)
 491+ C4E6 47                                   ld      b,a
 492+ C4E7 FE 30                                cp      48
 493+ C4E9 20 05                                jr      nz,.UnderOneTonne
 494+ C4EB 78                                   ld      a,b
 495+ C4EC 21 06 88                             ld      hl,CargoRunningLoad
 496+ C4EF 34                                   inc     (hl)
 497+ C4F0 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 498+ C4F3 16 00                                ld      d,0
 499+ C4F5 5F                                   ld      e,a
 500+ C4F6 CD 35 94                             call    subDEfromCash
 501+ C4F9 3A 74 C0                             ld      a,(mkt_selected_row)
 502+ C4FC CD 8B C2                             call    PrintMarketItem
 503+ C4FF CD 69 C2                             call    MKT_DisplayCargo
 504+ C502 CD 7A C2                             call    MKT_DisplayCash
 505+ C505 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 785  C506                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 786  C506              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 787  C506                  SLOT    StockTableAddr
 788  C506                  PAGE    BankStockTable
 789  C506                  ORG     StockTableAddr
 790  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 8E 88                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 75 82                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A A4 82                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 75 82                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A A4 82                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 791  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 792  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 793  E113                  SLOT    CommanderAddr
 794  E113                  PAGE    BankCommander
 795  E113                  ORG     CommanderAddr, BankCommander
 796  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 27 85    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 83 82    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 64 82    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 07 88    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 1F 88    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 17 88    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 1B 88    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 89 82    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 8B 82    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 00 88    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 04 88    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 98 82    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 99 82    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A A7 83    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A A6 83    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 21 85    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 22 85    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 23 85    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 05 88    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 39 88    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 27 85    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 83 82    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 64 82    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 07 88    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 1F 88    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 17 88    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 1B 88    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 89 82    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 8B 82    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 BC 81                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 8E 88                             call	        copy_galaxy_to_system
  70+ E1CA CD 4E 89                             call	        find_present_system
  71+ E1CD CD B1 88                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 00 88    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 04 88    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 98 82    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 99 82    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 A7 83    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 A6 83    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 21 85    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 22 85    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 23 85    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 05 88    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 39 88    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD E6 AB                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD B5 AB                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 26 85    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD AE 86                             call    SetPlayerRank
 100+ E24C                                      SetMemFalse LaserBeamOn
 100+ E24C 3E FF       >                        ld      a,$FF
 100+ E24E 32 3E 85    >                        ld      (LaserBeamOn),a
 101+ E251 C9                                   ret
 102+ E252
 103+ E252               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 104+ E252              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 104+ E252 21 10 E0    >                        ld      hl,defaultName
 104+ E255 11 27 85    >                        ld      de, CommanderName
 104+ E258 01 08 00    >                        ld      bc, 8
 104+ E25B ED B0       >                        ldir
 105+ E25D                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 105+ E25D 21 29 E0    >                        ld      hl,defaultSeeds
 105+ E260 11 83 82    >                        ld      de, GalaxySeeds
 105+ E263 01 06 00    >                        ld      bc, 6
 105+ E266 ED B0       >                        ldir
 106+ E268                                      ldCopy2Byte defaultHomeX, PresentSystemX
 106+ E268 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26B 22 89 82    >                        ld       (PresentSystemX),hl
 107+ E26E                                      ldCopy2Byte defaultHomeX, TargetSystemX
 107+ E26E 2A 2F E0    >                        ld       hl,(defaultHomeX)
 107+ E271 22 8B 82    >                        ld       (TargetSystemX),hl
 108+ E274 21 BC 81                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 109+ E277 CD 8E 88                             call	copy_galaxy_to_system
 110+ E27A CD 4E 89                             call	find_present_system
 111+ E27D CD B1 88                             call	copy_working_to_galaxy
 112+ E280 01 60 EA                             ld      bc,60000
 113+ E283 ED 43 00 88                          ld      (Cash),bc
 114+ E287 01 00 00                             ld		bc,0
 115+ E28A ED 43 02 88                          ld		(Cash+2), bc                    ; cash no longer big endian
 116+ E28E 3E 46                                ld		a,MaxFuelLevel
 117+ E290 32 04 88                             ld		(Fuel),a
 118+ E293 3E 5B                                ld      a,BankGalaxyData0
 119+ E295 32 76 82                             ld		(Galaxy),a
 120+ E298 AF                                   xor		a
 121+ E299 21 1F 88                             ld      hl,EquipmentFitted
 122+ E29C 06 1A                                ld      b, EQ_ITEM_COUNT
 123+ E29E 77           .ClearFittedLooop:      ld      (hl),a
 124+ E29F 23                                   inc     hl
 125+ E2A0 10 FC                                djnz    .ClearFittedLooop
 126+ E2A2                                      SetAFalse
 126+ E2A2 3E FF       >                        ld      a,$FF
 127+ E2A4 32 2D 88                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 128+ E2A7 32 D9 83                             ld		(MissionData),a						;The Plan/Mission
 129+ E2AA 3E 03                                ld      a,3                                  ; a = 0 = pulse laser
 130+ E2AC 32 17 88                             ld		(LaserType),a
 131+ E2AF 3E FF                                ld      a,$FF                                 ; a = 255
 132+ E2B1 32 18 88                             ld		(LaserType+1),a
 133+ E2B4 32 19 88                             ld		(LaserType+2),a
 134+ E2B7 32 1A 88                             ld		(LaserType+3),a
 135+ E2BA AF                                   xor     a                                  ; a= 0
 136+ E2BB 32 1B 88                             ld      (LaserDamagedFlag),a
 137+ E2BE 32 1C 88                             ld      (LaserDamagedFlag+1),a
 138+ E2C1 32 1D 88                             ld      (LaserDamagedFlag+2),a
 139+ E2C4 32 1E 88                             ld      (LaserDamagedFlag+3),a
 140+ E2C7              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 141+ E2C7 AF                                   xor     a
 142+ E2C8 32 22 88                             ld		(ECMPresent),a
 143+ E2CB 32 39 88                             ld		(FuelScoopsBarrelStatus),a
 144+ E2CE 32 25 88                             ld		(EnergyBomb),a
 145+ E2D1 32 26 88                             ld		(ExtraEnergyUnit),a
 146+ E2D4 32 27 88                             ld		(DockingComputer),a
 147+ E2D7 32 28 88                             ld		(GalacticHyperDrive),a
 148+ E2DA 32 24 88                             ld		(EscapePod),a
 149+ E2DD 32 98 82                             ld      (FugitiveInnocentStatus),a
 150+ E2E0 32 99 82                             ld		(KillTally),a
 151+ E2E3 32 A7 83                             ld      (OuterHyperCount),a
 152+ E2E6 32 A6 83                             ld      (InnerHyperCount),a
 153+ E2E9 3D                                   dec		a								; now a = 255
 154+ E2EA 32 21 85                             ld		(ForeShield),a
 155+ E2ED 32 22 85                             ld		(AftShield),a
 156+ E2F0 32 23 85                             ld		(PlayerEnergy),a
 157+ E2F3 3E 14                                ld		a,20
 158+ E2F5 32 05 88                             ld		(CargoBaySize),a
 159+ E2F8 CD 78 E3                             call	ZeroCargo						; Clear out cargo
 160+ E2FB 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 161+ E2FD CD 0E E3                             call    LoadLaserToCurrent
 162+ E300                                      ClearMissileTargetting
 162+ E300 3E FF       >                        ld      a,StageMissileNotTargeting
 162+ E302 32 26 85    >                        ld      (MissileTargettingFlag),a
 163+ E305 CD AE 86                             call    SetPlayerRank
 164+ E308                                      SetMemFalse LaserBeamOn
 164+ E308 3E FF       >                        ld      a,$FF
 164+ E30A 32 3E 85    >                        ld      (LaserBeamOn),a
 165+ E30D C9                                   ret
 166+ E30E
 167+ E30E
 168+ E30E              ; a = current view number
 169+ E30E 21 17 88     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 170+ E311 ED 31                                add     hl,a                            ; .
 171+ E313 7E                                   ld      a,(hl)                          ; .
 172+ E314 47                                   ld      b,a                             ; first off is there a laser present in current view
 173+ E315 32 38 85                             ld      (CurrLaserType),a               ; set type
 174+ E318 FE FF                                cp      255                             ; .
 175+ E31A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 176+ E31B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 177+ E31D ED 31                                add     hl,a
 178+ E31F 7E                                   ld      a,(hl)
 179+ E320 32 39 85                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 180+ E323 50                                   ld      d,b                             ; get table index
 181+ E324 1E 0C                                ld      e,LaserStatsTableWidth          ;
 182+ E326 ED 30                                mul     de                              ;
 183+ E328 21 02 76                             ld      hl,LaserStatsTable              ;
 184+ E32B 19                                   add     hl,de                           ;
 185+ E32C 23                                   inc     hl                              ; we already have type
 186+ E32D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 186+ E32D 7E          >                        ld      a,(hl)
 186+ E32E 32 3A 85    >                        ld      (CurrLaserPulseRate),a
 187+ E331 23                                   inc     hl                              ; table [2]
 188+ E332                                      ldAtHLtoMem CurrLaserPulseOnTime
 188+ E332 7E          >                        ld      a,(hl)
 188+ E333 32 3B 85    >                        ld      (CurrLaserPulseOnTime),a
 189+ E336 23                                   inc     hl                              ; table [3]
 190+ E337                                      ldAtHLtoMem CurrLaserPulseOffTime
 190+ E337 7E          >                        ld      a,(hl)
 190+ E338 32 3C 85    >                        ld      (CurrLaserPulseOffTime),a
 191+ E33B 23                                   inc     hl                              ; table [4]
 192+ E33C                                      ldAtHLtoMem CurrLaserPulseRest
 192+ E33C 7E          >                        ld      a,(hl)
 192+ E33D 32 3D 85    >                        ld      (CurrLaserPulseRest),a
 193+ E340 23                                   inc     hl                              ; table [5]
 194+ E341                                      ldAtHLtoMem CurrLaserDamageOutput
 194+ E341 7E          >                        ld      a,(hl)
 194+ E342 32 44 85    >                        ld      (CurrLaserDamageOutput),a
 195+ E345 23                                   inc     hl                              ; table [6]
 196+ E346                                      ldAtHLtoMem CurrLaserEnergyDrain
 196+ E346 7E          >                        ld      a,(hl)
 196+ E347 32 45 85    >                        ld      (CurrLaserEnergyDrain),a
 197+ E34A 23                                   inc     hl                              ; table [7]
 198+ E34B                                      ldAtHLtoMem CurrLaserHeat
 198+ E34B 7E          >                        ld      a,(hl)
 198+ E34C 32 46 85    >                        ld      (CurrLaserHeat),a
 199+ E34F 23                                   inc     hl                              ; table [8]
 200+ E350                                      ldAtHLtoMem CurrLaserDurability
 200+ E350 7E          >                        ld      a,(hl)
 200+ E351 32 47 85    >                        ld      (CurrLaserDurability),a
 201+ E354 23                                   inc     hl                              ; table [9]
 202+ E355                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 202+ E355 7E          >                        ld      a,(hl)
 202+ E356 32 48 85    >                        ld      (CurrLaserDurabilityAmount),a
 203+ E359 C9                                   ret
 204+ E35A
 205+ E35A              ; Set a = 2 * (slaves + narcotics) + firearms
 206+ E35A 3A 0A 88     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 207+ E35D 47                                   ld      b,a                             ; b= slaves
 208+ E35E 3A 0D 88                             ld      a,(NarcoticsCargoTonnes)        ; .
 209+ E361 80                                   add     a,b                             ; a = b + narcotics
 210+ E362 CB 27                                sla     a                               ; a *= 2
 211+ E364 47                                   ld      b,a                             ; b = a
 212+ E365 3A 11 88                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 213+ E368 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 214+ E369 C9                                   ret
 215+ E36A
 216+ E36A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 217+ E36D                                      ZeroA                                   ; set current laser to front
 217+ E36D AF          >                        xor a
 218+ E36E CD 0E E3                             call    LoadLaserToCurrent
 219+ E371 CD 6B 86                             call    InitMainLoop
 220+ E374 CD C9 85                             call    ResetPlayerShip
 221+ E377 C9                                   ret
 222+ E378                                  ;    clear out all other objects
 223+ E378                                  ;    create debris
 224+ E378                                  ;    if cargo presetn then create a cargo
 225+ E378                                  ;
 226+ E378                                  ;    enqueve message game over
 227+ E378                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 797  E378                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E378              ZeroCargo:
   2+ E378 AF           		xor		a							;zero-out cargo, including gems.
   3+ E379 06 10        		ld		b,16						;all the way up to alien items
   4+ E37B 21 07 88     		ld		hl,CargoTonnes   			; cargo levels
   5+ E37E              .ZeroLoop:
   6+ E37E 77                   ld      (hl),a
   7+ E37F 23           		inc		hl
   8+ E380 10 FC        		djnz	.ZeroLoop
   9+ E382 C9           		ret
  10+ E383
# file closed: ./Commander/zero_player_cargo.asm
 798  E383                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 799  E383              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 800  E383                  SLOT    LAYER2Addr
 801  E383                  PAGE    BankLAYER2
 802  E383                  ORG     LAYER2Addr
 803  E000
 804  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004
   7+ E004 3E 08        asm_l2_double_buffer_on:    ld      a,8
   8+ E006 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
   9+ E009 C9                                       ret
  10+ E00A
  11+ E00A AF           asm_l2_double_buffer_off:   xor     a
  12+ E00B 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  13+ E00E C9                                       ret
  14+ E00F
  15+ E00F 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  16+ E012 ED 70                                    in      (c)
  17+ E014 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  18+ E017 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  19+ E019 ED 79                                    out     (c),a
  20+ E01B C9                                       ret
  21+ E01C
  22+ E01C 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  23+ E01F E6 05                                    and     LAYER2_READ_WRITE_MASK
  24+ E021 57                                       ld      d,a
  25+ E022 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  26+ E025 ED 70                                    in      (c)
  27+ E027 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  28+ E02A A2                                       and     d
  29+ E02B ED 79                                    out     (c),a
  30+ E02D C9                                       ret
  31+ E02E
  32+ E02E 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  33+ E031 ED 70                                    in      (c)
  34+ E033 F6 05                                    or      LAYER2_READ_WRITE_MASK
  35+ E035 ED 79                                    out     (c),a
  36+ E037 C9                                       ret
  37+ E038
  38+ E038              ; "asm_l2_bank_select"
  39+ E038              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  40+ E038 57           asm_l2_bank_select:         ld      d,a
  41+ E039 FE 00                                    cp      0
  42+ E03B 28 08                                    jr      z,.NotBreakDebug
  43+ E03D FE 40                                    cp      $40
  44+ E03F 28 04                                    jr      z,.NotBreakDebug
  45+ E041 FE 80                                    cp      $80
  46+ E043 28 00                                    jr      z,.NotBreakDebug
  47+ E045              .NotBreakDebug:
  48+ E045 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E048 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04A B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04E ED 79                                    out 	(c),a
  53+ E050 C9                                       ret
  54+ E051              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E051 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E054 FE 00                                    cp		0
  57+ E056 20 04                                    jr 		nz,.nottopbank
  58+ E058 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05A 18 DC                                    jr		asm_l2_bank_select
  60+ E05C FE 01        .nottopbank:                cp		1
  61+ E05E 20 04                                    jr 		nz,.notmiddlebank
  62+ E060 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E062 18 D4                                    jr		asm_l2_bank_select
  64+ E064 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E066 18 D0                                    jr		asm_l2_bank_select
  66+ E068              		; Note no ret as its handled by above routines
  67+ E068
  68+ E068              asm_l2_bank_0_macro:        MACRO
  69+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  70+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  71+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  72+ E068 ~                                        out 	(c),a
  73+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  74+ E068 ~                                      ;  out     (c),a
  75+ E068 ~                                        ZeroA						; set a to 0
  76+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E068                                          ENDM
  78+ E068
  79+ E068              asm_l2_bank_1_macro:        MACRO
  80+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  81+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E068 ~                                        out 	(c),a
  84+ E068 ~                                       ; ld      a,%0001000              ; Bank offset of + 1
  85+ E068 ~                                      ;  out     (c),a
  86+ E068 ~                                        ld      a,1						; set a to 0
  87+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  88+ E068                                          ENDM
  89+ E068
  90+ E068              asm_l2_bank_2_macro:        MACRO
  91+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  92+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  94+ E068 ~                                        out 	(c),a
  95+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  96+ E068 ~                                       ; out     (c),a
  97+ E068 ~                                        ld      a,2						; set a to 0
  98+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  99+ E068                                          ENDM
 100+ E068
 101+ E068              asm_l2_bank_3_macro:        MACRO
 102+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 103+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 104+ E068 ~                                        or      %0001011
 105+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 106+ E068 ~                                        out 	(c),a
 107+ E068 ~                                        ld      a,3						; set a to 0
 108+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 109+ E068                                          ENDM
 110+ E068
 111+ E068              asm_l2_bank_4_macro:        MACRO
 112+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 113+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 114+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 115+ E068 ~                                        out 	(c),a
 116+ E068 ~                                        ld      a,4						; set a to 0
 117+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 118+ E068                                          ENDM
 119+ E068
 120+ E068              ; "asm_l2_row_bank_select"
 121+ E068              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 122+ E068              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 123+ E068              ; "destroys BC call de is safe a = adjusted poke pixel row"
 124+ E068              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 124+ E068 FE 80       >                        cp     128
 124+ E06A D2 A6 E0    >                        jp		nc,.BottomBank
 125+ E06D                                          JumpIfAGTENusng 64, .MiddleBank
 125+ E06D FE 40       >                        cp     64
 125+ E06F D2 8A E0    >                        jp		nc,.MiddleBank
 126+ E072 08                                       ex      af,af'
 127+ E073                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 127+ E073 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 127+ E076 A7          >                        and a
 127+ E077 CA 88 E0    >                        jp  z,.NoTopChange
 128+ E07A                                          asm_l2_bank_0_macro
 128+ E07A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 128+ E07D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 128+ E07F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 128+ E082 ED 79       >                            out 	(c),a
 128+ E084             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 128+ E084             >                          ;  out     (c),a
 128+ E084             >                            ZeroA						; set a to 0
 128+ E084 AF          >                        xor a
 128+ E085 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 129+ E088 08           .NoTopChange:               ex      af,af'
 130+ E089 C9                                       ret
 131+ E08A 08           .MiddleBank:                ex      af,af'
 132+ E08B                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 132+ E08B 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 132+ E08E FE 01       >                        cp  1
 132+ E090 CA A2 E0    >                        jp  z,.NoMiddleChange
 133+ E093                                          asm_l2_bank_1_macro
 133+ E093 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 133+ E096 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 133+ E098 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 133+ E09B ED 79       >                            out 	(c),a
 133+ E09D             >                           ; ld      a,%0001000              ; Bank offset of + 1
 133+ E09D             >                          ;  out     (c),a
 133+ E09D 3E 01       >                            ld      a,1						; set a to 0
 133+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 134+ E0A2 08           .NoMiddleChange:            ex      af,af'
 135+ E0A3 D6 40                                    sub     64
 136+ E0A5 C9                                       ret
 137+ E0A6 08           .BottomBank:                ex      af,af'
 138+ E0A7                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 138+ E0A7 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 138+ E0AA FE 02       >                        cp  2
 138+ E0AC CA BE E0    >                        jp  z,.NoBottomChange
 139+ E0AF                                          asm_l2_bank_2_macro
 139+ E0AF 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 139+ E0B2 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 139+ E0B4 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 139+ E0B7 ED 79       >                            out 	(c),a
 139+ E0B9             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 139+ E0B9             >                           ; out     (c),a
 139+ E0B9 3E 02       >                            ld      a,2						; set a to 0
 139+ E0BB 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 140+ E0BE 08           .NoBottomChange:            ex      af,af'
 141+ E0BF D6 80                                    sub     128
 142+ E0C1 C9                                       ret
 143+ E0C2
 144+ E0C2
 145+ E0C2              ; "asm_l2_row_bank_select"
 146+ E0C2              ; "HL (unsinged) = x column of pixel line from left
 147+ E0C2              ; 0-  63
 148+ E0C2              ; 64- 127
 149+ E0C2              ; 128 - 191
 150+ E0C2              ; 192 - 255
 151+ E0C2              ; 256 - 321
 152+ E0C2              ; outputs l with the correct column number
 153+ E0C2 7A           asm_l2_320_col_bank_select: ld      a,d
 154+ E0C3                                          JumpIfAIsNotZero .Bank5             ; 256 - 321
 154+ E0C3 A7          >                        and     a
 154+ E0C4 C2 27 E1    >                        jp	    nz,.Bank5
 155+ E0C7 7B                                       ld      a,e
 156+ E0C8                                          JumpIfAGTENusng 192, .Bank4
 156+ E0C8 FE C0       >                        cp     192
 156+ E0CA D2 10 E1    >                        jp		nc,.Bank4
 157+ E0CD                                          JumpIfAGTENusng 128, .Bank3
 157+ E0CD FE 80       >                        cp     128
 157+ E0CF D2 FB E0    >                        jp		nc,.Bank3
 158+ E0D2                                          JumpIfAGTENusng 64 , .Bank2
 158+ E0D2 FE 40       >                        cp     64
 158+ E0D4 D2 E6 E0    >                        jp		nc,.Bank2
 159+ E0D7              .Bank1:                     asm_l2_bank_0_macro
 159+ E0D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 159+ E0DA F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 159+ E0DC 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 159+ E0DF ED 79       >                            out 	(c),a
 159+ E0E1             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 159+ E0E1             >                          ;  out     (c),a
 159+ E0E1             >                            ZeroA						; set a to 0
 159+ E0E1 AF          >                        xor a
 159+ E0E2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 160+ E0E5 C9                                       ret
 161+ E0E6              .Bank2:                     asm_l2_bank_1_macro
 161+ E0E6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 161+ E0E9 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 161+ E0EB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 161+ E0EE ED 79       >                            out 	(c),a
 161+ E0F0             >                           ; ld      a,%0001000              ; Bank offset of + 1
 161+ E0F0             >                          ;  out     (c),a
 161+ E0F0 3E 01       >                            ld      a,1						; set a to 0
 161+ E0F2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 162+ E0F5                                          ClearCarryFlag
 162+ E0F5 B7          >                        or a
 163+ E0F6 7D                                       ld      a,l
 164+ E0F7 E6 BF                                    and     %10111111       ; fast subtract 64, just clear bit
 165+ E0F9 67                                       ld      h,a
 166+ E0FA C9                                       ret
 167+ E0FB              .Bank3:                     asm_l2_bank_2_macro
 167+ E0FB 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 167+ E0FE F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 167+ E100 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 167+ E103 ED 79       >                            out 	(c),a
 167+ E105             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 167+ E105             >                           ; out     (c),a
 167+ E105 3E 02       >                            ld      a,2						; set a to 0
 167+ E107 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 168+ E10A                                          ClearCarryFlag
 168+ E10A B7          >                        or a
 169+ E10B 7D                                       ld      a,l
 170+ E10C E6 7F                                    and     %01111111       ; fast subtract 128, just clear bit
 171+ E10E 67                                       ld      h,a
 172+ E10F C9                                       ret
 173+ E110              .Bank4:                     asm_l2_bank_3_macro
 173+ E110 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 173+ E113 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 173+ E115 F6 0B       >                            or      %0001011
 173+ E117 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 173+ E11A ED 79       >                            out 	(c),a
 173+ E11C 3E 03       >                            ld      a,3						; set a to 0
 173+ E11E 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 174+ E121                                          ClearCarryFlag
 174+ E121 B7          >                        or a
 175+ E122 7B                                       ld      a,e
 176+ E123 E6 3F                                    and     %00111111       ; fast subtract 192, just clear bit
 177+ E125 67                                       ld      h,a
 178+ E126 C9                                       ret
 179+ E127              .Bank5:                     asm_l2_bank_4_macro
 179+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 179+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 179+ E12C 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 179+ E12F ED 79       >                            out 	(c),a
 179+ E131 3E 04       >                            ld      a,4						; set a to 0
 179+ E133 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 180+ E136 65                                       ld      h,l             ; fast subtract 256, just clear bit
 181+ E137 C9                                       ret
 182+ E138
 183+ E138              ;;;
 184+ E138              ;;;
 185+ E138              ;;;                            cp 		64			; row < 64?
 186+ E138              ;;;                            jr 		nc, .l2rowGTE64
 187+ E138              ;;;.l2rowLT64:                 ex		af,af'
 188+ E138              ;;;                            ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
 189+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 190+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 191+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 192+ E138              ;;;                            out 	(c),a
 193+ E138              ;;;                            xor		a						; set a to 0
 194+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 195+ E138              ;;;                            ex		af,af'					; return pixel poke unharmed
 196+ E138              ;;;                            ret
 197+ E138              ;;;.l2rowGTE64:                cp 		128
 198+ E138              ;;;                            jr 		nc, .l2rowGTE128
 199+ E138              ;;;.l2row64to127:              ex		af,af'
 200+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
 201+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 202+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 203+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 204+ E138              ;;;                            out 	(c),a
 205+ E138              ;;;                            ld		a,1						; set a to 1
 206+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 207+ E138              ;;;                            ex		af,af'
 208+ E138              ;;;                            sub		64
 209+ E138              ;;;                            ret
 210+ E138              ;;;.l2rowGTE128:               ex		af,af'
 211+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
 212+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 213+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 214+ E138              ;;;
 215+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 216+ E138              ;;;                            out 	(c),a
 217+ E138              ;;;                            ld		a,1						; set a to 2
 218+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 219+ E138              ;;;                            ex		af,af'
 220+ E138              ;;;                            sub		128
 221+ E138              ;;;                            ret
 222+ E138
 223+ E138
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 805  E138                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E138
   2+ E138 00           l2_cls_byte	            DB 0
   3+ E139              ; ">DMA Command BLOCK"
   4+ E139
   5+ E139 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E13D 7D
   6+ E13E 38 E1        l2_fill_astrt           DW l2_cls_byte
   7+ E140 00 40        l2_fill_length          DB $00,$40
   8+ E142 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E145 00 00        l2_fill_bstrt           DB $00,$00
  10+ E147 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E14B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E14B
  13+ E14B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E14F 7D
  14+ E150 38 E1        .l2_fill_astrt          DW l2_cls_byte
  15+ E152 00 40        .l2_fill_length         DB $00,$40
  16+ E154 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E157 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E159 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E15D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E15D
  21+ E15D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E15D              l2_cls_dma_bank:
  23+ E15D 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  24+ E160 21 39 E1     .write_dma:             ld hl, l2_fill
  25+ E163 06 12                                ld b, l2_fill_cmd_len
  26+ E165 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E167 ED B3                                otir
  28+ E169 C9                                   ret
  29+ E16A
  30+ E16A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E16A              l2_cls_dma_bank_burst:
  32+ E16A 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  33+ E16D 21 4B E1     .write_dma:             ld hl, l2_fill_burst
  34+ E170 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E172 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E174 ED B3                                otir
  37+ E176 C9                                   ret
  38+ E177
  39+ E177 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E179 CD 68 E0                             call asm_l2_row_bank_select
  41+ E17C 3A 38 E1                             ld      a,(l2_cls_byte)
  42+ E17F CD 5D E1                             call l2_cls_dma_bank
  43+ E182 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E184 CD 68 E0                             call asm_l2_row_bank_select
  45+ E187 3A 38 E1                             ld      a,(l2_cls_byte)
  46+ E18A CD 5D E1                             call l2_cls_dma_bank
  47+ E18D C9                                   ret
  48+ E18E
  49+ E18E
  50+ E18E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E18E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E18E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E191 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E193 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E196 ED 79       >                            out 	(c),a
  51+ E198             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  51+ E198             >                          ;  out     (c),a
  51+ E198             >                            ZeroA						; set a to 0
  51+ E198 AF          >                        xor a
  51+ E199 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E19C 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E19E CD 5D E1                             call l2_cls_dma_bank
  54+ E1A1                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E1A1                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E1A1 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E1A4 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E1A6 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E1A9 ED 79       >                            out 	(c),a
  55+ E1AB             >                           ; ld      a,%0001000              ; Bank offset of + 1
  55+ E1AB             >                          ;  out     (c),a
  55+ E1AB 3E 01       >                            ld      a,1						; set a to 0
  55+ E1AD 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E1B0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E1B2 CD 5D E1                             call l2_cls_dma_bank
  58+ E1B5 C9                                   ret
  59+ E1B6
  60+ E1B6              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E1B6                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E1B6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E1B9 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E1BB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E1BE ED 79       >                            out 	(c),a
  61+ E1C0             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  61+ E1C0             >                          ;  out     (c),a
  61+ E1C0             >                            ZeroA						; set a to 0
  61+ E1C0 AF          >                        xor a
  61+ E1C1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E1C4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E1C6 CD 6A E1                             call l2_cls_dma_bank_burst
  64+ E1C9                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E1C9                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E1C9 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E1CC F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E1CE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E1D1 ED 79       >                            out 	(c),a
  65+ E1D3             >                           ; ld      a,%0001000              ; Bank offset of + 1
  65+ E1D3             >                          ;  out     (c),a
  65+ E1D3 3E 01       >                            ld      a,1						; set a to 0
  65+ E1D5 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E1D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E1DA CD 6A E1                             call l2_cls_dma_bank_burst
  68+ E1DD C9                                   ret
  69+ E1DE
  70+ E1DE              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E1DE                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E1DE 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E1E1 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E1E3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E1E6 ED 79       >                            out 	(c),a
  71+ E1E8             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  71+ E1E8             >                           ; out     (c),a
  71+ E1E8 3E 02       >                            ld      a,2						; set a to 0
  71+ E1EA 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E1ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E1EF CD 5D E1                             call l2_cls_dma_bank
  74+ E1F2 C9                                   ret
  75+ E1F3
  76+ E1F3              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E1F3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E1F6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E1F8 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E1FB ED 79       >                            out 	(c),a
  76+ E1FD             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  76+ E1FD             >                           ; out     (c),a
  76+ E1FD 3E 02       >                            ld      a,2						; set a to 0
  76+ E1FF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E202 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E204 CD 6A E1                             call l2_cls_dma_bank_burst
  79+ E207 C9                                   ret
  80+ E208
  81+ E208
  82+ E208 CD B6 E1     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E20B C3 F3 E1                             jp   l2_cls_lower_third_burst
  84+ E20E
  85+ E20E
  86+ E20E CD 8E E1     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E211 C3 DE E1                             jp   l2_cls_lower_third
  88+ E214
  89+ E214              l2_320_cls:
  90+ E214 CD 8E E1     l2_640_cls:             call l2_cls_upper_two_thirds
  91+ E217 CD DE E1                             call   l2_cls_lower_third
  92+ E21A                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  93+ E21A                                      asm_l2_bank_3_macro
  93+ E21A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  93+ E21D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  93+ E21F F6 0B       >                            or      %0001011
  93+ E221 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  93+ E224 ED 79       >                            out 	(c),a
  93+ E226 3E 03       >                            ld      a,3						; set a to 0
  93+ E228 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  94+ E22B 3E E3                                ld 	a,COLOUR_TRANSPARENT
  95+ E22D CD 5D E1                             call l2_cls_dma_bank
  96+ E230                                      asm_l2_bank_4_macro
  96+ E230 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  96+ E233 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  96+ E235 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  96+ E238 ED 79       >                            out 	(c),a
  96+ E23A 3E 04       >                            ld      a,4						; set a to 0
  96+ E23C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  97+ E23F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  98+ E241 CD 5D E1                             call l2_cls_dma_bank
  99+ E244
 100+ E244 C9                                   ret
 101+ E245
# file closed: ./Layer2Graphics/layer2_cls.asm
 806  E245                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E245
   2+ E245 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   3+ E249 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   4+ E24D ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   5+ E251 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   6+ E255                                      ZeroA
   6+ E255 AF          >                        xor a
   7+ E256                                      DoubleBufferIfPossible
   7+ E256             >                        IFDEF DOUBLEBUFFER
   7+ E256             >                            MMUSelectLayer2
   7+ E256 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7+ E25A CD 0E E2    >                            call  l2_cls
   7+ E25D CD 97 E2    >                            call  l2_flip_buffers
   7+ E260             >                        ENDIF
   8+ E260                                      DoubleBufferIfPossible
   8+ E260             >                        IFDEF DOUBLEBUFFER
   8+ E260             >                            MMUSelectLayer2
   8+ E260 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ E264 CD 0E E2    >                            call  l2_cls
   8+ E267 CD 97 E2    >                            call  l2_flip_buffers
   8+ E26A             >                        ENDIF
   9+ E26A CD 68 E0                             call        asm_l2_row_bank_select
  10+ E26D C9                                   ret
  11+ E26E
  12+ E26E ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  13+ E272 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  14+ E276 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  15+ E27A ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  16+ E27E                                      ZeroA
  16+ E27E AF          >                        xor a
  17+ E27F                                      DoubleBuffer320IfPossible
  17+ E27F             >                        IFDEF DOUBLEBUFFER
  17+ E27F             >                            MMUSelectLayer2
  17+ E27F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  17+ E283 CD 14 E2    >                            call  l2_320_cls
  17+ E286 CD 97 E2    >                            call  l2_flip_buffers
  17+ E289             >                        ENDIF
  18+ E289                                      DoubleBuffer320IfPossible
  18+ E289             >                        IFDEF DOUBLEBUFFER
  18+ E289             >                            MMUSelectLayer2
  18+ E289 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  18+ E28D CD 14 E2    >                            call  l2_320_cls
  18+ E290 CD 97 E2    >                            call  l2_flip_buffers
  18+ E293             >                        ENDIF
  19+ E293 CD C2 E0                             call        asm_l2_320_col_bank_select
  20+ E296 C9                                   ret
  21+ E297
  22+ E297              ;l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  23+ E297              ;                        nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  24+ E297              ;                        nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  25+ E297              ;                        nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  26+ E297              ;                        ZeroA
  27+ E297              ;                        DoubleBuffer640IfPossible
  28+ E297              ;                        DoubleBuffer640IfPossible
  29+ E297              ;                        call        asm_l2_640_col_bank_select
  30+ E297              ;                        ret
  31+ E297
# file closed: ./Layer2Graphics/layer2_initialise.asm
 807  E297                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E297              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E297 01 3B 24    >            ld bc,$243B
   1+ E29A 3E 12       >            ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E29C ED 79       >            out (c),a
   1+ E29E 04          >            inc b
   1+ E29F ED 78       >            in a,(c)
   2+ E2A1 57                                   ld      d,a
   3+ E2A2                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E2A2 01 3B 24    >            ld bc,$243B
   3+ E2A5 3E 13       >            ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E2A7 ED 79       >            out (c),a
   3+ E2A9 04          >            inc b
   3+ E2AA ED 78       >            in a,(c)
   4+ E2AC 5F                                   ld      e,a
   5+ E2AD ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E2B0 7A                                   ld      a,d
   7+ E2B1 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E2B4 C9                                   ret
   9+ E2B5
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 808  E2B5                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E2B5              l2_plot_macro:          MACRO
   2+ E2B5 ~                                    ld      a,b
   3+ E2B5 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   4+ E2B5 ~                                    ld      l,c
   5+ E2B5 ~                                    call    asm_l2_row_bank_select
   6+ E2B5 ~                                    ld      h,a
   7+ E2B5 ~                                    ld      a,(line_gfx_colour)
   8+ E2B5 ~                                    ld      (hl),a
   9+ E2B5 ~            .NoPlot:
  10+ E2B5                                      ENDM
  11+ E2B5
  12+ E2B5
  13+ E2B5              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  14+ E2B5 F5           l2_plot_pixel:          push    af
  15+ E2B6 78                                   ld      a,b
  16+ E2B7              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  16+ E2B7 FE C0       >                        cp     ScreenHeight
  16+ E2B9 D2 C7 E2    >                        jp		nc,l2_pp_dont_plot
  17+ E2BC C5                                   push    bc								; bank select destroys bc so need to save it
  18+ E2BD                                  ;	ld      a,b
  19+ E2BD CD 68 E0                             call    asm_l2_row_bank_select
  20+ E2C0 C1                                   pop     bc
  21+ E2C1 47                                   ld      b,a
  22+ E2C2 60                                   ld      h,b								; hl now holds ram address after bank select
  23+ E2C3 69                                   ld      l,c
  24+ E2C4 F1                                   pop     af								; a = colour to plott
  25+ E2C5 77                                   ld      (hl),a
  26+ E2C6 C9                                   ret
  27+ E2C7 F1           l2_pp_dont_plot:        pop     af
  28+ E2C8 C9                                   ret
  29+ E2C9
  30+ E2C9              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  31+ E2C9 7C           l2_plot_pixel_320:      ld      a,h
  32+ E2CA FE 01                                cp      1                               ; if < 256, definite OK
  33+ E2CC 20 05                                jr      nz,.DoneCheck
  34+ E2CE 7D                                   ld      a,l
  35+ E2CF E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  36+ E2D1 20 06                                jr      nz,.DontPlot
  37+ E2D3 CD C2 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  38+ E2D6 6A                                   ld      l,d                             ; as they are horizontal now
  39+ E2D7 7B                                   ld      a,e
  40+ E2D8 77                                   ld      (hl),a
  41+ E2D9 C9           .DontPlot:              ret
  42+ E2DA
  43+ E2DA CD C2 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  44+ E2DD 6A                                   ld      l,d                             ; as they are horizontal now
  45+ E2DE 7B                                   ld      a,e
  46+ E2DF 77                                   ld      (hl),a
  47+ E2E0 C9                                   ret
  48+ E2E1
  49+ E2E1              ; y aixs bounds check must have been done before calling this
  50+ E2E1 F5           l2_plot_pixel_no_check: push    af
  51+ E2E2 C5                                   push    bc								; bank select destroys bc so need to save it
  52+ E2E3 78                                   ld      a,b                             ; determine target bank
  53+ E2E4 CD 68 E0                             call    asm_l2_row_bank_select
  54+ E2E7 C1                                   pop     bc
  55+ E2E8 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  56+ E2E9 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  57+ E2EB F1                                   pop     af								; a = colour to plott
  58+ E2EC 77                                   ld      (hl),a                          ; poke to ram
  59+ E2ED C9                                   ret
  60+ E2EE
  61+ E2EE              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  62+ E2EE              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  63+ E2EE E5           l2_plot_pixel_no_bank:  push 	hl
  64+ E2EF 60                                   ld 		h,b								; hl now holds ram address after bank select
  65+ E2F0 69                                   ld 		l,c
  66+ E2F1 77                                   ld 		(hl),a
  67+ E2F2 E1                                   pop		hl
  68+ E2F3 C9                                   ret
  69+ E2F4
  70+ E2F4              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  71+ E2F4              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  72+ E2F4              l2_plot_pixel_320_no_bank:
  73+ E2F4 6A                                   ld 		l,d
  74+ E2F5 77                                   ld 		(hl),a
  75+ E2F6 C9                                   ret
  76+ E2F7              ; The more simpler h col l row is just ld (hl),a so no need for a function
  77+ E2F7
  78+ E2F7
  79+ E2F7 F5           ShipPixel:              push    af
  80+ E2F8 78                                   ld      a,b
  81+ E2F9 FE 7F                                cp      127
  82+ E2FB D0                                   ret     nc
  83+ E2FC F1                                   pop     af
  84+ E2FD 18 E2                                jr      l2_plot_pixel_no_check
  85+ E2FF                                      ;***Implicit ret due to jr
  86+ E2FF
  87+ E2FF              ; in bc = yx iyl = colour
  88+ E2FF 78           DebrisPixel:            ld      a,b
  89+ E300 FE 7F                                cp      127
  90+ E302 D0                                   ret     nc
  91+ E303 FD 7D                                ld      a, iyl
  92+ E305 18 DA                                jr      l2_plot_pixel_no_check
  93+ E307                                      ;***Implicit ret due to jr
  94+ E307
  95+ E307 F5           l2_plot_pixel_y_test:   push	af
  96+ E308 78                                   ld		a,b
  97+ E309 FE C0                                cp		192
  98+ E30B 30 03                                jr		nc,.clearup
  99+ E30D F1                                   pop		af
 100+ E30E 18 A5                                jr		l2_plot_pixel
 101+ E310 F1           .clearup:               pop		af
 102+ E311 C9                                   ret
 103+ E312
 104+ E312              l2_point_pixel_y_safe:	MACRO
 105+ E312 ~            						push	hl
 106+ E312 ~            						push	bc
 107+ E312 ~            						call	l2_plot_pixel
 108+ E312 ~            						pop		bc
 109+ E312 ~            						pop		hl
 110+ E312              						ENDM
 111+ E312
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 809  E312                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E312
   2+ E312              l2_print_chr_at:
   3+ E312              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E312              ; "Need a version that also prints absence of character"
   5+ E312 7A           	ld		a,d
   6+ E313 FE 20        	cp		32
   7+ E315 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E317 FE 7F        	cp		127
   9+ E319 30 3B        	jr		nc,.InvalidCharacter
  10+ E31B              .ValidCharater:
  11+ E31B 26 00        	ld		h,0
  12+ E31D 6A           	ld		l,d
  13+ E31E 29           	add		hl,hl						; * 2
  14+ E31F 29           	add		hl,hl						; * 4
  15+ E320 29           	add		hl,hl						; * 8 to get byte address
  16+ E321 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E325 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E326 23           	inc		hl							; skip first byte
  19+ E327 16 07        	ld		d,7
  20+ E329              .PrintCharLoop:
  21+ E329 D5           	push	de
  22+ E32A 7E           	ld		a,(hl)
  23+ E32B FE 00        	cp		0
  24+ E32D 28 21        	jr		z,.NextRowNoBCPop
  25+ E32F              .PrintARow:
  26+ E32F C5           	push	bc							; save row col
  27+ E330 16 07        	ld		d,7							; d is loop row number now
  28+ E332              .PrintPixelLoop:
  29+ E332 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E333              .PrintTheRow:
  31+ E333 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E335 F5           	push	af							; save character byte
  33+ E336 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E338 20 04        	jr		nz,.PixelToPrint
  35+ E33A              .NoPixelToPrint:
  36+ E33A 3E E3        	ld		a,$E3
  37+ E33C 18 01        	jr		.HaveSetPixelColour
  38+ E33E              .PixelToPrint:
  39+ E33E 7B           	ld		a,e							; Get Colour
  40+ E33F              .HaveSetPixelColour
  41+ E33F E5           	push	hl
  42+ E340              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E340              .BankOnFirstOnly:
  44+ E340 F5           	push	af
  45+ E341 7A           	ld		a,d
  46+ E342 FE 07        	cp		7
  47+ E344 28 11        	jr		z,.PlotWithBank
  48+ E346              .PlotNoBank:
  49+ E346 F1           	pop		af
  50+ E347 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E348 69           	ld 		l,c
  52+ E349 77           	ld 		(hl),a
  53+ E34A              .IterateLoop:
  54+ E34A              ;	pop		bc
  55+ E34A E1           	pop		hl
  56+ E34B F1           	pop		af							; a= current byte shifted
  57+ E34C 15           	dec		d						 	; do dec after inc as we amy
  58+ E34D 20 E3        	jr		nz,.PrintPixelLoop
  59+ E34F              .NextRow:
  60+ E34F C1           	pop		bc							; Current Col Row
  61+ E350              .NextRowNoBCPop:
  62+ E350 D1           	pop		de							; d= row loop
  63+ E351 04           	inc		b							; Down 1 row
  64+ E352 23           	inc		hl							; Next character byte
  65+ E353 15           	dec		d							; 1 done now
  66+ E354 20 D3        	jr		nz,.PrintCharLoop
  67+ E356              .InvalidCharacter:
  68+ E356 C9           	ret
  69+ E357              .PlotWithBank:
  70+ E357 F1           	pop		af
  71+ E358 CD B5 E2     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E35B 18 ED        	jr		.IterateLoop
  73+ E35D
  74+ E35D              l2_print_at:
  75+ E35D              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E35D              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E35D 7E           	ld	a,(hl)							; Return if empty string
  78+ E35E FE 00        	cp	0
  79+ E360 C8           	ret	z
  80+ E361 E5           	push	hl
  81+ E362 D5           	push	de
  82+ E363 C5           	push	bc
  83+ E364 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E365 CD 12 E3     	call 	l2_print_chr_at
  85+ E368 C1           	pop		bc
  86+ E369 D1           	pop		de
  87+ E36A E1           	pop		hl
  88+ E36B              .Move8Pixlestoright:
  89+ E36B 08           	ex		af,af'
  90+ E36C 79           	ld		a,c
  91+ E36D C6 08        	add		8
  92+ E36F 4F           	ld		c,a
  93+ E370 08           	ex		af,af'
  94+ E371 23           	inc		hl
  95+ E372 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E374
  97+ E374
  98+ E374              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E374              ; "Need a version that also prints absence of character"
 100+ E374              ; removed blank line optimisation as we need spaces printed
 101+ E374 7A           l2_print_7chr_at:       ld		a,d
 102+ E375 FE 1F                                cp		31
 103+ E377 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E379 FE 7F                                cp		127
 105+ E37B 30 39                                jr		nc,.InvalidCharacter
 106+ E37D 26 00        .ValidCharater:         ld		h,0
 107+ E37F 6A                                   ld		l,d
 108+ E380 29                                   add		hl,hl						; * 2
 109+ E381 29                                   add		hl,hl						; * 4
 110+ E382 29                                   add		hl,hl						; * 8 to get byte address
 111+ E383 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E387 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E388 23                                   inc		hl							; skip first byte
 114+ E389 16 07                                ld		d,7
 115+ E38B D5           .PrintCharLoop:         push	de
 116+ E38C 7E                                   ld		a,(hl)
 117+ E38D                                      ;cp		0
 118+ E38D                                      ;jr		z,.NextRowNoBCPop
 119+ E38D C5           .PrintARow:             push	bc							; save row col
 120+ E38E 16 06                                ld		d,6							; d is loop row number now
 121+ E390 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E391 28 1C                                jr		z,.NextRow
 123+ E393 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E395 F5                                   push	af							; save character byte
 125+ E396 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E398 20 04                                jr		nz,.PixelToPrint
 127+ E39A 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E39C 18 01                                jr		.HaveSetPixelColour
 129+ E39E 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E39F E5           .HaveSetPixelColour		push	hl
 131+ E3A0                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E3A0 F5           .BankOnFirstOnly:       push	af
 133+ E3A1 7A                                   ld		a,d
 134+ E3A2 FE 06                                cp		6
 135+ E3A4 28 11                                jr		z,.PlotWithBank
 136+ E3A6 F1           .PlotNoBank:            pop		af
 137+ E3A7 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E3A8 69                                   ld 		l,c
 139+ E3A9 77                                   ld 		(hl),a
 140+ E3AA              .IterateLoop:	        ;	pop		bc
 141+ E3AA E1                                   pop		hl
 142+ E3AB F1                                   pop		af							; a= current byte shifted
 143+ E3AC 15                                   dec		d						 	; do dec after inc as we amy
 144+ E3AD 20 E1                                jr		nz,.PrintPixelLoop
 145+ E3AF C1           .NextRow:               pop		bc							; Current Col Row
 146+ E3B0 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E3B1 04                                   inc		b							; Down 1 row
 148+ E3B2 23                                   inc		hl							; Next character byte
 149+ E3B3 15                                   dec		d							; 1 done now
 150+ E3B4 20 D5                                jr		nz,.PrintCharLoop
 151+ E3B6 C9           .InvalidCharacter:      ret
 152+ E3B7 F1           .PlotWithBank:          pop		af
 153+ E3B8 CD B5 E2                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E3BB 18 ED                                jr		.IterateLoop
 155+ E3BD
 156+ E3BD              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E3BD              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E3BD 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E3BE FE 00                                cp	0
 160+ E3C0 C8                                   ret	z
 161+ E3C1 E5                                   push	hl
 162+ E3C2 D5                                   push	de
 163+ E3C3 C5                                   push	bc
 164+ E3C4 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E3C5 CD 74 E3                             call 	l2_print_7chr_at
 166+ E3C8 C1                                   pop		bc
 167+ E3C9 D1                                   pop		de
 168+ E3CA E1                                   pop		hl
 169+ E3CB 08           .Move7Pixlestoright:	ex		af,af'
 170+ E3CC 79                                   ld		a,c
 171+ E3CD C6 07                                add		7
 172+ E3CF 4F                                   ld		c,a
 173+ E3D0 08                                   ex		af,af'
 174+ E3D1 23                                   inc		hl
 175+ E3D2 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E3D4
 177+ E3D4
 178+ E3D4              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 179+ E3D4              ; "No error trapping, if there is no null is will just cycle on the line"
 180+ E3D4
 181+ E3D4 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 182+ E3D5 FE 00                                cp	0
 183+ E3D7 C8                                   ret	z
 184+ E3D8 E5 D5 C5                             push	hl,,de,,bc
 185+ E3DB 57                                   ld		d,a							; bc = pos, de = char and colour
 186+ E3DC                                      ;TODOcallcall 	l2_print_7chr_at_320
 187+ E3DC C1 D1 E1                             pop		hl,,de,,bc
 188+ E3DF 08           .Move7Pixlestoright:	ex		af,af'
 189+ E3E0 79                                   ld		a,c
 190+ E3E1 C6 07                                add		7
 191+ E3E3 4F                                   ld		c,a
 192+ E3E4 08                                   ex		af,af'
 193+ E3E5 23                                   inc		hl
 194+ E3E6 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 195+ E3E8
 196+ E3E8
# file closed: ./Layer2Graphics/layer2_print_character.asm
 810  E3E8                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E3E8              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E3E8              ; TODO DMA Optimise
   3+ E3E8 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E3EB 53                                   ld      d,e
   5+ E3EC 5C                                   ld      e,h
   6+ E3ED CD 83 E4                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E3F0 E1 D1 C1                             pop     bc,,de,,hl
   8+ E3F3 04                                   inc     b
   9+ E3F4 15                                   dec     d
  10+ E3F5 C8                                   ret     z
  11+ E3F6 18 F0                                jr      l2_draw_fill_box
  12+ E3F8
  13+ E3F8              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E3F8 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E3FB 53                                   ld		d,e
  16+ E3FC 5F                                   ld		e,a
  17+ E3FD 14                                   inc		d
  18+ E3FE CD 83 E4                             call	l2_draw_horz_line
  19+ E401 F1 D1 C1                             pop		bc,,de,,af
  20+ E404 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E407 67                                   ld		h,a							;save color whilst b = row + height
  22+ E408 78                                   ld		a,b
  23+ E409 82                                   add		a,d
  24+ E40A 47                                   ld		b,a
  25+ E40B 53                                   ld		d,e							; d = width
  26+ E40C 14                                   inc		d							; Extra pixel for width
  27+ E40D 5C                                   ld		e,h							; e = colour
  28+ E40E CD 83 E4                             call	l2_draw_horz_line
  29+ E411 F1 D1 C1                             pop		bc,,de,,af
  30+ E414 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E417 04                                   inc		b							; save 2 pixles
  32+ E418 15                                   dec		d
  33+ E419 5F                                   ld		e,a							; e = color
  34+ E41A CD EE E4                             call	l2_draw_vert_line
  35+ E41D F1 D1 C1                             pop		bc,,de,,af
  36+ E420 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E421 15                                   dec		d
  38+ E422 67                                   ld		h,a							;save color whilst c = col + width
  39+ E423 79                                   ld		a,c
  40+ E424 83                                   add		a,e
  41+ E425 4F                                   ld		c,a
  42+ E426 5C                                   ld		e,h							; e = color
  43+ E427 CD EE E4                             call	l2_draw_vert_line
  44+ E42A C9                                   ret
  45+ E42B
  46+ E42B              ; "b = row, hl = col, c = height, de = width, a = colour"
  47+ E42B C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  48+ E42F                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  49+ E42F F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  50+ E433 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  51+ E437 08                                   ex      af,af'
  52+ E438 78                                   ld      a,b
  53+ E439 3D                                   dec     a
  54+ E43A 81                                   add     a,c
  55+ E43B 41                                   ld      b,c
  56+ E43C 08                                   ex      af,af'
  57+ E43D                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  58+ E43D F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  59+ E441 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  60+ E445                                      ;TODOcall    l2_draw_vert_line_320
  61+ E445 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  62+ E449 19                                   add     hl,de
  63+ E44A 2B                                   dec     hl
  64+ E44B                                      ;TODOcall    l2_draw_vert_line_320
  65+ E44B C9                                   ret
  66+ E44C
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 811  E44C                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E44C
   2+ E44C              ;; NOTE DMA is little endian
   3+ E44C 00           l2_horz_pixel           DB 0
   4+ E44D
   5+ E44D 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E451 7D
   6+ E452 4C E4        l2_horz_colr            DW l2_horz_pixel
   7+ E454 00           l2_horz_lenlo           DB 0
   8+ E455 00           l2_horz_lenhi           DB 0
   9+ E456 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E459 00 00        l2_horz_target          DB $00, $00
  11+ E45B CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E45D              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E45D
  14+ E45D
  15+ E45D              ; "l2_draw_horz_dma"
  16+ E45D              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E45D 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E45E 32 4C E4                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E461 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E462 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E464 ED 53 54 E4                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E468                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E468                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E468                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E468 ED 43 59 E4                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E46C 21 4D E4     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E46F 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E471 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E473 ED B3                                otir                                                      ;
  30+ E475 C9                                   ret
  31+ E476
  32+ E476              ; "bc = left side row,col, d = length, e = color"
  33+ E476 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E477 C5                                   push 	bc							; save row col
  35+ E478 78                                   ld   	a,b
  36+ E479 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E47C C1                                   pop  	bc
  38+ E47D 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E47E D1                                   pop  	de							; get length back
  40+ E47F CD 5D E4                             call    l2_draw_horz_dma
  41+ E482 C9                                   ret
  42+ E483
  43+ E483              ; "l2_draw_horz_line"
  44+ E483              ; "bc = left side row,col, d = length, e = color"
  45+ E483              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E483 7A           l2_draw_horz_line:      ld		a,d
  47+ E484 FE 00                                cp 		0							; if its zero length then just return
  48+ E486 C8           .zerolengthexit:        ret		z
  49+ E487 FE 01        .isitlen1:              cp 		1
  50+ E489 CA AB E4                             jp 		z,.l2_draw_horz_line_1
  51+ E48C FE 0A        .longenoughtfordma:     cp  10
  52+ E48E C3 76 E4                             jp  l2_draw_horz_dma_bank
  53+ E491 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E493 78                                   ld   	a,b
  55+ E494 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E497 C1                                   pop  	bc
  57+ E498 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E499 69                                   ld   	l,c
  59+ E49A D1                                   pop  	de							; get length back
  60+ E49B 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E49C 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E49D 82                                   add  	a,d
  63+ E49E 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E4A0 3E FF        .clipat255:             ld   	a,$FF
  65+ E4A2 91                                   sub  	c							; a holds clipped length
  66+ E4A3 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E4A4 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E4A6 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E4A7 23                                   inc hl
  70+ E4A8 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E4AA C9                                   ret
  72+ E4AB 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E4AC                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  73+ E4AC 78          >                        ld      a,b
  73+ E4AD             >                        JumpIfAGTENusng 192 ,.NoPlot
  73+ E4AD FE C0       >                        cp     192
  73+ E4AF D2 BB E4    >                        jp		nc,.NoPlot
  73+ E4B2 69          >                        ld      l,c
  73+ E4B3 CD 68 E0    >                        call    asm_l2_row_bank_select
  73+ E4B6 67          >                        ld      h,a
  73+ E4B7 3A 87 F0    >                        ld      a,(line_gfx_colour)
  73+ E4BA 77          >                        ld      (hl),a
  73+ E4BB             >.NoPlot:
  74+ E4BB C9                                   ret
  75+ E4BC
  76+ E4BC
  77+ E4BC              ; "l2_draw_horz_line_to"
  78+ E4BC              ; "bc = left side row,col, d right pixel, e = color"
  79+ E4BC 7A           l2_draw_horz_line_to:   ld 		a,d
  80+ E4BD B9                                   cp 		c
  81+ E4BE 30 04                                jr		nc, .noswap
  82+ E4C0 28 07                                jr      z, .singlepixel
  83+ E4C2 51           .swap:                  ld		d,c
  84+ E4C3 4F                                   ld		c,a
  85+ E4C4 7A           .noswap:                ld		a,d
  86+ E4C5 91                                   sub		c
  87+ E4C6              ;                        dec		a							; so now its length not offset
  88+ E4C6 57                                   ld		d,a
  89+ E4C7 18 BA                                jr 		l2_draw_horz_line			; hijack routine and return statements
  90+ E4C9 7B           .singlepixel:           ld		a,e
  91+ E4CA                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  91+ E4CA 78          >                        ld      a,b
  91+ E4CB             >                        JumpIfAGTENusng 192 ,.NoPlot
  91+ E4CB FE C0       >                        cp     192
  91+ E4CD D2 D9 E4    >                        jp		nc,.NoPlot
  91+ E4D0 69          >                        ld      l,c
  91+ E4D1 CD 68 E0    >                        call    asm_l2_row_bank_select
  91+ E4D4 67          >                        ld      h,a
  91+ E4D5 3A 87 F0    >                        ld      a,(line_gfx_colour)
  91+ E4D8 77          >                        ld      (hl),a
  91+ E4D9             >.NoPlot:
  92+ E4D9 C9                                   ret
  93+ E4DA
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 812  E4DA                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E4DA              ; ">l2_draw_vert_segment"
   2+ E4DA              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E4DA              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E4DA 7A           l2_draw_vert_segment:   ld		a,d
   5+ E4DB FE 00        .emptylinecheck:	    cp 		0
   6+ E4DD C8                                   ret		z
   7+ E4DE FE 01        .justonepixel	        cp		1
   8+ E4E0 20 02                                jr		nz, .multiplepixelsLoop
   9+ E4E2 73                                   ld		(hl),e
  10+ E4E3 C9                                   ret
  11+ E4E4              .multiplepixelsLoop:
  12+ E4E4 7C           .endofbankcheck:        ld   	a,h
  13+ E4E5 FE 40                                cp   	64
  14+ E4E7 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E4E8 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E4E9 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E4EA 15                                   dec		d
  18+ E4EB C8                                   ret		z
  19+ E4EC 18 F6                                jr		.multiplepixelsLoop
  20+ E4EE
  21+ E4EE              ; ">l2_draw_vert_line"
  22+ E4EE              ; ">bc = row col d = length, e = color"
  23+ E4EE 78           l2_draw_vert_line:      ld 		a,b
  24+ E4EF FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E4F1 D0                                   ret 	nc							; can't start off the screen
  26+ E4F2 7A           .emptylinecheck:        ld		a,d
  27+ E4F3 FE 00                                cp		0
  28+ E4F5 C8                                   ret		z
  29+ E4F6 FE 01                                cp		1
  30+ E4F8 20 10                                jr		nz,.multiplepixels
  31+ E4FA              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E4FA 78          >                        ld      a,b
  31+ E4FB             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E4FB FE C0       >                        cp     192
  31+ E4FD D2 09 E5    >                        jp		nc,.NoPlot
  31+ E500 69          >                        ld      l,c
  31+ E501 CD 68 E0    >                        call    asm_l2_row_bank_select
  31+ E504 67          >                        ld      h,a
  31+ E505 3A 87 F0    >                        ld      a,(line_gfx_colour)
  31+ E508 77          >                        ld      (hl),a
  31+ E509             >.NoPlot:
  32+ E509 C9                                   ret
  33+ E50A              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E50A 7A           .clipto192:             ld		a,d							; get length
  35+ E50B 80                                   add		a,b							; a= row + length
  36+ E50C 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E50E FE C0                                cp		SCREEN_HEIGHT
  38+ E510 38 08                                jr		c, .noclipneeded
  39+ E512 78           .needtoclip             ld		a,b
  40+ E513 82                                   add		a,d
  41+ E514 D6 C0                                sub		SCREEN_HEIGHT
  42+ E516 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E517 7A                                   ld		a,d
  44+ E518 94                                   sub		h
  45+ E519 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E51A              ; so now BC = row col, d = length clipped, e = color
  47+ E51A 78           .noclipneeded:          ld		a,b
  48+ E51B C5 D5                                push	bc,,de
  49+ E51D CD 68 E0                             call 	asm_l2_row_bank_select
  49+ E520               	 	; we now have poke address and a variable holding current bank number
  50+ E520 D1 C1                                pop		bc,,de
  51+ E522 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E523 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E524 CD DA E4                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E527 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E528 FE 00                                cp		0
  56+ E52A 28 27                                jr		z, .doneplotting
  57+ E52C 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E52F 3C                                   inc		a
  59+ E530 06 00                                ld		b,0
  60+ E532 C5 D5                                push	bc,,de
  61+ E534 CD 51 E0                             call 	asm_l2_bank_n_select
  62+ E537 D1 C1                                pop     bc,,de
  63+ E539 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E53A 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E53B CD DA E4                             call	l2_draw_vert_segment
  66+ E53E 7A                                   ld		a,d
  67+ E53F FE 00                                cp		0
  68+ E541 28 10                                jr		z,.doneplotting
  69+ E543 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E546 3C                                   inc		a
  71+ E547 06 00                                ld		b,0
  72+ E549 C5 D5                                push	bc,,de
  73+ E54B CD 51 E0                             call 	asm_l2_bank_n_select
  74+ E54E D1                                   pop		de
  75+ E54F E1                                   pop		hl							; hl = bc
  76+ E550 CD DA E4                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E553 C9           .doneplotting:	        ret
  78+ E554
  79+ E554              ; ">l2_draw_vert_line_to"
  80+ E554              ; ">bc = row col d = to position, e = color"
  81+ E554 78           l2_draw_vert_line_to:   ld		a,b
  82+ E555 BA                                   cp		d
  83+ E556 38 02                                jr		c, .noyswap
  84+ E558 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E559 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E55A 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E55B 90                                   sub		b
  88+ E55C 3C                                   inc		a			; so now its length not offset
  89+ E55D 57                                   ld		d,a
  90+ E55E 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E560                                      ; no return needed
  92+ E560
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 813  E560                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E560
   2+ E560              l2_draw_box_to:
   3+ E560              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E560              ; ">NOT IMPLEMENTED YET"
   5+ E560 C9           	ret
   6+ E561
   7+ E561              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E561              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E561              l2incbcstep EQU $03
  10+ E561              l2incbstep	EQU	$04
  11+ E561              l2decbstep	EQU $05
  12+ E561              l2decbcstep EQU $0B
  13+ E561              l2deccstep	EQU $0D
  14+ E561              l2inccstep	EQU	$0C
  15+ E561              l2incdestep EQU $13
  16+ E561              l2decdestep EQU $1B
  17+ E561              l2inchlstep EQU $23
  18+ E561              l2dechlstep EQU $2B
  19+ E561              		; l2 deltas are signed
  20+ E561 00 00        l2deltaY	DW	0
  21+ E563 00 00        l2deltaX	DW	0
  22+ E565 00           l2deltaYsq	db	0
  23+ E566 00           l2deltaXsq	db	0
  24+ E567 00           l2deltaYn	db	0
  25+ E568 00           l2deltaXn	db	0
  26+ E569 00           l2deltaYsqn	db	0
  27+ E56A 00           l2deltaXsqn	db	0
  28+ E56B 00           l2linecolor	db	0
  29+ E56C 00 00        l2fraction	dw	0
  30+ E56E 00 00        l2e2		dw	0
  31+ E570 00           l2way		db	0
  32+ E571 00 00        l2targetPtr	dw	0
  33+ E573              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  34+ E573 00 00 00...  l2targetArray1 ds	256
  35+ E673 00 00 00...  l2targetArray2 ds	256
  36+ E773              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  37+ E773              ;;plotLine(int x0, int y0, int x1, int y1)
  38+ E773              ;;    dx =  abs(x1-x0);
  39+ E773              ;;    sx = x0<x1 ? 1 : -1;
  40+ E773              ;;    dy = -abs(y1-y0);
  41+ E773              ;;    sy = y0<y1 ? 1 : -1;
  42+ E773              ;;    err = dx+dy;  /* error value e_xy */
  43+ E773              ;;    while (true)   /* loop */
  44+ E773              ;;        plot(x0, y0);
  45+ E773              ;;        if (x0==x1 && y0==y1) break;
  46+ E773              ;;        e2 = 2*err;
  47+ E773              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  48+ E773              ;;            err += dy;
  49+ E773              ;;            x0 += sx;
  50+ E773              ;;        end if
  51+ E773              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  52+ E773              ;;            err += dx;
  53+ E773              ;;            y0 += sy;
  54+ E773              ;;        end if
  55+ E773              ;;    end while
  56+ E773              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  57+ E773              ; ">hl will be either l2targetArray1 or 2"
  58+ E773              ; For S15 version we can still use the current table as this will hold final fill data
  59+ E773              ; but we have to come in with X1Y1 X2Y2 being 16 bit
  60+ E773              ; if the Y1Y2 are both off same side of screen or X1X2 both off same side them line array is set as empty
  61+ E773              ; so
  62+ E773              ;       for each line from Y1 to Y2
  63+ E773              ;           if calculate as normal
  64+ E773              ;                if off screen we don't write
  65+ E773              ;                if on screen we clip to 0,255  which is easy as a horizontal line
  66+ E773              ;           we will need a special case were a line is not rendered    we have x1=255 and X1 = 0, i.e. they are flipped
  67+ E773              ;              we could also cheat and say view port as 1 pixel edge border so we can count x1 = 0 as no line
  68+ E773
  69+ E773              ; This must be called with  Y1 < Y2 as we won;t do a pre check
  70+ E773              ; Caulates the temp x. IY [01] = X1 [23]=Y1 [45]=X2 [67]=Y2 [89]=midY3
  71+ E773              ; Draw a line from BC to DE, with target Y position in a, all values must be 2's C at this points
  72+ E773              ; calculate deltaX, deltaY for line.
  73+ E773              ; calculate offsetY = TargetY - Y1
  74+ E773              ; calculate XTarget = X1 + (deltaX/deltaY) *  offsetY
  75+ E773              ;;;l2DiagDeltaX    DW 0
  76+ E773              ;;;l2_diagonal_getx:       ld		hl,0                            ;
  77+ E773              ;;;                        ld      ixh,0                           ; flag byte clear
  78+ E773              ;;;                        ld      (target_y),a                    ; save target
  79+ E773              ;;;.calculateDeltaX:       ld      hl,(IY+4)
  80+ E773              ;;;                        ld      de,(IY+0)
  81+ E773              ;;;                        ClearCarryFlag
  82+ E773              ;;;                        sbc     hl,de
  83+ E773              ;;;                        ld      (l2DiagDeltaX),hl
  84+ E773              ;;;.calculateDeltaY:       ld      hl,(IY+6)
  85+ E773              ;;;                        ld      de,(IY+2)
  86+ E773              ;;;                        ClearCarryFlag
  87+ E773              ;;;                        sbc     hl,de
  88+ E773              ;;;                        ld      (l2DiagDeltaY),hl
  89+ E773              ;;;.ABSDx:                 ld      hl,(l2DiagDeltaX)
  90+ E773              ;;;                        ld      a,h
  91+ E773              ;;;                        and     $80
  92+ E773              ;;;                        jr      nz,.DxPositive
  93+ E773              ;;;.DxNegative:            macronegate16hl
  94+ E773              ;;;.DxPositive:            ex      de,hl                               ; de = deltaX
  95+ E773              ;;;                        ld      hl,(l2DiagDeltaY)
  96+ E773              ;;;                        ld      a,h
  97+ E773              ;;;                        and     $80
  98+ E773              ;;;                        jr      nz,.DyPositive
  99+ E773              ;;;.DyNegative:            macronegate16hl
 100+ E773              ;;;.DyPositive:
 101+ E773              ;;;.ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 102+ E773              ;;;                        or      d                                   ; .
 103+ E773              ;;;                        jr      z,.ScaleDone                        ; .
 104+ E773              ;;;                        ShiftDERight1                               ; .
 105+ E773              ;;;                        ShiftHLRight1                               ; .
 106+ E773              ;;;                        jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 107+ E773              ;;;.ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 108+ E773              ;;;.CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 109+ E773              ;;;                        JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 110+ E773              ;;;.DYdivDX:               ld      a,l                                 ;    A = DY
 111+ E773              ;;;                        ld      d,e                                 ;    D = DX
 112+ E773              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 113+ E773              ;;;.SaveGradientDYDX:      ld      (Gradient),a
 114+ E773              ;;;                        ld      a,ixh
 115+ E773              ;;;                        or      16
 116+ E773              ;;;                        ld      ixh,a                               ;
 117+ E773              ;;;                        jp      .ClipP1                             ;
 118+ E773              ;;;.DXdivDY:               ld      a,e                                 ;    A = DX
 119+ E773              ;;;                        ld      d,l                                 ;    D = DY
 120+ E773              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 121+ E773              ;;;.SaveGradientDXDY:      ld      (Gradient),a
 122+ E773              ;;;
 123+ E773              ;;;have X1 -> X
 124+ E773              ;;;need deltaMidY = MidY - Y0
 125+ E773              ;;;                        X0 + (DeltaMY * Gradient) but if the graident is flipped then its X0+(deltaMY / Gradient)
 126+ E773              ;;;
 127+ E773              ;;;
 128+ E773              ;;;.calculateDeltaY:
 129+ E773              ;;;.calcualteDxDyOrDyDx
 130+ E773              ;;;.calculate
 131+ E773              ;;;
 132+ E773              ; Total unoptimised version
 133+ E773              ; use hl, de, bc, af,
 134+ E773              ; no used yet ix iy
 135+ E773              ; can we do an ex for hl' and de' holding x and hl, de holding y?
 136+ E773                                  INCLUDE "./Layer2Graphics/int_bren_save.asm"
# file opened: ././Layer2Graphics/int_bren_save.asm
   1++E773              OPCODE_IncHL            EQU $23
   2++E773              OPCODE_DecHL            EQU $2B
   3++E773              OPCODE_IncHLIndirect    EQU $34
   4++E773              OPCODE_DecHLIndirect    EQU $35
   5++E773              OPCODE_IncDE            EQU $13
   6++E773              OPCODE_DecDE            EQU $1B
   7++E773              OPCODE_JpNCnn           EQU $D2
   8++E773              OPCODE_JpCnn            EQU $DA
   9++E773              LOWEST_SAVE             EQU 0
  10++E773              HIGHEST_SAVE            EQU 1
  11++E773
  12++E773              SetIncrement:           MACRO   Location
  13++E773 ~                                    ld      a,OPCODE_IncDE
  14++E773 ~                                    ld      (Location),a
  15++E773                                      ENDM
  16++E773              SetDecrement:           MACRO   Location
  17++E773 ~                                    ld      a,OPCODE_DecDE
  18++E773 ~                                    ld      (Location),a
  19++E773                                      ENDM
  20++E773
  21++E773              ; So next optimisation
  22++E773              ; we know that we start from row y0 to row Y0
  23++E773              ; so we can just reference that row range and zero it out rather than the whole
  24++E773              ; data set
  25++E773 00           l2_fillValue            DB 0
  26++E774
  27++E774 83 C3 C7 CB  l2_fill_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  27++E778 7D
  28++E779 73 E7        l2_fill_colr            DW l2_fillValue
  29++E77B FF           l2_fill_lenlo           DB 255
  30++E77C 00           l2_fill_lenhi           DB 0
  31++E77D 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  32++E780 00 00        l2_fill_target          DB $00, $00
  33++E782 CF 87                                DB DMA_LOAD, DMA_ENABLE
  34++E784              l2_bren_cmd_len	        EQU $ - l2_fill_line
  35++E784
  36++E784 32 73 E7     l2_fill_dma:            ld		(l2_fillValue),a                                 ; T=13     ;
  37++E787 22 80 E7                             ld      (l2_fill_target),hl
  38++E78A 21 74 E7     .write_dma:             ld 		hl, l2_fill_line                                  ;          ;
  39++E78D 06 10                                ld 		b, l2_bren_cmd_len                                ;
  40++E78F 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  41++E791 ED B3                                otir                                                      ;
  42++E793 C9                                   ret
  43++E794
  44++E794 00 00        l2_X0                   DW 0
  45++E796 00 00        l2_Y0                   DW 0
  46++E798 00 00        l2_X1                   DW 0
  47++E79A 00 00        l2_Y1                   DW 0
  48++E79C 00 00        l2_DX                   DW 0
  49++E79E 00 00        l2_DY                   DW 0
  50++E7A0 00 00        l2_Error                DW 0
  51++E7A2 00 00        l2_E2                   DW 0
  52++E7A4              ;; Need optimisation for vertical line and horizonal
  53++E7A4              int_bren_save_Array1Low:
  54++E7A4 3E FF                                ld      a,$FF
  55++E7A6 21 73 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
  56++E7A9 CD 84 E7                             call    l2_fill_dma
  57++E7AC 3E DA                                ld      a,OPCODE_JpCnn
  58++E7AE 21 73 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
  59++E7B1 C3 DF E7                             jp      int_bren_save_Array ;
  60++E7B4              int_bren_save_Array1High:
  61++E7B4                                      ZeroA
  61++E7B4 AF          >                        xor a
  62++E7B5 21 73 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
  63++E7B8 CD 84 E7                             call    l2_fill_dma
  64++E7BB 3E D2                                ld      a,OPCODE_JpNCnn
  65++E7BD 21 73 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
  66++E7C0 C3 DF E7                             jp      int_bren_save_Array ;
  67++E7C3              int_bren_save_Array2Low:
  68++E7C3 3E FF                                ld      a,$FF
  69++E7C5 21 73 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
  70++E7C8 CD 84 E7                             call    l2_fill_dma
  71++E7CB 3E DA                                ld      a,OPCODE_JpCnn
  72++E7CD 21 73 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
  73++E7D0 C3 DF E7                             jp      int_bren_save_Array ;
  74++E7D3              int_bren_save_Array2High:
  75++E7D3                                      ZeroA
  75++E7D3 AF          >                        xor a
  76++E7D4 21 73 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
  77++E7D7 CD 84 E7                             call    l2_fill_dma
  78++E7DA 21 73 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
  79++E7DD 3E D2                                ld      a,OPCODE_JpNCnn
  80++E7DF              ; Uses HL DE
  81++E7DF              ; Note this works out the last position for each point, not any intermediate
  82++E7DF              ; so we need a version that plots lowest for left line & highest for right line
  83++E7DF 22 6B E8     int_bren_save_Array:    ld      (.TargetArrayAddr+2),hl
  84++E7E2 32 7C E8                             ld      (.TargetJump),a
  85++E7E5 2A 98 E7                             ld      hl,(l2_X1)          ; if X0 < X1
  86++E7E8 ED 5B 94 E7                          ld      de,(l2_X0)          ; calculate SX DX
  87++E7EC              ; --- dx = abs(x1 - x0) & set up SX
  88++E7EC                                      ClearCarryFlag              ;
  88++E7EC B7          >                        or a
  89++E7ED ED 52                                sbc     hl,de               ;
  90++E7EF CB 7C                                bit     7,h                 ;
  91++E7F1 28 0E                                jr      z,.DXPositive       ;
  92++E7F3              .DXNegative:            NegHL                       ;
  92++E7F3 AF          >                    xor a
  92++E7F4 95          >                    sub l
  92++E7F5 6F          >                    ld l,a
  92++E7F6 9F          >                    sbc a,a
  92++E7F7 94          >                    sub h
  92++E7F8 67          >                    ld h,a
  93++E7F9                                      SetDecrement .UpdateX0Operation
  93++E7F9 3E 1B       >                        ld      a,OPCODE_DecDE
  93++E7FB 32 CC E8    >                        ld      (.UpdateX0Operation),a
  94++E7FE C3 06 E8                             jp      .DoneCalcDx         ;
  95++E801              .DXPositive:            SetIncrement .UpdateX0Operation
  95++E801 3E 13       >                        ld      a,OPCODE_IncDE
  95++E803 32 CC E8    >                        ld      (.UpdateX0Operation),a
  96++E806 22 9C E7     .DoneCalcDx:            ld      (l2_DX),hl          ;
  97++E809 ED 5B 94 E7                          ld      de,(l2_X0)          ; fetch in X0 so we can exx
  98++E80D ED 4B 98 E7                          ld      bc,(l2_X1)          ; and also X1
  99++E811 D9                                   exx                         ; ++now hl' = DX, DE'=X0, BC' = X1
 100++E812              ; --- dy = -abs(y1 - y0) & set up SY
 101++E812 2A 9A E7     .CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 102++E815 ED 5B 96 E7                          ld      de,(l2_Y0)          ; calculate SY DY
 103++E819                                      ClearCarryFlag              ;
 103++E819 B7          >                        or a
 104++E81A ED 52                                sbc     hl,de               ;
 105++E81C CB 7C                                bit     7,h                 ;
 106++E81E 28 08                                jr      z,.DYPositive       ;
 107++E820              .DYNegative:            SetDecrement .UpdateY0Operation
 107++E820 3E 1B       >                        ld      a,OPCODE_DecDE
 107++E822 32 03 E9    >                        ld      (.UpdateY0Operation),a
 108++E825 C3 06 E8                             jp      .DoneCalcDx         ;
 109++E828              .DYPositive:            NegHL                       ;
 109++E828 AF          >                    xor a
 109++E829 95          >                    sub l
 109++E82A 6F          >                    ld l,a
 109++E82B 9F          >                    sbc a,a
 109++E82C 94          >                    sub h
 109++E82D 67          >                    ld h,a
 110++E82E                                      SetIncrement .UpdateY0Operation
 110++E82E 3E 13       >                        ld      a,OPCODE_IncDE
 110++E830 32 03 E9    >                        ld      (.UpdateY0Operation),a
 111++E833 22 9E E7     .DoneCalcDy:            ld      (l2_DY),hl
 112++E836 ED 5B 96 E7                          ld      de,(l2_Y0)          ; fetch in X0
 113++E83A ED 4B 9A E7                          ld      bc,(l2_Y1)          ; now hl = DY, DE=Y0, BC = Y1
 114++E83E              ; ---   error = dx + dy >> at this point hl' = DX, DE'=X0, BC' = X1 and hl = DY, DE=Y0, BC = Y1
 115++E83E E5 FD E1     .CalcError:             ld      iy,hl               ; fetch DY into IY
 116++E841 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 117++E842 EB                                   ex      de,hl               ; quickly flip over de and to support add instruction
 118++E843 FD 19                                add     iy,de               ; we have set up IY as L2_Error
 119++E845 EB                                   ex      de,hl
 120++E846 FD 22 A0 E7                          ld      (l2_Error),iy
 121++E84A              ; --- While True        >> at this point we are looing at DX and need to consider state at iteration loop
 122++E84A D9           .CalcLoop:              exx                         ; ++now looking at DY data set and DX in alternate
 123++E84B                                      ;ld      hl,(l2_X0)         ; get X0 and Y0
 124++E84B              ; --- PLOT X0, Y0       >> now looking at DY data set and DX in alternate
 125++E84B              .CheckYRange:           ;ld      de,(l2_Y0)
 126++E84B 7A                                   ld      a,d                 ; if Y0 > 127
 127++E84C A7                                   and     a                   ; or Y0 is negative
 128++E84D 20 35                                jr      nz,.YOutOfRange     ; then we can skip the plot
 129++E84F 7B                                   ld      a,e                 ;
 130++E850 E6 80                                and     $80                 ;
 131++E852 20 30                                jr      nz,.YOutOfRange     ;
 132++E854 D9           .CheckXRange:           exx                         ; ++now looking at DX data set and DY in alternate
 133++E855 7A                                   ld      a,d                 ; if X0 is negative
 134++E856 A7                                   and     a
 135++E857 28 0E                                jr      z,.XOKToPlot
 136++E859 E6 80                                and     $80
 137++E85B 28 05                                jr      z,.NotXNegative
 138++E85D 3E 00        .XNegative:             ld      a,0                 ; if X0 <0 > 255 then clamp it
 139++E85F C3 68 E8                             jp      .ClipXDone          ;
 140++E862 3E FF        .NotXNegative:          ld      a,255               ;
 141++E864 C3 68 E8                             jp      .ClipXDone          ;
 142++E867 7B           .XOKToPlot:             ld      a,e                 ; no clip therefore we can just use X0 as is
 143++E868 D9           .ClipXDone:             exx                         ; ++now looking at DY data set and DX in alternate
 144++E869 DD 21 73 E5  .TargetArrayAddr:       ld      ix,l2targetArray1   ; later this will be self modifying
 145++E86D 08                                   ex      af,af'
 146++E86E 7B                                   ld      a,e
 147++E86F 32 7A E8                             ld      (.TargetRead+2),a   ; Write Y0 offset to IX offset
 148++E872 32 82 E8                             ld      (.TargetWrite+2),a  ; Write Y0 offset to IX offset
 149++E875 08                                   ex      af,af'
 150++E876 C5                                   push    bc
 151++E877 47                                   ld      b,a
 152++E878 DD 7E 00     .TargetRead:            ld      a,(IX+0)
 153++E87B B8                                   cp      b
 154++E87C DA 83 E8     .TargetJump:            jp      c,.SkipWrite
 155++E87F 78                                   ld      a,b
 156++E880 DD 77 00     .TargetWrite:           ld      (IX+0),a            ; directly updates l2targetArray1
 157++E883 C1           .SkipWrite:             pop     bc
 158++E884              ; --- if x0 == x1 && y0 == y1 break
 159++E884              .YOutOfRange: ; At this point we have either plotted or its outside array range
 160++E884 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 161++E885              ;                        ld      bc,(l2_X1)
 162++E885              .CheckEndXY:            cpDEEquBC .CheckEndXYOK     ; de will equal X0 still by here
 162++E885 7A          >                        ld      a,d
 162++E886 B8          >                        cp      b
 162++E887 C2 8F E8    >                        jp      nz, .CheckEndXYOK
 162++E88A 7B          >                        ld      a,e
 162++E88B B9          >                        cp      c
 162++E88C             >.NoTheSame:
 163++E88C C2 99 E8                             jp      nz,.x0x1Differ
 164++E88F D9           .CheckEndXYOK:          exx                         ; ++ in this branch in this branchnow looking at DY data set and DX in alternate
 165++E890              ;                        ld      bc,(l2_Y1)
 166++E890                                      cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 166++E890 7A          >                        ld      a,d
 166++E891 B8          >                        cp      b
 166++E892 C2 99 E8    >                        jp      nz, .x0x1Differ
 166++E895 7B          >                        ld      a,e
 166++E896 B9          >                        cp      c
 166++E897             >.NoTheSame:
 167++E897 D9                                   exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 168++E898 C8                                   ret     z                   ; if they are both the same we are done
 169++E899              .x0x1Differ:                                        ; by this point we could be looking at DX on all branches
 170++E899              ; --- e2 = 2 * error
 171++E899 D9           .SetError2:             exx                         ; ++now looking at DY data set and DX in alternate
 172++E89A E5 D5                                push    hl,,de              ; save HL
 173++E89C EB                                   ex      de,hl               ; de = DY; could futher optimise to check DY>E2 and reduce instruction count
 174++E89D FD E5 E1                             ld      hl,iy;(l2_Error)       ; e2 = 2 * error
 175++E8A0 29                                   add     hl,hl               ; .
 176++E8A1 22 A2 E7                             ld      (l2_E2),hl          ; .
 177++E8A4                                      ; before here we are looking at DY
 178++E8A4              ; --- if e2 >= dy
 179++E8A4 CD B6 99     .CheckE2gteDY:          call    compare16HLDE       ; .
 180++E8A7 D1 E1                                pop     hl,,de              ; before jumps get HL back
 181++E8A9 EA B2 E8                             jp      pe, .E2DyParitySet  ; Jump looking at DY
 182++E8AC FA CE E8                             jp      m,  .E2ltDY         ; Jump looking at DY to get here overflow clear, so if m is set then HL<DE
 183++E8AF C3 B5 E8                             jp      .E2gteDY            ; Jump looking at DY
 184++E8B2              .E2DyParitySet:         ; entering here looking at DY
 185++E8B2 F2 CE E8                             jp      p,  .E2ltDY         ; Jump looking at DY if pe is set, then if sign is clear HL<DE
 186++E8B5              ; --- if x0 == x1 break
 187++E8B5 D9           .E2gteDY:               exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 188++E8B6                                      cpDEEquBC .ErrorUpdateDY    ;      if x0 == x1 break
 188++E8B6 7A          >                        ld      a,d
 188++E8B7 B8          >                        cp      b
 188++E8B8 C2 BE E8    >                        jp      nz, .ErrorUpdateDY
 188++E8BB 7B          >                        ld      a,e
 188++E8BC B9          >                        cp      c
 188++E8BD             >.NoTheSame:
 189++E8BD C8                                   ret     z                   ;      .
 190++E8BE              ; --- error = error + dy
 191++E8BE D9           .ErrorUpdateDY:         exx                         ; if we get here we are looking at DY data set and DX in alternate
 192++E8BF E5 D5                                push    hl,,de              ; save HL
 193++E8C1 EB                                   ex      de,hl               ; de = DY
 194++E8C2 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dy
 195++E8C5 19                                   add     hl,de               ;      .
 196++E8C6 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 197++E8C9 D1 E1                                pop     hl,,de
 198++E8CB              ; --- x0 = x0 + sx
 199++E8CB D9           .UpdateX0:              exx                         ; now back looking at DX data set and DY in alternate
 200++E8CC 00           .UpdateX0Operation:     nop                         ;      x0 = x0 +/- sx
 201++E8CD D9                                   exx                         ; correction on this brach so we are looking at DY
 202++E8CE              .E2ltDY:                ; entering here, looking at DY in all branches
 203++E8CE              ; --- if e2 <= dx
 204++E8CE D9           .CheckE2lteDX:          exx                         ; we want to look at DX
 205++E8CF E5 D5                                push    hl,,de
 206++E8D1 EB                                   ex      de,hl               ; de = l2_DX
 207++E8D2 2A A2 E7                             ld      hl,(l2_E2)          ; if e2 <= dx
 208++E8D5              ;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 209++E8D5 CD B6 99                             call    compare16HLDE       ; we will jump based on e2 <= dx
 210++E8D8 D1 E1                                pop     hl,,de              ; recover saved HL DE
 211++E8DA CA EC E8                             jp      z, .E2lteDX         ; Jump looking at DX
 212++E8DD EA E6 E8                             jp      pe, .E2DxParitySet  ; Jump looking at DX
 213++E8E0 FA EC E8                             jp      m,  .E2lteDX        ; Jump looking at DX : to get here overflow clear, so if m is set then HL<DE
 214++E8E3 C3 05 E9                             jp      .E2gteDx            ; Jump looking at DX
 215++E8E6 F2 EC E8     .E2DxParitySet:         jp      p,  .E2lteDX        ; Jump looking at DX
 216++E8E9 C3 05 E9                             jp      .E2gteDx            ; Jump looking at DX
 217++E8EC              ; ---  if y0 == y1 break
 218++E8EC              .E2lteDX:               ; Entry looking at DX
 219++E8EC D9                                   exx                         ;      in branch looking at DY
 220++E8ED                                      cpDEEquBC .ErrorUpdateDX    ;      .
 220++E8ED 7A          >                        ld      a,d
 220++E8EE B8          >                        cp      b
 220++E8EF C2 F6 E8    >                        jp      nz, .ErrorUpdateDX
 220++E8F2 7B          >                        ld      a,e
 220++E8F3 B9          >                        cp      c
 220++E8F4             >.NoTheSame:
 221++E8F4 D9                                   exx                         ;      in branch looking at DX
 222++E8F5 C8                                   ret     z                   ;      .
 223++E8F6              ; --- error = error + dx
 224++E8F6              .ErrorUpdateDX:         ; at this point will be looking at DX
 225++E8F6 E5 D5                                push    hl,,de
 226++E8F8 EB                                   ex      de,hl               ;      de = DY
 227++E8F9 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dx
 228++E8FC 19                                   add     hl,de               ;      .
 229++E8FD E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 230++E900 D1 E1                                pop     hl,,de
 231++E902              ; --- y0 = y0 + sy
 232++E902 D9           .UpdateY0:              exx                         ;      in this branch we are looking at DY
 233++E903 00           .UpdateY0Operation:     nop                         ;      y0 = y0 + sy
 234++E904 D9                                   exx                         ;      in this branch we are looking at
 235++E905              ; --- Loop
 236++E905              .E2gteDx:               ; at this point will be looking at DX again
 237++E905 C3 4A E8                             jp      .CalcLoop           ; repeat until we have a return
 238++E908
# file closed: ././Layer2Graphics/int_bren_save.asm
 137+ E908              ;;;l2_X0                   DW 0
 138+ E908              ;;;l2_Y0                   DW 0
 139+ E908              ;;;l2_X1                   DW 0
 140+ E908              ;;;l2_Y1                   DW 0
 141+ E908              ;;;l2_DX                   DW 0
 142+ E908              ;;;l2_DY                   DW 0
 143+ E908              ;;;l2_SX                   DW 0
 144+ E908              ;;;l2_SY                   DW 0
 145+ E908              ;;;l2_Error                DW 0
 146+ E908              ;;;l2_E2                   DW 0
 147+ E908              ;;;int_bren_save_Array1:   ld      hl,(l2_X1)          ; if X0 < X1
 148+ E908              ;;;                        ld      de,(l2_X0)          ; calculate SX DX
 149+ E908              ;;;                        ClearCarryFlag              ;
 150+ E908              ;;;                        sbc     hl,de               ;
 151+ E908              ;;;                        bit     7,h                 ;
 152+ E908              ;;;                        jr      z,.DXPositive       ;
 153+ E908              ;;;.DXNegative:            NegHL                       ;
 154+ E908              ;;;                        ld      bc,-1               ;
 155+ E908              ;;;                        jp      .DoneCalcDx         ;
 156+ E908              ;;;.DXPositive:            ld      bc,1                ;
 157+ E908              ;;;.DoneCalcDx:            ld      (l2_SX),bc          ;
 158+ E908              ;;;                        ld      (l2_DX),hl          ;
 159+ E908              ;;;.CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 160+ E908              ;;;                        ld      de,(l2_Y0)          ; calculate SY DY
 161+ E908              ;;;                        ClearCarryFlag              ;
 162+ E908              ;;;                        sbc     hl,de               ;
 163+ E908              ;;;                        bit     7,h                 ;
 164+ E908              ;;;                        jr      z,.DYPositive       ;
 165+ E908              ;;;.DYNegative:            ld      bc,-1               ;
 166+ E908              ;;;                        jp      .DoneCalcDx         ;
 167+ E908              ;;;.DYPositive:            NegHL                       ;
 168+ E908              ;;;                        ld      bc,1                ;
 169+ E908              ;;;.DoneCalcDy:            ld      (l2_SY),bc          ;
 170+ E908              ;;;                        ld      (l2_DY),hl
 171+ E908              ;;;.CalcError:             ld      hl,(l2_DX)
 172+ E908              ;;;                        ld      de,(l2_DY)
 173+ E908              ;;;                        add     hl,de
 174+ E908              ;;;                        ld      (l2_Error),hl
 175+ E908              ;;;.CalcLoop:              break
 176+ E908              ;;;                        ld      hl,(l2_X0)          ; get X0 and Y0
 177+ E908              ;;;.CheckYRange:           ld      de,(l2_Y0)
 178+ E908              ;;;                        ld      a,d                 ; if Y > 127
 179+ E908              ;;;                        and     a                   ; or Y is negative
 180+ E908              ;;;                        jr      nz,.YOutOfRange     ; then we can skip the plot
 181+ E908              ;;;                        ld      a,e                 ;
 182+ E908              ;;;                        and     $80                 ;
 183+ E908              ;;;                        jr      nz,.YOutOfRange     ;
 184+ E908              ;;;.CheckXRange:           ld      a,h                 ; if X0 is negative
 185+ E908              ;;;                        and     a
 186+ E908              ;;;                        jr      z,.XOKToPlot
 187+ E908              ;;;                        and     $80
 188+ E908              ;;;                        jr      z,.NotXNegative
 189+ E908              ;;;.XNegative:             ld      a,0
 190+ E908              ;;;                        jp      .ClipXDone
 191+ E908              ;;;.NotXNegative:          ld      a,255
 192+ E908              ;;;                        jp      .ClipXDone
 193+ E908              ;;;.XOKToPlot:             ld      a,l                 ; no clip therefore we can just use l
 194+ E908              ;;;.ClipXDone:             push    hl
 195+ E908              ;;;                        push    af                  ; using the Y coordinate
 196+ E908              ;;;                        ld      hl,l2targetArray1   ; plot the X value for this row
 197+ E908              ;;;                        ld      a,e
 198+ E908              ;;;                        add     hl,a
 199+ E908              ;;;                        pop     af
 200+ E908              ;;;                        ld      (hl),a
 201+ E908              ;;;                        pop     hl
 202+ E908              ;;;.YOutOfRange: ; At this point we have either plotted or its outside array range
 203+ E908              ;;;                        ld      bc,(l2_X1)
 204+ E908              ;;;.CheckEndXY:            cpHLEquBC .CheckEndXYOK     ; hl will equal X0 still by here
 205+ E908              ;;;                        jp      nz,.x0x1Differ
 206+ E908              ;;;.CheckEndXYOK:          ld      bc,(l2_Y1)
 207+ E908              ;;;                        cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 208+ E908              ;;;                        ret     z                   ; if they are both the same we are done
 209+ E908              ;;;.x0x1Differ:
 210+ E908              ;;;.SetError2:             ld      hl,(l2_Error)       ; e2 = 2 * error
 211+ E908              ;;;                        add     hl,hl               ; .
 212+ E908              ;;;                        ld      (l2_E2),hl          ; .
 213+ E908              ;;;.CheckE2gteDY:          ld      de,(l2_DY)          ; if e2 >= dy
 214+ E908              ;;;                        call    compare16HLDE       ; .
 215+ E908              ;;;                        jp      pe, .E2DyParitySet
 216+ E908              ;;;                        jp      m,  .E2ltDY         ; to get here overflow clear, so if m is set then HL<DE
 217+ E908              ;;;                        jp      .E2gteDY
 218+ E908              ;;;.E2DyParitySet:         jp      p,  .E2ltDY         ; if pe is set, then if sign is clear HL<DE
 219+ E908              ;;;.E2gteDY:               ld      hl,(l2_X0)          ;      if x0 == x1 break
 220+ E908              ;;;                        ld      de,(l2_X1)          ;      .
 221+ E908              ;;;                        cpHLEquDE .ErrorUpdateDY    ;      .
 222+ E908              ;;;                        ret     z                   ;      .
 223+ E908              ;;;.ErrorUpdateDY:         ld      hl,(l2_Error)       ;      error = error + dy
 224+ E908              ;;;                        ld      de,(l2_DY)          ;      .
 225+ E908              ;;;                        add     hl,de               ;      .
 226+ E908              ;;;                        ld      (l2_Error),hl       ;      .
 227+ E908              ;;;.UpdateX0:              ld      hl,(l2_X0)          ;      x0 = x0 + sx
 228+ E908              ;;;                        ld      bc,(l2_SX)          ;      .
 229+ E908              ;;;                        add     hl,bc               ;      .
 230+ E908              ;;;                        ld      (l2_X0),hl          ;      .
 231+ E908              ;;;.E2ltDY:
 232+ E908              ;;;.CheckE2lteDX:          ld      hl,(l2_E2)          ; if e2 <= dx
 233+ E908              ;;;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 234+ E908              ;;;                        call    compare16HLDE       ; we will jump based on e2 <= dx
 235+ E908              ;;;                        jp      z, .E2lteDX
 236+ E908              ;;;                        jp      pe, .E2DxParitySet
 237+ E908              ;;;                        jp      m,  .E2lteDX         ; to get here overflow clear, so if m is set then HL<DE
 238+ E908              ;;;                        jp      .E2gteDx
 239+ E908              ;;;.E2DxParitySet:         jp      p,  .E2lteDX
 240+ E908              ;;;                        jp      .E2gteDx
 241+ E908              ;;;.E2lteDX:               ld      hl,(l2_Y0)          ;      .
 242+ E908              ;;;                        ld      de,(l2_Y1)          ;      .
 243+ E908              ;;;                        cpHLEquDE .ErrorUdpateDX    ;      .
 244+ E908              ;;;                        ret     z                   ;      .
 245+ E908              ;;;.ErrorUdpateDX:         ld      hl,(l2_Error)       ;      error = error + dx
 246+ E908              ;;;                        ld      de,(l2_DX)          ;      .
 247+ E908              ;;;                        add     hl,de               ;      .
 248+ E908              ;;;                        ld      (l2_Error),hl       ;      .
 249+ E908              ;;;.UpdateY0:              ld      hl,(l2_Y0)          ;      x0 = x0 + sx
 250+ E908              ;;;                        ld      bc,(l2_SY)          ;      .
 251+ E908              ;;;                        add     hl,bc              ;      .
 252+ E908              ;;;                        ld      (l2_Y0),hl         ;      .
 253+ E908              ;;;.E2gteDx:               jp      .CalcLoop           ; repeat until we have a return
 254+ E908
 255+ E908
 256+ E908              ;;;;;;;; for this it myst always be sorted Y0 -> Y2
 257+ E908              ;;;;;;;;; note we ca't use this to do x? as it will clip inherently
 258+ E908              ;;;;;;;l2_save_diagnonal_signed_1:
 259+ E908              ;;;;;;;                        ld		hl,0                            ;
 260+ E908              ;;;;;;;                        ld		(l2deltaX),hl                   ;
 261+ E908              ;;;;;;;                        ld		(l2deltaY),hl
 262+ E908              ;;;;;;;.CheckYOnScreen:        ld      de,(l2_commonTopY)
 263+ E908              ;;;;;;;                        ld      hl,(l2_bottomY)
 264+ E908              ;;;;;;;                        ld      a,d
 265+ E908              ;;;;;;;                        and     h
 266+ E908              ;;;;;;;                        and     $80
 267+ E908              ;;;;;;;                        jr      nz,.OffScreen
 268+ E908              ;;;;;;;;...dy = y1 - y0
 269+ E908              ;;;;;;;.CalcDeltaY:            ClearCarryFlag
 270+ E908              ;;;;;;;                        sbc     hl,de                           ; now delta is signed, if its negative then something bad as gone wrong
 271+ E908              ;;;;;;;                        ld      a,h
 272+ E908              ;;;;;;;                        and     $80
 273+ E908              ;;;;;;;                        jr      nz,.OffScreen
 274+ E908              ;;;;;;;                        ld      (l2deltaY),hl                   ; Delta signed
 275+ E908              ;;;;;;;CheckXOnScreen:         ld      de,(l2_leftX)
 276+ E908              ;;;;;;;                        ld      hl,(l2_rightX)
 277+ E908              ;;;;;;;                        ld      a,d
 278+ E908              ;;;;;;;                        and     h
 279+ E908              ;;;;;;;                        and     $80
 280+ E908              ;;;;;;;                        jr      nz,.OffScreen
 281+ E908              ;;;;;;;                        ClearCarryFlag
 282+ E908              ;;;;;;;;...dx = x1 - x0
 283+ E908              ;;;;;;;.CalcDeltaX:            sbc     hl,de                           ; now delta is signed, could be negative
 284+ E908              ;;;;;;;                        ld      (l2deltaX),hl                   ; Delta signed
 285+ E908              ;;;;;;;                        ld      a,h
 286+ E908              ;;;;;;;                        and     $80
 287+ E908              ;;;;;;;                        jr      nz,.LeftToRight
 288+ E908              ;;;;;;;.RightToLeft:           set up instrnctin
 289+ E908              ;;;;;;;.LeftToRight:           set up instrnctin
 290+ E908              ;;;;;;;.setErr:									                    ;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 291+ E908              ;;;;;;;,FracDYltDX:            ld		hl,(l2deltaY)					; Fraction = dY - dX
 292+ E908              ;;;;;;;                        ld		de,(l2deltaX)
 293+ E908              ;;;;;;;                        ClearCarryFlag
 294+ E908              ;;;;;;;                        sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 295+ E908              ;;;;;;;                        ex		de,hl
 296+ E908              ;;;;;;;                        ld		iyh,d							; we will use IY reg for fractions
 297+ E908              ;;;;;;;                        ld		iyl,e
 298+ E908              ;;;;;;;                        jp		p,.fracIsPositive
 299+ E908              ;;;;;;;
 300+ E908              ;;;;;;;plotLine(x0, y0, x1, y1)
 301+ E908              ;;;;;;;    dx = x1 - x0
 302+ E908              ;;;;;;;    dy = y1 - y0
 303+ E908              ;;;;;;;    D = 2*dy - dx
 304+ E908              ;;;;;;;    y = y0
 305+ E908              ;;;;;;;
 306+ E908              ;;;;;;;    for x from x0 to x1
 307+ E908              ;;;;;;;        plot(x,y)
 308+ E908              ;;;;;;;        if D > 0
 309+ E908              ;;;;;;;            y = y + 1
 310+ E908              ;;;;;;;            D = D - 2*dx
 311+ E908              ;;;;;;;        end if
 312+ E908              ;;;;;;;        D = D + 2*dy
 313+ E908              ;;;;;;;
 314+ E908
 315+ E908
 316+ E908
 317+ E908              ;;;;;.fracIsNegative:        NegIY
 318+ E908              ;;;;;                        ShiftIYRight1
 319+ E908              ;;;;;                        NegIY
 320+ E908              ;;;;;                        jp		.SkipCalcInc					; so we have a negative frac
 321+ E908              ;;;;;.fracIsPositive:        ShiftIYRight1
 322+ E908              ;;;;;.SkipCalcInc:		                        			    	; As we loop, bc = to plot current XY
 323+ E908              ;;;;;.preTargetArray:	    ld		hl,l2targetArray1               ; Assuming row 0
 324+ E908              ;;;;;l2S_setTarget:	        ld		(l2targetPtr),hl
 325+ E908              ;;;;;                                                                ; set DE to current row
 326+ E908              ;;;;;.S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 327+ E908              ;;;;;                                                                ; calculate current row
 328+ E908              ;;;;;                                                                ; if current row >= 0
 329+ E908              ;;;;;                                                                ; write current X value in DE to (hl)
 330+ E908              ;;;;;                        ld		a,b
 331+ E908              ;;;;;                        add		hl,a
 332+ E908              ;;;;;                        ld		(hl),c
 333+ E908              ;;;;;l2S_CheckIfEnd:	        ld		a,ixh
 334+ E908              ;;;;;                        JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 335+ E908              ;;;;;                        jp		l2S_Continue
 336+ E908              ;;;;;l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 337+ E908              ;;;;;                        cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 338+ E908              ;;;;;                        jr      z,.IncCP
 339+ E908              ;;;;;.DecCP:                 ld      a,c
 340+ E908              ;;;;;                        ReturnIfALTNusng ixl
 341+ E908              ;;;;;                        ReturnIfAEqNusng ixl
 342+ E908              ;;;;;                        jp      l2S_Continue
 343+ E908              ;;;;;.IncCP:                 ld		a,c
 344+ E908              ;;;;;                        ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 345+ E908              ;;;;;l2S_Continue:
 346+ E908              ;;;;;l2S_HNegative:			ld		a,iyh
 347+ E908              ;;;;;                        bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 348+ E908              ;;;;;                        jr		z,l2S_ErrNotNegative			;
 349+ E908              ;;;;;l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 350+ E908              ;;;;;                        ld		d,0
 351+ E908              ;;;;;                        ld		e,a
 352+ E908              ;;;;;                        add		iy,de							; add deltaY(unsinged) to l2fraction
 353+ E908              ;;;;;l2S_adjustCol:          nop										; this is our inc/dec of X
 354+ E908              ;;;;;                        jr		l2S_Loop							; repeat loop
 355+ E908              ;;;;;l2S_ErrNotNegative:     ld		a,iyh
 356+ E908              ;;;;;                        or		iyl
 357+ E908              ;;;;;                        JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 358+ E908              ;;;;;l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 359+ E908              ;;;;;                        ex		de,hl
 360+ E908              ;;;;;                        ld		d,0
 361+ E908              ;;;;;                        ld		a,(l2deltaX)
 362+ E908              ;;;;;                        ld		e,a
 363+ E908              ;;;;;                        ClearCarryFlag
 364+ E908              ;;;;;                        sbc		hl,de
 365+ E908              ;;;;;                        ex		de,hl
 366+ E908              ;;;;;                        ld      iy,de;ldiyde
 367+ E908              ;;;;;l2S_adjustRow:          inc		b								; move Y down by one
 368+ E908              ;;;;;                        jr		l2S_Loop
 369+ E908              ;;;;;l2S_ErrZero:            ld		hl,(l2deltaX)
 370+ E908              ;;;;;                        ex		de,hl
 371+ E908              ;;;;;                        ld		hl,(l2deltaY)
 372+ E908              ;;;;;                        ClearCarryFlag
 373+ E908              ;;;;;                        sbc		hl,de
 374+ E908              ;;;;;                        ex		de,hl
 375+ E908              ;;;;;                        ld      iy,de; ldiyde
 376+ E908              ;;;;;l2S_adjustCol2:         nop										; update X and Y
 377+ E908              ;;;;;                        inc		b
 378+ E908              ;;;;;                        jr		l2S_Loop
 379+ E908              ;;;;;
 380+ E908              ;;;;;.OffScreen:             SetCarryFlag
 381+ E908              ;;;;;                        ret
 382+ E908              ;;;;;
 383+ E908              ;;;;;
 384+ E908
 385+ E908
 386+ E908
 387+ E908 FE 01        l2_draw_diagonal_save:  cp		1
 388+ E90A 28 06                                jr		z,l2S_ItsArray1
 389+ E90C 21 73 E6                             ld		hl,l2targetArray2
 390+ E90F C3 15 E9                             jp		l2S_setTarget
 391+ E912 21 73 E5     l2S_ItsArray1:	        ld		hl,l2targetArray1
 392+ E915 22 71 E5     l2S_setTarget:	        ld		(l2targetPtr),hl
 393+ E918              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 394+ E918 32 6B E5                             ld		(l2linecolor),a					;save colour for later
 395+ E91B 21 00 00                             ld		hl,0                            ;
 396+ E91E 22 63 E5                             ld		(l2deltaX),hl                   ;
 397+ E921 22 61 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 398+ E924 78           l2S_preSort:            ld		a,b								;
 399+ E925                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 399+ E925 BA          >                        cp      d
 399+ E926 DA 2E E9    >                        jp		c, l2S_noYSort
 400+ E929              l2S_SortBasedOnY:	    ldhlbc									;
 400+ E929 60          >                        ld		h,b
 400+ E92A 69          >                        ld		l,c
 401+ E92B EB                                   ex		de,hl                           ;
 402+ E92C                                      ldbchl									; swap over bc and de using hl as an intermediate
 402+ E92C 44          >                        ld		b,h
 402+ E92D 4D          >                        ld		c,l
 403+ E92E DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 404+ E930 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 405+ E932 79           l2S_setXLen:            ld		a,c                             ;
 406+ E933                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
 406+ E933 BB          >                        cp      e
 406+ E934 DA 40 E9    >                        jp		c, l2S_PosXLen
 407+ E937 79           l2S_NegXLen:            ld		a,c                             ;
 408+ E938 93                                   sub     e                               ;
 409+ E939 32 63 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 410+ E93C 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 411+ E93E 18 07                                jr		l2S_XINCDEC
 412+ E940              ; we set comparison
 413+ E940 7B           l2S_PosXLen:	        ld		a,e                             ;
 414+ E941 91                                   sub		c                               ;
 415+ E942 32 63 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 416+ E945 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 417+ E947              ; also need to fix the comparison, if its +x then compare with
 418+ E947 32 C4 E9     l2S_XINCDEC:	        ld		(l2S_adjustCol),a				;
 419+ E94A 32 F4 E9                             ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 420+ E94D 7A           l2S_setYLen:            ld		a,d							 	; presorted on Y so it is now always positive
 421+ E94E 90                                   sub		b
 422+ E94F 32 61 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 423+ E952              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 424+ E952 2A 61 E5     ldS_FracDYltDX:         ld		hl,(l2deltaY)					; Fraction = dY - dX
 425+ E955 ED 5B 63 E5                          ld		de,(l2deltaX)
 426+ E959                                      ClearCarryFlag
 426+ E959 B7          >                        or a
 427+ E95A ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 428+ E95C EB                                   ex		de,hl
 429+ E95D FD 62                                ld		iyh,d							; we will use IY reg for fractions
 430+ E95F FD 6B                                ld		iyl,e
 431+ E961 F2 86 E9                             jp		p,l2S_fracIsPositive
 432+ E964              l2S_fracIsNegative:     NegIY
 432+ E964 AF          >                    xor a
 432+ E965 FD 95       >                    sub iyl
 432+ E967 FD 6F       >                    ld iyl,a
 432+ E969 9F          >                    sbc a,a
 432+ E96A FD 94       >                    sub iyh
 432+ E96C FD 67       >                    ld iyh,a
 433+ E96E                                      ShiftIYRight1
 433+ E96E FD 7C       >			   ld 	a,iyh
 433+ E970 CB 3F       >			   srl 	a
 433+ E972 FD 67       >			   ld	iyh,a
 433+ E974 FD 7D       >			   ld 	a,iyl
 433+ E976 1F          >			   rra
 433+ E977 FD 6F       >			   ld	iyl,a
 434+ E979                                      NegIY
 434+ E979 AF          >                    xor a
 434+ E97A FD 95       >                    sub iyl
 434+ E97C FD 6F       >                    ld iyl,a
 434+ E97E 9F          >                    sbc a,a
 434+ E97F FD 94       >                    sub iyh
 434+ E981 FD 67       >                    ld iyh,a
 435+ E983 C3 91 E9                             jp		l2S_SkipCalcInc					; so we have a negative frac
 436+ E986              l2S_fracIsPositive:     ShiftIYRight1
 436+ E986 FD 7C       >			   ld 	a,iyh
 436+ E988 CB 3F       >			   srl 	a
 436+ E98A FD 67       >			   ld	iyh,a
 436+ E98C FD 7D       >			   ld 	a,iyl
 436+ E98E 1F          >			   rra
 436+ E98F FD 6F       >			   ld	iyl,a
 437+ E991              l2S_SkipCalcInc:		                        				; As we loop, bc = to plot current XY
 438+ E991 2A 71 E5     l2S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 439+ E994 78                                   ld		a,b
 440+ E995 ED 31                                add		hl,a
 441+ E997 71                                   ld		(hl),c
 442+ E998 DD 7C        l2S_CheckIfEnd:	        ld		a,ixh
 443+ E99A                                      JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 443+ E99A B8          >                        cp     b
 443+ E99B D2 A1 E9    >                        jp		nc,l2S_CheckXPos
 444+ E99E C3 B6 E9                             jp		l2S_Continue
 445+ E9A1 3A C4 E9     l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 446+ E9A4 FE 0C                                cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 447+ E9A6 28 0A                                jr      z,.IncCP
 448+ E9A8 79           .DecCP:                 ld      a,c
 449+ E9A9                                      ReturnIfALTNusng ixl
 449+ E9A9 DD BD       >                        cp    ixl
 449+ E9AB D8          >                        ret	 c
 450+ E9AC                                      ReturnIfAEqNusng ixl
 450+ E9AC DD BD       >                        cp      ixl
 450+ E9AE C8          >                        ret     z
 451+ E9AF C3 B6 E9                             jp      l2S_Continue
 452+ E9B2 79           .IncCP:                 ld		a,c
 453+ E9B3                                      ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 453+ E9B3 DD BD       >                        cp    ixl
 453+ E9B5 D0          >                        ret	 nc
 454+ E9B6              l2S_Continue:
 455+ E9B6 FD 7C        l2S_HNegative:			ld		a,iyh
 456+ E9B8 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 457+ E9BA 28 0B                                jr		z,l2S_ErrNotNegative			;
 458+ E9BC 3A 61 E5     l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 459+ E9BF 16 00                                ld		d,0
 460+ E9C1 5F                                   ld		e,a
 461+ E9C2 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 462+ E9C4 00           l2S_adjustCol:          nop										; this is our inc/dec of X
 463+ E9C5 18 CA                                jr		l2S_Loop							; repeat loop
 464+ E9C7 FD 7C        l2S_ErrNotNegative:     ld		a,iyh
 465+ E9C9 FD B5                                or		iyl
 466+ E9CB                                      JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 466+ E9CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 466+ E9CC CA E5 E9    >                        jp	    z, l2S_ErrZero
 467+ E9CF FD 54 FD 5D  l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 468+ E9D3 EB                                   ex		de,hl
 469+ E9D4 16 00                                ld		d,0
 470+ E9D6 3A 63 E5                             ld		a,(l2deltaX)
 471+ E9D9 5F                                   ld		e,a
 472+ E9DA                                      ClearCarryFlag
 472+ E9DA B7          >                        or a
 473+ E9DB ED 52                                sbc		hl,de
 474+ E9DD EB                                   ex		de,hl
 475+ E9DE FD 62 FD 6B                          ld      iy,de;ldiyde
 476+ E9E2 04           l2S_adjustRow:          inc		b								; move Y down by one
 477+ E9E3 18 AC                                jr		l2S_Loop
 478+ E9E5 2A 63 E5     l2S_ErrZero:            ld		hl,(l2deltaX)
 479+ E9E8 EB                                   ex		de,hl
 480+ E9E9 2A 61 E5                             ld		hl,(l2deltaY)
 481+ E9EC                                      ClearCarryFlag
 481+ E9EC B7          >                        or a
 482+ E9ED ED 52                                sbc		hl,de
 483+ E9EF EB                                   ex		de,hl
 484+ E9F0 FD 62 FD 6B                          ld      iy,de; ldiyde
 485+ E9F4 00           l2S_adjustCol2:         nop										; update X and Y
 486+ E9F5 04                                   inc		b
 487+ E9F6 18 99                                jr		l2S_Loop
 488+ E9F8
 489+ E9F8              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 490+ E9F8 32 6B E5     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 491+ E9FB 21 00 00                             ld		hl,0                            ;
 492+ E9FE 22 63 E5                             ld		(l2deltaX),hl                   ;
 493+ EA01 22 61 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 494+ EA04 78           l2D_preSort:            ld		a,b								;
 495+ EA05                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 495+ EA05 BA          >                        cp      d
 495+ EA06 DA 0E EA    >                        jp		c, l2D_noYSort
 496+ EA09              l2D_SortBasedOnY:	    ldhlbc									;
 496+ EA09 60          >                        ld		h,b
 496+ EA0A 69          >                        ld		l,c
 497+ EA0B EB                                   ex		de,hl                           ;
 498+ EA0C                                      ldbchl									; swap over bc and de using hl as an intermediate
 498+ EA0C 44          >                        ld		b,h
 498+ EA0D 4D          >                        ld		c,l
 499+ EA0E DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 500+ EA10 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 501+ EA12 79           l2D_setXLen:            ld		a,c                             ;
 502+ EA13                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 502+ EA13 BB          >                        cp      e
 502+ EA14 DA 20 EA    >                        jp		c, l2D_PosXLen
 503+ EA17 79           l2D_NegXLen:            ld		a,c                             ;
 504+ EA18 93                                   sub     e                               ;
 505+ EA19 32 63 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 506+ EA1C 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 507+ EA1E 18 07                                jr		l2D_XINCDEC
 508+ EA20 7B           l2D_PosXLen:	        ld		a,e                             ;
 509+ EA21 91                                   sub		c                               ;
 510+ EA22 32 63 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 511+ EA25 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 512+ EA27 32 A2 EA     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 513+ EA2A 32 D2 EA                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 514+ EA2D 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 515+ EA2E 90                                   sub		b
 516+ EA2F 32 61 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 517+ EA32              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 518+ EA32 2A 61 E5     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 519+ EA35 ED 5B 63 E5                          ld		de,(l2deltaX)
 520+ EA39                                      ClearCarryFlag
 520+ EA39 B7          >                        or a
 521+ EA3A ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 522+ EA3C EB                                   ex		de,hl
 523+ EA3D FD 62                                ld		iyh,d							; we will use IY reg for fractions
 524+ EA3F FD 6B                                ld		iyl,e
 525+ EA41 F2 66 EA                             jp		p,l2D_fracIsPositive
 526+ EA44              l2D_fracIsNegative:     NegIY
 526+ EA44 AF          >                    xor a
 526+ EA45 FD 95       >                    sub iyl
 526+ EA47 FD 6F       >                    ld iyl,a
 526+ EA49 9F          >                    sbc a,a
 526+ EA4A FD 94       >                    sub iyh
 526+ EA4C FD 67       >                    ld iyh,a
 527+ EA4E                                      ShiftIYRight1
 527+ EA4E FD 7C       >			   ld 	a,iyh
 527+ EA50 CB 3F       >			   srl 	a
 527+ EA52 FD 67       >			   ld	iyh,a
 527+ EA54 FD 7D       >			   ld 	a,iyl
 527+ EA56 1F          >			   rra
 527+ EA57 FD 6F       >			   ld	iyl,a
 528+ EA59                                      NegIY
 528+ EA59 AF          >                    xor a
 528+ EA5A FD 95       >                    sub iyl
 528+ EA5C FD 6F       >                    ld iyl,a
 528+ EA5E 9F          >                    sbc a,a
 528+ EA5F FD 94       >                    sub iyh
 528+ EA61 FD 67       >                    ld iyh,a
 529+ EA63 C3 71 EA                             jp		l2D_SkipCalcInc					; so we have a negative frac
 530+ EA66              l2D_fracIsPositive:     ShiftIYRight1
 530+ EA66 FD 7C       >			   ld 	a,iyh
 530+ EA68 CB 3F       >			   srl 	a
 530+ EA6A FD 67       >			   ld	iyh,a
 530+ EA6C FD 7D       >			   ld 	a,iyl
 530+ EA6E 1F          >			   rra
 530+ EA6F FD 6F       >			   ld	iyl,a
 531+ EA71              l2D_SkipCalcInc:
 532+ EA71 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 533+ EA73 3A 6B E5                             ld		a,(l2linecolor)     			;
 534+ EA76                                      l2_plot_macro;call	l2_plot_pixel       			; Plot Pixel
 534+ EA76 78          >                        ld      a,b
 534+ EA77             >                        JumpIfAGTENusng 192 ,.NoPlot
 534+ EA77 FE C0       >                        cp     192
 534+ EA79 D2 85 EA    >                        jp		nc,.NoPlot
 534+ EA7C 69          >                        ld      l,c
 534+ EA7D CD 68 E0    >                        call    asm_l2_row_bank_select
 534+ EA80 67          >                        ld      h,a
 534+ EA81 3A 87 F0    >                        ld      a,(line_gfx_colour)
 534+ EA84 77          >                        ld      (hl),a
 534+ EA85             >.NoPlot:
 535+ EA85 D1 C1                                pop     bc,,de
 536+ EA87 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 537+ EA89                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 537+ EA89 B8          >                        cp     b
 537+ EA8A D2 90 EA    >                        jp		nc,l2D_CheckXPos
 538+ EA8D C3 94 EA                             jp		l2D_Continue
 539+ EA90 79           l2D_CheckXPos:          ld		a,c
 540+ EA91                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 540+ EA91 DD BD       >                        cp      ixl
 540+ EA93 C8          >                        ret     z
 541+ EA94              l2D_Continue:
 542+ EA94 FD 7C        l2D_HNegative:			ld		a,iyh
 543+ EA96 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 544+ EA98 28 0B                                jr		z,l2D_ErrNotNegative			;
 545+ EA9A 3A 61 E5     l2D_ErrNegative:		ld		a,(l2deltaY)
 546+ EA9D 16 00                                ld		d,0
 547+ EA9F 5F                                   ld		e,a
 548+ EAA0 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 549+ EAA2 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 550+ EAA3 18 CC                                jr		l2D_Loop							; repeat loop
 551+ EAA5 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 552+ EAA7 FD B5                                or		iyl
 553+ EAA9                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 553+ EAA9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 553+ EAAA CA C3 EA    >                        jp	    z, l2D_ErrZero
 554+ EAAD FD 54 FD 5D  l2D_ErrPositive:		ld      de,iy;lddeiy
 555+ EAB1 EB                                   ex		de,hl
 556+ EAB2 16 00                                ld		d,0
 557+ EAB4 3A 63 E5                             ld		a,(l2deltaX)
 558+ EAB7 5F                                   ld		e,a
 559+ EAB8                                      ClearCarryFlag
 559+ EAB8 B7          >                        or a
 560+ EAB9 ED 52                                sbc		hl,de
 561+ EABB EB                                   ex		de,hl
 562+ EABC FD 62 FD 6B                          ld      iy,de;ldiyde
 563+ EAC0 04           l2D_adjustRow:			inc		b
 564+ EAC1 18 AE                                jr		l2D_Loop
 565+ EAC3 2A 63 E5     l2D_ErrZero:            ld		hl,(l2deltaX)
 566+ EAC6 EB                                   ex		de,hl
 567+ EAC7 2A 61 E5                             ld		hl,(l2deltaY)
 568+ EACA                                      ClearCarryFlag
 568+ EACA B7          >                        or a
 569+ EACB ED 52                                sbc		hl,de
 570+ EACD EB                                   ex		de,hl
 571+ EACE FD 62 FD 6B                          ld      iy,de;ldiyde
 572+ EAD2 00           l2D_adjustCol2:         nop										; update X and Y
 573+ EAD3 04                                   inc		b
 574+ EAD4 18 9B                                jr		l2D_Loop
 575+ EAD6              ;----------------------------------------------------------------------------------------------------------------------------------
 576+ EAD6
 577+ EAD6
 578+ EAD6
 579+ EAD6
 580+ EAD6              ;Loin:				; BBC version of line draw
 581+ EAD6              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 582+ EAD6              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 583+ EAD6              ;	ld		ixh,0							; ixh = s
 584+ EAD6              ;	ld		iyh,0							; iyh = swap
 585+ EAD6              ;	ld		l,0								; l will hold delta sign flags
 586+ EAD6              ;LoinCalcDeltaX:
 587+ EAD6              ;	ld		a,e
 588+ EAD6              ;	sub		c								; a = deltaX
 589+ EAD6              ;	JumpIfPositive LoinPosDx
 590+ EAD6              ;LoinNegDx:
 591+ EAD6              ;	neg										; carry flag will indicate deltaX was negative
 592+ EAD6              ;	ld		l,$80							; set bit 7 of l for negative
 593+ EAD6              ;LoinPosDx:
 594+ EAD6              ;	ld		ixl,a							; ixl = varP = deltaX
 595+ EAD6              ;LoinCalcDeltaY:
 596+ EAD6              ;	ld		a,d
 597+ EAD6              ;	sub		b								; a= deltaY
 598+ EAD6              ;	JumpIfPositive LoinPosDy
 599+ EAD6              ;LoinNegDy:
 600+ EAD6              ;	neg
 601+ EAD6              ;	set		6,l								; set bit 6 of l for negative deltaY
 602+ EAD6              ;LoinPosDy:
 603+ EAD6              ;	ld		iyl,a							; iyl = varQ = deltaY
 604+ EAD6              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 605+ EAD6              ;LoinSTPx:									; step along X
 606+ EAD6              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 607+ EAD6              ;LoinSTPxSwapCoords:
 608+ EAD6              ;	dec		iyh								; swap flag now becomes FF
 609+ EAD6              ;	ld		a,l								; save l flags
 610+ EAD6              ;	ex		de,hl							; save de to hl
 611+ EAD6              ;	lddebc									; Point2 = point1
 612+ EAD6              ;	ldbchl									; Point1 = point2 that was saved
 613+ EAD6              ;	ld		l,a								; get back l flags
 614+ EAD6              ;LoinSTPxCorrectOrder:
 615+ EAD6              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 616+ EAD6              ;	ld		a,iyl							; get delta Y back
 617+ EAD6              ;	ld		iy1,$FE							; roll counter
 618+ EAD6              ;LionSTPxRollQ:
 619+ EAD6              ;	sla		a								; highest bit of delta-Y
 620+ EAD6              ;	jp		c,LoinSTPxSteep
 621+ EAD6              ;	cp		ixl								; compare with DeltaX
 622+ EAD6              ;	jp		cs,LoinSTPxShallow
 623+ EAD6              ;LoinSTPxSteep:								;; LI4
 624+ EAD6              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 625+ EAD6              ;	scf										; force carry flag set
 626+ EAD6              ;LoinSTPxShallow:							;; LI5
 627+ EAD6              ;	rl		iyl								; rotate iyl which started as FE
 628+ EAD6              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 629+ EAD6              ;	inc		ihl								; DeltaX += 1
 630+ EAD6              ;LoinSTPxYDirection:							; change this to self modifying code
 631+ EAD6              ;	ld		a,d
 632+ EAD6              ;	JumpIfAGTEn	b,LionDOWN:
 633+ EAD6              ;	ld		a,iyh							; swap flag
 634+ EAD6              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 635+ EAD6              ;LoinSTPxX1Dec:
 636+ EAD6              ;	dec		c								; move left 1 pixel as we sawped
 637+ EAD6              ;LoinSTPxXCounter:							;; LIL2
 638+ EAD6              ;	sub		b
 639+ EAD6              ;	if
 640+ EAD6              ;
 641+ EAD6              ;85 82                   STA &82	   \ R	\ mask byte
 642+ EAD6              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 643+ EAD6              ;A2 FE                   LDX #&FE	\ roll counter
 644+ EAD6              ;86 81                   STX &81		\ Q
 645+ EAD6              ;.LIL1	\ roll Q
 646+ EAD6              ;0A                      ASL A		\ highest bit of delta-Y
 647+ EAD6              ;B0 04                   BCS LI4		\ steep
 648+ EAD6              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 649+ EAD6              ;90 03                   BCC LI5		\ shallow
 650+ EAD6              ;.LI4	\ steep
 651+ EAD6              ;E5 1B                   SBC &1B		\ P
 652+ EAD6              ;38                      SEC
 653+ EAD6              ;.LI5	\ shallow
 654+ EAD6              ;26 81                   ROL &81	   \ Q	\ #&FE
 655+ EAD6              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 656+ EAD6              ;A6 1B                   LDX &1B		\ P
 657+ EAD6              ;E8                      INX 		\ Xreg is width
 658+ EAD6              ;A5 37                   LDA &37		\ Y2
 659+ EAD6              ;E5 35                   SBC &35		\ Y1
 660+ EAD6              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 661+ EAD6              ;A5 90                   LDA &90		\ SWAP
 662+ EAD6              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 663+ EAD6              ;CA                      DEX
 664+ EAD6              ;.LIL2	\ counter X width
 665+ EAD6              ;A5 82                   LDA &82	   \ R	\ mask byte
 666+ EAD6              ;51 07                   EOR (&07),Y	\ (SC),Y
 667+ EAD6              ;91 07                   STA (&07),Y	\ (SC),Y
 668+ EAD6              ;.LI6	\ Xreg correct
 669+ EAD6              ;46 82                   LSR &82	   \ R	\ mask byte
 670+ EAD6              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 671+ EAD6              ;66 82                   ROR &82		\ R
 672+ EAD6              ;A5 07                   LDA &07		\ SC
 673+ EAD6              ;69 08                   ADC #8		\ next column
 674+ EAD6              ;85 07                   STA &07		\ SC
 675+ EAD6              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 676+ EAD6              ;A5 83                   LDA &83		\ S
 677+ EAD6              ;65 81                   ADC &81	   \ Q	\ some low bits
 678+ EAD6              ;85 83                   STA &83		\ S
 679+ EAD6              ;90 07                   BCC LIC2	\ skip Y adjustment
 680+ EAD6              ;88                      DEY
 681+ EAD6              ;10 04                   BPL LIC2	\ skip Y adjustment
 682+ EAD6              ;C6 08                   DEC &08		\ SC+1
 683+ EAD6              ;A0 07                   LDY #7
 684+ EAD6              ;.LIC2	\ skip Y adjustment
 685+ EAD6              ;CA                      DEX
 686+ EAD6              ;D0 DC                   BNE LIL2	\ loop X width
 687+ EAD6              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 688+ EAD6              ;60                      RTS
 689+ EAD6              ;
 690+ EAD6              ;.DOWN	\ Line is going to the right and down
 691+ EAD6              ;A5 90                   LDA &90		\ SWAP
 692+ EAD6              ;F0 07                   BEQ LI9		\ no swap
 693+ EAD6              ;CA                      DEX
 694+ EAD6              ;.LIL3	\ counter X width
 695+ EAD6              ;A5 82                   LDA &82	    \ R \ mask byte
 696+ EAD6              ;51 07                   EOR (&07),Y	\ (SC),Y
 697+ EAD6              ;91 07                   STA (&07),Y	\ (SC),Y
 698+ EAD6              ;.LI9	\ no swap
 699+ EAD6              ;46 82                   LSR &82		\ R
 700+ EAD6              ;90 08                   BCC LI10	\ still in correct column, hop
 701+ EAD6              ;66 82                   ROR &82		\ R
 702+ EAD6              ;A5 07                   LDA &07		\ SC
 703+ EAD6              ;69 08                   ADC #8		\ next column
 704+ EAD6              ;85 07                   STA &07		\ SC
 705+ EAD6              ;.LI10	\ this is like an overflow monitor to update Y
 706+ EAD6              ;A5 83                   LDA &83		\ S
 707+ EAD6              ;65 81                   ADC &81		\ Q
 708+ EAD6              ;85 83                   STA &83		\ S
 709+ EAD6              ;90 09                   BCC LIC3	\ skip Y adjustment
 710+ EAD6              ;C8                      INY
 711+ EAD6              ;C0 08                   CPY #8
 712+ EAD6              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 713+ EAD6              ;E6 08                   INC &08		\ SC+1
 714+ EAD6              ;A0 00                   LDY #0
 715+ EAD6              ;.LIC3	\ skipped Y adjustment
 716+ EAD6              ;CA                      DEX
 717+ EAD6              ;D0 DA                   BNE LIL3	\ loop X width
 718+ EAD6              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 719+ EAD6              ;60                      RTS
 720+ EAD6              ;
 721+ EAD6              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 722+ EAD6              ;A4 35                   LDY &35		\ Y1
 723+ EAD6              ;98                      TYA
 724+ EAD6              ;A6 34                   LDX &34		\ X1
 725+ EAD6              ;C4 37                   CPY &37		\ Y2
 726+ EAD6              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 727+ EAD6              ;C6 90                   DEC &90		\ SWAP
 728+ EAD6              ;A5 36                   LDA &36		\ X2
 729+ EAD6              ;85 34                   STA &34		\ X1
 730+ EAD6              ;86 36                   STX &36		\ X2
 731+ EAD6              ;AA                      TAX
 732+ EAD6              ;A5 37                   LDA &37		\ Y2
 733+ EAD6              ;85 35                   STA &35		\ Y1
 734+ EAD6              ;84 37                   STY &37		\ Y2
 735+ EAD6              ;A8                      TAY
 736+ EAD6              ;.LI15	\ Y1 Y2 order is now correct
 737+ EAD6              ;4A                      LSR A
 738+ EAD6              ;4A                      LSR A
 739+ EAD6              ;4A                      LSR A
 740+ EAD6              ;09 60                   ORA #&60
 741+ EAD6              ;85 08                   STA &08	 \ SC+1	\ screen hi
 742+ EAD6              ;8A                      TXA 		\ X1
 743+ EAD6              ;29 F8                   AND #&F8
 744+ EAD6              ;85 07                   STA &07	  \ SC	\ screen lo
 745+ EAD6              ;8A                      TXA
 746+ EAD6              ;29 07                   AND #7		\ mask index
 747+ EAD6              ;AA                      TAX
 748+ EAD6              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 749+ EAD6              ;85 82                   STA &82	    \ R	\ mask
 750+ EAD6              ;A5 35                   LDA &35		\ Y1
 751+ EAD6              ;29 07                   AND #7
 752+ EAD6              ;A8                      TAY
 753+ EAD6              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 754+ EAD6              ;A2 01                   LDX #1		\ roll counter
 755+ EAD6              ;86 1B                   STX &1B	    	\ P
 756+ EAD6              ;.LIL4	\ roll P
 757+ EAD6              ;0A                      ASL A
 758+ EAD6              ;B0 04                   BCS LI13	\ do subtraction
 759+ EAD6              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 760+ EAD6              ;90 03                   BCC LI14	\ less than Q
 761+ EAD6              ;.LI13	\ do subtraction
 762+ EAD6              ;E5 81                   SBC &81		\ Q
 763+ EAD6              ;38                      SEC
 764+ EAD6              ;.LI14	\ less than Q
 765+ EAD6              ;26 1B                   ROL &1B		\ P
 766+ EAD6              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 767+ EAD6              ;A6 81                   LDX &81		\ Q
 768+ EAD6              ;E8                      INX 		\ adjust height
 769+ EAD6              ;A5 36                   LDA &36		\ X2
 770+ EAD6              ;E5 34                   SBC &34		\ X1
 771+ EAD6              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 772+ EAD6              ;18                      CLC
 773+ EAD6              ;A5 90                   LDA &90		\ SWAP
 774+ EAD6              ;F0 07                   BEQ LI17 	\ skip first point
 775+ EAD6              ;CA                      DEX
 776+ EAD6              ;.LIL5	\ skipped first point, counter X
 777+ EAD6              ;A5 82                   LDA &82	    \ R \ mask byte
 778+ EAD6              ;51 07                   EOR (&07),Y	\ (SC),Y
 779+ EAD6              ;91 07                   STA (&07),Y	\ (SC),Y
 780+ EAD6              ;.LI17	\ skipped first point
 781+ EAD6              ;88                      DEY
 782+ EAD6              ;10 04                   BPL LI16	\ skip hi adjust
 783+ EAD6              ;C6 08                   DEC &08		\ SC+1
 784+ EAD6              ;A0 07                   LDY #7		\ new char
 785+ EAD6              ;	.LI16	\ skipped hi adjust
 786+ EAD6              ;A5 83                   LDA &83		\ S
 787+ EAD6              ;65 1B                   ADC &1B		\ P
 788+ EAD6              ;85 83                   STA &83		\ S
 789+ EAD6              ;90 0C                   BCC LIC5	\ skip, still in same column
 790+ EAD6              ;46 82                   LSR &82	  \ R	\ mask
 791+ EAD6              ;90 08                   BCC LIC5  	\ no mask bit hop
 792+ EAD6              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 793+ EAD6              ;A5 07                   LDA &07	  \ SC  \ screen lo
 794+ EAD6              ;69 08                   ADC #8		\ next char below
 795+ EAD6              ;85 07                   STA &07		\ SC
 796+ EAD6              ;.LIC5	\ same column
 797+ EAD6              ;CA                      DEX
 798+ EAD6              ;D0 DC                   BNE LIL5	\ loop X height
 799+ EAD6              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 800+ EAD6              ;60                      RTS
 801+ EAD6              ;
 802+ EAD6              ;.LFT	\ going left
 803+ EAD6              ;A5 90                   LDA &90		\ SWAP
 804+ EAD6              ;F0 07                   BEQ LI18	\ skip first point
 805+ EAD6              ;CA                      DEX 		\ reduce height
 806+ EAD6              ;.LIL6	\ counter X height
 807+ EAD6              ;A5 82                   LDA &82	   \ R	\ mask byte
 808+ EAD6              ;51 07                   EOR (&07),Y	\ (SC),Y
 809+ EAD6              ;91 07                   STA (&07),Y	\ (SC),Y
 810+ EAD6              ;.LI18
 811+ EAD6              ;88                      DEY
 812+ EAD6              ;10 04                   BPL LI19	\ skip hi adjust
 813+ EAD6              ;C6 08                   DEC &08		\ SC+1
 814+ EAD6              ;A0 07                   LDY #7		\ rest char row
 815+ EAD6              ;.LI19	\ skipped hi adjust
 816+ EAD6              ;A5 83                   LDA &83		\ S
 817+ EAD6              ;65 1B                   ADC &1B	    \ P \ some low bits
 818+ EAD6              ;85 83                   STA &83		\ S
 819+ EAD6              ;90 0D                   BCC LIC6	\ no overflow
 820+ EAD6              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 821+ EAD6              ;90 09                   BCC LIC6	\ no overflow
 822+ EAD6              ;26 82                   ROL &82		\ R
 823+ EAD6              ;A5 07                   LDA &07		\ SC
 824+ EAD6              ;E9 07                   SBC #7		\ down 1 char
 825+ EAD6              ;85 07                   STA &07		\ SC
 826+ EAD6              ;18                      CLC
 827+ EAD6              ;.LIC6	\ no overflow
 828+ EAD6              ;CA                      DEX 		\ height
 829+ EAD6              ;D0 DB                   BNE LIL6	\ loop X
 830+ EAD6              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 831+ EAD6              ;.HL6
 832+ EAD6              ;60                      RTS 		\ end Line drawing
 833+ EAD6
 834+ EAD6
 835+ EAD6              ;;l2_draw_diagonalopt:
 836+ EAD6              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 837+ EAD6              ;;	push	af
 838+ EAD6              ;;	ld		a,b
 839+ EAD6              ;;	cp		d
 840+ EAD6              ;;	jr		z,.RegularDiagnonal
 841+ EAD6              ;;.CheckHorz:
 842+ EAD6              ;;	ld		a,c
 843+ EAD6              ;;	cp		e
 844+ EAD6              ;;	jr		z,.horizontalLine
 845+ EAD6              ;;.RegularDiagnonal:
 846+ EAD6              ;;	pop		af
 847+ EAD6              ;;	call diag
 848+ EAD6
 849+ EAD6
 850+ EAD6              ;;l2_signed_mul2a:
 851+ EAD6              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 852+ EAD6              ;;	TEST	$80
 853+ EAD6              ;;	jr		nz, .negativecalc
 854+ EAD6              ;;.positivecalc:
 855+ EAD6              ;;	ccf
 856+ EAD6              ;;	rla
 857+ EAD6              ;;	ret
 858+ EAD6              ;;.negativecalc:
 859+ EAD6              ;;	neg
 860+ EAD6              ;;	ccf
 861+ EAD6              ;;	rla
 862+ EAD6              ;;	neg
 863+ EAD6              ;;	ret
 864+ EAD6              ;;
 865+ EAD6              ;;l2_signed_mul2atohl:
 866+ EAD6              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 867+ EAD6              ;;	TEST	$80
 868+ EAD6              ;;	jr		nz, .negativecalc
 869+ EAD6              ;;.positivecalc:
 870+ EAD6              ;;	ld		hl,0
 871+ EAD6              ;;	ld		l,a
 872+ EAD6              ;;	add		hl,a
 873+ EAD6              ;;	ret
 874+ EAD6              ;;.negativecalc:
 875+ EAD6              ;;	neg
 876+ EAD6              ;;	ld		hl,0
 877+ EAD6              ;;	ld		l,a
 878+ EAD6              ;;	neghl
 879+ EAD6              ;;	ret
 880+ EAD6              ;;
 881+ EAD6              ;;l2_e2fractionby2:
 882+ EAD6              ;;	ld 		hl,(l2fraction)
 883+ EAD6              ;;	push	de
 884+ EAD6              ;;	ld		d,h
 885+ EAD6              ;;	ld		e,l
 886+ EAD6              ;;	add		hl,de
 887+ EAD6              ;;	pop		de
 888+ EAD6              ;;	ld		(l2e2),hl
 889+ EAD6              ;;	ret
 890+ EAD6
 891+ EAD6
 892+ EAD6
 893+ EAD6
 894+ EAD6
 895+ EAD6              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 896+ EAD6              ;;//.catchLoop:
 897+ EAD6              ;;//	jp .catchLoop
 898+ EAD6              ;;//.continue:
 899+ EAD6              ;;//    ld      A,D
 900+ EAD6              ;;//    sub     H
 901+ EAD6              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 902+ EAD6              ;;//.DXNegative:
 903+ EAD6              ;;//    neg
 904+ EAD6              ;;//.DXPositive:
 905+ EAD6              ;;//    ld      B,A              ;B <- |delta_x|
 906+ EAD6              ;;//    ld      A,E
 907+ EAD6              ;;//    sub     L
 908+ EAD6              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 909+ EAD6              ;;//.DYNegative:
 910+ EAD6              ;;//    neg
 911+ EAD6              ;;//.DYPositive:
 912+ EAD6              ;;//    sub     B               ;|delta_y|
 913+ EAD6              ;;//	push	af
 914+ EAD6              ;;//	jr		c,.DeltaX
 915+ EAD6              ;;//.DeltaY
 916+ EAD6              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 917+ EAD6              ;;//    ld      H,L             			;then values x and y are swapped
 918+ EAD6              ;;//    ld      L,A             			;so the loop will always be performed on the
 919+ EAD6              ;;//    ld      A,D             			;x value. A flag must be set to
 920+ EAD6              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 921+ EAD6              ;;//    ld      E,A             			;instead of (x,y)
 922+ EAD6              ;;//.DeltaX:
 923+ EAD6              ;;//	ld		a,d
 924+ EAD6              ;;//	sub		h
 925+ EAD6              ;;//	jr		nc,.TestDY					; x1 < x2
 926+ EAD6              ;;//.TestDX:
 927+ EAD6              ;;//	ex		de,hl
 928+ EAD6              ;;//.TestDY:
 929+ EAD6              ;;//	ld		a,e
 930+ EAD6              ;;//	sub		l
 931+ EAD6              ;;//    ld      A,$01
 932+ EAD6              ;;//    jr      NC,.StoreA
 933+ EAD6              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 934+ EAD6              ;;//.StoreA:
 935+ EAD6              ;;//        ld      (l2way),A
 936+ EAD6              ;;//.InitLine:
 937+ EAD6              ;;//        ld      B,H
 938+ EAD6              ;;//        ld      C,L
 939+ EAD6              ;;//        ld      A,E
 940+ EAD6              ;;//        sub     L
 941+ EAD6              ;;//        jr      NC,.EndInit
 942+ EAD6              ;;//        ld      A,L
 943+ EAD6              ;;//        ld      L,E
 944+ EAD6              ;;//        ld      E,A
 945+ EAD6              ;;//.EndInit:
 946+ EAD6              ;;//        ld      A,E
 947+ EAD6              ;;//        sub     L
 948+ EAD6              ;;//        rla
 949+ EAD6              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 950+ EAD6              ;;//        add     A,H
 951+ EAD6              ;;//        sub     D
 952+ EAD6              ;;//        ld      E,A             ;'d' variable is initialised
 953+ EAD6              ;;//        add     A,H
 954+ EAD6              ;;//        sub     D
 955+ EAD6              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 956+ EAD6              ;;//.Loop:
 957+ EAD6              ;;//        ld      A,B
 958+ EAD6              ;;//        sub     D
 959+ EAD6              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 960+ EAD6              ;;//        pop     AF
 961+ EAD6              ;;//        bit     7,A
 962+ EAD6              ;;//        push    AF
 963+ EAD6              ;;//        push    AF
 964+ EAD6              ;;//        push    BC
 965+ EAD6              ;;//        jr      Z,.DrawPoint
 966+ EAD6              ;;//        ld      A,B
 967+ EAD6              ;;//        ld      B,C
 968+ EAD6              ;;//        ld      C,A
 969+ EAD6              ;;//.DrawPoint:
 970+ EAD6              ;;//		push	hl
 971+ EAD6              ;;//		pushbcdeaf
 972+ EAD6              ;;//		ld		b,e
 973+ EAD6              ;;//		ld		c,d
 974+ EAD6              ;;//	ld 		a,(l2linecolor)
 975+ EAD6              ;;//	call	l2_plot_pixel
 976+ EAD6              ;;//		popafdebc
 977+ EAD6              ;;//		pop		hl
 978+ EAD6              ;;//        pop     BC
 979+ EAD6              ;;//        pop     AF
 980+ EAD6              ;;//.TestD:
 981+ EAD6              ;;//        bit     7,E
 982+ EAD6              ;;//        jr      NZ,.Case1
 983+ EAD6              ;;//.Case2:                          ;d >= 0
 984+ EAD6              ;;//        ld      A,E
 985+ EAD6              ;;//        add     A,H
 986+ EAD6              ;;//        ld      E,A
 987+ EAD6              ;;//        ld      A,(l2way)
 988+ EAD6              ;;//        add     A,C
 989+ EAD6              ;;//        ld      C,A
 990+ EAD6              ;;//        jr      .EndLoop
 991+ EAD6              ;;//.Case1:                          ;d < 0
 992+ EAD6              ;;//        ld      A,E
 993+ EAD6              ;;//        add     A,L
 994+ EAD6              ;;//        ld      E,A
 995+ EAD6              ;;//.EndLoop:
 996+ EAD6              ;;//        inc     B
 997+ EAD6              ;;//        jr      .Loop
 998+ EAD6              ;;//.EndLine:
 999+ EAD6              ;;//        pop     AF              ;MUST NOT BE REMOVED
1000+ EAD6              ;;//        pop     HL              ;can be removed
1001+ EAD6              ;;//        pop     DE              ;can be removed
1002+ EAD6              ;;//        ret
1003+ EAD6
1004+ EAD6              ;;	ld		(.l2yadjust),a
1005+ EAD6              ;;	call	calcdeltax:
1006+ EAD6              ;;	ld		(.l2xadjust),a
1007+ EAD6              ;;.calcfraction:							; err(or fraction) = dx+dy;
1008+ EAD6              ;;	push	hl
1009+ EAD6              ;;	push	de
1010+ EAD6              ;;	ld		hl,(l2deltaX)
1011+ EAD6              ;;	ld		de,(l2deltaY)
1012+ EAD6              ;;	add		hl,de
1013+ EAD6              ;;	ld		(l2fraction),hl
1014+ EAD6              ;;	pop		de
1015+ EAD6              ;;	pop		hl
1016+ EAD6              ;;.mainloop:
1017+ EAD6              ;;	push	bc
1018+ EAD6              ;;	push	de
1019+ EAD6              ;;	ld 		a,(l2linecolor)
1020+ EAD6              ;;	call	l2_plot_pixel
1021+ EAD6              ;;	pop		de
1022+ EAD6              ;;	pop		bc
1023+ EAD6              ;;.arewefinishedtest
1024+ EAD6              ;;	ld		a,b
1025+ EAD6              ;;	cp		d
1026+ EAD6              ;;	jr		nz,.notthereyet
1027+ EAD6              ;;	ld		a,c
1028+ EAD6              ;;	cp		e
1029+ EAD6              ;;	ret		z
1030+ EAD6              ;;.notthereyet:
1031+ EAD6              ;;	push	de
1032+ EAD6              ;;	call	l2_e2fractionby2			; e2 = 2*err;
1033+ EAD6              ;;	pop		de
1034+ EAD6              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
1035+ EAD6              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
1036+ EAD6              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
1037+ EAD6              ;;	or		a							;
1038+ EAD6              ;;	sbc		hl,de						;
1039+ EAD6              ;;	pop		de
1040+ EAD6              ;;	jr		z,  .dodycalc				; if equal then calc
1041+ EAD6              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
1042+ EAD6              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
1043+ EAD6              ;;.dodycalc:
1044+ EAD6              ;;	ld		hl,(l2fraction)
1045+ EAD6              ;;	push	de
1046+ EAD6              ;;	ld		de,(l2deltaY)
1047+ EAD6              ;;	add		hl,de
1048+ EAD6              ;;	ld		(l2fraction),de
1049+ EAD6              ;;	pop		de
1050+ EAD6              ;;.l2yadjust:
1051+ EAD6              ;;	nop
1052+ EAD6              ;;.skipdycalc:
1053+ EAD6              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
1054+ EAD6              ;;	ld		hl,(l2e2)
1055+ EAD6              ;;	push	de							;
1056+ EAD6              ;;	ld		de,(l2deltaX)				;
1057+ EAD6              ;;	or		a							; clear carry flag
1058+ EAD6              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
1059+ EAD6              ;;	pop		de
1060+ EAD6              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
1061+ EAD6              ;;	jp		m,.dodxcalc					; was sign bit set
1062+ EAD6              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
1063+ EAD6              ;;.dodxcalc:
1064+ EAD6              ;;	ld		hl,(l2fraction)
1065+ EAD6              ;;	push	de
1066+ EAD6              ;;	ld		de,(l2deltaX)
1067+ EAD6              ;;	add		hl,de
1068+ EAD6              ;;	ld		(l2fraction),de
1069+ EAD6              ;;	pop		de
1070+ EAD6              ;;.l2xadjust:
1071+ EAD6              ;;	nop
1072+ EAD6              ;;.skipdxcalc:
1073+ EAD6              ;;	jr 		.mainloop
1074+ EAD6
1075+ EAD6
1076+ EAD6              ;;/l2_draw_diagonalold:
1077+ EAD6              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
1078+ EAD6              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
1079+ EAD6              ;;/.sortycoords:
1080+ EAD6              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
1081+ EAD6              ;;/	cp		d
1082+ EAD6              ;;/	jr		nc, .nocoordswap
1083+ EAD6              ;;/.swapcoords:
1084+ EAD6              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
1085+ EAD6              ;;/	lddebc
1086+ EAD6              ;;/	ldbchl
1087+ EAD6              ;;/.nocoordswap:
1088+ EAD6              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
1089+ EAD6              ;;/	sub		b							; we have already sorted  so y1 > y0
1090+ EAD6              ;;/	ld		(l2deltaY),a
1091+ EAD6              ;;/	neg									; DEBUG
1092+ EAD6              ;;/	ld		(l2deltaYn),a				; DEBUG
1093+ EAD6              ;;/	neg									; DEBUG
1094+ EAD6              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
1095+ EAD6              ;;/    ld		a,c
1096+ EAD6              ;;/	cp		e
1097+ EAD6              ;;/	jr		c, .x1GTx0
1098+ EAD6              ;;/.x1LTx0
1099+ EAD6              ;;/	ld		a,c
1100+ EAD6              ;;/	sub		e
1101+ EAD6              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
1102+ EAD6              ;;/	neg									; DEBUG
1103+ EAD6              ;;/	ld		(l2deltaXn),a				; DEBUG
1104+ EAD6              ;;/	neg									; DEBUG
1105+ EAD6              ;;/	ld		a,l2incbstep
1106+ EAD6              ;;/	jr		.setlayershift0
1107+ EAD6              ;;/.x1GTx0:
1108+ EAD6              ;;/	ld		a,e
1109+ EAD6              ;;/	sub		c
1110+ EAD6              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
1111+ EAD6              ;;/	neg									; DEBUG
1112+ EAD6              ;;/	ld		(l2deltaXn),a				; DEBUG
1113+ EAD6              ;;/	neg									; DEBUG
1114+ EAD6              ;;/	ld		a,l2decbstep
1115+ EAD6              ;;/.setlayershift0:
1116+ EAD6              ;;/	ld		a,0
1117+ EAD6              ;;/	pushbcde
1118+ EAD6              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
1119+ EAD6              ;;/	popdebc
1120+ EAD6              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
1121+ EAD6              ;;/.dymuliplyby2:
1122+ EAD6              ;;/	ld		a, (l2deltaY)				; dy *= 2
1123+ EAD6              ;;/	call	l2_signed_mul2a
1124+ EAD6              ;;/	ld		(l2deltaYsq),a
1125+ EAD6              ;;/	neg									; DEBUG
1126+ EAD6              ;;/	ld		(l2deltaYsqn),a				; DEBUG
1127+ EAD6              ;;/	neg									; DEBUG
1128+ EAD6              ;;/.dxmuliplyby2:
1129+ EAD6              ;;/	ld		a, (l2deltaX)				; dx *= 2
1130+ EAD6              ;;/	call	l2_signed_mul2a
1131+ EAD6              ;;/	ld		(l2deltaXsq),a
1132+ EAD6              ;;/	neg									; DEBUG
1133+ EAD6              ;;/	ld		(l2deltaXsqn),a				; DEBUG
1134+ EAD6              ;;/	neg									; DEBUG
1135+ EAD6              ;;/.plotfirstpixel:
1136+ EAD6              ;;/	pushbcde
1137+ EAD6              ;;/	ld a,(l2linecolor)
1138+ EAD6              ;;/	call	l2_plot_pixel
1139+ EAD6              ;;/	popdebc
1140+ EAD6              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
1141+ EAD6              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
1142+ EAD6              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
1143+ EAD6              ;;/	cp		(hl)
1144+ EAD6              ;;/	jp		m,	.signset
1145+ EAD6              ;;/.signclear:
1146+ EAD6              ;;/	jp		pe,	.dxLTEdybranch
1147+ EAD6              ;;/	jr		.dxGTdybranch
1148+ EAD6              ;;/.signset:
1149+ EAD6              ;;/	jp		po,	.dxLTEdybranch
1150+ EAD6              ;;/.dxGTdybranch:
1151+ EAD6              ;;/	ld		a,(l2deltaYsq)
1152+ EAD6              ;;/	ld		hl,l2deltaX
1153+ EAD6              ;;/	sub		(hl)
1154+ EAD6              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
1155+ EAD6              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
1156+ EAD6              ;;/	ld		a,c
1157+ EAD6              ;;/	cp		e
1158+ EAD6              ;;/	ret		z							; if x0 = x1 then done
1159+ EAD6              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
1160+ EAD6              ;;/	ld		a,(l2fraction)
1161+ EAD6              ;;/	TEST	$80
1162+ EAD6              ;;/	jr		nz,.BranchAskipYstep
1163+ EAD6              ;;/	inc		b							; 		++l2_vy0;
1164+ EAD6              ;;/	ld		hl,l2deltaXsq
1165+ EAD6              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
1166+ EAD6              ;;/	ld		(l2fraction),a
1167+ EAD6              ;;/.BranchAskipYstep:
1168+ EAD6              ;;/.l2stepx1:
1169+ EAD6              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
1170+ EAD6              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
1171+ EAD6              ;;/	ld		hl,l2deltaYsq
1172+ EAD6              ;;/	add		a,(hl)
1173+ EAD6              ;;/	ld		(l2fraction),a
1174+ EAD6              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
1175+ EAD6              ;;/	pushbcde
1176+ EAD6              ;;/	ld a,(l2linecolor)
1177+ EAD6              ;;/	call	l2_plot_pixel
1178+ EAD6              ;;/	popdebc
1179+ EAD6              ;;/.BranchAloop:
1180+ EAD6              ;;/	jr		.BranchAwhile
1181+ EAD6              ;;/.dxLTEdybranch:
1182+ EAD6              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
1183+ EAD6              ;;/	ld		hl, l2deltaY
1184+ EAD6              ;;/	sub		(hl)
1185+ EAD6              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
1186+ EAD6              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
1187+ EAD6              ;;/	ld		a,b
1188+ EAD6              ;;/	cp		d
1189+ EAD6              ;;/	ret		z							; if x0 = x1 then done
1190+ EAD6              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
1191+ EAD6              ;;/	ld		a,(l2fraction)
1192+ EAD6              ;;/	TEST	$80
1193+ EAD6              ;;/	jr		nz,.BranchBskipYstep
1194+ EAD6              ;;/.l2stepx2
1195+ EAD6              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
1196+ EAD6              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
1197+ EAD6              ;;/	ld		hl,l2deltaYsq
1198+ EAD6              ;;/	sub		(hl)
1199+ EAD6              ;;/	ld		(l2fraction),a
1200+ EAD6              ;;/.BranchBskipYstep:
1201+ EAD6              ;;/	ld		hl, l2deltaYsq
1202+ EAD6              ;;/	add		a,(hl)
1203+ EAD6              ;;/	ld		(l2fraction),a
1204+ EAD6              ;;/	inc		b							; ++l2_vy0;
1205+ EAD6              ;;/.BranchBplotBCColA:
1206+ EAD6              ;;/	pushbcde
1207+ EAD6              ;;/	ld a,(l2linecolor)
1208+ EAD6              ;;/	call	l2_plot_pixel
1209+ EAD6              ;;/	popdebc
1210+ EAD6              ;;/.BranchBloop:
1211+ EAD6              ;;/	jr		.BranchBwhile
1212+ EAD6
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 814  EAD6                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ EAD6
   2+ EAD6
   3+ EAD6
   4+ EAD6 00 00        l2trianglebc	        DW 0
   5+ EAD8 00 00        l2trianglede	        DW 0
   6+ EADA 00 00        l2trianglehl	        DW 0
   7+ EADC
   8+ EADC              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ EADC C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ EAE0 CD F8 E9                             call	l2_draw_diagonal		; BC to DE
  11+ EAE3 F1                                   pop		af
  12+ EAE4 D1                                   pop		de						; swap DE and HL
  13+ EAE5 E1                                   pop		hl						; so BC to DE is really to HL
  14+ EAE6 C1                                   pop		bc
  15+ EAE7 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ EAE9 F5                                   push	af
  17+ EAEA CD F8 E9                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ EAED F1                                   pop		af
  19+ EAEE C1                                   pop		bc						; Now bc = original de
  20+ EAEF D1                                   pop		de						; de = original hl
  21+ EAF0 CD F8 E9                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ EAF3 C9                                   ret
  23+ EAF4
  24+ EAF4
  25+ EAF4
  26+ EAF4
  27+ EAF4
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 815  EAF4                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ EAF4              ; First off basic off screen clip tests
   2+ EAF4              ; Sort points in Y ascending order
   3+ EAF4              ; Detect if flat top    -> l2_fillTopFlatTriangle
   4+ EAF4              ; Detect if flat bottom ->l2_fillBottomFlatTriangle
   5+ EAF4              ; else
   6+ EAF4              ; Calc X2-X1 = delta X
   7+ EAF4              ; calc Y2-Y1 = partialY
   8+ EAF4              ; calc Y3-Y1 = fullY
   9+ EAF4              ; X2partial = X1 + (deltaX * (partialY/fullY) - Can be done by line algorithim variant?
  10+ EAF4              ; l2_fillBottomFlatTriangle (X1Y1, X2parialY2, X2Y2)
  11+ EAF4              ; l2_fillTopFlatTriangle(X2partialY2, X2Y2, X3Y3)
  12+ EAF4              ; done
  13+ EAF4              ;
  14+ EAF4              ; Sorts    Y1   Y2    Y3
  15+ EAF4              ;          1    2     3     Y1 < Y2 no      Y1 < Y3 no      Y2 < Y3 no
  16+ EAF4              ;          1    3     2     Y1 < Y2 no      Y1 < Y3 no      Y2 > Y3 1 2<=>3
  17+ EAF4              ;          2    1     3     Y1 < Y2 1<=>2 3 Y1 < Y3 no      Y2 < Y3 no
  18+ EAF4              ;          2    3     1     Y1 < Y2 no      Y1 < Y3 1  2  3 Y2 < Y3 no
  19+ EAF4              ;          3    1     2     Y1 < Y2 1<=>3 2 Y1 < Y3 no      Y2 < Y3 1 2 3
  20+ EAF4              ;          3    2     1     Y1 < Y2 2<->3 1 Y1 < Y2 1  2  3 Y2 < Y2 no
  21+ EAF4
  22+ EAF4
  23+ EAF4              ; X1  IY +0
  24+ EAF4              ; Y1  IY +2
  25+ EAF4              ; X2  IY +4
  26+ EAF4              ; Y2  IY +6
  27+ EAF4              ; X3  IY +8
  28+ EAF4              ; Y3  IY +10
  29+ EAF4              ;;;
  30+ EAF4              ;;;compareCoordsSwap:      MACRO   OffsetX1, OffsetX2
  31+ EAF4              ;;;                        ld      hl,(IY+(OffsetX1+2))                       ; Y1
  32+ EAF4              ;;;                        ld      de,(IY+(OffsetX2+2))                       ; Y2
  33+ EAF4              ;;;                        cpHLDELeadSign
  34+ EAF4              ;;;                        ret     nc
  35+ EAF4              ;;;                        ld      hl,(IY+OffsetX1)   ; swap X1 and X2
  36+ EAF4              ;;;                        ld      de,(IY+OffsetX2)   ;
  37+ EAF4              ;;;                        ld      hl,(IY+OffsetX2)   ;
  38+ EAF4              ;;;                        ld      de,(IY+OffsetX1)   ;
  39+ EAF4              ;;;                        ld      hl,(IY+(OffsetX1+2))   ; swap Y1 and Y2
  40+ EAF4              ;;;                        ld      de,(IY+(OffsetX2+2))   ;
  41+ EAF4              ;;;                        ld      hl,(IY+(OffsetX2+2))   ;
  42+ EAF4              ;;;                        ld      de,(IY+(OffsetX1+2))
  43+ EAF4              ;;;                        ENDM
  44+ EAF4              ;;;; points in in IY = address of all 3 points in S15,S15 format
  45+ EAF4              ;;;l_fillTriangle:         ; Do initial off screen clip tests
  46+ EAF4              ;;;                        ; sortpoints Y ascending
  47+ EAF4              ;;;                        compareCoordsSwap 0, 4
  48+ EAF4              ;;;                        compareCoordsSwap 0, 8
  49+ EAF4              ;;;                        compareCoordsSwap 4, 8
  50+ EAF4              ;;;                        ld      hl,(IY+2)                ; if Y1 and Y2 are the same then its a flat top
  51+ EAF4              ;;;                        ld      de,(IY+6)                ; (in these routines it santity checks its not a flat line)
  52+ EAF4              ;;;                        cpHLEquDE
  53+ EAF4              ;;;                        jp      z,.PrepareFlatTopTriangle
  54+ EAF4              ;;;                        ld      hl,(IY+8)               ; if Y1 and Y2 are the same then its a flat bottom
  55+ EAF4              ;;;                        cpHLEquDE                       ;
  56+ EAF4              ;;;                        jp      z,.PrepareFlatBottomTriagle
  57+ EAF4              ;;;.SplitTriangleInTwo     ; Y2 will always be <= Y3
  58+ EAF4              ;;;                        ; calculate line X1Y1 to X3Y3 until y row = Y2, result is XTemp,
  59+ EAF4              ;;;                        ; drawflat bottomed X1Y1, X2Y2, XTempY2
  60+ EAF4              ;;;                        ; drawflat topped   X2Y2, XTempY2, X3Y3
  61+ EAF4              ;;;
  62+ EAF4              ;;;
  63+ EAF4              ;;;
  64+ EAF4              ;;;
  65+ EAF4              ;;;; Calc X2-X1 = delta X
  66+ EAF4              ;;;                        ; calc Y2-Y1 = partialY
  67+ EAF4              ;;;                        ; calc Y3-Y1 = fullY
  68+ EAF4              ;;;                        ; X2partial = X1 + (deltaX * (partialY/fullY) - Can be done by line algorithim variant?
  69+ EAF4              ;;;                        ; l2_fillBottomFlatTriangle (X1Y1, X2parialY2, X2Y2)
  70+ EAF4              ;;;                        ; l2_fillTopFlatTriangle(X2partialY2, X2Y2, X3Y3)
  71+ EAF4              ;;;
  72+ EAF4              ;;;                           X1   H           X2 H
  73+ EAF4              ;;;                                Y0
  74+ EAF4              ;; bc = x0y0, de=x1y1 hl=x2y2 a = colour
  75+ EAF4              ;Now Works
  76+ EAF4 78           l2_fillAnyTriangle:     ld      a,b
  77+ EAF5                                      JumpIfALTNusng   d, .noSwapY0Y1
  77+ EAF5 BA          >                        cp      d
  77+ EAF6 DA FD EA    >                        jp		c, .noSwapY0Y1
  78+ EAF9 C5           .SwapY0Y1:              push    bc
  79+ EAFA 42 4B                                ld      bc,de
  80+ EAFC D1                                   pop     de
  81+ EAFD 78           .noSwapY0Y1:            ld      a,b
  82+ EAFE                                      JumpIfALTNusng   h, .noSwapY0Y2
  82+ EAFE BC          >                        cp      h
  82+ EAFF DA 06 EB    >                        jp		c, .noSwapY0Y2
  83+ EB02 C5           .SwapY0Y2:              push    bc
  84+ EB03 44 4D                                ld      bc,hl
  85+ EB05 E1                                   pop     hl
  86+ EB06 7A           .noSwapY0Y2:            ld      a,d
  87+ EB07                                      JumpIfALTNusng   h, .noSwapY1Y2
  87+ EB07 BC          >                        cp      h
  87+ EB08 DA 0C EB    >                        jp		c, .noSwapY1Y2
  88+ EB0B EB           .SwapY1Y2:              ex      de,hl
  89+ EB0C              .noSwapY1Y2:
  90+ EB0C 78           .DoneYAscending:        ld      a,b
  91+ EB0D BA                                   cp      d
  92+ EB0E CA 43 EB                             jp      z,.PrepFlatTopTriangle
  93+ EB11 7A                                   ld      a,d
  94+ EB12 BC                                   cp      h
  95+ EB13 CA 4A EB                             jp      z,.PrepFlatBottomTriangle
  96+ EB16              ; Now we know we have a triangle that needs to split at point X?Y1 where X? is between X0 and X2
  97+ EB16              ; Simplified expensive version for now, just call l2_draw_diagonal_save until we hit Y1 and then check for X pixel adjust
  98+ EB16              ; better later to do a quick Deltaxy calc but for now we are testing
  99+ EB16              ; acutallty diagnoal save will be better to do as we can calculate the line from X0 to X2 up front and save having to do that calc
 100+ EB16              ; again in the top to bottom or bottom to top, we can refine it with an overshoot variable so it precalcs upto Y1 + 1 to make sure x? is correct
 101+ EB16 E5 D5 C5     .SplitTriangleInTwo:    push	hl,,de,,bc                      ; save for now. bc is already X0Y0
 102+ EB19 EB                                   ex      de,hl                           ; quick load of de with X2Y2
 103+ EB1A 3E 01                                ld		a,1
 104+ EB1C DD 01                                break
 105+ EB1E CD 08 E9                             call	l2_draw_diagonal_save           ;now we don't know if x? is going to be > x1 or no
 106+ EB21 C1           .CheckX1:               pop     bc
 107+ EB22 D1                                   pop     de
 108+ EB23 21 73 E5                             ld      hl,l2targetArray1
 109+ EB26 7A                                   ld      a,d
 110+ EB27 ED 31                                add     hl,a
 111+ EB29 7E                                   ld      a,(hl)                          ; now we have x?
 112+ EB2A E1                                   pop     hl                              ; now we have bc=x0y0, de=x1y1, hl=x2y2 a = x?
 113+ EB2B              ; We will optimise that we ahve already calcualteed a diagnoal later
 114+ EB2B E5 D5 C5 F5                          push    hl,,de,,bc,,af                  ; bc already = y0x0;
 115+ EB2F 62                                   ld      h,d                             ; h = y common whch is y1
 116+ EB30 53                                   ld      d,e                             ; d = x1
 117+ EB31 5F                                   ld      e,a                             ; e = x2
 118+ EB32 DD 01                                break
 119+ EB34 CD BB EB                             call    l2_fillBottomFlatTriangle       ;>l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
 120+ EB37 F1 C1 D1 E1                          pop     hl,,de,,bc,,af
 121+ EB3B 44 4D                                ld      bc,hl                           ; bc = common bottom x2y2
 122+ EB3D 62                                   ld      h,d                             ; h = common y for flat top
 123+ EB3E 57                                   ld      d,a                             ; d = X?, e is already x1
 124+ EB3F CD 50 EB                             call    l2_fillTopFlatTriangle          ;>l2_fillTopFlatTriangle BC y2x2 DE x0x1, H YCommon, L Colour"
 125+ EB42 C9                                   ret
 126+ EB43              ;; bc = x0y0, de=x1y1 hl=x2y2 a = colour
 127+ EB43 51           .PrepFlatTopTriangle:   ld      d,c
 128+ EB44 44 4D                                ld      bc,hl
 129+ EB46 CD 50 EB                             call    l2_fillTopFlatTriangle          ;>l2_fillTopFlatTriangle BC y2x2 DE x0x1, H YCommon, L Colour"
 130+ EB49 C9                                   ret
 131+ EB4A 54           .PrepFlatBottomTriangle:ld      d,h
 132+ EB4B 65                                   ld      h,l
 133+ EB4C CD BB EB                             call    l2_fillBottomFlatTriangle       ;>l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
 134+ EB4F C9                                   ret
 135+ EB50              ;;;.SplitTriangleInTwo     ; Y2 will always be <= Y3
 136+ EB50              ;;;                        ; calculate line X1Y1 to X3Y3 until y row = Y2, result is XTemp,
 137+ EB50              ;;;                        ; drawflat bottomed X1Y1, X2Y2, XTempY2
 138+ EB50              ;;;                        ; drawflat topped   X2Y2, XTempY2, X3Y3
 139+ EB50
 140+ EB50
 141+ EB50
 142+ EB50                                     ; call    l2_fillTopFlatTriangle
 143+ EB50
 144+ EB50              ;; ">l2_fillTopFlatTriangle BC y2x2 DE x0x1, H YCommon, L Colour"                            X1YC            X2YC
 145+ EB50              ;; b = bottomxy, de = to x1 x2, h =common top y
 146+ EB50 DD 01        l2_fillTopFlatTriangle: break
 147+ EB52 7B                                   ld		a,e                             ; check x0 x1 to make sure lines draw left to right
 148+ EB53                                      JumpIfAGTENusng d, .x2gtex1
 148+ EB53 BA          >                        cp     d
 148+ EB54 D2 5F EB    >                        jp		nc,.x2gtex1
 149+ EB57              ;                        cp		e
 150+ EB57              ;                        jr		nc, .x2gtex1                    ; make sureline is alwasy left to right so +ve direction
 151+ EB57 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x2
 152+ EB5A DD 2E 02                             ld		ixl,2                           ; list 2 hols  x1 down to x2
 153+ EB5D 18 06                                jr		.storepoints
 154+ EB5F DD 26 02     .x2gtex1:               ld		ixh,2
 155+ EB62 DD 2E 01                             ld		ixl,1
 156+ EB65 DD E5        .storepoints:           push    ix
 157+ EB67 C5 D5 E5                             push	bc,,de,,hl
 158+ EB6A 79                                   ld      a,c                             ; save    c x2
 159+ EB6B 4A                                   ld      c,d                             ; now c = d = x0
 160+ EB6C 5F                                   ld      e,a                             ; e = a = old c = x2
 161+ EB6D 50                                   ld      d,b                             ; d = b = y2
 162+ EB6E 44                                   ld      b,h                             ; b = h = y common
 163+ EB6F DD 7C                                ld      a,ixh
 164+ EB71 E5                                   push    hl; temp fix
 165+ EB72 CD 08 E9                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
 166+ EB75 FD E1                                pop     iy ;tempfix to hold y common
 167+ EB77 E1 D1 C1                             pop		bc,,de,,hl
 168+ EB7A DD E1                                pop     ix
 169+ EB7C C5 D5 E5                             push	bc,,de,,hl; of course it always assumes ?
 170+ EB7F 79                                   ld      a,c                             ; save    c x2
 171+ EB80 4B                                   ld      c,e                             ; now c = d = x1
 172+ EB81 5F                                   ld      e,a                             ; e = a = old c = x2
 173+ EB82 50                                   ld      d,b                             ; d = b = y2
 174+ EB83 FD 44                                ld      b,iyh ;tempfix                            ; b = h = y common
 175+ EB85 DD 7D                                ld		a,ixl
 176+ EB87 CD 08 E9                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
 177+ EB8A E1 D1 C1                             pop		bc,,de,,hl
 178+ EB8D DD 01                                break                                   ; so now we have two arrays loaded h = start b = end
 179+ EB8F 78                                   ld      a,b
 180+ EB90 44                                   ld		b,h                             ; and set up working values as we share
 181+ EB91 67                                   ld		h,a								; the flat bottom code here
 182+ EB92 DD 01                                break
 183+ EB94 50           .OldSave:               ld		d,b
 184+ EB95 5C                                   ld		e,h								; save loop counters
 185+ EB96 D5           .SaveForLoop:           push	de								; de = y0ycommon
 186+ EB97 21 73 E5     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
 187+ EB9A 78                                   ld		a,b
 188+ EB9B ED 31                                add		hl,a							; hl = l2targetArray1 row b
 189+ EB9D 7E                                   ld		a,(hl)							;
 190+ EB9E 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
 191+ EB9F 21 73 E6                             ld      hl,l2targetArray2
 192+ EBA2 78                                   ld      a,b
 193+ EBA3 ED 31                                add     hl,a
 194+ EBA5              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
 195+ EBA5 7E                                   ld		a,(hl)
 196+ EBA6 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
 197+ EBA7 3A 6B E5     .SetColour:             ld		a,(l2linecolor)
 198+ EBAA 5F                                   ld		e,a								; de = to colour
 199+ EBAB C5           .SavePoints:            push	bc								; bc = rowcol
 200+ EBAC 25                                   dec		h
 201+ EBAD E5                                   push	hl								; hl = l2targetArray1[b]
 202+ EBAE CD BC E4     .DoLine:	            call	l2_draw_horz_line_to
 203+ EBB1 E1                                   pop		hl
 204+ EBB2 C1                                   pop		bc
 205+ EBB3 04                                   inc		b								; down a rowc
 206+ EBB4 D1                                   pop		de								; de = from to (and b also = current)
 207+ EBB5 14                                   inc		d
 208+ EBB6 7B                                   ld		a,e								; while e >= d
 209+ EBB7 BA                                   cp		d
 210+ EBB8 30 DC                                jr 		nc,.SaveForLoop					; Is this the right point??
 211+ EBBA C9                                   ret
 212+ EBBB
 213+ EBBB              ; Calulate
 214+ EBBB
 215+ EBBB              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
 216+ EBBB              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
 217+ EBBB              ; "note line to   bc = left side row,col, d right pixel, l = color"
 218+ EBBB              l2_fillBottomFlatTriangle:;break
 219+ EBBB 7B                                   ld      a,e
 220+ EBBC                                      JumpIfAGTENusng d, .x2gtex1
 220+ EBBC BA          >                        cp     d
 220+ EBBD D2 C8 EB    >                        jp		nc,.x2gtex1
 221+ EBC0              ;                        ld		a,d                             ; if x0 < x2 goto x2<x1
 222+ EBC0              ;                        cp		e                               ;      list 1 holds x1 down to x0
 223+ EBC0              ;                        ld		ixl,2                           ;      list 2 hols  x2 down to x0
 224+ EBC0              ;                        jr		nc, .x2gtex1                    ;
 225+ EBC0 DD 26 01     .x1ltx2:                ld		ixh,1                           ; else list 1 holds x0 down to x1
 226+ EBC3 DD 2E 02                             ld		ixl,2                           ;      list 2 hols  x0 down to x2
 227+ EBC6 18 06                                jr		.storepoints                    ;
 228+ EBC8 DD 26 02     .x2gtex1:               ld		ixh,2                           ;
 229+ EBCB DD 2E 01                             ld		ixl,1                           ;
 230+ EBCE DD E5        .storepoints:           push    ix
 231+ EBD0 C5 D5 E5                             push	bc,,de,,hl                      ; save working variables
 232+ EBD3 DD 7C                                ld		a,ixh
 233+ EBD5 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
 234+ EBD6 54                                   ld		d,h
 235+ EBD7 CD 08 E9                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
 236+ EBDA E1 D1 C1                             pop		bc,,de,,hl
 237+ EBDD DD E1                                pop     ix
 238+ EBDF C5 E5                                push	bc,,hl
 239+ EBE1 54                                   ld		d,h                             ; now its bc -> he
 240+ EBE2 DD 7D                                ld		a,ixl
 241+ EBE4 CD 08 E9                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
 242+ EBE7 E1 C1                                pop		bc,,hl
 243+ EBE9 50           .OldSaveForLoop:           ld		d,b
 244+ EBEA 5C                                   ld		e,h								; save loop counters
 245+ EBEB D5           .SaveForLoop:                        push	de								; de = y0ycommon
 246+ EBEC 21 73 E5     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
 247+ EBEF 78                                   ld		a,b
 248+ EBF0 ED 31                                add		hl,a							; hl = l2targetArray1 row b
 249+ EBF2 7E                                   ld		a,(hl)							;
 250+ EBF3 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
 251+ EBF4 21 73 E6                             ld      hl,l2targetArray2
 252+ EBF7 78                                   ld      a,b
 253+ EBF8 ED 31                                add     hl,a
 254+ EBFA              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
 255+ EBFA 7E                                   ld		a,(hl)
 256+ EBFB 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
 257+ EBFC 3A 6B E5     .SetColour:             ld		a,(l2linecolor)
 258+ EBFF 5F                                   ld		e,a								; de = to colour
 259+ EC00 C5           .SavePoints:            push	bc								; bc = rowcol
 260+ EC01 25                                   dec		h
 261+ EC02 E5                                   push	hl								; hl = l2targetArray1[b]
 262+ EC03 CD BC E4     .DoLine:	            call	l2_draw_horz_line_to
 263+ EC06 E1                                   pop		hl
 264+ EC07 C1                                   pop		bc
 265+ EC08 04                                   inc		b								; down a rowc
 266+ EC09 D1                                   pop		de								; de = from to (and b also = current)
 267+ EC0A 14                                   inc		d
 268+ EC0B 7B                                   ld		a,e								; while e >= d
 269+ EC0C BA                                   cp		d
 270+ EC0D 30 DC                                jr 		nc,.SaveForLoop					; Is this the right point??
 271+ EC0F C9                                   ret
 272+ EC10
 273+ EC10
 274+ EC10              ;;;;fnCompareHLDELeadSign:  cpHLDELeadSign
 275+ EC10              ;;;;                        ret
 276+ EC10              ;;;;
 277+ EC10              ;;;;l2_bottomX              DW 0
 278+ EC10              ;;;;l2_bottomY              DW 0
 279+ EC10              ;;;;l2_leftX                DW 0
 280+ EC10              ;;;;l2_rightX               DW 0
 281+ EC10              ;;;;l2_commonTopY           DW 0
 282+ EC10              ;;;;l2_fillTopY             DB 0
 283+ EC10              ;;;;l2_fillBottomY          DB 0
 284+ EC10              ;;;;;; l2_fillTopFlatTriangleSigned IY[01] bottomX[23] bottom Y [45]X1 [67]X2 [89]Common Top Y
 285+ EC10              ;;;;;; Note values must be 2's c not lead sign
 286+ EC10              ;;;;l2_fillTopFlatTriangleSigned: break
 287+ EC10              ;;;;                        ld      hl,iy                          ; transfer to local copy off IY tables
 288+ EC10              ;;;;                        ld      b,10                            ;
 289+ EC10              ;;;;                        ld      de,l2_commonY                  ;
 290+ EC10              ;;;;                        ldir                                   ;
 291+ EC10              ;;;;                        ld      hl,(l2_leftX)
 292+ EC10              ;;;;                        ld      de,(l2_rightX)
 293+ EC10              ;;;;                        call    fnCompareHLDELeadSign
 294+ EC10              ;;;;                        jr      c,.x1LTX2
 295+ EC10              ;;;;                        ld      (l2_leftX),de                   ; swap them over to simplify later code
 296+ EC10              ;;;;                        ld      (l2_rightX),hl
 297+ EC10              ;;;;.x1ltx2:                call    l2_save_diagnonal_signed_1      ; will also set the fillTopX and bottomY, if Y top & bottom off screen will set Carry flag
 298+ EC10              ;;;;                        ret     c
 299+ EC10              ;;;;                        call    l2_save_diagnonal_signed_2
 300+ EC10              ;;;;.DrawLines:             ld      a,(l2_fillTopY)
 301+ EC10              ;;;;                        ld		d,a
 302+ EC10              ;;;;                        ld      a,(l2_fillBottomY)              ; will always draw to
 303+ EC10              ;;;;                        ld      e,a
 304+ EC10              ;;;;.SaveForLoop:           push	de								; de = y0ycommon
 305+ EC10              ;;;;.GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
 306+ EC10              ;;;;                        ld		a,b
 307+ EC10              ;;;;                        add		hl,a							; hl = l2targetArray1 row b
 308+ EC10              ;;;;                        ld		a,(hl)							;
 309+ EC10              ;;;;                        ld		c,a								; c = col1 i.e. l2targetarray1[b]
 310+ EC10              ;;;;                        ld      hl,l2targetArray2
 311+ EC10              ;;;;                        ld      a,b
 312+ EC10              ;;;;                        add     hl,a
 313+ EC10              ;;;;;                        inc		h								; hl = l2targetArray2 row b if we interleave
 314+ EC10              ;;;;                        ld		a,(hl)
 315+ EC10              ;;;;                        ld		d,a								; d = col2 i.e. l2targetarray2[b]
 316+ EC10              ;;;;.SetColour:             ld		a,(l2linecolor)
 317+ EC10              ;;;;                        ld		e,a								; de = to colour
 318+ EC10              ;;;;.SavePoints:            push	bc								; bc = rowcol
 319+ EC10              ;;;;                        dec		h
 320+ EC10              ;;;;                        push	hl								; hl = l2targetArray1[b]
 321+ EC10              ;;;;.DoLine:	            call	l2_draw_horz_line_to
 322+ EC10              ;;;;                        pop		hl
 323+ EC10              ;;;;                        pop		bc
 324+ EC10              ;;;;                        inc		b								; down a rowc
 325+ EC10              ;;;;                        pop		de								; de = from to (and b also = current)
 326+ EC10              ;;;;                        inc		d
 327+ EC10              ;;;;                        ld		a,e								; while e >= d
 328+ EC10              ;;;;                        cp		d
 329+ EC10              ;;;;                        jr 		nc,.SaveForLoop					; Is this the right point??
 330+ EC10              ;;;;                        ret
 331+ EC10
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 816  EC10                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ EC10
   2+ EC10 00 00        l2_circle_pos		DW 0
   3+ EC12 00           l2_circle_colour	DB 0
   4+ EC13 00           l2_circle_radius	DB 0
   5+ EC14 00           l2_circle_x			DB 0
   6+ EC15 00           l2_circle_y			DB 0
   7+ EC16 00           l2_circle_d			DB 0
   8+ EC17
   9+ EC17 00 00 00...  l2_circle_xHeap 	DS 2*66
  10+ EC9B 00 00 00...  l2_circle_yHeap     DS 2*66
  11+ ED1F 00           l2_circle_heap_size DB 0
  12+ ED20 00 00        l2_circle_clip_y    DW 0
  13+ ED22 00 00        l2_circle_clip_x    DW 0
  14+ ED24 00           l2_circle_flag      DB 0
  15+ ED25 00           l2_circle_counter   DB 0
  16+ ED26              ;Sine table
  17+ ED26              ;FOR I%, 0, 31
  18+ ED26              ;
  19+ ED26              ; N = ABS(SIN((I% / 64) * 2 * PI))
  20+ ED26              ;
  21+ ED26              ; IF N >= 1
  22+ ED26              ;  EQUB 255
  23+ ED26              ; ELSE
  24+ ED26              ;  EQUB INT(256 * N + 0.5)
  25+ ED26              ; ENDIF
  26+ ED26              ;
  27+ ED26              ;NEXT
  28+ ED26              ;---------------------------------------------------------------------------------------------------------------------------------
  29+ ED26              ; in HL = xPixelPos, DE = yPixelPos, A = Radius
  30+ ED26              ;IFDEF   CIRCLE2
  31+ ED26              ;;;;+l2_circle_clipped:	ld		(l2_circle_radius),a
  32+ ED26              ;;;;+					ld		(l2_circle_clip_y),de
  33+ ED26              ;;;;+					ld		(l2_circle_clip_x),hl
  34+ ED26              ;;;;+					ZeroA
  35+ ED26              ;;;;+					ld		(l2_circle_heap_size),a
  36+ ED26              ;;;;+					ld		(l2_circle_counter),a
  37+ ED26              ;;;;+					dec		a
  38+ ED26              ;;;;+					ld		(l2_circle_flag),a
  39+ ED26              ;;;;+.CircleLoop:		call	SinCounter						; a = sin (counter) * 256
  40+ ED26              ;;;;+					ld		d,a
  41+ ED26              ;;;;+					ld		a,(l2_circle_radius)
  42+ ED26              ;;;;+					ld		e,a
  43+ ED26              ;;;;+					mul										; de = k * sin (counter) so d = k * sin (counter) / 256
  44+ ED26              ;;;;+					ld		e,d								; using de as TA
  45+ ED26              ;;;;+					ld		d,0
  46+ ED26              ;;;;+					ld		a,(l2_circle_counter)
  47+ ED26              ;;;;+					JumpIfALTNusng 33,.RightHalf
  48+ ED26              ;;;;+.LeftHalf:			NegateDE								; if >= 33 then DE = de * -1 (2's c)
  49+ ED26              ;;;;+					K6 = de + l2_circle_clip_x
  50+ ED26              ;;;;+					call	CosCounter
  51+ ED26              ;;;;+					ld		d,a
  52+ ED26              ;;;;+					ld		a,(l2_circla_radius)
  53+ ED26              ;;;;+					mul		de
  54+ ED26              ;;;;+					ld		e,d
  55+ ED26              ;;;;+					ld		d,0
  56+ ED26              ;;;;+					a 		= l2_counter + 15 mod 64
  57+ ED26              ;;;;+					JumpIfALTNusng	33, .BottomHalf
  58+ ED26              ;;;;+.TopHalf:			NegateDE
  59+ ED26              ;;;;+					K62 = de + l2_circle_clip_y
  60+ ED26              ;;;;+					ld		a,(l2_circle_flag)
  61+ ED26              ;;;;+					JumpIfAIsZZero		.SkipFlagUpdate
  62+ ED26              ;;;;+					inc		a
  63+ ED26              ;;;;+					ld		(l2_circle_flag),a
  64+ ED26              ;;;;+.SkipFlagUpdate:
  65+ ED26              ;;;;+
  66+ ED26              ;;;;+                X = K * SIN (CNT + 16) (i.e X = K * COS (CNT)
  67+ ED26              ;;;;+                A = (CNT + 15) mod 64
  68+ ED26              ;;;;+                if  A >= 33     ; top half of circle
  69+ ED26              ;;;;+                    X = neg X
  70+ ED26              ;;;;+                    T = negative
  71+ ED26              ;;;;+                call    Bline (draw segment)
  72+ ED26              ;;;;+                        K6(32) = TX + K4(10) = y corrc of center + new point
  73+ ED26              ;;;;+                        if flag <> 0
  74+ ED26              ;;;;+                            flag ++ (as flag initially will be $FF so go to 0)
  75+ ED26              ;;;;+                        BL5:
  76+ ED26              ;;;;+                        if LSY2[LSP-1] <> $FF and LSY2 [LSP1] <> $FF    (BL5)
  77+ ED26              ;;;;+                            X15 [0 1] = K5(10)                      (BL1)
  78+ ED26              ;;;;+                            X15 [2 3] = K5(32)
  79+ ED26              ;;;;+                            X15 [4 5] = K6(10)
  80+ ED26              ;;;;+                            X15 [6 7] = K6(32)
  81+ ED26              ;;;;+                            call clip X1Y1 to X2Y2
  82+ ED26              ;;;;+                            if Line off scren goto BL5
  83+ ED26              ;;;;+                            IF swap <> 0
  84+ ED26              ;;;;+                                swap X1Y1 with X2Y2
  85+ ED26              ;;;;+                            Y = LAP                                 (BL9)
  86+ ED26              ;;;;+                            A = LSY2-1 [Y]
  87+ ED26              ;;;;+                            if A = $FF
  88+ ED26              ;;;;+                                LSX2[Y] = X1
  89+ ED26              ;;;;+                                LSY2[Y] = Y1
  90+ ED26              ;;;;+                                Y++
  91+ ED26              ;;;;+
  92+ ED26              ;;;;+                            Store X2 in LSX2(Y)                     (BL8)
  93+ ED26              ;;;;+                            Store Y2 in lSY2(y)
  94+ ED26              ;;;;+                            call    DrawLine from (X1 Y1 to X2 Y2)
  95+ ED26              ;;;;+                            if  XX13 <> 0 goto BL5
  96+ ED26              ;;;;+                                                                (BL7)
  97+ ED26              ;;;;+                        Copy data for K6(3210) into K5(3210) for next call (K5(10) = x  K5(32) = y)
  98+ ED26              ;;;;+                        CNT = CNT + STP
  99+ ED26              ;;;;+            while CNT < 65
 100+ ED26              ;ENDIF
 101+ ED26              ;---------------------------------------------------------------------------------------------------------------------------------
 102+ ED26              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
 103+ ED26 7B           l2_draw_circle:     ld		a,e
 104+ ED27 32 CD ED                         ld		(.PlotPixel+1),a
 105+ ED2A 7A                               ld		a,d								; get radius
 106+ ED2B A7                               and		a
 107+ ED2C C8                               ret		z
 108+ ED2D FE 01                            cp		1
 109+ ED2F CA E4 ED                         jp		z,CircleSinglepixel
 110+ ED32 ED 43 5C ED                      ld		(.Plot1+1),bc					; save origin into DE reg in code
 111+ ED36 DD 67                            ld		ixh,a							; ixh = raidus
 112+ ED38 DD 2E 00                         ld		ixl,0
 113+ ED3B 26 00        .calcd:	            ld		h,0
 114+ ED3D 6F                               ld		l,a
 115+ ED3E 29                               add		hl,hl							; hl = r * 2
 116+ ED3F EB                               ex		de,hl							; de = r * 2
 117+ ED40 21 03 00                         ld		hl,3
 118+ ED43 A7                               and		a
 119+ ED44 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
 120+ ED46 44                               ld		b,h
 121+ ED47 4D                               ld		c,l								; bc = 3 - (r * 2)
 122+ ED48 21 01 00     .calcdelta:         ld		hl,1
 123+ ED4B 16 00                            ld		d,0
 124+ ED4D DD 5D                            ld		e,ixl
 125+ ED4F A7                               and		a
 126+ ED50 ED 52                            sbc		hl,de
 127+ ED52 11 01 00     .Setde1:            ld		de,1
 128+ ED55 DD 7C        .CircleLoop:        ld		a,ixh
 129+ ED57 DD BD                            cp		ixl
 130+ ED59 D8                               ret		c
 131+ ED5A D9           .ProcessLoop:	    exx
 132+ ED5B 11 00 00     .Plot1:             ld		de,0
 133+ ED5E 7B                               ld		a,e
 134+ ED5F DD 85                            add		a,ixl
 135+ ED61 4F                               ld		c,a
 136+ ED62 7A                               ld		a,d
 137+ ED63 DD 84                            add		a,ixh
 138+ ED65 47                               ld		b,a
 139+ ED66 CD CC ED                         call	.PlotPixel			;CX+X,CY+Y
 140+ ED69 7B           .Plot2:             ld 		a,e
 141+ ED6A DD 95                            sub 	ixl
 142+ ED6C 4F                               ld 		c,a
 143+ ED6D 7A                               ld 		a,d
 144+ ED6E DD 84                            add 	a,ixh
 145+ ED70 47                               ld		b,a
 146+ ED71 CD CC ED                         call	.PlotPixel			;CX-X,CY+Y
 147+ ED74 7B           .Plot3:             ld 		a,e
 148+ ED75 DD 85                            add		a,ixl
 149+ ED77 4F                               ld 		c,a
 150+ ED78 7A                               ld 		a,d
 151+ ED79 DD 94                            sub 	ixh
 152+ ED7B 47                               ld 		b,a
 153+ ED7C CD CC ED                         call	.PlotPixel			;CX+X,CY-Y
 154+ ED7F 7B           .Plot4:             ld 		a,e
 155+ ED80 DD 95                            sub 	ixl
 156+ ED82 4F                               ld 		c,a
 157+ ED83 7A                               ld 		a,d
 158+ ED84 DD 94                            sub 	ixh
 159+ ED86 47                               ld 		b,a
 160+ ED87 CD CC ED                         call	.PlotPixel			;CX-X,CY-Y
 161+ ED8A 7A           .Plot5:	            ld 		a,d
 162+ ED8B DD 85                            add 	a,ixl
 163+ ED8D 47                               ld 		b,a
 164+ ED8E 7B                               ld 		a,e
 165+ ED8F DD 84                            add 	a,ixh
 166+ ED91 4F                               ld 		c,a
 167+ ED92 CD CC ED                         call	.PlotPixel			;CY+X,CX+Y
 168+ ED95 7A           .Plot6:	            ld 		a,d
 169+ ED96 DD 95                            sub 	ixl
 170+ ED98 47                               ld 		b,a
 171+ ED99 7B                               ld 		a,e
 172+ ED9A DD 84                            add 	a,ixh
 173+ ED9C 4F                               ld 		c,a
 174+ ED9D CD CC ED                         call	.PlotPixel			;CY-X,CX+Y
 175+ EDA0 7A           .Plot7:	            ld 		a,d
 176+ EDA1 DD 85                            add 	a,ixl
 177+ EDA3 47                               ld 		b,a
 178+ EDA4 7B                               ld 		a,e
 179+ EDA5 DD 94                            sub 	ixh
 180+ EDA7 4F                               ld 		c,a
 181+ EDA8 CD CC ED                         call	.PlotPixel			;CY+X,CX-Y
 182+ EDAB 7A           .Plot8:	            ld 		a,d
 183+ EDAC DD 95                            sub 	ixl
 184+ EDAE 47                               ld		b,a
 185+ EDAF 7B                               ld 		a,e
 186+ EDB0 DD 94                            sub 	ixh
 187+ EDB2 4F                               ld 		c,a
 188+ EDB3 CD CC ED                         call	.PlotPixel			;CY-X,CX-Y
 189+ EDB6 D9                               exx
 190+ EDB7 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 191+ EDB9 28 03                            jr z,   .draw_circle_1
 192+ EDBB 19                               add hl,de			; Delta=Delta+D1
 193+ EDBC 18 05                            jr      .draw_circle_2		;
 194+ EDBE 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 195+ EDBF 03                               inc     bc
 196+ EDC0 03                               inc     bc				; D2=D2+2
 197+ EDC1 DD 25                            dec     ixh				; Y=Y-1
 198+ EDC3 03           .draw_circle_2:		inc bc				; D2=D2+2
 199+ EDC4 03                               inc bc
 200+ EDC5 13                               inc de				; D1=D1+2
 201+ EDC6 13                               inc de
 202+ EDC7 DD 2C                            inc ixl				; X=X+1
 203+ EDC9 C3 55 ED                         jp      .CircleLoop
 204+ EDCC 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 205+ EDCE D5 C5 E5                         push	de,,bc,,hl
 206+ EDD1                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 206+ EDD1 78          >                        ld      a,b
 206+ EDD2             >                        JumpIfAGTENusng 192 ,.NoPlot
 206+ EDD2 FE C0       >                        cp     192
 206+ EDD4 D2 E0 ED    >                        jp		nc,.NoPlot
 206+ EDD7 69          >                        ld      l,c
 206+ EDD8 CD 68 E0    >                        call    asm_l2_row_bank_select
 206+ EDDB 67          >                        ld      h,a
 206+ EDDC 3A 87 F0    >                        ld      a,(line_gfx_colour)
 206+ EDDF 77          >                        ld      (hl),a
 206+ EDE0             >.NoPlot:
 207+ EDE0 E1 C1 D1                         pop		de,,bc,,hl
 208+ EDE3 C9                               ret
 209+ EDE4 7B           CircleSinglepixel:  ld		a,e
 210+ EDE5                                  l2_plot_macro; call	l2_plot_pixel_y_test
 210+ EDE5 78          >                        ld      a,b
 210+ EDE6             >                        JumpIfAGTENusng 192 ,.NoPlot
 210+ EDE6 FE C0       >                        cp     192
 210+ EDE8 D2 F4 ED    >                        jp		nc,.NoPlot
 210+ EDEB 69          >                        ld      l,c
 210+ EDEC CD 68 E0    >                        call    asm_l2_row_bank_select
 210+ EDEF 67          >                        ld      h,a
 210+ EDF0 3A 87 F0    >                        ld      a,(line_gfx_colour)
 210+ EDF3 77          >                        ld      (hl),a
 210+ EDF4             >.NoPlot:
 211+ EDF4 C9                               ret
 212+ EDF5
 213+ EDF5              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 214+ EDF5 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 215+ EDF6 32 6E EF                         ld		(.PlotPixel+1),a
 216+ EDF9 79                               ld		a,c								; get radius
 217+ EDFA                                  ReturnIfAIsZero
 217+ EDFA A7          >                        and     a
 217+ EDFB C8          >                        ret     z
 218+ EDFC                                  JumpIfAEqNusng  1, .circleSinglepixel
 218+ EDFC FE 01       >                        cp     1
 218+ EDFE CA 87 EF    >                        jp      z,.circleSinglepixel
 219+ EE01 ED 53 2E EE                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 220+ EE05 22 31 EE                         ld      (.Plot1X+1),hl                  ; .
 221+ EE08 DD 67                            ld		ixh,a							; ixh = raidus
 222+ EE0A DD 2E 00                         ld		ixl,0						    ; ixl = 0
 223+ EE0D 26 00        .calcd:	            ld		h,0                             ; hl = radius
 224+ EE0F 6F                               ld		l,a                             ; .
 225+ EE10 29                               add		hl,hl							; hl = r * 2
 226+ EE11 EB                               ex		de,hl							; de = r * 2
 227+ EE12 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 228+ EE15 A7                               and		a                               ; .
 229+ EE16 ED 52                            sbc		hl,de							; .
 230+ EE18 44                               ld		b,h                             ; bc = 3 - (r * 2)
 231+ EE19 4D                               ld		c,l								; .
 232+ EE1A 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 233+ EE1D 16 00                            ld		d,0                             ; de = ixl
 234+ EE1F DD 5D                            ld		e,ixl                           ;
 235+ EE21 A7                               and		a                               ;
 236+ EE22 ED 52                            sbc		hl,de                           ; hl = 1 - radius
 237+ EE24 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 238+ EE27              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 238+ EE27 DD 7C       >                        ld      a,ixh
 238+ EE29 DD BD       >                        cp      ixl
 238+ EE2B D8          >                        ret	    c
 239+ EE2C D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 240+ EE2D 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 241+ EE30 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 242+ EE33 E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 243+ EE36 06 00                            ld      b,0
 244+ EE38 DD 4D                            ld      c,ixl
 245+ EE3A                                  ClearCarryFlag
 245+ EE3A B7          >                        or a
 246+ EE3B ED 4A                            adc     hl,bc
 247+ EE3D C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 248+ EE3E                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 248+ EE3E 7C          >                        ld      a,h
 248+ EE3F A7          >                        and     a
 248+ EE40 C2 55 EE    >                        jp	    nz,.Plot1Done
 249+ EE43 EB                               ex      de,hl                           ; now de = x coord calculated
 250+ EE44 C5                               push    bc                              ; + 3
 251+ EE45                                  ClearCarryFlag
 251+ EE45 B7          >                        or a
 252+ EE46 06 00                            ld      b,0
 253+ EE48 DD 4D                            ld      c,ixl
 254+ EE4A ED 4A                            adc     hl,bc
 255+ EE4C C1                               pop     bc                              ; + 2
 256+ EE4D                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 256+ EE4D 7C          >                        ld      a,h
 256+ EE4E A7          >                        and     a
 256+ EE4F C2 55 EE    >                        jp	    nz,.Plot1Done
 257+ EE52 CD 6D EF                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 258+ EE55 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 259+ EE57 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 260+ EE5A 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 261+ EE5C DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 262+ EE5E                                  ClearCarryFlag                          ;                              plot6        for cy - x
 262+ EE5E B7          >                        or a
 263+ EE5F ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 264+ EE61 C1                               pop     bc                              ;
 265+ EE62                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 265+ EE62 7C          >                        ld      a,h
 265+ EE63 A7          >                        and     a
 265+ EE64 C2 79 EE    >                        jp	    nz,.Plot2Done
 266+ EE67 EB                               ex      de,hl
 267+ EE68 C5                               push    bc
 268+ EE69 06 00                            ld      b,0
 269+ EE6B DD 4D                            ld      c,ixl
 270+ EE6D                                  ClearCarryFlag
 270+ EE6D B7          >                        or a
 271+ EE6E ED 4A                            adc     hl,bc
 272+ EE70 C1                               pop     bc
 273+ EE71                                  JumpIfRegIsNotZero  h,.Plot2Done
 273+ EE71 7C          >                        ld      a,h
 273+ EE72 A7          >                        and     a
 273+ EE73 C2 79 EE    >                        jp	    nz,.Plot2Done
 274+ EE76 CD 6D EF                         call	.PlotPixel	                    ; CX-X,CY+Y
 275+ EE79 E1 D1        .Plot2Done:         pop     de,,hl
 276+ EE7B E5 D5 C5     .Plot3:             push    hl,,de,,bc
 277+ EE7E 06 00                            ld      b,0
 278+ EE80 DD 4D                            ld      c,ixl
 279+ EE82                                  ClearCarryFlag
 279+ EE82 B7          >                        or a
 280+ EE83 ED 4A                            adc     hl,bc
 281+ EE85 C1                               pop     bc
 282+ EE86                                  JumpIfRegIsNotZero  h,.Plot3Done
 282+ EE86 7C          >                        ld      a,h
 282+ EE87 A7          >                        and     a
 282+ EE88 C2 9D EE    >                        jp	    nz,.Plot3Done
 283+ EE8B EB                               ex      de,hl
 284+ EE8C C5                               push    bc
 285+ EE8D 06 00                            ld      b,0
 286+ EE8F DD 4D                            ld      c,ixl
 287+ EE91                                  ClearCarryFlag
 287+ EE91 B7          >                        or a
 288+ EE92 ED 42                            sbc     hl,bc
 289+ EE94 C1                               pop     bc
 290+ EE95                                  JumpIfRegIsNotZero  h,.Plot3Done
 290+ EE95 7C          >                        ld      a,h
 290+ EE96 A7          >                        and     a
 290+ EE97 C2 9D EE    >                        jp	    nz,.Plot3Done
 291+ EE9A CD 6D EF                         call	.PlotPixel	                    ; CX+X,CY-Y
 292+ EE9D E1 D1        .Plot3Done:         pop     de,,hl
 293+ EE9F E5 D5 C5     .Plot4:             push    hl,,de,,bc
 294+ EEA2 06 00                            ld      b,0
 295+ EEA4 DD 4D                            ld      c,ixl
 296+ EEA6                                  ClearCarryFlag
 296+ EEA6 B7          >                        or a
 297+ EEA7 ED 42                            sbc     hl,bc
 298+ EEA9 C1                               pop     bc
 299+ EEAA                                  JumpIfRegIsNotZero  h,.Plot4Done
 299+ EEAA 7C          >                        ld      a,h
 299+ EEAB A7          >                        and     a
 299+ EEAC C2 C1 EE    >                        jp	    nz,.Plot4Done
 300+ EEAF EB                               ex      de,hl
 301+ EEB0 C5                               push    bc
 302+ EEB1 06 00                            ld      b,0
 303+ EEB3 DD 4D                            ld      c,ixl
 304+ EEB5                                  ClearCarryFlag
 304+ EEB5 B7          >                        or a
 305+ EEB6 ED 42                            sbc     hl,bc
 306+ EEB8 C1                               pop     bc
 307+ EEB9                                  JumpIfRegIsNotZero  h,.Plot4Done
 307+ EEB9 7C          >                        ld      a,h
 307+ EEBA A7          >                        and     a
 307+ EEBB C2 C1 EE    >                        jp	    nz,.Plot4Done
 308+ EEBE CD 6D EF                         call	.PlotPixel	                    ; CX-X,CY-Y
 309+ EEC1 E1 D1        .Plot4Done:         pop     de,,hl
 310+ EEC3 EB           .Plot5:             ex      de,hl
 311+ EEC4 E5 D5 C5                         push    hl,,de,,bc
 312+ EEC7 06 00                            ld      b,0
 313+ EEC9 DD 4D                            ld      c,ixl
 314+ EECB                                  ClearCarryFlag
 314+ EECB B7          >                        or a
 315+ EECC ED 4A                            adc     hl,bc
 316+ EECE C1                               pop     bc
 317+ EECF                                  JumpIfRegIsNotZero  h,.Plot5Done
 317+ EECF 7C          >                        ld      a,h
 317+ EED0 A7          >                        and     a
 317+ EED1 C2 E6 EE    >                        jp	    nz,.Plot5Done
 318+ EED4 EB                               ex      de,hl
 319+ EED5 C5                               push    bc
 320+ EED6 06 00                            ld      b,0
 321+ EED8 DD 4D                            ld      c,ixl
 322+ EEDA                                  ClearCarryFlag
 322+ EEDA B7          >                        or a
 323+ EEDB ED 4A                            adc     hl,bc
 324+ EEDD C1                               pop     bc
 325+ EEDE                                  JumpIfRegIsNotZero  h,.Plot5Done
 325+ EEDE 7C          >                        ld      a,h
 325+ EEDF A7          >                        and     a
 325+ EEE0 C2 E6 EE    >                        jp	    nz,.Plot5Done
 326+ EEE3 CD 6D EF                         call	.PlotPixel	                    ;CY+X,CX+Y
 327+ EEE6 E1 D1        .Plot5Done:         pop     de,,hl
 328+ EEE8 EB           .Plot6:             ex      de,hl
 329+ EEE9 E5 D5 C5                         push    hl,,de,,bc
 330+ EEEC 06 00                            ld      b,0
 331+ EEEE DD 4D                            ld      c,ixl
 332+ EEF0                                  ClearCarryFlag
 332+ EEF0 B7          >                        or a
 333+ EEF1 ED 42                            sbc     hl,bc
 334+ EEF3 C1                               pop     bc
 335+ EEF4                                  JumpIfRegIsNotZero  h,.Plot6Done
 335+ EEF4 7C          >                        ld      a,h
 335+ EEF5 A7          >                        and     a
 335+ EEF6 C2 0B EF    >                        jp	    nz,.Plot6Done
 336+ EEF9 EB                               ex      de,hl
 337+ EEFA C5                               push    bc
 338+ EEFB 06 00                            ld      b,0
 339+ EEFD DD 4D                            ld      c,ixl
 340+ EEFF                                  ClearCarryFlag
 340+ EEFF B7          >                        or a
 341+ EF00 ED 4A                            adc     hl,bc
 342+ EF02 C1                               pop     bc
 343+ EF03                                  JumpIfRegIsNotZero  h,.Plot6Done
 343+ EF03 7C          >                        ld      a,h
 343+ EF04 A7          >                        and     a
 343+ EF05 C2 0B EF    >                        jp	    nz,.Plot6Done
 344+ EF08 CD 6D EF                         call	.PlotPixel	                    ; CY-X,CX+Y
 345+ EF0B E1 D1        .Plot6Done:         pop     de,,hl
 346+ EF0D EB           .Plot7:             ex      de,hl
 347+ EF0E E5 D5 C5                         push    hl,,de,,bc
 348+ EF11 06 00                            ld      b,0
 349+ EF13 DD 4D                            ld      c,ixl
 350+ EF15                                  ClearCarryFlag
 350+ EF15 B7          >                        or a
 351+ EF16 ED 4A                            adc     hl,bc
 352+ EF18 C1                               pop     bc
 353+ EF19                                  JumpIfRegIsNotZero  h,.Plot7Done
 353+ EF19 7C          >                        ld      a,h
 353+ EF1A A7          >                        and     a
 353+ EF1B C2 30 EF    >                        jp	    nz,.Plot7Done
 354+ EF1E EB                               ex      de,hl
 355+ EF1F C5                               push    bc
 356+ EF20 06 00                            ld      b,0
 357+ EF22 DD 4D                            ld      c,ixl
 358+ EF24                                  ClearCarryFlag
 358+ EF24 B7          >                        or a
 359+ EF25 ED 42                            sbc     hl,bc
 360+ EF27 C1                               pop     bc
 361+ EF28                                  JumpIfRegIsNotZero  h,.Plot7Done
 361+ EF28 7C          >                        ld      a,h
 361+ EF29 A7          >                        and     a
 361+ EF2A C2 30 EF    >                        jp	    nz,.Plot7Done
 362+ EF2D CD 6D EF                         call	.PlotPixel	                    ; CY+X,CX-Y
 363+ EF30 E1 D1        .Plot7Done:         pop     de,,hl
 364+ EF32 EB           .Plot8:             ex      de,hl
 365+ EF33 E5 D5 C5                         push    hl,,de,,bc
 366+ EF36 06 00                            ld      b,0
 367+ EF38 DD 4D                            ld      c,ixl
 368+ EF3A                                  ClearCarryFlag
 368+ EF3A B7          >                        or a
 369+ EF3B ED 42                            sbc     hl,bc
 370+ EF3D C1                               pop     bc
 371+ EF3E                                  JumpIfRegIsNotZero  h,.Plot8Done
 371+ EF3E 7C          >                        ld      a,h
 371+ EF3F A7          >                        and     a
 371+ EF40 C2 55 EF    >                        jp	    nz,.Plot8Done
 372+ EF43 EB                               ex      de,hl
 373+ EF44 C5                               push    bc
 374+ EF45 06 00                            ld      b,0
 375+ EF47 DD 4D                            ld      c,ixl
 376+ EF49                                  ClearCarryFlag
 376+ EF49 B7          >                        or a
 377+ EF4A ED 42                            sbc     hl,bc
 378+ EF4C C1                               pop     bc
 379+ EF4D                                  JumpIfRegIsNotZero  h,.Plot8Done
 379+ EF4D 7C          >                        ld      a,h
 379+ EF4E A7          >                        and     a
 379+ EF4F C2 55 EF    >                        jp	    nz,.Plot8Done
 380+ EF52 CD 6D EF                         call	.PlotPixel	                    ; CY-X,CX-Y
 381+ EF55 E1 D1        .Plot8Done:         pop     de,,hl
 382+ EF57 D9           .PlotDone:          exx
 383+ EF58 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 384+ EF5A 28 03                            jr z,   .draw_circle_1
 385+ EF5C 19                               add hl,de			; Delta=Delta+D1
 386+ EF5D 18 05                            jr      .draw_circle_2		;
 387+ EF5F 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 388+ EF60 03                               inc     bc
 389+ EF61 03                               inc     bc				; D2=D2+2
 390+ EF62 DD 25                            dec     ixh				; Y=Y-1
 391+ EF64 03           .draw_circle_2:		inc     bc				; D2=D2+2
 392+ EF65 03                               inc     bc
 393+ EF66 13                               inc     de				; D1=D1+2
 394+ EF67 13                               inc     de
 395+ EF68 DD 2C                            inc     ixl				; X=X+1
 396+ EF6A C3 27 EE                         jp      .CircleLoop
 397+ EF6D 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 398+ EF6F D5 C5 E5                         push	de,,bc,,hl
 399+ EF72 45                               ld      b,l                     ; At this point de = x and hl = y
 400+ EF73 4B                               ld      c,e
 401+ EF74                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 401+ EF74 78          >                        ld      a,b
 401+ EF75             >                        JumpIfAGTENusng 192 ,.NoPlot
 401+ EF75 FE C0       >                        cp     192
 401+ EF77 D2 83 EF    >                        jp		nc,.NoPlot
 401+ EF7A 69          >                        ld      l,c
 401+ EF7B CD 68 E0    >                        call    asm_l2_row_bank_select
 401+ EF7E 67          >                        ld      h,a
 401+ EF7F 3A 87 F0    >                        ld      a,(line_gfx_colour)
 401+ EF82 77          >                        ld      (hl),a
 401+ EF83             >.NoPlot:
 402+ EF83 E1 C1 D1                         pop		de,,bc,,hl
 403+ EF86 C9                               ret
 404+ EF87 7B           .circleSinglepixel:  ld		a,e
 405+ EF88                                  l2_plot_macro; call	l2_plot_pixel_y_test
 405+ EF88 78          >                        ld      a,b
 405+ EF89             >                        JumpIfAGTENusng 192 ,.NoPlot
 405+ EF89 FE C0       >                        cp     192
 405+ EF8B D2 97 EF    >                        jp		nc,.NoPlot
 405+ EF8E 69          >                        ld      l,c
 405+ EF8F CD 68 E0    >                        call    asm_l2_row_bank_select
 405+ EF92 67          >                        ld      h,a
 405+ EF93 3A 87 F0    >                        ld      a,(line_gfx_colour)
 405+ EF96 77          >                        ld      (hl),a
 405+ EF97             >.NoPlot:
 406+ EF97 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 817  EF98                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ EF98
   2+ EF98 00           l2_circle_dblx		DB 0
   3+ EF99 00           l2_circle_dbly		DB 0
   4+ EF9A
   5+ EF9A              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ EF9A              ; Note this code currently does not process BC
   7+ EF9A 7B           l2_draw_circle_fill:    ld		a,e
   8+ EF9B 32 31 F0                             ld		(.LineColour+1),a
   9+ EF9E 7A                                   ld		a,d								; get radius
  10+ EF9F A7                                   and		a
  11+ EFA0 C8                                   ret		z
  12+ EFA1 FE 01                                cp		1
  13+ EFA3 CA E4 ED                             jp		z,CircleSinglepixel
  14+ EFA6 ED 43 D0 EF                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ EFAA DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EFAC DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EFAF 26 00        .calcd:	                ld		h,0
  18+ EFB1 6F                                   ld		l,a
  19+ EFB2 29                                   add		hl,hl							; hl = r * 2
  20+ EFB3 EB                                   ex		de,hl							; de = r * 2
  21+ EFB4 21 03 00                             ld		hl,3
  22+ EFB7 A7                                   and		a
  23+ EFB8 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EFBA 44                                   ld		b,h
  25+ EFBB 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EFBC 21 01 00     .calcdelta              ld		hl,1
  27+ EFBF 16 00                                ld		d,0
  28+ EFC1 DD 5D                                ld		e,ixl
  29+ EFC3 A7                                   and		a
  30+ EFC4 ED 52                                sbc		hl,de
  31+ EFC6 11 01 00     .Setde1	                ld		de,1
  32+ EFC9 DD 7C        .CircleLoop:            ld		a,ixh
  33+ EFCB DD BD                                cp		ixl
  34+ EFCD D8                                   ret		c
  35+ EFCE D9           .ProcessLoop:	        exx
  36+ EFCF 11 00 00     .Line1:                 ld		de,0
  37+ EFD2 7B                                   ld 		a,e
  38+ EFD3 DD 95                                sub 	ixl
  39+ EFD5 4F                                   ld 		c,a
  40+ EFD6 7A                                   ld 		a,d
  41+ EFD7 DD 84                                add 	a,ixh
  42+ EFD9 47                                   ld		b,a
  43+ EFDA                                      ;; TODO ADD DOUBLE X CALC
  44+ EFDA D5                                   push	de
  45+ EFDB DD 55                                ld		d,ixl
  46+ EFDD CB 22                                sla		d
  47+ EFDF CD 2C F0                             call	.PlotLine			;CX-X,CY+Y
  48+ EFE2 D1                                   pop		de
  49+ EFE3 7B           .Line2:                 ld 		a,e
  50+ EFE4 DD 95                                sub		ixl
  51+ EFE6 4F                                   ld 		c,a
  52+ EFE7 7A                                   ld 		a,d
  53+ EFE8 DD 94                                sub 	ixh
  54+ EFEA 47                                   ld 		b,a
  55+ EFEB                                      ;; TODO ADD DOUBLE X CALC
  56+ EFEB D5                                   push	de
  57+ EFEC DD 55                                ld		d,ixl
  58+ EFEE CB 22                                sla		d
  59+ EFF0 CD 2C F0                             call	.PlotLine			;CX-X,CY-Y
  60+ EFF3 D1                                   pop		de
  61+ EFF4 7B           .Line3:	                ld 		a,e
  62+ EFF5 DD 94                                sub		ixh
  63+ EFF7 4F                                   ld 		c,a
  64+ EFF8 7A                                   ld 		a,d
  65+ EFF9 DD 85                                add 	a,ixl
  66+ EFFB 47                                   ld 		b,a
  67+ EFFC                                      ;; TODO ADD DOUBLE Y CALC
  68+ EFFC D5                                   push	de
  69+ EFFD DD 54                                ld		d,ixh
  70+ EFFF CB 22                                sla		d
  71+ F001 CD 2C F0                             call	.PlotLine			;CX-Y,CY+x
  72+ F004 D1                                   pop		de
  73+ F005 7B           .Line4:	                ld 		a,e
  74+ F006 DD 94                                sub		ixh
  75+ F008 4F                                   ld 		c,a
  76+ F009 7A                                   ld 		a,d
  77+ F00A DD 95                                sub 	ixl
  78+ F00C 47                                   ld 		b,a
  79+ F00D                                      ;; TODO ADD DOUBLE Y CALC
  80+ F00D D5                                   push	de
  81+ F00E DD 54                                ld		d,ixh
  82+ F010 CB 22                                sla		d
  83+ F012 CD 2C F0                             call	.PlotLine			;CX-Y,CY+x
  84+ F015 D1                                   pop		de
  85+ F016 D9                                   exx
  86+ F017 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ F019 28 03                                jr z,.draw_circle_1
  88+ F01B 19                                   add hl,de			; Delta=Delta+D1
  89+ F01C 18 05                                jr .draw_circle_2		;
  90+ F01E 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ F01F 03                                   inc bc
  92+ F020 03                                   inc bc				; D2=D2+2
  93+ F021 DD 25                                dec ixh				; Y=Y-1
  94+ F023 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ F024 03                                   inc bc
  96+ F025 13                                   inc de				; D1=D1+2
  97+ F026 13                                   inc de
  98+ F027 DD 2C                                inc ixl				; X=X+1
  99+ F029 C3 C9 EF                             jp .CircleLoop
 100+ F02C D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ F030 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ F032 5F                                   ld      e,a
 103+ F033 CD 83 E4                             call 	l2_draw_horz_line
 104+ F036 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ F03A C9                                   ret
 106+ F03B
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 818  F03B                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ F03B              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ F03B 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ F03C 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ F03D BB                                   cp		e
   5+ F03E 28 08                                jr		z,.HorizontalLineCheck
   6+ F040 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ F041 BA                                   cp		d
   8+ F042 28 0E                                jr		z,.VerticalLine
   9+ F044              ; use jp and get a free ret instruction optimisation
  10+ F044 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ F045 C3 F8 E9                             jp		l2_draw_diagonal
  12+ F048
  13+ F048 78           .HorizontalLineCheck:   ld      a,b
  14+ F049 BA                                   cp      d
  15+ F04A 28 0B                                jr      z, .SinglePixel
  16+ F04C 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ F04D 53                                   ld		d,e				    ; set d as target right pixel
  18+ F04E 5F                                   ld		e,a				    ; e holds colour on this call
  19+ F04F C3 BC E4                             jp		l2_draw_horz_line_to
  20+ F052 08           .VerticalLine:          ex		af,af'
  21+ F053 5F                                   ld		e,a				    ; e holds colour on this call
  22+ F054 C3 54 E5                             jp		l2_draw_vert_line_to
  23+ F057 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ F058                                      l2_plot_macro; jp      l2_plot_pixel
  24+ F058 78          >                        ld      a,b
  24+ F059             >                        JumpIfAGTENusng 192 ,.NoPlot
  24+ F059 FE C0       >                        cp     192
  24+ F05B D2 67 F0    >                        jp		nc,.NoPlot
  24+ F05E 69          >                        ld      l,c
  24+ F05F CD 68 E0    >                        call    asm_l2_row_bank_select
  24+ F062 67          >                        ld      h,a
  24+ F063 3A 87 F0    >                        ld      a,(line_gfx_colour)
  24+ F066 77          >                        ld      (hl),a
  24+ F067             >.NoPlot:
  25+ F067 C9                                   ret
  26+ F068              ;......................................................
  27+ F068
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 819  F068                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ F068              ; ClearLines (LL155)
   2+ F068              ;   y = 0
   3+ F068              ; 	XX20 = UbnkEdgeHeapSize
   4+ F068              ;   exit if XX20 < 4
   5+ F068              ;   ++y
   6+ F068              ;   do
   7+ F068              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ F068              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ F068              ;		++y
  10+ F068              ;	until Y > XX20
  11+ F068
  12+ F068              clearLines:
  13+ F068              layer2_clearLines:
  14+ F068 3A 86 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ F06B 47                                   ld		b,a
  16+ F06C 21 30 C2                             ld		hl,UbnkLineArray
  17+ F06F C5           clearLinesLoop:         push	bc
  18+ F070 7E                                   ld		a,(hl)
  19+ F071 23                                   inc		hl
  20+ F072 4F                                   ld		c,a
  21+ F073 7E                                   ld		a,(hl)
  22+ F074 23                                   inc		hl
  23+ F075 47                                   ld		b,a
  24+ F076 7E                                   ld		a,(hl)
  25+ F077 23                                   inc		hl
  26+ F078 5F                                   ld		e,a
  27+ F079 7E                                   ld		a,(hl)
  28+ F07A 23                                   inc		hl
  29+ F07B 57                                   ld		d,a
  30+ F07C 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ F07E E5                                   push	hl
  32+ F07F CD 3B F0                             call    l2_draw_any_line
  33+ F082 E1                                   pop		hl
  34+ F083 C1                                   pop		bc
  35+ F084 10 E9                                djnz	clearLinesLoop
  36+ F086 C9                                   ret
  37+ F087
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 820  F087                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ F087              ; ******************************************************************************
   2+ F087              ;
   3+ F087              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ F087              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ F087              ;
   6+ F087              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ F087              ;
   8+ F087              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ F087              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ F087              ;	before using line drawing.
  11+ F087              ;
  12+ F087              ;	The routine checks the range of specified coordinates which is the
  13+ F087              ;	boundaries of the graphics area (256x64	pixels).
  14+ F087              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ F087              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ F087              ;	visible part will be drawn.
  17+ F087              ;
  18+ F087              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ F087              ;
  20+ F087              ;	The plot routine is	defined by an address pointer	in IX.
  21+ F087              ;
  22+ F087              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ F087              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ F087              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ F087              ;
  26+ F087              ;	OUT:	None.
  27+ F087              ;
  28+ F087              ;	Registers	used	by routine:
  29+ F087              ;		   N	:	B, loop counter
  30+ F087              ;		   i	:	line	balance variable
  31+ F087              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ F087              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ F087              ;	  (x0,y0)	:	(h,l)
  34+ F087              ;	  direc_x	:	d, horisontal step increment
  35+ F087              ;	  direc_y	:	e, vertical step increment
  36+ F087              ;		 ddx	:	b, horisontal step increment
  37+ F087              ;		 ddy	:	c, vertical step increment
  38+ F087              ;
  39+ F087              ;		DE, A work registers.
  40+ F087              ;
  41+ F087              ; The algorithm in pseudo-code:
  42+ F087              ;
  43+ F087              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ F087              ;	x = ABS x: y =	ABS y
  45+ F087              ;
  46+ F087              ;	if x	>= y
  47+ F087              ;		if x+y=0 then return
  48+ F087              ;		H = x
  49+ F087              ;		L = y
  50+ F087              ;		ddx = direc_x
  51+ F087              ;		ddy = 0
  52+ F087              ;	else
  53+ F087              ;		H = y
  54+ F087              ;		L = x
  55+ F087              ;		ddx = 0
  56+ F087              ;		ddy = direc_y
  57+ F087              ;	endif
  58+ F087              ;
  59+ F087              ;	B = H
  60+ F087              ;	i = INT(B/2)
  61+ F087              ;	FOR N=B TO 1 STEP -1
  62+ F087              ;		i = i + L
  63+ F087              ;		if i	< H
  64+ F087              ;			ix =	ddx
  65+ F087              ;			iy =	ddy
  66+ F087              ;		else
  67+ F087              ;			i = i - H
  68+ F087              ;			ix =	direc_x
  69+ F087              ;			iy =	direc_y
  70+ F087              ;		endif
  71+ F087              ;		x0 =	x0 +	ix
  72+ F087              ;		y0 =	y0 +	iy
  73+ F087              ;		plot	(x0,y0)
  74+ F087              ;	NEXT	N
  75+ F087              ;
  76+ F087              ;
  77+ F087              ;	Registers	changed after return:
  78+ F087              ;		..BCDEHL/IXIY/af......	same
  79+ F087              ;		AF....../..../..bcdehl	different
  80+ F087              ;
  81+ F087 DF           line_gfx_colour db $DF
  82+ F088 00 00        line_gfx_coords	dw 0
  83+ F08A              LineHLtoDE:
  84+ F08A 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ F08B FE C0                                cp	192
  86+ F08D 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ F08F 7A                                   ld	a,d
  88+ F090 FE C0                                cp	192
  89+ F092 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ F094 22 88 F0                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ F097 E5                                   push	hl
  92+ F098 D5                                   push	de
  93+ F099 6C                                   ld	l,h				; L = x0
  94+ F09A 62                                   ld	h,d				; H = x1
  95+ F09B 7C           distanceX:		        ld	a,h
  96+ F09C 95                                   sub	l
  97+ F09D 6F                                   ld	l,a
  98+ F09E 26 00                                ld	h,0
  99+ F0A0 30 02                                jr	nc, distanceXDone
 100+ F0A2 26 FF                                ld	h,-1
 101+ F0A4 D1           distanceXDone:          pop	de
 102+ F0A5 E3                                   ex	(sp),hl			; L = y0
 103+ F0A6 63                                   ld	h,e				; H = y1
 104+ F0A7 7C           distanceY:		        ld	a,h
 105+ F0A8 95                                   sub	l
 106+ F0A9 6F                                   ld	l,a
 107+ F0AA 26 00                                ld	h,0
 108+ F0AC 30 02                                jr	nc, distanceYDone
 109+ F0AE 26 FF                                ld	h,-1
 110+ F0B0 D1           distanceYDone:          pop	de
 111+ F0B1 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ F0B2 CD B6 F0                             call	DrawLineRelative			; draw line...
 113+ F0B5 C9           exit_line:              ret
 114+ F0B6
 115+ F0B6              ; ***************************************************************************
 116+ F0B6              ;
 117+ F0B6              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ F0B6              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ F0B6              ;
 120+ F0B6              ; OUT: h - l distance in	HL
 121+ F0B6              ;
 122+ F0B6
 123+ F0B6 D5           DrawLineRelative:       push	de
 124+ F0B7 E5                                   push	hl
 125+ F0B8 D9                                   exx
 126+ F0B9 E1                                   pop	hl					; get relative	horisontal movement
 127+ F0BA CD 31 F1                             call	sgn
 128+ F0BD 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ F0BE CD 3E F1                             call	absValue
 130+ F0C1 45                                   ld	b,l					; x = ABS(x)
 131+ F0C2 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ F0C3 CD 31 F1                             call	sgn
 133+ F0C6 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ F0C7 CD 3E F1                             call	absValue
 135+ F0CA 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ F0CB              ; so by here BC = dx dy HL in increment/decrement x y
 137+ F0CB C5                                   push	bc
 138+ F0CC D9                                   exx
 139+ F0CD E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ F0CE 7C                                   ld	a,h
 141+ F0CF BD                                   cp	l
 142+ F0D0 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ F0D2 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ F0D3 28 5B                                jr	z, exit_draw		;		return
 145+ F0D5 D9           y_lessorequal_x:        exx						;	else
 146+ F0D6 42                                   ld	b,d					;		ddx = direc_x
 147+ F0D7 0E 00                                ld	c,0					;		ddy = 0
 148+ F0D9 D9                                   exx
 149+ F0DA 18 08                                jr	init_drawloop		; else
 150+ F0DC 7C           x_smaller_y:	        ld	a,h
 151+ F0DD 65                                   ld	h,l					;	H = y
 152+ F0DE 6F                                   ld	l,a					;	L = x
 153+ F0DF D9                                   exx
 154+ F0E0 06 00                                ld	b,0					;	ddx = 0
 155+ F0E2 4B                                   ld	c,e					;	ddy = direc_y
 156+ F0E3 D9                                   exx
 157+ F0E4 44           init_drawloop:	        ld	b,h
 158+ F0E5 4C                                   ld	c,h					; B = H
 159+ F0E6 CB 39                                srl	c					; i = INT(B/2)
 160+ F0E8              										; FOR N=B	TO 1	STEP	-1
 161+ F0E8 79           drawloop:		        ld	a,c
 162+ F0E9 85                                   add	a,l
 163+ F0EA 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ F0EC BC                                   cp	h
 165+ F0ED 30 06                                jr	nc, i_greater		;	if i	< H
 166+ F0EF 4F                                   ld	c,a					;		i = i + L
 167+ F0F0 D9                                   exx
 168+ F0F1 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ F0F2 D9                                   exx
 170+ F0F3 18 05                                jr	check_plot			;	else
 171+ F0F5 94           i_greater:		        sub	h					;		i = i - H
 172+ F0F6 4F                                   ld	c,a
 173+ F0F7 D9                                   exx
 174+ F0F8 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ F0F9 D9                                   exx						;	endif
 176+ F0FA E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ F0FB EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ F0FC 2A 88 F0                             ld	hl,(line_gfx_coords)
 179+ F0FF 7D                                   ld	a,l
 180+ F100 83                                   add	a,e					;
 181+ F101 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ F102 7A                                   ld	a,d
 183+ F103 3C                                   inc	a
 184+ F104 84                                   add	a,h
 185+ F105 38 04                                jr	c, check_range		;	check out	of range
 186+ F107 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ F109 18 02                                jr	plot_point
 188+ F10B 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ F10D
 190+ F10D 3D           plot_point:             dec	a
 191+ F10E C5                                   push	bc
 192+ F10F F5                                   push	af
 193+ F110 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ F111 4D                                   ld		c,l
 195+ F112 3A 87 F0                             ld		a,(line_gfx_colour)
 196+ F115 ED 43 88 F0                          ld      (line_gfx_coords),bc
 197+ F119                                      l2_plot_macro; call	l2_plot_pixel:
 197+ F119 78          >                        ld      a,b
 197+ F11A             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ F11A FE C0       >                        cp     192
 197+ F11C D2 28 F1    >                        jp		nc,.NoPlot
 197+ F11F 69          >                        ld      l,c
 197+ F120 CD 68 E0    >                        call    asm_l2_row_bank_select
 197+ F123 67          >                        ld      h,a
 197+ F124 3A 87 F0    >                        ld      a,(line_gfx_colour)
 197+ F127 77          >                        ld      (hl),a
 197+ F128             >.NoPlot:
 198+ F128 F1                                   pop		af
 199+ F129 C1                                   pop		bc
 200+ F12A E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ F12B 10 BB                                djnz	drawloop		; NEXT N
 202+ F12D 18 01                                jr	exit_draw
 203+ F12F
 204+ F12F E1           range_error:	        pop	hl					; remove H,L distances...
 205+ F130 C9           exit_draw:		        ret
 206+ F131
 207+ F131
 208+ F131              ; ******************************************************************************
 209+ F131              ;
 210+ F131              ;	SGN (Signum value) of 16	bit signed integer.
 211+ F131              ;
 212+ F131              ;	IN:		HL =	integer
 213+ F131              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ F131              ;
 215+ F131              ;	Registers	changed after return:
 216+ F131              ;	..BCDEHL/IXIY	same
 217+ F131              ;	AF....../....	different
 218+ F131              ;
 219+ F131 7C           sgn:				    ld	a,h
 220+ F132 B5                                   or	l
 221+ F133 C8                                   ret	z				; integer	is zero, return 0...
 222+ F134 CB 7C                                bit	7,h
 223+ F136 20 03                                jr	nz, negative_int
 224+ F138 3E 01                                ld	a,1
 225+ F13A C9                                   ret
 226+ F13B 3E FF        negative_int:		    ld	a,-1
 227+ F13D C9                                   ret
 228+ F13E
 229+ F13E
 230+ F13E              ; ******************************************************************************
 231+ F13E              ;
 232+ F13E              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ F13E              ;
 234+ F13E              ;	IN:		HL =	integer
 235+ F13E              ;	OUT:		HL =	converted	integer
 236+ F13E              ;
 237+ F13E              ;	Registers	changed after return:
 238+ F13E              ;	A.BCDE../IXIY	same
 239+ F13E              ;	.F....HL/....	different
 240+ F13E              ;
 241+ F13E CB 7C        absValue:			    bit	7,h
 242+ F140 C8                                   ret	z				; integer	is positive...
 243+ F141 D5                                   push	de
 244+ F142 EB                                   ex	de,hl
 245+ F143 21 00 00                             ld	hl,0
 246+ F146 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ F147 ED 52                                sbc	hl,de			; convert	negative integer
 248+ F149 D1                                   pop	de
 249+ F14A C9                                   ret
 250+ F14B
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 821  F14B                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 822  F14B              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 823  F14B                  SLOT    LAYER1Addr
 824  F14B                  PAGE    BankLAYER1
 825  F14B                  ORG     LAYER1Addr, BankLAYER1
 826  E000
 827  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 03 7D                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 828  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 03 7D                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 03 7D                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 03 7D                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 03 7D                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 03 7D                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 03 7D                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 03 7D                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 03 7D                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 829  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
 830  E130                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 831  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 832  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 833  E130              ; as the is aligned and data tables are after that
 834  E130              ; need to make the ship index tables same size in each to simplify further
 835  E130                  SLOT    ShipModelsAddr
 836  E130                  PAGE    BankShipModels1
 837  E130              	ORG     ShipModelsAddr, BankShipModels1
 838  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 839  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 840  E00F              GetShipBankId:
 841  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
 841  E00F 06 00       >                        ld      b,0
 841  E011 4F          >                        ld      c,a                                 ; c= original ship id
 841  E012 CB 3F       >.ShiftLoop:             srl     a
 841  E014 CB 3F       >                        srl     a
 841  E016 CB 3F       >                        srl     a
 841  E018 CB 3F       >                        srl     a                                   ; divide by 16
 841  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 841  E01B 79          >                        ld      a,c
 841  E01C 50          >                        ld      d,b
 841  E01D 1E 10       >                        ld      e,16
 841  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 841  E021 93          >                        sub     e                                   ; a= actual model id now
 841  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 841  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 841  E024 7A          >                        ld      a,d                                 ; a = bank number
 841  E025             >;.. Now b = bank and a = adjusted ship nbr
 841  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 841  E028 ED 31       >                        add     hl,a
 841  E02A ED 31       >                        add     hl,a
 841  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 841  E02D             >                        ClearCarryFlag
 841  E02D B7          >                        or a
 841  E02E C9          >                        ret
 842  E02F              CopyVertsToUniv:
 843  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 843  E02F 2A A7 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 843  E032 11 AD C3    >                        ld          de,UBnkHullVerticies
 843  E035 06 00       >                        ld          b,0
 843  E037 3A 9B C3    >                        ld			a,(VertexCtX6Addr)
 843  E03A 4F          >                        ld          c,a
 843  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 843  E03C CD 29 7D    >                        call        memcopy_dma
 843  E03F C9          >                        ret
 844  E040              CopyEdgesToUniv:
 845  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 845  E040 2A 95 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 845  E043 11 9D C4    >                        ld          de,UBnkHullEdges
 845  E046 06 00       >                        ld          b,0
 845  E048 3A 97 C3    >                        ld			a,(LineX4Addr)
 845  E04B 4F          >                        ld          c,a
 845  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 845  E04D CD 29 7D    >                        call        memcopy_dma
 845  E050 C9          >                        ret
 846  E051              CopyNormsToUniv:
 847  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 847  E051 2A A3 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 847  E054 11 65 C5    >                        ld          de,UBnkHullNormals
 847  E057 06 00       >                        ld          b,0
 847  E059 3A 9F C3    >                        ld          a,(FaceCtX4Addr)
 847  E05C 4F          >                        ld          c,a
 847  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 847  E05E CD 29 7D    >                        call        memcopy_dma
 847  E061 C9          >                        ret
 848  E062              ShipBankTable:
 849  E062              ShipBankTable1:         MShipBankTable
 849  E062 3B 00       >                        DW      BankShipModels1
 849  E064 43 00       >                        DW      BankShipModels2
 849  E066 44 00       >                        DW      BankShipModels3
 849  E068 45 00       >                        DW      BankShipModels4
 850  E06A              CopyShipToUniverse:
 851  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 851  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 851  E06D 36 3B       >                        ld          (hl),BankShipModels1
 851  E06F F5          >                        push        af
 851  E070 FD 7D       >                        ld          a,iyl
 851  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 851  E075 F1          >                        pop         af
 851  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 851  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 851  E07C ED 31       >                        add         hl,a
 851  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 851  E080 4E          >                        ld          c,(hl)
 851  E081 23          >                        inc         hl
 851  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 851  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 851  E086 ED 31       >                        add         hl,a
 851  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 851  E08A 7E          >                        ld          a,(hl)
 851  E08B 23          >                        inc         hl
 851  E08C 66          >                        ld          h,(hl)
 851  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 851  E08E 11 92 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 851  E091 01 1B 00    >                        ld          bc,ShipDataLength
 851  E094 ED B0       >                        ldir
 851  E096 CD 2F E0    >                        call        CopyVertsToUniv
 851  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 851  E09C CD 51 E0    >                        call        CopyNormsToUniv
 851  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 851  E0A2 3E 20       >                        ld          a," "
 851  E0A4 06 10       >                        ld          b,16
 851  E0A6 77          >.fillLoop:              ld          (hl),a
 851  E0A7 23          >                        inc         hl
 851  E0A8 10 FC       >                        djnz        .fillLoop
 851  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 851  E0AD CD 14 92    >                        call        ShipIndexToAddress
 851  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 851  E0B3 06 10       >                        ld          b,16
 851  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 851  E0B6 FE 00       >                        cp          0
 851  E0B8 28 05       >                        jr          z,.CopyDone
 851  E0BA 12          >                        ld          (de),a
 851  E0BB 23          >                        inc         hl
 851  E0BC 13          >                        inc         de
 851  E0BD 10 F6       >                        djnz        .CopyLoop
 851  E0BF C9          >.CopyDone:              ret
 852  E0C0              CopyBodyToUniverse:
 853  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 853  E0C0 3E 0D       >                        ld          a,13
 853  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
 853  E0C5 C9          >                        ret
 854  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 A1 E2                                 DW Anaconda                                ;01 $01
   4+ E0CA AE E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC DF E4                                 DW Boa                                     ;03 $03
   6+ E0CE DC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 B0 E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 5D E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 3E E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 15 E9                                 DW Chameleon                               ;08 $08
  11+ E0D8 47 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA DA EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC AB EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE 3E EE                                 DW Constrictor                             ;12 $0C
  15+ E0E0 4B EF                                 DW Coriolis                                ;13 $0D
  16+ E0E2 72 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 7F F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 85 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 C0 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA CD E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC FE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE FB E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 CF E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 7C E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 5D E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 33 E9                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 66 EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA F9 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC CA EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 5D EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 6A EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 91 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 9E F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 F1 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 1A E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 3F E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 4C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 37 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 F9 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 B2 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 A5 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 9F E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 0E EB                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A 3B EC                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 72 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E C3 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 CA EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 03 F1                                 DW CougarEdges                             ;14 $0E
  51+ E124 2E F2                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 65 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 7E E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A AF E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C AC E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 73 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 35 E7                                 DW BoulderNormals                          ;05 $05
  59+ E132 06 E8                                 DW AsteroidNormals                         ;06 $06
  60+ E134 F1 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 13 EA                                 DW ChameleonNormals                        ;08 $08
  62+ E138 A6 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 83 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C 0A EE                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E 23 EF                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 3A F0                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 67 F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 B6 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 3B 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 0D 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 31 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C FD 00                                 DW BoaLen                                  ;03 $03
  74+ E14E B3 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 AD 00                                 DW BoulderLen                              ;05 $05
  76+ E152 E1 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D7 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 32 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 93 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A D1 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 93 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 0D 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 27 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 0D 01                                 DW CougarLen                               ;14 $0E
  85+ E164 67 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 F1 E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 65 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185                                                     ; chance of ECM module
  28++E185 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  28++E189 01 BC
  29++E18B 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  29++E18F 01 23
  30++E191 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  30++E195 23 45
  31++E197 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  31++E19B 45 66
  32++E19D 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  32++E1A1 56 7E
  33++E1A3 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  33++E1A7 78 AE
  34++E1A9 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  34++E1AD 89 AA
  35++E1AF 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  35++E1B3 9A BC
  36++E1B5 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  36++E1B9 78 9D
  37++E1BB 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  37++E1BF 46 7D
  38++E1C1 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  38++E1C5 09 BD
  39++E1C7 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  39++E1CB 02 4D
  40++E1CD 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  40++E1D1 1A CE
  41++E1D3 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  41++E1D7 13 5E
  42++E1D9 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  42++E1DD 00 00
  43++E1DF 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  43++E1E3 00 00
  44++E1E5 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  44++E1E9 00 00
  45++E1EB 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  45++E1EF 00 00
  46++E1F1              AdderVertSize:          equ $ - AdderVertices
  47++E1F1 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  48++E1F5 07 23 04 08                          DB $07, $23, $04, $08               ;02
  49++E1F9 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  50++E1FD 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  51++E201 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  52++E205 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  53++E209 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  54++E20D 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  55++E211 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  56++E215 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  57++E219 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  58++E21D 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  59++E221 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  60++E225 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  61++E229 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  62++E22D 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  63++E231 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  64++E235 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  65++E239 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  66++E23D 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  67++E241 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  68++E245 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  69++E249 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  70++E24D 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  71++E251 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  72++E255 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  73++E259 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  74++E25D 04 00 40 44                          DB $04, $00, $40, $44               ;28
  75++E261 03 00 44 38                          DB $03, $00, $44, $38               ;29
  76++E265              AdderEdgesSize:         equ $ - AdderEdges
  77++E265              AdderEdgesCnt:          equ AdderEdgesSize/4
  78++E265 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  79++E269 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  80++E26D 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  81++E271 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  82++E275 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  83++E279 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  84++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  85++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  86++E285 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  87++E289 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  88++E28D DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  89++E291 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  90++E295 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  91++E299 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  92++E29D 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  93++E2A1
  94++E2A1              AdderNormalsSize:       equ $ - AdderNormals
  95++E2A1              AdderLen:                equ $ - Adder
  96++E2A1
  97++E2A1
  98++E2A1
  99++E2A1
 100++E2A1
 101++E2A1
 102++E2A1
 103++E2A1
 104++E2A1
 105++E2A1
 106++E2A1
# file closed: ./Data/ships/Adder.asm
  88+ E2A1                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E2A1 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E2A2 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A4 1A E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A6 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A7 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A8 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A9 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2AA 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2AB 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2AC 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AE 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AF 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2B0 FC                                   DB $FC                                                        ; Energy Max
  14++E2B1 0E                                   DB $0E                                                        ; Speed Max
  15++E2B2 7E E3                                DW AnacondaNormals                                            ; Normals
  16++E2B4 11                                   DB $11                                                        ; Q scaling
  17++E2B5 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B6 C0 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B8 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B9 00                                   DB 0                                                          ; NewB Tactics
  21++E2BA A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2BB D0                                   DB $D0                                                        ; chance of ECM module
  23++E2BC FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2BD 00 00                                DW $0000                            ; no solid data
  25++E2BF 00                                   DB $00                              ; no solid data
  26++E2C0
  27++E2C0 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  27++E2C4 01 55
  28++E2C6 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  28++E2CA 01 22
  29++E2CC 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  29++E2D0 02 33
  30++E2D2 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  30++E2D6 03 44
  31++E2D8 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  31++E2DC 04 55
  32++E2DE 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  32++E2E2 15 66
  33++E2E4 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  33++E2E8 12 77
  34++E2EA 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  34++E2EE 23 88
  35++E2F0 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  35++E2F4 34 99
  36++E2F6 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  36++E2FA 45 AA
  37++E2FC 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  37++E300 FF FF
  38++E302 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  38++E306 27 88
  39++E308 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  39++E30C FF FF
  40++E30E 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  40++E312 49 AA
  41++E314 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  41++E318 FF FF
  42++E31A              AnacondaVertSize:       equ $ - AnacondaVertices
  43++E31A 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  44++E31E 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  45++E322 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  46++E326 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  47++E32A 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  48++E32E 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  49++E332 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  50++E336 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  51++E33A 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  52++E33E 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  53++E342 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  54++E346 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  55++E34A 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  56++E34E 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  57++E352 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  58++E356 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  59++E35A 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  60++E35E 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  61++E362 1E 5A 24 38                          DB $1E, $5A, $24, $38
  62++E366 1E 56 14 38                          DB $1E, $56, $14, $38
  63++E36A 1E 6B 28 38                          DB $1E, $6B, $28, $38
  64++E36E 1F 7B 28 30                          DB $1F, $7B, $28, $30
  65++E372 1F 78 2C 30                          DB $1F, $78, $2C, $30
  66++E376 1F 9A 30 34                          DB $1F, $9A, $30, $34
  67++E37A 1F AB 30 38                          DB $1F, $AB, $30, $38
  68++E37E              AnacondaEdgesSize:      equ $ - AnacondaEdges
  69++E37E              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  70++E37E 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  71++E382 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  72++E386 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  73++E38A 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  74++E38E 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  75++E392 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  76++E396 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  77++E39A 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  78++E39E DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  79++E3A2 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  80++E3A6 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  81++E3AA 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  82++E3AE              AnacondaNormalsSize:    equ $ - AnacondaNormals
  83++E3AE              AnacondaLen:            equ $ - Anaconda
  84++E3AE
  85++E3AE
  86++E3AE
  87++E3AE
# file closed: ./Data/ships/Anaconda.asm
  89+ E3AE                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3AE 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3AF 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3B1 3F E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3B3 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3B4 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3B5 1A                                   DB $1A                          ; Explosion Count
   7++E3B6 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3B7 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B8 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B9 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3BB 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3BC 28                                   DB $28                          ; Range when it turns to a dot
  13++E3BD 96                                   DB $96                          ; Energy Max
  14++E3BE 28                                   DB $28                          ; Speed Max
  15++E3BF AF E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3C1 01                                   DB $01                          ; Q scaling
  17++E3C2 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3C3 CD E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3C5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3C6 00                                   DB 0                            ; NewB Tactics
  21++E3C7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C8 80                                   DB $80                          ; chance of ECM module
  23++E3C9 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3CA 00 00                                DW $0000                            ; no solid data
  25++E3CC 00                                   DB $00                              ; no solid data
  26++E3CD
  27++E3CD 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  27++E3D1 01 22
  28++E3D3 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  28++E3D7 12 BB
  29++E3D9 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  29++E3DD 16 BB
  30++E3DF 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  30++E3E3 16 79
  31++E3E5 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  31++E3E9 01 77
  32++E3EB 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  32++E3EF 25 BB
  33++E3F1 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  33++E3F5 25 8A
  34++E3F7 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  34++E3FB 02 88
  35++E3FD 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  35++E401 04 79
  36++E403 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  36++E407 04 8A
  37++E409 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  37++E40D 34 69
  38++E40F 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  38++E413 34 5A
  39++E415 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  39++E419 35 6B
  40++E41B 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  40++E41F BB BB
  41++E421 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  41++E425 BB BB
  42++E427 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  42++E42B BB BB
  43++E42D 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  43++E431 BB BB
  44++E433 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  44++E437 04 04
  45++E439 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  45++E43D 04 04
  46++E43F              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  47++E43F 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  48++E443 16 01 00 10                          DB $16, $01, $00, $10           ;02
  49++E447 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  50++E44B 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  51++E44F 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  52++E453 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  53++E457 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  54++E45B 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  55++E45F 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  56++E463 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  57++E467 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  58++E46B 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  59++E46F 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  60++E473 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  61++E477 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  62++E47B 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  63++E47F 16 36 28 30                          DB $16, $36, $28, $30           ;17
  64++E483 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  65++E487 16 34 28 2C                          DB $16, $34, $28, $2C
  66++E48B 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  67++E48F 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  68++E493 1F 69 0C 28                          DB $1F, $69, $0C, $28
  69++E497 1F 49 20 28                          DB $1F, $49, $20, $28
  70++E49B 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  71++E49F 09 BB 3C 38                          DB $09, $BB, $3C, $38
  72++E4A3 08 BB 38 40                          DB $08, $BB, $38, $40
  73++E4A7 08 BB 40 34                          DB $08, $BB, $40, $34
  74++E4AB 0A 04 48 44                          DB $0A, $04, $48, $44
  75++E4AF              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  76++E4AF              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  77++E4AF 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  78++E4B3 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  79++E4B7 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  80++E4BB 36 00 18 01                          DB $36, $00, $18, $01           ;04
  81++E4BF 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  82++E4C3 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  83++E4C7 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  84++E4CB 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  85++E4CF DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  86++E4D3 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  87++E4D7 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  88++E4DB 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  89++E4DF              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  90++E4DF              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  91++E4DF
  92++E4DF
  93++E4DF
  94++E4DF
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4DF                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4DF 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4E0 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4E2 4C E5                                DW BoaEdges                     ; Edge Data
   4++E4E4 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4E5 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4E6 26                                   DB $26                          ; Explosion Count
   7++E4E7 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4E8 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4E9 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4EA 00 00                                DW $0000                        ; Bounty LoHi
  11++E4EC 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4ED 28                                   DB $28                          ; Range when it turns to a dot
  13++E4EE FA                                   DB $FA                          ; Energy Max
  14++E4EF 18                                   DB $18                          ; Speed Max
  15++E4F0 AC E5                                DW BoaNormals                   ; Normals
  16++E4F2 00                                   DB $00                          ; Q scaling
  17++E4F3 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4F4 FE E4                                DW BoaVertices                  ; Verticles Address
  19++E4F6 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4F7 00                                   DB 0                            ; NewB Tactics
  21++E4F8 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4F9 A0                                   DB $A0                          ; chance of ECM module
  23++E4FA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4FB 00 00                                DW $0000                            ; no solid data
  25++E4FD 00                                   DB $00                              ; no solid data
  26++E4FE
  27++E4FE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  27++E502 FF FF
  28++E504 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  28++E508 02 33
  29++E50A 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  29++E50E 01 44
  30++E510 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  30++E514 12 55
  31++E516 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  31++E51A 23 69
  32++E51C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  32++E520 03 6B
  33++E522 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  33++E526 04 8B
  34++E528 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  34++E52C 14 8A
  35++E52E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  35++E532 15 7A
  36++E534 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  36++E538 25 79
  37++E53A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  37++E53E 02 AA
  38++E540 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  38++E544 01 AA
  39++E546 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  39++E54A 12 CC
  40++E54C              BoaVertSize:            equ $ - BoaVertices
  41++E54C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  42++E550 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  43++E554 1F 79 00 24                          DB $1F, $79, $00, $24
  44++E558 1D 69 00 10                          DB $1D, $69, $00, $10
  45++E55C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  46++E560 1D 7A 00 20                          DB $1D, $7A, $00, $20
  47++E564 1F 36 10 14                          DB $1F, $36, $10, $14
  48++E568 1F 0B 14 18                          DB $1F, $0B, $14, $18
  49++E56C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  50++E570 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  51++E574 1F 57 20 24                          DB $1F, $57, $20, $24
  52++E578 1F 29 10 24                          DB $1F, $29, $10, $24
  53++E57C 18 23 04 10                          DB $18, $23, $04, $10
  54++E580 18 03 04 14                          DB $18, $03, $04, $14
  55++E584 18 25 0C 24                          DB $18, $25, $0C, $24
  56++E588 18 15 0C 20                          DB $18, $15, $0C, $20
  57++E58C 18 04 08 18                          DB $18, $04, $08, $18
  58++E590 18 14 08 1C                          DB $18, $14, $08, $1C
  59++E594 16 02 04 28                          DB $16, $02, $04, $28
  60++E598 16 01 08 2C                          DB $16, $01, $08, $2C
  61++E59C 16 12 0C 30                          DB $16, $12, $0C, $30
  62++E5A0 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  63++E5A4 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  64++E5A8 0E 2C 30 28                          DB $0E, $2C, $30, $28
  65++E5AC              BoaEdgesSize:           equ $ - BoaEdges
  66++E5AC              BoaEdgesCnt:            equ BoaEdgesSize/4
  67++E5AC 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  68++E5B0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  69++E5B4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  70++E5B8 1F 00 28 00                          DB $1F, $00, $28, $00
  71++E5BC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  72++E5C0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  73++E5C4 1F 00 17 06                          DB $1F, $00, $17, $06
  74++E5C8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  75++E5CC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  76++E5D0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  77++E5D4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  78++E5D8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  79++E5DC              BoaNormalsSize:         equ $ - BoaNormals
  80++E5DC              BoaLen:                 equ $ - Boa
  81++E5DC
# file closed: ./Data/ships/Boa.asm
  91+ E5DC
  92+ E5DC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5DC 00           CargoType5              DB $00                                     ; Number of cargo canisters released when destroyed
   2++E5DD 90 01                                DW 20 * 20                                 ; Ship's targetable area LoHi
   3++E5DF 37 E6                                DW CargoType5Edges                         ; Edge Data
   4++E5E1 3C                                   DB CargoType5EdgesSize                     ; Size of Edge Data
   5++E5E2 00                                   DB $00                                     ; Gun Vertex Byte offset
   6++E5E3 12                                   DB $12                                     ; Explosion Count
   7++E5E4 0A                                   DB CargoType5VertSize /6                   ; Vertex Count /6
   8++E5E5 3C                                   DB CargoType5VertSize                      ; Vertex Count
   9++E5E6 0F                                   DB CargoType5EdgesCnt                      ; Edges Count
  10++E5E7 00 00                                DW $0000                                   ; Bounty LoHi
  11++E5E9 1C                                   DB CargoType5NormalsSize                   ; Face (Normal) Count
  12++E5EA 0C                                   DB $0C                                     ; Range when it turns to a dot
  13++E5EB 11                                   DB $11                                     ; Energy Max
  14++E5EC 0F                                   DB $0F                                     ; Speed Max
  15++E5ED 73 E6                                DW CargoType5Normals                       ; Normals
  16++E5EF 02                                   DB $02                                     ; Q scaling
  17++E5F0 00                                   DB $00                                     ; Laser power and Nbr Missiles
  18++E5F1 FB E5                                DW CargoType5Vertices                      ; Verticles Address
  19++E5F3 04                                   DB ShipTypeScoopable                       ; Ship Type
  20++E5F4 00                                   DB 0                                       ; NewB Tactics
  21++E5F5 00                                   DB 0                                       ; AI Flags
  22++E5F6 00                                   DB $0                                      ; chance of ECM module
  23++E5F7 00                                   DB $00                                     ; Supports Solid Fill
CargoType5.asm(24): error: Label not found: CargoType5FaceTrangles
  24++E5F8 00 00                                DW CargoType5FaceTrangles                  ;
  25++E5FA 21                                   DB CargoType5TrainglesSize
  26++E5FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  27++E5FB              ;                                       Faces
  28++E5FB              ;                            X  Y    Z  12 34  Vis
  29++E5FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	               ;00  Top Right
  29++E5FF 10 55
  30++E601 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22                 ;01  Mid Right Near
  30++E605 10 22
  31++E607 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33                 ;02  Bottom right Near
  31++E60B 20 33
  32++E60D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44                 ;03  Bottom Right Rear
  32++E611 30 44
  33++E613 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55                 ;04  Mid Right Rear
  33++E617 40 55
  34++E619 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66                 ;05  Left versions
  34++E61D 51 66
  35++E61F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66                 ;06
  35++E623 21 66
  36++E625 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66                 ;07
  36++E629 32 66
  37++E62B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66                 ;08
  37++E62F 43 66
  38++E631 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66                 ;09
  38++E635 54 66
  39++E637              CargoType5VertSize      equ $  - CargoType5Vertices
  40++E637              ;                          Vis  FacVert Offset (4 bytexVertnbr)
  41++E637              ;                               12  01 02
  42++E637 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04 	       ;00 Face  0,1
  43++E63B 1F 20 04 08                          DB $1F,$20,$04,$08         ;01
  44++E63F 1F 30 08 0C                          DB $1F,$30,$08,$0C         ;02
  45++E643 1F 40 0C 10                          DB $1F,$40,$0C,$10         ;03
  46++E647 1F 50 00 10                          DB $1F,$50,$00,$10         ;04
  47++E64B 1F 51 00 14                          DB $1F,$51,$00,$14         ;05
  48++E64F 1F 21 04 18                          DB $1F,$21,$04,$18         ;06
  49++E653 1F 32 08 1C                          DB $1F,$32,$08,$1C         ;07
  50++E657 1F 43 0C 20                          DB $1F,$43,$0C,$20         ;08
  51++E65B 1F 54 10 24                          DB $1F,$54,$10,$24         ;19
  52++E65F 1F 61 14 18                          DB $1F,$61,$14,$18         ;10
  53++E663 1F 62 18 1C                          DB $1F,$62,$18,$1C         ;11
  54++E667 1F 63 1C 20                          DB $1F,$63,$1C,$20         ;12
  55++E66B 1F 64 20 24                          DB $1F,$64,$20,$24         ;13
  56++E66F 1F 65 24 14                          DB $1F,$65,$24,$14         ;14
  57++E673              CargoType5EdgesSize     equ $  - CargoType5Edges
  58++E673              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  59++E673              ;                           x  y    z   vis
  60++E673 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00 			               ;00 Right side
  61++E677 1F 00 29 1E                          DB $1F,$00,$29,$1E                         ;01
  62++E67B 5F 00 12 30                          DB $5F,$00,$12,$30                         ;02
  63++E67F 5F 00 33 00                          DB $5F,$00,$33,$00                         ;03
  64++E683 7F 00 12 30                          DB $7F,$00,$12,$30                         ;04
  65++E687 3F 00 29 1E                          DB $3F,$00,$29,$1E                         ;05 Left
  66++E68B 9F 60 00 00                          DB $9F,$60,$00,$00   ; end Cargo cannister ;06 right side
  67++E68F              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E68F              CargoType5Len           equ $  - CargoType5
  69++E68F                                      ; Triangles is made of a list of edges
  70++E68F              ; Ideal is pointers have a DW at the end to the list of triangles and count
  71++E68F              ; for testing we will do a simple search
  72++E68F              ;                          Nrm NodeOffset X 1
CargoType5.asm(73): error: Unrecognized instruction: 0    1    2
CargoType5.asm(73): error: Unexpected: 0    1    2
  73++E68F                                               0    1    2
  74++E68F 00 00 04 10  CargoType5Traingles     DB $00,$00*4, $01*4, $04*4
  75++E693 00 04 08 10                          DB $00,$01*4, $02*4, $04*4
  76++E697 00 08 0C 10                          DB $00,$02*4, $03*4, $04*4
  77++E69B 01 00 10 14                          DB $01,$00*4, $04*4, $05*4
  78++E69F 01 10 14 18                          DB $01,$04*4, $05*4, $06*4
  79++E6A3                                  ;   DB $02,
  80++E6A3                                  ;   DB $03,
  81++E6A3                                  ;   DB $03,
  82++E6A3                                  ;   DB $04,
  83++E6A3                                  ;   DB $04,
  84++E6A3                                  ;   DB $01,
  85++E6A3                                  ;   DB $01,
  86++E6A3                                  ;   DB $01,
  87++E6A3                                  ;   DB $01,
  88++E6A3 06 14 18 24                          DB $06,$05*4, $06*4, $09*4 ; its we store UBNkNodeArray + this offset it will save one memroy ready
  89++E6A7 06 18 1C 24                          DB $06,$06*4, $07*4, $09*4
  90++E6AB 06 1C 20 24                          DB $06,$07*4, $08*4, $09*4
  91++E6AF FF                                   DB $FF ; Very important end of traingle list marker
  92++E6B0              CargoType5TrainglesSize:equ $  -  CargoType5Traingles
  93++E6B0
  94++E6B0
  95++E6B0
# file closed: ./Data/ships/CargoType5.asm
  93+ E6B0                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E6B0 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E6B1 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E6B3 F9 E6                                DW BoulderEdges                      ; Edge Data
   4++E6B5 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E6B6 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E6B7 0E                                   DB $0E                               ; Explosion Count
   7++E6B8 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E6B9 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E6BA 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E6BB 01 00                                DW $0001                             ; Bounty LoHi
  11++E6BD 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E6BE 14                                   DB $14                               ; Range when it turns to a dot
  13++E6BF 14                                   DB $14                               ; Energy Max
  14++E6C0 1E                                   DB $1E                               ; Speed Max
  15++E6C1 35 E7                                DW BoulderNormals                    ; Normals
  16++E6C3 02                                   DB $02                               ; Q scaling
  17++E6C4 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E6C5 CF E6                                DW BoulderVertices                   ; Verticles Address
  19++E6C7 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E6C8 00                                   DB 0                                 ; NewB Tactics
  21++E6C9 00                                   DB 0                                 ; AI Flags
  22++E6CA A0                                   DB $A0                               ; chance of ECM module
  23++E6CB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E6CC 00 00                                DW $0000                            ; no solid data
  25++E6CE 00                                   DB $00                              ; no solid data
  26++E6CF
  27++E6CF 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  27++E6D3 01 59
  28++E6D5 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  28++E6D9 12 56
  29++E6DB 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  29++E6DF 23 67
  30++E6E1 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  30++E6E5 34 78
  31++E6E7 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  31++E6EB 04 89
  32++E6ED 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  32++E6F1 FF FF
  33++E6F3 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  33++E6F7 FF FF
  34++E6F9              BoulderVertSize:        equ $ - BoulderVertices
  35++E6F9 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  36++E6FD 1F 26 04 08                          DB $1F, $26, $04, $08
  37++E701 1F 37 08 0C                          DB $1F, $37, $08, $0C
  38++E705 1F 48 0C 10                          DB $1F, $48, $0C, $10
  39++E709 1F 09 10 00                          DB $1F, $09, $10, $00
  40++E70D 1F 01 00 14                          DB $1F, $01, $00, $14
  41++E711 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E715 1F 23 08 14                          DB $1F, $23, $08, $14
  43++E719 1F 34 0C 14                          DB $1F, $34, $0C, $14
  44++E71D 1F 04 10 14                          DB $1F, $04, $10, $14
  45++E721 1F 59 00 18                          DB $1F, $59, $00, $18
  46++E725 1F 56 04 18                          DB $1F, $56, $04, $18
  47++E729 1F 67 08 18                          DB $1F, $67, $08, $18
  48++E72D 1F 78 0C 18                          DB $1F, $78, $0C, $18
  49++E731 1F 89 10 18                          DB $1F, $89, $10, $18
  50++E735              BoulderEdgesSize:       equ $ - BoulderEdges
  51++E735              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  52++E735 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  53++E739 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  54++E73D 5F 20 2F 18                          DB $5F, $20, $2F, $18
  55++E741 FF 03 27 07                          DB $FF, $03, $27, $07
  56++E745 FF 05 04 01                          DB $FF, $05, $04, $01
  57++E749 1F 31 54 08                          DB $1F, $31, $54, $08
  58++E74D 3F 70 15 15                          DB $3F, $70, $15, $15
  59++E751 7F 4C 23 52                          DB $7F, $4C, $23, $52
  60++E755 3F 16 38 89                          DB $3F, $16, $38, $89
  61++E759 3F 28 6E 26                          DB $3F, $28, $6E, $26
  62++E75D              BoulderNormalsSize:     equ $ - BoulderNormals
  63++E75D              BoulderLen:             equ $ - Boulder
  64++E75D
# file closed: ./Data/ships/Boulder.asm
  94+ E75D                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E75D 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E75E 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E760 B2 E7                                DW AsteroidEdges                ; Edge Data
   4++E762 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E763 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E764 22                                   DB $22                          ; Explosion Count
   7++E765 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E766 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E767 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E768 05 00                                DW $0005                        ; Bounty LoHi
  11++E76A 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E76B 32                                   DB $32                          ; Range when it turns to a dot
  13++E76C 3C                                   DB $3C                          ; Energy Max
  14++E76D 1E                                   DB $1E                          ; Speed Max
  15++E76E 06 E8                                DW AsteroidNormals              ; Normals
  16++E770 01                                   DB $01                          ; Q scaling
  17++E771 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E772 7C E7                                DW AsteroidVertices             ; Verticles Address
  19++E774 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E775 00                                   DB 0                            ; NewB Tactics
  21++E776 00                                   DB 0                            ; AI Flags
  22++E777 00                                   DB $00                          ; chance of ECM module
  23++E778 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E779 00 00                                DW $0000                            ; no solid data
  25++E77B 00                                   DB $00                              ; no solid data
  26++E77C
  27++E77C 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  27++E780 FF FF
  28++E782 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  28++E786 FF FF
  29++E788 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  29++E78C FF FF
  30++E78E 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  30++E792 FF FF
  31++E794 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  31++E798 65 DC
  32++E79A 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  32++E79E FF FF
  33++E7A0 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  33++E7A4 10 32
  34++E7A6 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  34++E7AA FF FF
  35++E7AC 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  35++E7B0 98 BA
  36++E7B2              AsteroidVertSize:       equ $ - AsteroidVertices
  37++E7B2 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  38++E7B6 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  39++E7BA 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  40++E7BE 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  41++E7C2 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  42++E7C6 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  43++E7CA 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  44++E7CE 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  45++E7D2 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  46++E7D6 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  47++E7DA 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  48++E7DE 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  49++E7E2 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  50++E7E6 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  51++E7EA 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  52++E7EE 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  53++E7F2 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  54++E7F6 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  55++E7FA 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  56++E7FE 1F BA 08 20                          DB $1F, $BA, $08, $20
  57++E802 1F 98 1C 20                          DB $1F, $98, $1C, $20
  58++E806
  59++E806              AsteroidEdgesSize:      equ $ - AsteroidEdges
  60++E806              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  61++E806 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  62++E80A 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  63++E80E 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  64++E812 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  65++E816 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  66++E81A 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  67++E81E 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  68++E822 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  69++E826 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  70++E82A 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  71++E82E FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  72++E832 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  73++E836 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  74++E83A 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  75++E83E              AsteroidNormalsSize:    equ $ - AsteroidNormals
  76++E83E              AsteroidLen:            equ $ - Asteroid
  77++E83E
  78++E83E
# file closed: ./Data/ships/Asteroid.asm
  95+ E83E
  96+ E83E                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E83E 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E83F 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E841 A5 E8                                DW BushmasterEdges               ; Edge Data
   4++E843 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E844 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E845 1E                                   DB $1E                           ; Explosion Count
   7++E846 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E847 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E848 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E849 96 00                                DW $0096                         ; Bounty LoHi
  11++E84B 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E84C 14                                   DB $14                           ; Range when it turns to a dot
  13++E84D 4A                                   DB $4A                           ; Energy Max
  14++E84E 23                                   DB $23                           ; Speed Max
  15++E84F F1 E8                                DW BushmasterNormals             ; Normals
  16++E851 02                                   DB $02                           ; Q scaling
  17++E852 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E853 5D E8                                DW BushmasterVertices            ; Verticles Address
  19++E855 00                                   DB ShipTypeNormal                ; Ship Type
  20++E856 00                                   DB 0                             ; NewB Tactics
  21++E857 80                                   DB ShipCanAnger                  ; AI Flags
  22++E858 70                                   DB $70                           ; chance of ECM module
  23++E859 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E85A 00 00                                DW $0000                            ; no solid data
  25++E85C 00                                   DB $00                              ; no solid data
  26++E85D
  27++E85D 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  27++E861 23 01
  28++E863 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  28++E867 57 13
  29++E869 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  29++E86D 46 02
  30++E86F 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  30++E873 45 01
  31++E875 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  31++E879 FF FF
  32++E87B 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  32++E87F 88 45
  33++E881 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  33++E885 88 57
  34++E887 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  34++E88B 88 46
  35++E88D 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  35++E891 88 88
  36++E893 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  36++E897 88 88
  37++E899 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  37++E89D 88 88
  38++E89F 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  38++E8A3 88 88
  39++E8A5              BushmasterVertSize:     equ $ - BushmasterVertices
  40++E8A5 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  41++E8A9 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  42++E8AD 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  43++E8B1 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  44++E8B5 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  45++E8B9 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  46++E8BD 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  47++E8C1 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  48++E8C5 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  49++E8C9 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  50++E8CD 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  51++E8D1 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  52++E8D5 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  53++E8D9 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  54++E8DD 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  55++E8E1 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  56++E8E5 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  57++E8E9 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  58++E8ED 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  59++E8F1              BushmasterEdgesSize:    equ $ - BushmasterEdges
  60++E8F1              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  61++E8F1 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  62++E8F5 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  63++E8F9 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  64++E8FD 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  65++E901 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  66++E905 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  67++E909 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  68++E90D 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  69++E911 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  70++E915              BushmasterNormalsSize:  equ $ - BushmasterNormals
  71++E915              BushmasterLen:          equ $ - Bushmaster
  72++E915
# file closed: ./Data/ships/Bushmaster.asm
  97+ E915                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E915 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E916 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E918 9F E9                                DW ChameleonEdges               ; Edge Data
   4++E91A 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E91B 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E91C 1A                                   DB $1A                          ; Explosion Count
   7++E91D 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E91E 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E91F 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E920 C8                                   DB $00C8                        ; Bounty LoHi
  11++E921 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E922 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E923 64                                   DB $64                          ; Energy Max
  14++E924 1D                                   DB $1D                          ; Speed Max
  15++E925 13 EA                                DW ChameleonNormals             ; Normals
  16++E927 01                                   DB $01                          ; Q scaling
  17++E928 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E929 33 E9                                DW ChameleonVertices            ; Verticles Address
  19++E92B 00                                   DB ShipTypeNormal               ; Ship Type
  20++E92C 00                                   DB 0                            ; NewB Tactics
  21++E92D 80                                   DB ShipCanAnger                 ; AI Flags
  22++E92E 40                                   DB $40                          ; chance of ECM module
  23++E92F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E930 00 00                                DW $0000                            ; no solid data
  25++E932 00                                   DB $00                              ; no solid data
  26++E933
  27++E933 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  27++E937 25 01
  28++E939 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  28++E93D 34 01
  29++E93F 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  29++E943 8B 25
  30++E945 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  30++E949 68 22
  31++E94B 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  31++E94F 69 33
  32++E951 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  32++E955 9A 34
  33++E957 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  33++E95B 7A 44
  34++E95D 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  34++E961 7B 55
  35++E963 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  35++E967 36 02
  36++E969 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  36++E96D 57 14
  37++E96F 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  37++E973 BC 88
  38++E975 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  38++E979 9C 68
  39++E97B 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  39++E97F AC 99
  40++E981 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  40++E985 BC 7A
  41++E987 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  41++E98B CC CC
  42++E98D 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  42++E991 CC CC
  43++E993 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  43++E997 CC CC
  44++E999 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  44++E99D CC CC
  45++E99F              ChameleonVertSize:      equ $ - ChameleonVertices
  46++E99F 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  47++E9A3 1F 02 00 20                          DB $1F, $02, $00, $20
  48++E9A7 1F 15 00 24                          DB $1F, $15, $00, $24
  49++E9AB 1F 03 04 20                          DB $1F, $03, $04, $20
  50++E9AF 1F 14 04 24                          DB $1F, $14, $04, $24
  51++E9B3 1F 34 04 14                          DB $1F, $34, $04, $14
  52++E9B7 1F 25 00 08                          DB $1F, $25, $00, $08
  53++E9BB 1F 26 0C 20                          DB $1F, $26, $0C, $20
  54++E9BF 1F 36 10 20                          DB $1F, $36, $10, $20
  55++E9C3 1F 75 1C 24                          DB $1F, $75, $1C, $24
  56++E9C7 1F 74 18 24                          DB $1F, $74, $18, $24
  57++E9CB 1F 39 10 14                          DB $1F, $39, $10, $14
  58++E9CF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  59++E9D3 1F 28 08 0C                          DB $1F, $28, $08, $0C
  60++E9D7 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  61++E9DB 1F 8B 08 28                          DB $1F, $8B, $08, $28
  62++E9DF 1F 9A 14 30                          DB $1F, $9A, $14, $30
  63++E9E3 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  64++E9E7 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  65++E9EB 1F 69 10 2C                          DB $1F, $69, $10, $2C
  66++E9EF 1F 7A 18 34                          DB $1F, $7A, $18, $34
  67++E9F3 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  68++E9F7 1F BC 28 34                          DB $1F, $BC, $28, $34
  69++E9FB 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  70++E9FF 1F AC 30 34                          DB $1F, $AC, $30, $34
  71++EA03 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  72++EA07 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  73++EA0B 0A CC 40 44                          DB $0A, $CC, $40, $44
  74++EA0F 0A CC 44 38                          DB $0A, $CC, $44, $38
  75++EA13              ChameleonEdgesSize:     equ $ - ChameleonEdges
  76++EA13              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  77++EA13 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  78++EA17 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  79++EA1B 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  80++EA1F 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  81++EA23 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  82++EA27 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  83++EA2B 1F 00 60 00                          DB $1F, $00, $60, $00
  84++EA2F 5F 00 60 00                          DB $5F, $00, $60, $00
  85++EA33 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  86++EA37 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  87++EA3B 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  88++EA3F FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  89++EA43 3F 00 00 60                          DB $3F, $00, $00, $60
  90++EA47              ChameleonNormalsSize:   equ $ - ChameleonNormals
  91++EA47              ChameleonLen:           equ $ - Chameleon
  92++EA47
# file closed: ./Data/ships/Chameleon.asm
  98+ EA47                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA47              ; Corrected pointers
   2++EA47              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA47              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA47              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA47 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA48 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA4A 0E EB                                DW CobraMk3Edges                  ; Edge Data
   8++EA4C 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA4D 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA4E 2A                                   DB $2A                            ; Explosion Count
  11++EA4F 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA50 A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA51 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA52 00 00                                DW $0000                          ; Bounty LoHi
  15++EA54 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA55 32                                   DB $32                            ; Range when it turns to a dot
  17++EA56 96                                   DB $96                            ; Energy Max
  18++EA57 1C                                   DB $1C                            ; Speed Max
  19++EA58 A6 EB                                DW CobraMk3Normals                ; Normals
  20++EA5A 01                                   DB $01                            ; Q scaling
  21++EA5B 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA5C 66 EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA5E 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA5F 00                                   DB 0                              ; NewB Tactics
  25++EA60 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA61 70                                   DB $70                            ; chance of ECM module
  27++EA62 FF                                   DB $FF                              ; Supports Solid Fill = false
  28++EA63 00 00                                DW $0000                            ; no solid data
  29++EA65 00                                   DB $00                              ; no solid data
  30++EA66
  31++EA66 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  31++EA6A FF FF
  32++EA6C 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  32++EA70 FF FF
  33++EA72 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  33++EA76 FF FF
  34++EA78 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  34++EA7C 73 AA
  35++EA7E 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  35++EA82 84 CC
  36++EA84 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  36++EA88 FF FF
  37++EA8A 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  37++EA8E FF FF
  38++EA90 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  38++EA94 98 CC
  39++EA96 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  39++EA9A 97 AA
  40++EA9C 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  40++EAA0 65 99
  41++EAA2 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  41++EAA6 A9 BB
  42++EAA8 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  42++EAAC B9 CC
  43++EAAE 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  43++EAB2 99 99
  44++EAB4 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  44++EAB8 99 99
  45++EABA 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  45++EABE 99 99
  46++EAC0 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  46++EAC4 99 99
  47++EAC6 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  47++EACA 99 99
  48++EACC 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  48++EAD0 99 99
  49++EAD2 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  49++EAD6 99 99
  50++EAD8 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  50++EADC 99 99
  51++EADE 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  51++EAE2 B0 BB
  52++EAE4 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  52++EAE8 B0 BB
  53++EAEA 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  53++EAEE 99 99
  54++EAF0 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  54++EAF4 99 99
  55++EAF6 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  55++EAFA 99 99
  56++EAFC 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  56++EB00 99 99
  57++EB02 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  57++EB06 99 99
  58++EB08 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  58++EB0C 99 99
  59++EB0E              CobraMkVertSize         equ $  - CobraMk3Vertices
  60++EB0E 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  60++EB12 1F C4 00 10
  61++EB16 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  61++EB1A 1F A7 0C 20
  62++EB1E 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  62++EB22 1F 98 18 1C
  63++EB26 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  63++EB2A 1F 95 14 24
  64++EB2E 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  64++EB32 1F 51 08 14
  65++EB36 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  65++EB3A 1F 73 0C 14
  66++EB3E 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  66++EB42 1F 10 04 08
  67++EB46 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  67++EB4A 1F A9 20 28
  68++EB4E 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  68++EB52 1F C9 1C 2C
  69++EB56 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  69++EB5A 1F CB 00 2C
  70++EB5E 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  70++EB62 1D 42 00 18
  71++EB66 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  71++EB6A 14 99 30 34
  72++EB6E 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  72++EB72 14 99 38 3C
  73++EB76 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  73++EB7A 13 99 3C 40
  74++EB7E 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  74++EB82 13 99 34 48
  75++EB86 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  75++EB8A 1E 65 08 24
  76++EB8E 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  76++EB92 06 99 5C 60
  77++EB96 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  77++EB9A 06 99 64 68
  78++EB9E 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  78++EBA2 08 99 64 6C
  79++EBA6              CobraMkEdgesSize        equ $  - CobraMk3Edges
  80++EBA6              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  81++EBA6              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  82++EBA6 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  83++EBAA 9F 12 37 10                          DB $9F,$12,$37,$10
  84++EBAE 1F 12 37 10                          DB $1F,$12,$37,$10
  85++EBB2 9F 10 34 0E                          DB $9F,$10,$34,$0E
  86++EBB6 1F 10 34 0E                          DB $1F,$10,$34,$0E
  87++EBBA 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  88++EBBE 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  89++EBC2 9F 3D 66 00                          DB $9F,$3D,$66,$00
  90++EBC6 1F 3D 66 00                          DB $1F,$3D,$66,$00
  91++EBCA 3F 00 00 50                          DB $3F,$00,$00,$50
  92++EBCE DF 07 2A 09                          DB $DF,$07,$2A,$09
  93++EBD2 5F 00 1E 06                          DB $5F,$00,$1E,$06
  94++EBD6 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  95++EBDA              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  96++EBDA              CobraMk3Len             equ $  - CobraMk3
  97++EBDA
# file closed: ./Data/ships/CobraMk3.asm
  99+ EBDA                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EBDA 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EBDB 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EBDD 3B EC                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EBDF 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EBE0 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EBE1 1A                                   DB $1A                              ; Explosion Count
   7++EBE2 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EBE3 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EBE4 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EBE5 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EBE7 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EBE8 13                                   DB $13                              ; Range when it turns to a dot
  13++EBE9 51                                   DB $51                              ; Energy Max
  14++EBEA 1A                                   DB $1A                              ; Speed Max
  15++EBEB 83 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBED 02                                   DB $02                              ; Q scaling
  17++EBEE 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBEF F9 EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBF1 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBF2 00                                   DB 0                                ; NewB Tactics
  21++EBF3 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBF4 30                                   DB $30                              ; chance of ECM module
  23++EBF5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBF6 00 00                                DW $0000                            ; no solid data
  25++EBF8 00                                   DB $00                              ; no solid data
  26++EBF9
  27++EBF9 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  27++EBFD 01 23
  28++EBFF 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  28++EC03 01 45
  29++EC05 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  29++EC09 23 88
  30++EC0B 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  30++EC0F 45 99
  31++EC11 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  31++EC15 26 78
  32++EC17 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  32++EC1B 46 79
  33++EC1D 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  33++EC21 13 78
  34++EC23 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  34++EC27 15 79
  35++EC29 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  35++EC2D 02 46
  36++EC2F 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  36++EC33 01 11
  37++EC35 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  37++EC39 01 11
  38++EC3B              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  39++EC3B 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  40++EC3F 1F 23 00 08                          DB $1F, $23, $00, $08
  41++EC43 1F 38 08 18                          DB $1F, $38, $08, $18
  42++EC47 1F 17 18 1C                          DB $1F, $17, $18, $1C
  43++EC4B 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  44++EC4F 1F 45 0C 04                          DB $1F, $45, $0C, $04
  45++EC53 1F 28 08 10                          DB $1F, $28, $08, $10
  46++EC57 1F 67 10 14                          DB $1F, $67, $10, $14
  47++EC5B 1F 49 14 0C                          DB $1F, $49, $14, $0C
  48++EC5F 14 02 00 20                          DB $14, $02, $00, $20
  49++EC63 14 04 20 04                          DB $14, $04, $20, $04
  50++EC67 10 26 10 20                          DB $10, $26, $10, $20
  51++EC6B 10 46 20 14                          DB $10, $46, $20, $14
  52++EC6F 1F 78 10 18                          DB $1F, $78, $10, $18
  53++EC73 1F 79 14 1C                          DB $1F, $79, $14, $1C
  54++EC77 14 13 00 18                          DB $14, $13, $00, $18
  55++EC7B 14 15 04 1C                          DB $14, $15, $04, $1C
  56++EC7F 02 01 28 24                          DB $02, $01, $28, $24
  57++EC83              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  58++EC83              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  59++EC83 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  60++EC87 5F 00 1B 03                          DB $5F, $00, $1B, $03
  61++EC8B 9F 08 2E 08                          DB $9F, $08, $2E, $08
  62++EC8F DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  63++EC93 1F 08 2E 08                          DB $1F, $08, $2E, $08
  64++EC97 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  65++EC9B 1F 00 31 00                          DB $1F, $00, $31, $00
  66++EC9F 3F 00 00 9A                          DB $3F, $00, $00, $9A
  67++ECA3 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  68++ECA7 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  69++ECAB              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  70++ECAB              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  71++ECAB
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ ECAB                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++ECAB 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++ECAC 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++ECAE 72 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++ECB0 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++ECB1 54                                   DB $54                              ; Gun Vertex Byte offset
   6++ECB2 2A                                   DB $2A                              ; Explosion Count
   7++ECB3 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++ECB4 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++ECB5 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++ECB6 00 AF                                DW $AF00                            ; Bounty LoHi
  11++ECB8 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++ECB9                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++ECB9 32                                   DB $32                              ; Range when it turns to a dot
  14++ECBA 96                                   DB $96                              ; Energy Max
  15++ECBB 1C                                   DB $1C                              ; Speed Max
  16++ECBC 0A EE                                DW Cobra_Mk_3_PNormals              ; Normals
  17++ECBE 01                                   DB $01                              ; Q scaling
  18++ECBF 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++ECC0 CA EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++ECC2 00                                   DB ShipTypeNormal                   ; Ship Type
  21++ECC3 00                                   DB 0                                ; NewB Tactics
  22++ECC4 80                                   DB ShipCanAnger                     ; AI Flags
  23++ECC5 90                                   DB $90                              ; chance of ECM module
  24++ECC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++ECC7 00 00                                DW $0000                            ; no solid data
  26++ECC9 00                                   DB $00                              ; no solid data
  27++ECCA
  28++ECCA 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  28++ECCE FF FF
  29++ECD0 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  29++ECD4 FF FF
  30++ECD6 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  30++ECDA FF FF
  31++ECDC 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  31++ECE0 73 AA
  32++ECE2 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  32++ECE6 84 CC
  33++ECE8 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  33++ECEC FF FF
  34++ECEE 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  34++ECF2 FF FF
  35++ECF4 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  35++ECF8 98 CC
  36++ECFA 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  36++ECFE 97 AA
  37++ED00 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  37++ED04 65 99
  38++ED06 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  38++ED0A A9 BB
  39++ED0C 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  39++ED10 B9 CC
  40++ED12 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  40++ED16 99 99
  41++ED18 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  41++ED1C 99 99
  42++ED1E 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  42++ED22 99 99
  43++ED24 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  43++ED28 99 99
  44++ED2A 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  44++ED2E 99 99
  45++ED30 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  45++ED34 99 99
  46++ED36 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  46++ED3A 99 99
  47++ED3C 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  47++ED40 99 99
  48++ED42 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  48++ED46 B0 BB
  49++ED48 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  49++ED4C B0 BB
  50++ED4E 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  50++ED52 99 99
  51++ED54 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  51++ED58 99 99
  52++ED5A 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  52++ED5E 99 99
  53++ED60 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  53++ED64 99 99
  54++ED66 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  54++ED6A 99 99
  55++ED6C 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  55++ED70 99 99
  56++ED72              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  57++ED72 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  58++ED76 1F C4 00 10                          DB $1F, $C4, $00, $10
  59++ED7A 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  60++ED7E 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  61++ED82 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  62++ED86 1F 98 18 1C                          DB $1F, $98, $18, $1C
  63++ED8A 1F 96 18 24                          DB $1F, $96, $18, $24
  64++ED8E 1F 95 14 24                          DB $1F, $95, $14, $24
  65++ED92 1F 97 14 20                          DB $1F, $97, $14, $20
  66++ED96 1F 51 08 14                          DB $1F, $51, $08, $14
  67++ED9A 1F 62 08 18                          DB $1F, $62, $08, $18
  68++ED9E 1F 73 0C 14                          DB $1F, $73, $0C, $14
  69++EDA2 1F 84 10 18                          DB $1F, $84, $10, $18
  70++EDA6 1F 10 04 08                          DB $1F, $10, $04, $08
  71++EDAA 1F 20 00 08                          DB $1F, $20, $00, $08
  72++EDAE 1F A9 20 28                          DB $1F, $A9, $20, $28
  73++EDB2 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  74++EDB6 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  75++EDBA 1F BA 04 28                          DB $1F, $BA, $04, $28
  76++EDBE 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  77++EDC2 1D 31 04 14                          DB $1D, $31, $04, $14
  78++EDC6 1D 42 00 18                          DB $1D, $42, $00, $18
  79++EDCA 06 B0 50 54                          DB $06, $B0, $50, $54
  80++EDCE 14 99 30 34                          DB $14, $99, $30, $34
  81++EDD2 14 99 48 4C                          DB $14, $99, $48, $4C
  82++EDD6 14 99 38 3C                          DB $14, $99, $38, $3C
  83++EDDA 14 99 40 44                          DB $14, $99, $40, $44
  84++EDDE 13 99 3C 40                          DB $13, $99, $3C, $40
  85++EDE2 11 99 38 44                          DB $11, $99, $38, $44
  86++EDE6 13 99 34 48                          DB $13, $99, $34, $48
  87++EDEA 13 99 30 4C                          DB $13, $99, $30, $4C
  88++EDEE 1E 65 08 24                          DB $1E, $65, $08, $24
  89++EDF2 06 99 58 60                          DB $06, $99, $58, $60
  90++EDF6 06 99 5C 60                          DB $06, $99, $5C, $60
  91++EDFA 08 99 58 5C                          DB $08, $99, $58, $5C
  92++EDFE 06 99 64 68                          DB $06, $99, $64, $68
  93++EE02 06 99 68 6C                          DB $06, $99, $68, $6C
  94++EE06 08 99 64 6C                          DB $08, $99, $64, $6C
  95++EE0A              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  96++EE0A              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  97++EE0A 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  98++EE0E 9F 12 37 10                          DB $9F, $12, $37, $10
  99++EE12 1F 12 37 10                          DB $1F, $12, $37, $10
 100++EE16 9F 10 34 0E                          DB $9F, $10, $34, $0E
 101++EE1A 1F 10 34 0E                          DB $1F, $10, $34, $0E
 102++EE1E 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
 103++EE22 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 104++EE26 9F 3D 66 00                          DB $9F, $3D, $66, $00
 105++EE2A 1F 3D 66 00                          DB $1F, $3D, $66, $00
 106++EE2E 3F 00 00 50                          DB $3F, $00, $00, $50
 107++EE32 DF 07 2A 09                          DB $DF, $07, $2A, $09
 108++EE36 5F 00 1E 06                          DB $5F, $00, $1E, $06
 109++EE3A 5F 07 2A 09                          DB $5F, $07, $2A, $09
 110++EE3E              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 111++EE3E              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 112++EE3E
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EE3E                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EE3E F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EE3F 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EE41 C3 EE                                DW ConstrictorEdges            ; Edge Data
   4++EE43 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EE44 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EE45 2E                                   DB $2E                         ; Explosion Count
   7++EE46 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EE47 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EE48 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EE49 18 00                                DW $0018                       ; Bounty LoHi
  11++EE4B 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EE4C 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EE4D C8                                   DB $C8                         ; Energy Max
  14++EE4E 37                                   DB $37                         ; Speed Max
  15++EE4F 23 EF                                DW ConstrictorNormals          ; Normals
  16++EE51 02                                   DB $02                         ; Q scaling
  17++EE52 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE53 5D EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE55 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE56 00                                   DB 0                           ; NewB Tactics
  21++EE57 80                                   DB ShipCanAnger                ; AI Flags
  22++EE58 FF                                   DB $FF                         ; chance of ECM module
  23++EE59 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EE5A 00 00                                DW $0000                            ; no solid data
  25++EE5C 00                                   DB $00                              ; no solid data
  26++EE5D
  27++EE5D 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  27++EE61 02 99
  28++EE63 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  28++EE67 01 99
  29++EE69 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  29++EE6D 14 99
  30++EE6F 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  30++EE73 45 89
  31++EE75 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  31++EE79 56 88
  32++EE7B 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  32++EE7F 67 88
  33++EE81 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  33++EE85 37 89
  34++EE87 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  34++EE8B 23 99
  35++EE8D 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  35++EE91 FF FF
  36++EE93 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  36++EE97 FF FF
  37++EE99 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  37++EE9D 99 99
  38++EE9F 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  38++EEA3 99 99
  39++EEA5 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  39++EEA9 99 99
  40++EEAB 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  40++EEAF 99 99
  41++EEB1 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  41++EEB5 99 99
  42++EEB7 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  42++EEBB 99 99
  43++EEBD 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  43++EEC1 9F 01
  44++EEC3              ConstrictorVertSize     equ $  - ConstrictorVertices
  45++EEC3 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  45++EEC7 1F 19 04 08
  46++EECB 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  46++EECF 1F 02 00 20
  47++EED3 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  47++EED7 1F 23 1C 20
  48++EEDB 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  48++EEDF 1F 49 08 0C
  49++EEE3 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  49++EEE7 1F 37 18 20
  50++EEEB 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  50++EEEF 1F 56 10 24
  51++EEF3 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  51++EEF7 1F 58 0C 10
  52++EEFB 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  52++EEFF 1F 78 14 18
  53++EF03 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  53++EF07 1F 06 20 24
  54++EF0B 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  54++EF0F 05 99 30 38
  55++EF13 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  55++EF17 0A 99 2C 3C
  56++EF1B 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  56++EF1F 12 99 2C 34
  57++EF23              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  58++EF23              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  59++EF23 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  59++EF27 9F 18 4B 14
  60++EF2B 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  60++EF2F 1F 2C 4B 00
  61++EF33 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  61++EF37 9F 2C 4B 00
  62++EF3B 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  62++EF3F 1F 2C 4B 00
  63++EF43 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  63++EF47 5F 00 1B 00
  64++EF4B              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  65++EF4B              ConstrictorLen          equ $  - Constrictor
  66++EF4B
# file closed: ./Data/ships/Constrictor.asm
 102+ EF4B                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EF4B 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EF4C 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EF4E CA EF                                DW CoriolisEdges                            ; Edge Data
   4++EF50 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EF51 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EF52 36                                   DB $36                                      ; Explosion Count
   7++EF53 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EF54 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF55 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF56 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF58 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF59 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF5A F0                                   DB $F0                                      ; Energy Max
  14++EF5B 00                                   DB $00                                      ; Speed Max
  15++EF5C 3A F0                                DW CoriolisNormals                          ; Normals
  16++EF5E 00                                   DB $00                                      ; Q scaling
  17++EF5F 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF60 6A EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF62 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF63 00                                   DB 0                                        ; NewB Tactics
  21++EF64 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF65 FF                                   DB $FF                                      ; chance of ECM module
  23++EF66 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EF67 00 00                                DW $0000                            ; no solid data
  25++EF69 00                                   DB $00                              ; no solid data
  26++EF6A
  27++EF6A A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  27++EF6E 10 62
  28++EF70 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  28++EF74 20 83
  29++EF76 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  29++EF7A 30 74
  30++EF7C 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  30++EF80 10 54
  31++EF82 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  31++EF86 51 A6
  32++EF88 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  32++EF8C 62 B8
  33++EF8E A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  33++EF92 73 C8
  34++EF94 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  34++EF98 54 97
  35++EF9A A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  35++EF9E A6 DB
  36++EFA0 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  36++EFA4 B8 DC
  37++EFA6 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  37++EFAA 97 DC
  38++EFAC 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  38++EFB0 95 DA
  39++EFB2 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  39++EFB6 00 00
  40++EFB8 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  40++EFBC 00 00
  41++EFBE 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  41++EFC2 00 00
  42++EFC4 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  42++EFC8 00 00
  43++EFCA              CoriolisVertSize:       equ $ - CoriolisVertices
  44++EFCA 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  45++EFCE 1F 20 00 04                          DB $1F, $20, $00, $04
  46++EFD2 1F 30 04 08                          DB $1F, $30, $04, $08
  47++EFD6 1F 40 08 0C                          DB $1F, $40, $08, $0C
  48++EFDA 1F 51 0C 10                          DB $1F, $51, $0C, $10
  49++EFDE 1F 61 00 10                          DB $1F, $61, $00, $10
  50++EFE2 1F 62 00 14                          DB $1F, $62, $00, $14
  51++EFE6 1F 82 14 04                          DB $1F, $82, $14, $04
  52++EFEA 1F 83 04 18                          DB $1F, $83, $04, $18
  53++EFEE 1F 73 08 18                          DB $1F, $73, $08, $18
  54++EFF2 1F 74 08 1C                          DB $1F, $74, $08, $1C
  55++EFF6 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  56++EFFA 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  57++EFFE 1F DB 20 24                          DB $1F, $DB, $20, $24
  58++F002 1F DC 24 28                          DB $1F, $DC, $24, $28
  59++F006 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  60++F00A 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  61++F00E 1F A6 10 20                          DB $1F, $A6, $10, $20
  62++F012 1F B6 14 20                          DB $1F, $B6, $14, $20
  63++F016 1F B8 14 24                          DB $1F, $B8, $14, $24
  64++F01A 1F C8 18 24                          DB $1F, $C8, $18, $24
  65++F01E 1F C7 18 28                          DB $1F, $C7, $18, $28
  66++F022 1F 97 1C 28                          DB $1F, $97, $1C, $28
  67++F026 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  68++F02A 1E 00 30 34                          DB $1E, $00, $30, $34
  69++F02E 1E 00 34 38                          DB $1E, $00, $34, $38
  70++F032 1E 00 38 3C                          DB $1E, $00, $38, $3C
  71++F036 1E 00 3C 30                          DB $1E, $00, $3C, $30
  72++F03A              CoriolisEdgesSize:      equ $ - CoriolisEdges
  73++F03A              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  74++F03A 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  75++F03E 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  76++F042 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  77++F046 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  78++F04A DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  79++F04E 5F 00 A0 00                          DB $5F, $00, $A0, $00
  80++F052 1F A0 00 00                          DB $1F, $A0, $00, $00
  81++F056 9F A0 00 00                          DB $9F, $A0, $00, $00
  82++F05A 1F 00 A0 00                          DB $1F, $00, $A0, $00
  83++F05E FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  84++F062 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  85++F066 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  86++F06A BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  87++F06E 3F 00 00 A0                          DB $3F, $00, $00, $A0
  88++F072              CoriolisNormalsSize:    equ $ - CoriolisNormals
  89++F072              CoriolisLen:            equ $ - Coriolis
  90++F072
# file closed: ./Data/ships/Coriolis.asm
 103+ F072                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F072 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F073 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F075 03 F1                                DW CougarEdges                 ; Edge Data
   4++F077 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F078 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F079 2A                                   DB $2A                         ; Explosion Count
   7++F07A 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F07B 72                                   DB CougarVertSize              ; Vertex Count
   9++F07C 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F07D 00 00                                DW $0000                       ; Bounty LoHi
  11++F07F 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F080 22                                   DB $22                         ; Range when it turns to a dot
  13++F081 FC                                   DB $FC                         ; Energy Max
  14++F082 28                                   DB $28                         ; Speed Max
  15++F083 67 F1                                DW CougarNormals               ; Normals
  16++F085 02                                   DB $02                         ; Q scaling
  17++F086 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F087 91 F0                                DW CougarVertices              ; Verticles Address
  19++F089 00                                   DB ShipTypeNormal              ; Ship Type
  20++F08A 00                                   DB 0                           ; NewB Tactics
  21++F08B 80                                   DB ShipCanAnger                ; AI Flags
  22++F08C B0                                   DB $B0                         ; chance of ECM module
  23++F08D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F08E 00 00                                DW $0000                            ; no solid data
  25++F090 00                                   DB $00                              ; no solid data
  26++F091
  27++F091 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  27++F095 02 44
  28++F097 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  28++F09B 01 22
  29++F09D 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  29++F0A1 01 55
  30++F0A3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  30++F0A7 04 55
  31++F0A9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  31++F0AD 12 35
  32++F0AF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  32++F0B3 23 44
  33++F0B5 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  33++F0B9 34 55
  34++F0BB 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  34++F0BF 01 11
  35++F0C1 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  35++F0C5 01 11
  36++F0C7 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  36++F0CB 34 44
  37++F0CD 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  37++F0D1 34 44
  38++F0D3 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  38++F0D7 00 44
  39++F0D9 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  39++F0DD 00 44
  40++F0DF 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  40++F0E3 00 00
  41++F0E5 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  41++F0E9 44 44
  42++F0EB 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  42++F0EF 55 55
  43++F0F1 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  43++F0F5 55 55
  44++F0F7 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  44++F0FB 55 55
  45++F0FD 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  45++F101 55 55
  46++F103              CougarVertSize:         equ $ - CougarVertices
  47++F103 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  48++F107 1F 01 04 1C                          DB $1F, $01, $04, $1C
  49++F10B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  50++F10F 1F 01 20 08                          DB $1F, $01, $20, $08
  51++F113 1E 05 08 0C                          DB $1E, $05, $08, $0C
  52++F117 1E 45 0C 18                          DB $1E, $45, $0C, $18
  53++F11B 1E 15 08 10                          DB $1E, $15, $08, $10
  54++F11F 1E 35 10 18                          DB $1E, $35, $10, $18
  55++F123 1F 34 18 28                          DB $1F, $34, $18, $28
  56++F127 1F 34 28 24                          DB $1F, $34, $28, $24
  57++F12B 1F 34 24 14                          DB $1F, $34, $24, $14
  58++F12F 1F 24 14 00                          DB $1F, $24, $14, $00
  59++F133 1B 04 00 0C                          DB $1B, $04, $00, $0C
  60++F137 1B 12 04 10                          DB $1B, $12, $04, $10
  61++F13B 1B 23 14 10                          DB $1B, $23, $14, $10
  62++F13F 1A 01 04 08                          DB $1A, $01, $04, $08
  63++F143 1A 34 14 18                          DB $1A, $34, $14, $18
  64++F147 14 00 30 34                          DB $14, $00, $30, $34
  65++F14B 12 00 34 2C                          DB $12, $00, $34, $2C
  66++F14F 12 44 2C 38                          DB $12, $44, $2C, $38
  67++F153 14 44 38 30                          DB $14, $44, $38, $30
  68++F157 12 55 3C 40                          DB $12, $55, $3C, $40
  69++F15B 14 55 40 48                          DB $14, $55, $40, $48
  70++F15F 12 55 48 44                          DB $12, $55, $48, $44
  71++F163 14 55 44 3C                          DB $14, $55, $44, $3C
  72++F167              CougarEdgesSize:        equ $ - CougarEdges
  73++F167              CougarEdgesCnt:         equ CougarEdgesSize/4
  74++F167 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  75++F16B DF 10 2E 04                          DB $DF, $10, $2E, $04
  76++F16F 5F 00 1B 05                          DB $5F, $00, $1B, $05
  77++F173 5F 10 2E 04                          DB $5F, $10, $2E, $04
  78++F177 1F 10 2E 04                          DB $1F, $10, $2E, $04
  79++F17B 3E 00 00 A0                          DB $3E, $00, $00, $A0
  80++F17F              CougarNormalsSize:      equ $ - CougarNormals
  81++F17F              CougarLen:              equ $ - Cougar
  82++F17F
# file closed: ./Data/ships/Cougar.asm
 104+ F17F                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F17F 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F180 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F182 2E F2                                DW DodoEdges                  ; Edge Data
   4++F184 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F185 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F186 36                                   DB $36                        ; Explosion Count
   7++F187 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F188 90                                   DB DodoVertSize               ; Vertex Count
   9++F189 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F18A 00 00                                DW $0000                      ; Bounty LoHi
  11++F18C 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F18D 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F18E F0                                   DB $F0                        ; Energy Max
  14++F18F 00                                   DB $00                        ; Speed Max
  15++F190 B6 F2                                DW DodoNormals                ; Normals
  16++F192 00                                   DB $00                        ; Q scaling
  17++F193 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F194 9E F1                                DW DodoVertices               ; Verticles Address
  19++F196 02                                   DB ShipTypeStation            ; Ship Type
  20++F197 00                                   DB 0                          ; NewB Tactics
  21++F198 00                                   DB 0                          ; AI Flags
  22++F199 FF                                   DB $FF                        ; chance of ECM module
  23++F19A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F19B 00 00                                DW $0000                            ; no solid data
  25++F19D 00                                   DB $00                              ; no solid data
  26++F19E
  27++F19E 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  27++F1A2 01 55
  28++F1A4 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  28++F1A8 01 22
  29++F1AA 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  29++F1AE 02 33
  30++F1B0 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  30++F1B4 03 44
  31++F1B6 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  31++F1BA 04 55
  32++F1BC 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  32++F1C0 15 66
  33++F1C2 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  33++F1C6 12 77
  34++F1C8 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  34++F1CC 23 88
  35++F1CE 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  35++F1D2 34 99
  36++F1D4 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  36++F1D8 45 AA
  37++F1DA 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  37++F1DE 16 77
  38++F1E0 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  38++F1E4 27 88
  39++F1E6 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  39++F1EA 38 99
  40++F1EC E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  40++F1F0 49 AA
  41++F1F2 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  41++F1F6 56 AA
  42++F1F8 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  42++F1FC 67 BB
  43++F1FE 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  43++F202 78 BB
  44++F204 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  44++F208 89 BB
  45++F20A 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  45++F20E 9A BB
  46++F210 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  46++F214 6A BB
  47++F216 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  47++F21A 00 00
  48++F21C 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  48++F220 00 00
  49++F222 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  49++F226 00 00
  50++F228 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  50++F22C 00 00
  51++F22E              DodoVertSize:           equ $ - DodoVertices
  52++F22E 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  53++F232 1F 02 04 08                          DB $1F, $02, $04, $08
  54++F236 1F 03 08 0C                          DB $1F, $03, $08, $0C
  55++F23A 1F 04 0C 10                          DB $1F, $04, $0C, $10
  56++F23E 1F 05 10 00                          DB $1F, $05, $10, $00
  57++F242 1F 16 14 28                          DB $1F, $16, $14, $28
  58++F246 1F 17 28 18                          DB $1F, $17, $28, $18
  59++F24A 1F 27 18 2C                          DB $1F, $27, $18, $2C
  60++F24E 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  61++F252 1F 38 1C 30                          DB $1F, $38, $1C, $30
  62++F256 1F 39 30 20                          DB $1F, $39, $30, $20
  63++F25A 1F 49 20 34                          DB $1F, $49, $20, $34
  64++F25E 1F 4A 34 24                          DB $1F, $4A, $34, $24
  65++F262 1F 5A 24 38                          DB $1F, $5A, $24, $38
  66++F266 1F 56 38 14                          DB $1F, $56, $38, $14
  67++F26A 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  68++F26E 1F 8B 40 44                          DB $1F, $8B, $40, $44
  69++F272 1F 9B 44 48                          DB $1F, $9B, $44, $48
  70++F276 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  71++F27A 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  72++F27E 1F 15 00 14                          DB $1F, $15, $00, $14
  73++F282 1F 12 04 18                          DB $1F, $12, $04, $18
  74++F286 1F 23 08 1C                          DB $1F, $23, $08, $1C
  75++F28A 1F 34 0C 20                          DB $1F, $34, $0C, $20
  76++F28E 1F 45 10 24                          DB $1F, $45, $10, $24
  77++F292 1F 67 28 3C                          DB $1F, $67, $28, $3C
  78++F296 1F 78 2C 40                          DB $1F, $78, $2C, $40
  79++F29A 1F 89 30 44                          DB $1F, $89, $30, $44
  80++F29E 1F 9A 34 48                          DB $1F, $9A, $34, $48
  81++F2A2 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  82++F2A6 1E 00 50 54                          DB $1E, $00, $50, $54
  83++F2AA 14 00 54 5C                          DB $14, $00, $54, $5C
  84++F2AE 17 00 5C 58                          DB $17, $00, $5C, $58
  85++F2B2 14 00 58 50                          DB $14, $00, $58, $50
  86++F2B6              DodoEdgesSize:          equ $ - DodoEdges
  87++F2B6              DodoEdgesCnt:           equ DodoEdgesSize/4
  88++F2B6 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  89++F2BA 1F 67 8E 58                          DB $1F, $67, $8E, $58
  90++F2BE 5F A9 37 59                          DB $5F, $A9, $37, $59
  91++F2C2 5F 00 B0 58                          DB $5F, $00, $B0, $58
  92++F2C6 DF A9 37 59                          DB $DF, $A9, $37, $59
  93++F2CA 9F 67 8E 58                          DB $9F, $67, $8E, $58
  94++F2CE 3F 00 B0 58                          DB $3F, $00, $B0, $58
  95++F2D2 3F A9 37 59                          DB $3F, $A9, $37, $59
  96++F2D6 7F 67 8E 58                          DB $7F, $67, $8E, $58
  97++F2DA FF 67 8E 58                          DB $FF, $67, $8E, $58
  98++F2DE BF A9 37 59                          DB $BF, $A9, $37, $59
  99++F2E2 3F 00 00 C4                          DB $3F, $00, $00, $C4
 100++F2E6              DodoNormalsSize:        equ $ - DodoNormals
 101++F2E6              DodoLen:                equ $ - Dodo
 102++F2E6
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 855  F2E6                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 856  F2E6              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 857  F2E6                  SLOT    DispMarketAddr
 858  F2E6                  PAGE    BankDispMarket
 859  F2E6                  ORG     DispMarketAddr
 860  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 E1 91  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 AD 92  						DW $0220,name_expanded
   4+ C018 80 0B 2F 8C  						DW $0B80,WordUnit
   5+ C01C B0 0B 78 8E  						DW $0BB0,WordQuantity
   6+ C020 08 13 56 8E  						DW $1308,WordProduct
   7+ C024 60 13 5E 8E  						DW $1360,WordUoM
   8+ C028 80 13 62 8E  						DW $1380,WordPrice
   9+ C02C B0 13 86 8E  						DW $13B0,WordStock
  10+ C030 E0 13 82 8E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C1F4 4E                                   ld			c,(hl)		; Get Row into b
   5++C1F5 23                                   inc			hl
   6++C1F6 46                                   ld			b,(hl)		; Get Col into b
   7++C1F7 23                                   inc			hl
   8++C1F8 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C1F9 23                                   inc			hl
  10++C1FA 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C1FB 23                                   inc			hl
  12++C1FC E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C1FD EB                                   ex			de,hl		; now hl = address of text data
  14++C1FE 1E FF                                ld			e,txt_status_colour
  15++C200 C5                                   push		bc
  16++C201 D1                                   pop			de
  17++C202                                      MMUSelectLayer1
  17++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C206 CD C8 E0                             call		l1_print_at
  19++C209 E1                                   pop			hl
  20++C20A C1                                   pop			bc
  21++C20B 10 E6                                djnz		.BoilerTextLoop
  22++C20D C9                                   ret
  23++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 02 88     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 00 88                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 06 88                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 07 88                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 2D 90                             ld		hl,WordIdx
 256+ C2A5 CD 88 8B                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 2D 90                             ld		hl,WordIdx
 264+ C2BF CD 88 8B                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 0A E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD 0E E2    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 00 82                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F8 E3                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 83 E4                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 83 E4                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 83 E4                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 83 E4                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 83 E4                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 83 E4                             call	l2_draw_horz_line
 323+ C38A 3A 76 82     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 28 92                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 861  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 862  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 863  C3D3                  SLOT    ShipModelsAddr
 864  C3D3                  PAGE    BankShipModels2
 865  C3D3              	ORG     ShipModelsAddr, BankShipModels2
 866  E000
 867  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 868  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 868  E00F 06 00       >                        ld      b,0
 868  E011 4F          >                        ld      c,a                                 ; c= original ship id
 868  E012 CB 3F       >.ShiftLoop:             srl     a
 868  E014 CB 3F       >                        srl     a
 868  E016 CB 3F       >                        srl     a
 868  E018 CB 3F       >                        srl     a                                   ; divide by 16
 868  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 868  E01B 79          >                        ld      a,c
 868  E01C 50          >                        ld      d,b
 868  E01D 1E 10       >                        ld      e,16
 868  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 868  E021 93          >                        sub     e                                   ; a= actual model id now
 868  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 868  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 868  E024 7A          >                        ld      a,d                                 ; a = bank number
 868  E025             >;.. Now b = bank and a = adjusted ship nbr
 868  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 868  E028 ED 31       >                        add     hl,a
 868  E02A ED 31       >                        add     hl,a
 868  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 868  E02D             >                        ClearCarryFlag
 868  E02D B7          >                        or a
 868  E02E C9          >                        ret
 869  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 869  E02F 2A A7 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 869  E032 11 AD C3    >                        ld          de,UBnkHullVerticies
 869  E035 06 00       >                        ld          b,0
 869  E037 3A 9B C3    >                        ld			a,(VertexCtX6Addr)
 869  E03A 4F          >                        ld          c,a
 869  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 869  E03C CD 29 7D    >                        call        memcopy_dma
 869  E03F C9          >                        ret
 870  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 870  E040 2A 95 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 870  E043 11 9D C4    >                        ld          de,UBnkHullEdges
 870  E046 06 00       >                        ld          b,0
 870  E048 3A 97 C3    >                        ld			a,(LineX4Addr)
 870  E04B 4F          >                        ld          c,a
 870  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 870  E04D CD 29 7D    >                        call        memcopy_dma
 870  E050 C9          >                        ret
 871  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 871  E051 2A A3 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 871  E054 11 65 C5    >                        ld          de,UBnkHullNormals
 871  E057 06 00       >                        ld          b,0
 871  E059 3A 9F C3    >                        ld          a,(FaceCtX4Addr)
 871  E05C 4F          >                        ld          c,a
 871  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 871  E05E CD 29 7D    >                        call        memcopy_dma
 871  E061 C9          >                        ret
 872  E062              ShipBankTable2:         MShipBankTable
 872  E062 3B 00       >                        DW      BankShipModels1
 872  E064 43 00       >                        DW      BankShipModels2
 872  E066 44 00       >                        DW      BankShipModels3
 872  E068 45 00       >                        DW      BankShipModels4
 873  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 873  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 873  E06D 36 43       >                        ld          (hl),BankShipModels2
 873  E06F F5          >                        push        af
 873  E070 FD 7D       >                        ld          a,iyl
 873  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 873  E075 F1          >                        pop         af
 873  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 873  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 873  E07C ED 31       >                        add         hl,a
 873  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 873  E080 4E          >                        ld          c,(hl)
 873  E081 23          >                        inc         hl
 873  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 873  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 873  E086 ED 31       >                        add         hl,a
 873  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 873  E08A 7E          >                        ld          a,(hl)
 873  E08B 23          >                        inc         hl
 873  E08C 66          >                        ld          h,(hl)
 873  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 873  E08E 11 92 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 873  E091 01 1B 00    >                        ld          bc,ShipDataLength
 873  E094 ED B0       >                        ldir
 873  E096 CD 2F E0    >                        call        CopyVertsToUniv
 873  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 873  E09C CD 51 E0    >                        call        CopyNormsToUniv
 873  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 873  E0A2 3E 20       >                        ld          a," "
 873  E0A4 06 10       >                        ld          b,16
 873  E0A6 77          >.fillLoop:              ld          (hl),a
 873  E0A7 23          >                        inc         hl
 873  E0A8 10 FC       >                        djnz        .fillLoop
 873  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 873  E0AD CD 14 92    >                        call        ShipIndexToAddress
 873  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 873  E0B3 06 10       >                        ld          b,16
 873  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 873  E0B6 FE 00       >                        cp          0
 873  E0B8 28 05       >                        jr          z,.CopyDone
 873  E0BA 12          >                        ld          (de),a
 873  E0BB 23          >                        inc         hl
 873  E0BC 13          >                        inc         de
 873  E0BD 10 F6       >                        djnz        .CopyLoop
 873  E0BF C9          >.CopyDone:              ret
 874  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 874  E0C0 3E 0D       >                        ld          a,13
 874  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
 874  E0C5 C9          >                        ret
 875  E0C6
 876  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 47 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA A6 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC CB E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 9A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 89 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 86 E6                                 DW Krait                                   ;22  $16
   8+ E0D4 77 E7                                 DW Logo                                    ;23  $17
   9+ E0D6 3A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 73 EA                                 DW Missile                                 ;25  $19
  11+ E0DA 7C EB                                 DW Monitor                                 ;26  $1A
  12+ E0DC 89 EC                                 DW Moray                                   ;27  $1B
  13+ E0DE 6C ED                                 DW Ophidian                                ;28  $1C
  14+ E0E0 AB EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 F0 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 ED EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 85 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 66 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA C5 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC EA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE B9 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 A8 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 A5 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 96 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 59 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 92 EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 9B EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC A8 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE 8B ED                                 DW OphidianVertices                        ;28  $1C
  30+ E100 CA EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 0F EF                                 DW PythonVertices                          ;30  $1E
  32+ E104 0C F0                                 DW Python_PVertices                        ;31  $1F
  33+ E106 BB E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 7E E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 37 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 32 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E 01 E5                                 DW GhavialEdges                            ;20  $14
  38+ E110 02 E6                                 DW IguanaEdges                             ;21  $15
  39+ E112 0B E7                                 DW KraitEdges                              ;22  $16
  40+ E114 92 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 EF E9                                 DW MambaEdges                              ;24  $18
  42+ E118 F8 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A 01 EC                                 DW MonitorEdges                            ;26  $1A
  44+ E11C FC EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E 03 EE                                 DW OphidianEdges                           ;28  $1C
  46+ E120 DC EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 51 EF                                 DW PythonEdges                             ;30  $1E
  48+ E124 4E F0                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0F E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 96 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A A3 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 76 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 59 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 5E E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 5F E7                                 DW KraitNormals                            ;22  $16
  56+ E134 26 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 5F EA                                 DW MambaNormals                            ;24  $18
  58+ E138 58 EB                                 DW MissileNormals                          ;25  $19
  59+ E13A 5D EC                                 DW MonitorNormals                          ;26  $1A
  60+ E13C 48 ED                                 DW MorayNormals                            ;27  $1B
  61+ E13E 7B EE                                 DW OphidianNormals                         ;28  $1C
  62+ E140 EC EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 B9 EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 B6 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 E1 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5F 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 25 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CF 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EF 00                                 DW GhavialLen                              ;20  $14
  70+ E150 FD 00                                 DW IguanaLen                               ;21  $15
  71+ E152 F1 00                                 DW KraitLen                                ;22  $16
  72+ E154 C3 01                                 DW LogoLen                                 ;23  $17
  73+ E156 39 01                                 DW MambaLen                                ;24  $18
  74+ E158 09 01                                 DW MissileLen                              ;25  $19
  75+ E15A 0D 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C E3 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3F 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 45 00                                 DW PlateLen                                ;29  $1D
  79+ E162 FD 00                                 DW PythonLen                               ;30  $1E
  80+ E164 FD 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 BB E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0F E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  27++E189 6B 05
  28++E18B D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  28++E18F 67 01
  29++E191 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  29++E195 78 12
  30++E197 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  30++E19B CD 23
  31++E19D 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  31++E1A1 CD 89
  32++E1A3 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  32++E1A7 9A 34
  33++E1A9 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  33++E1AD AB 45
  34++E1AF 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  34++E1B3 FF FF
  35++E1B5 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  35++E1B9 FF FF
  36++E1BB              DragonVertSize:         equ $ - DragonVertices
  37++E1BB 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  38++E1BF 1F 12 08 1C                          DB $1F, $12, $08, $1C
  39++E1C3 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  40++E1C7 1F 34 14 1C                          DB $1F, $34, $14, $1C
  41++E1CB 1F 45 18 1C                          DB $1F, $45, $18, $1C
  42++E1CF 1F 50 00 1C                          DB $1F, $50, $00, $1C
  43++E1D3 1F 67 04 20                          DB $1F, $67, $04, $20
  44++E1D7 1F 78 08 20                          DB $1F, $78, $08, $20
  45++E1DB 1F 89 10 20                          DB $1F, $89, $10, $20
  46++E1DF 1F 9A 14 20                          DB $1F, $9A, $14, $20
  47++E1E3 1F AB 18 20                          DB $1F, $AB, $18, $20
  48++E1E7 1F B6 00 20                          DB $1F, $B6, $00, $20
  49++E1EB 1F 06 00 04                          DB $1F, $06, $00, $04
  50++E1EF 1F 17 04 08                          DB $1F, $17, $04, $08
  51++E1F3 1F 4A 14 18                          DB $1F, $4A, $14, $18
  52++E1F7 1F 5B 00 18                          DB $1F, $5B, $00, $18
  53++E1FB 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  54++E1FF 1F 8C 08 10                          DB $1F, $8C, $08, $10
  55++E203 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  56++E207 1F 9D 10 14                          DB $1F, $9D, $10, $14
  57++E20B 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  58++E20F              DragonEdgesSize:        equ $ - DragonEdges
  59++E20F              DragonEdgesCnt:         equ DragonEdgesSize/4
  60++E20F 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  61++E213 1F 21 5A 00                          DB $1F, $21, $5A, $00
  62++E217 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  63++E21B BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  64++E21F 9F 21 5A 00                          DB $9F, $21, $5A, $00
  65++E223 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  66++E227 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  67++E22B 5F 21 5A 00                          DB $5F, $21, $5A, $00
  68++E22F 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  69++E233 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  70++E237 DF 21 5A 00                          DB $DF, $21, $5A, $00
  71++E23B DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  72++E23F 3F 30 00 52                          DB $3F, $30, $00, $52
  73++E243 BF 30 00 52                          DB $BF, $30, $00, $52
  74++E247              DragonNormalsSize:      equ $ - DragonNormals
  75++E247              DragonLen:              equ $ - Dragon
  76++E247
# file closed: ./Data/ships/Dragon.asm
  83+ E247                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E247 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E248 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E24A 7E E2                                DW Escape_PodEdges              ; Edge Data
   4++E24C 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E24D 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24E 16                                   DB $16                          ; Explosion Count
   7++E24F 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E250 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E251 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E252 00 00                                DW $0000                        ; Bounty LoHi
  11++E254 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E255 08                                   DB $08                          ; Range when it turns to a dot
  13++E256 11                                   DB $11                          ; Energy Max
  14++E257 08                                   DB $08                          ; Speed Max
  15++E258 96 E2                                DW Escape_PodNormals            ; Normals
  16++E25A 04                                   DB $04                          ; Q scaling
  17++E25B 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E25C 66 E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25E 00                                   DB 0                            ; Ship Type
  20++E25F 00                                   DB 0                            ; NewB Tactics
  21++E260 00                                   DB 0                            ; AI Flags
  22++E261 FF                                   DB $FF                          ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  27++E26A 12 33
  28++E26C 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  28++E270 02 33
  29++E272 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  29++E276 01 33
  30++E278 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  30++E27C 01 22
  31++E27E              Escape_PodVertSize:     equ $ - Escape_PodVertices
  32++E27E 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  33++E282 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E286 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E28A 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E28E 1F 13 00 08                          DB $1F, $13, $00, $08
  37++E292 1F 02 0C 04                          DB $1F, $02, $0C, $04
  38++E296              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  39++E296              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  40++E296 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  41++E29A 1F 27 67 1E                          DB $1F, $27, $67, $1E
  42++E29E 5F 27 67 1E                          DB $5F, $27, $67, $1E
  43++E2A2 9F 70 00 00                          DB $9F, $70, $00, $00
  44++E2A6              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  45++E2A6              Escape_PodLen:          equ $ - Escape_Pod
  46++E2A6
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E2A6                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E2A6 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E2A7 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A9 37 E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2AB 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2AC 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2AD 1A                                   DB $1A                          ; Explosion Count
   7++E2AE 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2AF 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2B0 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2B1 00 00                                DW $0000                        ; Bounty LoHi
  11++E2B3 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E2B5 A0                                   DB $A0                          ; Energy Max
  14++E2B6 1E                                   DB $1E                          ; Speed Max
  15++E2B7 A3 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B9 01                                   DB $01                          ; Q scaling
  17++E2BA 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2BB C5 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2BE 00                                   DB 0                            ; NewB Tactics
  21++E2BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2C0 FF                                   DB $FF                          ; chance of ECM module
  23++E2C1 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2C2 00 00                                DW $0000                            ; no solid data
  25++E2C4 00                                   DB $00                              ; no solid data
  26++E2C5
  27++E2C5 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  27++E2C9 01 59
  28++E2CB 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  28++E2CF 12 99
  29++E2D1 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  29++E2D5 23 99
  30++E2D7 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  30++E2DB 34 99
  31++E2DD 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  31++E2E1 45 99
  32++E2E3 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  32++E2E7 01 26
  33++E2E9 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  33++E2ED 23 67
  34++E2EF 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  34++E2F3 34 78
  35++E2F5 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  35++E2F9 04 58
  36++E2FB 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  36++E2FF 06 78
  37++E301 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  37++E305 00 00
  38++E307 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  38++E30B 00 00
  39++E30D 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  39++E311 00 00
  40++E313 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  40++E317 00 00
  41++E319 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  41++E31D 00 00
  42++E31F 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  42++E323 00 00
  43++E325 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  43++E329 99 99
  44++E32B 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  44++E32F 99 99
  45++E331 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  45++E335 99 99
  46++E337              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  47++E337 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  48++E33B 1F 29 04 08                          DB $1F, $29, $04, $08
  49++E33F 1F 39 08 0C                          DB $1F, $39, $08, $0C
  50++E343 1F 49 0C 10                          DB $1F, $49, $0C, $10
  51++E347 1F 59 00 10                          DB $1F, $59, $00, $10
  52++E34B 1C 01 00 14                          DB $1C, $01, $00, $14
  53++E34F 1C 26 14 18                          DB $1C, $26, $14, $18
  54++E353 1C 37 18 1C                          DB $1C, $37, $18, $1C
  55++E357 1C 48 1C 20                          DB $1C, $48, $1C, $20
  56++E35B 1C 05 00 20                          DB $1C, $05, $00, $20
  57++E35F 0F 06 14 24                          DB $0F, $06, $14, $24
  58++E363 0B 67 18 24                          DB $0B, $67, $18, $24
  59++E367 0B 78 1C 24                          DB $0B, $78, $1C, $24
  60++E36B 0F 08 20 24                          DB $0F, $08, $20, $24
  61++E36F 0E 12 04 14                          DB $0E, $12, $04, $14
  62++E373 0E 23 08 18                          DB $0E, $23, $08, $18
  63++E377 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  64++E37B 0E 45 10 20                          DB $0E, $45, $10, $20
  65++E37F 08 00 28 2C                          DB $08, $00, $28, $2C
  66++E383 09 00 2C 30                          DB $09, $00, $2C, $30
  67++E387 0B 00 28 30                          DB $0B, $00, $28, $30
  68++E38B 08 00 34 38                          DB $08, $00, $34, $38
  69++E38F 09 00 38 3C                          DB $09, $00, $38, $3C
  70++E393 0B 00 34 3C                          DB $0B, $00, $34, $3C
  71++E397 0C 99 40 44                          DB $0C, $99, $40, $44
  72++E39B 0C 99 40 48                          DB $0C, $99, $40, $48
  73++E39F 08 99 44 48                          DB $08, $99, $44, $48
  74++E3A3              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  75++E3A3              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  76++E3A3 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  77++E3A7 9F 44 00 18                          DB $9F, $44, $00, $18
  78++E3AB BF 3F 00 25                          DB $BF, $3F, $00, $25
  79++E3AF 3F 00 00 68                          DB $3F, $00, $00, $68
  80++E3B3 3F 3F 00 25                          DB $3F, $3F, $00, $25
  81++E3B7 1F 44 00 18                          DB $1F, $44, $00, $18
  82++E3BB BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  83++E3BF 3C 00 2D 16                          DB $3C, $00, $2D, $16
  84++E3C3 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  85++E3C7 5F 00 1C 00                          DB $5F, $00, $1C, $00
  86++E3CB              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  87++E3CB              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  88++E3CB
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3CB                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3CB 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3CC 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3CE 32 E4                                DW GeckoEdges                  ; Edge Data
   4++E3D0 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3D2 1A                                   DB $1A                         ; Explosion Count
   7++E3D3 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3D4 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3D5 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3D6 37 00                                DW $0037                       ; Bounty LoHi
  11++E3D8 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3D9 12                                   DB $12                         ; Range when it turns to a dot
  13++E3DA 46                                   DB $46                         ; Energy Max
  14++E3DB 1E                                   DB $1E                         ; Speed Max
  15++E3DC 76 E4                                DW GeckoNormals                ; Normals
  16++E3DE 03                                   DB $03                         ; Q scaling
  17++E3DF 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3E0 EA E3                                DW GeckoVertices               ; Verticles Address
  19++E3E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3E3 00                                   DB 0                           ; NewB Tactics
  21++E3E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E3E5 60                                   DB $60                         ; chance of ECM module
  23++E3E6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3E7 00 00                                DW $0000                            ; no solid data
  25++E3E9 00                                   DB $00                              ; no solid data
  26++E3EA
  27++E3EA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  27++E3EE 03 45
  28++E3F0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  28++E3F4 01 23
  29++E3F6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  29++E3FA 05 67
  30++E3FC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  30++E400 01 78
  31++E402 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  31++E406 45 66
  32++E408 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  32++E40C 12 88
  33++E40E 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  33++E412 34 67
  34++E414 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  34++E418 23 78
  35++E41A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  35++E41E 33 33
  36++E420 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  36++E424 33 33
  37++E426 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  37++E42A 33 33
  38++E42C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  38++E430 33 33
  39++E432              GeckoVertSize:          equ $ - GeckoVertices
  40++E432 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  41++E436 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E43A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  43++E43E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  44++E442 1F 56 08 10                          DB $1F, $56, $08, $10
  45++E446 1F 45 10 00                          DB $1F, $45, $10, $00
  46++E44A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  47++E44E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  48++E452 1F 46 18 10                          DB $1F, $46, $18, $10
  49++E456 1D 05 00 08                          DB $1D, $05, $00, $08
  50++E45A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  51++E45E 1D 34 00 18                          DB $1D, $34, $00, $18
  52++E462 1E 23 04 1C                          DB $1E, $23, $04, $1C
  53++E466 14 67 08 18                          DB $14, $67, $08, $18
  54++E46A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  55++E46E 10 33 20 28                          DB $10, $33, $20, $28
  56++E472 11 33 24 2C                          DB $11, $33, $24, $2C
  57++E476              GeckoEdgesSize:             equ $ - GeckoEdges
  58++E476              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  59++E476 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  60++E47A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  61++E47E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  62++E482 5F 00 54 0C                          DB $5F, $00, $54, $0C
  63++E486 DF 19 6C 13                          DB $DF, $19, $6C, $13
  64++E48A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  65++E48E BF 58 10 D6                          DB $BF, $58, $10, $D6
  66++E492 3F 00 00 BB                          DB $3F, $00, $00, $BB
  67++E496 3F 58 10 D6                          DB $3F, $58, $10, $D6
  68++E49A              GeckoNormalsSize:       equ $ - GeckoNormals
  69++E49A              GeckoLen:               equ $ - Gecko
  70++E49A
# file closed: ./Data/ships/Gecko.asm
  86+ E49A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E49A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E49B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E49D 01 E5                                DW GhavialEdges             ; Edge Data
   4++E49F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E4A0 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A1 22                                   DB $22                      ; Explosion Count
   7++E4A2 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E4A3 48                                   DB GhavialVertSize          ; Vertex Count
   9++E4A4 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E4A5 64 00                                DW $0064                    ; Bounty LoHi
  11++E4A7 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E4A8 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E4A9 72                                   DB $72                      ; Energy Max
  14++E4AA 10                                   DB $10                      ; Speed Max
  15++E4AB 59 E5                                DW GhavialNormals           ; Normals
  16++E4AD 00                                   DB $00                      ; Q scaling
  17++E4AE 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E4AF B9 E4                                DW GhavialVertices          ; Verticles Address
  19++E4B1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B2 00                                   DB 0                        ; NewB Tactics
  21++E4B3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4B4 60                                   DB $60                      ; chance of ECM module
  23++E4B5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4B6 00 00                                DW $0000                            ; no solid data
  25++E4B8 00                                   DB $00                              ; no solid data
  26++E4B9
  27++E4B9 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  27++E4BD 67 01
  28++E4BF 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  28++E4C3 6B 05
  29++E4C5 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  29++E4C9 23 01
  30++E4CB 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  30++E4CF 45 03
  31++E4D1 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  31++E4D5 78 12
  32++E4D7 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  32++E4DB 89 23
  33++E4DD 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  33++E4E1 AB 45
  34++E4E3 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  34++E4E7 9A 34
  35++E4E9 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  35++E4ED FF FF
  36++E4EF 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  36++E4F3 00 00
  37++E4F5 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  37++E4F9 00 00
  38++E4FB 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  38++E4FF 00 00
  39++E501
  40++E501              GhavialVertSize: equ $ - GhavialVertices
  41++E501
  42++E501
  43++E501 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  44++E505 1F 12 10 08                  DB $1F, $12, $10, $08
  45++E509 1F 23 14 08                  DB $1F, $23, $14, $08
  46++E50D 1F 30 0C 08                  DB $1F, $30, $0C, $08
  47++E511 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  48++E515 1F 45 18 0C                  DB $1F, $45, $18, $0C
  49++E519 1F 50 0C 04                  DB $1F, $50, $0C, $04
  50++E51D 1F 67 00 20                  DB $1F, $67, $00, $20
  51++E521 1F 78 10 20                  DB $1F, $78, $10, $20
  52++E525 1F 89 14 20                  DB $1F, $89, $14, $20
  53++E529 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  54++E52D 1F AB 18 20                  DB $1F, $AB, $18, $20
  55++E531 1F B6 04 20                  DB $1F, $B6, $04, $20
  56++E535 1F 06 04 00                  DB $1F, $06, $04, $00
  57++E539 1F 17 00 10                  DB $1F, $17, $00, $10
  58++E53D 1F 28 10 14                  DB $1F, $28, $10, $14
  59++E541 1F 39 14 1C                  DB $1F, $39, $14, $1C
  60++E545 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  61++E549 1F 5B 18 04                  DB $1F, $5B, $18, $04
  62++E54D 09 00 24 28                  DB $09, $00, $24, $28
  63++E551 09 00 28 2C                  DB $09, $00, $28, $2C
  64++E555 09 00 2C 24                  DB $09, $00, $2C, $24
  65++E559
  66++E559              GhavialEdgesSize: equ $ - GhavialEdges
  67++E559
  68++E559
  69++E559              GhavialEdgesCnt: equ GhavialEdgesSize/4
  70++E559
  71++E559
  72++E559 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  73++E55D 1F 33 24 0C                  DB $1F, $33, $24, $0C
  74++E561 3F 33 1C 19                  DB $3F, $33, $1C, $19
  75++E565 3F 00 30 2A                  DB $3F, $00, $30, $2A
  76++E569 BF 33 1C 19                  DB $BF, $33, $1C, $19
  77++E56D 9F 33 24 0C                  DB $9F, $33, $24, $0C
  78++E571 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  79++E575 5F 1C 38 07                  DB $5F, $1C, $38, $07
  80++E579 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  81++E57D 7F 00 33 26                  DB $7F, $00, $33, $26
  82++E581 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  83++E585 DF 1C 38 07                  DB $DF, $1C, $38, $07
  84++E589
  85++E589              GhavialNormalsSize: equ $ - GhavialNormals
  86++E589              GhavialLen: equ $ - Ghavial
  87++E589
# file closed: ./Data/ships/Ghavial.asm
  87+ E589                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E589 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E58A AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E58C 02 E6                                DW IguanaEdges              ; Edge Data
   4++E58E 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E58F 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E590 1A                                   DB $1A                      ; Explosion Count
   7++E591 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E592 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E593 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E594 96 00                                DW $0096                    ; Bounty LoHi
  11++E596 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E597 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E598 5A                                   DB $5A                      ; Energy Max
  14++E599 21                                   DB $21                      ; Speed Max
  15++E59A 5E E6                                DW IguanaNormals            ; Normals
  16++E59C 01                                   DB $01                      ; Q scaling
  17++E59D 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E59E A8 E5                                DW IguanaVertices           ; Verticles Address
  19++E5A0 00                                   DB ShipTypeNormal           ; Ship Type
  20++E5A1 00                                   DB 0                        ; NewB Tactics
  21++E5A2 80                                   DB ShipCanAnger             ; AI Flags
  22++E5A3 80                                   DB $80                      ; chance of ECM module
  23++E5A4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5A5 00 00                                DW $0000                            ; no solid data
  25++E5A7 00                                   DB $00                              ; no solid data
  26++E5A8
  27++E5A8
  28++E5A8 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  28++E5AC 23 01
  29++E5AE 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  29++E5B2 46 02
  30++E5B4 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  30++E5B8 45 01
  31++E5BA 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  31++E5BE 57 13
  32++E5C0 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  32++E5C4 67 23
  33++E5C6 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  33++E5CA 89 46
  34++E5CC 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  34++E5D0 88 45
  35++E5D2 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  35++E5D6 89 57
  36++E5D8 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  36++E5DC 99 67
  37++E5DE 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  37++E5E2 11 00
  38++E5E4 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  38++E5E8 33 22
  39++E5EA 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  39++E5EE 99 88
  40++E5F0 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  40++E5F4 88 88
  41++E5F6 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  41++E5FA 99 88
  42++E5FC 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  42++E600 99 99
  43++E602
  44++E602              IguanaVertSize: equ $ - IguanaVertices
  45++E602
  46++E602
  47++E602
  48++E602 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  49++E606 1F 01 00 08                  DB $1F, $01, $00, $08
  50++E60A 1F 13 00 0C                  DB $1F, $13, $00, $0C
  51++E60E 1F 23 00 10                  DB $1F, $23, $00, $10
  52++E612 1F 46 04 14                  DB $1F, $46, $04, $14
  53++E616 1F 45 08 18                  DB $1F, $45, $08, $18
  54++E61A 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  55++E61E 1F 67 10 20                  DB $1F, $67, $10, $20
  56++E622 1F 48 14 18                  DB $1F, $48, $14, $18
  57++E626 1F 58 18 1C                  DB $1F, $58, $18, $1C
  58++E62A 1F 69 14 20                  DB $1F, $69, $14, $20
  59++E62E 1F 79 1C 20                  DB $1F, $79, $1C, $20
  60++E632 1F 04 04 08                  DB $1F, $04, $04, $08
  61++E636 1F 15 08 0C                  DB $1F, $15, $08, $0C
  62++E63A 1F 26 04 10                  DB $1F, $26, $04, $10
  63++E63E 1F 37 0C 10                  DB $1F, $37, $0C, $10
  64++E642 1F 89 14 1C                  DB $1F, $89, $14, $1C
  65++E646 1E 01 08 24                  DB $1E, $01, $08, $24
  66++E64A 1E 23 10 28                  DB $1E, $23, $10, $28
  67++E64E 0A 88 2C 30                  DB $0A, $88, $2C, $30
  68++E652 0A 88 34 30                  DB $0A, $88, $34, $30
  69++E656 0A 99 2C 38                  DB $0A, $99, $2C, $38
  70++E65A 0A 99 34 38                  DB $0A, $99, $34, $38
  71++E65E
  72++E65E              IguanaEdgesSize: equ $ - IguanaEdges
  73++E65E
  74++E65E
  75++E65E              IguanaEdgesCnt: equ IguanaEdgesSize/4
  76++E65E
  77++E65E
  78++E65E 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  79++E662 DF 33 4D 19  	DB $DF, $33, $4D, $19
  80++E666 1F 33 4D 19  	DB $1F, $33, $4D, $19
  81++E66A 5F 33 4D 19  	DB $5F, $33, $4D, $19
  82++E66E 9F 2A 55 00  	DB $9F, $2A, $55, $00
  83++E672 DF 2A 55 00  	DB $DF, $2A, $55, $00
  84++E676 1F 2A 55 00  	DB $1F, $2A, $55, $00
  85++E67A 5F 2A 55 00  	DB $5F, $2A, $55, $00
  86++E67E BF 17 00 5D  	DB $BF, $17, $00, $5D
  87++E682 3F 17 00 5D  	DB $3F, $17, $00, $5D
  88++E686
  89++E686
  90++E686              IguanaNormalsSize: equ $ - IguanaNormals
  91++E686              IguanaLen: equ $ - Iguana
  92++E686
# file closed: ./Data/ships/Iguana.asm
  88+ E686                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E686
   2++E686 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E687 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E689 0B E7                                DW KraitEdges                  ; Edge Data
   5++E68B 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E68C 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E68D 12                                   DB $12                         ; Explosion Count
   8++E68E 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E68F 66                                   DB KraitVertSize               ; Vertex Count
  10++E690 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E691 64 00                                DW $0064                       ; Bounty LoHi
  12++E693 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E694 14                                   DB $14                         ; Range when it turns to a dot
  14++E695 50                                   DB $50                         ; Energy Max
  15++E696 1E                                   DB $1E                         ; Speed Max
  16++E697 5F E7                                DW KraitNormals                ; Normals
  17++E699 02                                   DB $02                         ; Q scaling
  18++E69A 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E69B A5 E6                                DW KraitVertices               ; Verticles Address
  20++E69D 00                                   DB ShipTypeNormal              ; Ship Type
  21++E69E 00                                   DB 0                           ; NewB Tactics
  22++E69F 80                                   DB ShipCanAnger                ; AI Flags
  23++E6A0 D0                                   DB $D0                         ; chance of ECM module
  24++E6A1 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++E6A2 00 00                                DW $0000                            ; no solid data
  26++E6A4 00                                   DB $00                              ; no solid data
  27++E6A5
  28++E6A5 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  28++E6A9 01 23
  29++E6AB 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  29++E6AF 03 45
  30++E6B1 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  30++E6B5 12 45
  31++E6B7 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  31++E6BB 01 44
  32++E6BD 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  32++E6C1 23 55
  33++E6C3 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  33++E6C7 01 11
  34++E6C9 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  34++E6CD 23 33
  35++E6CF 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  35++E6D3 00 33
  36++E6D5 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  36++E6D9 00 33
  37++E6DB 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  37++E6DF 33 33
  38++E6E1 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  38++E6E5 00 00
  39++E6E7 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  39++E6EB 44 44
  40++E6ED 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  40++E6F1 44 44
  41++E6F3 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  41++E6F7 44 44
  42++E6F9 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  42++E6FD 55 55
  43++E6FF 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  43++E703 55 55
  44++E705 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  44++E709 55 55
  45++E70B              KraitVertSize           equ $  - KraitVertices
  46++E70B 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  46++E70F 1F 12 00 08
  47++E713 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  47++E717 1F 23 00 10
  48++E71B 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  48++E71F 1F 25 10 08
  49++E723 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  49++E727 1F 04 0C 04
  50++E72B 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  50++E72F 1C 23 10 18
  51++E733 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  51++E737 09 00 1C 28
  52++E73B 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  52++E73F 09 33 1C 24
  53++E743 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  53++E747 08 44 2C 34
  54++E74B 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  54++E74F 07 44 30 2C
  55++E753 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  55++E757 08 55 3C 40
  56++E75B 08 55 40 38                          DB $08, $55, $40, $38
  57++E75F              KraitEdgesSize          equ $  - KraitEdges
  58++E75F              KraitEdgesCnt           equ KraitEdgesSize/4
  59++E75F 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  60++E763 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  60++E767 DF 07 30 06
  61++E76B 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  61++E76F 3F 4D 00 9A
  62++E773 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  63++E777              KraitNormalsSize        equ $  - KraitNormals
  64++E777              KraitLen                equ $  - Krait
  65++E777
# file closed: ./Data/ships/Krait.asm
  89+ E777                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E777 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E778 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E77A 92 E8                                DW LogoEdges              ; Edge Data
   4++E77C 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E77D 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E77E 36                                   DB $36                    ; Explosion Count
   7++E77F 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E780 FC                                   DB LogoVertSize           ; Vertex Count
   9++E781 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E782 00 00                                DW $0000                  ; Bounty LoHi
  11++E784 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E785 63                                   DB $63                    ; Range when it turns to a dot
  13++E786 FC                                   DB $FC                    ; Energy Max
  14++E787 24                                   DB $24                    ; Speed Max
  15++E788 26 E9                                DW LogoNormals            ; Normals
  16++E78A 01                                   DB $01                    ; Q scaling
  17++E78B 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E78C 96 E7                                DW LogoVertices           ; Verticles Address
  19++E78E FD                                   DB ShipTypeText           ; Ship Type
  20++E78F 00                                   DB 0                      ; NewB Tactics
  21++E790 00                                   DB 0                      ; AI Flags
  22++E791 FF                                   DB $FF                    ; chance of ECM module
  23++E792 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E793 00 00                                DW $0000                            ; no solid data
  25++E795 00                                   DB $00                              ; no solid data
  26++E796
  27++E796
  28++E796 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  28++E79A 00 00
  29++E79C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  29++E7A0 00 00
  30++E7A2 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  30++E7A6 00 00
  31++E7A8 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  31++E7AC 00 00
  32++E7AE 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  32++E7B2 00 00
  33++E7B4 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  33++E7B8 00 00
  34++E7BA 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  34++E7BE 00 00
  35++E7C0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  35++E7C4 00 00
  36++E7C6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  36++E7CA 00 00
  37++E7CC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  37++E7D0 00 00
  38++E7D2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  38++E7D6 00 00
  39++E7D8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  39++E7DC 00 00
  40++E7DE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  40++E7E2 02 33
  41++E7E4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  41++E7E8 02 44
  42++E7EA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  42++E7EE 01 33
  43++E7F0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  43++E7F4 02 33
  44++E7F6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  44++E7FA 02 44
  45++E7FC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  45++E800 01 44
  46++E802 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  46++E806 00 00
  47++E808 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  47++E80C 00 00
  48++E80E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  48++E812 00 00
  49++E814 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  49++E818 00 00
  50++E81A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  50++E81E 00 00
  51++E820 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  51++E824 00 00
  52++E826 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  52++E82A 00 00
  53++E82C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  53++E830 00 00
  54++E832 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  54++E836 00 00
  55++E838 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  55++E83C 00 00
  56++E83E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  56++E842 00 00
  57++E844 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  57++E848 00 00
  58++E84A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  58++E84E 00 00
  59++E850 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  59++E854 00 00
  60++E856 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  60++E85A 00 00
  61++E85C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  61++E860 00 00
  62++E862 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  62++E866 00 00
  63++E868 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  63++E86C 00 00
  64++E86E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  64++E872 00 00
  65++E874 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  65++E878 00 00
  66++E87A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  66++E87E 00 00
  67++E880 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  67++E884 00 00
  68++E886 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  68++E88A 00 00
  69++E88C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  69++E890 00 00
  70++E892
  71++E892              LogoVertSize: equ $ - LogoVertices
  72++E892
  73++E892
  74++E892
  75++E892 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  76++E896 1F 00 04 08  	DB $1F, $00, $04, $08
  77++E89A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  78++E89E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  79++E8A2 1F 00 10 14  	DB $1F, $00, $10, $14
  80++E8A6 1F 00 14 18  	DB $1F, $00, $14, $18
  81++E8AA 1F 00 18 1C  	DB $1F, $00, $18, $1C
  82++E8AE 1F 00 1C 20  	DB $1F, $00, $1C, $20
  83++E8B2 1F 00 20 24  	DB $1F, $00, $20, $24
  84++E8B6 1F 00 24 28  	DB $1F, $00, $24, $28
  85++E8BA 1F 00 28 2C  	DB $1F, $00, $28, $2C
  86++E8BE 1F 00 2C 00  	DB $1F, $00, $2C, $00
  87++E8C2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  88++E8C6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  89++E8CA 1E 04 40 44  	DB $1E, $04, $40, $44
  90++E8CE 1E 01 44 38  	DB $1E, $01, $44, $38
  91++E8D2 1E 03 10 30  	DB $1E, $03, $10, $30
  92++E8D6 1E 22 30 34  	DB $1E, $22, $30, $34
  93++E8DA 1E 04 34 20  	DB $1E, $04, $34, $20
  94++E8DE 1E 11 20 10  	DB $1E, $11, $20, $10
  95++E8E2 1E 13 10 38  	DB $1E, $13, $10, $38
  96++E8E6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  97++E8EA 1E 24 34 40  	DB $1E, $24, $34, $40
  98++E8EE 1E 14 20 44  	DB $1E, $14, $20, $44
  99++E8F2 1E 00 54 58  	DB $1E, $00, $54, $58
 100++E8F6 1E 00 58 60  	DB $1E, $00, $58, $60
 101++E8FA 1E 00 60 64  	DB $1E, $00, $60, $64
 102++E8FE 1E 00 5C 68  	DB $1E, $00, $5C, $68
 103++E902 1E 00 6C 70  	DB $1E, $00, $6C, $70
 104++E906 1E 00 70 74  	DB $1E, $00, $70, $74
 105++E90A 1E 00 78 7C  	DB $1E, $00, $78, $7C
 106++E90E 1E 00 80 84  	DB $1E, $00, $80, $84
 107++E912 1E 00 88 8C  	DB $1E, $00, $88, $8C
 108++E916 1E 00 90 94  	DB $1E, $00, $90, $94
 109++E91A 1E 00 94 9C  	DB $1E, $00, $94, $9C
 110++E91E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 111++E922 1E 00 A4 98  	DB $1E, $00, $A4, $98
 112++E926
 113++E926              LogoEdgesSize: equ $ - LogoEdges
 114++E926
 115++E926
 116++E926              LogoEdgesCnt: equ LogoEdgesSize/4
 117++E926
 118++E926
 119++E926 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 120++E92A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 121++E92E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 122++E932 9F 51 51 00  	DB $9F, $51, $51, $00
 123++E936 1F 51 51 00  	DB $1F, $51, $51, $00
 124++E93A
 125++E93A
 126++E93A              LogoNormalsSize: equ $ - LogoNormals
 127++E93A              LogoLen: equ $ - Logo
 128++E93A
# file closed: ./Data/ships/Logo.asm
  90+ E93A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E93A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E93B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E93D EF E9                                DW MambaEdges              ; Edge Data
   4++E93F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E940 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E941 22                                   DB $22                     ; Explosion Count
   7++E942 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E943 96                                   DB MambaVertSize           ; Vertex Count
   9++E944 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E945 96 00                                DW $0096                   ; Bounty LoHi
  11++E947 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E948 19                                   DB $19                     ; Range when it turns to a dot
  13++E949 5A                                   DB $5A                     ; Energy Max
  14++E94A 1E                                   DB $1E                     ; Speed Max
  15++E94B 5F EA                                DW MambaNormals            ; Normals
  16++E94D 02                                   DB $02                     ; Q scaling
  17++E94E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E94F 59 E9                                DW MambaVertices           ; Verticles Address
  19++E951 00                                   DB ShipTypeNormal          ; Ship Type
  20++E952 00                                   DB 0                       ; NewB Tactics
  21++E953 80                                   DB ShipCanAnger            ; AI Flags
  22++E954 E0                                   DB $E0                     ; chance of ECM module
  23++E955 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E956 00 00                                DW $0000                            ; no solid data
  25++E958 00                                   DB $00                              ; no solid data
  26++E959
  27++E959
  28++E959 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  28++E95D 10 32
  29++E95F 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  29++E963 20 44
  30++E965 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  30++E969 21 44
  31++E96B 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  31++E96F 31 44
  32++E971 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  32++E975 30 44
  33++E977 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  33++E97B 11 11
  34++E97D 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  34++E981 11 11
  35++E983 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  35++E987 11 11
  36++E989 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  36++E98D 11 11
  37++E98F 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  37++E993 00 00
  38++E995 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  38++E999 00 00
  39++E99B 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  39++E99F 00 00
  40++E9A1 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  40++E9A5 00 00
  41++E9A7 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  41++E9AB 00 00
  42++E9AD 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  42++E9B1 00 00
  43++E9B3 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  43++E9B7 44 44
  44++E9B9 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  44++E9BD 44 44
  45++E9BF 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  45++E9C3 44 44
  46++E9C5 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  46++E9C9 44 44
  47++E9CB 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  47++E9CF 44 44
  48++E9D1 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  48++E9D5 44 44
  49++E9D7 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  49++E9DB 44 44
  50++E9DD 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  50++E9E1 44 44
  51++E9E3 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  51++E9E7 44 44
  52++E9E9 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  52++E9ED 44 44
  53++E9EF
  54++E9EF              MambaVertSize: equ $ - MambaVertices
  55++E9EF
  56++E9EF
  57++E9EF
  58++E9EF 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  59++E9F3 1F 30 00 10  	DB $1F, $30, $00, $10
  60++E9F7 1F 40 04 10  	DB $1F, $40, $04, $10
  61++E9FB 1E 42 04 08  	DB $1E, $42, $04, $08
  62++E9FF 1E 41 08 0C  	DB $1E, $41, $08, $0C
  63++EA03 1E 43 0C 10  	DB $1E, $43, $0C, $10
  64++EA07 0E 11 14 18  	DB $0E, $11, $14, $18
  65++EA0B 0C 11 18 1C  	DB $0C, $11, $18, $1C
  66++EA0F 0D 11 1C 20  	DB $0D, $11, $1C, $20
  67++EA13 0C 11 14 20  	DB $0C, $11, $14, $20
  68++EA17 14 00 24 2C  	DB $14, $00, $24, $2C
  69++EA1B 10 00 24 30  	DB $10, $00, $24, $30
  70++EA1F 10 00 28 34  	DB $10, $00, $28, $34
  71++EA23 14 00 28 38  	DB $14, $00, $28, $38
  72++EA27 0E 00 34 38  	DB $0E, $00, $34, $38
  73++EA2B 0E 00 2C 30  	DB $0E, $00, $2C, $30
  74++EA2F 0D 44 3C 40  	DB $0D, $44, $3C, $40
  75++EA33 0E 44 44 48  	DB $0E, $44, $44, $48
  76++EA37 0C 44 3C 48  	DB $0C, $44, $3C, $48
  77++EA3B 0C 44 40 44  	DB $0C, $44, $40, $44
  78++EA3F 07 44 50 54  	DB $07, $44, $50, $54
  79++EA43 05 44 50 60  	DB $05, $44, $50, $60
  80++EA47 05 44 54 60  	DB $05, $44, $54, $60
  81++EA4B 07 44 4C 58  	DB $07, $44, $4C, $58
  82++EA4F 05 44 4C 5C  	DB $05, $44, $4C, $5C
  83++EA53 05 44 58 5C  	DB $05, $44, $58, $5C
  84++EA57 1E 21 00 08  	DB $1E, $21, $00, $08
  85++EA5B 1E 31 00 0C  	DB $1E, $31, $00, $0C
  86++EA5F
  87++EA5F              MambaEdgesSize: equ $ - MambaEdges
  88++EA5F
  89++EA5F
  90++EA5F              MambaEdgesCnt: equ MambaEdgesSize/4
  91++EA5F
  92++EA5F
  93++EA5F 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  94++EA63 1E 00 18 02  	DB $1E, $00, $18, $02
  95++EA67 9E 20 40 10  	DB $9E, $20, $40, $10
  96++EA6B 1E 20 40 10  	DB $1E, $20, $40, $10
  97++EA6F 3E 00 00 7F  	DB $3E, $00, $00, $7F
  98++EA73
  99++EA73              MambaNormalsSize: equ $ - MambaNormals
 100++EA73              MambaLen: equ $ - Mamba
 101++EA73
# file closed: ./Data/ships/Mamba.asm
  91+ EA73                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA73              ;    DEFINE DEBUGMODEL 1
   2++EA73 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA74 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA76 F8 EA                                DW MissileEdges            ; Edge Data
   5++EA78 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA79 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA7A 0A                                   DB $0A                     ; Explosion Count
   8++EA7B 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA7C 66                                   DB MissileVertSize         ; Vertex Count
  10++EA7D 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA7E 00 00                                DW $0000                   ; Bounty LoHi
  12++EA80 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA81 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA82 02                                   DB $02                     ; Energy Max
  15++EA83 2C                                   DB $2C                     ; Speed Max
  16++EA84 58 EB                                DW MissileNormals          ; Normals
  17++EA86 02                                   DB $02                     ; Q scaling
  18++EA87 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA88 92 EA                                DW MissileVertices         ; Verticles Address
  20++EA8A 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA8B 00                                   DB 0                       ; NewB Tactics
  22++EA8C 00                                   DB 0                       ; AI Flags
  23++EA8D 00                                   DB $00                     ; chance of ECM module
  24++EA8E FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EA8F 00 00                                DW $0000                            ; no solid data
  26++EA91 00                                   DB $00                              ; no solid data
  27++EA92
  28++EA92
  29++EA92              ;;;     Byte 0 = X magnitide with origin at middle of ship
  30++EA92              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  31++EA92              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  32++EA92              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  33++EA92              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  34++EA92              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  35++EA92              MissileVertices:    IFDEF DEBUGMODEL
  36++EA92 ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  37++EA92 ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  38++EA92 ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  39++EA92 ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  40++EA92 ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  41++EA92 ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  42++EA92 ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  43++EA92 ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  44++EA92 ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  45++EA92 ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  46++EA92 ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  47++EA92 ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  48++EA92 ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  49++EA92                                  ELSE
  50++EA92 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  50++EA96 10 32
  51++EA98 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  51++EA9C 21 54
  52++EA9E 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  52++EAA2 32 74
  53++EAA4 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  53++EAA8 30 76
  54++EAAA 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  54++EAAE 10 65
  55++EAB0 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  55++EAB4 74 88
  56++EAB6 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  56++EABA 54 88
  57++EABC 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  57++EAC0 65 88
  58++EAC2 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  58++EAC6 76 88
  59++EAC8 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  59++EACC 74 88
  60++EACE 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  60++EAD2 54 88
  61++EAD4 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  61++EAD8 65 88
  62++EADA 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  62++EADE 76 88
  63++EAE0 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  63++EAE4 76 77
  64++EAE6 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  64++EAEA 65 66
  65++EAEC 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  65++EAF0 74 77
  66++EAF2 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  66++EAF6 54 55
  67++EAF8                                  ENDIF
  68++EAF8              MissileVertSize: equ $ - MissileVertices
  69++EAF8
  70++EAF8              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  71++EAF8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  72++EAF8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  73++EAF8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  74++EAF8
  75++EAF8              MissileEdges:	    IFDEF DEBUGMODEL
  76++EAF8 ~                                    DB $1F,$00,$00,$04 ; Y
  77++EAF8 ~                                    DB $1F,$00,$08,$0C ; X
  78++EAF8 ~                                    DB $1F,$00,$10,$14 ; Z
  79++EAF8 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  80++EAF8 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  81++EAF8 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  82++EAF8 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  83++EAF8 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  84++EAF8 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  85++EAF8 ~                                    ;DB $1F,$00,$18,$1C
  86++EAF8                                  ELSE
  87++EAF8 1F 21 00 04                          DB $1F, $21, $00, $04
  88++EAFC 1F 32 00 08                          DB $1F, $32, $00, $08
  89++EB00 1F 30 00 0C                          DB $1F, $30, $00, $0C
  90++EB04 1F 10 00 10                          DB $1F, $10, $00, $10
  91++EB08 1F 24 04 08                          DB $1F, $24, $04, $08
  92++EB0C 1F 51 04 10                          DB $1F, $51, $04, $10
  93++EB10 1F 60 0C 10                          DB $1F, $60, $0C, $10
  94++EB14 1F 73 08 0C                          DB $1F, $73, $08, $0C
  95++EB18 1F 74 08 14                          DB $1F, $74, $08, $14
  96++EB1C 1F 54 04 18                          DB $1F, $54, $04, $18
  97++EB20 1F 65 10 1C                          DB $1F, $65, $10, $1C
  98++EB24 1F 76 0C 20                          DB $1F, $76, $0C, $20
  99++EB28 1F 86 1C 20                          DB $1F, $86, $1C, $20
 100++EB2C 1F 87 14 20                          DB $1F, $87, $14, $20
 101++EB30 1F 84 14 18                          DB $1F, $84, $14, $18
 102++EB34 1F 85 18 1C                          DB $1F, $85, $18, $1C
 103++EB38 08 85 18 28                          DB $08, $85, $18, $28
 104++EB3C 08 87 14 24                          DB $08, $87, $14, $24
 105++EB40 08 87 20 30                          DB $08, $87, $20, $30
 106++EB44 08 85 1C 2C                          DB $08, $85, $1C, $2C
 107++EB48 08 74 24 3C                          DB $08, $74, $24, $3C
 108++EB4C 08 54 28 40                          DB $08, $54, $28, $40
 109++EB50 08 76 30 34                          DB $08, $76, $30, $34
 110++EB54 08 65 2C 38                          DB $08, $65, $2C, $38
 111++EB58                                  ENDIF
 112++EB58              MissileEdgesSize: equ $ - MissileEdges
 113++EB58
 114++EB58
 115++EB58              MissileEdgesCnt: equ MissileEdgesSize/4
 116++EB58
 117++EB58              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 118++EB58              ;;;		Byte 1 = X Lo
 119++EB58              ;;;		Byte 2 = Y Lo
 120++EB58              ;;;		Byte 3 = Z Lo
 121++EB58              MissileNormals:	    IFDEF DEBUGMODEL
 122++EB58 ~                                    DB $1F,$00,$10,$00
 123++EB58 ~                                    DB $1F,$10,$00,$00
 124++EB58 ~                                    DB $1F,$00,$00,$10
 125++EB58 ~                                    DB $1F,$00,$00,$10
 126++EB58                                  ELSE
 127++EB58 9F 40 00 10                          DB $9F, $40, $00, $10
 128++EB5C 5F 00 40 10                          DB $5F, $00, $40, $10
 129++EB60 1F 40 00 10                          DB $1F, $40, $00, $10
 130++EB64 1F 00 40 10                          DB $1F, $00, $40, $10
 131++EB68 1F 20 00 00                          DB $1F, $20, $00, $00
 132++EB6C 5F 00 20 00                          DB $5F, $00, $20, $00
 133++EB70 9F 20 00 00                          DB $9F, $20, $00, $00
 134++EB74 1F 00 20 00                          DB $1F, $00, $20, $00
 135++EB78 3F 00 00 B0                          DB $3F, $00, $00, $B0
 136++EB7C                                  ENDIF
 137++EB7C
 138++EB7C              MissileNormalsSize: equ $ - MissileNormals
 139++EB7C              MissileLen: equ $ - Missile
 140++EB7C
# file closed: ./Data/ships/Missile.asm
  92+ EB7C                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB7C 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB7D 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB7F 01 EC                                DW MonitorEdges            ; Edge Data
   4++EB81 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB82 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB83 2A                                   DB $2A                     ; Explosion Count
   7++EB84 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB85 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB86 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB87 90 01                                DW $0190                   ; Bounty LoHi
  11++EB89 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB8A 28                                   DB $28                     ; Range when it turns to a dot
  13++EB8B 84                                   DB $84                     ; Energy Max
  14++EB8C 10                                   DB $10                     ; Speed Max
  15++EB8D 5D EC                                DW MonitorNormals          ; Normals
  16++EB8F 00                                   DB $00                     ; Q scaling
  17++EB90 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB91 9B EB                                DW MonitorVertices         ; Verticles Address
  19++EB93 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB94 00                                   DB 0                       ; NewB Tactics
  21++EB95 80                                   DB ShipCanAnger            ; AI Flags
  22++EB96 40                                   DB $40                     ; chance of ECM module
  23++EB97 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EB98 00 00                                DW $0000                            ; no solid data
  25++EB9A 00                                   DB $00                              ; no solid data
  26++EB9B
  27++EB9B
  28++EB9B 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  28++EB9F FF FF
  29++EBA1 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  29++EBA5 23 01
  30++EBA7 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  30++EBAB 50 34
  31++EBAD 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  31++EBB1 78 12
  32++EBB3 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  32++EBB7 96 45
  33++EBB9 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  33++EBBD AA 28
  34++EBBF 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  34++EBC3 AA 49
  35++EBC5 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  35++EBC9 AA 23
  36++EBCB 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  36++EBCF AA 34
  37++EBD1 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  37++EBD5 AA 89
  38++EBD7 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  38++EBDB 89 67
  39++EBDD 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  39++EBE1 00 00
  40++EBE3 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  40++EBE7 00 00
  41++EBE9 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  41++EBED 77 77
  42++EBEF 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  42++EBF3 77 77
  43++EBF5 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  43++EBF9 66 66
  44++EBFB 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  44++EBFF 66 66
  45++EC01              MonitorVertSize:        equ $ - MonitorVertices
  46++EC01 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  47++EC05 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  48++EC09 1F 23 04 1C                          DB $1F, $23, $04, $1C
  49++EC0D 1F 34 08 20                          DB $1F, $34, $08, $20
  50++EC11 1F 45 08 10                          DB $1F, $45, $08, $10
  51++EC15 1F 50 00 08                          DB $1F, $50, $00, $08
  52++EC19 1F 03 04 08                          DB $1F, $03, $04, $08
  53++EC1D 1F 67 00 28                          DB $1F, $67, $00, $28
  54++EC21 1F 78 0C 28                          DB $1F, $78, $0C, $28
  55++EC25 1F 89 24 28                          DB $1F, $89, $24, $28
  56++EC29 1F 96 10 28                          DB $1F, $96, $10, $28
  57++EC2D 1F 17 00 0C                          DB $1F, $17, $00, $0C
  58++EC31 1F 28 0C 14                          DB $1F, $28, $0C, $14
  59++EC35 1F 49 18 10                          DB $1F, $49, $18, $10
  60++EC39 1F 56 10 00                          DB $1F, $56, $10, $00
  61++EC3D 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  62++EC41 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  63++EC45 1F 4A 20 18                          DB $1F, $4A, $20, $18
  64++EC49 1F 8A 14 24                          DB $1F, $8A, $14, $24
  65++EC4D 1F 9A 18 24                          DB $1F, $9A, $18, $24
  66++EC51 0A 00 2C 30                          DB $0A, $00, $2C, $30
  67++EC55 0A 77 34 38                          DB $0A, $77, $34, $38
  68++EC59 0A 66 3C 40                          DB $0A, $66, $3C, $40
  69++EC5D              MonitorEdgesSize:       equ $ - MonitorEdges
  70++EC5D              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  71++EC5D 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  72++EC61 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  73++EC65 3F 36 1C 10                          DB $3F, $36, $1C, $10
  74++EC69 3F 00 39 1C                          DB $3F, $00, $39, $1C
  75++EC6D BF 36 1C 10                          DB $BF, $36, $1C, $10
  76++EC71 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  77++EC75 DF 26 2F 12                          DB $DF, $26, $2F, $12
  78++EC79 5F 26 2F 12                          DB $5F, $26, $2F, $12
  79++EC7D 7F 27 30 0D                          DB $7F, $27, $30, $0D
  80++EC81 FF 27 30 0D                          DB $FF, $27, $30, $0D
  81++EC85 3F 00 00 40                          DB $3F, $00, $00, $40
  82++EC89              MonitorNormalsSize:     equ $ - MonitorNormals
  83++EC89              MonitorLen:             equ $ - Monitor
  84++EC89
# file closed: ./Data/ships/Monitor.asm
  93+ EC89                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC89 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC8A 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC8C FC EC                                DW MorayEdges             ; Edge Data
   4++EC8E 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EC8F 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EC90 1A                                   DB $1A                    ; Explosion Count
   7++EC91 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EC92 54                                   DB MorayVertSize          ; Vertex Count
   9++EC93 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC94 32 00                                DW $0032                  ; Bounty LoHi
  11++EC96 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC97 28                                   DB $28                    ; Range when it turns to a dot
  13++EC98 59                                   DB $59                    ; Energy Max
  14++EC99 19                                   DB $19                    ; Speed Max
  15++EC9A 48 ED                                DW MorayNormals           ; Normals
  16++EC9C 02                                   DB $02                    ; Q scaling
  17++EC9D 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC9E A8 EC                                DW MorayVertices          ; Verticles Address
  19++ECA0 00                                   DB ShipTypeNormal         ; Ship Type
  20++ECA1 00                                   DB 0                      ; NewB Tactics
  21++ECA2 80                                   DB ShipCanAnger           ; AI Flags
  22++ECA3 C0                                   DB $C0                    ; chance of ECM module
  23++ECA4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ECA5 00 00                                DW $0000                            ; no solid data
  25++ECA7 00                                   DB $00                              ; no solid data
  26++ECA8
  27++ECA8
  28++ECA8 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  28++ECAC 02 78
  29++ECAE 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  29++ECB2 01 67
  30++ECB4 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  30++ECB8 FF FF
  31++ECBA 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  31++ECBE 13 66
  32++ECC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  32++ECC4 25 88
  33++ECC6 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  33++ECCA 45 78
  34++ECCC 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  34++ECD0 34 67
  35++ECD2 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  35++ECD6 44 44
  36++ECD8 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  36++ECDC 44 44
  37++ECDE 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  37++ECE2 44 44
  38++ECE4 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  38++ECE8 00 00
  39++ECEA 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  39++ECEE 00 00
  40++ECF0 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  40++ECF4 00 00
  41++ECF6 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  41++ECFA 00 00
  42++ECFC              MorayVertSize:          equ $ - MorayVertices
  43++ECFC 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  44++ED00 1F 16 04 0C                          DB $1F, $16, $04, $0C
  45++ED04 18 36 0C 18                          DB $18, $36, $0C, $18
  46++ED08 18 47 14 18                          DB $18, $47, $14, $18
  47++ED0C 18 58 10 14                          DB $18, $58, $10, $14
  48++ED10 1F 28 00 10                          DB $1F, $28, $00, $10
  49++ED14 0F 67 04 18                          DB $0F, $67, $04, $18
  50++ED18 0F 78 00 14                          DB $0F, $78, $00, $14
  51++ED1C 0F 02 00 08                          DB $0F, $02, $00, $08
  52++ED20 0F 01 04 08                          DB $0F, $01, $04, $08
  53++ED24 11 13 08 0C                          DB $11, $13, $08, $0C
  54++ED28 11 25 08 10                          DB $11, $25, $08, $10
  55++ED2C 0D 45 08 14                          DB $0D, $45, $08, $14
  56++ED30 0D 34 08 18                          DB $0D, $34, $08, $18
  57++ED34 05 44 1C 20                          DB $05, $44, $1C, $20
  58++ED38 07 44 1C 24                          DB $07, $44, $1C, $24
  59++ED3C 07 44 20 24                          DB $07, $44, $20, $24
  60++ED40 05 00 28 2C                          DB $05, $00, $28, $2C
  61++ED44 05 00 30 34                          DB $05, $00, $30, $34
  62++ED48              MorayEdgesSize:         equ $ - MorayEdges
  63++ED48              MorayEdgesCnt:          equ MorayEdgesSize/4
  64++ED48 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  65++ED4C 9F 0A 31 07                          DB $9F, $0A, $31, $07
  66++ED50 1F 0A 31 07                          DB $1F, $0A, $31, $07
  67++ED54 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  68++ED58 78 00 34 4E                          DB $78, $00, $34, $4E
  69++ED5C 78 3B 1C 65                          DB $78, $3B, $1C, $65
  70++ED60 DF 48 63 32                          DB $DF, $48, $63, $32
  71++ED64 5F 00 53 1E                          DB $5F, $00, $53, $1E
  72++ED68 5F 48 63 32                          DB $5F, $48, $63, $32
  73++ED6C
  74++ED6C              MorayNormalsSize:       equ $ - MorayNormals
  75++ED6C              MorayLen:               equ $ - Moray
  76++ED6C
# file closed: ./Data/ships/Moray.asm
  94+ ED6C                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED6C 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED6D 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED6F 03 EE                                DW OphidianEdges           ; Edge Data
   4++ED71 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED72 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED73 3C                                   DB $3C                     ; Explosion Count
   7++ED74 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED75 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED76 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED77 32 00                                DW $0032                   ; Bounty LoHi
  11++ED79 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED7A 14                                   DB $14                     ; Range when it turns to a dot
  13++ED7B 40                                   DB $40                     ; Energy Max
  14++ED7C 22                                   DB $22                     ; Speed Max
  15++ED7D 7B EE                                DW OphidianNormals         ; Normals
  16++ED7F 01                                   DB $01                     ; Q scaling
  17++ED80 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED81 8B ED                                DW OphidianVertices        ; Verticles Address
  19++ED83 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED84 00                                   DB 0                       ; NewB Tactics
  21++ED85 80                                   DB ShipCanAnger            ; AI Flags
  22++ED86 C0                                   DB $C0                     ; chance of ECM module
  23++ED87 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ED88 00 00                                DW $0000                            ; no solid data
  25++ED8A 00                                   DB $00                              ; no solid data
  26++ED8B
  27++ED8B
  28++ED8B 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  28++ED8F 68 02
  29++ED91 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  29++ED95 67 01
  30++ED97 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  30++ED9B 22 01
  31++ED9D 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  31++EDA1 8A 24
  32++EDA3 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  32++EDA7 79 13
  33++EDA9 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  33++EDAD FF FF
  34++EDAF 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  34++EDB3 9B 35
  35++EDB5 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  35++EDB9 AB 45
  36++EDBB 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  36++EDBF BB 4A
  37++EDC1 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  37++EDC5 FF FF
  38++EDC7 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  38++EDCB FF FF
  39++EDCD 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  39++EDD1 BB 39
  40++EDD3 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  40++EDD7 FF FF
  41++EDD9 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  41++EDDD FF FF
  42++EDDF 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  42++EDE3 BB 9A
  43++EDE5 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  43++EDE9 FF FF
  44++EDEB 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  44++EDEF BB BB
  45++EDF1 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  45++EDF5 BB BB
  46++EDF7 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  46++EDFB BB BB
  47++EDFD 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  47++EE01 BB BB
  48++EE03
  49++EE03              OphidianVertSize:       equ $ - OphidianVertices
  50++EE03 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  51++EE07 1F 01 04 08                          DB $1F, $01, $04, $08
  52++EE0B 1F 02 00 08                          DB $1F, $02, $00, $08
  53++EE0F 1F 12 08 14                          DB $1F, $12, $08, $14
  54++EE13 1F 13 10 14                          DB $1F, $13, $10, $14
  55++EE17 1F 24 0C 14                          DB $1F, $24, $0C, $14
  56++EE1B 1F 35 14 18                          DB $1F, $35, $14, $18
  57++EE1F 1F 45 14 1C                          DB $1F, $45, $14, $1C
  58++EE23 1F 28 00 0C                          DB $1F, $28, $00, $0C
  59++EE27 1F 17 04 10                          DB $1F, $17, $04, $10
  60++EE2B 1F 39 10 2C                          DB $1F, $39, $10, $2C
  61++EE2F 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  62++EE33 1F 67 04 3C                          DB $1F, $67, $04, $3C
  63++EE37 1F 68 00 3C                          DB $1F, $68, $00, $3C
  64++EE3B 1F 79 10 3C                          DB $1F, $79, $10, $3C
  65++EE3F 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  66++EE43 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  67++EE47 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  68++EE4B 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  69++EE4F 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  70++EE53 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  71++EE57 1F AB 20 38                          DB $1F, $AB, $20, $38
  72++EE5B 10 BB 40 44                          DB $10, $BB, $40, $44
  73++EE5F 10 BB 44 48                          DB $10, $BB, $44, $48
  74++EE63 10 BB 48 4C                          DB $10, $BB, $48, $4C
  75++EE67 10 BB 4C 40                          DB $10, $BB, $4C, $40
  76++EE6B 10 39 30 34                          DB $10, $39, $30, $34
  77++EE6F 10 39 2C 30                          DB $10, $39, $2C, $30
  78++EE73 10 4A 28 24                          DB $10, $4A, $28, $24
  79++EE77 10 4A 24 20                          DB $10, $4A, $24, $20
  80++EE7B              OphidianEdgesSize:      equ $ - OphidianEdges
  81++EE7B              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  82++EE7B
  83++EE7B 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  84++EE7F 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  85++EE83 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  86++EE87 1F 10 22 02                          DB $1F, $10, $22, $02
  87++EE8B 9F 10 22 02                          DB $9F, $10, $22, $02
  88++EE8F 3F 00 25 03                          DB $3F, $00, $25, $03
  89++EE93 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  90++EE97 5F 0A 14 02                          DB $5F, $0A, $14, $02
  91++EE9B DF 0A 14 02                          DB $DF, $0A, $14, $02
  92++EE9F 7F 12 20 02                          DB $7F, $12, $20, $02
  93++EEA3 FF 12 20 02                          DB $FF, $12, $20, $02
  94++EEA7 3F 00 00 25                          DB $3F, $00, $00, $25
  95++EEAB
  96++EEAB              OphidianNormalsSize:    equ $ - OphidianNormals
  97++EEAB              OphidianLen:            equ $ - Ophidian
  98++EEAB
# file closed: ./Data/ships/Ophidian.asm
  95+ EEAB                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EEAB 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EEAC 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EEAE DC EE                                DW PlateEdges             ; Edge Data
   4++EEB0 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EEB1 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EEB2 0A                                   DB $0A                    ; Explosion Count
   7++EEB3 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EEB4 12                                   DB PlateVertSize          ; Vertex Count
   9++EEB5 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EEB6 00 00                                DW $0000                  ; Bounty LoHi
  11++EEB8 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EEB9 05                                   DB $05                    ; Range when it turns to a dot
  13++EEBA 10                                   DB $10                    ; Energy Max
  14++EEBB 10                                   DB $10                    ; Speed Max
  15++EEBC EC EE                                DW PlateNormals           ; Normals
  16++EEBE 03                                   DB $03                    ; Q scaling
  17++EEBF 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EEC0 CA EE                                DW PlateVertices          ; Verticles Address
  19++EEC2 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EEC3 00                                   DB 0                      ; NewB Tactics
  21++EEC4 80                                   DB ShipCanAnger           ; AI Flags
  22++EEC5 00                                   DB $00                    ; chance of ECM module
  23++EEC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EEC7 00 00                                DW $0000                            ; no solid data
  25++EEC9 00                                   DB $00                              ; no solid data
  26++EECA
  27++EECA
  28++EECA
  29++EECA 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  29++EECE FF FF
  30++EED0 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  30++EED4 FF FF
  31++EED6 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  31++EEDA FF FF
  32++EEDC
  33++EEDC              PlateVertSize: equ $ - PlateVertices
  34++EEDC
  35++EEDC
  36++EEDC
  37++EEDC 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  38++EEE0 10 FF 04 08  	DB $10, $FF, $04, $08
  39++EEE4 14 FF 08 0C  	DB $14, $FF, $08, $0C
  40++EEE8 10 FF 0C 00  	DB $10, $FF, $0C, $00
  41++EEEC
  42++EEEC              PlateEdgesSize: equ $ - PlateEdges
  43++EEEC
  44++EEEC
  45++EEEC              PlateEdgesCnt: equ PlateEdgesSize/4
  46++EEEC
  47++EEEC
  48++EEEC 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  49++EEF0
  50++EEF0
  51++EEF0              PlateNormalsSize: equ $ - PlateNormals
  52++EEF0              PlateLen: equ $ - Plate
  53++EEF0
# file closed: ./Data/ships/Plate.asm
  96+ EEF0                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EEF0              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EEF0 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EEF1 00 19                                DW $1900                                                 ; Edge Data
   4++EEF3 51 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EEF5 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EEF6 00                                   DB $00                                                   ; Explosion Count
   7++EEF7 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EEF8 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EEF9 42                                   DB PythonVertSize                                        ; Edges Count
  10++EEFA 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EEFB 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EEFD 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EEFE 28                                   DB $28                                                   ; Energy Max
  14++EEFF FA                                   DB $FA                                                   ; Speed Max
  15++EF00 14                                   DB $14                                                   ; Normals
  16++EF01 B9 EF                                DW PythonNormals                                         ; Q scaling
  17++EF03 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EF04 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EF05 0F EF                                DW PythonVertices                                        ; Ship Type
  20++EF07 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EF08 00                                   DB 0                                                     ; AI Flags
  22++EF09 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EF0A E0                                   DB $E0
  24++EF0B FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EF0C 00 00                                DW $0000                            ; no solid data
  26++EF0E 00                                   DB $00                              ; no solid data
  27++EF0F
  28++EF0F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  28++EF13 10 32
  29++EF15 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  29++EF19 10 54
  30++EF1B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++EF1F FF FF
  31++EF21 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++EF25 FF FF
  32++EF27 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  32++EF2B 54 98
  33++EF2D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++EF31 89 CC
  34++EF33 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++EF37 B8 CC
  35++EF39 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++EF3D A9 CC
  36++EF3F 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  36++EF43 32 76
  37++EF45 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  37++EF49 76 BA
  38++EF4B 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  38++EF4F BA CC
  39++EF51              PythonVertSize          equ $  - PythonVertices
  40++EF51 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  40++EF55 1F 20 00 0C
  41++EF59 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  41++EF5D 1E 10 00 04
  42++EF61 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  42++EF65 1D 51 04 08
  43++EF69 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  43++EF6D 1D 40 04 0C
  44++EF71 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  44++EF75 1D A7 08 24
  45++EF79 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  45++EF7D 1D B6 0C 24
  46++EF81 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  46++EF85 05 BB 0C 28
  47++EF89 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  47++EF8D 05 AA 08 28
  48++EF91 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  48++EF95 1F B8 0C 18
  49++EF99 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  49++EF9D 1F C9 14 1C
  50++EFA1 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  50++EFA5 1D CB 18 28
  51++EFA9 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  51++EFAD 1D BA 24 28
  52++EFB1 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  52++EFB5 1D 76 20 24
  53++EFB9              PythonEdgesSize         equ $  - PythonEdges
  54++EFB9              PythonEdgesCnt          equ PythonEdgesSize/4
  55++EFB9 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  55++EFBD 1E 1B 28 0B
  56++EFC1 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  56++EFC5 5E 1B 28 0B
  57++EFC9 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  57++EFCD 1E 13 26 00
  58++EFD1 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  58++EFD5 5E 13 26 00
  59++EFD9 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  59++EFDD 3E 19 25 0B
  60++EFE1 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  60++EFE5 FE 19 25 0B
  61++EFE9 3E 00 00 70                          DB $3E, $00, $00, $70
  62++EFED              PythonNormalsSize       equ $  - PythonNormals
  63++EFED              PythonLen               equ $  - Python
  64++EFED
# file closed: ./Data/ships/Python.asm
  97+ EFED                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFED 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFEE 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EFF0 4E F0                                DW Python_PEdges                 ; Edge Data
   4++EFF2 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EFF3 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EFF4 2A                                   DB $2A                           ; Explosion Count
   7++EFF5 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EFF6 42                                   DB Python_PVertSize              ; Vertex Count
   9++EFF7 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EFF8 C8 00                                DW $00C8                         ; Bounty LoHi
  11++EFFA 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EFFB 28                                   DB $28                           ; Range when it turns to a dot
  13++EFFC FA                                   DB $FA                           ; Energy Max
  14++EFFD 14                                   DB $14                           ; Speed Max
  15++EFFE B6 F0                                DW Python_PNormals               ; Normals
  16++F000 00                                   DB $00                           ; Q scaling
  17++F001 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++F002 0C F0                                DW Python_PVertices              ; Verticles Address
  19++F004 00                                   DB ShipTypeNormal                ; Ship Type
  20++F005 00                                   DB 0                             ; NewB Tactics
  21++F006 80                                   DB ShipCanAnger                  ; AI Flags
  22++F007 F0                                   DB $F0                           ; chance of ECM module
  23++F008 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F009 00 00                                DW $0000                            ; no solid data
  25++F00B 00                                   DB $00                              ; no solid data
  26++F00C
  27++F00C
  28++F00C 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  28++F010 10 32
  29++F012 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  29++F016 10 54
  30++F018 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++F01C FF FF
  31++F01E 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++F022 FF FF
  32++F024 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  32++F028 54 98
  33++F02A 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++F02E 89 CC
  34++F030 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++F034 B8 CC
  35++F036 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++F03A A9 CC
  36++F03C 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  36++F040 32 76
  37++F042 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  37++F046 76 BA
  38++F048 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  38++F04C BA CC
  39++F04E
  40++F04E              Python_PVertSize: equ $ - Python_PVertices
  41++F04E
  42++F04E
  43++F04E
  44++F04E 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  45++F052 1F 20 00 0C  	DB $1F, $20, $00, $0C
  46++F056 1F 31 00 08  	DB $1F, $31, $00, $08
  47++F05A 1F 10 00 04  	DB $1F, $10, $00, $04
  48++F05E 1F 59 08 10  	DB $1F, $59, $08, $10
  49++F062 1F 51 04 08  	DB $1F, $51, $04, $08
  50++F066 1F 37 08 20  	DB $1F, $37, $08, $20
  51++F06A 1F 40 04 0C  	DB $1F, $40, $04, $0C
  52++F06E 1F 62 0C 20  	DB $1F, $62, $0C, $20
  53++F072 1F A7 08 24  	DB $1F, $A7, $08, $24
  54++F076 1F 84 0C 10  	DB $1F, $84, $0C, $10
  55++F07A 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  56++F07E 07 88 0C 14  	DB $07, $88, $0C, $14
  57++F082 07 BB 0C 28  	DB $07, $BB, $0C, $28
  58++F086 07 99 08 14  	DB $07, $99, $08, $14
  59++F08A 07 AA 08 28  	DB $07, $AA, $08, $28
  60++F08E 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  61++F092 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  62++F096 1F C8 14 18  	DB $1F, $C8, $14, $18
  63++F09A 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  64++F09E 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  65++F0A2 1F CB 18 28  	DB $1F, $CB, $18, $28
  66++F0A6 1F 98 10 14  	DB $1F, $98, $10, $14
  67++F0AA 1F BA 24 28  	DB $1F, $BA, $24, $28
  68++F0AE 1F 54 04 10  	DB $1F, $54, $04, $10
  69++F0B2 1F 76 20 24  	DB $1F, $76, $20, $24
  70++F0B6
  71++F0B6              Python_PEdgesSize: equ $ - Python_PEdges
  72++F0B6
  73++F0B6
  74++F0B6              Python_PEdgesCnt: equ Python_PEdgesSize/4
  75++F0B6
  76++F0B6
  77++F0B6 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  78++F0BA 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  79++F0BE DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  80++F0C2 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  81++F0C6 9F 13 26 00  	DB $9F, $13, $26, $00
  82++F0CA 1F 13 26 00  	DB $1F, $13, $26, $00
  83++F0CE DF 13 26 00  	DB $DF, $13, $26, $00
  84++F0D2 5F 13 26 00  	DB $5F, $13, $26, $00
  85++F0D6 BF 19 25 0B  	DB $BF, $19, $25, $0B
  86++F0DA 3F 19 25 0B  	DB $3F, $19, $25, $0B
  87++F0DE 7F 19 25 0B  	DB $7F, $19, $25, $0B
  88++F0E2 FF 19 25 0B  	DB $FF, $19, $25, $0B
  89++F0E6 3F 00 00 70  	DB $3F, $00, $00, $70
  90++F0EA
  91++F0EA
  92++F0EA              Python_PNormalsSize: equ $ - Python_PNormals
  93++F0EA              Python_PLen: equ $ - Python_P
  94++F0EA
# file closed: ./Data/ships/Python_P.asm
  98+ F0EA
# file closed: ./Data/ShipModelMetaData2.asm
 877  F0EA                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 878  F0EA              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 879  F0EA                  SLOT    ShipModelsAddr
 880  F0EA                  PAGE    BankShipModels3
 881  F0EA              	ORG     ShipModelsAddr, BankShipModels3
 882  E000
 883  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 884  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 884  E00F 06 00       >                        ld      b,0
 884  E011 4F          >                        ld      c,a                                 ; c= original ship id
 884  E012 CB 3F       >.ShiftLoop:             srl     a
 884  E014 CB 3F       >                        srl     a
 884  E016 CB 3F       >                        srl     a
 884  E018 CB 3F       >                        srl     a                                   ; divide by 16
 884  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 884  E01B 79          >                        ld      a,c
 884  E01C 50          >                        ld      d,b
 884  E01D 1E 10       >                        ld      e,16
 884  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 884  E021 93          >                        sub     e                                   ; a= actual model id now
 884  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 884  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 884  E024 7A          >                        ld      a,d                                 ; a = bank number
 884  E025             >;.. Now b = bank and a = adjusted ship nbr
 884  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 884  E028 ED 31       >                        add     hl,a
 884  E02A ED 31       >                        add     hl,a
 884  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 884  E02D             >                        ClearCarryFlag
 884  E02D B7          >                        or a
 884  E02E C9          >                        ret
 885  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 885  E02F 2A A7 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 885  E032 11 AD C3    >                        ld          de,UBnkHullVerticies
 885  E035 06 00       >                        ld          b,0
 885  E037 3A 9B C3    >                        ld			a,(VertexCtX6Addr)
 885  E03A 4F          >                        ld          c,a
 885  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 885  E03C CD 29 7D    >                        call        memcopy_dma
 885  E03F C9          >                        ret
 886  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 886  E040 2A 95 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 886  E043 11 9D C4    >                        ld          de,UBnkHullEdges
 886  E046 06 00       >                        ld          b,0
 886  E048 3A 97 C3    >                        ld			a,(LineX4Addr)
 886  E04B 4F          >                        ld          c,a
 886  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 886  E04D CD 29 7D    >                        call        memcopy_dma
 886  E050 C9          >                        ret
 887  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 887  E051 2A A3 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 887  E054 11 65 C5    >                        ld          de,UBnkHullNormals
 887  E057 06 00       >                        ld          b,0
 887  E059 3A 9F C3    >                        ld          a,(FaceCtX4Addr)
 887  E05C 4F          >                        ld          c,a
 887  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 887  E05E CD 29 7D    >                        call        memcopy_dma
 887  E061 C9          >                        ret
 888  E062              ShipBankTable3:         MShipBankTable
 888  E062 3B 00       >                        DW      BankShipModels1
 888  E064 43 00       >                        DW      BankShipModels2
 888  E066 44 00       >                        DW      BankShipModels3
 888  E068 45 00       >                        DW      BankShipModels4
 889  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 889  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 889  E06D 36 44       >                        ld          (hl),BankShipModels3
 889  E06F F5          >                        push        af
 889  E070 FD 7D       >                        ld          a,iyl
 889  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 889  E075 F1          >                        pop         af
 889  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 889  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 889  E07C ED 31       >                        add         hl,a
 889  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 889  E080 4E          >                        ld          c,(hl)
 889  E081 23          >                        inc         hl
 889  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 889  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 889  E086 ED 31       >                        add         hl,a
 889  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 889  E08A 7E          >                        ld          a,(hl)
 889  E08B 23          >                        inc         hl
 889  E08C 66          >                        ld          h,(hl)
 889  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 889  E08E 11 92 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 889  E091 01 1B 00    >                        ld          bc,ShipDataLength
 889  E094 ED B0       >                        ldir
 889  E096 CD 2F E0    >                        call        CopyVertsToUniv
 889  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 889  E09C CD 51 E0    >                        call        CopyNormsToUniv
 889  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 889  E0A2 3E 20       >                        ld          a," "
 889  E0A4 06 10       >                        ld          b,16
 889  E0A6 77          >.fillLoop:              ld          (hl),a
 889  E0A7 23          >                        inc         hl
 889  E0A8 10 FC       >                        djnz        .fillLoop
 889  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 889  E0AD CD 14 92    >                        call        ShipIndexToAddress
 889  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 889  E0B3 06 10       >                        ld          b,16
 889  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 889  E0B6 FE 00       >                        cp          0
 889  E0B8 28 05       >                        jr          z,.CopyDone
 889  E0BA 12          >                        ld          (de),a
 889  E0BB 23          >                        inc         hl
 889  E0BC 13          >                        inc         de
 889  E0BD 10 F6       >                        djnz        .CopyLoop
 889  E0BF C9          >.CopyDone:              ret
 890  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 890  E0C0 3E 0D       >                        ld          a,13
 890  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
 890  E0C5 C9          >                        ret
 891  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 47 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 84 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC AD E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 60 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 BF E5                                 DW TestVector                              ;37  $35
   7+ E0D2 28 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 4F E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 02 E8                                 DW TransportType10                         ;40  $38
  10+ E0D8 EF E9                                 DW Viper                                   ;41  $39
  11+ E0DA D4 EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 8F EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 85 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 66 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA A3 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC CC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 7F E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 DE E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 47 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 6E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 21 E8                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 0E EA                                 DW ViperVertices                           ;41  $39
  27+ E0FA F3 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC AE EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 BB E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D8 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A 09 E4                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C 08 E5                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 97 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 08 E6                                 DW TestVectorEdges                         ;37  $35
  40+ E112 BF E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 AA E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 FF E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 68 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 2F EB                                 DW WormEdges                               ;42  $3A
  45+ E11C 08 EC                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0F E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 50 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 79 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 44 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E AF E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 18 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 27 E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 E6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 B7 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 B8 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 6F EB                                 DW WormNormals                             ;42  $3A
  62+ E13C 08 EC                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 E1 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 3D 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 29 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C B3 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5F 00                                 DW SplinterLen                             ;36  $34
  73+ E150 69 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 27 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 B3 00                                 DW ThargonLen                              ;39  $37
  76+ E156 ED 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E5 00                                 DW ViperLen                                ;41  $39
  78+ E15A BB 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 15 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 BB E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0F E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185
  28++E185
  29++E185 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  29++E189 FF FF
  30++E18B 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  30++E18F FF FF
  31++E191 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E195 FF FF
  32++E197 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  32++E19B FF FF
  33++E19D 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  33++E1A1 65 DC
  34++E1A3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  34++E1A7 FF FF
  35++E1A9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  35++E1AD 10 32
  36++E1AF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  36++E1B3 FF FF
  37++E1B5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  37++E1B9 98 BA
  38++E1BB
  39++E1BB
  40++E1BB              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  41++E1BB
  42++E1BB
  43++E1BB
  44++E1BB 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  45++E1BF 1F D6 00 10  	DB $1F, $D6, $00, $10
  46++E1C3 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  47++E1C7 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  48++E1CB 1F A3 04 08  	DB $1F, $A3, $04, $08
  49++E1CF 1F 32 04 18  	DB $1F, $32, $04, $18
  50++E1D3 1F 31 08 18  	DB $1F, $31, $08, $18
  51++E1D7 1F 41 08 14  	DB $1F, $41, $08, $14
  52++E1DB 1F 10 14 18  	DB $1F, $10, $14, $18
  53++E1DF 1F 60 00 14  	DB $1F, $60, $00, $14
  54++E1E3 1F 54 0C 14  	DB $1F, $54, $0C, $14
  55++E1E7 1F 20 00 18  	DB $1F, $20, $00, $18
  56++E1EB 1F 65 10 14  	DB $1F, $65, $10, $14
  57++E1EF 1F A8 04 20  	DB $1F, $A8, $04, $20
  58++E1F3 1F 87 04 1C  	DB $1F, $87, $04, $1C
  59++E1F7 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  60++E1FB 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  61++E1FF 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  62++E203 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  63++E207 1F BA 08 20  	DB $1F, $BA, $08, $20
  64++E20B 1F 98 1C 20  	DB $1F, $98, $1C, $20
  65++E20F
  66++E20F              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  67++E20F
  68++E20F
  69++E20F              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  70++E20F
  71++E20F
  72++E20F 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  73++E213 5F 09 42 51  	DB $5F, $09, $42, $51
  74++E217 9F 48 40 1F  	DB $9F, $48, $40, $1F
  75++E21B DF 40 49 2F  	DB $DF, $40, $49, $2F
  76++E21F 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  77++E223 1F 87 0F 23  	DB $1F, $87, $0F, $23
  78++E227 1F 26 4C 46  	DB $1F, $26, $4C, $46
  79++E22B BF 42 3B 27  	DB $BF, $42, $3B, $27
  80++E22F FF 43 0F 50  	DB $FF, $43, $0F, $50
  81++E233 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  82++E237 FF 46 50 28  	DB $FF, $46, $50, $28
  83++E23B 7F 3A 66 33  	DB $7F, $3A, $66, $33
  84++E23F 3F 51 09 43  	DB $3F, $51, $09, $43
  85++E243 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  86++E247
  87++E247
  88++E247              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  89++E247              Rock_HermitLen: equ $ - Rock_Hermit
  90++E247
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E247                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E247 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E248 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E24A D8 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E24C 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E24D 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24E 26                                       DB $26                       ; Explosion Count
   7++E24F 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E250 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E251 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E252 00 00                                    DW $0000                     ; Bounty LoHi
  11++E254 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E255 16                                       DB $16                       ; Range when it turns to a dot
  13++E256 20                                       DB $20                       ; Energy Max
  14++E257 08                                       DB $08                       ; Speed Max
  15++E258 50 E3                                    DW ShuttleType9Normals       ; Normals
  16++E25A 02                                       DB $02                       ; Q scaling
  17++E25B 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E25C 66 E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25E 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25F 00                                       DB 0                         ; NewB Tactics
  21++E260 00                                       DB 0                         ; AI Flags
  22++E261 80                                       DB $80                       ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266
  28++E266
  29++E266 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  29++E26A FF FF
  30++E26C 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  30++E270 FF FF
  31++E272 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  31++E276 FF FF
  32++E278 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  32++E27C FF FF
  33++E27E 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  33++E282 12 39
  34++E284 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  34++E288 34 59
  35++E28A 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  35++E28E 56 79
  36++E290 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  36++E294 17 89
  37++E296 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  37++E29A 99 99
  38++E29C 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  38++E2A0 99 99
  39++E2A2 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  39++E2A6 99 99
  40++E2A8 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  40++E2AC 99 99
  41++E2AE 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  41++E2B2 0A BC
  42++E2B4 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  42++E2B8 FF 02
  43++E2BA 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  43++E2BE 01 F4
  44++E2C0 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  44++E2C4 A1 3F
  45++E2C6 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  45++E2CA 6B 23
  46++E2CC 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  46++E2D0 F8 C0
  47++E2D2 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  47++E2D6 4F 18
  48++E2D8
  49++E2D8              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  50++E2D8
  51++E2D8
  52++E2D8
  53++E2D8 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  54++E2DC 1F 4A 04 08  	DB $1F, $4A, $04, $08
  55++E2E0 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  56++E2E4 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  57++E2E8 1F 18 00 1C  	DB $1F, $18, $00, $1C
  58++E2EC 18 12 00 10  	DB $18, $12, $00, $10
  59++E2F0 1F 23 04 10  	DB $1F, $23, $04, $10
  60++E2F4 18 34 04 14  	DB $18, $34, $04, $14
  61++E2F8 1F 45 08 14  	DB $1F, $45, $08, $14
  62++E2FC 0C 56 08 18  	DB $0C, $56, $08, $18
  63++E300 1F 67 0C 18  	DB $1F, $67, $0C, $18
  64++E304 18 78 0C 1C  	DB $18, $78, $0C, $1C
  65++E308 1F 39 10 14  	DB $1F, $39, $10, $14
  66++E30C 1F 59 14 18  	DB $1F, $59, $14, $18
  67++E310 1F 79 18 1C  	DB $1F, $79, $18, $1C
  68++E314 1F 19 10 1C  	DB $1F, $19, $10, $1C
  69++E318 10 0C 00 30  	DB $10, $0C, $00, $30
  70++E31C 10 0A 04 30  	DB $10, $0A, $04, $30
  71++E320 10 AB 08 30  	DB $10, $AB, $08, $30
  72++E324 10 BC 0C 30  	DB $10, $BC, $0C, $30
  73++E328 10 99 20 24  	DB $10, $99, $20, $24
  74++E32C 07 99 24 28  	DB $07, $99, $24, $28
  75++E330 09 99 28 2C  	DB $09, $99, $28, $2C
  76++E334 07 99 20 2C  	DB $07, $99, $20, $2C
  77++E338 05 BB 34 38  	DB $05, $BB, $34, $38
  78++E33C 08 BB 38 3C  	DB $08, $BB, $38, $3C
  79++E340 07 BB 34 3C  	DB $07, $BB, $34, $3C
  80++E344 05 AA 40 44  	DB $05, $AA, $40, $44
  81++E348 08 AA 44 48  	DB $08, $AA, $44, $48
  82++E34C 07 AA 40 48  	DB $07, $AA, $40, $48
  83++E350              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  84++E350              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  85++E350
  86++E350 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  87++E354 5F 00 4A 04  	DB $5F, $00, $4A, $04
  88++E358 DF 33 33 17  	DB $DF, $33, $33, $17
  89++E35C 9F 4A 00 04  	DB $9F, $4A, $00, $04
  90++E360 9F 33 33 17  	DB $9F, $33, $33, $17
  91++E364 1F 00 4A 04  	DB $1F, $00, $4A, $04
  92++E368 1F 33 33 17  	DB $1F, $33, $33, $17
  93++E36C 1F 4A 00 04  	DB $1F, $4A, $00, $04
  94++E370 5F 33 33 17  	DB $5F, $33, $33, $17
  95++E374 3F 00 00 6B  	DB $3F, $00, $00, $6B
  96++E378 9F 29 29 5A  	DB $9F, $29, $29, $5A
  97++E37C 1F 29 29 5A  	DB $1F, $29, $29, $5A
  98++E380 5F 37 37 28  	DB $5F, $37, $37, $28
  99++E384
 100++E384
 101++E384              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
 102++E384              ShuttleType9Len: equ $ - ShuttleType9
 103++E384
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E384                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E384 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E385 C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E387 09 E4                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E389 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E38A 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E38B 26                                   DB $26                         ; Explosion Count
   7++E38C 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E38D 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E38E 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E38F 00 00                                DW $0000                       ; Bounty LoHi
  11++E391 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E392 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E393 20                                   DB $20                         ; Energy Max
  14++E394 09                                   DB $09                         ; Speed Max
  15++E395 79 E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E397 02                                   DB $02                         ; Q scaling
  17++E398 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E399 A3 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E39B 00                                   DB ShipTypeNormal              ; Ship Type
  20++E39C 00                                   DB 0                           ; NewB Tactics
  21++E39D 00                                   DB 0                           ; AI Flags
  22++E39E 80                                   DB $80                         ; chance of ECM module
  23++E39F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3A0 00 00                                DW $0000                            ; no solid data
  25++E3A2 00                                   DB $00                              ; no solid data
  26++E3A3
  27++E3A3
  28++E3A3
  29++E3A3 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  29++E3A7 23 01
  30++E3A9 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  30++E3AD 34 00
  31++E3AF 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  31++E3B3 15 00
  32++E3B5 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  32++E3B9 26 11
  33++E3BB 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  33++E3BF 37 22
  34++E3C1 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  34++E3C5 58 04
  35++E3C7 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  35++E3CB 69 15
  36++E3CD 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  36++E3D1 7A 26
  37++E3D3 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  37++E3D7 7B 34
  38++E3D9 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  38++E3DD BC 48
  39++E3DF 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  39++E3E3 9C 58
  40++E3E5 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  40++E3E9 AC 69
  41++E3EB 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  41++E3EF BC 7A
  42++E3F1 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  42++E3F5 CC CC
  43++E3F7 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  43++E3FB CC CC
  44++E3FD 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  44++E401 CC CC
  45++E403 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  45++E407 CC CC
  46++E409
  47++E409              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  48++E409
  49++E409
  50++E409
  51++E409 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  52++E40D 1F 12 00 0C  	DB $1F, $12, $00, $0C
  53++E411 1F 23 00 10  	DB $1F, $23, $00, $10
  54++E415 1F 30 00 04  	DB $1F, $30, $00, $04
  55++E419 1F 04 04 14  	DB $1F, $04, $04, $14
  56++E41D 1F 05 08 14  	DB $1F, $05, $08, $14
  57++E421 1F 15 08 18  	DB $1F, $15, $08, $18
  58++E425 1F 16 0C 18  	DB $1F, $16, $0C, $18
  59++E429 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  60++E42D 1F 27 10 1C  	DB $1F, $27, $10, $1C
  61++E431 1F 37 10 20  	DB $1F, $37, $10, $20
  62++E435 1F 34 04 20  	DB $1F, $34, $04, $20
  63++E439 1F 48 14 24  	DB $1F, $48, $14, $24
  64++E43D 1F 58 14 28  	DB $1F, $58, $14, $28
  65++E441 1F 59 18 28  	DB $1F, $59, $18, $28
  66++E445 1F 69 18 2C  	DB $1F, $69, $18, $2C
  67++E449 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  68++E44D 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  69++E451 1F 7B 20 30  	DB $1F, $7B, $20, $30
  70++E455 1F 4B 20 24  	DB $1F, $4B, $20, $24
  71++E459 1F 8C 24 28  	DB $1F, $8C, $24, $28
  72++E45D 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  73++E461 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  74++E465 1F BC 30 24  	DB $1F, $BC, $30, $24
  75++E469 0A CC 34 38  	DB $0A, $CC, $34, $38
  76++E46D 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  77++E471 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  78++E475 0A CC 40 34  	DB $0A, $CC, $40, $34
  79++E479
  80++E479              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  81++E479
  82++E479
  83++E479              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  84++E479
  85++E479
  86++E479 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  87++E47D DF 27 27 4E  	DB $DF, $27, $27, $4E
  88++E481 5F 27 27 4E  	DB $5F, $27, $27, $4E
  89++E485 1F 27 27 4E  	DB $1F, $27, $27, $4E
  90++E489 1F 00 60 00  	DB $1F, $00, $60, $00
  91++E48D 9F 60 00 00  	DB $9F, $60, $00, $00
  92++E491 5F 00 60 00  	DB $5F, $00, $60, $00
  93++E495 1F 60 00 00  	DB $1F, $60, $00, $00
  94++E499 BF 42 42 16  	DB $BF, $42, $42, $16
  95++E49D FF 42 42 16  	DB $FF, $42, $42, $16
  96++E4A1 7F 42 42 16  	DB $7F, $42, $42, $16
  97++E4A5 3F 42 42 16  	DB $3F, $42, $42, $16
  98++E4A9 3F 00 00 60  	DB $3F, $00, $00, $60
  99++E4AD
 100++E4AD
 101++E4AD              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
 102++E4AD              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
 103++E4AD
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4AD                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4AD 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4AE 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4B0 08 E5                                DW SidewinderEdges          ; Edge Data
   4++E4B2 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4B3 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4B4 1E                                   DB $1E                      ; Explosion Count
   7++E4B5 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4B6 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4B7 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4B8 32 00                                DW $0032                    ; Bounty LoHi
  11++E4BA 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4BB 14                                   DB $14                      ; Range when it turns to a dot
  13++E4BC 46                                   DB $46                      ; Energy Max
  14++E4BD 25                                   DB $25                      ; Speed Max
  15++E4BE 44 E5                                DW SidewinderNormals        ; Normals
  16++E4C0 02                                   DB $02                      ; Q scaling
  17++E4C1 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4C2 CC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4C4 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4C5 00                                   DB 0                        ; NewB Tactics
  21++E4C6 80                                   DB ShipCanAnger             ; AI Flags
  22++E4C7 30                                   DB $30                      ; chance of ECM module
  23++E4C8 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4C9 00 00                                DW $0000                            ; no solid data
  25++E4CB 00                                   DB $00                              ; no solid data
  26++E4CC
  27++E4CC
  28++E4CC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  28++E4D0 10 54
  29++E4D2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  29++E4D6 20 65
  30++E4D8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  30++E4DC 32 66
  31++E4DE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  31++E4E2 31 44
  32++E4E4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  32++E4E8 10 32
  33++E4EA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  33++E4EE 43 65
  34++E4F0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  34++E4F4 33 33
  35++E4F6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  35++E4FA 33 33
  36++E4FC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  36++E500 33 33
  37++E502 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  37++E506 33 33
  38++E508
  39++E508
  40++E508              SidewinderVertSize: equ $ - SidewinderVertices
  41++E508
  42++E508
  43++E508
  44++E508 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  45++E50C 1F 62 04 08  	DB $1F, $62, $04, $08
  46++E510 1F 20 04 10  	DB $1F, $20, $04, $10
  47++E514 1F 10 00 10  	DB $1F, $10, $00, $10
  48++E518 1F 41 00 0C  	DB $1F, $41, $00, $0C
  49++E51C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  50++E520 1F 32 08 10  	DB $1F, $32, $08, $10
  51++E524 1F 43 0C 14  	DB $1F, $43, $0C, $14
  52++E528 1F 63 08 14  	DB $1F, $63, $08, $14
  53++E52C 1F 65 04 14  	DB $1F, $65, $04, $14
  54++E530 1F 54 00 14  	DB $1F, $54, $00, $14
  55++E534 0F 33 18 1C  	DB $0F, $33, $18, $1C
  56++E538 0C 33 1C 20  	DB $0C, $33, $1C, $20
  57++E53C 0C 33 18 24  	DB $0C, $33, $18, $24
  58++E540 0C 33 20 24  	DB $0C, $33, $20, $24
  59++E544
  60++E544              SidewinderEdgesSize: equ $ - SidewinderEdges
  61++E544
  62++E544
  63++E544              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  64++E544
  65++E544
  66++E544 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  67++E548 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  68++E54C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  69++E550 3F 00 00 70  	DB $3F, $00, $00, $70
  70++E554 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  71++E558 5F 00 20 08  	DB $5F, $00, $20, $08
  72++E55C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  73++E560
  74++E560
  75++E560              SidewinderNormalsSize: equ $ - SidewinderNormals
  76++E560              SidewinderLen: equ $ - Sidewinder
  77++E560
# file closed: ./Data/ships/Sidewinder.asm
  89+ E560                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E560 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E561 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E563 97 E5                                DW SplinterEdges            ; Edge Data
   4++E565 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E566 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E567 16                                   DB $16                      ; Explosion Count
   7++E568 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E569 18                                   DB SplinterVertSize         ; Vertex Count
   9++E56A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E56B 00 00                                DW $0000                    ; Bounty LoHi
  11++E56D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E56E 08                                   DB $08                      ; Range when it turns to a dot
  13++E56F 14                                   DB $14                      ; Energy Max
  14++E570 0A                                   DB $0A                      ; Speed Max
  15++E571 AF E5                                DW SplinterNormals          ; Normals
  16++E573 05                                   DB $05                      ; Q scaling
  17++E574 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E575 7F E5                                DW SplinterVertices         ; Verticles Address
  19++E577 00                                   DB ShipTypeNormal           ; Ship Type
  20++E578 00                                   DB 0                        ; NewB Tactics
  21++E579 00                                   DB 0                        ; AI Flags
  22++E57A 00                                   DB $00                      ; chance of ECM module
  23++E57B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E57C 00 00                                DW $0000                            ; no solid data
  25++E57E 00                                   DB $00                              ; no solid data
  26++E57F
  27++E57F
  28++E57F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  28++E583 12 33
  29++E585 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  29++E589 02 33
  30++E58B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  30++E58F 01 33
  31++E591 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  31++E595 01 22
  32++E597              SplinterVertSize:       equ $ - SplinterVertices
  33++E597 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  34++E59B 1F 03 04 08                          DB $1F, $03, $04, $08
  35++E59F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  36++E5A3 1F 12 0C 00                          DB $1F, $12, $0C, $00
  37++E5A7 1F 13 00 08                          DB $1F, $13, $00, $08
  38++E5AB 1F 02 0C 04                          DB $1F, $02, $0C, $04
  39++E5AF              SplinterEdgesSize:      equ $ - SplinterEdges
  40++E5AF              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  41++E5AF 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  42++E5B3 1F 03 04 08                          DB $1F, $03, $04, $08
  43++E5B7 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++E5BB 1F 12 0C 00                          DB $1F, $12, $0C, $00
  45++E5BF              SplinterNormalsSize:    equ $ - SplinterNormals
  46++E5BF              SplinterLen:            equ $ - Splinter
  47++E5BF
# file closed: ./Data/ships/Splinter.asm
  90+ E5BF                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5BF 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5C0 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5C2 08 E6                                DW TestVectorEdges          ; Edge Data
   4++E5C4 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5C5 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5C6 2A                                   DB $2A                      ; Explosion Count
   7++E5C7 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5C8 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5C9 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5CA 00 00                                DW $0000                    ; Bounty LoHi
  11++E5CC 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5CD 32                                   DB $32                      ; Range when it turns to a dot
  13++E5CE 96                                   DB $96                      ; Energy Max
  14++E5CF 1C                                   DB $1C                      ; Speed Max
  15++E5D0 18 E6                                DW TestVectorNormals        ; Normals
  16++E5D2 04                                   DB $04                      ; Q scaling
  17++E5D3 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5D4 DE E5                                DW TestVectorVertices       ; Verticles Address
  19++E5D6 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5D7 00                                   DB 0                        ; NewB Tactics
  21++E5D8 00                                   DB 0                        ; AI Flags
  22++E5D9 00                                   DB $00                      ; chance of ECM module
  23++E5DA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5DB 00 00                                DW $0000                            ; no solid data
  25++E5DD 00                                   DB $00                              ; no solid data
  26++E5DE
  27++E5DE
  28++E5DE 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  28++E5E2 00 00
  29++E5E4 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  29++E5E8 00 00
  30++E5EA 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  30++E5EE 01 01
  31++E5F0 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  31++E5F4 01 01
  32++E5F6 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  32++E5FA 02 02
  33++E5FC 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  33++E600 02 02
  34++E602 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  34++E606 03 03
  35++E608              TestVectorVertSize      equ $  - TestVectorVertices
  36++E608 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  37++E60C 1F 00 08 0C                          DB $1F,$00,$08,$0C
  38++E610 1F 00 10 14                          DB $1F,$00,$10,$14
  39++E614 1F 00 18 18                          DB $1F,$00,$18,$18
  40++E618              TestVectorEdgesSize     equ $  - TestVectorEdges
  41++E618              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  42++E618              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  43++E618 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  44++E61C 1F 10 00 00                          DB $1F,$10,$00,$00
  45++E620 1F 00 00 10                          DB $1F,$00,$00,$10
  46++E624 1F 00 00 10                          DB $1F,$00,$00,$10
  47++E628              TestVectorNormalsSize   equ $  - TestVectorNormals
  48++E628              TestVectorLen           equ $  - TestVector
  49++E628
# file closed: ./Data/ships/TestVector.asm
  91+ E628                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E628 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E629 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E62B BF E6                                DW ThargoidEdges                                            ; Edge Data
   4++E62D 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E62E 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E62F 26                                   DB $26                                                      ; Explosion Count
   7++E630 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E631 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E632 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E633 F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E635 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E636 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E637 F0                                   DB $F0                                                      ; Energy Max
  14++E638 27                                   DB $27                                                      ; Speed Max
  15++E639 27 E7                                DW ThargoidNormals                                          ; Normals
  16++E63B 02                                   DB $02                                                      ; Q scaling
  17++E63C 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E63D 47 E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E63F 00                                   DB 0                                                        ; Ship Type
  20++E640 00                                   DB 0                                                        ; NewB Tactics
  21++E641 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E642 FF                                   DB $FF                                                      ; chance of ECM module
  23++E643 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E644 00 00                                DW $0000                            ; no solid data
  25++E646 00                                   DB $00                              ; no solid data
  26++E647
  27++E647
  28++E647 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  28++E64B 40 88
  29++E64D 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  29++E651 10 44
  30++E653 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  30++E657 21 44
  31++E659 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  31++E65D 32 44
  32++E65F 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  32++E663 43 55
  33++E665 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  33++E669 54 66
  34++E66B 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  34++E66F 64 77
  35++E671 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  35++E675 74 88
  36++E677 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  36++E67B 80 99
  37++E67D 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  37++E681 10 99
  38++E683 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  38++E687 21 99
  39++E689 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  39++E68D 32 99
  40++E68F 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  40++E693 53 99
  41++E695 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  41++E699 65 99
  42++E69B 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  42++E69F 76 99
  43++E6A1 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  43++E6A5 87 99
  44++E6A7 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  44++E6AB 99 99
  45++E6AD 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  45++E6B1 99 99
  46++E6B3 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  46++E6B7 99 99
  47++E6B9 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  47++E6BD 99 99
  48++E6BF
  49++E6BF              ThargoidVertSize: equ $ - ThargoidVertices
  50++E6BF
  51++E6BF
  52++E6BF
  53++E6BF 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  54++E6C3 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  55++E6C7 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  56++E6CB 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  57++E6CF 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  58++E6D3 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  59++E6D7 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  60++E6DB 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  61++E6DF 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  62++E6E3 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  63++E6E7 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  64++E6EB 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  65++E6EF 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  66++E6F3 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  67++E6F7 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  68++E6FB 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  69++E6FF 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  70++E703 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  71++E707 1F 91 24 28                  DB $1F, $91, $24, $28
  72++E70B 1F 92 28 2C                  DB $1F, $92, $28, $2C
  73++E70F 1F 93 2C 30                  DB $1F, $93, $2C, $30
  74++E713 1F 95 30 34                  DB $1F, $95, $30, $34
  75++E717 1F 96 34 38                  DB $1F, $96, $34, $38
  76++E71B 1F 97 38 3C                  DB $1F, $97, $38, $3C
  77++E71F 1E 99 40 44                  DB $1E, $99, $40, $44
  78++E723 1E 99 48 4C                  DB $1E, $99, $48, $4C
  79++E727
  80++E727              ThargoidEdgesSize: equ $ - ThargoidEdges
  81++E727
  82++E727              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  83++E727
  84++E727 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  85++E72B 7F 67 3C 19  	DB $7F, $67, $3C, $19
  86++E72F 7F 67 19 3C  	DB $7F, $67, $19, $3C
  87++E733 3F 67 19 3C  	DB $3F, $67, $19, $3C
  88++E737 1F 40 00 00  	DB $1F, $40, $00, $00
  89++E73B 3F 67 3C 19  	DB $3F, $67, $3C, $19
  90++E73F 1F 67 3C 19  	DB $1F, $67, $3C, $19
  91++E743 1F 67 19 3C  	DB $1F, $67, $19, $3C
  92++E747 5F 67 19 3C  	DB $5F, $67, $19, $3C
  93++E74B 9F 30 00 00  	DB $9F, $30, $00, $00
  94++E74F
  95++E74F
  96++E74F              ThargoidNormalsSize: equ $ - ThargoidNormals
  97++E74F              ThargoidLen: equ $ - Thargoid
  98++E74F
# file closed: ./Data/ships/Thargoid.asm
  92+ E74F                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E74F F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E750 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E752 AA E7                                DW ThargonEdges                 ; Edge Data
   4++E754 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E755 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E756 12                                   DB $12                          ; Explosion Count
   7++E757 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E758 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E759 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E75A 32 00                                DW $0032                        ; Bounty LoHi
  11++E75C 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E75D 14                                   DB $14                          ; Range when it turns to a dot
  13++E75E 14                                   DB $14                          ; Energy Max
  14++E75F 1E                                   DB $1E                          ; Speed Max
  15++E760 E6 E7                                DW ThargonNormals               ; Normals
  16++E762 02                                   DB $02                          ; Q scaling
  17++E763 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E764 6E E7                                DW ThargonVertices              ; Verticles Address
  19++E766 00                                   DB 0                            ; Ship Type
  20++E767 00                                   DB 0                            ; NewB Tactics
  21++E768 80                                   DB ShipCanAnger                 ; AI Flags
  22++E769 00                                   DB $00                          ; chance of ECM module
  23++E76A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E76B 00 00                                DW $0000                            ; no solid data
  25++E76D 00                                   DB $00                              ; no solid data
  26++E76E
  27++E76E
  28++E76E
  29++E76E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  29++E772 01 55
  30++E774 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  30++E778 01 22
  31++E77A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  31++E77E 02 33
  32++E780 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  32++E784 03 44
  33++E786 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  33++E78A 04 55
  34++E78C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  34++E790 15 66
  35++E792 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  35++E796 12 66
  36++E798 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  36++E79C 23 66
  37++E79E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  37++E7A2 34 66
  38++E7A4 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  38++E7A8 45 66
  39++E7AA
  40++E7AA              ThargonVertSize:        equ $ - ThargonVertices
  41++E7AA
  42++E7AA
  43++E7AA 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  44++E7AE 1F 20 04 08                          DB $1F, $20, $04, $08
  45++E7B2 1F 30 08 0C                          DB $1F, $30, $08, $0C
  46++E7B6 1F 40 0C 10                          DB $1F, $40, $0C, $10
  47++E7BA 1F 50 00 10                          DB $1F, $50, $00, $10
  48++E7BE 1F 51 00 14                          DB $1F, $51, $00, $14
  49++E7C2 1F 21 04 18                          DB $1F, $21, $04, $18
  50++E7C6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  51++E7CA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  52++E7CE 1F 54 10 24                          DB $1F, $54, $10, $24
  53++E7D2 1F 61 14 18                          DB $1F, $61, $14, $18
  54++E7D6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  55++E7DA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  56++E7DE 1F 64 20 24                          DB $1F, $64, $20, $24
  57++E7E2 1F 65 24 14                          DB $1F, $65, $24, $14
  58++E7E6
  59++E7E6              ThargonEdgesSize:       equ $ - ThargonEdges
  60++E7E6
  61++E7E6
  62++E7E6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  63++E7E6
  64++E7E6
  65++E7E6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  66++E7EA 5F 14 05 07                          DB $5F, $14, $05, $07
  67++E7EE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  68++E7F2 3F 24 00 68                          DB $3F, $24, $00, $68
  69++E7F6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  70++E7FA 1F 14 05 07                          DB $1F, $14, $05, $07
  71++E7FE 1F 24 00 00                          DB $1F, $24, $00, $00
  72++E802
  73++E802
  74++E802              ThargonNormalsSize:     equ $ - ThargonNormals
  75++E802              ThargonLen:             equ $ - Thargon
  76++E802
# file closed: ./Data/ships/Thargon.asm
  93+ E802                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E802 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E803 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E805 FF E8                                DW TransportType10Edges            ; Edge Data
   4++E807 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E808 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E809 1A                                   DB $1A                             ; Explosion Count
   7++E80A 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E80B DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E80C 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E80D 00 00                                DW $0000                           ; Bounty LoHi
  11++E80F 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E810 10                                   DB $10                             ; Range when it turns to a dot
  13++E811 20                                   DB $20                             ; Energy Max
  14++E812 0A                                   DB $0A                             ; Speed Max
  15++E813 B7 E9                                DW TransportType10Normals          ; Normals
  16++E815 02                                   DB $02                             ; Q scaling
  17++E816 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E817 21 E8                                DW TransportType10Vertices         ; Verticles Address
  19++E819 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E81A 00                                   DB 0                               ; NewB Tactics
  21++E81B 00                                   DB 0                               ; AI Flags
  22++E81C FF                                   DB $FF                             ; chance of ECM module
  23++E81D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E81E 00 00                                DW $0000                            ; no solid data
  25++E820 00                                   DB $00                              ; no solid data
  26++E821
  27++E821
  28++E821 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  28++E825 06 77
  29++E827 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  29++E82B 01 77
  30++E82D 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  30++E831 01 22
  31++E833 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  31++E837 02 33
  32++E839 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  32++E83D 03 44
  33++E83F 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  33++E843 04 55
  34++E845 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  34++E849 05 66
  35++E84B 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  35++E84F FF FF
  36++E851 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  36++E855 17 89
  37++E857 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  37++E85B 12 39
  38++E85D 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  38++E861 34 5A
  39++E863 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  39++E867 56 AB
  40++E869 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  40++E86D 89 CD
  41++E86F 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  41++E873 39 DD
  42++E875 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  42++E879 3A DD
  43++E87B 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  43++E87F AB CD
  44++E881 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  44++E885 77 77
  45++E887 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  45++E88B 77 77
  46++E88D 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  46++E891 77 77
  47++E893 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  47++E897 77 77
  48++E899 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  48++E89D 77 77
  49++E89F 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  49++E8A3 77 77
  50++E8A5 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  50++E8A9 66 66
  51++E8AB 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  51++E8AF 66 66
  52++E8B1 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  52++E8B5 66 66
  53++E8B7 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  53++E8BB 66 66
  54++E8BD 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  54++E8C1 66 66
  55++E8C3 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  55++E8C7 66 66
  56++E8C9 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  56++E8CD 66 66
  57++E8CF 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  57++E8D3 33 33
  58++E8D5 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  58++E8D9 33 33
  59++E8DB 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  59++E8DF 33 33
  60++E8E1 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  60++E8E5 33 33
  61++E8E7 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  61++E8EB 00 00
  62++E8ED 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  62++E8F1 00 00
  63++E8F3 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  63++E8F7 00 00
  64++E8F9 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  64++E8FD 00 00
  65++E8FF
  66++E8FF              TransportType10VertSize: equ $ - TransportType10Vertices
  67++E8FF
  68++E8FF
  69++E8FF
  70++E8FF 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  71++E903 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  72++E907 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  73++E90B 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  74++E90F 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  75++E913 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  76++E917 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  77++E91B 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  78++E91F 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  79++E923 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  80++E927 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  81++E92B 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  82++E92F 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  83++E933 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  84++E937 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  85++E93B 11 19 20 24                          DB $11, $19, $20, $24               ;16
  86++E93F 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  87++E943 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  88++E947 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  89++E94B 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  90++E94F 10 89 20 30                          DB $10, $89, $20, $30               ;21
  91++E953 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  92++E957 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  93++E95B 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  94++E95F 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  95++E963 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  96++E967 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  97++E96B 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  98++E96F 07 77 40 44                          DB $07, $77, $40, $44               ;29
  99++E973 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
 100++E977 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
 101++E97B 07 77 48 50                          DB $07, $77, $48, $50               ;32
 102++E97F 07 77 50 54                          DB $07, $77, $50, $54               ;33
 103++E983 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 104++E987 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 105++E98B 07 66 60 58                          DB $07, $66, $60, $58               ;36
 106++E98F 07 66 64 68                          DB $07, $66, $64, $68               ;37
 107++E993 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 108++E997 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 109++E99B 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 110++E99F 06 33 74 78                          DB $06, $33, $74, $78               ;41
 111++E9A3 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 112++E9A7 08 00 84 88                          DB $08, $00, $84, $88               ;43
 113++E9AB 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 114++E9AF 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 115++E9B3 05 00 90 84                          DB $05, $00, $90, $84               ;46
 116++E9B7
 117++E9B7              TransportType10EdgesSize: equ $ - TransportType10Edges
 118++E9B7
 119++E9B7
 120++E9B7              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 121++E9B7
 122++E9B7
 123++E9B7 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 124++E9BB BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 125++E9BF FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 126++E9C3 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 127++E9C7 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 128++E9CB 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 129++E9CF 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 130++E9D3 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 131++E9D7 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 132++E9DB 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 133++E9DF 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 134++E9E3 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 135++E9E7 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 136++E9EB 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 137++E9EF
 138++E9EF
 139++E9EF              TransportType10NormalsSize: equ $ - TransportType10Normals
 140++E9EF              TransportType10Len: equ $ - TransportType10
 141++E9EF
# file closed: ./Data/ships/TransportType10.asm
  94+ E9EF                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9EF 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9F0 F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9F2 68 EA                                DW ViperEdges                  ; Edge Data
   4++E9F4 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9F5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9F6 2A                                   DB $2A                         ; Explosion Count
   7++E9F7 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9F8 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9F9 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9FA 00 00                                DW $0000                       ; Bounty LoHi
  11++E9FC 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9FD 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++E9FE 64                                   DB $64                         ; Energy Max
  14++E9FF 20                                   DB $20                         ; Speed Max
  15++EA00 B8 EA                                DW ViperNormals                ; Normals
  16++EA02 01                                   DB $01                         ; Q scaling
  17++EA03 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++EA04 0E EA                                DW ViperVertices               ; Verticles Address
  19++EA06 00                                   DB ShipTypeNormal              ; Ship Type
  20++EA07 00                                   DB 0                           ; NewB Tactics
  21++EA08 80                                   DB ShipCanAnger                ; AI Flags
  22++EA09 FF                                   DB $FF                         ; chance of ECM module
  23++EA0A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EA0B 00 00                                DW $0000                            ; no solid data
  25++EA0D 00                                   DB $00                              ; no solid data
  26++EA0E
  27++EA0E
  28++EA0E 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  28++EA12 21 43
  29++EA14 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  29++EA18 10 22
  30++EA1A 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  30++EA1E 43 55
  31++EA20 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  31++EA24 42 66
  32++EA26 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  32++EA2A 31 66
  33++EA2C 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  33++EA30 54 66
  34++EA32 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  34++EA36 35 66
  35++EA38 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  35++EA3C 20 66
  36++EA3E 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  36++EA42 10 66
  37++EA44 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  37++EA48 66 66
  38++EA4A 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  38++EA4E 66 66
  39++EA50 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  39++EA54 66 66
  40++EA56 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  40++EA5A 66 66
  41++EA5C 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  41++EA60 66 66
  42++EA62 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  42++EA66 66 66
  43++EA68              ViperVertSize           equ $  - ViperVertices
  44++EA68 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  44++EA6C 1E 21 00 04
  45++EA70 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  45++EA74 1F 31 00 10
  46++EA78 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  46++EA7C 1E 10 04 20
  47++EA80 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  47++EA84 1E 53 08 18
  48++EA88 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  48++EA8C 1E 65 14 18
  49++EA90 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  49++EA94 1E 63 10 18
  50++EA98 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  50++EA9C 1E 46 0C 14
  51++EAA0 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  51++EAA4 12 66 24 34
  52++EAA8 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  52++EAAC 12 66 28 38
  53++EAB0 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  53++EAB4 10 66 30 34
  54++EAB8              ViperEdgesSize          equ $  - ViperEdges
  55++EAB8              ViperEdgesCnt           equ ViperEdgesSize/4
  56++EAB8 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  56++EABC 9F 16 21 0B
  57++EAC0 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  57++EAC4 DF 16 21 0B
  58++EAC8 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  58++EACC 5F 00 20 00
  59++EAD0 3F 00 00 30                          DB $3F, $00, $00, $30
  60++EAD4              ViperNormalsSize        equ $  - ViperNormals
  61++EAD4              ViperLen                equ $  - Viper
  62++EAD4
# file closed: ./Data/ships/Viper.asm
  95+ EAD4                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAD4 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAD5 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAD7 2F EB                                DW WormEdges                ; Edge Data
   4++EAD9 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EADA 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EADB 12                                   DB $12                      ; Explosion Count
   7++EADC 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EADD 3C                                   DB WormVertSize             ; Vertex Count
   9++EADE 10                                   DB WormEdgesCnt             ; Edges Count
  10++EADF 00 00                                DW $0000                    ; Bounty LoHi
  11++EAE1 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EAE2 13                                   DB $13                      ; Range when it turns to a dot
  13++EAE3 1E                                   DB $1E                      ; Energy Max
  14++EAE4 17                                   DB $17                      ; Speed Max
  15++EAE5 6F EB                                DW WormNormals              ; Normals
  16++EAE7 03                                   DB $03                      ; Q scaling
  17++EAE8 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAE9 F3 EA                                DW WormVertices             ; Verticles Address
  19++EAEB 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAEC 00                                   DB 0                        ; NewB Tactics
  21++EAED 80                                   DB ShipCanAnger             ; AI Flags
  22++EAEE B0                                   DB $B0                      ; chance of ECM module
  23++EAEF FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EAF0 00 00                                DW $0000                            ; no solid data
  25++EAF2 00                                   DB $00                              ; no solid data
  26++EAF3
  27++EAF3 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  27++EAF7 02 77
  28++EAF9 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  28++EAFD 03 77
  29++EAFF 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  29++EB03 01 24
  30++EB05 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  30++EB09 01 35
  31++EB0B 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  31++EB0F 24 77
  32++EB11 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  32++EB15 35 77
  33++EB17 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  33++EB1B 46 77
  34++EB1D 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  34++EB21 56 77
  35++EB23 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  35++EB27 14 66
  36++EB29 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  36++EB2D 15 66
  37++EB2F
  38++EB2F              WormVertSize: equ $ - WormVertices
  39++EB2F
  40++EB2F
  41++EB2F 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  42++EB33 1F 37 04 14                          DB $1F, $37, $04, $14
  43++EB37 1F 57 14 1C                          DB $1F, $57, $14, $1C
  44++EB3B 1F 67 1C 18                          DB $1F, $67, $1C, $18
  45++EB3F 1F 47 18 10                          DB $1F, $47, $18, $10
  46++EB43 1F 27 10 00                          DB $1F, $27, $10, $00
  47++EB47 1F 02 00 08                          DB $1F, $02, $00, $08
  48++EB4B 1F 03 04 0C                          DB $1F, $03, $04, $0C
  49++EB4F 1F 24 10 08                          DB $1F, $24, $10, $08
  50++EB53 1F 35 14 0C                          DB $1F, $35, $14, $0C
  51++EB57 1F 14 08 20                          DB $1F, $14, $08, $20
  52++EB5B 1F 46 20 18                          DB $1F, $46, $20, $18
  53++EB5F 1F 15 0C 24                          DB $1F, $15, $0C, $24
  54++EB63 1F 56 24 1C                          DB $1F, $56, $24, $1C
  55++EB67 1F 01 08 0C                          DB $1F, $01, $08, $0C
  56++EB6B 1F 16 20 24                          DB $1F, $16, $20, $24
  57++EB6F
  58++EB6F              WormEdgesSize: equ $ - WormEdges
  59++EB6F
  60++EB6F
  61++EB6F              WormEdgesCnt: equ WormEdgesSize/4
  62++EB6F
  63++EB6F
  64++EB6F 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  65++EB73 1F 00 45 0E                          DB $1F, $00, $45, $0E
  66++EB77 1F 46 42 23                          DB $1F, $46, $42, $23
  67++EB7B 9F 46 42 23                          DB $9F, $46, $42, $23
  68++EB7F 1F 40 31 0E                          DB $1F, $40, $31, $0E
  69++EB83 9F 40 31 0E                          DB $9F, $40, $31, $0E
  70++EB87 3F 00 00 C8                          DB $3F, $00, $00, $C8
  71++EB8B 5F 00 50 00                          DB $5F, $00, $50, $00
  72++EB8F
  73++EB8F
  74++EB8F              WormNormalsSize: equ $ - WormNormals
  75++EB8F              WormLen: equ $ - Worm
  76++EB8F
# file closed: ./Data/ships/Worm.asm
  96+ EB8F                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB8F 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB90 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB92 08 EC                                DW RattlerEdges              ; Edge Data
   4++EB94 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB95 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB96 2A                                   DB $2A                       ; Explosion Count
   7++EB97 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB98 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB99 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB9A 96 00                                DW $0096                     ; Bounty LoHi
  11++EB9C 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB9D 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB9E 71                                   DB $71                       ; Energy Max
  14++EB9F 1F                                   DB $1F                       ; Speed Max
  15++EBA0 70 EC                                DW RattlerNormals            ; Normals
  16++EBA2 01                                   DB $01                       ; Q scaling
  17++EBA3 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EBA4 AE EB                                DW RattlerVertices           ; Verticles Address
  19++EBA6 00                                   DB ShipTypeNormal            ; Ship Type
  20++EBA7 00                                   DB 0                         ; NewB Tactics
  21++EBA8 80                                   DB ShipCanAnger              ; AI Flags
  22++EBA9 90                                   DB $90                       ; chance of ECM module
  23++EBAA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBAB 00 00                                DW $0000                            ; no solid data
  25++EBAD 00                                   DB $00                              ; no solid data
  26++EBAE
  27++EBAE
  28++EBAE
  29++EBAE 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  29++EBB2 89 23
  30++EBB4 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  30++EBB8 9A 34
  31++EBBA 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  31++EBBE 78 12
  32++EBC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  32++EBC4 AB 45
  33++EBC6 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  33++EBCA 67 01
  34++EBCC 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  34++EBD0 CC 5B
  35++EBD2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  35++EBD6 CC 06
  36++EBD8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  36++EBDC FF FF
  37++EBDE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  37++EBE2 FF FF
  38++EBE4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  38++EBE8 CC CC
  39++EBEA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  39++EBEE CC CC
  40++EBF0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  40++EBF4 CC CC
  41++EBF6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  41++EBFA CC CC
  42++EBFC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  42++EC00 CC CC
  43++EC02 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  43++EC06 CC CC
  44++EC08
  45++EC08              RattlerVertSize: equ $ - RattlerVertices
  46++EC08
  47++EC08
  48++EC08 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  49++EC0C 1F 17 08 10  	DB $1F, $17, $08, $10
  50++EC10 1F 28 00 08  	DB $1F, $28, $00, $08
  51++EC14 1F 39 00 04  	DB $1F, $39, $00, $04
  52++EC18 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  53++EC1C 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  54++EC20 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  55++EC24 1F 6C 18 20  	DB $1F, $6C, $18, $20
  56++EC28 1F 01 10 1C  	DB $1F, $01, $10, $1C
  57++EC2C 1F 67 10 20  	DB $1F, $67, $10, $20
  58++EC30 1F 12 08 1C  	DB $1F, $12, $08, $1C
  59++EC34 1F 78 08 20  	DB $1F, $78, $08, $20
  60++EC38 1F 23 00 1C  	DB $1F, $23, $00, $1C
  61++EC3C 1F 89 00 20  	DB $1F, $89, $00, $20
  62++EC40 1F 34 04 1C  	DB $1F, $34, $04, $1C
  63++EC44 1F 9A 04 20  	DB $1F, $9A, $04, $20
  64++EC48 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  65++EC4C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  66++EC50 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  67++EC54 1F BC 14 20  	DB $1F, $BC, $14, $20
  68++EC58 0A CC 24 28  	DB $0A, $CC, $24, $28
  69++EC5C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  70++EC60 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  71++EC64 0A CC 30 34  	DB $0A, $CC, $30, $34
  72++EC68 0A CC 34 38  	DB $0A, $CC, $34, $38
  73++EC6C 0A CC 38 30  	DB $0A, $CC, $38, $30
  74++EC70
  75++EC70              RattlerEdgesSize: equ $ - RattlerEdges
  76++EC70
  77++EC70
  78++EC70              RattlerEdgesCnt: equ RattlerEdgesSize/4
  79++EC70
  80++EC70
  81++EC70 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  82++EC74 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  83++EC78 9F 09 5D 12  	DB $9F, $09, $5D, $12
  84++EC7C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  85++EC80 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  86++EC84 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  87++EC88 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  88++EC8C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  89++EC90 DF 09 5D 12  	DB $DF, $09, $5D, $12
  90++EC94 5F 09 5D 12  	DB $5F, $09, $5D, $12
  91++EC98 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  92++EC9C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  93++ECA0 3F 00 00 60  	DB $3F, $00, $00, $60
  94++ECA4
  95++ECA4              RattlerNormalsSize: equ $ - RattlerNormals
  96++ECA4              RattlerLen: equ $ - Rattler
  97++ECA4
# file closed: ./Data/ships/Rattler.asm
  97+ ECA4
# file closed: ./Data/ShipModelMetaData3.asm
 892  ECA4              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 893  ECA4              ;;Privisioned for more models     SLOT    ShipModelsAddr
 894  ECA4              ;;Privisioned for more models     PAGE    BankShipModels4
 895  ECA4              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 896  ECA4                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 897  ECA4              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 898  ECA4                  SLOT    SpritemembankAddr
 899  ECA4                  PAGE    BankSPRITE
 900  ECA4              	ORG     SpritemembankAddr, BankSPRITE
 901  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 164
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 260+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 261+ E10A              ; write out X position bits 1 to 8
 262+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 263+ E10C 81                                   add     a,c
 264+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 265+ E110              ; write out Y position bits 1 to 8
 266+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 267+ E112 90                                   sub     b
 268+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E116 C9                                   ret
 270+ E117
 271+ E117 3E 21        compass_station_move:   ld		a,compass_station
 272+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 273+ E11C              ; write out X position bits 1 to 8
 274+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 275+ E11E 81                                   add     a,c
 276+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 277+ E122              ; write out Y position bits 1 to 8
 278+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 279+ E124 90                                   sub     b
 280+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 281+ E128 C9                                   ret
 282+ E129
 283+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 284+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 285+ E129              ReticuleOffset          EQU 8
 286+ E129
 287+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 288+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 289+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 290+ E129
 291+ E129              sprite_missile_x        EQU 2+32
 292+ E129              sprite_missile_y        EQU 192-8+32
 293+ E129
 294+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 295+ E129              sprite_ecm_y            EQU 192-15+32
 296+ E129
 297+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 298+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 299+ E12E 3E 52                                ld      a,sprite_ecm_x
 300+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 301+ E133 3E D1                                ld		a,sprite_ecm_y
 302+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 303+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 304+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 305+ E13D C9                                   ret
 306+ E13E
 307+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 308+ E141 79                                   ld      a,c
 309+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 310+ E145 3E D8                                ld		a,sprite_missile_y
 311+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 312+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 313+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 314+ E14F C9                                   ret
 315+ E150
 316+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 317+ E152 0E 22                                ld      c,sprite_missile_x
 318+ E154 C3 3E E1                             jp      sprite_missile_ready
 319+ E157
 320+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 321+ E159 0E 31                                ld      c,sprite_missile_x+15
 322+ E15B C3 3E E1                             jp      sprite_missile_ready
 323+ E15E
 324+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 325+ E160 0E 3B                                ld      c,sprite_missile_x+25
 326+ E162 C3 3E E1                             jp      sprite_missile_ready
 327+ E165
 328+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 329+ E167 0E 45                                ld      c,sprite_missile_x +35
 330+ E169 C3 3E E1                             jp      sprite_missile_ready
 331+ E16C
 332+ E16C
 333+ E16C
 334+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 335+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 336+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 337+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 338+ E176 3E 7F                                ld		a,ReticuleCentreY
 339+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 340+ E17B AF                                   xor     a
 341+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 342+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 343+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 344+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 345+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 347+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E18E 3E 7F                                ld		a,ReticuleCentreY
 349+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E193 3E 08                                ld      a,%00001000
 351+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 352+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 353+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 354+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 355+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 356+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 357+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 358+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 359+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 360+ E1AC AF                                   xor     a
 361+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 362+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 363+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 364+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 365+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 366+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 367+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 368+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 369+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1C4 3E 04                                ld      a,%00000100
 371+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 372+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 373+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 374+ E1CE C9                                   ret
 375+ E1CF
 376+ E1CF              laserbasex              equ 6
 377+ E1CF              laserbasey              equ 14
 378+ E1CF
 379+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 380+ E1CF ~                                    ld      a, spritenbr
 381+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 382+ E1CF ~                                    ld      a,patternnbr | %10000000
 383+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E1CF                                      ENDM
 385+ E1CF
 386+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 387+ E1CF ~                                    ld      a, spriteL
 388+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 389+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 390+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 391+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 393+ E1CF ~                                    xor     a
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 395+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E1CF                                      ENDM
 398+ E1CF
 399+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 400+ E1CF ~                                    ld      a, spriteL
 401+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 402+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 403+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 404+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 406+ E1CF ~                                    ld      a,%00001000
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 408+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 410+ E1CF                                      ENDM
 411+ E1CF
 412+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 412+ E1CF 3E 24       >                        ld      a, ECM_sprite
 412+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 412+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 412+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 413+ E1D9 C9                                   ret
 414+ E1DA
 415+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 415+ E1DA 3E 25       >                        ld      a, missile_sprite1
 415+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 415+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 415+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 416+ E1E4 C9                                   ret
 417+ E1E5
 418+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 418+ E1E5 3E 26       >                        ld      a, missile_sprite2
 418+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 418+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 418+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 419+ E1EF C9                                   ret
 420+ E1F0
 421+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 421+ E1F0 3E 27       >                        ld      a, missile_sprite3
 421+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 421+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 421+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 422+ E1FA C9                                   ret
 423+ E1FB
 424+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 424+ E1FB 3E 28       >                        ld      a, missile_sprite4
 424+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 424+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 424+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 425+ E205 C9                                   ret
 426+ E206
 427+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 427+ E206 3E 25       >                        ld      a, missile_sprite1
 427+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 427+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 427+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 428+ E210 C9                                   ret
 429+ E211
 430+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 430+ E211 3E 25       >                        ld      a, missile_sprite1
 430+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 430+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 430+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 431+ E21B C9                                   ret
 432+ E21C
 433+ E21C
 434+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 434+ E21C 3E 20       >                        ld      a, compass_sun
 434+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 434+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 434+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 435+ E226 C9                                    ret
 436+ E227
 437+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 437+ E227 3E 20       >                        ld      a, compass_sun
 437+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 437+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 437+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 438+ E231 C9                                    ret
 439+ E232
 440+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 440+ E232 3E 21       >                        ld      a, compass_station
 440+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 440+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 440+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 441+ E23C C9                                    ret
 442+ E23D
 443+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 443+ E23D 3E 21       >                        ld      a, compass_station
 443+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 443+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 443+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 444+ E247 C9                                    ret
 445+ E248
 446+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 446+ E248 3E 10       >                        ld      a, laser_sprite1
 446+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 446+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 446+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 446+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 446+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 446+ E257 AF          >                        xor     a
 446+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 446+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 446+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 447+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 447+ E260 3E 11       >                        ld      a, laser_sprite2
 447+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 447+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 447+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 447+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 447+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 447+ E26F AF          >                        xor     a
 447+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 447+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 447+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 448+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 448+ E278 3E 12       >                        ld      a, laser_sprite3
 448+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 448+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 448+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E287 AF          >                        xor     a
 448+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 448+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 449+ E290 3E 13       >                        ld      a, laser_sprite4
 449+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 449+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 449+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E29F AF          >                        xor     a
 449+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 449+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 450+ E2A8 3E 14       >                        ld      a, laser_sprite5
 450+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 450+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 450+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E2B7 AF          >                        xor     a
 450+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 450+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 451+ E2C0 3E 18       >                        ld      a, laser_sprite9
 451+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 451+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 451+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E2CF 3E 08       >                        ld      a,%00001000
 451+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 451+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 452+ E2D9 3E 19       >                        ld      a, laser_sprite10
 452+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 452+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 452+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2E8 3E 08       >                        ld      a,%00001000
 452+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 452+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 453+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 453+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 453+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 453+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E301 3E 08       >                        ld      a,%00001000
 453+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 453+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 454+ E30B 3E 1B       >                        ld      a, laser_sprite12
 454+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 454+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 454+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E31A 3E 08       >                        ld      a,%00001000
 454+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 454+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 455+ E324 3E 1C       >                        ld      a, laser_sprite13
 455+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 455+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 455+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E333 3E 08       >                        ld      a,%00001000
 455+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 455+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E33D C9                                   ret
 457+ E33E                                      ; Need simple show updates just to update the show attribute
 458+ E33E
 459+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 459+ E33E 3E 10       >                        ld      a, laser_sprite1
 459+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 459+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 459+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 460+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 460+ E348 3E 11       >                        ld      a, laser_sprite2
 460+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 460+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 460+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 461+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 461+ E352 3E 12       >                        ld      a, laser_sprite3
 461+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 461+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 462+ E35C 3E 13       >                        ld      a, laser_sprite4
 462+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 462+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 463+ E366 3E 14       >                        ld      a, laser_sprite5
 463+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 463+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 464+ E370 3E 18       >                        ld      a, laser_sprite9
 464+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 464+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 465+ E37A 3E 19       >                        ld      a, laser_sprite10
 465+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 465+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 466+ E384 3E 1A       >                        ld      a, laser_sprite11
 466+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 466+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 467+ E38E 3E 1B       >                        ld      a, laser_sprite12
 467+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 467+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 468+ E398 3E 1C       >                        ld      a, laser_sprite13
 468+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 468+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E3A2 C9                                   ret
 470+ E3A3
 471+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 471+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 471+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3AB                                      HideSprite galactic_cursor_sprite1
 472+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 472+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 473+ E3B3                                      HideSprite galactic_cursor_sprite2
 473+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 473+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3BB C9                                   ret
 475+ E3BC
 476+ E3BC              sprite_galactic_hyper_hide:
 477+ E3BC                                      HideSprite galactic_hyper_sprite
 477+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 477+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 479+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4 C9                                   ret
 483+ E3C5
 484+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 484+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 484+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E3CD                                      HideSprite local_cursor_sprite1
 485+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 485+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E3D5                                      HideSprite local_cursor_sprite2
 486+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 486+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3DD C9                                   ret
 488+ E3DE
 489+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 489+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 489+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E3E6                                      HideSprite local_hyper_sprite1
 490+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 490+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E3EE                                      HideSprite local_hyper_sprite2
 491+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 491+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3F6 C9                                   ret
 493+ E3F7
 494+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 494+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 494+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 495+ E3FF                                      HideSprite reticlule_sprite2
 495+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 495+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 496+ E407                                      HideSprite reticlule_sprite3
 496+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 496+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E40F                                      HideSprite reticlule_sprite4
 497+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 497+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E417 C9                                   ret
 499+ E418
 500+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 500+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 500+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 501+ E420 C9                                   ret
 502+ E421
 503+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 503+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 503+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 504+ E429 C9                                   ret
 505+ E42A
 506+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 506+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 506+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 507+ E432 C9                                   ret
 508+ E433
 509+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 509+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 509+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 510+ E43B C9                                   ret
 511+ E43C
 512+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 512+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 512+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 513+ E444 C9                                   ret
 514+ E445
 515+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 516+ E448 CD 2A E4                             call  sprite_missile_2_hide
 517+ E44B CD 33 E4                             call  sprite_missile_3_hide
 518+ E44E CD 3C E4                             call  sprite_missile_4_hide
 519+ E451 C9                                   ret
 520+ E452
 521+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 522+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 523+ E457 3E 7F                                ld      a,TargetetingCentreX1
 524+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 525+ E45C 3E 78                                ld		a,TargetetingCentreY
 526+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 527+ E461 AF                                   xor     a
 528+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 529+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 530+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 531+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 532+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 533+ E46F 3E AF                                ld      a,TargetetingCentreX2
 534+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 535+ E474 3E 78                                ld		a,TargetetingCentreY
 536+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 537+ E479 3E 08                                ld      a,%00001000
 538+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 539+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 540+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 541+ E483 C9                                   ret
 542+ E484
 543+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 544+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 545+ E489 3E 7F                                ld      a,TargetetingCentreX1
 546+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 547+ E48E 3E 78                                ld		a,TargetetingCentreY
 548+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 549+ E493 AF                                   xor     a
 550+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 551+ E497 3E 98                                ld      a,lock_pattern | %10000000
 552+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 553+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 554+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 555+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 556+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 557+ E4A6 3E 78                                ld		a,TargetetingCentreY
 558+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 559+ E4AB 3E 08                                ld      a,%00001000
 560+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 561+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 562+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 563+ E4B5 C9                                   ret
 564+ E4B6
 565+ E4B6
 566+ E4B6
 567+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 567+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 567+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 568+ E4BE                                      HideSprite targetting_sprite2
 568+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 568+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 569+ E4C6 C9                                   ret
 570+ E4C7
 571+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 571+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 571+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 571+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 571+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 572+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 572+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 572+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 572+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 572+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 573+ E4DB C9                                   ret
 574+ E4DC
 575+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 575+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 575+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 576+ E4E4                                      HideSprite laser_sprite2
 576+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 576+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 577+ E4EC                                      HideSprite laser_sprite3
 577+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 577+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4F4                                      HideSprite laser_sprite4
 578+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 578+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4FC                                      HideSprite laser_sprite5
 579+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 579+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E504                                      HideSprite laser_sprite6
 580+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 580+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E50C                                      HideSprite laser_sprite7
 581+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 581+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E514                                      HideSprite laser_sprite8
 582+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 582+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E51C                                      HideSprite laser_sprite9
 583+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 583+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E524                                      HideSprite laser_sprite10
 584+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 584+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E52C                                      HideSprite laser_sprite11
 585+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 585+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E534                                      HideSprite laser_sprite12
 586+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 586+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E53C                                      HideSprite laser_sprite13
 587+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 587+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E544                                      HideSprite laser_sprite14
 588+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 588+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E54C                                      HideSprite laser_sprite15
 589+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 589+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E554                                      HideSprite laser_sprite16
 590+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 590+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E55C C9                                   ret
 592+ E55D
 593+ E55D              sprite_compass_hide:    HideSprite compass_sun
 593+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 593+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 594+ E565                                      HideSprite compass_station
 594+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 594+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 595+ E56D C9                                   ret
 596+ E56E
 597+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 598+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 599+ E574 CD C5 E3                             call	sprite_local_hide
 600+ E577 CD DE E3                             call	sprite_local_hyper_hide
 601+ E57A CD F7 E3                             call    sprite_reticule_hide
 602+ E57D CD DC E4                             call    sprite_laser_hide
 603+ E580 CD 5D E5                             call    sprite_compass_hide
 604+ E583 CD B6 E4                             call    sprite_targetting_hide
 605+ E586 CD 45 E4                             call    sprite_missile_all_hide
 606+ E589 C9                                   ret
 607+ E58A
 608+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 609+ E58D CD 18 E4                             call    sprite_ecm_hide
 610+ E590 CD 45 E4                             call    sprite_missile_all_hide
 611+ E593 C9                                   ret
 612+ E594
 613+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 614+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 615+ E59B C9                                   ret
 616+ E59C
 617+ E59C
 618+ E59C              select_sprite_a:        MACRO
 619+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 620+ E59C                                      ENDM
 621+ E59C
 622+ E59C              set_sprite_x_low_a:     MACRO
 623+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 624+ E59C                                      ENDM
 625+ E59C
 626+ E59C              set_sprite_y_low_a:     MACRO
 627+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 628+ E59C                                      ENDM
 629+ E59C
 630+ E59C              set_sprite_x_msb_anc:   MACRO
 631+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 632+ E59C                                      ENDM
 633+ E59C
 634+ E59C              set_sprite_pat_a:       MACRO
 635+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 636+ E59C                                      ENDM
 637+ E59C
 638+ E59C              set_sprite_pat_a_nx:    MACRO
 639+ E59C ~                                    and     %10111111
 640+ E59C ~                                    set_sprite_pat_a
 641+ E59C                                      ENDM
 642+ E59C
 643+ E59C              set_sprite_pat_a_vis:   MACRO
 644+ E59C ~                                    or      %10000000
 645+ E59C ~                                    set_sprite_pat_a
 646+ E59C                                      ENDM
 647+ E59C
 648+ E59C              set_sprite_hidden:      MACRO
 649+ E59C ~                                    xor     a
 650+ E59C ~                                    set_sprite_pat_a
 651+ E59C                                      ENDM
 652+ E59C
 653+ E59C              set_sprite_pas_a_vis_nx:MACRO
 654+ E59C ~                                    or      %10000000
 655+ E59C ~                                    set_sprite_pat_a_nx
 656+ E59C                                      ENDM
 657+ E59C
 658+ E59C              set_sprite_extended_a:  MACRO
 659+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 660+ E59C                                      ENDM
 661+ E59C
 662+ E59C 20           diag_x_pos:             DB 32
 663+ E59D 40           diag_y_pos:             DB 64
 664+ E59E 00           diag_sprite_nbr:        DB 0
 665+ E59F
 666+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 667+ E5A1 0E 00                                ld      c,0
 668+ E5A3 79           .HideLoop:              ld      a,c
 669+ E5A4                                      HideSprite a
 669+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 669+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 670+ E5AB 0C                                   inc     c
 671+ E5AC 10 F5                                djnz    .HideLoop
 672+ E5AE C9                                   ret
 673+ E5AF
 674+ E5AF AF           sprite_diagnostic:      xor a
 675+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 676+ E5B3 01 3B 30                             ld      bc,$303B
 677+ E5B6 ED 79                                out     (c),a
 678+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 679+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 680+ E5BE ED 79                                out     (c),a
 681+ E5C0 C6 10                                add     16
 682+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 683+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 684+ E5C8 ED 79                                out     (c),a
 685+ E5CA AF                                   xor     a
 686+ E5CB ED 79                                out     (c),a
 687+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 688+ E5D0 F6 80                                or      %10000000
 689+ E5D2 E6 BF                                and     %10111111
 690+ E5D4 ED 79                                out     (c),a
 691+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 692+ E5D9 3C                                   inc     a
 693+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 694+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 694+ E5DD FE 0E       >                        cp      14
 694+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 695+ E5E2 3E 40                                ld      a,64
 696+ E5E4                                      JumpIfALTNusng  25,.cont
 696+ E5E4 FE 19       >                        cp      25
 696+ E5E6 DA EA E5    >                        jp		c, .cont
 697+ E5E9 C9                                   ret
 698+ E5EA 3E 40        .cont:                  ld      a,64
 699+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 700+ E5EF 18 C7                                jr      .sprite_loop
 701+ E5F1 C9                                   ret
 702+ E5F2
 703+ E5F2
 704+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
 902  E5F2                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD B5 AB                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
 903  E75D              ;;;***    INCLUDE "./Layer3Sprites/SpriteSheet.asm"
 904  E75D                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 905  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 906  E75D                  SLOT    ConsoleImageAddr
 907  E75D                  PAGE    BankConsole
 908  E75D              	ORG     ConsoleImageAddr, BankConsole
 909  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 910  E900                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 911  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 912  E900                  SLOT    ViewFrontAddr
 913  E900                  PAGE    BankFrontView
 914  E900                  ORG     ViewFrontAddr
 915  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000
   2+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   2+ C004 74 56 69 65
   2+ C008 77 20 20 20
   2+ C00C 50 47 36 32
   3+ C010
   4+ C010 47           draw_front_calc_alpha:  ld      b,a
   5+ C011 E6 80                                and     $80
   6+ C013 32 0E 81                             ld      (ALP2),a                            ; set sign
   7+ C016 4F                                   ld      c,a                                 ; save sign
   8+ C017 EE 80                                xor     $80
   9+ C019 32 0F 81                             ld      (ALP2FLIP),a                        ; and oppsite sign
  10+ C01C 3A 0A 81                             ld      a,(JSTX)
  11+ C01F ED 27 80                             test    $80
  12+ C022 28 02                                jr      z,  .PositiveRoll
  13+ C024 ED 44        .NegativeRoll:          neg
  14+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  15+ C028 CB 3F                                srl     a
  16+ C02A FE 08                                cp      8
  17+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  18+ C02E CB 3F        .IncreasedDamp          srl     a
  19+ C030 32 0D 81     .NotIncreasedDamp:      ld      (ALP1),a
  20+ C033 B1                                   or      c
  21+ C034 32 0C 81                             ld      (ALPHA),a                           ; a = signed bit alph1
  22+ C037 21 F4 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  23+ C03A 36 04                                ld      (hl),dampenRate
  24+ C03C C9                                   ret
  25+ C03D
  26+ C03D              ; Do the same for pitch
  27+ C03D 47           draw_front_calc_beta:   ld      b,a
  28+ C03E E6 80                                and     $80
  29+ C040 32 02 81                             ld      (BET2),a                            ; set sign
  30+ C043 4F                                   ld      c,a                                 ; save sign
  31+ C044 EE 80                                xor     $80
  32+ C046 32 03 81                             ld      (BET2FLIP),a                        ; and oppsite sign
  33+ C049 3A 00 81                             ld      a,(JSTY)
  34+ C04C ED 27 80                             test    $80
  35+ C04F 28 02                                jr      z,  .PositivePitch
  36+ C051 ED 44        .NegativePitch:         neg
  37+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  38+ C055 CB 3F                                srl     a
  39+ C057 FE 08                                cp      8
  40+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  41+ C05B CB 3F        .IncreasedDamp          srl     a
  42+ C05D 32 01 81     .NotIncreasedDamp:      ld      (BET1),a
  43+ C060 B1                                   or      c
  44+ C061 32 FF 80                             ld      (BETA),a                            ; a = signed bit bet1
  45+ C064 21 F5 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  46+ C067 36 04                                ld      (hl),dampenRate
  47+ C069 C9                                   ret
  48+ C06A
  49+ C06A              initialise_front_view:
  50+ C06A
  51+ C06A              draw_front_view:        MMUSelectLayer1
  51+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  52+ C06E CD 80 E0                             call    l1_cls
  53+ C071 CD 9A E0                             call    l1_attr_cls
  54+ C074                                      MMUSelectLayer2
  54+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  55+ C078 CD 04 E0                             call     asm_l2_double_buffer_on
  56+ C07B                                      MMUSelectSpriteBank
  56+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  57+ C07F CD 6E E5                             call    sprite_cls_cursors
  58+ C082 CD 6C E1                             call    sprite_reticule
  59+ C085 CD 48 E2                             call    sprite_laser
  60+ C088 CD 52 E4                             call    sprite_targetting
  61+ C08B CD 84 E4                             call    sprite_lock
  62+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  63+ C091 CD 29 E1                             call    sprite_ECM
  64+ C094 CD 50 E1                             call    sprite_missile_1
  65+ C097 CD 57 E1                             call    sprite_missile_2
  66+ C09A CD 5E E1                             call    sprite_missile_3
  67+ C09D CD 65 E1                             call    sprite_missile_4
  68+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  69+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  70+ C0A6                                     ; call    sprite_laser_show
  71+ C0A6                                      MMUSelectConsoleBank
  71+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  72+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  73+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  74+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  75+ C0B3 CD 29 7D                             call        memcopy_dma
  76+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  77+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  78+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  79+ C0BF CD 29 7D                             call        memcopy_dma
  80+ C0C2 CD AB 7A                             call        InitialiseStars
  81+ C0C5 AF                                   xor         a
  82+ C0C6 32 A0 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  83+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  84+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  85+ C0CF C9                                   ret
  86+ C0D0
  87+ C0D0 00           CurrentLock             DB      0
  88+ C0D1 00           ShowingLock             DB      0
  89+ C0D2 3A 26 85     update_front_view:      ld      a,(MissileTargettingFlag)
  90+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  90+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  90+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  91+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  91+ C0DA FE FE       >                        cp     StageMissileTargeting
  91+ C0DC CA F4 C0    >                        jp     z,.Targetting
  92+ C0DF CB 7F                                bit     7,a
  93+ C0E1 20 26                                jr      nz, .Locked
  94+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  95+ C0E6 C9                                   ret
  96+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  97+ C0EA                                      ReturnIfAIsZero
  97+ C0EA A7          >                        and     a
  97+ C0EB C8          >                        ret     z
  98+ C0EC                                      MMUSelectSpriteBank
  98+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  99+ C0F0 CD B6 E4                             call     sprite_targetting_hide
 100+ C0F3 C9                                   ret
 101+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 101+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 101+ C0F7 A7          >                        and     a
 101+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 102+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 102+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 102+ C0FE A7          >                        and     a
 102+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 103+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 104+ C105 22 D0 C0                             ld      (CurrentLock),hl
 105+ C108 C9                                   ret
 106+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 106+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 106+ C10C A7          >                        and     a
 106+ C10D C4 84 E4    >                        call    nz, sprite_lock
 107+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 107+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 107+ C113 A7          >                        and     a
 107+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 108+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 109+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 110+ C11D C9                                   ret
 111+ C11E
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 114+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 114+ C122 FF 61 2A 4C
 114+ C126 23 1F 52 27
 114+ C12A 4F 14 1A 4F
 114+ C12E 1A 3A 12 16
 114+ C132 40 15 20 1A
 114+ C136 12 26 19 1E
 114+ C13A 09 1A 23 14
 114+ C13E 05 10 12 25
 114+ C142 15 00 00 12
 115+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 115+ C14A FF 89 2D A0
 115+ C14E 23 1F 96 28
 115+ C152 9D 38 1A A0
 115+ C156 24 AF 0A 16
 115+ C15A 9C 25 C4 28
 115+ C15E 12 C5 29 DF
 115+ C162 21 1A DF 21
 115+ C166 F5 1E 12 DF
 115+ C16A 20 FE 2F 12
 116+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 116+ C172 FF 59 59 40
 116+ C176 62 1F 4F 5C
 116+ C17A 40 48 19 41
 116+ C17E 4B 1E 46 16
 116+ C182 23 47 26 40
 116+ C186 12 43 5F 15
 116+ C18A 63 1A 1F 61
 116+ C18E 00 50 12 1F
 116+ C192 61 15 6E 12
 117+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 117+ C19A FF 62 6E 40
 117+ C19E 73 1F 46 73
 117+ C1A2 49 7F 19 47
 117+ C1A6 72 3C 70 16
 117+ C1AA 1E 78 14 7E
 117+ C1AE 12 46 72 32
 117+ C1B2 78 1A 32 78
 117+ C1B6 1B 77 12 14
 117+ C1BA 7D 0A 78 12
 118+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 118+ C1C2 FF 83 51 91
 118+ C1C6 62 1F 91 61
 118+ C1CA 85 67 19 91
 118+ C1CE 62 96 6E 16
 118+ C1D2 96 6D 9A 69
 118+ C1D6 12 96 6E 92
 118+ C1DA 78 1A 91 78
 118+ C1DE 8C 7E 12 93
 118+ C1E2 78 9F 7E 12
 119+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 119+ C1EA FF A1 66 AB
 119+ C1EE 6C 1F A0 66
 119+ C1F2 AF 7F 19 AF
 119+ C1F6 7C C8 7A 16
 119+ C1FA C8 79 DF 78
 119+ C1FE 12 E0 78 E1
 119+ C202 7F 1A E0 77
 119+ C206 F5 74 12 F6
 119+ C20A 75 FE 7B 12
 120+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 120+ C212 FF 91 49 9E
 120+ C216 48 1F 9F 48
 120+ C21A B3 40 19 9F
 120+ C21E 49 B9 55 16
 120+ C222 B6 54 C5 4C
 120+ C226 12 C3 4B CF
 120+ C22A 4F 1A CE 4F
 120+ C22E F5 3F 12 CE
 120+ C232 50 F5 69 12
 121+ C236
 122+ C236              ; Draw line at hl for b lines
 123+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 124+ C238 4E                                   ld      c,(hl)
 125+ C239 23                                   inc     hl
 126+ C23A 46                                   ld      b,(hl)
 127+ C23B 23                                   inc     hl
 128+ C23C 5E                                   ld      e,(hl)
 129+ C23D 23                                   inc     hl
 130+ C23E 56                                   ld      d,(hl)
 131+ C23F 23                                   inc     hl
 132+ C240 7E                                   ld      a,(hl)          ; colour
 133+ C241 CD F8 E9                             call    l2_draw_diagonal
 134+ C244 C1 E1                                pop     hl,,bc
 135+ C246 3E 05                                ld      a,5
 136+ C248 ED 31                                add     hl,a
 137+ C24A 10 EA                                djnz    DrawLighningLine
 138+ C24C C9                                   ret
 139+ C24D
 140+ C24D              ;Loop though all lines
 141+ C24D              ;   60$% chance of drawing a line, call draw line
 142+ C24D              ;   go to next line
 143+ C24D              ;repeat
 144+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 145+ C24F 21 1E C1                             ld      hl,LightningLines
 146+ C252                                      MMUSelectLayer2
 146+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 147+ C256                                      ;break
 148+ C256              ; above here select which lines table we will use
 149+ C256 C5 E5        .LineLoop:              push    bc,,hl
 150+ C258 CD 3B 88                             call    doRandom
 151+ C25B FE 1E                                cp      30
 152+ C25D 30 0C                                jr      nc,.NextLine
 153+ C25F CD 3B 88                             call    doRandom
 154+ C262 E6 07                                and     $07
 155+ C264 3C                                   inc     a
 156+ C265 47                                   ld      b,a
 157+ C266 E1                                   pop     hl
 158+ C267 E5                                   push    hl
 159+ C268 CD 36 C2                             call    DrawLighningLine
 160+ C26B E1 C1        .NextLine:              pop     bc,,hl
 161+ C26D 16 08                                ld      d,8
 162+ C26F 1E 05                                ld      e,5
 163+ C271 ED 30                                mul
 164+ C273 19                                   add     hl,de
 165+ C274 10 E0                                djnz    .LineLoop
 166+ C276 3A AA 83                             ld      a,(HyperCircle)
 167+ C279 57                                   ld      d,a
 168+ C27A 01 80 40                             ld      bc, $4080
 169+ C27D                                      ;break
 170+ C27D 1E 00                                ld      e,$00
 171+ C27F CD 9A EF                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 172+ C282 01 80 40                             ld      bc, $4080
 173+ C285 3A AA 83                             ld      a,(HyperCircle)
 174+ C288 3C                                   inc     a
 175+ C289 57                                   ld      d,a
 176+ C28A 1E FF                                ld      e,$FF
 177+ C28C CD 26 ED                             call    l2_draw_circle
 178+ C28F 3A AA 83                             ld      a,(HyperCircle)
 179+ C292 3C                                   inc     a
 180+ C293 3C                                   inc     a
 181+ C294 FE 40                                cp      64
 182+ C296 D0                                   ret     nc
 183+ C297 32 AA 83                             ld      (HyperCircle),a
 184+ C29A                                      SetCarryFlag
 184+ C29A 37          >                        scf
 185+ C29B C9                                   ret
 186+ C29C
 187+ C29C
 188+ C29C              draw_hyperspace:        MMUSelectLayer1
 188+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 189+ C2A0 CD 80 E0                             call    l1_cls
 190+ C2A3 CD 9A E0                             call    l1_attr_cls
 191+ C2A6                                      MMUSelectLayer2
 191+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 192+ C2AA CD 04 E0                             call     asm_l2_double_buffer_on
 193+ C2AD                                      MMUSelectSpriteBank
 193+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 194+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 195+ C2B4                                      MMUSelectConsoleBank
 195+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 196+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 197+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 198+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 199+ C2C1 CD 29 7D                             call        memcopy_dma
 200+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 201+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 202+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 203+ C2CD CD 29 7D                             call        memcopy_dma
 204+ C2D0 CD B6 7A                             call        InitialiseHyperStars
 205+ C2D3 AF                                   xor         a
 206+ C2D4 32 A0 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 207+ C2D7 3E 02                                ld          a,2
 208+ C2D9 32 AA 83                             ld          (HyperCircle),a
 209+ C2DC 3E FC                                ld          a,$FC
 210+ C2DE 32 A0 83                             ld          (DockedFlag),a
 211+ C2E1 C9                                   ret
 212+ C2E2
 213+ C2E2              ;----------------------------------------------------------------------------------------------------------------------------------
 214+ C2E2              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 215+ C2E2 06 AF                                ld          b,175                                    ; loop for x iterations
 216+ C2E4 C5           .warploop:              push        bc
 217+ C2E5 CD 0E 7B                             call        DustForward
 218+ C2E8                                      MMUSelectLayer2
 218+ C2E8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ C2EC CD 97 E2                             call        l2_flip_buffers
 220+ C2EF C1                                   pop         bc
 221+ C2F0 10 F2                                djnz        .warploop
 222+ C2F2 C9                                   ret
 223+ C2F3
 224+ C2F3              ;----------------------------------------------------------------------------------------------------------------------------------
 225+ C2F3 C9           loop_hyperspace         ret
 226+ C2F4              ;----------------------------------------------------------------------------------------------------------------------------------
 227+ C2F4              dampenRate:             equ     $04
 228+ C2F4 04           dampenRcounter:         DB      dampenRate
 229+ C2F5 04           dampenPcounter:         DB      dampenRate
 230+ C2F6              ;----------------------------------------------------------------------------------------------------------------------------------
 231+ C2F6              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 232+ C2F6 2A A6 7D                             ld      hl,(addr_Pressed_Accellerate)
 233+ C2F9 7E                                   ld      a,(hl)
 234+ C2FA                                      JumpIfAIsZero     .TestDecellerate
 234+ C2FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C2FB CA 17 C3    >                        jp	    z, .TestDecellerate
 235+ C2FE 3A EC 81                             ld      a,(SHIPMAXSPEED)
 236+ C301 57                                   ld      d,a
 237+ C302 3A ED 81                             ld      a,(DELTA)
 238+ C305                                      JumpIfAGTENusng d,.TestDecellerate
 238+ C305 BA          >                        cp     d
 238+ C306 D2 17 C3    >                        jp		nc,.TestDecellerate
 239+ C309 3C                                   inc     a
 240+ C30A 32 ED 81                             ld      (DELTA),a
 241+ C30D 2A EE 81                             ld      hl,(DELT4Lo)
 242+ C310 ED 34 04 00                          add     hl,4
 243+ C314 22 EE 81                             ld      (DELT4Lo),hl
 244+ C317                                      ;DEFUNCT SetEngineSoundChanged
 245+ C317 2A A8 7D     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 246+ C31A 7E                                   ld      a,(hl)
 247+ C31B                                      JumpIfAIsZero   .TestLeftPressed
 247+ C31B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 247+ C31C CA 34 C3    >                        jp	    z, .TestLeftPressed
 248+ C31F 3A ED 81                             ld      a,(DELTA)
 249+ C322                                      JumpIfAIsZero   .TestLeftPressed
 249+ C322 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C323 CA 34 C3    >                        jp	    z, .TestLeftPressed
 250+ C326 3D                                   dec     a
 251+ C327 32 ED 81                             ld      (DELTA),a
 252+ C32A 2A EE 81                             ld      hl,(DELT4Lo)
 253+ C32D 2B                                   dec     hl
 254+ C32E 2B                                   dec     hl
 255+ C32F 2B                                   dec     hl
 256+ C330 2B                                   dec     hl
 257+ C331 22 EE 81                             ld      (DELT4Lo),hl
 258+ C334                                      ;DEFUNCT SetEngineSoundChanged
 259+ C334 2A 9E 7D     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 260+ C337 7E                                   ld      a,(hl)
 261+ C338                                      JumpIfAIsZero   .TestRightPressed
 261+ C338 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C339 CA 4F C3    >                        jp	    z, .TestRightPressed
 262+ C33C 3A 0A 81                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 263+ C33F 21 11 81                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 264+ C342 BE                                   cp      (hl)
 265+ C343 28 0A                                jr      z,.TestRightPressed
 266+ C345                                      ;break
 267+ C345 3D                                   dec     a                                   ; increase joystick roll
 268+ C346 32 0A 81                             ld      (JSTX),a
 269+ C349 CD 10 C0                             call    draw_front_calc_alpha
 270+ C34C C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 271+ C34F 2A A0 7D     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 272+ C352 7E                                   ld      a,(hl)
 273+ C353                                      JumpIfAIsZero   .DampenRoll
 273+ C353 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 273+ C354 CA 6A C3    >                        jp	    z, .DampenRoll
 274+ C357 3A 0A 81                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 275+ C35A 21 10 81                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 276+ C35D BE                                   cp      (hl)
 277+ C35E 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 278+ C360                                      ;break
 279+ C360 3C                                   inc     a                                   ; increase joystick roll
 280+ C361 32 0A 81     .UpdateAlphRoll:        ld      (JSTX),a
 281+ C364 CD 10 C0                             call    draw_front_calc_alpha
 282+ C367 C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 283+ C36A 21 F4 C2     .DampenRoll:            ld      hl,dampenRcounter
 284+ C36D 35                                   dec     (hl)
 285+ C36E 20 14                                jr      nz,.TestDivePressed
 286+ C370 3E 04                                ld      a,dampenRate
 287+ C372 77                                   ld      (hl),a
 288+ C373 3A 0A 81                             ld      a,(JSTX)
 289+ C376 FE 00                                cp      0
 290+ C378 28 0A                                jr      z, .TestDivePressed
 291+ C37A CB 7F                                bit     7,a
 292+ C37C 28 03                                jr      z,.PosRollDampen
 293+ C37E 3C           .NegRollDampen:         inc     a
 294+ C37F 18 01                                jr      .ApplyRollDampen
 295+ C381 3D           .PosRollDampen:         dec     a
 296+ C382 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 297+ C384              ; Dive and Climb input
 298+ C384 2A A2 7D     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 299+ C387 7E                                   ld      a,(hl)
 300+ C388                                      JumpIfAIsZero   .TestClimbPressed
 300+ C388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C389 CA 9F C3    >                        jp	    z, .TestClimbPressed
 301+ C38C 3A 00 81                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 302+ C38F 21 05 81                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 303+ C392 BE                                   cp      (hl)
 304+ C393 28 0A                                jr      z,.TestClimbPressed
 305+ C395                                      ;break
 306+ C395 3D                                   dec     a                                   ; increase joystick roll
 307+ C396 32 00 81                             ld      (JSTY),a
 308+ C399 CD 3D C0                             call    draw_front_calc_beta
 309+ C39C C3 D4 C3                             jp      .ForwardCursorKeysDone
 310+ C39F 2A A4 7D     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 311+ C3A2 7E                                   ld      a,(hl)
 312+ C3A3                                      JumpIfAIsZero   .DampenPitch
 312+ C3A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 312+ C3A4 CA BA C3    >                        jp	    z, .DampenPitch
 313+ C3A7 3A 00 81                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 314+ C3AA 21 04 81                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 315+ C3AD BE                                   cp      (hl)
 316+ C3AE 28 24                                jr      z,.ForwardCursorKeysDone
 317+ C3B0 3C                                   inc     a                                   ; increase joystick roll
 318+ C3B1 32 00 81     .UpdateBetaPitch:       ld      (JSTY),a
 319+ C3B4 CD 3D C0                             call    draw_front_calc_beta
 320+ C3B7 C3 D4 C3                             jp      .ForwardCursorKeysDone
 321+ C3BA 21 F5 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 322+ C3BD 35                                   dec     (hl)
 323+ C3BE 20 14                                jr      nz,.ForwardCursorKeysDone
 324+ C3C0 3E 04                                ld      a,dampenRate
 325+ C3C2 77                                   ld      (hl),a
 326+ C3C3 3A 00 81                             ld      a,(JSTY)
 327+ C3C6 FE 00                                cp      0
 328+ C3C8 28 0A                                jr      z,.ForwardCursorKeysDone
 329+ C3CA CB 7F                                bit     7,a
 330+ C3CC 28 03                                jr      z,.PosPitchDampen
 331+ C3CE 3C           .NegPitchDampen:        inc     a
 332+ C3CF 18 01                                jr      .ApplyPitchDampen
 333+ C3D1 3D           .PosPitchDampen:        dec     a
 334+ C3D2 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 335+ C3D4              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 336+ C3D4              ; be in flight and they have to force a forward view when hyperspace is pressed
 337+ C3D4              ; We won't do galatic here, but for other views force to forward view
 338+ C3D4 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 339+ C3D6 CD EF 7E                             call    is_key_pressed
 340+ C3D9 20 48                                jr      nz,.NotHyperspace
 341+ C3DB              ; If we are in hyperspace countdown then test for hyperspace
 342+ C3DB 2A A6 83                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 343+ C3DE 7C                                   ld      a,h                                 ; hyperspace
 344+ C3DF B5                                   or      l                                   ; .
 345+ C3E0 20 41                                jr      nz,.CancelHyperspace                ; .
 346+ C3E2              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 347+ C3E2 ED 5B 89 82                          ld      de,(PresentSystemX)
 348+ C3E6 2A 8B 82                             ld      hl,(TargetSystemX)
 349+ C3E9 CD B6 99                             call    compare16HLDE
 350+ C3EC 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 351+ C3EE 3A 76 82                             ld      a,(Galaxy)
 352+ C3F1                                      MMUSelectGalaxyA
 352+ C3F1 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 353+ C3F4 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 354+ C3F8 CD BB FA                             call    galaxy_name_at_bc
 355+ C3FB FE 00                                cp      0
 356+ C3FD 28 24                                jr      z,.NotHyperspace
 357+ C3FF              ; check fuel is sufficient
 358+ C3FF ED 4B 89 82                          ld      bc,(PresentSystemX)
 359+ C403 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 360+ C407 ED 4B 8B 82                          ld      bc,(TargetSystemX)
 361+ C40B ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 362+ C40F CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 363+ C412 7C                                   ld      a,h
 364+ C413 A7                                   and     a
 365+ C414 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 366+ C416 3A 04 88                             ld      a,(Fuel)
 367+ C419                                      JumpIfALTNusng    l, .InsufficientFuel
 367+ C419 BD          >                        cp      l
 367+ C41A DA 23 C4    >                        jp		c, .InsufficientFuel
 368+ C41D              ; set up timer countdown
 369+ C41D 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 370+ C420 22 A6 83                             ld      (InnerHyperCount),hl                ; .
 371+ C423              .CancelHyperspace
 372+ C423              .NoTargetSelected
 373+ C423              .InsufficientFuel
 374+ C423              .NotHyperspace:
 375+ C423              ;--- Check for in system Jump---------------------------------------
 376+ C423 2A A6 83     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 377+ C426 7C                                   ld      a,h                                 ; hyperspace
 378+ C427 B5                                   or      l                                   ; .
 379+ C428 20 0B                                jr      nz,.WarpNotPressed
 380+ C42A 3E 54                                ld      a,c_Pressed_Warp
 381+ C42C CD E2 7E                             call    is_key_up_state
 382+ C42F 28 04                                jr      z, .WarpNotPressed
 383+ C431                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 383+ C431 AF          >                        xor     a
 383+ C432 32 CF 83    >                        ld      (WarpPressed),a
 384+ C435              .WarpNotPressed:
 385+ C435                              IFDEF   LASER_V2
 386+ C435 CD 5F 86                             call    IsLaserUseable                      ; no laser or destroyed?
 387+ C438 28 36                                jr      z,          .FireNotPressed
 388+ C43A 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 389+ C43C CD E2 7E                             call    is_key_up_state
 390+ C43F 28 2F                                jr      z,.FireNotPressed
 391+ C441              .FirePressed:           ;break
 392+ C441                                      JumpIfMemNotZero    CurrentCooldown,     .LaserDone
 392+ C441 3A 41 85    >                        ld  a,(CurrentCooldown)
 392+ C444 A7          >                        and a
 392+ C445 C2 94 C4    >                        jp  nz,.LaserDone
 393+ C448                                      JumpIfMemNotZero    CurrentBurstPause,   .LaserDone
 393+ C448 3A 40 85    >                        ld  a,(CurrentBurstPause)
 393+ C44B A7          >                        and a
 393+ C44C C2 94 C4    >                        jp  nz,.LaserDone
 394+ C44F                                      JumpIfMemNotZero    CurrLaserBurstCount, .LaserDone
 394+ C44F 3A 43 85    >                        ld  a,(CurrLaserBurstCount)
 394+ C452 A7          >                        and a
 394+ C453 C2 94 C4    >                        jp  nz,.LaserDone
 395+ C456                                      JumpIfMemTrue       LaserBeamOn,         .LaserDone
 395+ C456 3A 3E 85    >                        ld      a,(LaserBeamOn)
 395+ C459 A7          >                        and     a
 395+ C45A CA 94 C4    >                        jp      z, .LaserDone
 396+ C45D                                      ldCopyByte          CurrLaserPulseRate,   CurrLaserBurstCount
 396+ C45D 3A 3A 85    >                        ld       a,(CurrLaserPulseRate)
 396+ C460 32 43 85    >                        ld       (CurrLaserBurstCount),a
 397+ C463                                      ldCopyByte          CurrLaserPulseOnTime, CurrLaserDuration
 397+ C463 3A 3B 85    >                        ld       a,(CurrLaserPulseOnTime)
 397+ C466 32 3F 85    >                        ld       (CurrLaserDuration),a
 398+ C469                                      SetMemTrue          LaserBeamOn
 398+ C469 AF          >                        xor     a
 398+ C46A 32 3E 85    >                        ld      (LaserBeamOn),a
 399+ C46D                                      ;call               TriggerLaserSound
 400+ C46D C3 94 C4                             jp                  .LaserDone
 401+ C470              .FireNotPressed:        ReturnIfMemNotZero  CurrLaserBurstCount
 401+ C470 3A 43 85    >                        ld     a,(CurrLaserBurstCount)
 401+ C473 A7          >                        and     a
 401+ C474 C0          >                        ret    nz
 402+ C475                                      ReturnIfMemNotZero  CurrLaserDuration
 402+ C475 3A 3F 85    >                        ld     a,(CurrLaserDuration)
 402+ C478 A7          >                        and     a
 402+ C479 C0          >                        ret    nz
 403+ C47A                                      ReturnIfMemFalse    LaserBeamOn
 403+ C47A 3A 3E 85    >                        ld      a,(LaserBeamOn)
 403+ C47D A7          >                        and     a
 403+ C47E C0          >                        ret     nz
 404+ C47F DD 01                                break
 405+ C481                                      ldCopyByte          CurrLaserPulseRest, CurrentCooldown
 405+ C481 3A 3D 85    >                        ld       a,(CurrLaserPulseRest)
 405+ C484 32 41 85    >                        ld       (CurrentCooldown),a
 406+ C487                                      SetMemFalse         LaserBeamOn
 406+ C487 3E FF       >                        ld      a,$FF
 406+ C489 32 3E 85    >                        ld      (LaserBeamOn),a
 407+ C48C                                      SetMemZero          CurrLaserBurstCount
 407+ C48C AF          >                        xor     a
 407+ C48D 32 43 85    >                        ld      (CurrLaserBurstCount),a
 408+ C490                                      SetMemZero          CurrentBurstPause
 408+ C490 AF          >                        xor     a
 408+ C491 32 40 85    >                        ld      (CurrentBurstPause),a
 409+ C494              .LaserDone:
 410+ C494                              ELSE
 411+ C494 ~            .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 412+ C494 ~                                    jr      z,.CheckTargetting
 413+ C494 ~            .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 414+ C494 ~                                    ld      a,(CurrLaserPulseRate)              ; if not beam type
 415+ C494 ~                                    JumpIfAIsZero .BeamType                     ; .
 416+ C494 ~                                    ld      b,a                                 ; and not run out of pulses
 417+ C494 ~                                    ld      a,(CurrLaserPulseRateCount)         ;
 418+ C494 ~                                    ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 419+ C494 ~                                    JumpIfAEqNusng  b, .PulseLimitReached       ;
 420+ C494 ~                                    ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 421+ C494 ~                                    or      (hl)                                ;
 422+ C494 ~                                    inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 423+ C494 ~                                    or      (hl)                                ;    .
 424+ C494 ~                                    jr      nz, .CheckTargetting                ;    .
 425+ C494 ~            .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 426+ C494 ~                                    call    is_key_up_state                     ;       .
 427+ C494 ~                                    jr      z,.CheckTargetting                  ;       .
 428+ C494 ~            .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 429+ C494 ~                                    inc     a                                   ;            .
 430+ C494 ~            .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 431+ C494 ~                                    ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 432+ C494 ~                                 ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 433+ C494 ~                                 ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 434+ C494 ~                                    jp      .CheckTargetting
 435+ C494 ~            .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 436+ C494 ~                                    call    is_key_up_state                     ;                   .
 437+ C494 ~                                    jr      z,.CheckTargetting                  ;                   .
 438+ C494 ~                                    SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 439+ C494 ~                                    ld      a,0
 440+ C494 ~                                    ld      (SoundFxToEnqueue),a
 441+ C494 ~                                    jp      .CheckTargetting
 442+ C494 ~            .PulseLimitReached:     ;ZeroA                                       ;
 443+ C494 ~                                    ;ld      (CurrLaserPulseRateCount),a         ;
 444+ C494 ~                                    ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 445+ C494                              ENDIF
 446+ C494              ; . Here we check to see if the target lock has been pressed
 447+ C494 CD 1C 80     .CheckTargetting:       call    TargetMissileTest
 448+ C497 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 449+ C499 CD EF 7E                             call    is_key_pressed
 450+ C49C 20 13                                jr      nz,.NotMissileLaunch
 451+ C49E                                      AnyMissilesLeft
 451+ C49E 3A 96 82    >                        ld      a,(NbrMissiles)
 451+ C4A1 A7          >                        and     a
 452+ C4A2 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 453+ C4A4 CD 04 87                             call    IsMissileLockedOn
 454+ C4A7 28 08                                jr      z,.MissileNotLocked
 455+ C4A9              .MissileLaunch:         SetMissileLaunch
 455+ C4A9 3A 26 85    >                        ld      a,(MissileTargettingFlag)
 455+ C4AC E6 0F       >                        and     $0F
 455+ C4AE 32 26 85    >                        ld      (MissileTargettingFlag),a
 456+ C4B1              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 457+ C4B1              .NotMissileLaunch:
 458+ C4B1 3A 22 88     .CheckForECM:           ld      a,(ECMPresent)
 459+ C4B4                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 459+ C4B4 FE 00       >                        cp     EquipmentItemNotFitted
 459+ C4B6 CA D9 C4    >                        jp      z,.NoECM
 460+ C4B9 3A 97 82     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 461+ C4BC                                      JumpIfAIsNotZero .NoECM
 461+ C4BC A7          >                        and     a
 461+ C4BD C2 D9 C4    >                        jp	    nz,.NoECM
 462+ C4C0 3E 1C        .CheckForKeyPress:      ld      a, c_Pressed_ECM
 463+ C4C2 CD EF 7E                             call    is_key_pressed
 464+ C4C5 20 12                                jr      nz, .NoECM
 465+ C4C7              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 465+ C4C7 3E 80       >                        ld      a,ECMCounterMax
 465+ C4C9 32 97 82    >                        ld      (PlayerECMActiveCount),a
 466+ C4CC 3A 08 81                             ld      a,(ECMCountDown)
 467+ C4CF                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 467+ C4CF FE 80       >                        cp     ECMCounterMax
 467+ C4D1 D2 D9 C4    >                        jp		nc,.NoECM
 468+ C4D4                                      SetMemToN      ECMCountDown, ECMCounterMax
 468+ C4D4 3E 80       >                        ld      a,ECMCounterMax
 468+ C4D6 32 08 81    >                        ld      (ECMCountDown),a
 469+ C4D9 C9           .NoECM:                 ret
 470+ C4DA
 471+ C4DA
 472+ C4DA
 473+ C4DA
 474+ C4DA
 475+ C4DA
 476+ C4DA
# file closed: ./Views/Front_View.asm
 916  C4DA                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 917  C4DA              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 918  C4DA                  SLOT    MenuStatusAddr
 919  C4DA                  PAGE    BankMenuStatus
 920  C4DA                  ORG     MenuStatusAddr
 921  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 43 4F 4D 4D  txt_stat_commander 			DB "COMMANDER",0
   3+ C014 41 4E 44 45
   3+ C018 52 00
   4+ C01A 49 4E 56 45  txt_stat_inventory 			DB "INVENTORY",0
   4+ C01E 4E 54 4F 52
   4+ C022 59 00
   5+ C024 50 72 65 73  txt_stat_present_system		DB "Present System   :",0
   5+ C028 65 6E 74 20
   5+ C02C 53 79 73 74
   5+ C030 65 6D 20 20
   5+ C034 20 3A 00
   6+ C037 48 79 70 65  txt_stat_hyperspace_system	DB "Hyperspace System:",0
   6+ C03B 72 73 70 61
   6+ C03F 63 65 20 53
   6+ C043 79 73 74 65
   6+ C047 6D 3A 00
   7+ C04A 43 6F 6E 64  txt_stat_condition			DB "Condition   :",0
   7+ C04E 69 74 69 6F
   7+ C052 6E 20 20 20
   7+ C056 3A 00
   8+ C058 46 75 65 6C  txt_stat_fuel				DB "Fuel        :",0
   8+ C05C 20 20 20 20
   8+ C060 20 20 20 20
   8+ C064 3A 00
   9+ C066 43 61 73 68  txt_stat_cash				DB "Cash        :",0
   9+ C06A 20 20 20 20
   9+ C06E 20 20 20 20
   9+ C072 3A 00
  10+ C074 4C 65 67 61  txt_stat_legal_status		DB "Legal Status:",0
  10+ C078 6C 20 53 74
  10+ C07C 61 74 75 73
  10+ C080 3A 00
  11+ C082 52 61 74 69  txt_stat_rating				DB "Rating      :",0
  11+ C086 6E 67 20 20
  11+ C08A 20 20 20 20
  11+ C08E 3A 00
  12+ C090 45 51 55 49  txt_stat_equipment			DB "EQUIPMENT:",0
  12+ C094 50 4D 45 4E
  12+ C098 54 3A 00
  13+ C09B
  14+ C09B 30 30 2E 30  txt_stat_fuel_level			DB "00.0 Light Years",0
  14+ C09F 20 4C 69 67
  14+ C0A3 68 74 20 59
  14+ C0A7 65 61 72 73
  14+ C0AB 00
  15+ C0AC 58 58 58 58  txt_stat_cash_amount		DB "XXXXXXXXXX",0
  15+ C0B0 58 58 58 58
  15+ C0B4 58 58 00
  16+ C0B7 2E           txt_stat_cash_decimal       DB "."
  17+ C0B8 58 20 43 72  txt_stat_cash_fraction      DB "X Cr",0
  17+ C0BC 00
  18+ C0BD
  19+ C0BD 40 02 10 C0  status_boiler_text		DW $0240,txt_stat_commander
  20+ C0C1 90 02 27 85  						DW $0290,CommanderName
  21+ C0C5 08 0B 24 C0  						DW $0B08,txt_stat_present_system
  22+ C0C9 08 13 37 C0  						DW $1308,txt_stat_hyperspace_system
  23+ C0CD 08 1B 4A C0  						DW $1B08,txt_stat_condition
  24+ C0D1 08 23 58 C0  						DW $2308,txt_stat_fuel
  25+ C0D5 08 2B 66 C0  						DW $2B08,txt_stat_cash
  26+ C0D9 08 33 74 C0  						DW $3308,txt_stat_legal_status
  27+ C0DD 08 3B 82 C0  						DW $3B08,txt_stat_rating
  28+ C0E1 08 4B 90 C0  						DW $4B08,txt_stat_equipment
  29+ C0E5
  30+ C0E5 00 00        equipment_cursor		DW  $0000
  31+ C0E7              present_position		equ	$0B98
  32+ C0E7              hyperspace_position		equ	$1398
  33+ C0E7              condition_position		equ	$1B70
  34+ C0E7              fuel_position			equ	$2370
  35+ C0E7              cash_position			equ	$2B70
  36+ C0E7              legal_status_position	equ $3370
  37+ C0E7              rank_position			equ $3B70
  38+ C0E7              equipment_position		equ $5340
  39+ C0E7              equipment_position2		equ $5378
  40+ C0E7              equipmax_row			equ $FF
  41+ C0E7
  42+ C0E7 00           STAT_selected_row       DB 0
  43+ C0E8 00           STAT_current_topItem    DB 0
  44+ C0E9 00           STAT_current_end        DB 0
  45+ C0EA              STAT_buffer_rows         EQU     128
  46+ C0EA              STAT_buffer_row_len      EQU     24
  47+ C0EA              STAT_eqip_window_len    EQU 10
  48+ C0EA              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  49+ C0EA 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  50+ CCEA              STAT_position			equ $5840
  51+ CCEA 00 00 00...  STAT_cash_amount    	DS 10
  52+ CCF4 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  53+ CCF8
  54+ CCF8 00 00 00...  stat_present_name       DS  30
  55+ CD16 00                                   DB  0
  56+ CD17 00 00 00...  stat_target_name        DS  30
  57+ CD35 00                                   DB  0
  58+ CD36
  59+ CD36 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  60+ CD39 01 1E 00                             ld      bc,30
  61+ CD3C ED B0                                ldir
  62+ CD3E C9                                   ret
  63+ CD3F
  64+ CD3F              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ CD3F              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CD3F
   2++CD3F              ;">print_boilder_text hl = text structure, b = message count"
   3++CD3F C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++CD40 4E                                   ld			c,(hl)		; Get Row into b
   5++CD41 23                                   inc			hl
   6++CD42 46                                   ld			b,(hl)		; Get Col into b
   7++CD43 23                                   inc			hl
   8++CD44 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++CD45 23                                   inc			hl
  10++CD46 56                                   ld			d,(hl)		; Get text address Hi into E
  11++CD47 23                                   inc			hl
  12++CD48 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++CD49 EB                                   ex			de,hl		; now hl = address of text data
  14++CD4A 1E FF                                ld			e,txt_status_colour
  15++CD4C C5                                   push		bc
  16++CD4D D1                                   pop			de
  17++CD4E                                      MMUSelectLayer1
  17++CD4E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++CD52 CD C8 E0                             call		l1_print_at
  19++CD55 E1                                   pop			hl
  20++CD56 C1                                   pop			bc
  21++CD57 10 E6                                djnz		.BoilerTextLoop
  22++CD59 C9                                   ret
  23++CD5A
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  66+ CD5A              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ CD5A DD 22 FE CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  68+ CD5E ED 53 00 CE                          ld (.STATclcn32zIX),de
  69+ CD62 DD 21 FA CD                          ld ix,.STATclcn32t+36
  70+ CD66 06 09                                ld b,9
  71+ CD68 0E 00                                ld c,0
  72+ CD6A 3E 30        .STATclcn321:           ld a,'0'
  73+ CD6C B7                                   or a
  74+ CD6D DD 5E 00     .STATclcn322:           ld e,(ix+0)
  75+ CD70 DD 56 01                             ld d,(ix+1)
  76+ CD73 2A FE CD                             ld hl,(.STATclcn32z)
  77+ CD76 ED 52                                sbc hl,de
  78+ CD78 22 FE CD                             ld (.STATclcn32z),hl
  79+ CD7B DD 5E 02                             ld e,(ix+2)
  80+ CD7E DD 56 03                             ld d,(ix+3)
  81+ CD81 2A 00 CE                             ld hl,(.STATclcn32zIX)
  82+ CD84 ED 52                                sbc hl,de
  83+ CD86 22 00 CE                             ld (.STATclcn32zIX),hl
  84+ CD89 38 04                                jr c,.STATclcn325
  85+ CD8B 0C                                   inc c
  86+ CD8C 3C                                   inc a
  87+ CD8D 18 DE                                jr .STATclcn322
  88+ CD8F DD 5E 00     .STATclcn325:           ld e,(ix+0)
  89+ CD92 DD 56 01                             ld d,(ix+1)
  90+ CD95 2A FE CD                             ld hl,(.STATclcn32z)
  91+ CD98 19                                   add hl,de
  92+ CD99 22 FE CD                             ld (.STATclcn32z),hl
  93+ CD9C DD 5E 02                             ld e,(ix+2)
  94+ CD9F DD 56 03                             ld d,(ix+3)
  95+ CDA2 2A 00 CE                             ld hl,(.STATclcn32zIX)
  96+ CDA5 ED 5A                                adc hl,de
  97+ CDA7 22 00 CE                             ld (.STATclcn32zIX),hl
  98+ CDAA 11 FC FF                             ld de,-4
  99+ CDAD DD 19                                add ix,de
 100+ CDAF 0C                                   inc c
 101+ CDB0 0D                                   dec c
 102+ CDB1 28 05                                jr z,.STATclcn323
 103+ CDB3 FD 77 00                             ld (iy+0),a
 104+ CDB6 FD 23                                inc iy
 105+ CDB8 10 B0        .STATclcn323:           djnz .STATclcn321
 106+ CDBA 3A FE CD                             ld a,(.STATclcn32z)
 107+ CDBD C6 30                                add A,'0'
 108+ CDBF FD 77 00                             ld (iy+0),a
 109+ CDC2 FD 36 02 00                          ld (iy+2),0
 110+ CDC6 FD 7E 00                             ld      a,(IY+0)
 111+ CDC9 FD 77 01                             ld      (IY+1),a
 112+ CDCC 3E 2E                                ld      a,"."
 113+ CDCE FD 77 00                             ld      (IY+0),a
 114+ CDD1 FD 23                                inc     IY
 115+ CDD3 FD 23                                inc     IY
 116+ CDD5 C9                                   ret
 117+ CDD6 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 117+ CDDA 0A 00 00 00
 117+ CDDE 64 00 00 00
 117+ CDE2 E8 03 00 00
 117+ CDE6 10 27 00 00
 118+ CDEA A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 118+ CDEE 40 42 0F 00
 118+ CDF2 80 96 98 00
 118+ CDF6 00 E1 F5 05
 118+ CDFA 00 CA 9A 3B
 119+ CDFE 00 00        .STATclcn32z            ds 2
 120+ CE00 00 00        .STATclcn32zIX          ds 2
 121+ CE02              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ CE02 2A 02 88     STAT_GetCash:           ld		hl,(Cash+2)
 123+ CE05 EB                                   ex      de,hl
 124+ CE06 DD 2A 00 88                          ld      ix,(Cash)
 125+ CE0A FD 21 EA CC                          ld		iy,STAT_cash_amount
 126+ CE0E CD 5A CD                             call 	STAT_DispDEIXtoIY
 127+ CE11 FD E5                                push    iy
 128+ CE13 D1                                   pop     de
 129+ CE14 21 F4 CC                             ld      hl,STAT_cash_UoM
 130+ CE17 01 04 00                             ld      bc,4
 131+ CE1A ED B0                                ldir
 132+ CE1C C9                                   ret
 133+ CE1D              ;----------------------------------------------------------------------------------------------------------------------------------
 134+ CE1D 7E           STAT_expand_word:       ld      a,(hl)
 135+ CE1E FE 00                                cp      0
 136+ CE20 C8                                   ret     z
 137+ CE21 12                                   ld      (de),a
 138+ CE22 23                                   inc     hl
 139+ CE23 13                                   inc     de
 140+ CE24 18 F7                                jr      STAT_expand_word
 141+ CE26
 142+ CE26              ; hl = list of words
 143+ CE26              ; de = adress to expand to
 144+ CE26 7E           STAT_expand_name:       ld      a,(hl)
 145+ CE27 47                                   ld      b,a
 146+ CE28 23                                   inc     hl
 147+ CE29 7E                                   ld      a,(hl)              ; its a 16 bit
 148+ CE2A 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 149+ CE2B B0                                   or      b
 150+ CE2C 20 01                                jr      nz,.MoreToDo
 151+ CE2E              ;                        ld      (de),a we dont want the null marker now
 152+ CE2E C9                                   ret
 153+ CE2F E5 D5        .MoreToDo:              push    hl,,de
 154+ CE31 7E                                   ld      a,(hl)              ; bodge for now no optimise
 155+ CE32 5F                                   ld      e,a
 156+ CE33 23                                   inc     hl
 157+ CE34 7E                                   ld      a,(hl)
 158+ CE35 57                                   ld      d,a
 159+ CE36 EB                                   ex      hl,de               ; hl is now Word... address
 160+ CE37 D1                                   pop     de                  ; de back to pointer to buffer
 161+ CE38 CD 1D CE     .ProcessWord:           call    STAT_expand_word
 162+ CE3B 3E 20                                ld      a," "               ; speculative space
 163+ CE3D 12                                   ld      (de),a
 164+ CE3E 13                                   inc     de
 165+ CE3F E1                                   pop     hl                  ; get string pointer back
 166+ CE40 23                                   inc     hl
 167+ CE41 23                                   inc     hl                  ; on to next word
 168+ CE42 18 E2                                jr      STAT_expand_name
 169+ CE44
 170+ CE44              STAT_First_Item         EQU     EQ_CARGO_BAY
 171+ CE44 3A 76 82     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 172+ CE47                                      MMUSelectGalaxyA
 172+ CE47 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 173+ CE4A 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 174+ CE4D 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 175+ CE4F 11 00 0C                             ld      de, STAT_display_buff_len
 176+ CE52 CD 03 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 177+ CE55 21 01 C1                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 178+ CE58 11 18 00                             ld      de,STAT_buffer_row_len
 179+ CE5B 06 80                                ld      b,STAT_buffer_rows
 180+ CE5D                                      ZeroA
 180+ CE5D AF          >                        xor a
 181+ CE5E 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 182+ CE5F 19                                   add     hl,de
 183+ CE60 10 FC                                djnz    .EoLLoop
 184+ CE62 DD 21 21 88                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 185+ CE66 FD 21 EA C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 186+ CE6A 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 187+ CE6C 0E 00                                ld      c,0                                         ; Current Row
 188+ CE6E 1E 02                                ld      e,STAT_First_Item
 189+ CE70 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 190+ CE73                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 190+ CE73 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 190+ CE74 CA 98 CE    >                        jp	    z, .NotFitted
 191+ CE77 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 191+ CE7B E5 C5
 192+ CE7D 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 193+ CE80 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 194+ CE82 ED 30                                mul
 195+ CE84 19                                   add     hl,de                                       ; hl = dword list of work pointers
 196+ CE85 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 197+ CE89 CD 26 CE                             call    STAT_expand_name                           ; expand name
 198+ CE8C C1 DD E1 FD                          pop     iy,,ix,,bc
 198+ CE90 E1
 199+ CE91 11 18 00                             ld      de,STAT_buffer_row_len
 200+ CE94 FD 19                                add     iy,de                                       ; now iy = start of next column
 201+ CE96 D1                                   pop     de
 202+ CE97 0C                                   inc     c
 203+ CE98              .NotFitted:
 204+ CE98 DD 23        .DoneFittedCheck:       inc     ix
 205+ CE9A 1C                                   inc     e
 206+ CE9B 10 D3                                djnz    .ProcessRow
 207+ CE9D 79           .DoneProcess:           ld      a,c
 208+ CE9E 32 E9 C0                             ld      (STAT_current_end),a
 209+ CEA1 C9                                   ret
 210+ CEA2
 211+ CEA2 06 0A        draw_STAT_boilertext:   ld		b,10
 212+ CEA4 21 BD C0                             ld		hl,status_boiler_text
 213+ CEA7 CD 3F CD                             call	STAT_print_boiler_text
 214+ CEAA C9                                   ret
 215+ CEAB
 216+ CEAB              GetStatFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++CEAB
   2++CEAB
   3++CEAB 3A 04 88     	ld		a,(Fuel)
   4++CEAE 11 65 AF     	ld		de,txt_fuel_level
   5++CEB1 0E 9C        	ld	c, -100
   6++CEB3 CD BD CE     	call	.Num1
   7++CEB6 0E F6        	ld	c,-10
   8++CEB8 CD BD CE     	call	.Num1
   9++CEBB 0E FF        	ld	c,-1
  10++CEBD              .Num1:
  11++CEBD 06 2F        	ld	b,'0'-1
  12++CEBF              .Num2:
  13++CEBF 04           	inc		b
  14++CEC0 81           	add		a,c
  15++CEC1 38 FC        	jr		c,.Num2
  16++CEC3 91           	sub 	c
  17++CEC4 C5           	push	bc
  18++CEC5 F5           	push	af
  19++CEC6 79           	ld		a,c
  20++CEC7 FE FF        	cp		-1
  21++CEC9 CC D2 CE     	call	z,.InsertDot
  22++CECC 78           	ld		a,b
  23++CECD 12           	ld		(de),a
  24++CECE 13           	inc		de
  25++CECF F1           	pop		af
  26++CED0 C1           	pop		bc
  27++CED1 C9           	ret
  28++CED2              .InsertDot:
  29++CED2 3E 2E        	ld		a,'.'
  30++CED4 12           	ld		(de),a
  31++CED5 13           	inc		de
  32++CED6 C9           	ret
  33++CED7
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 217+ CED7
 218+ CED7              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ CED7 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 220+ CEDA 11 FD BE                             ld		de,$BEFD
 221+ CEDD 3E C0                                ld		a,$C0
 222+ CEDF DD 01                                break
 223+ CEE1                                      MMUSelectLayer2
 223+ CEE1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ CEE5 CD F8 E3                             call	l2_draw_box
 225+ CEE8 CD A2 CE                             call    draw_STAT_boilertext
 226+ CEEB 3A 76 82     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 227+ CEEE                                      MMUSelectGalaxyA
 227+ CEEE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 228+ CEF1 ED 4B 89 82                          ld      bc, (PresentSystemX)
 229+ CEF5 CD BB FA                             call    galaxy_name_at_bc
 230+ CEF8 11 F8 CC                             ld      de,stat_present_name
 231+ CEFB CD 36 CD                             call    stat_copy_to_name
 231+ CEFE
 232+ CEFE 01 98 0B                             ld      bc,present_position
 233+ CF01 21 F8 CC                             ld      hl,stat_present_name
 234+ CF04                                      MMUSelectLayer2
 234+ CF04 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 235+ CF08 1E FF                                ld      e,txt_status_colour
 236+ CF0A CD 5D E3                             call    l2_print_at
 237+ CF0D 3A 76 82     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 238+ CF10                                      MMUSelectGalaxyA
 238+ CF10 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 239+ CF13 ED 4B 8B 82                          ld      bc, (TargetSystemX)
 240+ CF17 CD BB FA                             call    galaxy_name_at_bc
 241+ CF1A 11 17 CD                             ld      de,stat_target_name
 242+ CF1D CD 36 CD                             call    stat_copy_to_name
 242+ CF20
 243+ CF20 01 98 13                             ld      bc,hyperspace_position
 244+ CF23 21 17 CD                             ld      hl,stat_target_name
 245+ CF26                                      MMUSelectLayer2
 245+ CF26 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 246+ CF2A 1E FF                                ld      e,txt_status_colour
 247+ CF2C CD 5D E3                             call    l2_print_at
 248+ CF2F CD E4 CF     .StatusText:	        call	get_cmdr_condition
 249+ CF32 21 70 8A                             ld		hl, ConditionNameIdx
 250+ CF35 CD 88 8B                             call	getTableText
 251+ CF38 01 70 1B                             ld		bc,condition_position
 252+ CF3B                                      MMUSelectLayer2
 252+ CF3B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 253+ CF3F 1E FF                                ld      e,txt_status_colour
 254+ CF41 CD 5D E3                             call    l2_print_at
 255+ CF44 CD AB CE     .DisplayFuel:           call	GetStatFuelLevel
 256+ CF47 21 65 AF                             ld		hl, txt_fuel_level
 257+ CF4A 7E                                   ld		a,(hl)
 258+ CF4B FE 30                                cp		'0'
 259+ CF4D 20 01                                jr		nz,.PrintFuel
 260+ CF4F 23           .SkipLeadingZero:	    inc		hl
 261+ CF50 01 70 23     .PrintFuel:             ld		bc,fuel_position
 262+ CF53                                      MMUSelectLayer2
 262+ CF53 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 263+ CF57 1E FF                                ld      e,txt_status_colour
 264+ CF59 CD 5D E3                             call    l2_print_at
 265+ CF5C CD 02 CE     .DisplayCash:           call	STAT_GetCash
 266+ CF5F 01 70 2B                             ld		bc,cash_position
 267+ CF62 21 EA CC                             ld		hl,STAT_cash_amount
 268+ CF65                                      MMUSelectLayer2
 268+ CF65 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 269+ CF69 1E FF                                ld      e,txt_status_colour
 270+ CF6B CD 5D E3                             call    l2_print_at
 271+ CF6E 3A 98 82     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 272+ CF71 FE 00                                cp		0
 273+ CF73 20 05                                jr		nz,.Naughty
 274+ CF75 21 67 8C                             ld		hl,WordClean
 275+ CF78 18 0C                                jr		.DisplayLegalStatus
 276+ CF7A FE 32        .Naughty:               cp		50
 277+ CF7C 38 05                                jr		c,.JustOffender
 278+ CF7E 21 76 8C     .VeryNaughty:           ld		hl,WordFugitive
 279+ CF81 18 03                                jr		.DisplayLegalStatus
 280+ CF83 21 6D 8C     .JustOffender:          ld		hl,WordOffender
 281+ CF86 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 282+ CF89                                      MMUSelectLayer2
 282+ CF89 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 283+ CF8D 1E FF                                ld      e,txt_status_colour
 284+ CF8F CD 5D E3                             call    l2_print_at
 285+ CF92 3A 9B 82     .DisplayRating:         ld      a,(CurrentRank)
 286+ CF95                                      ; now cached ld		de,(KillTally)
 287+ CF95                                      ; now cached call	getRankIndex
 288+ CF95 21 72 8B                             ld		hl, RankingNameIdx
 289+ CF98 CD 88 8B                             call	getTableText
 290+ CF9B 01 70 3B                             ld		bc,rank_position
 291+ CF9E                                      MMUSelectLayer2
 291+ CF9E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 292+ CFA2 1E FF                                ld      e,txt_status_colour
 293+ CFA4 CD 5D E3                             call    l2_print_at
 294+ CFA7                                      ;break
 295+ CFA7
 296+ CFA7 C9                                   ret
 297+ CFA8
 298+ CFA8
 299+ CFA8              draw_STAT_items:        MMUSelectLayer1
 299+ CFA8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ CFAC CD 80 E0                             call    l1_cls
 301+ CFAF                                      ; add in all the status stuff later
 302+ CFAF 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 303+ CFB2 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 304+ CFB4 5F                                   ld      e,a
 305+ CFB5 ED 30                                mul
 306+ CFB7 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 307+ CFBA 19                                   add     hl,de                                       ;
 308+ CFBB 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 309+ CFBE 47                                   ld      b,a                                         ;
 310+ CFBF 3A E9 C0                             ld      a,(STAT_current_end)                        ;
 311+ CFC2 90                                   sub     b                                           ;
 312+ CFC3                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 312+ CFC3 FE 0A       >                        cp      STAT_eqip_window_len
 312+ CFC5 DA CC CF    >                        jp		c, .FillScreen
 313+ CFC8 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 314+ CFCA 18 01                                jr      .ReadyToPrint
 315+ CFCC 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 316+ CFCD 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 317+ CFD0 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 318+ CFD3 CD C8 E0                             call    l1_print_at
 318+ CFD6
 319+ CFD6 C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 320+ CFD8 11 18 00                             ld      de,STAT_buffer_row_len
 321+ CFDB 19                                   add     hl,de
 322+ CFDC D1                                   pop     de                                           ; get output row back
 323+ CFDD 3E 08                                ld      a,8
 324+ CFDF 82                                   add     a,d
 325+ CFE0 57                                   ld      d,a
 326+ CFE1 10 ED                                djnz    .DrawARow
 327+ CFE3 C9                                   ret
 328+ CFE4
 329+ CFE4              ;----------------------------------------------------------------------------------------------------------------------------------
 330+ CFE4
 331+ CFE4 3A A0 83     get_cmdr_condition:     ld			a,(DockedFlag)
 332+ CFE7 FE FF                                cp			StatePlayerDocked
 333+ CFE9 28 17                                jr			z,.PlayerIsDocked
 334+ CFEB              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 334+ CFEB 3A 8F 82    >                        ld      a,(SpaceStationSafeZone)
 334+ CFEE A7          >                        and     a
 334+ CFEF C8          >                        ret     z
 335+ CFF0 CD BD 87                             call        AreShipsPresent
 336+ CFF3 38 03                                jr          c,.NoShipsAround
 337+ CFF5 3E 01                                ld          a,1
 338+ CFF7 C9                                   ret
 339+ CFF8 3A 23 85     .NoShipsAround:         ld			a,(PlayerEnergy)
 340+ CFFB FE 80                                cp			$80
 341+ CFFD 3E 01                                ld          a,1
 342+ CFFF CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 343+ D001 C9                                   ret
 344+ D002 AF           .PlayerIsDocked:        xor			a
 345+ D003 C9                                   ret
 346+ D004
 347+ D004              draw_status_menu:       InitNoDoubleBuffer
 347+ D004             >                            MMUSelectLayer1
 347+ D004 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 347+ D008 CD 80 E0    >                            call	l1_cls
 347+ D00B 3E 07       >                            ld		a,7
 347+ D00D CD 9B E0    >                            call	l1_attr_cls_to_a
 347+ D010             >                            MMUSelectLayer2
 347+ D010 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ D014 CD 0A E0    >                            call    asm_l2_double_buffer_off
 347+ D017 CD 0E E2    >                            call	l2_cls	; Get some space
 347+ D01A             >                            MMUSelectSpriteBank
 347+ D01A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 347+ D01E CD 6E E5    >                            call    sprite_cls_cursors
 348+ D021 3E 08                                ld		a,8
 349+ D023 32 00 82                             ld		(MenuIdMax),a
 350+ D026 01 01 01     .Drawbox:               ld		bc,$0101
 351+ D029 11 FD BE                             ld		de,$BEFD
 352+ D02C 3E C0                                ld		a,$C0
 353+ D02E                                      MMUSelectLayer2
 353+ D02E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 354+ D032 CD F8 E3                             call	l2_draw_box
 355+ D035 01 01 0A                             ld		bc,$0A01
 356+ D038 11 C0 FE                             ld		de,$FEC0
 357+ D03B                                      SetMemToN STAT_current_topItem, 0
 357+ D03B 3E 00       >                        ld      a,0
 357+ D03D 32 E8 C0    >                        ld      (STAT_current_topItem),a
 358+ D040 CD 83 E4                             call	l2_draw_horz_line
 359+ D043 CD 44 CE     .equipment              call    STAT_buffer_list
 360+ D046 CD A8 CF                             call    draw_STAT_items
 361+ D049 CD D7 CE                             call    draw_STAT_maintext
 362+ D04C C9                                   ret
 363+ D04D
 364+ D04D              ;----------------------------------------------------------------------------------------------------------------------------------
 365+ D04D              ; Handles all the input whilst in the market menu
 366+ D04D 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 367+ D04F CD EF 7E                             call    is_key_pressed
 368+ D052 CC 5E D0                             call    z,STAT_UpPressed
 369+ D055 3E 4C                                ld      a,c_Pressed_CursorDown
 370+ D057 CD EF 7E                             call    is_key_pressed
 371+ D05A CC 73 D0                             call    z,STAT_DownPressed
 372+ D05D C9                                   ret
 373+ D05E
 374+ D05E              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ D05E AF           STAT_UpPressed:         xor     a
 376+ D05F 32 E7 C0                             ld      (STAT_selected_row),a
 377+ D062 3A E8 C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 378+ D065 FE 00                                cp      0
 379+ D067 C8                                   ret     z
 380+ D068 3D                                   dec     a           ; chjange later to buffering step back 1
 381+ D069 32 E8 C0                             ld      (STAT_current_topItem),a
 382+ D06C CD A8 CF                             call    draw_STAT_items
 383+ D06F CD A2 CE                             call    draw_STAT_boilertext
 384+ D072 C9                                   ret
 385+ D073              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ D073 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 387+ D075 32 E7 C0                             ld      (STAT_selected_row),a
 388+ D078 3A E9 C0                             ld      a,(STAT_current_end)
 389+ D07B 47                                   ld      b,a                             ; This check is if the current list is < one screen
 390+ D07C 05                                   dec     b
 391+ D07D 3A E7 C0                             ld      a,(STAT_selected_row)
 392+ D080 B8                                   cp      b
 393+ D081 C8                                   ret     z
 394+ D082 FE 09                                cp      STAT_eqip_window_len-1
 395+ D084 28 05                                jr      z, .check_scroll_down
 396+ D086 21 E7 C0                             ld      hl,STAT_selected_row
 397+ D089 34                                   inc     (hl)
 398+ D08A C9                                   ret
 399+ D08B 47           .check_scroll_down:     ld      b,a
 400+ D08C 3A E8 C0                             ld      a,(STAT_current_topItem)
 401+ D08F 80                                   add     b
 402+ D090 3C                                   inc     a
 403+ D091 21 E9 C0                             ld      hl,STAT_current_end
 404+ D094                                      ReturnIfAGTEusng      (hl)
 404+ D094 BE          >                        cp    (hl)
 404+ D095 D0          >                        ret	 nc
 405+ D096 21 E8 C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 406+ D099 34                                   inc     (hl)
 407+ D09A CD A8 CF                             call    draw_STAT_items
 408+ D09D CD A2 CE                             call    draw_STAT_boilertext
 409+ D0A0 C9                                   ret
 410+ D0A1
# file closed: ./Menus/status_menu.asm
 922  D0A1                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 923  D0A1              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 924  D0A1                  SLOT    MenuEquipSAddr
 925  D0A1                  PAGE    BankMenuEquipS
 926  D0A1                  ORG     MenuEquipSAddr
 927  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 AD 92  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++D26F 4E                                   ld			c,(hl)		; Get Row into b
   5++D270 23                                   inc			hl
   6++D271 46                                   ld			b,(hl)		; Get Col into b
   7++D272 23                                   inc			hl
   8++D273 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++D274 23                                   inc			hl
  10++D275 56                                   ld			d,(hl)		; Get text address Hi into E
  11++D276 23                                   inc			hl
  12++D277 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++D278 EB                                   ex			de,hl		; now hl = address of text data
  14++D279 1E FF                                ld			e,txt_status_colour
  15++D27B C5                                   push		bc
  16++D27C D1                                   pop			de
  17++D27D                                      MMUSelectLayer1
  17++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++D281 CD C8 E0                             call		l1_print_at
  19++D284 E1                                   pop			hl
  20++D285 C1                                   pop			bc
  21++D286 10 E6                                djnz		.BoilerTextLoop
  22++D288 C9                                   ret
  23++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 02 88     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 00 88                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 03 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 0A E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD 0E E2    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 00 82                             ld      (MenuIdMax),a
 380+ D40C 3A 76 82     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 89 82                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F8 E3                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 83 E4                             call	l2_draw_horz_line
 398+ D441 3A 76 82     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 28 92                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD EF 7E                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD EF 7E                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD EF 7E                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD EF 7E                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 76 82     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 22 94                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 1F 88                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 17 88     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD 22 94                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A 76 82     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 96 82     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 579+ D5B1 3A 02 88    >                        ld      a,(Cash+2)
 579+ D5B4 A7          >                        and     a
 579+ D5B5 C2 C5 D5    >                        jp	    nz,.MoreThanRequired
 580+ D5B8 2A 00 88                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 581+ D5BB DD 5E 04                             ld      e,(ix+4)
 582+ D5BE DD 56 05                             ld      d,(ix+5)
 583+ D5C1 CD B6 99                             call	compare16HLDE
 584+ D5C4 D8                                   ret     c                                           ; Insufficient Funds
 585+ D5C5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 586+ D5C8 FE 00                                cp      0
 587+ D5CA 28 15                                jr      z,.MaxFuelOut
 588+ D5CC FE 01                                cp      1
 589+ D5CE 28 1B                                jr      z,.AddMissle
 590+ D5D0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 590+ D5D0 FE 0A       >                        cp     EQ_FRONT_PULSE
 590+ D5D2 D2 F5 D5    >                        jp		nc,.AddLaser
 591+ D5D5 21 1F 88     .AddNormalItem:         ld      hl,EquipmentFitted
 592+ D5D8 ED 31                                add     hl,a
 593+ D5DA 36 FF                                ld      (hl),EquipmentItemFitted
 594+ D5DC 3E 2A                                ld      a,"*"
 595+ D5DE C3 3D D6                             jp      .AddedItem
 596+ D5E1              .MaxFuelOut:            MaxFuelMacro
 596+ D5E1 3E 46       >						ld		a,MaxFuelLevel
 596+ D5E3 32 04 88    >						ld		(Fuel),a
 597+ D5E6 3E 2A                                ld      a,"*"
 598+ D5E8 C3 3D D6                             jp      .AddedItem
 599+ D5EB 21 96 82     .AddMissle:             ld      hl,NbrMissiles
 600+ D5EE 34                                   inc     (hl)
 601+ D5EF 7E                                   ld      a,(hl)
 602+ D5F0 C6 30                                add     "0"
 603+ D5F2 C3 3D D6                             jp      .AddedItem
 604+ D5F5 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 605+ D5F8 FE FF                                cp      $FF
 606+ D5FA 20 29                                jr      nz,.BuyLaser
 607+ D5FC              .LargeCargoBay: ;TODO
 608+ D5FC 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 609+ D5FD 21 D6 F4                             ld      hl,ShipEquipmentList
 610+ D600 16 10                                ld      d,ShipEquipTableRowLen
 611+ D602 5F                                   ld      e,a
 612+ D603 ED 30                                mul
 613+ D605 19                                   add     hl,de               ; now we have the row for the current laser
 614+ D606 3E 04                                ld      a,4
 615+ D608 ED 31                                add     hl,a
 616+ D60A 7E                                   ld      a,(hl)
 617+ D60B 5F                                   ld      e,a
 618+ D60C 23                                   inc     hl
 619+ D60D 7E                                   ld      a,(hl)
 620+ D60E 57                                   ld      d,a
 621+ D60F E5 C5                                push    hl,,bc
 622+ D611 CD 22 94                             call    addDEtoCash         ; refund laser value
 623+ D614 C1 E1                                pop     hl,,bc
 624+ D616 3E 02                                ld      a,2
 625+ D618 ED 31                                add     hl,a
 626+ D61A 3E 2D                                ld      a,"-"
 627+ D61C 77                                   ld      (hl),a              ; clear on ship equipment
 628+ D61D 21 1F 88                             ld      hl,EquipmentFitted
 629+ D620 79                                   ld      a,c                 ; get back current laser ref
 630+ D621 ED 31                                add     hl,a
 631+ D623 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 632+ D625 21 1F 88     .BuyLaser:              ld      hl,EquipmentFitted
 633+ D628 DD 7E 06                             ld      a,(ix+6)
 634+ D62B ED 31                                add     hl,a
 635+ D62D 36 FF                                ld      (hl),EquipmentItemFitted
 636+ D62F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 637+ D632 21 17 88                             ld      hl,LaserType
 638+ D635 ED 31                                add     hl,a
 639+ D637 DD 7E 08                             ld      a,(ix+8)            ; get type
 640+ D63A 77                                   ld      (hl),a
 641+ D63B 3E 2A                                ld      a,"*"
 642+ D63D DD 77 07     .AddedItem              ld      (ix+7),a
 643+ D640 DD 5E 04                             ld      e,(ix+4)
 644+ D643 DD 56 05                             ld      d,(ix+5)
 645+ D646 CD 35 94                             call    subDEfromCash
 646+ D649 CD 5D D4                             call    eqip_refesh_buffer
 647+ D64C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 928  D64D                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
 929  D64D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
 930  D64D                                  SLOT    LaunchShipAddr
 931  D64D                                  PAGE    BankLaunchShip
 932  D64D                                  ORG     LaunchShipAddr
 933  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 76 E4                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 76 E4                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD F8 E9                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD F8 E9                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 29 7D                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 29 7D                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 04 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 38 E1                             ld      (l2_cls_byte),a
 136+ C196 CD 77 E1                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 38 E1                             ld      (l2_cls_byte),a
 139+ C19E CD DE E1                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 97 E2                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 38 E1                             ld      (l2_cls_byte),a
 146+ C1B3 CD 77 E1                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 38 E1                             ld      (l2_cls_byte),a
 149+ C1BB CD DE E1                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A EC 81    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 ED 81    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 EE 81 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 ED 81    >                        ld      (DELTA),a
 160+ C1E9 32 EE 81    >                        ld      (DELT4Lo),a
 160+ C1EC 32 EF 81    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 A0 83                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E5                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 04 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 38 E1                             ld      (l2_cls_byte),a
 176+ C212 CD 77 E1                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 38 E1                             ld      (l2_cls_byte),a
 179+ C21A CD DE E1                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 97 E2                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 38 E1                             ld      (l2_cls_byte),a
 186+ C22F CD 77 E1                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 38 E1                             ld      (l2_cls_byte),a
 189+ C237 CD DE E1                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 ED 81    >                        ld      (DELTA),a
 200+ C257 32 EE 81    >                        ld      (DELT4Lo),a
 200+ C25A 32 EF 81    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 A0 83                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E8 E3                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F8 E3                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 A0 83                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E8 E3                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F8 E3                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 87 69    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 934  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
 935  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 936  C2CD                                  SLOT    UniverseBankAddr
 937  C2CD                                  PAGE    BankUNIVDATA0
 938  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 939  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                       1234567890123456
  14+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  14+ C004 65 72 73 65
  14+ C008 20 50 47
  15+ C00B 58           StartOfUnivN:       DB "X"
  16+ C00C 00 00        StartOfUnivPad:     DS 2
  17+ C00E 00           StartOfUnivM:       DB 0
  18+ C00F 00           StartOfUnivT        DB 0
  19+ C010 00 00 00...  StartOfUnivName     DS 16
  20+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  21+ C020
  22+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  23+ C020              ; Universe map substibute for INWK
  24+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  25+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnKStartOfRuntimeData:
  36++C03F 00           UBnKSlotNumber              DB  0
  37++C040 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnKSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnKAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnKRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnKRotZCounter             DB  0                       ; INWK +30
  48++C04A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  49++C04B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  50++C04C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  51++C04D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  52++C04E 00           univRAT                     DB  0               ; 99
  53++C04F 00           univRAT2                    DB  0               ; 9A
  54++C050 00           univRAT2Val                 DB  0               ; 9A
  55++C051 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  56++C052 00           UBnkDrawAllFaces            DB  0
  57++C053 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  58++C054 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  59++C055 00           UBnKSpawnObject             DB  0
  60++C056 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  61++C057 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  62++C058 00           UBnKEnergy                  DB  0                       ; INWK +35
  63++C059 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  64++C05A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  65++C05B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  66++C05C 00           UBnKMissilesLeft            DB  0
  67++C05D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  68++C05E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  69++C05F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  70++C060 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  71++C061              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  72++C061              ; Flags work as follows:
  73++C061              ; UBnKSpawnObject - signals on death to spawn cargo items
  74++C061              ; 0 -                   Spawn Cargo 1
  75++C061              ; 1 -                   Spawn Cargo 2
  76++C061              ; 2 -                   Spawn Cargo 3
  77++C061              ; 3 -                   Spawn Cargo 4
  78++C061              ; 4 -                   Spawn Alloy 1
  79++C061              ; 5 -                   Spawn Alloy 2
  80++C061              ; 6 -                   Spawn Alloy 3
  81++C061              ; 7 -                   Spawn Alloy 4
  82++C061
  83++C061              ; UBnkaiatkecm
  84++C061              ; Bit	                Description
  85++C061              ; 7 -                   AI Enabled Flag
  86++C061              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  87++C061              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  88++C061              ;                       linger can be done by not erasing ship unit missile equeue handled
  89++C061              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  90++C061              ; 3 -                   Display state - Plot as a Dot
  91++C061              ; 2 -                   Nbr of Missiles bit 2
  92++C061              ; 1 -                   Nbr of Missiles bit 1
  93++C061              ; 0 -                   ECM present flag
  94++C061              ; ShipNewBitsAddr (in blueprint)
  95++C061              ;Bit	                Description
  96++C061              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  97++C061              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  98++C061              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  99++C061              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 100++C061              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 101++C061              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 102++C061              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 103++C061              ;                       Hostile ships will attack us on sight; there are quite a few of them
 104++C061              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 105++C061              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 106++C061              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 107++C061              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 108++C061              ;#4	Docking flag        * 0 = not docking * 1 = docking
 109++C061              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 110++C061              ;                       This flag is randomly set for traders when they are spawned
 111++C061              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 112++C061              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 113++C061              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 114++C061              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 115++C061              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 116++C061              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 117++C061              ;                       Ships that are cops: Viper, Transporter
 118++C061              ;#7	Scooped, docked, escape pod flag
 119++C061              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 120++C061              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 121++C061              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 122++C061
# file closed: ././Universe/Ships/AIRuntimeData.asm
  26+ C061              ; moved to runtime asm
  27+ C061              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  28+ C061              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  29+ C061
  30+ C061              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  31+ C061              ;                    [roofv x y z ] roof vector (up)
  32+ C061              ;                    [sidev x y z ] side vector (right)
  33+ C061              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  34+ C061              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  35+ C061
  36+ C061
  37+ C061                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C061              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C061 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C063              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C063 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C065 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C067 00 00        UBnkTransmatRoofvX          DW 0
   7++C069              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C069 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06D 00 00        UBnkTransmatNosevX          DW 0
  11++C06F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C06F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C071 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C073 00 00        UbnkTransmatTransX          DW 0
  15++C075 00 00        UbnkTransmatTransY          DW 0
  16++C077 00 00        UbnkTransmatTransZ          DW 0
  17++C079              XX16                        equ UBnkTransmatSidev
  18++C079              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C079 00 00        UbnkTransInvRow0x0          DW 0
  20++C07B 00 00        UbnkTransInvRow0x1          DW 0
  21++C07D 00 00        UbnkTransInvRow0x2          DW 0
  22++C07F 00 00        UbnkTransInvRow0x3          DW 0
  23++C081 00 00        UbnkTransInvRow1y0          DW 0
  24++C083 00 00        UbnkTransInvRow1y1          DW 0
  25++C085 00 00        UbnkTransInvRow1y2          DW 0
  26++C087 00 00        UbnkTransInvRow1y3          DW 0
  27++C089 00 00        UbnkTransInvRow2z0          DW 0
  28++C08B 00 00        UbnkTransInvRow2z1          DW 0
  29++C08D 00 00        UbnkTransInvRow2z2          DW 0
  30++C08F 00 00        UbnkTransInvRow2z3          DW 0
  31++C091
  32++C091              XX16Inv             equ UbnkTransInvRow0x0
  33++C091
# file closed: ././Universe/Ships/XX16Vars.asm
  38+ C091                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C091              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00           UbnkProjxLo                 DB  0
   3++C092 00           UbnkProjxHi                 DB  0
   4++C093 00           UbnkProjxSgn                DB  0
   5++C094              UbnkProjx                   EQU UbnkProjxLo
   6++C094 00           UbnkProjyLo                 DB  0
   7++C095 00           UbnkProjyHi                 DB  0
   8++C096 00           UbnkProjySgn                DB  0
   9++C097              UbnkProjy                   EQU UbnkProjyLo
  10++C097 00           UbnkProjzLo                 DB  0
  11++C098 00           UbnkProjzHi                 DB  0
  12++C099 00           UbnkProjzSgn                DB  0
  13++C09A              UbnkProjz                   EQU UbnkProjzLo
  14++C09A              XX25                        EQU UbnkProjxLo
  15++C09A
# file closed: ././Universe/Ships/XX25Vars.asm
  39+ C09A                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09A 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09B 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09C 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09D              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09D 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09E 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C09F 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A3              XX18                        equ UBnkDrawCam0xLo
  15++C0A3
# file closed: ././Universe/Ships/XX18Vars.asm
  40+ C0A3
  41+ C0A3              ; Used to make 16 bit reads a little cleaner in source code
  42+ C0A3 00 00 00     UbnkZPoint                  DS  3
  43+ C0A6              UbnkZPointLo                equ UbnkZPoint
  44+ C0A6              UbnkZPointHi                equ UbnkZPoint+1
  45+ C0A6              UbnkZPointSign              equ UbnkZPoint+2
  46+ C0A6                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0A9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AC
   9++C0AC              XX15                        equ UBnkXScaled
  10++C0AC              XX15VecX                    equ XX15
  11++C0AC              XX15VecY                    equ XX15+1
  12++C0AC              XX15VecZ                    equ XX15+2
  13++C0AC              UbnkXPoint                  equ XX15
  14++C0AC              UbnkXPointLo                equ XX15+0
  15++C0AC              UbnkXPointHi                equ XX15+1
  16++C0AC              UbnkXPointSign              equ XX15+2
  17++C0AC              UbnkYPoint                  equ XX15+3
  18++C0AC              UbnkYPointLo                equ XX15+3
  19++C0AC              UbnkYPointHi                equ XX15+4
  20++C0AC              UbnkYPointSign              equ XX15+5
  21++C0AC              ; Repurposed XX15 pre clip plines
  22++C0AC              UbnkPreClipX1               equ XX15+0
  23++C0AC              UbnkPreClipY1               equ XX15+2
  24++C0AC              UbnkPreClipX2               equ XX15+4
  25++C0AC              UbnkPreClipY2               equ XX15+6
  26++C0AC              ; Repurposed XX15 post clip lines
  27++C0AC              UBnkNewX1                   equ XX15+0
  28++C0AC              UBnkNewY1                   equ XX15+1
  29++C0AC              UBnkNewX2                   equ XX15+2
  30++C0AC              UBnkNewY2                   equ XX15+3
  31++C0AC              ; Repurposed XX15
  32++C0AC              regXX15fx                   equ UBnkXScaled
  33++C0AC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AC              regXX15fy                   equ UBnkYScaled
  35++C0AC              regXX15fySgn                equ UBnkYScaledSign
  36++C0AC              regXX15fz                   equ UBnkZScaled
  37++C0AC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AC              ; Repurposed XX15
  39++C0AC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AC              ; After clipping the coords are two 8 bit pairs
  43++C0AC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AC              ; Repurposed XX15 when plotting lines
  46++C0AC              ; Repurposed XX15 before calling clip routine
  47++C0AC              UBnkX1                      equ XX15
  48++C0AC              UBnKx1Lo                    equ XX15
  49++C0AC              UBnKx1Hi                    equ XX15+1
  50++C0AC              UBnkY1                      equ XX15+2
  51++C0AC              UbnKy1Lo                    equ XX15+2
  52++C0AC              UBnkY1Hi                    equ XX15+3
  53++C0AC              UBnkX2                      equ XX15+4
  54++C0AC              UBnkX2Lo                    equ XX15+4
  55++C0AC              UBnkX2Hi                    equ XX15+5
  56++C0AC
# file closed: ././Universe/Ships/XX15Vars.asm
  47+ C0AC                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0AF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B2 00 00 00...  XX12Save                    DS  6
  10++C0B8 00 00 00...  XX12Save2                   DS  6
  11++C0BE              XX12                        equ UBnkXX12xLo
  12++C0BE              varXX12                     equ UBnkXX12xLo
  13++C0BE              ; Repurposed XX12 when plotting lines
  14++C0BE              UBnkY2                      equ XX12+0
  15++C0BE              UbnKy2Lo                    equ XX12+0
  16++C0BE              UBnkY2Hi                    equ XX12+1
  17++C0BE              UBnkDeltaXLo                equ XX12+2
  18++C0BE              UBnkDeltaXHi                equ XX12+3
  19++C0BE              UBnkDeltaYLo                equ XX12+4
  20++C0BE              UBnkDeltaYHi                equ XX12+5
  21++C0BE              UbnkGradient                equ XX12+2
  22++C0BE              UBnkTemp1                   equ XX12+2
  23++C0BE              UBnkTemp1Lo                 equ XX12+2
  24++C0BE              UBnkTemp1Hi                 equ XX12+3
  25++C0BE              UBnkTemp2                   equ XX12+3
  26++C0BE              UBnkTemp2Lo                 equ XX12+3
  27++C0BE              UBnkTemp2Hi                 equ XX12+4
  28++C0BE
# file closed: ././Universe/Ships/XX12Vars.asm
  48+ C0BE
  49+ C0BE
  50+ C0BE              ; Post clipping the results are now 8 bit
  51+ C0BE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  52+ C0BF 00           UBnkProjectedY              DB  0
  53+ C0C0 00           UBnkProjectedX              DB  0
  54+ C0C1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  55+ C0C1 00 00 00...  XX15Save                    DS  8
  56+ C0C9 00 00 00...  XX15Save2                   DS  8
  57+ C0D1 00           VarBackface                 DB 0
  58+ C0D2              ; Heap (or array) information for lines and normals
  59+ C0D2              ; Coords are stored XY,XY,XY,XY
  60+ C0D2              ; Normals
  61+ C0D2              ; This needs re-oprganising now.
  62+ C0D2              ; Runtime Calculation Store
  63+ C0D2
  64+ C0D2              FaceArraySize               equ 30
  65+ C0D2              EdgeHeapSize                equ 40
  66+ C0D2              NodeArraySize               equ 40
  67+ C0D2              LineArraySize               equ 50
  68+ C0D2              TraingleArraySize           equ 25
  69+ C0D2              ; Storage arrays for data
  70+ C0D2              ; Structure of arrays
  71+ C0D2              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  72+ C0D2              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  73+ C0D2              ; NodeArray         -  4 bytes per element      0           1            2          3
  74+ C0D2              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  75+ C0D2              ; Line Array        -  4 bytes per eleement     0           1            2          3
  76+ C0D2              ;                                               X1          Y1           X2         Y2
  77+ C0D2 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  78+ C0F0              ; Node array holds the projected to screen position regardless of if its clipped or not
  79+ C0F0              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  80+ C0F0 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  81+ C190 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  82+ C230 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  83+ C2F8 00 00 00...  UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  84+ C35C              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  85+ C35C              UBnkTraingleArray           EQU UbnkLineArray           ; We can use the line array as we draw lines or traingles
  86+ C35C 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  87+ C384              ; Array current Lengths
  88+ C384 00           UbnkFaceVisArrayLen         DS 1
  89+ C385 00           UBnkNodeArrayLen            DS 1
  90+ C386 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  91+ C387 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  92+ C388              XX20                        equ UbnkLineArrayLen
  93+ C388              varXX20                     equ UbnkLineArrayLen
  94+ C388
  95+ C388 00           UbnkEdgeHeapSize            DS 1
  96+ C389 00           UbnkEdgeHeapBytes           DS 1
  97+ C38A 00           UBnkLinesHeapLen            DS 1
  98+ C38B 00           UbnKEdgeHeapCounter         DS 1
  99+ C38C 00           UbnKEdgeRadius              DS 1
 100+ C38D 00           UbnKEdgeShipType            DS 1
 101+ C38E 00           UbnKEdgeExplosionType       DS 1
 102+ C38F
 103+ C38F              ; Node heap is used to write out transformed Vertexs
 104+ C38F
 105+ C38F              ; Lines
 106+ C38F 00 00 00     UBnkXX19                    DS  3
 107+ C392
 108+ C392 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 109+ C3AD              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 110+ C3AD              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 111+ C3AD              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 112+ C3AD              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 113+ C3AD              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 114+ C3AD              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 115+ C3AD              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 116+ C3AD              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 117+ C3AD              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 118+ C3AD              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 119+ C3AD              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 120+ C3AD              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 121+ C3AD              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 122+ C3AD              DotAddr                     equ UBnkHullCopy + DotOffset
 123+ C3AD              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 124+ C3AD              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 125+ C3AD              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 126+ C3AD              QAddr                       equ UBnkHullCopy + QOffset
 127+ C3AD              LaserAddr                   equ UBnkHullCopy + LaserOffset
 128+ C3AD              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 129+ C3AD              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 130+ C3AD              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 131+ C3AD              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 132+ C3AD              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 133+ C3AD              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 134+ C3AD              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 135+ C3AD              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 136+ C3AD              ; Static Ship Data. This is copied in when creating the universe object
 137+ C3AD              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 138+ C3AD
 139+ C3AD 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 140+ C49D 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 141+ C565 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 142+ C5B5 00 00 00...  UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 143+ C745
 144+ C745 0C           OrthagCountdown             DB  12
 145+ C746
 146+ C746              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 147+ C746              UBnk_Data_len               EQU $ - StartOfUniv
 148+ C746
 149+ C746              ZeroUnivPitchAndRoll:   MACRO
 150+ C746 ~                                    xor     a
 151+ C746 ~                                    ld      (UBnKRotXCounter),a
 152+ C746 ~                                    ld      (UBnKRotZCounter),a
 153+ C746                                      ENDM
 154+ C746
 155+ C746              MaxUnivPitchAndRoll:    MACRO
 156+ C746 ~                                    ld      a,127
 157+ C746 ~                                    ld      (UBnKRotXCounter),a
 158+ C746 ~                                    ld      (UBnKRotZCounter),a
 159+ C746                                      ENDM
 160+ C746
 161+ C746              RandomUnivPitchAndRoll: MACRO
 162+ C746 ~                                    call    doRandom
 163+ C746 ~                                    or      %01101111
 164+ C746 ~                                    ld      (UBnKRotXCounter),a
 165+ C746 ~                                    call    doRandom
 166+ C746 ~                                    or      %01101111
 167+ C746 ~                                    ld      (UBnKRotZCounter),a
 168+ C746                                      ENDM
 169+ C746
 170+ C746              RandomUnivSpeed:        MACRO
 171+ C746 ~                                    call    doRandom
 172+ C746 ~                                    and     31
 173+ C746 ~                                    ld      (UBnKSpeed),a
 174+ C746                                      ENDM
 175+ C746
 176+ C746              MaxUnivSpeed:           MACRO
 177+ C746 ~                                    ld      a,31
 178+ C746 ~                                    ld      (UBnKSpeed),a
 179+ C746                                      ENDM
 180+ C746
 181+ C746              ZeroUnivAccelleration:  MACRO
 182+ C746 ~                                    xor     a
 183+ C746 ~                                    ld      (UBnKAccel),a
 184+ C746                                      ENDM
 185+ C746
 186+ C746 3A AA C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 187+ C749 F6 04                                or      ShipIsHostile
 188+ C74B 32 AA C3                             ld      (ShipNewBitsAddr),a
 189+ C74E C9                                   ret
 190+ C74F
 191+ C74F 3A AA C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 192+ C752 E6 FB                                and     ShipNotHostile
 193+ C754 32 AA C3                             ld      (ShipNewBitsAddr),a
 194+ C757 C9                                   ret
 195+ C758
 196+ C758
 197+ C758              ; --------------------------------------------------------------
 198+ C758 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 199+ C75B 11 46 07                             ld      de,UBnk_Data_len
 200+ C75E AF                                   xor     a
 201+ C75F CD 03 7D                             call    memfill_dma
 202+ C762 C9                                   ret
 203+ C763              ; --------------------------------------------------------------
 204+ C763 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 205+ C766 06 09                                ld      b, 3*3
 206+ C768 AF                                   xor     a
 207+ C769 77           .zeroLoop:              ld      (hl),a
 208+ C76A 23                                   inc     hl
 209+ C76B 10 FC                                djnz    .zeroLoop
 210+ C76D C9                                   ret
 211+ C76E
 212+ C76E 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 213+ C770 32 59 C0                             ld      (UBnKECMCountDown),a            ;
 214+ C773 3A 08 81                             ld      a,(ECMCountDown)
 215+ C776                                      ReturnIfALTNusng ECMCounterMax
 215+ C776 FE 80       >                        cp    ECMCounterMax
 215+ C778 D8          >                        ret	 c
 216+ C779 3E 80                                ld      a,ECMCounterMax
 217+ C77B 32 08 81                             ld      (ECMCountDown),a
 218+ C77E C9                                   ret
 219+ C77F
 220+ C77F 3A 58 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 221+ C782                                      ReturnIfAGTEMemusng EnergyAddr
 221+ C782 21 A1 C3    >                        ld      hl,EnergyAddr
 221+ C785 BE          >                        cp      (hl)
 221+ C786 D0          >                        ret	    nc
 222+ C787 3C                                   inc     a
 223+ C788 32 58 C0                             ld      (UBnKEnergy),a
 224+ C78B C9                                   ret
 225+ C78C              ; A ship normally needs enough energy to fire ECM but if its shot then
 226+ C78C              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 227+ C78C              ; plus a 50% chance it will blow the ECM up
 228+ C78C 3A 59 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 229+ C78F                                      ReturnIfAIsZero
 229+ C78F A7          >                        and     a
 229+ C790 C8          >                        ret     z
 230+ C791 3D                                   dec     a
 231+ C792 32 59 C0                             ld      (UBnKECMCountDown),a
 232+ C795 21 58 C0                             ld      hl,UBnKEnergy
 233+ C798 35                                   dec     (hl)
 234+ C799 F0                                   ret     p
 235+ C79A CD 71 C8     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 236+ C79D C9                                   ret
 237+ C79E
 238+ C79E              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 239+ C79E              JumpOffSet:             MACRO   Axis
 240+ C79E ~                                    ld      hl,(Axis)
 241+ C79E ~                                    ld      a,h
 242+ C79E ~                                    and     SignOnly8Bit
 243+ C79E ~                                    jr      nz,.NegativeAxis
 244+ C79E ~            .PositiveAxis:          dec     l
 245+ C79E ~                                    jp      m,.MovingNegative
 246+ C79E ~                                    jp      .Done
 247+ C79E ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 248+ C79E ~                                    jp      .Done
 249+ C79E ~            .MovingNegative:        ld      hl,$8001                        ; -1
 250+ C79E ~            .Done                   ld      (Axis),hl
 251+ C79E                                      ENDM
 252+ C79E
 253+ C79E
 254+ C79E              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 254+ C79E 2A 27 C0    >                        ld      hl,(UBnKzhi)
 254+ C7A1 7C          >                        ld      a,h
 254+ C7A2 E6 80       >                        and     SignOnly8Bit
 254+ C7A4 20 07       >                        jr      nz,.NegativeAxis
 254+ C7A6 2D          >.PositiveAxis:          dec     l
 254+ C7A7 FA B1 C7    >                        jp      m,.MovingNegative
 254+ C7AA C3 B4 C7    >                        jp      .Done
 254+ C7AD 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 254+ C7AE C3 B4 C7    >                        jp      .Done
 254+ C7B1 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 254+ C7B4 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 255+ C7B7 C9                                   ret
 256+ C7B8
 257+ C7B8
 258+ C7B8              ; --------------------------------------------------------------
 259+ C7B8              ; update ship speed and pitch based on adjustments from AI Tactics
 260+ C7B8 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 261+ C7BB                                      JumpIfAIsZero .SkipAccelleration
 261+ C7BB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C7BC CA DA C7    >                        jp	    z, .SkipAccelleration
 262+ C7BF 47                                   ld      b,a                             ; b = accelleration in 2's c
 263+ C7C0 3A 46 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 264+ C7C3                                      ClearCarryFlag
 264+ C7C3 B7          >                        or a
 265+ C7C4 88                                   adc     a,b
 266+ C7C5                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 266+ C7C5 F2 C9 C7    >                        jp		p, .DoneAccelleration
 267+ C7C8              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 267+ C7C8 AF          >                        xor a
 268+ C7C9 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 269+ C7CA 3A A2 C3                             ld      a,(SpeedAddr)                   ;    speed = limit
 270+ C7CD                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 270+ C7CD B8          >                        cp     b
 270+ C7CE D2 D2 C7    >                        jp		nc,.SpeedInLimits
 271+ C7D1 47                                   ld      b,a                             ; .
 272+ C7D2 78           .SpeedInLimits:         ld      a,b                             ; .
 273+ C7D3 32 46 C0                             ld      (UBnKSpeed),a                   ; .
 274+ C7D6                                      ZeroA                                   ; acclleration = 0
 274+ C7D6 AF          >                        xor a
 275+ C7D7 32 47 C0                             ld      (UBnKAccel),a                   ; for next AI update
 276+ C7DA              .SkipAccelleration:     ; handle roll and pitch rates
 277+ C7DA C9                                   ret
 278+ C7DB
 279+ C7DB 21 5B A6     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 280+ C7DE 11 20 C0                             ld      de,UBnKxlo                      ;
 281+ C7E1 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 282+ C7E4 ED B0                                ldir                                    ;
 283+ C7E6 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 284+ C7E8 32 47 C0                             ld      (UBnKAccel),a                   ;
 285+ C7EB                                      ZeroA
 285+ C7EB AF          >                        xor a
 286+ C7EC 32 48 C0                             ld      (UBnKRotXCounter),a
 287+ C7EF 32 49 C0                             ld      (UBnKRotZCounter),a
 288+ C7F2 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 289+ C7F4 32 4A C0                             ld      (UBnKRAT),a
 290+ C7F7 3C                                   inc     a
 291+ C7F8 32 4B C0                             ld      (UBnKRAT2),a
 292+ C7FB 3E 16                                ld      a,22
 293+ C7FD 32 4D C0                             ld      (UBnKCNT2),a
 294+ C800                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 294+ C800 3E 1F       >                        ld      a,31
 294+ C802 32 46 C0    >                        ld      (UBnKSpeed),a
 295+ C805                                      SetMemFalse UBnKMissleHitToProcess
 295+ C805 3E FF       >                        ld      a,$FF
 295+ C807 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 296+ C80A 3E 80                                ld      a,ShipAIEnabled
 297+ C80C 32 54 C0                             ld      (UBnkaiatkecm),a
 298+ C80F CD 46 C7                             call    SetShipHostile
 299+ C812 3E 96        .SetupPayload:          ld      a,150
 300+ C814 32 3C C0                             ld      (UBnKMissileBlastDamage),a
 301+ C817 32 3E C0                             ld      (UBnKMissileDetonateDamage),a
 302+ C81A 3E 05                                ld      a,5
 303+ C81C 32 3B C0                             ld      (UBnKMissileBlastRange),a
 304+ C81F 32 3D C0                             ld      (UBnKMissileDetonateRange),a
 305+ C822 C9                                   ret
 306+ C823
 307+ C823              ; --------------------------------------------------------------
 308+ C823              ; This sets the position of the current ship if its a player launched missile
 309+ C823 CD 49 CA     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 310+ C826 CD 63 C7                             call    ResetUbnkPosition               ; home position
 311+ C829 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 312+ C82B 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 313+ C82E                                      IFDEF DEBUGMISSILELAUNCH
 314+ C82E ~                                        ld      a,$20       ; DEBUG
 315+ C82E ~                                        ld      (UBnKzlo),a
 316+ C82E                                      ENDIF
 317+ C82E 3E 80                                ld      a,$80                           ;
 318+ C830 32 25 C0                             ld      (UBnKysgn),a                    ;
 319+ C833 3E 03                                ld      a,3                             ; set accelleration
 320+ C835 32 47 C0                             ld      (UBnKAccel),a                   ;
 321+ C838                                      ZeroA
 321+ C838 AF          >                        xor a
 322+ C839 32 48 C0                             ld      (UBnKRotXCounter),a
 323+ C83C 32 49 C0                             ld      (UBnKRotZCounter),a
 324+ C83F 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 325+ C841 32 4A C0                             ld      (UBnKRAT),a
 326+ C844 3C                                   inc     a
 327+ C845 32 4B C0                             ld      (UBnKRAT2),a
 328+ C848 3E 16                                ld      a,22
 329+ C84A 32 4D C0                             ld      (UBnKCNT2),a
 330+ C84D                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 330+ C84D 3E 1F       >                        ld      a,31
 330+ C84F 32 46 C0    >                        ld      (UBnKSpeed),a
 331+ C852                                      SetMemFalse UBnKMissleHitToProcess
 331+ C852 3E FF       >                        ld      a,$FF
 331+ C854 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 332+ C857 3E 80                                ld      a,ShipAIEnabled
 333+ C859 32 54 C0                             ld      (UBnkaiatkecm),a
 334+ C85C                                      ;break
 335+ C85C CD 4F C7                             call    ClearShipHostile                ; its a player missile
 336+ C85F
 337+ C85F C9                                   ret
 338+ C860              ; --------------------------------------------------------------
 339+ C860              ; this applies blast damage to ship
 340+ C860 3A D9 82     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 341+ C863 47                                   ld      b,a
 342+ C864 3A 58 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 343+ C867 90                                   sub     b
 344+ C868 C3 71 C8                             jp      UnivExplodeShip
 345+ C86B 18 04                                jr      UnivExplodeShip
 346+ C86D 32 58 C0                             ld      (UBnKEnergy),a
 347+ C870 C9                                   ret
 348+ C871              ; --------------------------------------------------------------
 349+ C871              ; This sets the ship as a shower of explosiondwd
 350+ C871 DD 01        UnivExplodeShip:        break
 351+ C873 3A 54 C0                             ld      a,(UBnkaiatkecm)
 352+ C876 F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 353+ C878 E6 7F                                and     Bit7Clear                       ; Remove AI
 354+ C87A 32 54 C0                             ld      (UBnkaiatkecm),a
 355+ C87D AF                                   xor     a
 356+ C87E 32 58 C0                             ld      (UBnKEnergy),a
 357+ C881                                      ;TODO
 358+ C881 C9                                   ret
 359+ C882
 360+ C882 CD BB C8     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 361+ C885 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 362+ C887 32 54 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 363+ C88A 32 AA C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 364+ C88D 3E FF                                ld      a,$FF
 365+ C88F 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 366+ C892 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 367+ C895                                      ZeroA
 367+ C895 AF          >                        xor a
 368+ C896 32 22 C0                             ld      (UBnKxsgn),a
 369+ C899 32 25 C0                             ld      (UBnKysgn),a
 370+ C89C 32 28 C0                             ld      (UBnKzsgn),a
 371+ C89F 21 00 00                             ld      hl,0
 372+ C8A2 22 20 C0                             ld      (UBnKxlo),hl
 373+ C8A5 22 23 C0                             ld      (UBnKylo),hl
 374+ C8A8 3A A9 C3                             ld      a,(ShipTypeAddr)
 375+ C8AB 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 376+ C8AE                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 376+ C8AE FE 02       >                        cp     ShipTypeStation
 376+ C8B0 C2 B7 C8    >                        jp      nz,.SkipFurther
 377+ C8B3 3E 05                                ld      a,5
 378+ C8B5 84                                   add     h
 379+ C8B6 67                                   ld      h,a
 380+ C8B7 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 381+ C8BA C9                                   ret
 382+ C8BB              ; --------------------------------------------------------------
 383+ C8BB              ; This sets the position of the current ship randomly, called after spawing
 384+ C8BB CD 24 CA     UnivSetSpawnPosition:   call    InitialiseOrientation
 385+ C8BE                                      RandomUnivPitchAndRoll
 385+ C8BE CD 3B 88    >                        call    doRandom
 385+ C8C1 F6 6F       >                        or      %01101111
 385+ C8C3 32 48 C0    >                        ld      (UBnKRotXCounter),a
 385+ C8C6 CD 3B 88    >                        call    doRandom
 385+ C8C9 F6 6F       >                        or      %01101111
 385+ C8CB 32 49 C0    >                        ld      (UBnKRotZCounter),a
 386+ C8CE CD 3B 88                             call    doRandom                        ; set x lo and y lo to random
 387+ C8D1 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 388+ C8D4 32 23 C0     .setYlo:                ld      (UBnKylo),a
 389+ C8D7 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 390+ C8D8 47                                   ld      b,a
 391+ C8D9 E6 80                                and     SignOnly8Bit
 392+ C8DB 32 22 C0                             ld      (UBnKxsgn),a
 393+ C8DE 78           .setYSign:              ld      a,b                             ; get random back again
 394+ C8DF 0F                                   rrca                                    ; rotate by 1 bit right
 395+ C8E0 47                                   ld      b,a
 396+ C8E1 E6 80                                and     SignOnly8Bit                    ; and set y sign
 397+ C8E3 32 25 C0                             ld      (UBnKysgn),a
 398+ C8E6 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 399+ C8E8 78                                   ld      a,b                             ;
 400+ C8E9 E6 1F                                and     31                              ; set y hi to random 0 to 31
 401+ C8EB 32 24 C0                             ld      (UBnKyhi),a                     ;
 402+ C8EE CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 403+ C8F0 78                                   ld      a,b
 404+ C8F1 E6 1F                                and     31                              ; set x hi to random 0 to 31
 405+ C8F3 4F                                   ld      c,a                             ; save shifted into c as well
 406+ C8F4 32 21 C0                             ld      (UBnKxhi),a
 407+ C8F7 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 408+ C8F9 98                                   sbc     b
 409+ C8FA 99                                   sbc     c
 410+ C8FB 32 27 C0                             ld      (UBnKzhi),a
 411+ C8FE 3A A9 C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 412+ C901                                      ReturnIfAEqNusng ShipTypeJunk
 412+ C901 FE 03       >                        cp      ShipTypeJunk
 412+ C903 C8          >                        ret     z
 413+ C904                                      ReturnIfAEqNusng ShipTypeScoopable
 413+ C904 FE 04       >                        cp      ShipTypeScoopable
 413+ C906 C8          >                        ret     z
 414+ C907 78                                   ld      a,b                             ; its not junk to set z sign
 415+ C908 0F                                   rrca                                    ; as it can jump in
 416+ C909 E6 80                                and     SignOnly8Bit
 417+ C90B 32 28 C0                             ld      (UBnKzsgn),a
 418+ C90E C9                                   ret
 419+ C90F
 420+ C90F              ; --------------------------------------------------------------
 421+ C90F              ; This sets the cargo type or carryflag set for not cargo
 422+ C90F              ; Later this will be done via a loadable lookup table
 423+ C90F 3A A9 C3     ShipCargoType:          ld      a,(ShipTypeAddr)
 424+ C912                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 424+ C912 FE 04       >                        cp     ShipID_CargoType5
 424+ C914 CA 2B C9    >                        jp      z,.CargoCanister
 425+ C917              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 425+ C917 FE 27       >                        cp     ShipID_Thargon
 425+ C919 CA 31 C9    >                        jp      z,.Thargon
 426+ C91C              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 426+ C91C FE 1D       >                        cp     ShipID_Plate
 426+ C91E CA 34 C9    >                        jp      z,.Plate
 427+ C921              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 427+ C921 FE 24       >                        cp     ShipID_Splinter
 427+ C923 CA 37 C9    >                        jp      z,.Splinter
 428+ C926              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 428+ C926 FE 11       >                        cp     ShipID_Escape_Pod
 428+ C928 CA 3A C9    >                        jp      z,.EscapePod
 429+ C92B CD 3B 88     .CargoCanister:         call    doRandom
 430+ C92E E6 0F                                and     15                      ; Limit stock from Food to Platinum
 431+ C930 C9                                   ret
 432+ C931 3E 11        .Thargon:               ld      a,AlienItemsIndex
 433+ C933 C9                                   ret
 434+ C934 3E 0A        .Plate:                 ld      a,AlloysIndex
 435+ C936 C9                                   ret
 436+ C937 3E 0D        .Splinter:              ld      a,MineralsIndex
 437+ C939 C9                                   ret
 438+ C93A 3E 04        .EscapePod:             ld      a,SlavesIndex
 439+ C93C C9                                   ret
 440+ C93D
 441+ C93D 21 54 C9     FixStationPos:          ld      hl, DebugPos
 442+ C940 11 20 C0                             ld      de, UBnKxlo
 443+ C943 01 09 00                             ld      bc,9
 444+ C946 ED B0                                ldir
 445+ C948 21 5D C9                             ld      hl,DebugRotMat
 446+ C94B 11 29 C0                             ld      de, UBnkrotmatSidevX
 447+ C94E 01 12 00                             ld      bc,6*3
 448+ C951 ED B0                                ldir
 449+ C953 C9                                   ret
 450+ C954
 451+ C954 00 00 00 92  DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 451+ C958 01 00 7E 04
 451+ C95C 00
 452+ C95D 37 88 9A DC  DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 452+ C961 1B F7
 453+ C963 DF 6D 2A 07  DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 453+ C967 C1 83
 454+ C969 00 80 4A 9B  DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 454+ C96D AA D8
 455+ C96F
 456+ C96F
 457+ C96F              ; --------------------------------------------------------------
 458+ C96F              ; This sets current univrse object to space station
 459+ C96F 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 460+ C971 32 54 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 461+ C974 AF                                   xor a
 462+ C975 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 463+ C978 32 AA C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 464+ C97B 3E FF                                ld      a,$FF
 465+ C97D 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 466+ C980 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 467+ C983 22 20 C0                             ld      (UBnKxlo),hl
 468+ C986 21 00 00                             ld      hl,$0000
 469+ C989 22 23 C0                             ld      (UBnKylo),hl
 470+ C98C 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 471+ C98F 22 26 C0                             ld      (UBnKzlo),hl
 472+ C992 AF                                   xor     a
 473+ C993 32 22 C0                             ld      (UBnKxsgn),a
 474+ C996 32 25 C0                             ld      (UBnKysgn),a
 475+ C999 3E 80                                ld      a,$80
 476+ C99B 32 28 C0                             ld      (UBnKzsgn),a
 477+ C99E CD 53 CA     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 478+ C9A1 C9                                   ret
 479+ C9A2                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 480+ C9A2              ;Output: BC = Quotient, HL = Remainder
 481+ C9A2
 482+ C9A2
 483+ C9A2
 484+ C9A2 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 485+ C9A6
 486+ C9A6              ; Initialiase data, iyh must equal slot number
 487+ C9A6              ;                   iyl must be ship type
 488+ C9A6              ;                   a  = current bank number
 489+ C9A6 01 22 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 490+ C9A9 21 3F C0                             ld      hl,UBnKStartOfRuntimeData
 491+ C9AC                                      ZeroA
 491+ C9AC AF          >                        xor a
 492+ C9AD 32 59 C0                             ld      (UBnKECMCountDown),a
 493+ C9B0 77           .InitLoop:              ld      (hl),a
 494+ C9B1 23                                   inc     hl
 495+ C9B2 10 FC                                djnz    .InitLoop
 496+ C9B4              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 496+ C9B4 3A A1 C3    >                        ld       a,(EnergyAddr)
 496+ C9B7 32 58 C0    >                        ld       (UBnKEnergy),a
 497+ C9BA FD 7C        .SetBankData:           ld      a,iyh
 498+ C9BC 32 3F C0                             ld      (UBnKSlotNumber),a
 499+ C9BF C6 46                                add     a,BankUNIVDATA0
 500+ C9C1 32 40 C0                             ld      (UbnKShipUnivBankNbr),a
 501+ C9C4 FD 7D                                ld      a,iyl
 502+ C9C6 32 43 C0                             ld      (UBnKShipModelId),a
 503+ C9C9 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 504+ C9CC 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 505+ C9CF 78                                   ld      a,b                          ; this will mostly be debugging info
 506+ C9D0 32 42 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 507+ C9D3 3A A6 C3     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 508+ C9D6 E6 0F                                and     ShipMissileCount
 509+ C9D8 4F                                   ld      c,a
 510+ C9D9 3A EA 80                             ld      a,(RandomSeed1)              ; missile flag limit
 511+ C9DC A1                                   and     c                            ; .
 512+ C9DD 32 5C C0                             ld      (UBnKMissilesLeft),a
 513+ C9E0 3A A6 C3     .SetupLaserType         ld      a,(LaserAddr)
 514+ C9E3 E6 F0                                and     ShipLaserPower
 515+ C9E5 ED 23                                swapnib
 516+ C9E7 32 5B C0                             ld      (UBnKLaserPower),a
 517+ C9EA 3A AB C3     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 518+ C9ED 4F                                   ld      c,a
 519+ C9EE E6 70                                and     ShipFighterBaySize
 520+ C9F0                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 520+ C9F0 FE 70       >                        cp     ShipFighterBaySizeInf
 520+ C9F2 C2 F7 C9    >                        jp      nz,.LimitedBay
 521+ C9F5 3E FF                                ld      a,$FF                       ; force unlimited ships
 522+ C9F7 ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 523+ C9F9 32 5E C0                             ld      (UBnKFightersLeft),a
 524+ C9FC 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 525+ C9FD E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 526+ C9FF CB 1F                                rr      a                           ; so get them down to 0 and 1
 527+ CA01 CB 1F                                rr      a                           ;
 528+ CA03 21 A2 C9                             ld      hl,FighterTypeMapping       ; then use the lookup table
 529+ CA06 ED 31                                add     hl,a                        ; for the respective ship id
 530+ CA08 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 531+ CA09 32 5D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 532+ CA0C 3A AC C3     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 533+ CA0F 47                                   ld      b,a
 534+ CA10 3A EC 80     .FetchLatestRandom:     ld      a,(RandomSeed3)
 535+ CA13                                      JumpIfALTNusng b, .ECMFitted
 535+ CA13 B8          >                        cp      b
 535+ CA14 DA 1F CA    >                        jp		c, .ECMFitted
 536+ CA17              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 536+ CA17 3E FF       >                        ld      a,$FF
 536+ CA19 32 5A C0    >                        ld      (UBnKECMFitted),a
 537+ CA1C C3 23 CA                             jp      .DoneECM
 538+ CA1F              .ECMFitted:             SetMemTrue  UBnKECMFitted
 538+ CA1F AF          >                        xor     a
 538+ CA20 32 5A C0    >                        ld      (UBnKECMFitted),a
 539+ CA23              .DoneECM:               ; TODO set up laser power
 540+ CA23 C9                                   ret
 541+ CA24
 542+ CA24                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CA24              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++CA24              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++CA24              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CA24              InitialiseOrientation:
   5++CA24 21 00 00     ZI1:                    ld      hl, 0
   6++CA27 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++CA2A 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++CA2D 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++CA30 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++CA33 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++CA36 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++CA39 21 00 60                             ld      hl, $6000					; 96 in hi byte
  13++CA3C                                      ;ld      hl,1
  14++CA3C 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  15++CA3F 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  16++CA42 21 00 E0                             ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  17++CA45 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  18++CA48 C9                                   ret
  19++CA49
  20++CA49              InitialisePlayerMissileOrientation:
  21++CA49 CD 24 CA                             call    InitialiseOrientation
  22++CA4C 21 00 60                             ld      hl,$6000
  23++CA4F 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  24++CA52 C9                                   ret
  25++CA53
  26++CA53
  27++CA53              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  28++CA53              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  29++CA53              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  30++CA53 CD 24 CA     LaunchedOrientation:    call    InitialiseOrientation
  31++CA56                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  31++CA56 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  31++CA59 EE 80       >                        xor SignOnly8Bit
  31++CA5B 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  32++CA5E                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  32++CA5E 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  32++CA61 EE 80       >                        xor SignOnly8Bit
  32++CA63 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  33++CA66                                      FlipSignMem UBnkrotmatNosevZ+1
  33++CA66 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  33++CA69 EE 80       >                        xor SignOnly8Bit
  33++CA6B 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  34++CA6E C9                                   ret
  35++CA6F
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 543+ CA6F
 544+ CA6F              ;----------------------------------------------------------------------------------------------------------------------------------
 545+ CA6F              ;OrientateVertex:
 546+ CA6F              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 547+ CA6F              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 548+ CA6F              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 549+ CA6F              ;
 550+ CA6F
 551+ CA6F              ;----------------------------------------------------------------------------------------------------------------------------------
 552+ CA6F              ;TransposeVertex:
 553+ CA6F              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 554+ CA6F              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 555+ CA6F              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 556+ CA6F              ; VectorToVertex:
 557+ CA6F              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 558+ CA6F              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 559+ CA6F              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 560+ CA6F              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 561+ CA6F              ;OUTPUTS:   cahl = quotient cde = divisor
 562+ CA6F              ;--------------------------------------------------------------------------------------------------------
 563+ CA6F                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CA6F              ;
   2++CA6F              ; EraseOldLines:
   3++CA6F              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CA6F              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CA6F              ;	 	loop + 4
   6++CA6F              ; Return
   7++CA6F
   8++CA6F              EraseOldLines:
   9++CA6F              EE51:										; if bit3 set draw lines in XX19 heap
  10++CA6F              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CA6F 3A 51 C0    >                        ld     a,(UBnKexplDsp)
  10++CA72 CB 5F       >                        bit 	3,a
  10++CA74 C8          >                        ret		z
  11++CA75 CB DF        	set		3,a
  12++CA77 32 51 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CA7A C3 68 F0     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CA7D              ; We use the ret from the clearLines so not needed here
  15++CA7D
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 564+ CA7D                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CA7D              ;TrimToScreenGrad:
   2++CA7D              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CA7D              ;ret
   4++CA7D              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CA7D              ;TODO        bit     7,a
   6++CA7D              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CA7D              ;TODO        ld      a,h
   8++CA7D              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CA7D              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CA7D              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CA7D
  12++CA7D              ;18                      CLC
  13++CA7D              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CA7D              ;85 36                   STA &36			 \ XX15+2
  15++CA7D              ;98                      TYA 			 \ step Y1 hi
  16++CA7D              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CA7D              ;85 37                   STA &37			 \ XX15+3
  18++CA7D              ;A9 00                   LDA #0			 \ xleft min
  19++CA7D              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CA7D              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CA7D              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CA7D              ;	.LL119	\ x1 hi +ve from LL118
  23++CA7D              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CA7D              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CA7D              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CA7D              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CA7D              ;8A                      TXA 			 \ step Y1 lo
  28++CA7D              ;18                      CLC
  29++CA7D              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CA7D              ;85 36                   STA &36			 \ XX15+2
  31++CA7D              ;98                      TYA 			 \ step Y1 hi
  32++CA7D              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CA7D              ;85 37                   STA &37			 \ XX15+3
  34++CA7D              ;A2 FF                   LDX #&FF		 \ xright max
  35++CA7D              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CA7D              ;E8                      INX 			 \ X = 0
  37++CA7D              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CA7D              ;	.LL134	\ Ytrim
  39++CA7D              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CA7D              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CA7D              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CA7D              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CA7D              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CA7D              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CA7D              ;8A                      TXA 			 \ step X1 lo
  46++CA7D              ;18                      CLC
  47++CA7D              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CA7D              ;85 34                   STA &34			 \ XX15+0
  49++CA7D              ;98                      TYA 			 \ step X1 hi
  50++CA7D              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CA7D              ;85 35                   STA &35			 \ XX15+1
  52++CA7D              ;A9 00                   LDA #0			 \ Y bottom min
  53++CA7D              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CA7D              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CA7D              ;	.LL135	\ y1 hi +ve from LL134
  56++CA7D              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CA7D              ;38                      SEC
  58++CA7D              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CA7D              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CA7D              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CA7D              ;E9 00                   SBC #0			 \ any hi
  62++CA7D              ;85 83                   STA &83			 \ S
  63++CA7D              ;90 16                   BCC LL136		 \ failed, rts
  64++CA7D              ;	.LL139
  65++CA7D              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CA7D              ;8A                      TXA 			 \ step X1 lo
  67++CA7D              ;18                      CLC
  68++CA7D              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CA7D              ;85 34                   STA &34			 \ XX15+0
  70++CA7D              ;98                      TYA 			 \ step X1 hi
  71++CA7D              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CA7D              ;85 35                   STA &35			 \ XX15+1
  73++CA7D              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CA7D              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CA7D              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CA7D              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CA7D              ;	.LL136	\ rts
  78++CA7D              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CA7D              ;
  80++CA7D
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 565+ CA7D                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CA7D              ;--------------------------------------------------------------------------------------------------------------------
   2++CA7D
   3++CA7D 00           clipDx                  DB      0           ; also XX12+2
   4++CA7E 00           clipDxHigh              DB      0           ; also XX12+3
   5++CA7F 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CA80 00           clipDy                  DB      0           ; also XX12+4
   7++CA81 00           clipDyHigh              DB      0           ; also XX12+5
   8++CA82 00           clipGradient            DB      0
   9++CA83 00           clipDxySign             DB      0
  10++CA84              varX12p3                equ     clipDxySign
  11++CA84 00           clipXGTY                DB      0
  12++CA85 00           clipFlags               DB      0
  13++CA86 00           SWAP                    DB      0
  14++CA87 00 00        varYX                   DW      0
  15++CA89              ;varRegX                 DB      0
  16++CA89              ;varXX12p2               DB      0
  17++CA89 00           clipXX13                 DB      0
  18++CA8A 00           ClipSuccess             DB      0
  19++CA8B 00           Gradient                DB      0
  20++CA8C
  21++CA8C
  22++CA8C
  23++CA8C              ;--------------------------------------------------------------------------------------
  24++CA8C ED 4B A8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  25++CA90 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  26++CA94 2A A6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  27++CA97 ED 5B AA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  28++CA9B AF                                   xor     a
  29++CA9C 32 86 CA                             ld      (SWAP),a                    ; SWAP = 0
  30++CA9F 7A                                   ld      a,d                         ; A = X2Hi
  31++CAA0 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  32++CAA3 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  33++CAA5 20 0A                                jr      nz, .LL107
  34++CAA7 DD 7D                                ld      a,ixl
  35++CAA9 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  36++CAAC 20 03                                jr      nz,.LL107
  37++CAAE FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  38++CAB1              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  39++CAB1              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  40++CAB1 FD 7C        .LL107                  ld      a,iyh
  41++CAB3 32 89 CA                             ld      (clipXX13),a                ; debug copy iyh to xx13
  42++CAB6 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  43++CAB7 B0                                   or      b                           ;
  44++CAB8 20 27                                jr      nz,.LL83                    ;
  45++CABA 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  46++CABB ED 27 80                             test    $80                         ; i.e  screen height < y1)
  47++CABE 20 21                                jr      nz,.LL83
  48++CAC0              ; If we get here, (x1, y1) is on-screen
  49++CAC0 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  50++CAC2 FE 00                                cp      0
  51++CAC4 20 15                                jr      nz, .LL108
  52++CAC6              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  53++CAC6 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  54++CAC7 32 A7 C0                             ld      (UBnkNewY1),a
  55++CACA DD 7D                                ld      a,ixl
  56++CACC 32 A9 C0                             ld      (UBnkNewY2),a
  57++CACF 7D                                   ld      a,l
  58++CAD0 32 A6 C0                             ld      (UBnkNewX1),a
  59++CAD3 7B                                   ld      a,e
  60++CAD4 32 A8 C0                             ld      (UBnkNewX2),a
  61++CAD7                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  61++CAD7 B7          >                        or a
  62++CAD8 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  63++CAD9              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  64++CAD9 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  65++CADA C9                                   ret
  66++CADB FD 7C        .LL108:                 ld      a,iyh
  67++CADD B7                                   or      a
  68++CADE 1F                                   rra
  69++CADF FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  70++CAE1 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  71++CAE3 ED 27 80                             test    $80                         ;
  72++CAE6 28 28                                jr      z, .LL115                   ;
  73++CAE8 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++CAE9 A2                                   and     d
  75++CAEA                                      JumpIfNegative  .PointsOutofBounds
  75++CAEA FA D9 CA    >                        jp		m, .PointsOutofBounds
  76++CAED 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  77++CAEE DD A4                                and     ixh
  78++CAF0                                      JumpIfNegative  .PointsOutofBounds
  78++CAF0 FA D9 CA    >                        jp		m, .PointsOutofBounds
  79++CAF3 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  80++CAF4 3D                                   dec     a
  81++CAF5 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  82++CAF7 7A                                    ld      a,d                         ; a = x2 hi
  83++CAF8 3D                                   dec     a
  84++CAF9 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  85++CAFB                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  85++CAFB F2 D9 CA    >                        jp		p, .PointsOutofBounds
  86++CAFE              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  87++CAFE DD 7C                                ld      a,ixh
  88++CB00 3D                                   dec     a
  89++CB01 FD 6F                                ld      iyl,a
  90++CB03 78                                   ld      a,b
  91++CB04 3D                                   dec     a
  92++CB05 FD B5                                or      iyl
  93++CB07                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  93++CB07 F2 D9 CA    >                        jp		p, .PointsOutofBounds
  94++CB0A 79                                   ld      a,c
  95++CB0B DD A5                                and     ixl
  96++CB0D                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  96++CB0D FA D9 CA    >                        jp		m, .PointsOutofBounds
  97++CB10              ; Clip line: calulate the line's gradient
  98++CB10              ; here as an optimisation we make sure X1 is always < X2  later on
  99++CB10              .LL115:                 ClearCarryFlag
  99++CB10 B7          >                        or a
 100++CB11 E5 D5        .CalcDX:                push    hl,,de
 101++CB13 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 102++CB14 ED 52                                sbc     hl,de
 103++CB16 22 7D CA                             ld      (clipDx),hl
 104++CB19 7C                                   ld      a,h
 105++CB1A 32 7F CA                             ld      (clipDxHighNonABS),a
 106++CB1D              .CalcDy:                ClearCarryFlag
 106++CB1D B7          >                        or a
 107++CB1E DD E5 E1                             ld      hl,ix
 108++CB21 ED 42                                sbc     hl,bc
 109++CB23 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 110++CB25 22 80 CA                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 111++CB28 7C           .CalcQuadrant:          ld      a,h
 112++CB29 32 81 CA                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 113++CB2C              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 114++CB2C 21 7E CA                             ld      hl,clipDxHigh
 115++CB2F AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 116++CB30 32 F5 81                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 117++CB33 32 83 CA                             ld      (clipDxySign),a
 118++CB36 3A 81 CA     .AbsDy:                 ld      a,(clipDyHigh)
 119++CB39 ED 27 80                             test    $80
 120++CB3C 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 121++CB3E ED 5B 80 CA                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 122++CB42                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 122++CB42 AF          >					xor 	a
 122++CB43 93          >                    sub 	e
 122++CB44 5F          >                    ld 		e,a
 122++CB45 9F          >                    sbc 	a,a
 122++CB46 92          >                    sub 	d
 122++CB47 57          >                    ld 		d,a
 123++CB48 ED 53 80 CA                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 124++CB4C 2A 7D CA     .LL110:                 ld      hl,(clipDx)
 125++CB4F 3A 7E CA                             ld      a,(clipDxHigh)
 126++CB52 ED 27 80                             test    $80                         ; is it a negative X
 127++CB55 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 128++CB57                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 129++CB57                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 129++CB57 AF          >					xor 	a
 129++CB58 95          >					sub 	l
 129++CB59 6F          >					ld 		l,a
 129++CB5A 9F          >					sbc 	a,a
 129++CB5B 94          >					sub 	h
 129++CB5C 67          >					ld 		h,a
 130++CB5D              .LL111:
 131++CB5D 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 132++CB5E B2                                   or      d
 133++CB5F 28 0A                                jr      z,.CalculateDelta
 134++CB61                                      ShiftDERight1
 134++CB61 CB 3A       >			   srl d
 134++CB63 CB 1B       >			   rr  e
 135++CB65                                      ShiftHLRight1
 135++CB65 CB 3C       >			   srl h
 135++CB67 CB 1D       >			   rr  l
 136++CB69 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 137++CB6B              .CalculateDelta:
 138++CB6B              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 139++CB6B AF           .LL113:                 xor     a
 140++CB6C 32 0F 82                             ld      (varT),a                    ; t = 0
 141++CB6F 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 142++CB70                                      JumpIfALTNusng  e, .LL114           ;
 142++CB70 BB          >                        cp      e
 142++CB71 DA 81 CB    >                        jp		c, .LL114
 143++CB74              ; Here Dx >= Dy sp calculate Delta Y / delta X
 144++CB74 32 F3 81     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 145++CB77 57                                   ld      d,a                         ; d = also Q for calc
 146++CB78 7B                                   ld      a,e                         ; Set A = delta_y_lo
 147++CB79 CD 82 97                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 148++CB7C 32 F4 81                             ld      (varR),a                    ;
 149++CB7F 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 150++CB81              ; Here Delta Y > Delta X so calulate delta X / delta Y
 151++CB81 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 152++CB82 57                                   ld      d,a
 153++CB83 32 F3 81                             ld      (varQ),a
 154++CB86 7D                                   ld      a,l                         ; Set A = delta_x_lo
 155++CB87 CD 82 97                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 156++CB8A 32 F4 81                             ld      (varR),a                    ;
 157++CB8D 21 0F 82                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 158++CB90 35                                   dec     (hl)
 159++CB91 D1           .LL116:                 pop     de                          ; get back X2
 160++CB92 E1                                   pop     hl                          ; get back X1 into hl,
 161++CB93 3A F4 81                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 162++CB96 32 82 CA                             ld      (clipGradient),a
 163++CB99 FD 6F                                ld      iyl,a
 164++CB9B 3A F5 81                             ld      a,(varS)
 165++CB9E 32 83 CA                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 166++CBA1                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 167++CBA1 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 168++CBA3 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 169++CBA5 28 05                                jr      z,.LL138                    ;
 170++CBA7 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 171++CBAA 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 172++CBAC              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 173++CBAC CD D3 CB     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 174++CBAF FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 175++CBB1 ED 27 80                             test    $80
 176++CBB4 28 1A                                jr      z,.LL124
 177++CBB6              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 178++CBB6 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 179++CBB7 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 180++CBB8 C2 D9 CA                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 181++CBBB B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 182++CBBC FA D9 CA                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 183++CBBF              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 184++CBBF              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 185++CBBF EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 186++CBC0 DD E5                                push    ix                          ;  swap Y1 and Y2
 187++CBC2 C5                                   push    bc
 188++CBC3 DD E1                                pop     ix
 189++CBC5 C1                                   pop     bc
 190++CBC6 CD D3 CB                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 191++CBC9 3A 86 CA                             ld      a,(SWAP)
 192++CBCC 3D                                   dec     a
 193++CBCD 32 86 CA                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 194++CBD0 C3 C6 CA     .LL124:                 jp      .ClipDone                    ; now put points in place
 195++CBD3
 196++CBD3              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 197++CBD3              ; iyh still holds XX13 iyl still holds gradient
 198++CBD3 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 199++CBD4 ED 27 80                             test    $80
 200++CBD7 28 17                                jr      z,.LL119
 201++CBD9 32 F5 81     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 202++CBDC E5 D5 C5                             push    hl,,de,,bc
 203++CBDF CD 55 CC                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 204++CBE2                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 205++CBE2                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 206++CBE2 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 207++CBE5 2A 87 CA                             ld      hl,(varYX)
 208++CBE8 09                                   add     hl,bc                       ; y1 = y1 + varYX
 209++CBE9 44 4D                                ld      bc,hl
 210++CBEB 21 00 00                             ld      hl,0                        ; Set x1 = 0
 211++CBEE 18 1A                               jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 212++CBF0 FE 00        .LL119:                 cp      0
 213++CBF2 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 214++CBF4 3D                                   dec     a
 215++CBF5 32 F5 81                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 216++CBF8 E5 D5 C5                             push    hl,,de,,bc
 217++CBFB CD 55 CC                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 218++CBFE                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 219++CBFE                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 220++CBFE C1 D1 E1                             pop     hl,,de,,bc
 221++CC01 2A 87 CA                             ld      hl,(varYX)
 222++CC04 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 223++CC05 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CC07 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 225++CC0A              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 226++CC0A 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 227++CC0B ED 27 80                             test    $80                         ;
 228++CC0E 28 1A                                jr      z,.LL135                    ;
 229++CC10 32 F5 81                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 230++CC13 79                                   ld      a,c                         ; Set R = y1_lo
 231++CC14 32 F4 81                             ld      (varR),a                    ;
 232++CC17 E5 D5 C5                             push    hl,,de,,bc
 233++CC1A CD B6 CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 234++CC1D                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 235++CC1D                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 236++CC1D C1 D1 E1                             pop     hl,,de,,bc
 237++CC20 D5                                   push    de
 238++CC21 EB                                   ex      hl,de                       ; de = x1
 239++CC22 2A 87 CA                             ld      hl,(varYX)                  ; hl = varYX
 240++CC25 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 241++CC26 D1                                   pop     de                          ; de = x2 again
 242++CC27 01 00 00                             ld      bc,0                        ; Set y1 = 0
 243++CC2A 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 244++CC2B E6 80                                and     $80
 245++CC2D B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 246++CC2E C8                                   ret     z
 247++CC2F E5                                   push    hl
 248++CC30 60 69                                ld      hl,bc
 249++CC32 01 80 00                             ld      bc,128
 250++CC35 B7                                   or      a
 251++CC36 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 252++CC38 22 F4 81                             ld      (varRS), hl                 ; and now RS (or SR)
 253++CC3B 7C                                   ld      a,h
 254++CC3C E1                                   pop     hl
 255++CC3D ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 256++CC40 C0                                   ret     nz
 257++CC41              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 258++CC41 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 259++CC44 CD B6 CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 260++CC47                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 261++CC47                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 262++CC47 C1 D1 E1                             pop     hl,,de,,bc
 263++CC4A D5                                   push    de
 264++CC4B EB                                   ex      hl,de
 265++CC4C 2A 87 CA                             ld      hl,(varYX)
 266++CC4F 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 267++CC50 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 268++CC53 D1                                   pop     de
 269++CC54 C9           .LL136:                 ret                                 ;  Return from the subroutine
 270++CC55
 271++CC55
 272++CC55              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 273++CC55              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 274++CC55              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 275++CC55              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 276++CC55 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 277++CC56 32 F4 81                             ld      (varR),a
 278++CC59 CD 13 CD                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 279++CC5C F5                                   push    af                           ;  Store A on the stack so we can use it later
 280++CC5D C5                                   push    bc
 281++CC5E 47                                   ld      b,a
 282++CC5F 3A 0F 82                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 283++CC62 FE 00                                cp      0
 284++CC64 78                                   ld      a,b
 285++CC65 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 286++CC66 C2 7D CC                             jp      nz, .LL121
 287++CC69              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 288++CC69 3A 82 CA     .LL122:                  ld      a,(clipGradient)
 289++CC6C 32 F3 81                             ld      (varQ),a; optimise
 290++CC6F CD DD 94                             call    HLequSRmulQdiv256
 291++CC72 22 87 CA                             ld      (varYX),hl
 292++CC75 F1                                   pop     af
 293++CC76 ED 27 80                             test    $80
 294++CC79 CA A9 CC                             jp      z,.LL133
 295++CC7C C9                                   ret
 296++CC7D 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 297++CC80 2A F4 81                             ld      hl,(varRS)                  ; hl = RS
 298++CC83 3A F3 81                             ld      a,(varQ)
 299++CC86 47                                   ld      b,a                         ; b = q
 300++CC87              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 300++CC87 CB 25       >			   sla l
 300++CC89 CB 14       >			   rl  h
 301++CC8B 7C                                   ld      a,h
 302++CC8C 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 303++CC8E                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 303++CC8E B8          >                        cp      b
 303++CC8F DA 9A CC    >                        jp		c, .LL132
 304++CC92 3F           .LL131:                 ccf                                 ; compliment carry
 305++CC93 98                                   sbc     a,b                         ; q
 306++CC94 67                                   ld      h,a                         ; h (s)
 307++CC95 7D                                   ld      a,l                         ; r
 308++CC96 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 309++CC98 37                                   scf                                 ; set carry for next rolls
 310++CC99 3F                                   ccf
 311++CC9A              .LL132:                 RollDELeft1                         ; Rotate de bits left
 311++CC9A CB 13       >               rl  e
 311++CC9C CB 12       >               rl  d
 312++CC9E 38 E7                                jr      c,.LL130                    ;
 313++CCA0 ED 53 87 CA                          ld      (varYX),de
 314++CCA4 F1                                   pop     af              ; get back sign
 315++CCA5 ED 27 80                             test    $80
 316++CCA8 C8                                   ret     z               ; if negative then return with value as is reversed sign
 317++CCA9 2A 87 CA     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 318++CCAC                                      NegHL
 318++CCAC AF          >                    xor a
 318++CCAD 95          >                    sub l
 318++CCAE 6F          >                    ld l,a
 318++CCAF 9F          >                    sbc a,a
 318++CCB0 94          >                    sub h
 318++CCB1 67          >                    ld h,a
 319++CCB2 22 87 CA                             ld      (varYX),hl
 320++CCB5 C9           .LL128:                 ret
 321++CCB6
 322++CCB6
 323++CCB6
 324++CCB6
 325++CCB6              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 326++CCB6              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 327++CCB6              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 328++CCB6              ;
 329++CCB6              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 330++CCB6              ;                          LL133                Negate (Y X) and return from the subroutine
 331++CCB6              ;                          LL128                Contains an RTS
 332++CCB6 CD 13 CD     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 333++CCB9 F5                                   push    af                          ; Store A on the stack so we can use it later
 334++CCBA C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 335++CCBB 47                                   ld      b,a
 336++CCBC 3A 0F 82                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 337++CCBF FE 00                                cp      0
 338++CCC1 78                                   ld      a,b
 339++CCC2 C1                                   pop     bc
 340++CCC3 C2 FF CC                             jp      nz, .LL122
 341++CCC6              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 342++CCC6 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 343++CCC9 2A F4 81                             ld      hl,(varRS)                  ; hl = RS
 344++CCCC 3A F3 81                             ld      a,(varQ)
 345++CCCF 47                                   ld      b,a                         ; b = q
 346++CCD0              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 346++CCD0 CB 25       >			   sla l
 346++CCD2 CB 14       >			   rl  h
 347++CCD4 7C                                   ld      a,h
 348++CCD5 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 349++CCD7                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 349++CCD7 B8          >                        cp      b
 349++CCD8 DA E3 CC    >                        jp		c, .LL132
 350++CCDB 3F           .LL131:                 ccf                                 ; compliment carry
 351++CCDC 98                                   sbc     a,b                         ; q
 352++CCDD 67                                   ld      h,a                         ; h (s)
 353++CCDE 7D                                   ld      a,l                         ; r
 354++CCDF DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 355++CCE1 37                                   scf                                 ; set carry for next rolls
 356++CCE2 3F                                   ccf
 357++CCE3              .LL132:                 RollDELeft1                         ; Rotate de bits left
 357++CCE3 CB 13       >               rl  e
 357++CCE5 CB 12       >               rl  d
 358++CCE7 38 E7                                jr      c,.LL130                    ;
 359++CCE9 ED 53 87 CA                          ld      (varYX),de
 360++CCED F1                                   pop     af              ; get back sign
 361++CCEE ED 27 80                             test    $80
 362++CCF1 C8                                   ret     z               ; if negative then return with value as is reversed sign
 363++CCF2 2A 87 CA     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 364++CCF5                                      NegHL
 364++CCF5 AF          >                    xor a
 364++CCF6 95          >                    sub l
 364++CCF7 6F          >                    ld l,a
 364++CCF8 9F          >                    sbc a,a
 364++CCF9 94          >                    sub h
 364++CCFA 67          >                    ld h,a
 365++CCFB 22 87 CA                             ld      (varYX),hl
 366++CCFE C9           .LL128:                 ret
 367++CCFF              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 368++CCFF 3A 82 CA     .LL122:                 ld      a,(clipGradient)
 369++CD02 32 F3 81                             ld      (varQ),a; optimise
 370++CD05 CD DD 94                             call    HLequSRmulQdiv256
 371++CD08 22 87 CA                             ld      (varYX),hl
 372++CD0B F1                                   pop     af
 373++CD0C ED 27 80                             test    $80
 374++CD0F CA F2 CC                             jp      z,.LL133
 375++CD12 C9                                   ret
 376++CD13
 377++CD13              ; Do the following, in this order:  Q = XX12+2
 378++CD13              ;                                   A = S EOR XX12+3
 379++CD13              ;                                   (S R) = |S R|
 380++CD13              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 381++CD13 3A 82 CA     LL129:                  ld      a,(clipGradient)
 382++CD16 32 F3 81                             ld      (varQ),a                    ; Set Q = XX12+2
 383++CD19 3A F5 81                             ld      a,(varS)                    ; If S is positive, jump to LL127
 384++CD1C E5 F5                                push    hl,,af                      ; else
 385++CD1E ED 27 80                             test    $80                         ;   if bit 7 is clear
 386++CD21 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 387++CD23 2A F4 81                             ld      hl,(varRS)                  ;      .
 388++CD26                                      NegHL                               ;      .
 388++CD26 AF          >                    xor a
 388++CD27 95          >                    sub l
 388++CD28 6F          >                    ld l,a
 388++CD29 9F          >                    sbc a,a
 388++CD2A 94          >                    sub h
 388++CD2B 67          >                    ld h,a
 389++CD2C 22 F4 81                             ld      (varRS),hl                  ;      .
 390++CD2F 21 83 CA     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 391++CD32 F1                                   pop     af                          ;
 392++CD33 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 393++CD34 E1                                   pop     hl
 394++CD35 C9                                   ret
 395++CD36
 396++CD36              ;--------------------------------------------------------------------------------------
 397++CD36
 398++CD36              ;My logic version
 399++CD36              ClipLineV3:             ;break
 400++CD36 ED 4B A8 C0                          ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3)
 401++CD3A DD 2A AC C0                          ld      ix,(UbnkPreClipY2)                  ; ix - XX12(0,1)
 402++CD3E 2A A6 C0                             ld      hl,(UbnkPreClipX1)                  ; hl - XX15(0,1)
 403++CD41 ED 5B AA C0                          ld      de,(UbnkPreClipX2)                  ; de - XX15(4,5)
 404++CD45 78           .CheckNoClip:           ld      a,b
 405++CD46 B2                                   or      d
 406++CD47 B4                                   or      h
 407++CD48 DD B4                                or      ixh
 408++CD4A C2 53 CD                             jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 409++CD4D 79                                   ld      a,c                                 ; then we clip
 410++CD4E DD A5                                and     ixl
 411++CD50 CA 5A CE                             jp      z, .ClipComplete
 412++CD53              ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 413++CD53              .CheckXOffScreen:       ZeroA                                       ;
 413++CD53 AF          >                        xor a
 414++CD54 32 85 CA                             ld      (clipFlags),a                       ;
 415++CD57 7C                                   ld      a,h                                 ; if x1 and x2 high are zero then check for clipping Y
 416++CD58 B2                                   or      d                                   ;
 417++CD59 28 11                                jr      z,.CheckYOffScreen                  ;
 418++CD5B 7C           .CheckXSameSign:        ld      a,h                                 ; if x1 high and x2 high are same sign then off screen
 419++CD5C FE 00                                cp      0                                   ; we have already elimited x1 x2 zero
 420++CD5E 28 0C                                jr      z,.CheckYOffScreen                  ; .
 421++CD60 7A                                   ld      a,d                                 ; .
 422++CD61 FE 00                                cp      0                                   ; .
 423++CD63 28 07                                jr      z,.CheckYOffScreen                  ; .
 424++CD65 B4                                   or      h                                   ; .
 425++CD66 28 04                                jr      z,.CheckYOffScreen                  ; .
 426++CD68 AC                                   xor     h                                   ; .
 427++CD69 E6 80                                and     $80                                 ; .
 428++CD6B C8                                   ret     z                                   ; .
 429++CD6C              ; uif y1h and y2h are negative, same sign and exit
 430++CD6C 78           .CheckYOffScreen:       ld      a,b
 431++CD6D DD AC        .CheckBothYNegative:    xor     ixh
 432++CD6F E6 80                                and     $80
 433++CD71 20 22                                jr      nz,.StartProcessing
 434++CD73 78                                   ld      a,b                                 ; so if they are the same
 435++CD74 E6 80                                and     $80                                 ; then both negative if y1h negative
 436++CD76 C0                                   ret     nz
 437++CD77 78                                   ld      a,b
 438++CD78 E6 80                                and     $80
 439++CD7A 20 19                                jr      nz,.StartProcessing                 ;negative we can go straight to clip
 440++CD7C 21 7F 00                             ld      hl,127                              ; > 127 then
 441++CD7F 50 59                                ld      de,bc
 442++CD81 CD B6 99                             call    compare16HLDE
 443++CD84 F2 95 CD                             jp      p,.StartProcessing                  ; +ve and at least one on screen
 444++CD87 DD 7C        .Y1IsNegative:          ld      a,ixh
 445++CD89 E6 80                                and     $80
 446++CD8B 20 08                                jr      nz,.StartProcessing
 447++CD8D DD 54 DD 5D                          ld      de,ix
 448++CD91 CD B6 99                             call    compare16HLDE
 449++CD94 F8                                   ret     m
 450++CD95
 451++CD95 2A A6 C0     .StartProcessing:       ld      hl,(UbnkPreClipX1)                  ; hl - XX15(0,1)
 452++CD98 ED 5B AA C0                          ld      de,(UbnkPreClipX2)                  ; de - XX15(4,5)
 453++CD9C FD 26 00                             ld      iyh,0
 454++CD9F              ;if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord
 455++CD9F 7C                                   ld      a,h
 456++CDA0 B0                                   or      b
 457++CDA1 28 06                                jr      z,.CheckP1Ylo
 458++CDA3 FD 26 01     .P1OffScreen:           ld      iyh,1
 459++CDA6 C3 B1 CD                             jp      .CheckP2OffScreen
 460++CDA9 79           .CheckP1Ylo:            ld      a,c
 461++CDAA E6 80                                and     $80
 462++CDAC 28 03                                jr      z,.CheckP2OffScreen
 463++CDAE FD 26 01                             ld      iyh,1
 464++CDB1              .CheckP2OffScreen:
 465++CDB1              ;if x2hi or y2 high <> 0 or y2 > 127 then set bit 2 of clipcoord
 466++CDB1 7A                                   ld      a,d
 467++CDB2 DD B4                                or      ixh
 468++CDB4 28 09                                jr      z,.CheckP2Ylo
 469++CDB6 FD 7C        .P2OffScreen:           ld      a,iyh
 470++CDB8 F6 02                                or      2
 471++CDBA FD 67                                ld      iyh,a
 472++CDBC C3 CB CD                             jp      .CheckXDirection
 473++CDBF DD 7D        .CheckP2Ylo:            ld      a,ixl
 474++CDC1 E6 80                                and     $80
 475++CDC3 28 06                                jr      z,.CheckXDirection
 476++CDC5 FD 7C                                ld      a,iyh
 477++CDC7 F6 02                                or      2
 478++CDC9 FD 67                                ld      iyh,a
 479++CDCB              .CheckXDirection:       ;break
 480++CDCB              ;If X1 > X2 then direction is -ve so set bit 3 of clipccord
 481++CDCB CD B6 99                             call    compare16HLDE
 482++CDCE F2 D7 CD                             jp      p,.CheckYDirection
 483++CDD1 FD 7C        .X1ltX2:                ld      a,iyh
 484++CDD3 F6 04                                or      4
 485++CDD5 FD 67                                ld      iyh,a
 486++CDD7              ;if Y1 > Y2 then slop is -ve so set bit 4 of clipcoord
 487++CDD7 D5 E5        .CheckYDirection:       push    de,,hl
 488++CDD9 60 69                                ld      hl,bc
 489++CDDB DD 54 DD 5D                          ld      de,ix
 490++CDDF CD B6 99                             call    compare16HLDE
 491++CDE2 F2 EB CD                             jp      p,.Y1gteY2
 492++CDE5 FD 7C        .Y1ltY2:                ld      a,iyh
 493++CDE7 F6 08                                or      8
 494++CDE9 FD 67                                ld      iyh,a
 495++CDEB              ;calculate DX
 496++CDEB              .Y1gteY2:               ;break
 497++CDEB D1 E1                                pop     hl,,de                              ; reverse pop to do an ex
 498++CDED                                      ClearCarryFlag                              ; .
 498++CDED B7          >                        or a
 499++CDEE ED 52                                sbc     hl,de                               ; .
 500++CDF0 7C           .ABSDX:                 ld      a,h                                 ; HL = ABS HL
 501++CDF1 E6 80                                and     $80                                 ; .
 502++CDF3 28 06                                jr      z,.DXPositive                       ; .
 503++CDF5                                      macronegate16hl                             ; .
 503++CDF5 AF          >					xor 	a
 503++CDF6 95          >					sub 	l
 503++CDF7 6F          >					ld 		l,a
 503++CDF8 9F          >					sbc 	a,a
 503++CDF9 94          >					sub 	h
 503++CDFA 67          >					ld 		h,a
 504++CDFB EB           .DXPositive:            ex      de,hl                               ; de = abs delta x
 505++CDFC DD E5 E1                             ld      hl,ix                               ; iy = hl = Y2 - Y1
 506++CDFF ED 42                                sbc     hl,bc                               ; .
 507++CE01 7C           .ABSDY:                 ld      a,h                                 ; HL = ABS HL
 508++CE02 E6 80                                and     $80                                 ; .
 509++CE04 28 06                                jr      z,.DYPositive                       ; .
 510++CE06                                      macronegate16hl                             ; .
 510++CE06 AF          >					xor 	a
 510++CE07 95          >					sub 	l
 510++CE08 6F          >					ld 		l,a
 510++CE09 9F          >					sbc 	a,a
 510++CE0A 94          >					sub 	h
 510++CE0B 67          >					ld 		h,a
 511++CE0C              .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 512++CE0C              ;calculate DY
 513++CE0C 7C           .ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 514++CE0D B2                                   or      d                                   ; .
 515++CE0E 28 0A                                jr      z,.ScaleDone                        ; .
 516++CE10                                      ShiftDERight1                               ; .
 516++CE10 CB 3A       >			   srl d
 516++CE12 CB 1B       >			   rr  e
 517++CE14                                      ShiftHLRight1                               ; .
 517++CE14 CB 3C       >			   srl h
 517++CE16 CB 1D       >			   rr  l
 518++CE18 18 F2                                jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 519++CE1A              .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 520++CE1A              ;if Dx = 0 then hosrizontal line and clip X1 & X2 only then exit
 521++CE1A              ;if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 522++CE1A
 523++CE1A              ;if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 524++CE1A              ;       else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 525++CE1A 7B           .CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 526++CE1B                                      JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 526++CE1B BD          >                        cp      l
 526++CE1C DA 30 CE    >                        jp		c, .DXdivDY
 527++CE1F 7D           .DYdivDX:               ld      a,l                                 ;    A = DY
 528++CE20 53                                   ld      d,e                                 ;    D = DX
 529++CE21 CD 82 97                             call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 530++CE24 32 8B CA     .SaveGradientDYDX:      ld      (Gradient),a
 531++CE27 FD 7C                                ld      a,iyh
 532++CE29 F6 10                                or      16
 533++CE2B FD 67                                ld      iyh,a                               ;
 534++CE2D C3 38 CE                             jp      .ClipP1                             ;
 535++CE30 7B           .DXdivDY:               ld      a,e                                 ;    A = DX
 536++CE31 55                                   ld      d,l                                 ;    D = DY
 537++CE32 CD 82 97                             call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 538++CE35 32 8B CA     .SaveGradientDXDY:      ld      (Gradient),a
 539++CE38              ;if bit 1 of clipccord is set call    LL118
 540++CE38 FD 7C        .ClipP1:                ld      a,iyh
 541++CE3A E6 01                                and     1
 542++CE3C CA 49 CE                             jp      z,.ClipP2
 543++CE3F CD 8A CE                             call    LL118v3
 544++CE42 ED 43 A8 C0                          ld      (UbnkPreClipY1), bc                 ; bc - XX15(2,3);;
 545++CE46 22 A6 C0                             ld      (UbnkPreClipX1), hl
 546++CE49              ;if bit 2 of clipcoord is set
 547++CE49              ;        swap x1y1 with x2y2
 548++CE49              ;        call    LL118
 549++CE49 FD 7C        .ClipP2:                ld      a,iyh
 550++CE4B E6 02                                and     2
 551++CE4D CA 5A CE                             jp      z,.ClipComplete
 552++CE50 CD 80 CE                             call    LL118v3PreSwap
 553++CE53 ED 43 AC C0                          ld      (UbnkPreClipY2), bc                 ; bc - XX15(2,3);;
 554++CE57 22 AA C0                             ld      (UbnkPreClipX2), hl
 555++CE5A              ;clip compelte exit
 556++CE5A 3E FF        .ClipComplete:          ld      a,$FF
 557++CE5C 32 8A CA                             ld      (ClipSuccess),a
 558++CE5F ED 4B A8 C0                          ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 559++CE63 2A A6 C0                             ld      hl,(UbnkPreClipX1)
 560++CE66 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 561++CE6A ED 5B AA C0                          ld      de,(UbnkPreClipX2)
 562++CE6E 79                                   ld      a,c                                 ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 563++CE6F 32 A7 C0                             ld      (UBnkNewY1),a
 564++CE72 DD 7D                                ld      a,ixl
 565++CE74 32 A9 C0                             ld      (UBnkNewY2),a
 566++CE77 7D                                   ld      a,l
 567++CE78 32 A6 C0                             ld      (UBnkNewX1),a
 568++CE7B 7B                                   ld      a,e
 569++CE7C 32 A8 C0                             ld      (UBnkNewX2),a
 570++CE7F C9                                   ret
 571++CE80
 572++CE80 ED 4B AC C0  LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 573++CE84 2A AA C0                             ld      hl,(UbnkPreClipX2)
 574++CE87 C3 91 CE                             jp      LL118v3Fetched
 575++CE8A ED 4B A8 C0  LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 576++CE8E 2A A6 C0                             ld      hl,(UbnkPreClipX1)
 577++CE91              LL118v3Fetched:
 578++CE91              ; if X1 hi <> 0
 579++CE91              LL118:                  ;break
 580++CE91 7C                                   ld      a,h
 581++CE92 A7                                   and     a
 582++CE93 28 7D                                jr      z,.DoneXCalc
 583++CE95              ;        if x1 hi bit 7 is set (so negative)
 584++CE95 E6 80        .CalcBlock1:            and     $80
 585++CE97 28 3E                                jr      z,.CalcBlockX2
 586++CE99              ;               if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 587++CE99 FD 7C        .CalcBlockX1A:          ld      a,iyh
 588++CE9B E6 10                                and      16
 589++CE9D 20 12                                jr      nz,.CalcBlockX1B
 590++CE9F                                      macronegate16hl
 590++CE9F AF          >					xor 	a
 590++CEA0 95          >					sub 	l
 590++CEA1 6F          >					ld 		l,a
 590++CEA2 9F          >					sbc 	a,a
 590++CEA3 94          >					sub 	h
 590++CEA4 67          >					ld 		h,a
 591++CEA5 3A 8B CA                             ld      a,(Gradient)
 592++CEA8 C5                                   push    bc                                  ; abs(X1) / Gradient
 593++CEA9 4F                                   ld      c,a
 594++CEAA CD 99 CF                             call    div_hl_c
 595++CEAD C1                                   pop     bc
 596++CEAE C3 BF CE                             jp      .DoneX1Calc
 597++CEB1              ;                                else set Adjust = abs(X1) * Gradient
 598++CEB1 C5           .CalcBlockX1B:          push    bc                                  ;  abs(X1) * Gradient
 599++CEB2                                      macronegate16hl
 599++CEB2 AF          >					xor 	a
 599++CEB3 95          >					sub 	l
 599++CEB4 6F          >					ld 		l,a
 599++CEB5 9F          >					sbc 	a,a
 599++CEB6 94          >					sub 	h
 599++CEB7 67          >					ld 		h,a
 600++CEB8 3A 8B CA                             ld      a,(Gradient)
 601++CEBB CD E3 94                             call    HLeqyHLmulAdiv256
 602++CEBE C1                                   pop     bc
 603++CEBF              ;               y1 += adjust * (-1 if bit 4 of clipcoord is set)
 604++CEBF              ;               x1 = 0 then call into DonrX1Calc
 605++CEBF FD 7C        .DoneX1Calc:            ld      a,iyh
 606++CEC1 E6 08                                and     8
 607++CEC3 20 06                                jr      nz,.X1SkipNegate
 608++CEC5                                      macronegate16hl
 608++CEC5 AF          >					xor 	a
 608++CEC6 95          >					sub 	l
 608++CEC7 6F          >					ld 		l,a
 608++CEC8 9F          >					sbc 	a,a
 608++CEC9 94          >					sub 	h
 608++CECA 67          >					ld 		h,a
 609++CECB 50 59        .X1SkipNegate:          ld      de,bc
 610++CECD EB                                   ex      hl,de
 611++CECE 19                                   add     hl,de
 612++CECF 44 4D                                ld      bc,hl
 613++CED1 21 00 00                             ld      hl,0
 614++CED4 C3 12 CF                             jp      .DoneXCalc
 615++CED7              ;        else x1 hi is positive
 616++CED7              ;                if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 617++CED7 FD 7C        .CalcBlockX2:           ld      a,iyh
 618++CED9 E6 10                                and     16
 619++CEDB 20 12                                jr      nz,.CalcBlockX2B
 620++CEDD 3A 8B CA     .CalcBlockX2A:          ld      a,(Gradient)            ;Q = gradient
 621++CEE0 C5                                   push    bc
 622++CEE1 4F                                   ld      c,a
 623++CEE2 11 00 01                             ld      de,256
 624++CEE5 B7 ED 52                             sub     hl,de
 625++CEE8 CD 99 CF                             call    div_hl_c
 626++CEEB C1                                   pop     bc
 627++CEEC C3 FD CE                             jp      .DoneX2Calc
 628++CEEF              ;                                 else set Adjust = X1 lo * Gradient
 629++CEEF C5           .CalcBlockX2B:          push    bc
 630++CEF0 3A 8B CA                             ld      a,(Gradient)            ;Q = gradient
 631++CEF3 11 00 01                             ld      de,256
 632++CEF6 B7 ED 52                             sub     hl,de
 633++CEF9 CD E3 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 634++CEFC C1                                   pop     bc
 635++CEFD              ;                y1 += adjust * (-1 if bit 4 of clipcoord is set)
 636++CEFD              ;                x1 = 255
 637++CEFD FD 7C        .DoneX2Calc:ld          a,iyh
 638++CEFF E6 08                                and     8
 639++CF01 20 06                                jr      nz,.X2SkipNegate
 640++CF03                                      macronegate16hl
 640++CF03 AF          >					xor 	a
 640++CF04 95          >					sub 	l
 640++CF05 6F          >					ld 		l,a
 640++CF06 9F          >					sbc 	a,a
 640++CF07 94          >					sub 	h
 640++CF08 67          >					ld 		h,a
 641++CF09 EB           .X2SkipNegate:          ex      de,hl
 642++CF0A 60 69                                ld      hl,bc
 643++CF0C 19                                   add     hl,de
 644++CF0D 44 4D                                ld      bc,hl
 645++CF0F 21 FF 00                             ld      hl,255
 646++CF12              ;    if Y1 hi <> 0 or Y1 low >= 128
 647++CF12 78           .DoneXCalc:             ld      a,b
 648++CF13 A7                                   and     a
 649++CF14 20 04                                jr      nz,.CalcBlockY1Test
 650++CF16 79                                   ld      a,c
 651++CF17 E6 80                                and     $80
 652++CF19 C8                                   ret     z
 653++CF1A              ;       if Y1 hi bit 7 is set
 654++CF1A 78           .CalcBlockY1Test:       ld      a,b
 655++CF1B E6 80                                and     $80
 656++CF1D 28 3D                                jr      z,.CalcBlockY2
 657++CF1F              ;                if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 658++CF1F FD 7C        .CalcBlockY1:           ld      a,iyh
 659++CF21 E6 10                                and     16
 660++CF23 20 15                                jr      nz,.CalcBlockY1B
 661++CF25              .CalcBlockY1A:          macronegate16bc
 661++CF25 AF          >					xor 	a
 661++CF26 91          >                    sub 	c
 661++CF27 4F          >                    ld 		c,a
 661++CF28 9F          >                    sbc 	a,a
 661++CF29 90          >                    sub 	b
 661++CF2A 47          >                    ld 		b,a
 662++CF2B 3A 8B CA                             ld      a,(Gradient)            ;Q = gradient
 663++CF2E E5                                   push    hl
 664++CF2F 60 69                                ld      hl,bc
 665++CF31 4F                                   ld      c,a
 666++CF32 CD 99 CF                             call    div_hl_c;LLHLdivC;div_hl_c
 667++CF35 D1                                   pop     de
 668++CF36 EB                                   ex      de,hl
 669++CF37 C3 4B CF                             jp      .DoneBlockY1
 670++CF3A              ;                                 else set Adjust = abs(Y1) * Gradient
 671++CF3A              .CalcBlockY1B:          macronegate16bc
 671++CF3A AF          >					xor 	a
 671++CF3B 91          >                    sub 	c
 671++CF3C 4F          >                    ld 		c,a
 671++CF3D 9F          >                    sbc 	a,a
 671++CF3E 90          >                    sub 	b
 671++CF3F 47          >                    ld 		b,a
 672++CF40 E5                                   push    hl
 673++CF41 60 69                                ld      hl,bc
 674++CF43 3A 8B CA                             ld      a,(Gradient)            ;Q = gradient
 675++CF46 CD E3 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 676++CF49 D1                                   pop     de
 677++CF4A EB                                   ex      de,hl
 678++CF4B              ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 679++CF4B              ;                y1 = 0
 680++CF4B              ;                ret
 681++CF4B FD 7C        .DoneBlockY1:           ld      a,iyh
 682++CF4D E6 04                                and     4
 683++CF4F 20 06                                jr      nz,.Y1SkipNegate
 684++CF51                                      macronegate16de
 684++CF51 AF          >					xor 	a
 684++CF52 93          >                    sub 	e
 684++CF53 5F          >                    ld 		e,a
 684++CF54 9F          >                    sbc 	a,a
 684++CF55 92          >                    sub 	d
 684++CF56 57          >                    ld 		d,a
 685++CF57 19           .Y1SkipNegate:          add     hl,de
 686++CF58 01 00 00                             ld      bc,0
 687++CF5B C9                                   ret
 688++CF5C              ;                if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 689++CF5C FD 7C        .CalcBlockY2:           ld      a,iyh
 690++CF5E E6 10                                and     16
 691++CF60 28 15                                jr      z,.CalcBlockY2B
 692++CF62 3A 8B CA     .CalcBlockY2A:          ld      a,(Gradient)            ;Q = gradient
 693++CF65 E5                                   push    hl
 694++CF66 60 69                                ld      hl,bc
 695++CF68 11 7F 00                             ld      de,127
 696++CF6B B7 ED 52                             sub     hl,de
 697++CF6E 4F                                   ld      c,a
 698++CF6F CD 99 CF                             call    div_hl_c;LLHLdivC
 699++CF72 D1                                   pop     de
 700++CF73 EB                                   ex      de,hl
 701++CF74 C3 88 CF                             jp      .DoneBlockY2
 702++CF77              ;                                 else set Adjust = Y1 lo * Gradient
 703++CF77 E5           .CalcBlockY2B:          push    hl
 704++CF78 60 69                                ld      hl,bc
 705++CF7A 11 7F 00                             ld      de,127
 706++CF7D B7 ED 52                             sub     hl,de
 707++CF80 3A 8B CA                             ld      a,(Gradient)
 708++CF83 CD E3 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 709++CF86 D1                                   pop     de
 710++CF87 EB                                   ex      de,hl
 711++CF88              ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 712++CF88              ;                y1 = 127
 713++CF88 FD 7C        .DoneBlockY2:           ld      a,iyh
 714++CF8A E6 04                                and     4
 715++CF8C 20 06                                jr      nz,.Y2SkipNegate
 716++CF8E                                      macronegate16de
 716++CF8E AF          >					xor 	a
 716++CF8F 93          >                    sub 	e
 716++CF90 5F          >                    ld 		e,a
 716++CF91 9F          >                    sbc 	a,a
 716++CF92 92          >                    sub 	d
 716++CF93 57          >                    ld 		d,a
 717++CF94 19           .Y2SkipNegate:          add     hl,de
 718++CF95 01 7F 00                             ld      bc,127
 719++CF98 C9                                   ret
 720++CF99
 721++CF99
 722++CF99 AF           div_hl_c:               xor	a
 723++CF9A 06 10                                ld	b, 16
 724++CF9C 29           .loop:                  add	hl, hl
 725++CF9D 17                                   rla
 726++CF9E 38 03                                jr	c, $+5
 727++CFA0 B9                                   cp	c
 728++CFA1 38 02                                jr	c, $+4
 729++CFA3 91                                   sub	c
 730++CFA4 2C                                   inc	l
 731++CFA5 10 F5                                djnz	.loop
 732++CFA7 C9                                   ret
 733++CFA8
 734++CFA8 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 735++CFAB              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 735++CFAB CB 25       >			   sla l
 735++CFAD CB 14       >			   rl  h
 736++CFAF 7C                                   ld      a,h
 737++CFB0 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 738++CFB2                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 738++CFB2 B9          >                        cp      c
 738++CFB3 DA BE CF    >                        jp		c, .LL132
 739++CFB6 3F           .LL131:                 ccf                                 ; compliment carry
 740++CFB7 99                                   sbc     a,c                         ; q
 741++CFB8 67                                   ld      h,a                         ; h (s)
 742++CFB9 7D                                   ld      a,l                         ; r
 743++CFBA DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 744++CFBC 37                                   scf                                 ; set carry for next rolls
 745++CFBD 3F                                   ccf
 746++CFBE              .LL132:                 RollDELeft1                         ; Rotate de bits left
 746++CFBE CB 13       >               rl  e
 746++CFC0 CB 12       >               rl  d
 747++CFC2 38 E7                                jr      c,.LL130                    ;
 748++CFC4 EB                                   ex      de,hl                       ; hl = result
 749++CFC5 C9                                   ret
 750++CFC6
 751++CFC6              ; old code for on screen test
 752++CFC6              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 753++CFC6              ;;;;;;
 754++CFC6              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 755++CFC6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 756++CFC6              ;;;;;;                        and     ixh
 757++CFC6              ;;;;;;                        jp      .CheckYLow
 758++CFC6              ;;;;;;                        ld
 759++CFC6              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 760++CFC6              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 761++CFC6              ;;;;;;                        ld      a,ixh                               ;
 762++CFC6              ;;;;;;                        and     a                                   ;
 763++CFC6              ;;;;;;                        ret     nz                                  ;
 764++CFC6              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 765++CFC6              ;;;;;;                        ld      a,b                                 ;
 766++CFC6              ;;;;;;                        and     ixh                                 ;
 767++CFC6              ;;;;;;                        and     $80                                 ;
 768++CFC6              ;;;;;;                        ret     z                                   ;
 769++CFC6              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 770++CFC6              ;;;;;;                        ld      a,b                                 ;
 771++CFC6              ;;;;;;                        and     ixh                                 ;
 772++CFC6              ;;;;;;                        ret     nz                                  ;
 773++CFC6              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 774++CFC6              ;;;;;;                        ld      a,b
 775++CFC6              ;;;;;;                        or      ixh
 776++CFC6              ;;;;;;                        jr      nz,.StartProcessing
 777++CFC6              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 778++CFC6              ;;;;;;                        ld      a,c
 779++CFC6              ;;;;;;                        or      ixl
 780++CFC6              ;;;;;;                        and     $80
 781++CFC6              ;;;;;;                        jr      z,.StartProcessing
 782++CFC6              ;;;;;;
 783++CFC6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 784++CFC6              ;;;;;;                        cp      0                                   ;
 785++CFC6              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 786++CFC6              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 787++CFC6              ;;;;;;                        cp      0                                   ;
 788++CFC6              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 789++CFC6              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 790++CFC6              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 791++CFC6              ;;;;;;                        and     $80                                 ;
 792++CFC6              ;;;;;;                        ret     z                                   ;
 793++CFC6              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 794++CFC6              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 795++CFC6              ;;;;;;                        cp      0                                   ;
 796++CFC6              ;;;;;;                        jr      nz,.Startprocessing                 ;
 797++CFC6              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 798++CFC6              ;;;;;;                        and     ixl
 799++CFC6              ;;;;;;
 800++CFC6              ;;;;;;                        .CheckY2Lo                        ;
 801++CFC6              ;;;;;;.CheckY1Lo:             ld      a,c
 802++CFC6              ;;;;;;                        and     $80
 803++CFC6              ;;;;;;                        jr      z,.StartProcessing
 804++CFC6              ;;;;;;.CheckY2Lo:             ld      a,ixl
 805++CFC6              ;;;;;;                        and     $80
 806++CFC6              ;;;;;;                        ret     nz
 807++CFC6              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 566+ CFC6              ;--------------------------------------------------------------------------------------------------------
 567+ CFC6                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CFC6              ; Set TransMatTo
   2++CFC6              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CFC6              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CFC6              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CFC6              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CFC6              ; 18 byte fast copy
   7++CFC6
   8++CFC6              ; Fast copy using the stack                                                         ; T states
   9++CFC6 DD 21 00 00  CopyRotmatToTransMat:   ld      ix,0                                                ; 14
  10++CFCA DD 39                                add     ix,sp                                               ; 15
  11++CFCC 31 29 C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  12++CFCF E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  13++CFD0 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  14++CFD1 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  15++CFD2 D9                                   exx                                                         ; 4
  16++CFD3 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  17++CFD4 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  18++CFD5 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  19++CFD6 31 6D C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  20++CFD9 C5                                   push    bc                                                  ; 10
  21++CFDA D5                                   push    de                                                  ; 10
  22++CFDB E5                                   push    hl                                                  ; 10
  23++CFDC D9                                   exx                                                         ; 4
  24++CFDD C5                                   push    bc                                                  ; 10
  25++CFDE D5                                   push    de                                                  ; 10
  26++CFDF E5                                   push    hl                                                  ; 10
  27++CFE0 31 35 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  28++CFE3 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  29++CFE4 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  30++CFE5 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  31++CFE6 31 73 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  32++CFE9 C5                                   push    bc                                                  ; 10
  33++CFEA D5                                   push    de                                                  ; 10
  34++CFEB E5                                   push    hl                                                  ; 10
  35++CFEC DD F9                                ld      sp,ix               ; restore stack                 ; 10
  36++CFEE C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  37++CFEF
  38++CFEF
  39++CFEF
  40++CFEF              ;CopyRotmatToTransMat:
  41++CFEF              ;                        ld      hl,UBnkrotmatSidevX
  42++CFEF              ;                        ld      de,UBnkTransmatSidevX
  43++CFEF              ;                        SixLDIInstrunctions
  44++CFEF              ;                        ld      hl,UBnkrotmatRoofvX
  45++CFEF              ;                        ld      de, UBnkTransmatRoofvX
  46++CFEF              ;                        SixLDIInstrunctions
  47++CFEF              ;                        ld      hl,UBnkrotmatNosevX
  48++CFEF              ;                        ld      de, UBnkTransmatNosevX
  49++CFEF              ;                        SixLDIInstrunctions
  50++CFEF              ;                        ret
  51++CFEF
  52++CFEF              CopyRotToTransMacro:    MACRO
  53++CFEF ~                                    ld      hl,UBnkrotmatSidevX
  54++CFEF ~                                    ld      de,UBnkTransmatSidevX
  55++CFEF ~                                    SixLDIInstrunctions
  56++CFEF ~                                    SixLDIInstrunctions
  57++CFEF ~                                    SixLDIInstrunctions
  58++CFEF                                      ENDM
  59++CFEF
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 568+ CFEF                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CFEF              TransposeXX12ByShipToXX15:
   2++CFEF 2A AC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CFF2 7C           		ld		a,h			                        ; get XX12 Sign
   4++CFF3 E6 80        		and		$80									; check sign bit on high byte
   5++CFF5 47           		ld		b,a									; and put it in of 12xlo in b
   6++CFF6                      ;110921 debugld      h,0
   7++CFF6 7C                   ld      a,h
   8++CFF7 E6 7F                and     $7F
   9++CFF9 67                   ld      h,a
  10++CFFA                      ;110921 debugld      h,0
  11++CFFA ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CFFE 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++D001 E6 80        		and		$80									; make sure we only have bit 7
  14++D003 4F           		ld		c,a									; and put sign of unkxsgn c
  15++D004 CD EF 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++D007 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++D008 67           		ld		h,a
  18++D009 22 A6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++D00C              ; ..................................
  20++D00C 2A AE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++D00F 7C           		ld		a,h
  22++D010 E6 80        		and		$80
  23++D012 47           		ld		b,a
  24++D013                      ;110921 debugld      h,0
  25++D013 7C                   ld      a,h
  26++D014 E6 7F                and     $7F
  27++D016 67                   ld      h,a
  28++D017                      ;110921 debugld      h,0
  29++D017 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++D01B 3A 25 C0     		ld		a,(UBnKysgn)
  31++D01E E6 80        		and		$80									; make sure we only have bit 7
  32++D020 4F           		ld		c,a
  33++D021 CD EF 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++D024 B4           		or		h									; combine sign in A with H
  35++D025 67           		ld		h,a
  36++D026 22 A8 C0     		ld		(UBnkYScaled),hl
  37++D029              ; ..................................
  38++D029 2A B0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++D02C 7C           		ld		a,h
  40++D02D E6 80        		and		$80
  41++D02F 47           		ld		b,a
  42++D030                      ;110921 debugld      h,0
  43++D030 7C                   ld      a,h
  44++D031 E6 7F                and     $7F
  45++D033 67                   ld      h,a
  46++D034                      ;110921 debugld      h,0
  47++D034 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++D038 3A 28 C0     		ld		a,(UBnKzsgn)
  49++D03B E6 80        		and		$80									; make sure we only have bit 7
  50++D03D 4F           		ld		c,a
  51++D03E CD EF 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++D041 B4           		or		h									; combine sign in A with H
  53++D042 67           		ld		h,a
  54++D043 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++D045 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++D047 E6 7F                and     $7F                                 ; a = value unsigned
  57++D049 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++D04B 7D                   ld      a,l                                 ; get low byte now
  59++D04C              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++D04C FE 04       >                        cp      4
  59++D04E DA 5D D0    >                        jp		c, ClampZto4
  60++D051              NoClampZto4:
  61++D051 22 AA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++D054 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++D055 32 0F 82             ld      (varT),a
  64++D058 7C           		ld		a,h
  65++D059 32 F2 81             ld      (varU),a
  66++D05C C9           		ret
  67++D05D              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++D05D 21 04 00     		ld		hl,4
  69++D060 22 AA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++D063 7D           		ld		a,l
  71++D064 32 0F 82             ld      (varT),a                            ;                                                                           ;;;
  72++D067 7C           		ld		a,h
  73++D068 32 F2 81             ld      (varU),a 						; compatibility for now
  74++D06B C9           		ret
  75++D06C
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 569+ D06C                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++D06C              ScaleNodeTo8Bit:								; TODO make signed
   2++D06C ED 4B AA C0  	ld			bc,(UBnkZScaled)
   3++D070 2A A6 C0     	ld			hl,(UBnkXScaled)
   4++D073 ED 5B A8 C0  	ld			de,(UBnkYScaled)
   5++D077              SetABSbc:
   6++D077 78           	ld			a,b
   7++D078 DD 67        	ld			ixh,a
   8++D07A E6 7F        	and			SignMask8Bit
   9++D07C 47           	ld			b,a									; bc = ABS bc
  10++D07D              SetABShl:
  11++D07D 7C           	ld			a,h
  12++D07E DD 6F        	ld			ixl,a
  13++D080 E6 7F        	and			SignMask8Bit
  14++D082 67           	ld			h,a									; hl = ABS hl
  15++D083              SetABSde:
  16++D083 7A           	ld			a,d
  17++D084 FD 67        	ld			iyh,a
  18++D086 E6 7F        	and			SignMask8Bit
  19++D088 57           	ld			d,a									; de = ABS de
  20++D089              ScaleNodeTo8BitLoop:
  21++D089 78               ld          a,b		                            ; U	\ z hi
  22++D08A B4           	or			h                                   ; XX15+1	\ x hi
  23++D08B B2           	or			d                                   ; XX15+4	\ y hi
  24++D08C 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++D08E                  ShiftHLRight1
  25++D08E CB 3C       >			   srl h
  25++D090 CB 1D       >			   rr  l
  26++D092                  ShiftDERight1
  26++D092 CB 3A       >			   srl d
  26++D094 CB 1B       >			   rr  e
  27++D096              	ShiftBCRight1
  27++D096 CB 38       >			   srl b
  27++D098 CB 19       >			   rr  c
  28++D09A C3 89 D0         jp          ScaleNodeTo8BitLoop
  29++D09D              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++D09D DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++D09F E6 80        	and			SignOnly8Bit
  32++D0A1 B0           	or			b
  33++D0A2 47           	ld			b,a
  34++D0A3              SignforHL:
  35++D0A3 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++D0A5 E6 80        	and			SignOnly8Bit
  37++D0A7 B4           	or			h
  38++D0A8 67           	ld			h,a
  39++D0A9              SignforDE:
  40++D0A9 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++D0AB E6 80        	and			SignOnly8Bit
  42++D0AD B2           	or			d
  43++D0AE 57           	ld			d,a
  44++D0AF              SignsDoneSaveResult:
  45++D0AF ED 43 AA C0  	ld			(UBnkZScaled),bc
  46++D0B3 22 A6 C0     	ld			(UBnkXScaled),hl
  47++D0B6 ED 53 A8 C0  	ld			(UBnkYScaled),de
  48++D0BA 78           	ld			a,b
  49++D0BB 32 F2 81     	ld			(varU),a
  50++D0BE 79           	ld			a,c
  51++D0BF 32 0F 82     	ld			(varT),a
  52++D0C2 C9           	ret
  53++D0C3
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 570+ D0C3
 571+ D0C3              ;--------------------------------------------------------------------------------------------------------
 572+ D0C3 21 D2 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 573+ D0C6 ED 31                                add     hl,a
 574+ D0C8 3E FF                                ld      a,$FF
 575+ D0CA 77                                   ld      (hl),a
 576+ D0CB C9                                   ret
 577+ D0CC              ;--------------------------------------------------------------------------------------------------------
 578+ D0CC 21 D2 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 579+ D0CF ED 31                                add     hl,a
 580+ D0D1 AF                                   xor     a
 581+ D0D2 77                                   ld      (hl),a
 582+ D0D3 C9                                   ret
 583+ D0D4              ;--------------------------------------------------------------------------------------------------------
 584+ D0D4 3A 9F C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 585+ D0D7 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 586+ D0D9 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 587+ D0DB 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 588+ D0DC 21 D2 C0                             ld      hl,UbnkFaceVisArray
 589+ D0DF 3E FF                                ld      a,$FF
 590+ D0E1              SetAllFacesVisibleLoop:
 591+ D0E1 77           EE30:                   ld      (hl),a
 592+ D0E2 23                                   inc     hl
 593+ D0E3 10 FC                                djnz    SetAllFacesVisibleLoop
 594+ D0E5 C9                                   ret
 595+ D0E6              ;--------------------------------------------------------------------------------------------------------
 596+ D0E6 3A 9F C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 597+ D0E9 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 598+ D0EB CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 599+ D0ED 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 600+ D0EE 06 10                                ld      b,16
 601+ D0F0 21 D2 C0                             ld      hl,UbnkFaceVisArray
 602+ D0F3 3E 00                                ld      a,$00
 603+ D0F5 77           SetAllFacesHiddenLoop:  ld      (hl),a
 604+ D0F6 23                                   inc     hl
 605+ D0F7 10 FC                                djnz    SetAllFacesHiddenLoop
 606+ D0F9 C9                                   ret
 607+ D0FA
 608+ D0FA              ;;;;X = normal scale
 609+ D0FA              ;;;;ZtempHi = zhi
 610+ D0FA              ;;;;......................................................
 611+ D0FA              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 612+ D0FA              ;;;;  Loop                                              ::LL90
 613+ D0FA              ;;;;     inc X
 614+ D0FA              ;;;;     divide X, Y & ZtempHiLo by 2
 615+ D0FA              ;;;;  Until ZtempHi = 0
 616+ D0FA              ;;;;......................................................
 617+ D0FA              ;-LL21---------------------------------------------------------------------------------------------------
 618+ D0FA                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++D0FA              ;divdide by 16 using undocumented instrunctions
   2++D0FA              Norm256mulAdivQ:
   3++D0FA 47               ld      b,a
   4++D0FB 0E 00            ld      c,0
   5++D0FD 16 00            ld      d,0
   6++D0FF 3A F3 81         ld      a,(varQ)
   7++D102 5F               ld      e,a
   8++D103              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D103              ;Output: BC = Quotient, HL = Remainder
  10++D103              NormDIV16UNDOC:
  11++D103 21 00 00         ld      hl,0
  12++D106 78               ld      a,b
  13++D107 06 10            ld      b,16
  14++D109              NormDIV16UNDOCLOOP:
  15++D109 CB 31        	sll	    c		; unroll 16 times
  16++D10B 17           	rla	    		; ...
  17++D10C ED 6A        	adc	    hl,hl		; ...
  18++D10E ED 52        	sbc	    hl,de		; ...
  19++D110 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D112 19           	add	    hl,de		; ...
  21++D113 0D           	dec	    c		; ...
  22++D114              NormDIV16UNDOCSKIP:
  23++D114 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D116 79               ld      a,c
  25++D117 32 F4 81         ld      (varR),a
  26++D11A C9               ret
  27++D11B
  28++D11B FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  29++D11D                                      ClearSignBitA
  29++D11D E6 7F       >                        and     SignMask8Bit
  30++D11F CD FA D0                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  31++D122 FD 7C                                ld      a,iyh                       ; now correct R reg
  32++D124                                      SignBitOnlyA
  32++D124 E6 80       >                        and     SignOnly8Bit
  33++D126 B1                                   or      c
  34++D127 32 F4 81                             ld      (varR),a
  35++D12A C9                                   ret
  36++D12B
  37++D12B              ; Tested OK
  38++D12B              ;LL21
  39++D12B              NormaliseTransMat:
  40++D12B                      IFDEF LOGMATHS
  41++D12B ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  42++D12B ~                            ld      b,9                         ; total of 9 elements to transform
  43++D12B ~                            MMUSelectMathsTables
  44++D12B ~            .LL21Loop:      ld      d,(hl)
  45++D12B ~                            dec     hl
  46++D12B ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  47++D12B ~                            ShiftDELeft1                        ; De = DE * 2
  48++D12B ~                            ld      a,d                         ; a = hi byte after shifting
  49++D12B ~                            push	hl
  50++D12B ~                            push	bc
  51++D12B ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  52++D12B ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  53++D12B ~                            pop		bc
  54++D12B ~                            pop		hl							; bc gets wrecked by BFRDIV
  55++D12B ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  56++D12B ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  57++D12B ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  58++D12B ~                            MMUSelectROM0
  59++D12B ~                            ret
  60++D12B                      ELSE
  61++D12B 21 72 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  62++D12E 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  63++D130 79                           ld      a,c
  64++D131 32 F3 81                     ld      (varQ),a                    ; set up varQ
  65++D134 06 09                        ld      b,9                         ; total of 9 elements to transform
  66++D136 56           LL21Loop:       ld      d,(hl)
  67++D137 2B                           dec     hl
  68++D138 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  69++D139                              ShiftDELeft1                        ; De = DE * 2
  69++D139 CB 23       >			   sla e
  69++D13B CB 12       >			   rl  d
  70++D13D 7A                           ld      a,d                         ; a = hi byte after shifting
  71++D13E E5                           push	hl
  72++D13F C5                           push	bc
  73++D140 CD FA D0                     call    Norm256mulAdivQ
  74++D143                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  75++D143 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  76++D144 C1                           pop		bc
  77++D145 E1                           pop		hl							; bc gets wrecked by BFRDIV
  78++D146 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  79++D147 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  80++D148 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  81++D14A C9                           ret
  82++D14B                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 619+ D14B              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 620+ D14B              ;-LL91---------------------------------------------------------------------------------------------------
 621+ D14B
 622+ D14B              ; Now we have
 623+ D14B              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 624+ D14B              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 625+ D14B              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 626+ D14B              ;
 627+ D14B              ;--------------------------------------------------------------------------------------------------------
 628+ D14B                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++D14B              ; TESTEDOK
   2++D14B
   3++D14B              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D14B              ;        ld      a,(XX17)
   5++D14B              ;        ld      ixl,a
   6++D14B              ;        ld      ixh,9
   7++D14B              ;        ld      hl,UBnkTransInv0x
   8++D14B              ;        ld      a,(hl)
   9++D14B              ;ScaleNode:
  10++D14B              ;        ld      b,ixl
  11++D14B              ;ScaleNodeLoop:
  12++D14B              ;        sla      a
  13++D14B              ;        djnz    ScaleNodeLoop
  14++D14B              ;        ld      (hl),a
  15++D14B              ;        inc     hl
  16++D14B              ;        inc     hl
  17++D14B              ;        dec     ixh
  18++D14B              ;        jr      nz,ScaleNode
  19++D14B              ;        ret
  20++D14B
  21++D14B
  22++D14B              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D14B              ; we coudl combine this with move to transmat later as an optimisation
  24++D14B              ; INPUT - All Scaled
  25++D14B              ;  They transmat has already been put into side, roof nose order
  26++D14B              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D14B              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D14B              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D14B              ; OUTPUT
  30++D14B              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D14B              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D14B              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D14B              ; First all side values become compoment 0 of each vector
  34++D14B 2A 61 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D14E ED 5B 67 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D152 ED 4B 6D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D156 22 79 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D159 ED 53 7B C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D15D ED 43 7D C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D161 2A 63 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D164 ED 5B 69 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D168 ED 4B 6F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D16C 22 81 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D16F ED 53 83 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D173 ED 43 85 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D177 2A 65 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D17A ED 5B 6B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D17E ED 4B 71 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D182 22 89 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D185 ED 53 8B C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D189 ED 43 8D C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D18D C9                   ret
  53++D18E
  54++D18E
# file closed: ./Universe/Ships/InverseXX16.asm
 629+ D18E              ;--------------------------------------------------------------------------------------------------------
 630+ D18E              ;--------------------------------------------------------------------------------------------------------
 631+ D18E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 632+ D18E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 633+ D18E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 634+ D18E              ; Returns
 635+ D18E              ;
 636+ D18E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 637+ D18E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 638+ D18E              ;
 639+ D18E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 640+ D18E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 641+ D18E              ;
 642+ D18E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 643+ D18E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 644+ D18E              ; TESTEDOK
 645+ D18E              XX12DotOneRow:
univ_ship_data.asm(646): error: Unrecognized instruction: N0equN1byN2div256 varT, (hl), (UBnkXScaled)
 646+ D18E              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 647+ D18E 23                                   inc     hl                                  ; move to sign byte
 648+ D18F              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 648+ D18F 3A A7 C0    >                        ld      a,(UBnkXScaledSign)
 648+ D192 AE          >                        xor     (hl)
 649+ D193 32 F5 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 650+ D196 23                                   inc     hl
univ_ship_data.asm(651): error: Unrecognized instruction: N0equN1byN2div256 varQ, (hl),(UBnkYScaled)
 651+ D197              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 652+ D197                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 652+ D197 3A 0F 82    >                        ld       a,(varT)
 652+ D19A 32 F4 81    >                        ld       (varR),a
 653+ D19D 23                                   inc     hl
 654+ D19E                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 654+ D19E 3A A9 C0    >                        ld      a,(UBnkYScaledSign)
 654+ D1A1 AE          >                        xor     (hl)
 655+ D1A2              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 656+ D1A2 E5           STequSRplusAQ           push    hl
 657+ D1A3 CD 86 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 658+ D1A6 E1                                   pop     hl
 659+ D1A7 32 0F 82                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 660+ D1AA 23                                   inc     hl
univ_ship_data.asm(661): error: Unrecognized instruction: N0equN1byN2div256 varQ,(hl),(UBnkZScaled)
 661+ D1AB              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 662+ D1AB                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 662+ D1AB 3A 0F 82    >                        ld       a,(varT)
 662+ D1AE 32 F4 81    >                        ld       (varR),a
 663+ D1B1 23                                   inc     hl
 664+ D1B2                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 664+ D1B2 3A AB C0    >                        ld      a,(UBnkZScaledSign)
 664+ D1B5 AE          >                        xor     (hl)
 665+ D1B6              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 666+ D1B6 CD 86 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 667+ D1B9              ; Now we exit with A = result S = Sign
 668+ D1B9 C9                                   ret
 669+ D1BA
 670+ D1BA
 671+ D1BA
 672+ D1BA              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 673+ D1BA              ;TESTED OK
 674+ D1BA              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 675+ D1BA              XX12EquXX15DotProductXX16:
 676+ D1BA 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 677+ D1BD 21 61 C0                             ld      hl,UBnkTransmatSidevX
 678+ D1C0 CD 8E D1                             call    XX12DotOneRow
 679+ D1C3 32 AC C0                             ld      (UBnkXX12xLo),a
 680+ D1C6 3A F5 81                             ld      a,(varS)
 681+ D1C9 32 AD C0                             ld      (UBnkXX12xSign),a
 682+ D1CC 21 67 C0                             ld      hl,UBnkTransmatRoofvX
 683+ D1CF CD 8E D1                             call    XX12DotOneRow
 684+ D1D2 32 AE C0                             ld      (UBnkXX12yLo),a
 685+ D1D5 3A F5 81                             ld      a,(varS)
 686+ D1D8 32 AF C0                             ld      (UBnkXX12ySign),a
 687+ D1DB 21 6D C0                             ld      hl,UBnkTransmatNosevX
 688+ D1DE CD 8E D1                             call    XX12DotOneRow
 689+ D1E1 32 B0 C0                             ld      (UBnkXX12zLo),a
 690+ D1E4 3A F5 81                             ld      a,(varS)
 691+ D1E7 32 B1 C0                             ld      (UBnkXX12zSign),a
 692+ D1EA C9                                   ret
 693+ D1EB              ;--------------------------------------------------------------------------------------------------------
 694+ D1EB                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D1EB              CopyXX12ScaledToXX18:
   2++D1EB              CopyResultToDrawCam:
   3++D1EB                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D1EB 3A AC C0    >                        ld       a,(XX12)
   3++D1EE 32 9A C0    >                        ld       (XX18),a
   4++D1F1                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D1F1 3A AD C0    >                        ld       a,(XX12+1)
   4++D1F4 32 9C C0    >                        ld       (XX18+2),a
   5++D1F7                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D1F7 3A AE C0    >                        ld       a,(XX12+2)
   5++D1FA 32 9D C0    >                        ld       (XX18+3),a
   6++D1FD                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D1FD 3A AF C0    >                        ld       a,(XX12+3)
   6++D200 32 9F C0    >                        ld       (XX18+5),a
   7++D203                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D203 3A B0 C0    >                        ld       a,(XX12+4)
   7++D206 32 A0 C0    >                        ld       (XX18+6),a
   8++D209                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D209 3A B1 C0    >                        ld       a,(XX12+5)
   8++D20C 32 A2 C0    >                        ld       (XX18+8),a
   9++D20F C9                   ret
  10++D210
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 695+ D210                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D210              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D210 3A AC C0    >                        ld       a,(UBnkXX12xLo)
   1++D213 32 A6 C0    >                        ld       (UBnkXScaled),a
   2++D216                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D216 3A AD C0    >                        ld       a,(UBnkXX12xSign)
   2++D219 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   3++D21C                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D21C 3A AE C0    >                        ld       a,(UBnkXX12yLo)
   3++D21F 32 A8 C0    >                        ld       (UBnkYScaled),a
   4++D222                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D222 3A AF C0    >                        ld       a,(UBnkXX12ySign)
   4++D225 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   5++D228                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D228 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
   5++D22B 32 AA C0    >                        ld       (UBnkZScaled),a
   6++D22E                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D22E 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
   6++D231 32 AB C0    >                        ld       (UBnkZScaledSign),a
   7++D234 C9                                   ret
   8++D235
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 696+ D235                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D235              CopyXX18toXX15:
   2++D235              CopyDrawCamToScaled:
   3++D235                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D235 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D238 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++D23B                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D23B 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D23E 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   5++D241                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D241 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D244 32 A8 C0    >                        ld       (UBnkYScaled),a
   6++D247                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D247 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D24A 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   7++D24D                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D24D 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D250 32 AA C0    >                        ld       (UBnkZScaled),a
   8++D253                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D253 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D256 32 AB C0    >                        ld       (UBnkZScaledSign),a
   9++D259 C9                   ret
  10++D25A
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 697+ D25A                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D25A 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++D25D ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++D261 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++D265 22 9A C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++D268 ED 53 9C C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++D26C ED 43 9E C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++D270
   8++D270 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++D273 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++D276 22 A0 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++D279 32 A2 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++D27C C9                                   ret
  13++D27D              ;                       ld      hl,UBnKxlo
  14++D27D              ;                       ld      de,UBnkDrawCam0xLo
  15++D27D              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++D27D C9                                   ret
  17++D27E
  18++D27E 2A 9A C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++D281 3A 9C C0                             ld  a,(UBnkDrawCam0xSgn)
  20++D284 B4                                   or  h
  21++D285 67                                   ld  h,a
  22++D286 22 A6 C0                             ld  (UBnkXScaled),hl
  23++D289 2A 9D C0                             ld  hl,(UBnkDrawCam0yLo)
  24++D28C 3A 9F C0                             ld  a,(UBnkDrawCam0ySgn)
  25++D28F B4                                   or  h
  26++D290 67                                   ld  h,a
  27++D291 22 A8 C0                             ld  (UBnkYScaled),hl
  28++D294 2A A0 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++D297 3A A2 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++D29A B4                                   or  h
  31++D29B 67                                   ld  h,a
  32++D29C 22 AA C0                             ld  (UBnkZScaled),hl
  33++D29F C9                                   ret
  34++D2A0
  35++D2A0              CopyXX18ScaledToXX15:
  36++D2A0              CopyDrawCamToScaledMatrix:
  37++D2A0                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  37++D2A0 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
  37++D2A3 32 AB C0    >                        ld       (UBnkZScaledSign),a
  38++D2A6                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  38++D2A6 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
  38++D2A9 32 A6 C0    >                        ld       (UBnkXScaled),a
  39++D2AC                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  39++D2AC 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
  39++D2AF 32 A7 C0    >                        ld       (UBnkXScaledSign),a
  40++D2B2                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  40++D2B2 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
  40++D2B5 32 A8 C0    >                        ld       (UBnkYScaled),a
  41++D2B8                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  41++D2B8 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
  41++D2BB 32 A9 C0    >                        ld       (UBnkYScaledSign),a
  42++D2BE                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  42++D2BE 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
  42++D2C1 32 AA C0    >                        ld       (UBnkZScaled),a
  43++D2C4 C9                   ret
  44++D2C5
  45++D2C5              CopyXX15ToXX18Scaled:
  46++D2C5              CopyScaledMatrixToDrawCam:
  47++D2C5                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  47++D2C5 3A AB C0    >                        ld       a,(UBnkZScaledSign)
  47++D2C8 32 A2 C0    >                        ld       (UBnkDrawCam0zSgn),a
  48++D2CB                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  48++D2CB 3A A6 C0    >                        ld       a,(UBnkXScaled)
  48++D2CE 32 9A C0    >                        ld       (UBnkDrawCam0xLo),a
  49++D2D1                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  49++D2D1 3A A7 C0    >                        ld       a,(UBnkXScaledSign)
  49++D2D4 32 9C C0    >                        ld       (UBnkDrawCam0xSgn),a
  50++D2D7                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  50++D2D7 3A A8 C0    >                        ld       a,(UBnkYScaled)
  50++D2DA 32 9D C0    >                        ld       (UBnkDrawCam0yLo),a
  51++D2DD                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  51++D2DD 3A A9 C0    >                        ld       a,(UBnkYScaledSign)
  51++D2E0 32 9F C0    >                        ld       (UBnkDrawCam0ySgn),a
  52++D2E3                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  52++D2E3 3A AA C0    >                        ld       a,(UBnkZScaled)
  52++D2E6 32 A0 C0    >                        ld       (UBnkDrawCam0zLo),a
  53++D2E9 C9                   ret
  54++D2EA
  55++D2EA
  56++D2EA              XX15EquXX15AddXX18:
  57++D2EA              LL94Z:
  58++D2EA 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++D2EC 16 00                ld      d,0                                                     ;
  60++D2EE 3A AA C0             ld      a,(UBnkZScaled)                                         ;
  61++D2F1 6F                   ld      l,a                                                     ;
  62++D2F2 3A AB C0             ld      a,(UBnkZScaledSign)                                     ;
  63++D2F5 47                   ld      b,a                                                     ;
  64++D2F6 3A A0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++D2F9 5F                   ld      e,a                                                     ;
  66++D2FA 3A A2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++D2FD 4F                   ld      c,a                                                     ;
  68++D2FE CD EF 92             call    ADDHLDESignBC                                           ;
  69++D301 47                   ld      b,a                                                     ;
  70++D302 7C                   ld      a,h                                                     ;
  71++D303 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++D304 32 AB C0             ld      (UBnkZScaledSign),a                                     ;
  73++D307 7D                   ld      a,l                                                     ;
  74++D308 32 AA C0             ld      (UBnkZScaled),a                                         ;           endif
  75++D30B              LL94X:
  76++D30B 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++D30D 16 00                ld      d,0                                                     ;
  78++D30F 3A A6 C0             ld      a,(UBnkXScaled)                                         ;
  79++D312 6F                   ld      l,a                                                     ;
  80++D313 3A A7 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++D316 47                   ld      b,a                                                     ;
  82++D317 3A 9A C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++D31A 5F                   ld      e,a                                                     ;
  84++D31B 3A 9C C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++D31E 4F                   ld      c,a                                                     ;
  86++D31F CD EF 92             call    ADDHLDESignBC                                           ;
  87++D322 47                   ld      b,a                                                     ;
  88++D323 7C                   ld      a,h                                                     ;
  89++D324 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++D325 32 A7 C0             ld      (UBnkXScaledSign),a                                     ;
  91++D328 7D                   ld      a,l                                                     ;
  92++D329 32 A6 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++D32C              LL94Y:
  94++D32C 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++D32E 16 00                ld      d,0                                                     ;
  96++D330 3A A8 C0             ld      a,(UBnkYScaled)                                         ;
  97++D333 6F                   ld      l,a                                                     ;
  98++D334 3A A9 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++D337 47                   ld      b,a                                                     ;
 100++D338 3A 9D C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++D33B 5F                   ld      e,a                                                     ;
 102++D33C 3A 9F C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++D33F 4F                   ld      c,a                                                     ;
 104++D340 CD EF 92             call    ADDHLDESignBC                                           ;
 105++D343 47                   ld      b,a                                                     ;
 106++D344 7C                   ld      a,h                                                     ;
 107++D345 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++D346 32 A9 C0             ld      (UBnkYScaledSign),a                                     ;
 109++D349 7D                   ld      a,l                                                     ;
 110++D34A 32 A8 C0             ld      (UBnkYScaled),a                                         ;
 111++D34D C9                   ret
 112++D34E
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 698+ D34E                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D34E              CopyXX12ToScaled:
   2++D34E              CopyResultToScaled:
   3++D34E                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D34E 3A AC C0    >                        ld       a,(XX12+0)
   3++D351 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++D354                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D354 3A AE C0    >                        ld       a,(XX12+2)
   4++D357 32 A8 C0    >                        ld       (UBnkYScaled),a
   5++D35A                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D35A 3A B0 C0    >                        ld       a,(XX12+4)
   5++D35D 32 AA C0    >                        ld       (UBnkZScaled),a
   6++D360 C9                   ret
   7++D361
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 699+ D361              ;--------------------------------------------------------------------------------------------------------
 700+ D361                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D361              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D361              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D361              ;;; S = XX12 XSign Xor XX15 XSign
   4++D361              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D361              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D361              ;;; R = T
   7++D361              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D361              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D361              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D361              ;;; Q = A * Q /256 usigned (zdot)
  11++D361              ;;; R = T
  12++D361              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D361
  14++D361
  15++D361
  16++D361
  17++D361
  18++D361              MacroAequDxEdiv256usgn:	MACRO
  19++D361 ~            						mul
  20++D361 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D361              						ENDM
  22++D361              DotProductXX12XX15:
  23++D361 3A AC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D364                      JumpIfAIsZero dotxskipzero
  24++D364 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D365 CA 82 D3    >                        jp	    z, dotxskipzero
  25++D368 5F                   ld          e,a
  26++D369 3A A6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D36C 57                   ld          d,a                     ; de = xx12 x signed
  28++D36D                      JumpIfAIsZero dotxskipzero
  28++D36D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D36E CA 82 D3    >                        jp	    z, dotxskipzero
  29++D371 ED 30        		mul
  30++D373 42                   ld          b,d                     ; b = result
  31++D374 3A AD C0             ld          a,(UBnkXX12xSign)
  32++D377 21 A7 C0             ld          hl,UBnkXScaledSign
  33++D37A AE                   xor         (hl)
  34++D37B E6 80                and         $80                     ; so sign bit only
  35++D37D FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D37F C3 86 D3             jp          dotmuly
  37++D382              dotxskipzero:
  38++D382 AF                   xor         a
  39++D383 47                   ld          b,a
  40++D384 FD 67                ld          iyh,a
  41++D386              dotmuly:
  42++D386              ; now we have b = XX12 x &d  norm x signed
  43++D386 3A AE C0             ld          a,(UBnkXX12yLo)
  44++D389                      JumpIfAIsZero dotyskipzero
  44++D389 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D38A CA A9 D3    >                        jp	    z, dotyskipzero
  45++D38D 5F                   ld          e,a
  46++D38E 3A A8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D391                      JumpIfAIsZero dotyskipzero
  47++D391 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D392 CA A9 D3    >                        jp	    z, dotyskipzero
  48++D395 57                   ld          d,a                     ; de = xx12 x signed
  49++D396 ED 30                mul
  50++D398 4A                   ld          c,d                     ; c = result
  51++D399 DD 69                ld          ixl,c
  52++D39B 3A AF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D39E 21 A9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D3A1 AE                   xor         (hl)                    ; XX15+3
  55++D3A2 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D3A4 DD 67                ld          ixh,a
  57++D3A6 C3 AD D3             jp          dotaddxy
  58++D3A9              dotyskipzero:
  59++D3A9 AF                   xor         a
  60++D3AA 4F                   ld          c,a
  61++D3AB DD 67                ld          ixh,a
  62++D3AD              dotaddxy:
  63++D3AD              ; Optimise later as this is 16 bit
  64++D3AD 26 00                ld          h,0                     ;
  65++D3AF 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D3B0 16 00                ld          d,0                     ;
  67++D3B2 59                   ld          e,c                     ; de = ylo + yscaled
  68++D3B3 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D3B5 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D3B6 CD EF 92             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D3B9 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D3BA 3A B0 C0             ld          a,(UBnkXX12zLo)         ;
  73++D3BD                      JumpIfAIsZero dotzskipzero
  73++D3BD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D3BE CA E3 D3    >                        jp	    z, dotzskipzero
  74++D3C1 5F                   ld          e,a                     ;
  75++D3C2 3A AA C0             ld          a,(UBnkZScaled)         ;
  76++D3C5                      JumpIfAIsZero dotzskipzero
  76++D3C5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D3C6 CA E3 D3    >                        jp	    z, dotzskipzero
  77++D3C9 57                   ld          d,a
  78++D3CA ED 30                mul
  79++D3CC E5                   push        hl                      ; save prev result
  80++D3CD 3A AB C0             ld          a,(UBnkZScaledSign)
  81++D3D0 21 B1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D3D3 AE                   xor         (hl)                    ; hi sign
  83++D3D4 E6 80                and         $80                     ; a = sign of multiply
  84++D3D6 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D3D7 E1                   pop         hl
  86++D3D8 5A                   ld          e,d
  87++D3D9 16 00                ld          d,0
  88++D3DB CD EF 92             call ADDHLDESignBC
  89++D3DE 32 F5 81             ld          (varS),a
  90++D3E1 7D                   ld          a,l
  91++D3E2 C9                   ret                                 ; returns with A = value, varS = sign
  92++D3E3              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D3E3 78                   ld          a,b
  94++D3E4 32 F5 81             ld          (varS),a
  95++D3E7 7D                   ld          a,l
  96++D3E8 C9                   ret
  97++D3E9              ;;;;       DotProductXX12XX15:
  98++D3E9              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D3E9              ;;;;       ld          e,a
 100++D3E9              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D3E9              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D3E9              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D3E9              ;;;;		mul
 104++D3E9              ;;;;       ld          b,d                     ; b as var T
 105++D3E9              ;;;;       ld          a,(UBnkXX12xSign)
 106++D3E9              ;;;;       ld          hl,UBnkXScaledSign
 107++D3E9              ;;;;       xor         (hl)
 108++D3E9              ;;;;       and         $80                     ; so sign bit only
 109++D3E9              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D3E9              ;;;; now we have b = XX12 x & norm x signed
 111++D3E9              ;;;; by here B = xlo & xscaled C = result sign
 112++D3E9              ;;;;       ld          a,(UBnkXX12yLo)
 113++D3E9              ;;;;       ld          e,a
 114++D3E9              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D3E9              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D3E9              ;;;;       mul
 117++D3E9              ;;;;       ld          a,d
 118++D3E9              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D3E9              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D3E9              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D3E9              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D3E9              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D3E9              ;;;;       xor         (hl)                    ; XX15+3
 124++D3E9              ;;;;       and         $80
 125++D3E9              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D3E9              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D3E9              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D3E9              ;;;;       ld          e,a                     ; use e as var Q
 129++D3E9              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D3E9              ;;;;       ld          d,a
 131++D3E9              ;;;;       mul
 132++D3E9              ;;;;       ld          a,d
 133++D3E9              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D3E9              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D3E9              ;;;;       ld          a,(UBnkZScaledSign)
 136++D3E9              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D3E9              ;;;;       xor         (hl)                    ; hi sign
 138++D3E9              ;;;;       and         $80
 139++D3E9              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D3E9              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D3E9
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 701+ D3E9              ;--------------------------------------------------------------------------------------------------------
 702+ D3E9              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 703+ D3E9              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 704+ D3E9              ;--------------------------------------------------------------------------------------------------------
 705+ D3E9                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D3E9              ScaleObjectDistance:
   2++D3E9              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D3E9 3A A5 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D3EC 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D3ED              LL90:                                       ; scaling object distance
   6++D3ED 3A A1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D3F0 47                   ld      b,a                         ; z_hi (yReg)
   8++D3F1                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D3F1 A7          >                        and     a
   8++D3F2 C8          >                        ret     z
   9++D3F3              LL90Loop:
  10++D3F3              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D3F3 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D3F4                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D3F4 2A 9D C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D3F7 CB 3C       >                    srl   h
  12++D3F9 CB 1D       >                    rr    l
  12++D3FB 22 9D C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D3FE                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D3FE 2A 9A C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D401 CB 3C       >                    srl   h
  13++D403 CB 1D       >                    rr    l
  13++D405 22 9A C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D408                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D408 2A A0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D40B CB 3C       >                    srl   h
  14++D40D CB 1D       >                    rr    l
  14++D40F 22 A0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D412 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D413                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D413 A7          >                        and     a
  16++D414 C2 F3 D3    >                        jp	    nz,LL90Loop
  17++D417 C9                   ret
  18++D418
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 706+ D418              ;--------------------------------------------------------------------------------------------------------
 707+ D418
 708+ D418              ; Backface cull
 709+ D418              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 710+ D418              ; normal vector = cross product of ship ccordinates
 711+ D418              ;
 712+ D418
 713+ D418                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D418 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D419 47                                   ld      b,a                                                    ;;;
   3++D41A E6 80                                and     SignOnly8Bit
   4++D41C 32 A7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D41F 78                                   ld      a,b
   6++D420 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D422 47                                   ld      b,a
   8++D423 E6 80                                and     SignOnly8Bit
   9++D425 32 A9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D428 78                                   ld      a,b
  11++D429 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D42B E6 80                                and     SignOnly8Bit
  13++D42D 32 AB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D430 23                                   inc     hl                          ; move to X ccord
  15++D431 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D432 32 A6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D435 23                                   inc     hl                                                                                                                 ;;;
  18++D436 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D437 32 A8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D43A 23                                   inc     hl                                                                                                                 ;;;
  21++D43B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D43C 32 AA C0                             ld      (UBnkZScaled),a
  23++D43F C9                                   ret
  24++D440
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 714+ D440                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D440 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D441 47                                   ld      b,a                         ; save sign bits to b
   3++D442 E6 80                                and     SignOnly8Bit
   4++D444 32 AD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D447 78                                   ld      a,b
   6++D448 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D44A 47                                   ld      b,a
   8++D44B E6 80                                and     SignOnly8Bit
   9++D44D 32 AF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D450 78                                   ld      a,b
  11++D451 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D453 E6 80                                and     SignOnly8Bit
  13++D455 32 B1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D458 23                                   inc     hl                          ; move to X ccord
  15++D459 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D45A 32 AC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D45D 23                                   inc     hl                                                                                                                 ;;;
  18++D45E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D45F 32 AE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D462 23                                   inc     hl                                                                                                                 ;;;
  21++D463 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D464 32 B0 C0                             ld      (UBnkXX12zLo),a
  23++D467 C9                                   ret
  24++D468
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 715+ D468              ;--------------------------------------------------------------
 716+ D468              ; Original loginc in EE29 (LL9 4 of 12)
 717+ D468              ; Enters with XX4 = z distnace scaled to 1 .. 31
 718+ D468              ; get number of faces * 4      FaceCntX4
 719+ D468              ; return if no faces
 720+ D468              ; get Face Normal scale factor FaceScale (XX17)
 721+ D468              ; get ship pos z hi     (XX18)
 722+ D468              ; While Z hi <> 0
 723+ D468              ;    FaceScale = FaceScale + 1           (XX17)
 724+ D468              ;    Ship pos y = ship pos y / 2         (XX18)
 725+ D468              ;    ship pos x = ship pos x / 2         (XX18)
 726+ D468              ;    ship pos z = ship pos z / 2         (XX18)
 727+ D468              ; Loop
 728+ D468              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 729+ D468              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 730+ D468              ; Copy XX12 into XX18
 731+ D468              ; For each face
 732+ D468              ;     Get Face sign and visibility distance byte
 733+ D468              ;     if normal visibility range  < XX4
 734+ D468              ;        Get Face data into XX12
 735+ D468              ;        if FaceScale (XX17) >= 4
 736+ D468              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 737+ D468              ;        else
 738+ D468              ;           Copy FaceScale scaled to X  (XX17)
 739+ D468              ;LabelOverflowLoop:
 740+ D468              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 741+ D468              ;           While X >= 0
 742+ D468              ;              X--                                                                                                  ::LL93
 743+ D468              ;              if  x >= 0
 744+ D468              ;                  XX15x = XX15x / 2
 745+ D468              ;                  XX15y = XX15y / 2
 746+ D468              ;                  XX15y = XX15y / 2
 747+ D468              ;           loop
 748+ D468              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 749+ D468              ;           if A > 256 (i.e. was overflow)
 750+ D468              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 751+ D468              ;               X = 1
 752+ D468              ;               Goto LabelOverflowLoop
 753+ D468              ;           else
 754+ D468              ;              Scaled (XX15) Z = AddZ
 755+ D468              ;           endif
 756+ D468              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 757+ D468              ;           if A > 256 (i.e. was overflow)
 758+ D468              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 759+ D468              ;               X = 1
 760+ D468              ;               Goto LabelOverflowLoop
 761+ D468              ;           else
 762+ D468              ;              Scaled (XX15) X = AddX
 763+ D468              ;           endif
 764+ D468              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 765+ D468              ;           if A > 256 (i.e. was overflow)
 766+ D468              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 767+ D468              ;               X = 1
 768+ D468              ;               Goto LabelOverflowLoop
 769+ D468              ;           else
 770+ D468              ;              Scaled (XX15) Y = AddY
 771+ D468              ;           endif
 772+ D468              ;        endif
 773+ D468              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 774+ D468              ;        if dot product < 0
 775+ D468              ;           set face visible
 776+ D468              ;        else
 777+ D468              ;           set face invisible
 778+ D468              ;        end if
 779+ D468              ;     else
 780+ D468              ;       Set FaceVisibility to true
 781+ D468              ;     end if
 782+ D468              ; Next Face
 783+ D468
 784+ D468              ;line of sight vector = [x y z] + face normal vector
 785+ D468
 786+ D468              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 787+ D468              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 788+ D468              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 789+ D468              ;
 790+ D468              ;--------------------------------------------------------------
 791+ D468              ; line of sight (eye outwards dot face normal vector < 0
 792+ D468              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 793+ D468              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 794+ D468              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 795+ D468
 796+ D468                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D468              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D468                  DEFINE CHECKDOTSHIPDATA  1
   3++D468              ;    DEFINE DEBUGFORCEFACEDRAW 1
   4++D468 00           CurrentNormIdx  DB 0
   5++D469              ; SomeFacesVisible:
   6++D469              ; EE29:
   7++D469
   8++D469              ;   Backface cull logic  line of sight vector . face normal vector
   9++D469              ;       line of sight vector . face normal vector
  10++D469              ;       => line of sight vector = [x y z] + face normal vector
  11++D469              ;       Where [x y z] =
  12++D469              ;                                               [ [x y z] . sidev ]
  13++D469              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D469              ;                                               [ [x y z] . nosev ]
  15++D469              ;
  16++D469              ;   so project the [x y z] vector into the face's normal space
  17++D469              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D469              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D469              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D469              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D469              ;
  22++D469              ;                         [ [x y z] . sidev + normal_x ]
  23++D469              ;                       = [ [x y z] . roofv + normal_y ]
  24++D469              ;                         [ [x y z] . nosev + normal_z ]
  25++D469              ;
  26++D469              ; so
  27++D469              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D469              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D469              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D469              ;
  31++D469              ; where face is visible if visibility < 0
  32++D469              ;
  33++D469              ;   so we set XX15 to [x y z] . sidev
  34++D469              ;                     [x y z] . roofv
  35++D469              ;                     [x y z] . nosev
  36++D469              ;
  37++D469
  38++D469
  39++D469
  40++D469 3A A1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D46C                                      JumpIfAIsZero .ScaleDone            ;
  41++D46C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D46D CA 99 D4    >                        jp	    z, .ScaleDone
  42++D470 2A 9A C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D473 ED 5B 9D C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D477 ED 4B A0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D47B FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D47D                                      ShiftHLRight1                       ; divide cam position by 2
  46++D47D CB 3C       >			   srl h
  46++D47F CB 1D       >			   rr  l
  47++D481                                      ShiftDERight1                       ;
  47++D481 CB 3A       >			   srl d
  47++D483 CB 1B       >			   rr  e
  48++D485                                      ShiftBCRight1                       ;
  48++D485 CB 38       >			   srl b
  48++D487 CB 19       >			   rr  c
  49++D489 78                                   ld      a,b                         ; loop if not scaled down
  50++D48A                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D48A A7          >                        and     a
  50++D48B C2 7B D4    >                        jp	    nz,.ScaleNormalLoop
  51++D48E 22 9A C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D491 ED 53 9D C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D495 ED 43 A0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D499 FD 7D        .ScaleDone:             ld      a,iyl
  55++D49B 32 FA 81                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D49E C9                                   ret
  57++D49F
  58++D49F 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++D4A2 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D4A4 20 31                                jr      nz,.ShipNoDraw               ; .
  61++D4A6 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++D4A9 7C                                   ld      a,h
  63++D4AA                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D4AA FE C0       >                        cp     ShipMaxDistance
  63++D4AC D2 D7 D4    >                        jp		nc,.ShipNoDraw
  64++D4AF ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++D4B3 CD B6 99                             call    compare16HLDE
  66++D4B6 38 1F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D4B8 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++D4BC CD B6 99                             call    compare16HLDE
  69++D4BF 38 16                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D4C1                                      IFDEF   CHECKDOTSHIPDATA
  71++D4C1 3A A0 C3     .CheckDotV2:                ld      a,(DotAddr)
  72++D4C4                                          JumpIfAGTENusng h, .DrawFull
  72++D4C4 BC          >                        cp     h
  72++D4C5 D2 CB D4    >                        jp		nc,.DrawFull
  73++D4C8 C3 DD D4                                 jp      .ShipIsADot
  74++D4CB 3A 54 C0     .DrawFull:                  ld      a,(UBnkaiatkecm)            ; its visible but a dot
  75++D4CE F6 40                                    or      ShipIsVisible               ; Visible and not a dot
  76++D4D0 E6 F7                                    and     ShipIsNotDot                ;
  77++D4D2 32 54 C0                                 ld      (UBnkaiatkecm),a            ;
  78++D4D5                                          ClearCarryFlag
  78++D4D5 B7          >                        or a
  79++D4D6 C9                                       ret
  80++D4D7                                      ELSE
  81++D4D7 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  82++D4D7 ~                                        ShiftHLRight1                       ; .
  83++D4D7 ~                                        ShiftHLRight1                       ; .
  84++D4D7 ~                                        ld      a,h
  85++D4D7 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  86++D4D7 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  87++D4D7 ~                                        ; Check visbility distance
  88++D4D7 ~            .SetXX4Dist:                ;break
  89++D4D7 ~                                        ld      a,l
  90++D4D7 ~                                        rra                                 ; l may have had bit 0 of h carried in
  91++D4D7 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  92++D4D7 ~                                        srl     a
  93++D4D7 ~                                        srl     a
  94++D4D7 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  95++D4D7 ~                                        ld      a,(UBnkaiatkecm)            ; its visible but a dot
  96++D4D7 ~                                        or      ShipIsVisible               ; Visible and not a dot
  97++D4D7 ~                                        and     ShipIsNotDot                ;
  98++D4D7 ~                                        ld      (UBnkaiatkecm),a            ;
  99++D4D7 ~                                        ClearCarryFlag
 100++D4D7 ~                                        ret
 101++D4D7                                      ENDIF
 102++D4D7              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 102++D4D7 21 54 C0    >                        ld      hl,UBnkaiatkecm
 102++D4DA CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 103++D4DC C9                                   ret
 104++D4DD 3A 54 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 105++D4E0                                      IFDEF DEBUGDRAWDISTANCE
 106++D4E0 ~                                        or      ShipIsVisible   ;
 107++D4E0                                      ELSE
 108++D4E0 F6 48                                    or      ShipIsVisible | ShipIsDot   ;
 109++D4E2                                      ENDIF
 110++D4E2 32 54 C0                             ld      (UBnkaiatkecm),a            ;
 111++D4E5 C9                                   ret
 112++D4E6
 113++D4E6
 114++D4E6              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 115++D4E6              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 115++D4E6 3A 9F C3    >                        ld   a,(FaceCtX4Addr)
 115++D4E9 A7          >                        and a
 115++D4EA C8          >                        ret    z
 116++D4EB                                     ; break
 117++D4EB CD C6 CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 118++D4EE CD 01 7A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 119++D4F1 CD 5A D2                             call    LoadCraftToCamera           ; XX18 = camera
 120++D4F4                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 121++D4F4 3A A5 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 122++D4F7 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 123++D4F9              ; By this point XX18 = scaled draw cam and iyl = scale factor
 124++D4F9 CD 69 D4                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 125++D4FC CD 7E D2                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 126++D4FF CD 94 79     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 127++D502 CD EB D1                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 128++D505 21 65 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 129++D508 22 F9 80                             ld      (varV),hl
 130++D50B 3A 9F C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 131++D50E CB 3F                                srl     a                                              ;
 132++D510 CB 3F                                srl     a                                              ;
 133++D512 47                                   ld      b,a                                            ;
 134++D513 AF                                   xor     a
 135++D514 32 68 D4                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 136++D517 E5           .ProcessNormalsLoop:    push    hl
 137++D518 C5                                   push    bc
 138++D519 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 139++D51A E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 140++D51C E5                                   push    hl
 141++D51D 21 52 C0                             ld      hl,UBnkDrawAllFaces
 142++D520 BE                                   cp      (hl)
 143++D521 E1                                   pop     hl
 144++D522                                      IFDEF DEBUGFORCEFACEDRAW
 145++D522 ~                                        jp      .FaceVisible
 146++D522                                      ELSE
 147++D522 DA 67 D6                                 jp      c,.FaceVisible              ; then we always draw
 148++D525                                      ENDIF
 149++D525              ; This bit needs to be added to force face visible
 150++D525 CD 40 D4     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 151++D528 3A FA 81                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 152++D52B 47                                   ld      b,a
 153++D52C                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 153++D52C FE 04       >                        cp      4
 153++D52E DA 69 D5    >                        jp		c, .ScaleNormByXX17
 154++D531 CD 35 D2     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 155++D534 C3 F8 D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 156++D537 3A 9A C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 157++D53A CB 3F                                srl     a                           ; which is held in XX18
 158++D53C 32 9A C0                             ld      (UBnkDrawCam0xLo),a         ; .
 159++D53F 3A A0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 160++D542 CB 3F                                srl     a                           ; .
 161++D544 32 A0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 162++D547 3A 9D C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 163++D54A CB 3F                                srl     a                           ; .
 164++D54C 32 9D C0                             ld      (UBnkDrawCam0yLo),a        ; .
 165++D54F 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 166++D551                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 166++D551 3A A6 C0    >                    ld      a,(UBnkXScaled)
 166++D554 CB 3F       >                    srl     a
 166++D556 32 A6 C0    >                    ld      (UBnkXScaled),a
 167++D559                                      ShiftMem8Right1 UBnkYScaled         ;
 167++D559 3A A8 C0    >                    ld      a,(UBnkYScaled)
 167++D55C CB 3F       >                    srl     a
 167++D55E 32 A8 C0    >                    ld      (UBnkYScaled),a
 168++D561                                      ShiftMem8Right1 UBnkZScaled         ;
 168++D561 3A AA C0    >                    ld      a,(UBnkZScaled)
 168++D564 CB 3F       >                    srl     a
 168++D566 32 AA C0    >                    ld      (UBnkZScaled),a
 169++D569              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 170++D569              .ScaleNormByXX17:       ;ld      b,a
 171++D569 CD 10 D2                             call    CopyXX12toXX15
 172++D56C 05           .LL93                   dec     b
 173++D56D FA 8C D5                             jp      m, .ScaledNorm
 174++D570              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 174++D570 3A A6 C0    >                    ld      a,(UBnkXScaled)
 174++D573 CB 3F       >                    srl     a
 174++D575 32 A6 C0    >                    ld      (UBnkXScaled),a
 175++D578                                      ShiftMem8Right1 UBnkYScaled        ;
 175++D578 3A A8 C0    >                    ld      a,(UBnkYScaled)
 175++D57B CB 3F       >                    srl     a
 175++D57D 32 A8 C0    >                    ld      (UBnkYScaled),a
 176++D580                                      ShiftMem8Right1 UBnkZScaled        ;
 176++D580 3A AA C0    >                    ld      a,(UBnkZScaled)
 176++D583 CB 3F       >                    srl     a
 176++D585 32 AA C0    >                    ld      (UBnkZScaled),a
 177++D588 05                                   dec     b                          ;
 178++D589 F2 70 D5                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 179++D58C              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 180++D58C              ; Add normal to XX15
 181++D58C              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 182++D58C              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 183++D58C              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 184++D58C              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 185++D58C              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 185++D58C 3A AA C0    >                        ld       a,(UBnkZScaled)
 185++D58F 32 F4 81    >                        ld       (varR),a
 186++D592                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 186++D592 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
 186++D595 32 F5 81    >                        ld       (varS),a
 187++D598                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 187++D598 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 187++D59B 32 F3 81    >                        ld       (varQ),a
 188++D59E 3A A2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 189++D5A1 CD 86 9C                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 190++D5A4 DA 37 D5                             jp      c,.Ovflw
 191++D5A7 32 AA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 192++D5AA                                      ldCopyByte  varS, UBnkZScaledSign   ;
 192++D5AA 3A F5 81    >                        ld       a,(varS)
 192++D5AD 32 AB C0    >                        ld       (UBnkZScaledSign),a
 193++D5B0                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 193++D5B0 3A A6 C0    >                        ld       a,(UBnkXScaled)
 193++D5B3 32 F4 81    >                        ld       (varR),a
 194++D5B6                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 194++D5B6 3A AD C0    >                        ld       a,(UBnkXX12xSign)
 194++D5B9 32 F5 81    >                        ld       (varS),a
 195++D5BC                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 195++D5BC 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
 195++D5BF 32 F3 81    >                        ld       (varQ),a
 196++D5C2 3A 9C C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 197++D5C5 CD 86 9C                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 198++D5C8 DA 37 D5                             jp      c,.Ovflw
 199++D5CB 32 A6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 200++D5CE                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 200++D5CE 3A F5 81    >                        ld       a,(varS)
 200++D5D1 32 A7 C0    >                        ld       (UBnkXScaledSign),a
 201++D5D4                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 201++D5D4 3A A8 C0    >                        ld       a,(UBnkYScaled)
 201++D5D7 32 F4 81    >                        ld       (varR),a
 202++D5DA                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 202++D5DA 3A AF C0    >                        ld       a,(UBnkXX12ySign)
 202++D5DD 32 F5 81    >                        ld       (varS),a
 203++D5E0                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 203++D5E0 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
 203++D5E3 32 F3 81    >                        ld       (varQ),a
 204++D5E6 3A 9F C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 205++D5E9 CD 86 9C                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 206++D5EC DA 37 D5                             jp      c,.Ovflw                    ; .
 207++D5EF 32 A8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 208++D5F2                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 208++D5F2 3A F5 81    >                        ld       a,(varS)
 208++D5F5 32 A9 C0    >                        ld       (UBnkYScaledSign),a
 209++D5F8              ; calculate dot product LL89
 210++D5F8              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 210++D5F8 3A AC C0    >                        ld       a,(UBnkXX12xLo)
 210++D5FB 32 F3 81    >                        ld       (varQ),a
 211++D5FE 3A A6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 212++D601 CD ED 9B                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 213++D604 32 0F 82                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 214++D607 3A AD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 215++D60A 21 A7 C0                             ld      hl,UBnkXScaledSign          ; .
 216++D60D AE                                   xor     (hl)                        ; .
 217++D60E 32 F5 81                             ld      (varS),a                    ; .
 218++D611                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 218++D611 3A AE C0    >                        ld       a,(UBnkXX12yLo)
 218++D614 32 F3 81    >                        ld       (varQ),a
 219++D617 3A A8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 220++D61A CD ED 9B                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 221++D61D 32 F3 81                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 222++D620                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 222++D620 3A 0F 82    >                        ld       a,(varT)
 222++D623 32 F4 81    >                        ld       (varR),a
 223++D626 3A AF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 224++D629 21 A9 C0                             ld      hl, UBnkYScaledSign         ; .
 225++D62C AE                                   xor     (hl)                        ; .
 226++D62D CD 86 9C                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 227++D630 32 0F 82                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 228++D633                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 228++D633 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
 228++D636 32 F3 81    >                        ld       (varQ),a
 229++D639 3A AA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 230++D63C CD ED 9B                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 231++D63F 32 F3 81                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 232++D642                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 232++D642 3A 0F 82    >                        ld       a,(varT)
 232++D645 32 F4 81    >                        ld       (varR),a
 233++D648 3A AB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 234++D64B 21 B1 C0                             ld      hl, UBnkXX12zSign           ; .
 235++D64E AE                                   xor     (hl)                        ; .
 236++D64F CD 86 9C                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 237++D652 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 238++D654 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 239++D656 3A F5 81                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 240++D659 ED 27 80                             test    $80                         ; this should test S not A
 241++D65C 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 242++D65E 3A 68 D4     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 243++D661 CD CC D0                             call        SetFaceAHidden                                      ;           set face invisible
 244++D664 C3 6D D6                             jp          .ProcessNormalLoopEnd                                ;        end if
 245++D667 3A 68 D4     .FaceVisible:            ld          a,(CurrentNormIdx)
 246++D66A CD C3 D0                             call        SetFaceAVisible
 247++D66D 21 68 D4     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 248++D670 34                                   inc         (hl)                    ; move index pointer up by one
 249++D671 C1                                   pop         bc
 250++D672 E1                                   pop         hl                      ; get normal data pointer back
 251++D673 3E 04                                ld          a,4
 252++D675 ED 31                                add         hl,a                    ; move to next normal entry
 253++D677 22 F9 80                             ld          (varV),hl               ; save as we need it again
 254++D67A 05                                   dec         b
 255++D67B C2 17 D5                             jp          nz,.ProcessNormalsLoop
 256++D67E C9                                   ret
 257++D67F
# file closed: ././ModelRender/BackfaceCull.asm
 797+ D67F
 798+ D67F
 799+ D67F              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 800+ D67F
 801+ D67F              TransposeXX12NodeToXX15:
 802+ D67F                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 802+ D67F 3A 22 C0    >                        ld       a,(UBnKxsgn)
 802+ D682 32 A8 C0    >                        ld       (UbnkXPointSign),a
 803+ D685 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 804+ D689 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 805+ D68A FA A0 D6             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 806+ D68D              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 807+ D68D              NodeXPositiveX:
 808+ D68D 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 809+ D68E 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 810+ D690 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 811+ D693 26 00                ld          h,0                                 ; but we don;t want the sign
 812+ D695 09                   add         hl,bc                               ; its a 16 bit add
 813+ D696 22 A6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 814+ D699 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 815+ D69A 32 A8 C0             ld          (UbnkXPointSign),a
 816+ D69D C3 BC D6             jp          FinishedThisNodeX
 817+ D6A0              ; If we get here then _sign and vertv_ have different signs so do subtract
 818+ D6A0              NodeNegativeX:
 819+ D6A0              LL52X:                                                 ;
 820+ D6A0 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 821+ D6A3 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 822+ D6A7 06 00                ld          b,0                                 ; XX12 lo byte only
 823+ D6A9 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 824+ D6AB F2 B9 D6             jp          p,SetAndMopX                       ; if result is positive skip to write back
 825+ D6AE              NodeXNegSignChangeX:
 826+ D6AE              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 827+ D6AE CD CC 99             call        negate16hl                          ; Convert back to positive and flip sign
 828+ D6B1 3A A8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 829+ D6B4 EE 80                xor         $80                                 ; Flip bit 7
 830+ D6B6 32 A8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 831+ D6B9              SetAndMopX:
 832+ D6B9 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 833+ D6BC              FinishedThisNodeX:
 834+ D6BC
 835+ D6BC              LL53:
 836+ D6BC
 837+ D6BC                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 837+ D6BC 3A 25 C0    >                        ld       a,(UBnKysgn)
 837+ D6BF 32 AB C0    >                        ld       (UbnkYPointSign),a
 838+ D6C2 ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 839+ D6C6 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 840+ D6C7 FA DD D6             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 841+ D6CA              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 842+ D6CA              NodeXPositiveY:
 843+ D6CA 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 844+ D6CB 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 845+ D6CD 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 846+ D6D0 26 00                ld          h,0                                 ; but we don;t want the sign
 847+ D6D2 09                   add         hl,bc                               ; its a 16 bit add
 848+ D6D3 22 A9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 849+ D6D6 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 850+ D6D7 32 A8 C0             ld          (UbnkXPointSign),a
 851+ D6DA C3 F9 D6             jp          FinishedThisNodeY
 852+ D6DD              ; If we get here then _sign and vertv_ have different signs so do subtract
 853+ D6DD              NodeNegativeY:
 854+ D6DD              LL52Y:                                                 ;
 855+ D6DD 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 856+ D6E0 ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 857+ D6E4 06 00                ld          b,0                                 ; XX12 lo byte only
 858+ D6E6 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 859+ D6E8 F2 F6 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
 860+ D6EB              NodeXNegSignChangeY:
 861+ D6EB              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 862+ D6EB CD CC 99             call        negate16hl                          ; Convert back to positive and flip sign
 863+ D6EE 3A AB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 864+ D6F1 EE 80                xor         $80                                 ; Flip bit 7
 865+ D6F3 32 AB C0             ld          (UbnkYPointSign),a                 ; XX15+2
 866+ D6F6              SetAndMopY:
 867+ D6F6 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 868+ D6F9              FinishedThisNodeY:
 869+ D6F9
 870+ D6F9
 871+ D6F9              TransposeZ:
 872+ D6F9              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 873+ D6F9 3A B1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 874+ D6FC                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 874+ D6FC CB 7F       >                        bit 	7,a
 874+ D6FE C2 12 D7    >                        jp      nz,NegativeNodeZ
 875+ D701 3A B0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 876+ D704 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 877+ D707 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 878+ D709 7D                   ld          a,l
 879+ D70A 32 0F 82             ld          (varT),a                            ;                                                                           ;;;
 880+ D70D 7C                   ld          a,h
 881+ D70E 32 F2 81             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 882+ D711 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 883+ D712              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 884+ D712              NegativeNodeZ:
 885+ D712              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 886+ D712 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 887+ D715 ED 4B B0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 888+ D719 06 00                ld          b,0                                 ; upper byte will be garbage
 889+ D71B                      ClearCarryFlag
 889+ D71B B7          >                        or a
 890+ D71C ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 891+ D71E 7D                   ld          a,l
 892+ D71F 32 0F 82             ld          (varT),a                            ; t = result low
 893+ D722 7C                   ld          a,h
 894+ D723 32 F2 81             ld          (varU),a                            ; u = result high
 895+ D726 E2 33 D7             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 896+ D729              LL56Overflow:
 897+ D729 FE 00                cp          0                                   ; is varU 0?
 898+ D72B 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 899+ D72D 3A 0F 82             ld          a,(varT)                            ; T \ restore z lo
 900+ D730                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 900+ D730 FE 04       >                        cp    4
 900+ D732 D0          >                        ret	 nc
 901+ D733              MakeNodeClose:
 902+ D733              LL140:                                                  ; else make node close
 903+ D733 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 904+ D734 32 F2 81             ld          (varU),a                            ; U
 905+ D737 3E 04                ld          a,4                                 ; lo
 906+ D739 32 0F 82             ld          (varT),a                            ; T
 907+ D73C C9                   ret
 908+ D73D              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 909+ D73D              ProcessVisibleNode:
 910+ D73D              RotateNode:                                                                                                                         ;;;
 911+ D73D CD BA D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 912+ D740              LL52LL53LL54LL55
 913+ D740              TransposeNode:
 914+ D740 CD 7F D6             call        TransposeXX12NodeToXX15
 915+ D743
 916+ D743              ; ......................................................                                                         ;;;
 917+ D743              NodeAdditionsDone:
 918+ D743              Scale16BitTo8Bit:
 919+ D743              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 920+ D743 3A F2 81             ld          a,(varU)                            ; U \ z hi
 921+ D746 21 A7 C0             ld          hl,UbnkXPointHi
 922+ D749 B6                   or          (hl)                                ; XX15+1    \ x hi
 923+ D74A 21 AA C0             ld          hl,UbnkYPointHi
 924+ D74D B6                   or          (hl)                                ; XX15+4    \ y hi
 925+ D74E              AreXYZHiAllZero:
 926+ D74E 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 927+ D750              DivideXYZBy2:
 928+ D750                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 928+ D750 2A A6 C0    >                    ld    hl,(UbnkXPoint)
 928+ D753 CB 3C       >                    srl   h
 928+ D755 CB 1D       >                    rr    l
 928+ D757 22 A6 C0    >                    ld    (UbnkXPoint),hl
 929+ D75A                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 929+ D75A 2A A9 C0    >                    ld    hl,(UbnkYPoint)
 929+ D75D CB 3C       >                    srl   h
 929+ D75F CB 1D       >                    rr    l
 929+ D761 22 A9 C0    >                    ld    (UbnkYPoint),hl
 930+ D764 3A F2 81             ld          a,(varU)                            ; U \ z hi
 931+ D767 67                   ld          h,a
 932+ D768 3A 0F 82             ld          a,(varT)                            ; T \ z lo
 933+ D76B 6F                   ld          l,a
 934+ D76C                      ShiftHLRight1
 934+ D76C CB 3C       >			   srl h
 934+ D76E CB 1D       >			   rr  l
 935+ D770 7C                   ld          a,h
 936+ D771 32 F2 81             ld          (varU),a
 937+ D774 7D                   ld          a,l
 938+ D775 32 0F 82             ld          (varT),a                            ; T \ z lo
 939+ D778 C3 43 D7             jp          Scale16BitTo8Bit                    ; loop U
 940+ D77B              NodeScalingDone:
 941+ D77B              LL60:                                                   ; hi U rolled to 0, exited loop above.
 942+ D77B              ProjectNodeToScreen:
 943+ D77B                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 943+ D77B 3A 0F 82    >                        ld       a,(varT)
 943+ D77E 32 F3 81    >                        ld       (varQ),a
 944+ D781 3A A6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 945+ D784 21 F3 81             ld          hl,varQ
 946+ D787 BE                   cp          (hl)                                ; Q
 947+ D788                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 947+ D788 DA 91 D7    >                        jp		c,DoSmallAngle
 948+ D78B CD FD 9C             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 949+ D78E C3 99 D7             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 950+ D791              DoSmallAngle:                                           ; small x angle
 951+ D791              LL69:
 952+ D791              ; TODO check if we need to retain BC as this trashes it
 953+ D791              ;Input: BC = Dividend, DE = Divisor, HL = 0
 954+ D791              ;Output: BC = Quotient, HL = Remainder
 955+ D791 47                   ld      b,a
 956+ D792 CD 4B 98             call    DIV16UNDOC
 957+ D795 79                   ld      a,c
 958+ D796 32 F4 81             ld      (varR),a
 959+ D799               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 960+ D799              SkipSmallAngle:
 961+ D799              ScaleX:
 962+ D799              LL65:                                                   ; both continue for scaling based on z
 963+ D799 3A A8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 964+ D79C                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 964+ D79C CB 7F       >                        bit 	7,a
 964+ D79E C2 B1 D7    >                        jp      nz,NegativeXPoint
 965+ D7A1              ; ......................................................
 966+ D7A1              PositiveXPoint:
 967+ D7A1 3A F4 81             ld          a,(varR)
 968+ D7A4 6F                   ld          l,a
 969+ D7A5 3A F2 81             ld          a,(varU)
 970+ D7A8 67                   ld          h,a
 971+ D7A9 3E 80                ld          a,ScreenCenterX
 972+ D7AB ED 31                add         hl,a
 973+ D7AD EB                   ex          de,hl
 974+ D7AE C3 C1 D7             jp          StoreXPoint
 975+ D7B1              NegativeXPoint:
 976+ D7B1              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 977+ D7B1 3A F4 81             ld          a,(varR)
 978+ D7B4 6F                   ld          l,a
 979+ D7B5 3A F2 81             ld          a,(varU)
 980+ D7B8 67                   ld          h,a
 981+ D7B9 0E 80                ld          c,ScreenCenterX
 982+ D7BB 06 00                ld          b,0
 983+ D7BD                      ClearCarryFlag
 983+ D7BD B7          >                        or a
 984+ D7BE ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 985+ D7C0 EB                   ex          de,hl
 986+ D7C1              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 987+ D7C1 FD 73 00             ld          (iy+0),e                            ; Update X Point
 988+ D7C4 FD 72 01             ld          (iy+1),d                            ; Update X Point
 989+ D7C7 FD 23                inc         iy
 990+ D7C9 FD 23                inc         iy
 991+ D7CB              ; ......................................................
 992+ D7CB              LL66:
 993+ D7CB              ProcessYPoint:
 994+ D7CB AF                   xor         a                                   ; y hi = 0
 995+ D7CC 32 F2 81             ld          (varU),a                            ; U
 996+ D7CF                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
 996+ D7CF 3A 0F 82    >                        ld       a,(varT)
 996+ D7D2 32 F3 81    >                        ld       (varQ),a
 997+ D7D5 3A A9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
 998+ D7D8 21 F3 81             ld          hl,varQ
 999+ D7DB BE                   cp          (hl)                                ; Q
1000+ D7DC                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1000+ D7DC DA E5 D7    >                        jp		c,SmallYHop
1001+ D7DF              SmallYPoint:
1002+ D7DF CD FD 9C             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1003+ D7E2 C3 E8 D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1004+ D7E5              SmallYHop:
1005+ D7E5              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1006+ D7E5 CD DA 9C             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1007+ D7E8              SkipYScale:
1008+ D7E8              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1009+ D7E8 3A AB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1010+ D7EB CB 7F                bit         7,a
1011+ D7ED C2 00 D8             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1012+ D7F0              PositiveYPoint:
1013+ D7F0 3A F4 81             ld          a,(varR)
1014+ D7F3 6F                   ld          l,a
1015+ D7F4 3A F2 81             ld          a,(varU)
1016+ D7F7 67                   ld          h,a
1017+ D7F8 3E 60                ld          a,ScreenHeightHalf
1018+ D7FA ED 31                add         hl,a
1019+ D7FC EB                   ex          de,hl
1020+ D7FD C3 10 D8             jp          LL50
1021+ D800              NegativeYPoint:
1022+ D800              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1023+ D800 3A F4 81             ld          a,(varR)
1024+ D803 6F                   ld          l,a
1025+ D804 3A F2 81             ld          a,(varU)
1026+ D807 67                   ld          h,a
1027+ D808 0E 60                ld          c,ScreenHeightHalf
1028+ D80A 06 00                ld          b,0
1029+ D80C                      ClearCarryFlag
1029+ D80C B7          >                        or a
1030+ D80D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1031+ D80F EB                   ex          de,hl
1032+ D810              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1033+ D810 FD 73 00             ld          (iy+0),e                            ; Update X Point
1034+ D813 FD 72 01             ld          (iy+1),d                            ; Update X Point
1035+ D816 FD 23                inc         iy
1036+ D818 FD 23                inc         iy
1037+ D81A C9                   ret
1038+ D81B              ;--------------------------------------------------------------------------------------------------------
1039+ D81B              ;;;     Byte 0 = X magnitide with origin at middle of ship
1040+ D81B              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1041+ D81B              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1042+ D81B              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1043+ D81B              CopyNodeToXX15:
1044+ D81B                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1044+ D81B 7E          >                        ld       a,(hl)
1044+ D81C 32 A6 C0    >                        ld       (UBnkXScaled),a
1045+ D81F 23                   inc         hl
1046+ D820                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1046+ D820 7E          >                        ld       a,(hl)
1046+ D821 32 A8 C0    >                        ld       (UBnkYScaled),a
1047+ D824 23                   inc         hl
1048+ D825                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1048+ D825 7E          >                        ld       a,(hl)
1048+ D826 32 AA C0    >                        ld       (UBnkZScaled),a
1049+ D829 23                   inc         hl
1050+ D82A              PopulateXX15SignBits:
1051+ D82A              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1052+ D82A 7E                   ld          a,(hl)
1053+ D82B 4F                   ld          c,a                                 ; copy sign and visibility to c
1054+ D82C 47                   ld          b,a
1055+ D82D E6 80                and         $80                                 ; keep high 3 bits
1056+ D82F 32 A7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1057+ D832 78                   ld          a,b
1058+ D833 E6 40                and         $40
1059+ D835 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1060+ D837 32 A9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1061+ D83A 78                   ld          a,b
1062+ D83B E6 20                and         $20
1063+ D83D CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1064+ D83F CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1065+ D841 32 AB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1066+ D844 79                   ld          a,c                                 ; returns a with visibility sign byte
1067+ D845 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1068+ D847 32 0F 82             ld          (varT),a                            ; and store in varT as its needed later
1069+ D84A C9                   ret
1070+ D84B
1071+ D84B              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1072+ D84B              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1073+ D84B              ;..............................................................................................................................
1074+ D84B              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1075+ D84B              LL48GetScale:
1076+ D84B 3A E5 80             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1077+ D84E 5F                   ld          e,a
1078+ D84F CD 1B D8             call        CopyNodeToXX15
1079+ D852              LL48GetVertices:
1080+ D852              LL48GetVertSignAndVisDist:
1081+ D852                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1081+ D852 BB          >                        cp      e
1081+ D853 DA 90 D8    >                        jp		c, NodeIsNotVisible
1082+ D856              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1083+ D856                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1083+ D856 23          >                    inc         hl                                  ; vertex byte#1
1083+ D857 7E          >                    ld          a,(hl)                              ;
1083+ D858 32 F4 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1084+ D85B 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1085+ D85C E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1086+ D85E E5                   push        hl                                  ; we need to save HL                                                        ;;;
1087+ D85F                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1087+ D85F 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1087+ D862 ED 31       >                    add         hl,a
1087+ D864 7E          >                    ld          a,(hl)
1088+ D865 E1                   pop         hl                                  ;                                                                           ;;;
1089+ D866                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1089+ D866 A7          >                        and     a
1089+ D867 C2 96 D8    >                        jp	    nz,NodeIsVisible
1090+ D86A              CheckFace2:                                                                                                                         ;;;
1091+ D86A 7A                   ld          a,d                                                                                                             ;;;
1092+ D86B ED 23                swapnib                                                                                                                     ;;;
1093+ D86D E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1094+ D86F                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1094+ D86F A7          >                        and     a
1094+ D870 C2 96 D8    >                        jp	    nz,NodeIsVisible
1095+ D873              CheckFace3:                                                                                                                         ;;;
1096+ D873                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1096+ D873 23          >                    inc         hl                                  ; vertex byte#1
1096+ D874 7E          >                    ld          a,(hl)                              ;
1096+ D875 32 F4 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1097+ D878 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1098+ D879 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1099+ D87B E5                   push        hl                                  ; we need to save HL                                                        ;;;
1100+ D87C                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1100+ D87C 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1100+ D87F ED 31       >                    add         hl,a
1100+ D881 7E          >                    ld          a,(hl)
1101+ D882 E1                   pop         hl                                  ;                                                                           ;;;
1102+ D883                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1102+ D883 A7          >                        and     a
1102+ D884 C2 96 D8    >                        jp	    nz,NodeIsVisible
1103+ D887              CheckFace4:                                                                                                                         ;;;
1104+ D887 7A                   ld          a,d                                                                                                             ;;;
1105+ D888 ED 23                swapnib                                                                                                                     ;;;
1106+ D88A E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1107+ D88C                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1107+ D88C A7          >                        and     a
1107+ D88D C2 96 D8    >                        jp	    nz,NodeIsVisible
1108+ D890              NodeIsNotVisible:                                                                                                                   ;;;
1109+ D890 01 04 00             ld          bc,4
1110+ D893 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1111+ D895                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1112+ D895 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1113+ D896              NodeIsVisible:
1114+ D896              LL49:
1115+ D896 CD 3D D7             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1116+ D899 C9                   ret
1117+ D89A
1118+ D89A
1119+ D89A              ProjectNodeToEye:
1120+ D89A ED 4B AA C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1121+ D89E 79           	ld			a,c                                 ;  so no need for a negative check
1122+ D89F 32 F3 81     	ld			(varQ),a		                    ; VarQ = z
1123+ D8A2 3A A6 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1124+ D8A5 CD 34 98     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1125+ D8A8 3A A7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1126+ D8AB                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1126+ D8AB CB 7F       >                        bit 	7,a
1126+ D8AD C2 B8 D8    >                        jp      nz,EyeNegativeXPoint
1127+ D8B0              EyePositiveXPoint:									; x was positive result
1128+ D8B0 2E 80            ld          l,ScreenCenterX						;
1129+ D8B2 26 00            ld          h,0
1130+ D8B4 09               add         hl,bc								; hl = Screen Centre + X
1131+ D8B5 C3 BF D8         jp          EyeStoreXPoint
1132+ D8B8              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1133+ D8B8 2E 80            ld          l,ScreenCenterX
1134+ D8BA 26 00            ld          h,0
1135+ D8BC                  ClearCarryFlag
1135+ D8BC B7          >                        or a
1136+ D8BD ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1137+ D8BF              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1138+ D8BF EB               ex          de,hl
1139+ D8C0 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1140+ D8C3 FD 72 01         ld          (iy+1),d                            ; Update X Point
1141+ D8C6              EyeProcessYPoint:
1142+ D8C6 ED 4B AA C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1143+ D8CA 79           	ld			a,c
1144+ D8CB 32 F3 81     	ld			(varQ),a
1145+ D8CE 3A A8 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1146+ D8D1 CD 34 98     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1147+ D8D4 3A A9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1148+ D8D7                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1148+ D8D7 CB 7F       >                        bit 	7,a
1148+ D8D9 C2 E4 D8    >                        jp      nz,EyeNegativeYPoint
1149+ D8DC              EyePositiveYPoint:									; Y is positive so above the centre line
1150+ D8DC 2E 60            ld          l,ScreenCenterY
1151+ D8DE                  ClearCarryFlag
1151+ D8DE B7          >                        or a
1152+ D8DF ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1153+ D8E1 C3 E9 D8         jp          EyeStoreYPoint
1154+ D8E4              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1155+ D8E4 2E 60            ld          l,ScreenCenterY
1156+ D8E6 26 00            ld          h,0
1157+ D8E8 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1158+ D8E9              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1159+ D8E9 EB               ex          de,hl
1160+ D8EA FD 73 02         ld          (iy+2),e                            ; Update Y Point
1161+ D8ED FD 72 03         ld          (iy+3),d                            ; Update Y Point
1162+ D8F0 C9               ret
1163+ D8F1
1164+ D8F1
1165+ D8F1
1166+ D8F1              ; Pitch and roll are 2 phases
1167+ D8F1              ; 1 - we apply our pitch and roll to the ship position
1168+ D8F1              ;       x -> x + alpha * (y - alpha * x)
1169+ D8F1              ;       y -> y - alpha * x - beta * z
1170+ D8F1              ;       z -> z + beta * (y - alpha * x - beta * z)
1171+ D8F1              ; which can be simplified as:
1172+ D8F1              ;       1. K2 = y - alpha * x
1173+ D8F1              ;       2. z = z + beta * K2
1174+ D8F1              ;       3. y = K2 - beta * z
1175+ D8F1              ;       4. x = x + alpha * y
1176+ D8F1              ; 2 - we apply our patch and roll to the ship orientation
1177+ D8F1              ;      Roll calculations:
1178+ D8F1              ;
1179+ D8F1              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1180+ D8F1              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1181+ D8F1              ;      Pitch calculations:
1182+ D8F1              ;
1183+ D8F1              ;        nosev_y = nosev_y - beta * nosev_z_hi
1184+ D8F1              ;        nosev_z = nosev_z + beta * nosev_y_hi
1185+ D8F1
1186+ D8F1
1187+ D8F1              ; ---------------------------------------------------------------------------------------------------------------------------------
1188+ D8F1                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D8F1
   2++D8F1              ; Full version
   3++D8F1              ; 1. K2 = y - alpha * x
   4++D8F1              ; 2. z = z + beta * K2
   5++D8F1              ; 3. y = K2 - beta * z
   6++D8F1              ; 4. x = x + alpha * y
   7++D8F1
   8++D8F1
   9++D8F1              APPequPosPlusAPP:       MACRO    Position, PositionSign
  10++D8F1 ~                                    push    bc
  11++D8F1 ~                                    ld      c,a                         ; save original value of a into c
  12++D8F1 ~                                    ld      a,(PositionSign)
  13++D8F1 ~                                    ld      b,a
  14++D8F1 ~                                    ld      a,c
  15++D8F1 ~                                    xor     b                           ; a = a xor x postition sign
  16++D8F1 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  17++D8F1 ~            ; Signs are the same to we just add and take which ever sign
  18++D8F1 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  19++D8F1 ~                                    ld      hl,(Position)
  20++D8F1 ~                                    add     hl,de
  21++D8F1 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  22++D8F1 ~                                    ld      a,c                         ; and a = original sign as they were both the same
  23++D8F1 ~                                    pop     bc
  24++D8F1 ~                                    ret
  25++D8F1 ~            ; Signs are opposite so we subtract
  26++D8F1 ~            .MV50:                  ld      de,(varPp1)
  27++D8F1 ~                                    ld      hl,(Position)
  28++D8F1 ~                                    or      a
  29++D8F1 ~                                    sbc     hl,de
  30++D8F1 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  31++D8F1 ~                                    ld      a,c                         ; get back the original sign
  32++D8F1 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  33++D8F1 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  34++D8F1 ~                                    pop     bc
  35++D8F1 ~                                    ret
  36++D8F1 ~            .MV51:                  NegHL
  37++D8F1 ~                                    ld      (varPp1),hl
  38++D8F1 ~                                    ld      a,c                         ; the original sign will still be good
  39++D8F1 ~                                    pop     bc
  40++D8F1 ~                                    ret
  41++D8F1                                      ENDM
  42++D8F1
  43++D8F1
  44++D8F1              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  44++D8F1 C5          >                        push    bc
  44++D8F2 4F          >                        ld      c,a                         ; save original value of a into c
  44++D8F3 3A 22 C0    >                        ld      a,(UBnKxsgn)
  44++D8F6 47          >                        ld      b,a
  44++D8F7 79          >                        ld      a,c
  44++D8F8 A8          >                        xor     b                           ; a = a xor x postition sign
  44++D8F9 FA 0A D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  44++D8FC             >; Signs are the same to we just add and take which ever sign
  44++D8FC ED 5B F5 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  44++D900 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D903 19          >                        add     hl,de
  44++D904 22 F5 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  44++D907 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  44++D908 C1          >                        pop     bc
  44++D909 C9          >                        ret
  44++D90A             >; Signs are opposite so we subtract
  44++D90A ED 5B F5 80 >.MV50:                  ld      de,(varPp1)
  44++D90E 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D911 B7          >                        or      a
  44++D912 ED 52       >                        sbc     hl,de
  44++D914 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  44++D916 79          >                        ld      a,c                         ; get back the original sign
  44++D917 22 F5 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  44++D91A EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  44++D91C C1          >                        pop     bc
  44++D91D C9          >                        ret
  44++D91E             >.MV51:                  NegHL
  44++D91E AF          >                    xor a
  44++D91F 95          >                    sub l
  44++D920 6F          >                    ld l,a
  44++D921 9F          >                    sbc a,a
  44++D922 94          >                    sub h
  44++D923 67          >                    ld h,a
  44++D924 22 F5 80    >                        ld      (varPp1),hl
  44++D927 79          >                        ld      a,c                         ; the original sign will still be good
  44++D928 C1          >                        pop     bc
  44++D929 C9          >                        ret
  45++D92A
  46++D92A              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  46++D92A C5          >                        push    bc
  46++D92B 4F          >                        ld      c,a                         ; save original value of a into c
  46++D92C 3A 25 C0    >                        ld      a,(UBnKysgn)
  46++D92F 47          >                        ld      b,a
  46++D930 79          >                        ld      a,c
  46++D931 A8          >                        xor     b                           ; a = a xor x postition sign
  46++D932 FA 43 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  46++D935             >; Signs are the same to we just add and take which ever sign
  46++D935 ED 5B F5 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  46++D939 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D93C 19          >                        add     hl,de
  46++D93D 22 F5 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  46++D940 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  46++D941 C1          >                        pop     bc
  46++D942 C9          >                        ret
  46++D943             >; Signs are opposite so we subtract
  46++D943 ED 5B F5 80 >.MV50:                  ld      de,(varPp1)
  46++D947 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D94A B7          >                        or      a
  46++D94B ED 52       >                        sbc     hl,de
  46++D94D 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  46++D94F 79          >                        ld      a,c                         ; get back the original sign
  46++D950 22 F5 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  46++D953 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  46++D955 C1          >                        pop     bc
  46++D956 C9          >                        ret
  46++D957             >.MV51:                  NegHL
  46++D957 AF          >                    xor a
  46++D958 95          >                    sub l
  46++D959 6F          >                    ld l,a
  46++D95A 9F          >                    sbc a,a
  46++D95B 94          >                    sub h
  46++D95C 67          >                    ld h,a
  46++D95D 22 F5 80    >                        ld      (varPp1),hl
  46++D960 79          >                        ld      a,c                         ; the original sign will still be good
  46++D961 C1          >                        pop     bc
  46++D962 C9          >                        ret
  47++D963
  48++D963              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  48++D963 C5          >                        push    bc
  48++D964 4F          >                        ld      c,a                         ; save original value of a into c
  48++D965 3A 28 C0    >                        ld      a,(UBnKzsgn)
  48++D968 47          >                        ld      b,a
  48++D969 79          >                        ld      a,c
  48++D96A A8          >                        xor     b                           ; a = a xor x postition sign
  48++D96B FA 7C D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  48++D96E             >; Signs are the same to we just add and take which ever sign
  48++D96E ED 5B F5 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  48++D972 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D975 19          >                        add     hl,de
  48++D976 22 F5 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  48++D979 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  48++D97A C1          >                        pop     bc
  48++D97B C9          >                        ret
  48++D97C             >; Signs are opposite so we subtract
  48++D97C ED 5B F5 80 >.MV50:                  ld      de,(varPp1)
  48++D980 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D983 B7          >                        or      a
  48++D984 ED 52       >                        sbc     hl,de
  48++D986 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  48++D988 79          >                        ld      a,c                         ; get back the original sign
  48++D989 22 F5 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D98C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  48++D98E C1          >                        pop     bc
  48++D98F C9          >                        ret
  48++D990             >.MV51:                  NegHL
  48++D990 AF          >                    xor a
  48++D991 95          >                    sub l
  48++D992 6F          >                    ld l,a
  48++D993 9F          >                    sbc a,a
  48++D994 94          >                    sub h
  48++D995 67          >                    ld h,a
  48++D996 22 F5 80    >                        ld      (varPp1),hl
  48++D999 79          >                        ld      a,c                         ; the original sign will still be good
  48++D99A C1          >                        pop     bc
  48++D99B C9          >                        ret
  49++D99C
  50++D99C              ; rollWork holds Alpha intermidate results
  51++D99C 00 00 00     rollWork      DS 3
  52++D99F              rollWorkp1    equ rollWork
  53++D99F              rollWorkp2    equ rollWork+1
  54++D99F              rollWorkp3    equ rollWork+2
  55++D99F
  56++D99F              ;----------------------------------------------------------------------------------------------------------------------------------
  57++D99F              ; based on MVEIT part 4 of 9
  58++D99F 3A 0D 81     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  59++D9A2 21 01 81                             ld      hl,BET1                     ; and pitch
  60++D9A5 B6                                   or      (hl)
  61++D9A6 CA 62 DB                             jp      z,.NoRotation               ; if both zero then don't compute
  62++D9A9                                      ;break
  63++D9A9              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  64++D9A9 5F                                   ld      e,a                         ; e = roll magnitude
  65++D9AA 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  66++D9AD CD 7D 95                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  67++D9B0 32 F6 80                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  68++D9B3 22 F4 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  69++D9B6              ; A = Flip sign
  70++D9B6 3A 0E 81                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  71++D9B9 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  72++D9BC AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  73++D9BD              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  74++D9BD CD 2A D9                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  75++D9C0              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  76++D9C0 32 9E D9                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  77++D9C3 22 9C D9                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  78++D9C6              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  79++D9C6 3A 01 81                             ld      a,(BET1)                    ; a = magnitude of pitch
  80++D9C9 5F                                   ld      e,a
  81++D9CA CD 7D 95                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  82++D9CD 32 F6 80                             ld      (varPp2),a                   ; save highest byte in P2
  83++D9D0 22 F4 80                             ld      (varP),hl
  84++D9D3              ; Fetch sign of previosu cal and xor with BETA inverted
  85++D9D3 3A 9E D9                             ld      a,(rollWorkp3)
  86++D9D6 5F                                   ld      e,a
  87++D9D7 3A 02 81                             ld      a,(BET2)
  88++D9DA AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  89++D9DB              ; Z = P[210] =Z + APP
  90++D9DB CD 63 D9                             call    APPequZPosPlusAPP           ; MVT6
  91++D9DE 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
  92++D9E1 22 26 C0                             ld      (UBnKzlo),hl
  93++D9E4              ; A[P1]P[0] = z * Beta
  94++D9E4 3A 01 81                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  95++D9E7 5F                                   ld      e,a
  96++D9E8 CD 7D 95                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  97++D9EB 32 F6 80                             ld      (varPp2),a                  ; P2 = high byte of result
  98++D9EE 22 F4 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
  99++D9F1              ; A xor BET2,Zsign
 100++D9F1 3A 9E D9                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 101++D9F4 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 102++D9F7 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 103++D9F8 3A 02 81                             ld      a,(BET2)                    ;
 104++D9FB AB                                   xor     e                           ;
 105++D9FC 5F                                   ld      e,a                         ; now xor it with z sign too
 106++D9FD 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 107++DA00 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 108++DA01 F2 10 DA                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 109++DA04 2A F5 80                             ld      hl,(varPp1)
 110++DA07 ED 5B 9C D9                          ld      de,(rollWorkp1)
 111++DA0B B7                                   or      a
 112++DA0C 19                                   add     hl,de
 113++DA0D C3 2A DA                             jp      .MV44
 114++DA10 2A 9C D9     .MV43:                  ld      hl,(rollWorkp1)
 115++DA13 ED 5B F5 80                          ld      de,(varPp1)
 116++DA17 B7                                   or      a
 117++DA18 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 118++DA1A 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 119++DA1C                                      NegHL
 119++DA1C AF          >                    xor a
 119++DA1D 95          >                    sub l
 119++DA1E 6F          >                    ld l,a
 119++DA1F 9F          >                    sbc a,a
 119++DA20 94          >                    sub h
 119++DA21 67          >                    ld h,a
 120++DA22 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 121++DA25 EE 80                                xor     SignOnly8Bit
 122++DA27 32 25 C0                             ld      (UBnKysgn),a
 123++DA2A              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 124++DA2A 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 125++DA2D 3A 0D 81                             ld      a,(ALP1)                    ; get roll magnitude
 126++DA30 5F                                   ld      e,a
 127++DA31 2A 23 C0                             ld      hl,(UBnKylo)
 128++DA34 CD 7D 95                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 129++DA37 32 F6 80                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 130++DA3A 22 F4 80                             ld      (varP),hl
 131++DA3D 3A 0F 81                             ld      a,(ALP2FLIP)
 132++DA40 5F                                   ld      e,a
 133++DA41 3A 25 C0                             ld      a,(UBnKysgn)
 134++DA44 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 135++DA45 CD F1 D8                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 136++DA48 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 137++DA4B 22 20 C0                             ld      (UBnKxlo),hl
 138++DA4E                                      ;break
 139++DA4E                                      ; if its not a sun then apply to local orientation
 140++DA4E                                      ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY   ; ApplyMyRollToNosev:
 140++DA4E             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 140++DA4E 3A 0C 81    >                        ld       a,(ALPHA)
 140++DA51 32 F3 81    >                        ld       (varQ),a
 140++DA54             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 140++DA54 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 140++DA57 22 F4 81    >                        ld       (varR),hl
 140++DA5A             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
 140++DA5A 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
 140++DA5D 32 F4 80    >                        ld       (varP),a
 140++DA60 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
 140++DA63 EE 80       >                        xor $80                             ;
 140++DA65 CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 140++DA68 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 140++DA6C             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
 140++DA6C 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
 140++DA6F 22 F4 81    >                        ld       (varR),hl
 140++DA72 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 140++DA75 CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 140++DA78 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 141++DA7C                                      ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY   ; ApplyMyRollToSidev:
 141++DA7C             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 141++DA7C 3A 0C 81    >                        ld       a,(ALPHA)
 141++DA7F 32 F3 81    >                        ld       (varQ),a
 141++DA82             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 141++DA82 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 141++DA85 22 F4 81    >                        ld       (varR),hl
 141++DA88             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
 141++DA88 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
 141++DA8B 32 F4 80    >                        ld       (varP),a
 141++DA8E 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
 141++DA91 EE 80       >                        xor $80                             ;
 141++DA93 CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 141++DA96 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 141++DA9A             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
 141++DA9A 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
 141++DA9D 22 F4 81    >                        ld       (varR),hl
 141++DAA0 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 141++DAA3 CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 141++DAA6 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 142++DAAA                                      ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY   ; ApplyMyRollToRoofv:
 142++DAAA             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 142++DAAA 3A 0C 81    >                        ld       a,(ALPHA)
 142++DAAD 32 F3 81    >                        ld       (varQ),a
 142++DAB0             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 142++DAB0 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 142++DAB3 22 F4 81    >                        ld       (varR),hl
 142++DAB6             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
 142++DAB6 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
 142++DAB9 32 F4 80    >                        ld       (varP),a
 142++DABC 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
 142++DABF EE 80       >                        xor $80                             ;
 142++DAC1 CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 142++DAC4 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 142++DAC8             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
 142++DAC8 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
 142++DACB 22 F4 81    >                        ld       (varR),hl
 142++DACE 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 142++DAD1 CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 142++DAD4 ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 143++DAD8                                      ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY    ; ApplyMyPitchToNosev:
 143++DAD8             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 143++DAD8 3A FF 80    >                        ld       a,(BETA)
 143++DADB 32 F3 81    >                        ld       (varQ),a
 143++DADE             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 143++DADE 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 143++DAE1 22 F4 81    >                        ld       (varR),hl
 143++DAE4             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
 143++DAE4 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
 143++DAE7 32 F4 80    >                        ld       (varP),a
 143++DAEA 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
 143++DAED EE 80       >                        xor $80                             ;
 143++DAEF CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 143++DAF2 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 143++DAF6             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
 143++DAF6 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
 143++DAF9 22 F4 81    >                        ld       (varR),hl
 143++DAFC 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 143++DAFF CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 143++DB02 ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 144++DB06                                      ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY    ; ApplyMyPitchToSidev:
 144++DB06             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 144++DB06 3A FF 80    >                        ld       a,(BETA)
 144++DB09 32 F3 81    >                        ld       (varQ),a
 144++DB0C             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 144++DB0C 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 144++DB0F 22 F4 81    >                        ld       (varR),hl
 144++DB12             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
 144++DB12 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
 144++DB15 32 F4 80    >                        ld       (varP),a
 144++DB18 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
 144++DB1B EE 80       >                        xor $80                             ;
 144++DB1D CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 144++DB20 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 144++DB24             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
 144++DB24 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
 144++DB27 22 F4 81    >                        ld       (varR),hl
 144++DB2A 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 144++DB2D CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 144++DB30 ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 145++DB34                                      ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY    ; ApplyMyPitchToRoofv:
 145++DB34             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 145++DB34 3A FF 80    >                        ld       a,(BETA)
 145++DB37 32 F3 81    >                        ld       (varQ),a
 145++DB3A             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 145++DB3A 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 145++DB3D 22 F4 81    >                        ld       (varR),hl
 145++DB40             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
 145++DB40 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
 145++DB43 32 F4 80    >                        ld       (varP),a
 145++DB46 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
 145++DB49 EE 80       >                        xor $80                             ;
 145++DB4B CD 02 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 145++DB4E ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 145++DB52             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
 145++DB52 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
 145++DB55 22 F4 81    >                        ld       (varR),hl
 145++DB58 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 145++DB5B CD 02 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 145++DB5E ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 146++DB62 3A ED 81     .NoRotation:            ld      a,(DELTA)                   ; get speed
 147++DB65 16 00                                ld      d,0
 148++DB67 5F                                   ld      e,a                         ; de = speed in low byte
 149++DB68 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 150++DB6B 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 151++DB6E 47                                   ld      b,a                         ;
 152++DB6F 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 153++DB71 CD EF 92                             call    ADDHLDESignBC               ; update speed
 154++DB74 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 155++DB77 32 28 C0                             ld      (UBnKzsgn),a                ;
 156++DB7A C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1189+ DB7B                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++DB7B
   2++DB7B              ; A = value for rotation
   3++DB7B              ; HL = address of value for rotation
   4++DB7B              ; TODO logic for permanent spin, I thik this it -127??
   5++DB7B              SplitAndDampenZ:        MACRO
   6++DB7B ~                                    ld      b,a
   7++DB7B ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++DB7B ~                                    jp      z,.ProcessRoll
   9++DB7B ~                                    ld      a,b                     ; b = rotate counter S7
  10++DB7B ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++DB7B ~                                    ld      c,a                     ; .
  12++DB7B ~                                    ld      (univRAT2),a            ; .
  13++DB7B ~                                    ld      a,b                     ; a = abs b
  14++DB7B ~                                    and     SignMask8Bit            ; .
  15++DB7B ~                                    dec     a                       ; dampen
  16++DB7B ~                                    ld      (univRAT2Val),a
  17++DB7B ~                                    or      c                       ; make S7 again after dampening
  18++DB7B ~                                    ld      (UBnKRotZCounter),a
  19++DB7B                                      ENDM
  20++DB7B
  21++DB7B              SplitAndDampenX:        MACRO
  22++DB7B ~                                    ld      b,a
  23++DB7B ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++DB7B ~                                    and     a                       ; .
  25++DB7B ~                                    ret     z                       ; .
  26++DB7B ~                                    ld      a,b                     ; a = rotate counter S7
  27++DB7B ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++DB7B ~                                    ld      c,a                     ; .
  29++DB7B ~                                    ld      (univRAT2),a            ; .
  30++DB7B ~                                    ld      a,b                     ; a = abs b
  31++DB7B ~                                    and     SignMask8Bit            ; .
  32++DB7B ~                                    dec     a                       ; dampen
  33++DB7B ~                                    ld      (univRAT2Val),a
  34++DB7B ~                                    or      c                       ; make S7 again after dampening
  35++DB7B ~                                    ld      (UBnKRotXCounter),a
  36++DB7B                                      ENDM
  37++DB7B
  38++DB7B
  39++DB7B              ;----------------------------------------------------------------------------------------------------------------------------------
  40++DB7B              ; based on MVEIT part 4 of 9
  41++DB7B              ; x and z counters are proper 2's c values
  42++DB7B 3A 49 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
  43++DB7E FE FF                                cp      $FF
  44++DB80 28 18                                jr      z,.PitchSAxes
  45++DB82                                      SplitAndDampenZ
  45++DB82 47          >                        ld      b,a
  45++DB83 E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++DB85 CA C7 DB    >                        jp      z,.ProcessRoll
  45++DB88 78          >                        ld      a,b                     ; b = rotate counter S7
  45++DB89 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++DB8B 4F          >                        ld      c,a                     ; .
  45++DB8C 32 4F C0    >                        ld      (univRAT2),a            ; .
  45++DB8F 78          >                        ld      a,b                     ; a = abs b
  45++DB90 E6 7F       >                        and     SignMask8Bit            ; .
  45++DB92 3D          >                        dec     a                       ; dampen
  45++DB93 32 50 C0    >                        ld      (univRAT2Val),a
  45++DB96 B1          >                        or      c                       ; make S7 again after dampening
  45++DB97 32 49 C0    >                        ld      (UBnKRotZCounter),a
  46++DB9A                                      ;ld      a,(UBnKRotZCounter)
  47++DB9A 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++DB9D 22 D9 80                             ld	    (varAxis1),hl
  49++DBA0 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++DBA3 22 DB 80                             ld	    (varAxis2),hl
  51++DBA6 CD 13 DC                             call    MVS5RotateAxis
  52++DBA9 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++DBAC 22 D9 80                             ld	    (varAxis1),hl
  54++DBAF 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++DBB2 22 DB 80                             ld	    (varAxis2),hl
  56++DBB5 CD 13 DC                             call    MVS5RotateAxis
  57++DBB8 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++DBBB 22 D9 80                             ld	    (varAxis1),hl
  59++DBBE 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++DBC1 22 DB 80                             ld	    (varAxis2),hl
  61++DBC4 CD 13 DC                             call    MVS5RotateAxis
  62++DBC7 3A 48 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  63++DBCA FE FF                                cp      $FF
  64++DBCC 28 17                                jr      z,.RollSAxis
  65++DBCE                                      SplitAndDampenX
  65++DBCE 47          >                        ld      b,a
  65++DBCF E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++DBD1 A7          >                        and     a                       ; .
  65++DBD2 C8          >                        ret     z                       ; .
  65++DBD3 78          >                        ld      a,b                     ; a = rotate counter S7
  65++DBD4 E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++DBD6 4F          >                        ld      c,a                     ; .
  65++DBD7 32 4F C0    >                        ld      (univRAT2),a            ; .
  65++DBDA 78          >                        ld      a,b                     ; a = abs b
  65++DBDB E6 7F       >                        and     SignMask8Bit            ; .
  65++DBDD 3D          >                        dec     a                       ; dampen
  65++DBDE 32 50 C0    >                        ld      (univRAT2Val),a
  65++DBE1 B1          >                        or      c                       ; make S7 again after dampening
  65++DBE2 32 48 C0    >                        ld      (UBnKRotXCounter),a
  66++DBE5 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++DBE8 22 D9 80                             ld	    (varAxis1),hl
  68++DBEB 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++DBEE 22 DB 80                             ld	    (varAxis2),hl
  70++DBF1 CD 13 DC                             call    MVS5RotateAxis
  71++DBF4 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++DBF7 22 D9 80                             ld	    (varAxis1),hl
  73++DBFA 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++DBFD 22 DB 80                             ld	    (varAxis2),hl
  75++DC00 CD 13 DC                             call    MVS5RotateAxis
  76++DC03 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++DC06 22 D9 80                             ld	    (varAxis1),hl
  78++DC09 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++DC0C 22 DB 80                             ld	    (varAxis2),hl
  80++DC0F CD 13 DC                             call    MVS5RotateAxis
  81++DC12 C9                                   ret
  82++DC13
  83++DC13
  84++DC13
  85++DC13              ; Roate around axis
  86++DC13              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++DC13              ; so the axis x1 points to roofv  x , y or z
  88++DC13              ;             x2           nosev or sidev  x, y or z
  89++DC13              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++DC13              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++DC13              ; var RAT2 gives direction
  92++DC13              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++DC13              ;-Set up S R -----------------------------------------
  94++DC13              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++DC13 2A D9 80     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++DC16 5E                                   ld      e,(hl)
  97++DC17 23                                   inc     hl
  98++DC18 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++DC19 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++DC1A 7C                                   ld      a,h
 101++DC1B E6 80                                and     SignOnly8Bit
 102++DC1D FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++DC1F 7C                                   ld      a,h
 104++DC20 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++DC22 CB 3F                                srl     a               ; a = Axis1/2
 106++DC24 5F                                   ld      e,a             ;
 107++DC25 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++DC27 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++DC28 B7                                   or      a               ; clear carry
 110++DC29 CD E1 93                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++DC2C              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++DC2C E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++DC2D 7D                                   ld      a,l
 114++DC2E 32 F4 81                             ld      (varR),a
 115++DC31 7C                                   ld      a,h
 116++DC32 32 F5 81                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++DC35              ;-calculate roofv latter half of calc
 118++DC35 2A DB 80                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++DC38 5E                                   ld      e,(hl)
 120++DC39 23                                   inc     hl
 121++DC3A 56                                   ld      d,(hl)          ; de = value of roof axis
 122++DC3B 7A                                   ld      a,d
 123++DC3C E6 80                                and     SignOnly8Bit
 124++DC3E FD 67                                ld      iyh,a           ; save sign
 125++DC40 7A                                   ld      a,d
 126++DC41 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++DC43 57                                   ld      d,a             ; de = abs (nosev)
 128++DC44                                      ShiftDERight1
 128++DC44 CB 3A       >			   srl d
 128++DC46 CB 1B       >			   rr  e
 129++DC48                                      ShiftDERight1
 129++DC48 CB 3A       >			   srl d
 129++DC4A CB 1B       >			   rr  e
 130++DC4C                                      ShiftDERight1
 130++DC4C CB 3A       >			   srl d
 130++DC4E CB 1B       >			   rr  e
 131++DC50                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++DC50 CB 3A       >			   srl d
 131++DC52 CB 1B       >			   rr  e
 132++DC54 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++DC57 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++DC59 E6 80                                and     SignOnly8Bit
 135++DC5B B2                                   or      d
 136++DC5C 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++DC5D              ;;; ld      a,e
 138++DC5D              ;;;     or      iyh
 139++DC5D              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++DC5D              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++DC5D E1                                   pop     hl              ; get back RS POP ID 1
 142++DC5E                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++DC5E              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++DC5E CD 12 93                             call    ADDHLDESignedV4 ; do add using hl and de
 145++DC61 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 146++DC62              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 147++DC62              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 148++DC62 2A DB 80                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 149++DC65 5E                                   ld      e,(hl)
 150++DC66 23                                   inc     hl
 151++DC67 56                                   ld      d,(hl)
 152++DC68 EB                                   ex      de,hl
 153++DC69 7C                                   ld      a,h
 154++DC6A E6 80                                and     $80
 155++DC6C FD 67                                ld      iyh,a
 156++DC6E 7C                                   ld      a,h
 157++DC6F E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++DC71 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 159++DC73 5F                                   ld      e,a
 160++DC74 FD 7C                                ld      a,iyh
 161++DC76 57                                   ld      d,a
 162++DC77 B7                                   or      a               ; clear carry
 163++DC78 CD E1 93                             call    subHLDES15
 164++DC7B              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 165++DC7B E5                                   push    hl              ; save hl on stack  PUSH ID 3
 166++DC7C 7D                                   ld      a,l
 167++DC7D 32 F4 80                             ld      (varP),a        ; p = low of resuilt
 168++DC80 7C                                   ld      a,h
 169++DC81 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 170++DC83 32 0F 82                             ld      (varT),a        ; t = high of result
 171++DC86              ;-- Set up TQ
 172++DC86 2A D9 80                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 173++DC89              ;   ld      hl,(varAxis2)   ; work on nosev again
 174++DC89 5E                                   ld      e,(hl)
 175++DC8A 23                                   inc     hl
 176++DC8B 56                                   ld      d,(hl)
 177++DC8C 7A                                   ld      a,d
 178++DC8D E6 80                                and     $80
 179++DC8F FD 67                                ld      iyh,a           ; save sign
 180++DC91 7A                                   ld      a,d
 181++DC92 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 182++DC94 57                                   ld      d,a             ; de = abs (nosev)
 183++DC95                                      ShiftDERight1
 183++DC95 CB 3A       >			   srl d
 183++DC97 CB 1B       >			   rr  e
 184++DC99                                      ShiftDERight1
 184++DC99 CB 3A       >			   srl d
 184++DC9B CB 1B       >			   rr  e
 185++DC9D                                      ShiftDERight1
 185++DC9D CB 3A       >			   srl d
 185++DC9F CB 1B       >			   rr  e
 186++DCA1                                      ShiftDERight1           ; de = nosev /16 unsigned
 186++DCA1 CB 3A       >			   srl d
 186++DCA3 CB 1B       >			   rr  e
 187++DCA5 3A 4F C0                             ld      a,(univRAT2)
 188++DCA8 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 189++DCAA E6 80                                and     $80
 190++DCAC B2                                   or      d
 191++DCAD 57                                   ld      d,a
 192++DCAE              ;;; ld      a,e
 193++DCAE              ;;;     or      iyh
 194++DCAE              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 195++DCAE E1                                   pop     hl              ; get back RS   POP ID 3
 196++DCAF              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 197++DCAF CD E1 93                             call    subHLDES15 ; do add using hl and de
 198++DCB2              ;-- Update nosev ---------------------------------------
 199++DCB2 EB                                   ex      de,hl           ; save hl to de
 200++DCB3 2A DB 80                             ld      hl,(varAxis2)
 201++DCB6 73                                   ld      (hl),e
 202++DCB7 23                                   inc     hl
 203++DCB8 72                                   ld      (hl),d          ; copy result into nosev
 204++DCB9              ;-- Update roofv ---------------------------------------
 205++DCB9 D1                                   pop     de              ; get calc saved on stack POP ID 2
 206++DCBA 2A D9 80                             ld      hl,(varAxis1)
 207++DCBD 73                                   ld      (hl),e
 208++DCBE 23                                   inc     hl
 209++DCBF 72                                   ld      (hl),d          ; copy result into nosev
 210++DCC0 C9                                   ret
 211++DCC1
 212++DCC1
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1190+ DCC1                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++DCC1
   2++DCC1
   3++DCC1              ;AddSpeedToVert:         MACRO   vertex
   4++DCC1              ;                        ld      hl,(vertex)
   5++DCC1              ;                        ld      a,(vertex+2)
   6++DCC1              ;                        ld      b,a
   7++DCC1              ;                        call    AHLEquBHLaddCDE
   8++DCC1              ;                        ld      (vertex),hl
   9++DCC1              ;                        ld      (vertex+2),a
  10++DCC1              ;                        ENDM
  11++DCC1
  12++DCC1
  13++DCC1              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++DCC1 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++DCC4 FE 00                                cp      0
  16++DCC6 C8                                   ret     z
  17++DCC7 CB 27                                sla     a
  18++DCC9 CB 27                                sla     a
  19++DCCB FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++DCCD              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++DCCD 5F          >                        ld      e,a
  20++DCCE 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++DCD1 7C          >                        ld      a,h
  20++DCD2             >                        ClearSignBitA
  20++DCD2 E6 7F       >                        and     SignMask8Bit
  20++DCD4 57          >                        ld      d,a
  20++DCD5 ED 30       >                        mul     de
  20++DCD7 7C          >                        ld      a,h
  20++DCD8             >                        SignBitOnlyA
  20++DCD8 E6 80       >                        and     SignOnly8Bit
  20++DCDA 47          >                        ld      b,a;ld      c,a
  20++DCDB 62          >                        ld      h,d;ld      e,d
  20++DCDC 0E 00       >                        ld      c,0;ld      d,0
  21++DCDE              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++DCDE ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++DCE2 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++DCE5 6F          >                        ld      l,a
  21++DCE6 CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++DCE9 7D          >                        ld      a,l
  21++DCEA 32 20 C0    >                        ld      (UBnKxlo),a
  21++DCED ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++DCF1              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++DCF1 FD 5D       >                        ld      e,iyl
  22++DCF3 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++DCF6 7C          >                        ld      a,h
  22++DCF7             >                        ClearSignBitA
  22++DCF7 E6 7F       >                        and     SignMask8Bit
  22++DCF9 57          >                        ld      d,a
  22++DCFA ED 30       >                        mul     de
  22++DCFC 7C          >                        ld      a,h
  22++DCFD             >                        SignBitOnlyA
  22++DCFD E6 80       >                        and     SignOnly8Bit
  22++DCFF 47          >                        ld      b,a;ld      c,a
  22++DD00 62          >                        ld      h,d;ld      e,d
  22++DD01 0E 00       >                        ld      c,0;ld      d,0
  23++DD03              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++DD03 ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++DD07 3A 23 C0    >                        ld      a,(UBnKylo)
  23++DD0A 6F          >                        ld      l,a
  23++DD0B CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++DD0E 7D          >                        ld      a,l
  23++DD0F 32 23 C0    >                        ld      (UBnKylo),a
  23++DD12 ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++DD16              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++DD16 FD 5D       >                        ld      e,iyl
  24++DD18 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++DD1B 7C          >                        ld      a,h
  24++DD1C             >                        ClearSignBitA
  24++DD1C E6 7F       >                        and     SignMask8Bit
  24++DD1E 57          >                        ld      d,a
  24++DD1F ED 30       >                        mul     de
  24++DD21 7C          >                        ld      a,h
  24++DD22             >                        SignBitOnlyA
  24++DD22 E6 80       >                        and     SignOnly8Bit
  24++DD24 47          >                        ld      b,a;ld      c,a
  24++DD25 62          >                        ld      h,d;ld      e,d
  24++DD26 0E 00       >                        ld      c,0;ld      d,0
  25++DD28              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++DD28 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++DD2C 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++DD2F 6F          >                        ld      l,a
  25++DD30 CD 6D 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++DD33 7D          >                        ld      a,l
  25++DD34 32 26 C0    >                        ld      (UBnKzlo),a
  25++DD37 ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++DD3B C9                                   ret
  27++DD3C
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1191+ DD3C                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DD3C
   2++DD3C              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DD3C 00           DrawLinesCounter		db	0
   4++DD3D              ; Initial tests look OK
   5++DD3D              LL155:;
   6++DD3D              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DD3D                    ;break                                                                             ; ObjectInFront:
   8++DD3D 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DD3F FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DD41 3A 86 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DD44                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DD44 A7          >                        and     a
  11++DD45 C8          >                        ret     z
  12++DD46 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DD48 21 30 C2                             ld		hl,UbnkLineArray
  14++DD4B              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DD4B 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DD4C 23                                   inc     hl
  17++DD4D 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DD4E 23                                   inc     hl
  19++DD4F 5E                                   ld      e,(hl)                          ; c = varX1
  20++DD50 23                                   inc     hl
  21++DD51 56                                   ld      d,(hl)                          ; de = point2 Y,X
  22++DD52 23                                   inc     hl
  23++DD53 E5                                   push	hl
  24++DD54 FD E5                                push    iy
  25++DD56 60                                   ld      h,b
  26++DD57 69                                   ld      l,c
  27++DD58                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  28++DD58 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  29++DD5A                                      MMUSelectLayer2
  29++DD5A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  30++DD5E CD 8A F0                             call    LineHLtoDE
  31++DD61 FD E1                                pop     iy
  32++DD63 E1                                   pop	    hl
  33++DD64 FD 25                                dec     iyh
  34++DD66 20 E3                                jr		nz,DrawXX19ClippedLines
  35++DD68 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  36++DD69
# file closed: ././ModelRender/DrawLines.asm
1192+ DD69              ; ---------------------------------------------------------------------------------------------------------------------------------
1193+ DD69
1194+ DD69              ; DIot seem to lawyas have Y = 0???
1195+ DD69              ProcessDot:            ; break
1196+ DD69 CD C6 CF                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1197+ DD6C CD 01 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1198+ DD6F CD 5A D2                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1199+ DD72 CD 4B D1                             call    InverseXX16                      ;#11; Invert rotation matrix
1200+ DD75 21 00 00                             ld      hl,0
1201+ DD78 22 A6 C0                             ld      (UBnkXScaled),hl
1202+ DD7B 22 A8 C0                             ld      (UBnkYScaled),hl
1203+ DD7E 22 AA C0                             ld      (UBnkZScaled),hl
1204+ DD81 AF                                   xor     a
1205+ DD82 CD 63 79                             call    XX12EquNodeDotOrientation
1206+ DD85 CD EF CF                             call    TransposeXX12ByShipToXX15
1207+ DD88 CD 6C D0                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1208+ DD8B FD 21 F0 C0                          ld      iy,UBnkNodeArray
1209+ DD8F CD 9A D8                             call    ProjectNodeToEye
1210+ DD92 C9                                   ret
1211+ DD93
1212+ DD93              ; .....................................................
1213+ DD93              ; Process Nodes does the following:
1214+ DD93              ; for each node:
1215+ DD93              ;     see if node >
1216+ DD93 00           PNXX20DIV6          DB      0
1217+ DD94 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1218+ DD96 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1219+ DD98 00           PNLASTNORM          DB      0
1220+ DD99              ProcessNodes:           ZeroA
1220+ DD99 AF          >                        xor a
1221+ DD9A 32 86 C3                             ld      (UbnkLineArrayLen),a
1222+ DD9D CD C6 CF                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1223+ DDA0 CD 01 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1224+ DDA3 CD 5A D2                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1225+ DDA6 CD 4B D1                             call    InverseXX16                      ;#11; Invert rotation matrix
1226+ DDA9 21 AD C3                             ld      hl,UBnkHullVerticies
1227+ DDAC 3A 9B C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1228+ DDAF 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1229+ DDB0 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1230+ DDB1 16 06                                ld      d,6
1231+ DDB3 CD 64 98                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1232+ DDB6 41                                   ld      b,c                              ; c = number of vertices
1233+ DDB7 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1234+ DDBB              LL48:
1235+ DDBB C5           PointLoop:	            push	bc                                  ; save counters
1236+ DDBC E5                                   push	hl                                  ; save verticies list pointer
1237+ DDBD FD E5                                push	iy                                  ; save Screen plot array pointer
1238+ DDBF 78                                   ld      a,b
1239+ DDC0                                      ;break
1240+ DDC0 CD 1B D8                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1241+ DDC3 3A A7 C0                             ld		a,(UBnkXScaledSign)
1242+ DDC6 CD 63 79                             call    XX12EquNodeDotOrientation
1243+ DDC9 CD EF CF                             call    TransposeXX12ByShipToXX15
1244+ DDCC CD 6C D0                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1245+ DDCF FD E1                                pop		iy                                  ; get back screen plot array pointer
1246+ DDD1 CD 9A D8                             call    ProjectNodeToEye                     ; set up screen plot list entry
1247+ DDD4                 ; ld      hl,UbnkLineArrayLen
1248+ DDD4                ;  inc     (hl)                                ; another node done
1249+ DDD4 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1250+ DDD6 E1                                   pop		hl
1251+ DDD7 3E 04                                ld		a,4
1252+ DDD9 ED 31                                add		hl,a
1253+ DDDB E5                                   push	hl                                  ; write it back at iy + 4
1254+ DDDC FD E1                                pop		iy								    ; and put it in iy again
1255+ DDDE E1                                   pop		hl                                  ; get hl back as vertex list
1256+ DDDF 3E 06                                ld		a,6
1257+ DDE1 ED 31                                add 	hl,a                                ; and move to next vertex
1258+ DDE3 C1                                   pop		bc                                  ; get counter back
1259+ DDE4 10 D5                                djnz	PointLoop
1260+ DDE6              ; ......................................................
1261+ DDE6                                      ClearCarryFlag
1261+ DDE6 B7          >                        or a
1262+ DDE7 C9                                   ret
1263+ DDE8              ; ...........................................................
1264+ DDE8 CD 9F D4     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1265+ DDEB 3A 54 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1266+ DDEE E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1267+ DDF0 C8                                   ret     z                           ; if none of these flags are set we can fast exit
1268+ DDF1                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1268+ DDF1 CB 6F       >                        bit 	ShipExplodingBitNbr, a
1268+ DDF3 C2 2F DE    >                        jp      nz,.ExplodingCloud
1269+ DDF6              ;............................................................
1270+ DDF6              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1270+ DDF6 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1270+ DDF8 C8          >                        ret		z
1271+ DDF9                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1271+ DDF9 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1271+ DDFB CA 22 DE    >                        jp      z,.CarryOnWithDraw
1272+ DDFE              ;............................................................
1273+ DDFE CD 69 DD     .itsJustADot:           call    ProcessDot
1274+ DE01                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1274+ DE01 21 54 C0    >                        ld      hl,UBnkaiatkecm
1274+ DE04 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1275+ DE06 ED 4B F0 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1276+ DE0A ED 5B F2 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1277+ DE0E 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1278+ DE0F B2                                   or      d                           ;
1279+ DE10 C0                                   ret     nz                          ;
1280+ DE11 7B                                   ld      a,e
1281+ DE12 E6 80                                and     %10000000                   ; check to see if Y > 128
1282+ DE14 C0                                   ret     nz
1283+ DE15 43                                   ld      b,e                         ; now b = y and c = x
1284+ DE16 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1285+ DE18 3E E0                                ld      a,224
1286+ DE1A                                      MMUSelectLayer2                     ; then go to update radar
1286+ DE1A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1287+ DE1E CD F7 E2                             call    ShipPixel                   ;
1288+ DE21 C9                                   ret
1289+ DE22              ;............................................................
1290+ DE22 CD 99 DD     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1291+ DE25 CD E6 D4                             call    CullV2
1292+ DE28                                     ; break
1293+ DE28 CD F0 DF                             call    PrepLines
1294+ DE2B CD 3D DD                             call    DrawLines
1295+ DE2E C9                                   ret
1296+ DE2F              ;............................................................
1297+ DE2F CD 99 DD     .ExplodingCloud:        call    ProcessNodes
1298+ DE32                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1298+ DE32 21 54 C0    >                        ld      hl,UBnkaiatkecm
1298+ DE35 CB A6       >                        res     ShipKilledBitNbr,(hl)
1299+ DE37 3A 5F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1300+ DE3A C6 04                                add     4                           ; we do this early as we now have logic for
1301+ DE3C DA FE DE                             jp      c,.FinishedExplosion        ; display or not later
1302+ DE3F 32 5F C0                             ld      (UBnKCloudCounter),a        ; .
1303+ DE42              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1303+ DE42 3A 54 C0    >                        ld     a,(UBnkaiatkecm)
1303+ DE45 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1303+ DE47 C8          >                        ret		z
1304+ DE48              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1304+ DE48 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1304+ DE4A C2 FE DD    >                        jp      nz,.itsJustADot
1305+ DE4D 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1306+ DE50 7C                                   ld      a,h                         ; .
1307+ DE51                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1307+ DE51 FE 20       >                        cp      32
1307+ DE53 DA 5B DE    >                        jp		c, .CalcFromZ
1308+ DE56 26 FE                                ld      h,$FE                       ; .
1309+ DE58 C3 66 DE                             jp      .DoneZDist                  ; .
1310+ DE5B              .CalcFromZ:             ShiftHLLeft1                        ; else
1310+ DE5B CB 25       >			   sla l
1310+ DE5D CB 14       >			   rl  h
1311+ DE5F                                      ShiftHLLeft1                        ; hl = hl * 2
1311+ DE5F CB 25       >			   sla l
1311+ DE61 CB 14       >			   rl  h
1312+ DE63                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1312+ DE63 37          >                        scf
1313+ DE64 CB 14                                rl  h                               ;
1314+ DE66 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1315+ DE68 4C                                   ld      c,h                         ; .
1316+ DE69 3A 5F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1317+ DE6C                      IFDEF LOGMATHS
1318+ DE6C ~                                    MMUSelectMathsTables
1319+ DE6C ~                                    ld      b,h
1320+ DE6C ~                                    call    AEquAmul256DivBLog
1321+ DE6C ~                                    ld      d,a
1322+ DE6C ~                                    MMUSelectROM0
1323+ DE6C                      ELSE
1324+ DE6C 57                                   ld      d,a                         ;
1325+ DE6D 1E 00                                ld      e,0                         ;
1326+ DE6F CD A8 97                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1327+ DE72 7A                                   ld      a,d                         ; if radius >= 28
1328+ DE73                      ENDIF
1329+ DE73                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1329+ DE73 FE 1C       >                        cp      28
1329+ DE75 DA 7D DE    >                        jp		c, .SetCloudRadius
1330+ DE78 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1331+ DE7A C3 89 DE                             jp      .SizedUpCloud               ;
1332+ DE7D              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1332+ DE7D CB 23       >			   sla e
1332+ DE7F CB 12       >			   rl  d
1333+ DE81                                      ShiftDELeft1                        ; .
1333+ DE81 CB 23       >			   sla e
1333+ DE83 CB 12       >			   rl  d
1334+ DE85                                      ShiftDELeft1                        ; .
1334+ DE85 CB 23       >			   sla e
1334+ DE87 CB 12       >			   rl  d
1335+ DE89 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1336+ DE8A 32 60 C0                             ld      (UBnKCloudRadius),a         ; .
1337+ DE8D DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1338+ DE8F 3A 5F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1339+ DE92 ED 23                                swapnib                             ; divive by 16
1340+ DE94 E6 0F                                and     $0F                         ; mask off upper bytes
1341+ DE96 CB 2F                                sra     a                           ; divide by 32
1342+ DE98 21 0A DF                             ld      hl,DebrisColourTable
1343+ DE9B ED 31                                add     hl,a
1344+ DE9D 7E                                   ld      a,(hl)
1345+ DE9E FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1346+ DEA0 3A 5F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1347+ DEA3                                      ABSa2c                              ; a = abs a
1347+ DEA3 CB 7F       >                        bit     7,a
1347+ DEA5 CA AA DE    >                        jp      z,.DoneABSa
1347+ DEA8 ED 44       >                        neg
1347+ DEAA             >.DoneABSa:
1348+ DEAA CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1349+ DEAC CB 2F                                sra a                               ; .
1350+ DEAE CB 2F                                sra a                               ; .
1351+ DEB0 F6 01                                or  1                               ; bit 0 set so minimum 1
1352+ DEB2 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1353+ DEB4 3A 9A C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1354+ DEB7 47                                   ld      b,a                         ; .
1355+ DEB8 21 F0 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1356+ DEBB C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1357+ DEBD DD 68                                    ld      ixl,b                   ; save counter
1358+ DEBF 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1359+ DEC0 23                                       inc     hl                      ; .
1360+ DEC1 46                                       ld      b,(hl)                  ; .
1361+ DEC2 23                                       inc     hl                      ; .
1362+ DEC3 5E                                       ld      e,(hl)                  ; .
1363+ DEC4 23                                       inc     hl                      ; .
1364+ DEC5 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1365+ DEC6 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1366+ DEC8 FD 67                                    ld      iyh,a                   ;
1367+ DECA                                          ;break
1368+ DECA D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1369+ DECC EB                                           ex      de,hl               ; hl = de (Y)
1370+ DECD DD 54                                        ld      d,ixh               ; d = cloud radius
1371+ DECF CD 12 DF                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1372+ DED2 7C                                           ld      a,h                 ; if off screen skip
1373+ DED3                                              JumpIfAIsNotZero  .NextIteration
1373+ DED3 A7          >                        and     a
1373+ DED4 C2 EF DE    >                        jp	    nz,.NextIteration
1374+ DED7 EB                                           ex      de,hl               ; de = result for y which was put into hl
1375+ DED8 E1                                           pop     hl                  ; get x back from bc on stack
1376+ DED9 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1377+ DEDA D5                                           push    de                  ; save de
1378+ DEDB DD 54                                        ld      d,ixh               ; d = cloud radius
1379+ DEDD CD 12 DF                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1380+ DEE0 D1                                           pop     de                  ; get de back doing pop here clears stack up
1381+ DEE1 7C                                           ld      a,h                 ; if high byte has a value then off screen
1382+ DEE2                                              JumpIfAIsNotZero .NextIteration ;
1382+ DEE2 A7          >                        and     a
1382+ DEE3 C2 EF DE    >                        jp	    nz,.NextIteration
1383+ DEE6 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1384+ DEE7 4D                                           ld      c,l                 ; iyl already has colour
1385+ DEE8                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1385+ DEE8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1386+ DEEC CD FF E2                                     call    DebrisPixel         ; .
1387+ DEEF C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1388+ DEF1 FD 25                                    dec    iyh                      ; one partcile done
1389+ DEF3 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1390+ DEF5 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1391+ DEF7 3E 04                                ld      a,4                         ; move to next vertex group
1392+ DEF9 ED 31                                add     hl,a                        ;
1393+ DEFB 10 BE                                djnz    .ExplosionVertLoop          ;
1394+ DEFD C9                                   ret
1395+ DEFE              .FinishedExplosion:     ;break
1396+ DEFE 3A 3F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1397+ DF01 CD 6A 87                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1398+ DF04                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1398+ DF04 21 54 C0    >                        ld      hl,UBnkaiatkecm
1398+ DF07 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1399+ DF09 C9                                   ret
1400+ DF0A
1401+ DF0A
1402+ DF0A FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1402+ DF0E 6C 48 24 25
1403+ DF12                                      ; set flags and signal to remove from slot list
1404+ DF12
1405+ DF12              ; Hl = HlL +/- (Random * projected cloud size)
1406+ DF12              ; In - d = z distance, hl = vert hi lo
1407+ DF12              ; Out hl = adjusted distance
1408+ DF12              ; uses registers hl, de
1409+ DF12 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1410+ DF13 CD 3B 88                             call    doRandom                    ; a= random * 2
1411+ DF16 E1                                   pop     hl
1412+ DF17 17                                   rla                                 ;
1413+ DF18 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1414+ DF1A 5F           .Positive:              ld  e,a
1415+ DF1B ED 30                                mul
1416+ DF1D 5A                                   ld  e,d
1417+ DF1E 16 00                                ld  d,0
1418+ DF20                                      ClearCarryFlag
1418+ DF20 B7          >                        or a
1419+ DF21 ED 5A                                adc     hl,de                       ; hl = hl + a
1420+ DF23 C9                                   ret
1421+ DF24 5F           .Negative:              ld  e,a
1422+ DF25 ED 30                                mul
1423+ DF27 5A                                   ld  e,d
1424+ DF28 16 00                                ld  d,0
1425+ DF2A                                      ClearCarryFlag
1425+ DF2A B7          >                        or a
1426+ DF2B ED 52                                sbc     hl,de                       ; hl = hl + a
1427+ DF2D C9                                   ret
1428+ DF2E
1429+ DF2E              GetExperiencePoints:    ; TODO calculate experience points
1430+ DF2E                                      ; TODO mission updates check
1431+ DF2E C9                                   ret
1432+ DF2F
1433+ DF2F              ; ......................................................
1434+ DF2F 3A A9 C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1435+ DF32 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1436+ DF34 C8                                   ret     z
1437+ DF35 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1438+ DF38 F6 30                                or      ShipExploding | ShipKilled  ; .
1439+ DF3A E6 7F                                and     ShipAIDisabled              ; .
1440+ DF3C 32 54 C0                             ld      (UBnkaiatkecm),a            ; .
1441+ DF3F                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1441+ DF3F 3E 4B       >                        ld      a,ShipExplosionDuration
1441+ DF41 32 51 C0    >                        ld      (UBnKexplDsp),a
1442+ DF44                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1442+ DF44 AF          >                        xor      a
1442+ DF45 32 58 C0    >                        ld       (UBnKEnergy),a
1443+ DF48 32 60 C0                             ld      (UBnKCloudRadius),a
1444+ DF4B 3E 12                                ld      a,18
1445+ DF4D 32 5F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1446+ DF50                                      ; TODO logic to spawn cargo/plates goes here
1447+ DF50 C9                                   ret
1448+ DF51
1449+ DF51              ; in a = damage
1450+ DF51 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1451+ DF52 3A A9 C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1452+ DF55 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1453+ DF57 C8                                   ret     z
1454+ DF58 3A 58 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1455+ DF5B                                      ClearCarryFlag
1455+ DF5B B7          >                        or a
1456+ DF5C 98                                   sbc     a,b                         ; subtract damage
1457+ DF5D D2 64 DF     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1458+ DF60 CD 2F DF                             call    KillShip                    ; else kill it
1459+ DF63 C9                                   ret
1460+ DF64 32 58 C0     .DoneDamage:            ld      (UBnKEnergy),a
1461+ DF67 C9                                   ret
1462+ DF68              ; need recovery for energy too
1463+ DF68              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1464+ DF68
1465+ DF68              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1466+ DF68              ;  Entering Here we have the following:
1467+ DF68              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1468+ DF68              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1469+ DF68              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1470+ DF68              ;
1471+ DF68              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1472+ DF68              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1473+ DF68              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1474+ DF68              ;--------------------------------------------------------------------------------------------------------
1475+ DF68              AddLaserBeamLine:
1476+ DF68              ; this code is a bag of shit and needs re-writing
1477+ DF68              GetGunVertexNode:
1478+ DF68 3A 98 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1479+ DF6B 21 F0 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1480+ DF6E ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1481+ DF70 FD 2E 00             ld          iyl,0
1482+ DF73              MoveX1PointToXX15:
1483+ DF73 4E                   ld          c,(hl)                              ;
1484+ DF74 23                   inc         hl
1485+ DF75 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1486+ DF76 23                   inc         hl
1487+ DF77 ED 43 A6 C0          ld          (UBnkX1),bc
1488+ DF7B 0C                   inc         c
1489+ DF7C C8                   ret         z                                   ; was c 255?
1490+ DF7D 04                   inc         b
1491+ DF7E C8                   ret         z                                   ; was c 255?
1492+ DF7F              MoveY1PointToXX15:
1493+ DF7F 4E                   ld          c,(hl)                              ;
1494+ DF80 23                   inc         hl
1495+ DF81 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1496+ DF82 23                   inc         hl
1497+ DF83 ED 43 A8 C0          ld          (UBnkY1),bc
1498+ DF87              SetX2PointToXX15:
1499+ DF87 01 00 00             ld          bc,0                                ; set X2 to 0
1500+ DF8A ED 43 AA C0          ld          (UBnkX2),bc
1501+ DF8E 3A 26 C0             ld          a,(UBnKzlo)
1502+ DF91 4F                   ld          c,a
1503+ DF92              SetY2PointToXX15:
1504+ DF92 ED 43 AC C0          ld          (UBnkY2),bc                         ; set Y2to 0
1505+ DF96 3A 22 C0             ld          a,(UBnKxsgn)
1506+ DF99                      JumpOnBitClear a,7,LL74SkipDec
1506+ DF99 CB 7F       >                        bit 	7,a
1506+ DF9B CA A3 DF    >                        jp      z,LL74SkipDec
1507+ DF9E              LL74DecX2:
1508+ DF9E 3E FF                ld          a,$FF
1509+ DFA0 32 AA C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1510+ DFA3              LL74SkipDec:
1511+ DFA3 CD 36 CD             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1512+ DFA6 3A 8A CA             ld          a,(ClipSuccess)
1513+ DFA9 A7                   and         a
1514+ DFAA 28 71                jr          z,CalculateNewLines
1515+ DFAC              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1516+ DFAC              ; Here we are usign hl to replace VarU as index
1517+ DFAC 2A F6 81             ld          hl,(varU16)
1518+ DFAF 3A A6 C0             ld          a,(UBnKx1Lo)
1519+ DFB2 77                   ld          (hl),a
1520+ DFB3 23                   inc         hl
1521+ DFB4 3A A8 C0             ld          a,(UbnKy1Lo)
1522+ DFB7 77                   ld          (hl),a
1523+ DFB8 23                   inc         hl
1524+ DFB9 3A AA C0             ld          a,(UBnkX2Lo)
1525+ DFBC 77                   ld          (hl),a
1526+ DFBD 23                   inc         hl
1527+ DFBE 3A AC C0             ld          a,(UbnKy2Lo)
1528+ DFC1 77                   ld          (hl),a
1529+ DFC2 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1530+ DFC4 23                   inc         hl
1531+ DFC5 FD 2C                inc         iyl                                 ; ready for next byte
1532+ DFC7 22 F6 81             ld          (varU16),hl
1533+ DFCA C9                   ret
1534+ DFCB
1535+ DFCB                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DFCB                  ;DEFINE  CLIPVersion3 1
   2++DFCB              ;--------------------------------------------------------------------------------------------------------
   3++DFCB                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DFCB              ;--------------------------------------------------------------------------------------------------------
   2++DFCB              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DFCB 21 F0 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DFCE ED 31                                add         hl,a                                ; hl = address of Node
   5++DFD0 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DFD1 11 A6 C0                             ld          de,UBnkX1
   7++DFD4 ED A0                                ldi                                             ; x1 lo
   8++DFD6 ED A0                                ldi                                             ; x1 hi
   9++DFD8 ED A0                                ldi                                             ; y1 lo
  10++DFDA ED A0                                ldi                                             ; y1 hi
  11++DFDC C9                                   ret
  12++DFDD
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   4++DFDD                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DFDD              ;--------------------------------------------------------------------------------------------------------
   2++DFDD              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DFDD 21 F0 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DFE0 ED 31                                add         hl,a                                ; hl = address of Node
   5++DFE2 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DFE3 11 AA C0                             ld          de,UBnkX2
   7++DFE6 ED A0                                ldi                                             ; x1 lo
   8++DFE8 ED A0                                ldi                                             ; x1 hi
   9++DFEA ED A0                                ldi                                             ; y1 lo
  10++DFEC ED A0                                ldi                                             ; y1 hi
  11++DFEE C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   5++DFEF                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DFEF              ;--------------------------------------------------------------------------------------------------------
   2++DFEF              GetFaceAtA:         MACRO
   3++DFEF ~                                ld          hl,UbnkFaceVisArray
   4++DFEF ~                                add         hl,a
   5++DFEF ~                                ld          a,(hl)                              ; get face visibility
   6++DFEF                                  ENDM
   7++DFEF
# file closed: ././ModelRender/GetFaceAtA.asm
   6++DFEF              ;--------------------------------------------------------------------------------------------------------
   7++DFEF              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   8++DFEF               ;   DEFINE NOBACKFACECULL 1
   9++DFEF 00           PLEDGECTR           DB          0
  10++DFF0
  11++DFF0              PrepLines:
  12++DFF0              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  13++DFF0
  14++DFF0              ; TODO add in onced DOEXP is finished
  15++DFF0              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  16++DFF0              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  17++DFF0              ;        or          8
  18++DFF0              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  19++DFF0              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  20++DFF0              ;EE31:                                                   ; no explosion
  21++DFF0              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  22++DFF0              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  23++DFF0              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  24++DFF0              ;
  25++DFF0              ;--------------------------------------------------------------------------------------------------------
  26++DFF0              InitialiseLineRead:
  27++DFF0                      ;break
  28++DFF0                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  28++DFF0 AF          >                        xor      a
  28++DFF1 32 86 C3    >                        ld       (UbnkLineArrayLen),a
  29++DFF4                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  29++DFF4 AF          >                        xor      a
  29++DFF5 32 87 C3    >                        ld       (UbnkLineArrayBytes),a
  30++DFF8                      ldWriteZero PLEDGECTR
  30++DFF8 AF          >                        xor      a
  30++DFF9 32 EF DF    >                        ld       (PLEDGECTR),a
  31++DFFC 3A 9C C3             ld          a,(EdgeCountAddr)
  32++DFFF DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  33++E001 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  34++E004 21 30 C2             ld          hl,UbnkLineArray                    ; head of array
  35++E007 22 F6 81             ld          (varU16),hl                         ; store current line array pointer un varU16
  36++E00A                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  36++E00A 3A 9C C3    >                        ld       a,(EdgeCountAddr)
  36++E00D 32 FA 81    >                        ld       (XX17),a
  37++E010 3A 51 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  38++E013                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  38++E013 CB 77       >                        bit 	6,a
  38++E015 CA 1D E0    >                        jp      z,CalculateNewLines
  39++E018 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  40++E01A 32 51 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  41++E01D              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  42++E01D              ; NOw we can calculate hull after including laser line
  43++E01D              CalculateNewLines:
  44++E01D              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  45++E01D              CheckEdgesForVisibility:
  46++E01D 21 9D C4             ld          hl,UBnkHullEdges
  47++E020                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  48++E020 22 F9 80             ld          (varV),hl                           ; V \ is pointer to where edges data start
  49++E023 3A 97 C3             ld          a,(LineX4Addr)
  50++E026 47                   ld          b,a                                 ; nbr of bytes of edge data
  51++E027              LL75Loop:                                               ; count Visible edges
  52++E027              IsEdgeInVisibilityRange:
  53++E027 2A F9 80             ld          hl,(varV)
  54++E02A E5                   push        hl
  55++E02B FD E1                pop         iy
  56++E02D                      IFDEF NOBACKFACECULL
  57++E02D ~                        jp          VisibileEdge; DEBUGTODO
  58++E02D                      ENDIF
  59++E02D 3A E5 80             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  60++E030 57                   ld          d,a                                 ; d holds copy of XX4
  61++E031              ; Get Edge Byte 0
  62++E031 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  63++E034                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  63++E034 BA          >                        cp      d
  63++E035 DA 87 E0    >                        jp		c, LL78EdgeNotVisible
  64++E038              EdgeMayBeVisibile:
  65++E038              ; Get Edge Byte 1
  66++E038              IsFace1Visibile:                                        ; edges have 2 faces to test
  67++E038 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  68++E03B 4F                   ld          c,a                                 ;  c = a copy of byte 1
  69++E03C E6 0F                and         $0F                                 ;
  70++E03E                      GetFaceAtA
  70++E03E 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  70++E041 ED 31       >                    add         hl,a
  70++E043 7E          >                    ld          a,(hl)                              ; get face visibility
  71++E044              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  72++E044                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  72++E044 A7          >                        and     a
  72++E045 C2 59 E0    >                        jp	    nz,VisibileEdge
  73++E048              IsFace2Visibile:
  74++E048 79                   ld          a,c                                 ; restore byte 1 from c register
  75++E049 ED 23                swapnib                                         ;
  76++E04B E6 0F                and         $0F                                 ; swap high byte into low byte
  77++E04D E5                   push        hl
  78++E04E                      GetFaceAtA
  78++E04E 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  78++E051 ED 31       >                    add         hl,a
  78++E053 7E          >                    ld          a,(hl)                              ; get face visibility
  79++E054 E1                   pop         hl
  80++E055                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  80++E055 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  80++E056 CA 87 E0    >                        jp	    z, LL78EdgeNotVisible
  81++E059              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  82++E059              ;LL79--Visible edge--------------------------------------
  83++E059              ; Get Edge Byte 2
  84++E059 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  85++E05C CD CB DF             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  86++E05F FD 7E 03             ld          a,(IY+3)
  87++E062 CD DD DF             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  88++E065                      IFDEF       CLIPVersion3
  89++E065 ~                        call        ClipLineV3
  90++E065 ~                        ld          a,(ClipSuccess)
  91++E065 ~                        and         a
  92++E065 ~                        jr          z,LL78EdgeNotVisible
  93++E065                      ELSE
  94++E065 CD 8C CA                 call        ClipLine
  95++E068 38 1D                    jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  96++E06A                      ENDIF
  97++E06A              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  98++E06A ED 5B F6 81          ld          de,(varU16)                         ; clipped edges heap address
  99++E06E 21 A6 C0             ld          hl,UBnkNewX1
 100++E071                      FourLDIInstrunctions
 100++E071 ED A0       >                        ldi
 100++E073 ED A0       >                        ldi
 100++E075 ED A0       >                        ldi
 100++E077 ED A0       >                        ldi
 101++E079 ED 53 F6 81          ld          (varU16),de                         ; update U16 with current address
 102++E07D 21 86 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
 103++E080 34                   inc         (hl)
 104++E081 7E                   ld          a,(hl)
 105++E082                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 105++E082 FE 32       >                        cp     LineArraySize
 105++E084 D2 9D E0    >                        jp		nc,CompletedLineGeneration
 106++E087              ; If we hit here we skip the write of line arryay u16
 107++E087              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 108++E087              LL78:
 109++E087 2A F9 80             ld          hl,(varV)                           ; varV is current edge address
 110++E08A 3E 04                ld          a,4
 111++E08C ED 31                add         hl,a
 112++E08E 22 F9 80             ld          (varV),hl
 113++E091 21 EF DF             ld          hl,PLEDGECTR                        ;
 114++E094 34                   inc         (hl)                                ;
 115++E095 7E                   ld          a,(hl)                              ; current edge index ++
 116++E096                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 116++E096 21 FA 81    >                        ld    hl,XX17
 116++E099 BE          >                        cp    (hl)
 116++E09A C2 27 E0    >                        jp      nz,LL75Loop
 117++E09D              CompletedLineGeneration:
 118++E09D              LL81:
 119++E09D              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 120++E09D 3A 86 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 121++E0A0 CB 27                sla         a
 122++E0A2 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 123++E0A4 32 87 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 124++E0A7              ExitEdgeDataLoop:
 125++E0A7 C9                   ret
 126++E0A8
# file closed: ./Universe/Ships/PrepLines.asm
1536+ E0A8
1537+ E0A8              UnivBankSize  EQU $ - StartOfUniv
1538+ E0A8
# file closed: ./Universe/Ships/univ_ship_data.asm
 940  E0A8                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 941  E0A8              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
 942  E0A8                                  SLOT    UniverseBankAddr
 943  E0A8                                  PAGE    BankUNIVDATA1
 944  E0A8                                  ORG	UniverseBankAddr,BankUNIVDATA1
 945  C000 FF           UNIVDATABlock1      DB $FF
 946  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 947  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
 948  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
 949  E000                                  SLOT    UniverseBankAddr
 950  E000                                  PAGE    BankUNIVDATA2
 951  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
 952  C000 FF           UNIVDATABlock2      DB $FF
 953  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 954  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
 955  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
 956  E000                                  SLOT    UniverseBankAddr
 957  E000                                  PAGE    BankUNIVDATA3
 958  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
 959  C000 FF           UNIVDATABlock3      DB $FF
 960  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 961  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
 962  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 963  E000                                  SLOT    UniverseBankAddr
 964  E000                                  PAGE    BankUNIVDATA4
 965  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
 966  C000 FF           UNIVDATABlock4      DB $FF
 967  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 968  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
 969  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
 970  E000                                  SLOT    UniverseBankAddr
 971  E000                                  PAGE    BankUNIVDATA5
 972  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
 973  C000 FF           UNIVDATABlock5      DB $FF
 974  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 975  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
 976  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
 977  E000                                  SLOT    UniverseBankAddr
 978  E000                                  PAGE    BankUNIVDATA6
 979  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
 980  C000 FF           UNIVDATABlock6      DB $FF
 981  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 982  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
 983  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 984  E000                                  SLOT    UniverseBankAddr
 985  E000                                  PAGE    BankUNIVDATA7
 986  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
 987  C000 FF           UNIVDATABlock7      DB $FF
 988  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 989  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
 990  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 991  E000                                  SLOT    UniverseBankAddr
 992  E000                                  PAGE    BankUNIVDATA8
 993  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
 994  C000 FF           UNIVDATABlock8      DB $FF
 995  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 996  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
 997  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 998  E000                                  SLOT    UniverseBankAddr
 999  E000                                  PAGE    BankUNIVDATA9
1000  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
1001  C000 FF           UNIVDATABlock9      DB $FF
1002  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1003  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1004  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1005  E000                                  SLOT    UniverseBankAddr
1006  E000                                  PAGE    BankUNIVDATA10
1007  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1008  C000 FF           UNIVDATABlock10     DB $FF
1009  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1010  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1011  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1012  E000                                  SLOT    UniverseBankAddr
1013  E000                                  PAGE    BankUNIVDATA11
1014  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1015  C000 FF           UNIVDATABlock11     DB $FF
1016  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1017  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1018  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1019  E000                                  SLOT    UniverseBankAddr
1020  E000                                  PAGE    BankUNIVDATA12
1021  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1022  C000 FF           UNIVDATABlock12     DB $FF
1023  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1024  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1025  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1026  E000                                      SLOT    SunBankAddr
1027  E000                                      PAGE    BankSunData
1028  E000                                      ORG	    SunBankAddr,BankSunData
1029  C000                                      INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 03 7D                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB
  94+ C1BB              ; Z Must be at least 2 and positve to warp
  95+ C1BB 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
  96+ C1BE 7E                                   ld      a,(hl)
  97+ C1BF                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  97+ C1BF FE 02       >                        cp    2
  97+ C1C1 D8          >                        ret	 c
  98+ C1C2 35                                   dec     (hl)
  99+ C1C3 C9                                   ret
 100+ C1C4
 101+ C1C4              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 102+ C1C4 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 103+ C1C7 7E                                   ld      a,(hl)
 104+ C1C8                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 104+ C1C8 FE 7F       >                        cp    $7F
 104+ C1CA D0          >                        ret	 nc
 105+ C1CB 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 106+ C1CC C9                                   ret
 107+ C1CD              ; This uses UBNKNodeArray as the list
 108+ C1CD              ; the array is 256 * 2 bytes
 109+ C1CD              ; counter is current row y pos
 110+ C1CD              ; byte 1 is start x pos
 111+ C1CD              ; byte 2 is end x pos
 112+ C1CD              ; if they are both 0 then skip
 113+ C1CD              ; its always horizontal, yellow
 114+ C1CD
 115+ C1CD              ; PLANET
 116+ C1CD
 117+ C1CD
 118+ C1CD              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 118+ C1CD 37          >                        scf
 119+ C1CE C9                                   ret
 120+ C1CF
 121+ C1CF
 122+ C1CF
 123+ C1CF              SunBankDraw:            MACRO
 124+ C1CF ~            .drawLoop               ld      a,(hl)
 125+ C1CF ~                                    ld      c,a                     ; c = left column
 126+ C1CF ~                                    inc     hl
 127+ C1CF ~                                    ld      d,(hl)                  ; d = right col
 128+ C1CF ~                                    inc     hl                      ; now ready for next linel
 129+ C1CF ~                                    push    hl,,bc
 130+ C1CF ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 131+ C1CF ~                                    IfResultZeroGoto .NoLineDraw
 132+ C1CF ~                                    ld      a,d                     ; get right col back
 133+ C1CF ~                                    sub     c                       ; subtract left so a = length
 134+ C1CF ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 135+ C1CF ~                                    call    z, .FixWidth
 136+ C1CF ~                                    ld      d,a                     ; de = length (e - d)
 137+ C1CF ~                                    ld      e,216                   ; yellow
 138+ C1CF ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 139+ C1CF ~            .NoLineDraw:            pop     hl,,bc
 140+ C1CF ~                                    inc     b
 141+ C1CF ~                                    dec     iyh
 142+ C1CF ~                                    IfResultNotZeroGoto  .drawLoop
 143+ C1CF                                      ENDM
 144+ C1CF
 145+ C1CF
 146+ C1CF
 147+ C1CF              SunDraw:                MMUSelectLayer2
 147+ C1CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C1D3 3A 8F C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 149+ C1D6                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 149+ C1D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 149+ C1D7 CA E7 C1    >                        jp	    z, .OffsetIsZero
 150+ C1DA                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 150+ C1DA FE 40       >                        cp      64
 150+ C1DC DA F4 C1    >                        jp		c, .OffsetLT64
 151+ C1DF D6 40        .OffsetGTE64:           sub     64
 152+ C1E1 32 8F C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 153+ C1E4 C3 2C C2                             jp      .StartBank2
 154+ C1E7 06 00        .OffsetIsZero:          ld      b,0                     ; row
 155+ C1E9 FD 26 40                             ld      iyh,64                  ; counter
 156+ C1EC 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 157+ C1EF C3 06 C2                             jp      .StartBank1
 158+ C1F2              ;-- Snuck routine in here so that the macro will be happier
 159+ C1F2 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 160+ C1F3 C9                                   ret
 161+ C1F4 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 162+ C1F7 ED 31                                add     hl,a                    ; .
 163+ C1F9 ED 31                                add     hl,a                    ; .
 164+ C1FB 47                                   ld      b,a                     ; set b row to the actual offset
 165+ C1FC 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 166+ C1FD 3E 40                                ld      a,64                    ; .
 167+ C1FF 91                                   sub     c                       ; .
 168+ C200 FD 67                                ld      iyh,a
 169+ C202 AF                                   xor     a                       ; Ready bank 2 with no offset
 170+ C203 32 8F C5                             ld      (MinYOffset),a          ; .
 171+ C206 D9           .StartBank1:            exx
 172+ C207 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 173+ C209 CD 38 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 174+ C20C D9                                   exx
 175+ C20D                                      SunBankDraw
 175+ C20D 7E          >.drawLoop               ld      a,(hl)
 175+ C20E 4F          >                        ld      c,a                     ; c = left column
 175+ C20F 23          >                        inc     hl
 175+ C210 56          >                        ld      d,(hl)                  ; d = right col
 175+ C211 23          >                        inc     hl                      ; now ready for next linel
 175+ C212 E5 C5       >                        push    hl,,bc
 175+ C214 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 175+ C215             >                        IfResultZeroGoto .NoLineDraw
 175+ C215 CA 24 C2    >                        jp	z,.NoLineDraw
 175+ C218 7A          >                        ld      a,d                     ; get right col back
 175+ C219 91          >                        sub     c                       ; subtract left so a = length
 175+ C21A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 175+ C21B CC F2 C1    >                        call    z, .FixWidth
 175+ C21E 57          >                        ld      d,a                     ; de = length (e - d)
 175+ C21F 1E D8       >                        ld      e,216                   ; yellow
 175+ C221 CD 5D E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 175+ C224 C1 E1       >.NoLineDraw:            pop     hl,,bc
 175+ C226 04          >                        inc     b
 175+ C227 FD 25       >                        dec     iyh
 175+ C229             >                        IfResultNotZeroGoto  .drawLoop
 175+ C229 C2 0D C2    >                        jp	nz,.drawLoop
 176+ C22C 3A 8F C5     .StartBank2:            ld      a,(MinYOffset)
 177+ C22F                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 177+ C22F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 177+ C230 CA 44 C2    >                        jp	    z, .OffsetBank2IsZero
 178+ C233 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 179+ C236 ED 31                                add     hl,a
 180+ C238 ED 31                                add     hl,a
 181+ C23A 4F                                   ld      c,a                     ; iyh = 64 - offset
 182+ C23B 3E 40                                ld      a,64                    ; .
 183+ C23D 91                                   sub     c                       ; .
 184+ C23E FD 67                                ld      iyh,a                   ; .
 185+ C240 41                                   ld      b,c                     ; b = offset row
 186+ C241 C3 4C C2                             jp      .drawLineBank2
 187+ C244 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 188+ C247 06 00                                ld      b,0
 189+ C249 FD 26 40                             ld      iyh,64
 190+ C24C D9           .drawLineBank2:         exx
 191+ C24D 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 192+ C24F CD 38 E0                             call    asm_l2_bank_select      ; now do the lower bank
 193+ C252 D9                                   exx
 194+ C253              ; Could make this a sub routine but unwrapping saves a call
 195+ C253                                      SunBankDraw
 195+ C253 7E          >.drawLoop               ld      a,(hl)
 195+ C254 4F          >                        ld      c,a                     ; c = left column
 195+ C255 23          >                        inc     hl
 195+ C256 56          >                        ld      d,(hl)                  ; d = right col
 195+ C257 23          >                        inc     hl                      ; now ready for next linel
 195+ C258 E5 C5       >                        push    hl,,bc
 195+ C25A BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 195+ C25B             >                        IfResultZeroGoto .NoLineDraw
 195+ C25B CA 6A C2    >                        jp	z,.NoLineDraw
 195+ C25E 7A          >                        ld      a,d                     ; get right col back
 195+ C25F 91          >                        sub     c                       ; subtract left so a = length
 195+ C260 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 195+ C261 CC F2 C1    >                        call    z, .FixWidth
 195+ C264 57          >                        ld      d,a                     ; de = length (e - d)
 195+ C265 1E D8       >                        ld      e,216                   ; yellow
 195+ C267 CD 5D E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 195+ C26A C1 E1       >.NoLineDraw:            pop     hl,,bc
 195+ C26C 04          >                        inc     b
 195+ C26D FD 25       >                        dec     iyh
 195+ C26F             >                        IfResultNotZeroGoto  .drawLoop
 195+ C26F C2 53 C2    >                        jp	nz,.drawLoop
 196+ C272 C9                                   ret
 197+ C273
 198+ C273              ; --------------------------------------------------------------
 199+ C273              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 200+ C273 CD A5 C1     CreateSun:              call    ResetSBnKData
 201+ C276 3A 7A 82                             ld      a,(WorkingSeeds+3)
 202+ C279 E6 07                                and     %00000111
 203+ C27B F6 81                                or      %10000001
 204+ C27D 32 18 C0                             ld      (SBnKzsgn),a
 205+ C280 3A 7C 82                             ld      a,(WorkingSeeds+5)
 206+ C283 E6 03                                and     %00000011
 207+ C285 32 12 C0                             ld      (SBnKxsgn),a
 208+ C288 32 15 C0                             ld      (SBnKysgn),a
 209+ C28B 21 00 00                             ld      hl, $0000
 210+ C28E 22 17 C0                             ld      (SBnKzhi),hl
 211+ C291 3E E3                                ld      a, $E3
 212+ C293 32 16 C0                             ld      (SBnKzlo),a
 213+ C296 C9                                   ret
 214+ C297              ; --------------------------------------------------------------
 215+ C297              ; This creates a sun relative to space station on launch
 216+ C297 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 217+ C29A 21 00 00                             ld      hl,0
 218+ C29D 3E 00                                ld      a,0
 219+ C29F 22 10 C0                             ld      (SBnKxlo),hl
 220+ C2A2 22 13 C0                             ld      (SBnKylo),hl
 221+ C2A5 21 00 E0                             ld      hl,$E000
 222+ C2A8 22 16 C0                             ld      (SBnKzlo),hl
 223+ C2AB 32 12 C0                             ld      (SBnKxsgn),a
 224+ C2AE 32 18 C0                             ld      (SBnKzsgn),a
 225+ C2B1 3E 06                                ld      a,$06
 226+ C2B3 32 15 C0                             ld      (SBnKysgn),a
 227+ C2B6 C9                                   ret
 228+ C2B7              ; --------------------------------------------------------------
 229+ C2B7              ; This sets current universe object to a planet,they use sign + 23 bit positions
 230+ C2B7              ;;TODOCreatePlanet:           call    ResetSBnKData
 231+ C2B7              ;;TODO                        ld      a,(DisplayTekLevel)
 232+ C2B7              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 233+ C2B7              ;;TODO                        or      $10000000
 234+ C2B7              ;;TODO                        ld      (SBnKShipType),a
 235+ C2B7              ;;TODO                        xor     a
 236+ C2B7              ;;TODO                        ld      (SBnKaiatkecm),a
 237+ C2B7              ;;TODO                        MaxUnivPitchAndRoll
 238+ C2B7              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 239+ C2B7              ;;TODO                        and     %00000011               ; .
 240+ C2B7              ;;TODO                        adc     3                       ; .
 241+ C2B7              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 242+ C2B7              ;;TODO                        rr      a
 243+ C2B7              ;;TODO                        ld      (PlanetXsgn),a
 244+ C2B7              ;;TODO                        ld      (PlanetYsgn),a
 245+ C2B7              ;;TODO                        ret
 246+ C2B7
 247+ C2B7
 248+ C2B7                                 ;     include "./Maths/ADDHLDESignBC.asm"
 249+ C2B7
 250+ C2B7 7C           SunADDHLDESignedv3:     ld      a,h
 251+ C2B8 E6 80                                and     SignOnly8Bit
 252+ C2BA 47                                   ld      b,a                         ;save sign bit in b
 253+ C2BB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 254+ C2BC                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 254+ C2BC FA D7 C2    >                        jp		m, .SunADDHLDEOppSGN
 255+ C2BF 78           .SunADDHLDESameSigns:   ld      a,b
 256+ C2C0 B2                                   or      d
 257+ C2C1                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 257+ C2C1 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 258+ C2C4                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 258+ C2C4 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 259+ C2C7 19                                   add     hl,de
 260+ C2C8 C9                                   ret
 261+ C2C9 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 262+ C2CA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 263+ C2CC 67                                   ld      h,a
 264+ C2CD 7A                                   ld      a,d
 265+ C2CE E6 7F                                and     SignMask8Bit
 266+ C2D0 57                                   ld      d,a
 267+ C2D1 19                                   add     hl,de
 268+ C2D2 3E 80                                ld      a,SignOnly8Bit
 269+ C2D4 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 270+ C2D5 67                                   ld      h,a
 271+ C2D6 C9                                   ret
 272+ C2D7 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 273+ C2D8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 274+ C2DA 67                                   ld      h,a
 275+ C2DB 7A                                   ld      a,d
 276+ C2DC E6 7F                                and     SignMask8Bit
 277+ C2DE 57                                   ld      d,a
 278+ C2DF B7                                   or      a
 279+ C2E0 ED 52                                sbc     hl,de
 280+ C2E2 38 04                                jr      c,.SunADDHLDEOppInvert
 281+ C2E4 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 282+ C2E5 B4                                   or      h
 283+ C2E6 67                                   ld      h,a                         ; set the previou sign value
 284+ C2E7 C9                                   ret
 285+ C2E8              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 285+ C2E8 AF          >                    xor a
 285+ C2E9 95          >                    sub l
 285+ C2EA 6F          >                    ld l,a
 285+ C2EB 9F          >                    sbc a,a
 285+ C2EC 94          >                    sub h
 285+ C2ED 67          >                    ld h,a
 286+ C2EE 78                                   ld      a,b
 287+ C2EF EE 80                                xor     SignOnly8Bit                ; flip sign bit
 288+ C2F1 B4                                   or      h
 289+ C2F2 67                                   ld      h,a                         ; recover sign
 290+ C2F3 C9                                   ret
 291+ C2F4
 292+ C2F4              ; we could cheat, flip the sign of DE and just add but its not very optimised
 293+ C2F4 7C           .SunSUBHLDESignedv3:        ld      a,h
 294+ C2F5 E6 80                                and     SignOnly8Bit
 295+ C2F7 47                                   ld      b,a                         ;save sign bit in b
 296+ C2F8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 297+ C2F9                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 297+ C2F9 FA 27 C3    >                        jp		m, .SunSUBHLDEOppSGN
 298+ C2FC 78           .SunSUBHLDESameSigns:       ld      a,b
 299+ C2FD B2                                   or      d
 300+ C2FE                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 300+ C2FE FA 08 C3    >                        jp		m, .SunSUBHLDESameNeg
 301+ C301 B7                                   or      a
 302+ C302 ED 52                                sbc     hl,de
 303+ C304                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 303+ C304 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 304+ C307 C9                                   ret
 305+ C308 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 306+ C309 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 307+ C30B 67                                   ld      h,a
 308+ C30C 7A                                   ld      a,d
 309+ C30D E6 7F                                and     SignMask8Bit
 310+ C30F 57                                   ld      d,a
 311+ C310 B7                                   or      a
 312+ C311 ED 52                                sbc     hl,de
 313+ C313                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 313+ C313 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 314+ C316 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 315+ C317 F6 80                                or      SignOnly8Bit
 316+ C319 67                                   ld      h,a
 317+ C31A C9                                   ret
 318+ C31B              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 318+ C31B AF          >                    xor a
 318+ C31C 95          >                    sub l
 318+ C31D 6F          >                    ld l,a
 318+ C31E 9F          >                    sbc a,a
 318+ C31F 94          >                    sub h
 318+ C320 67          >                    ld h,a
 319+ C321 78                                   ld      a,b
 320+ C322 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 321+ C324 B4                                   or      h
 322+ C325 67                                   ld      h,a                         ; recover sign
 323+ C326 C9                                   ret
 324+ C327 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 325+ C328 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 326+ C329 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 327+ C32B 67                                   ld      h,a
 328+ C32C 7A                                   ld      a,d
 329+ C32D E6 7F                                and     SignMask8Bit
 330+ C32F 57                                   ld      d,a
 331+ C330 19                                   add     hl,de
 332+ C331 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 333+ C332 B4                                   or      h
 334+ C333 67                                   ld      h,a                         ; set the previou sign value
 335+ C334 C9                                   ret
 336+ C335
 337+ C335
 338+ C335              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 338+ C335 CB 7C       >                        bit 	7,h
 338+ C337 C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 339+ C33A              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 339+ C33A CB 7C       >                        bit 	7,h
 339+ C33C C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 340+ C33F ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 341+ C341 C9                                   ret
 342+ C342 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 343+ C344 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 344+ C345 CB FA                                set     7,d
 345+ C347 C9                                   ret
 346+ C348 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 347+ C34A                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 347+ C34A CB 7A       >                        bit 	7,d
 347+ C34C C2 54 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 348+ C34F ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 349+ C351 CB FC                                set     7,h
 350+ C353 C9                                   ret
 351+ C354 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 352+ C356 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 353+ C357 CB FA                                set     7,d
 354+ C359 CB FC                                set     7,h
 355+ C35B C9                                   ret
 356+ C35C
 357+ C35C
 358+ C35C                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C35C              TransposeSXX12BySunToSXX15:
   2++C35C 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C35F 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C360 E6 80                                and		$80									; check sign bit on high byte
   5++C362 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C363                                      ;110921 debugld      h,0
   7++C363 7C                                   ld      a,h
   8++C364 E6 7F                                and     $7F
   9++C366 67                                   ld      h,a
  10++C367                                      ;110921 debugld      h,0
  11++C367 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C36B 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C36E E6 80                                and		$80									; make sure we only have bit 7
  14++C370 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C371 CD EF 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C374 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C375 67                                   ld		h,a
  18++C376 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C379              ; ..................................
  20++C379 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C37C 7C                                   ld		a,h
  22++C37D E6 80                                and		$80
  23++C37F 47                                   ld		b,a
  24++C380                                      ;110921 debugld      h,0
  25++C380 7C                                   ld      a,h
  26++C381 E6 7F                                and     $7F
  27++C383 67                                   ld      h,a
  28++C384                                      ;110921 debugld      h,0
  29++C384 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C388 3A 15 C0                             ld		a,(SBnKysgn)
  31++C38B E6 80                                and		$80									; make sure we only have bit 7
  32++C38D 4F                                   ld		c,a
  33++C38E CD EF 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C391 B4                                   or		h									; combine sign in A with H
  35++C392 67                                   ld		h,a
  36++C393 22 7A C0                             ld		(SBnKYScaled),hl
  37++C396              ; ..................................
  38++C396 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C399 7C                                   ld		a,h
  40++C39A E6 80                                and		$80
  41++C39C 47                                   ld		b,a
  42++C39D                                      ;110921 debugld      h,0
  43++C39D 7C                                   ld      a,h
  44++C39E E6 7F                                and     $7F
  45++C3A0 67                                   ld      h,a
  46++C3A1                                      ;110921 debugld      h,0
  47++C3A1 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C3A5 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C3A8 E6 80                                and		$80									; make sure we only have bit 7
  50++C3AA 4F                                   ld		c,a
  51++C3AB CD EF 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C3AE B4                                   or		h									; combine sign in A with H
  53++C3AF 67                                   ld		h,a
  54++C3B0 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3B2 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3B4 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3B6 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3B8 7D                                   ld      a,l                                 ; get low byte now
  59++C3B9                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3B9 FE 04       >                        cp      4
  59++C3BB DA CA C3    >                        jp		c, .ClampZto4
  60++C3BE 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3C1 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3C2 32 0F 82                             ld      (varT),a
  63++C3C5 7C                                   ld		a,h
  64++C3C6 32 F2 81                             ld      (varU),a
  65++C3C9 C9                                   ret
  66++C3CA              ; This is where we limit 4 to a minimum of 4
  67++C3CA 21 04 00     .ClampZto4:             ld		hl,4
  68++C3CD 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3D0 7D                                   ld		a,l
  70++C3D1 32 0F 82                             ld      (varT),a                            ;                                                                           ;;;
  71++C3D4 7C                                   ld		a,h
  72++C3D5 32 F2 81                             ld      (varU),a 						; compatibility for now
  73++C3D8 C9                                   ret
  74++C3D9
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 359+ C3D9
 360+ C3D9
 361+ C3D9 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 362+ C3DD 2A 78 C0                             ld			hl,(SBnKXScaled)
 363+ C3E0 ED 5B 7A C0                          ld			de,(SBnKYScaled)
 364+ C3E4 78           .SetABSbc:              ld			a,b
 365+ C3E5 DD 67                                ld			ixh,a
 366+ C3E7 E6 7F                                and			SignMask8Bit
 367+ C3E9 47                                   ld			b,a									; bc = ABS bc
 368+ C3EA 7C           .SetABShl:              ld			a,h
 369+ C3EB DD 6F                                ld			ixl,a
 370+ C3ED E6 7F                                and			SignMask8Bit
 371+ C3EF 67                                   ld			h,a									; hl = ABS hl
 372+ C3F0 7A           .SetABSde:              ld			a,d
 373+ C3F1 FD 67                                ld			iyh,a
 374+ C3F3 E6 7F                                and			SignMask8Bit
 375+ C3F5 57                                   ld			d,a									; de = ABS de
 376+ C3F6 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 377+ C3F7 B4                                   or			h                                   ; XX15+1	\ x hi
 378+ C3F8 B2                                   or			d                                   ; XX15+4	\ y hi
 379+ C3F9 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 380+ C3FB                                      ShiftHLRight1
 380+ C3FB CB 3C       >			   srl h
 380+ C3FD CB 1D       >			   rr  l
 381+ C3FF                                      ShiftDERight1
 381+ C3FF CB 3A       >			   srl d
 381+ C401 CB 1B       >			   rr  e
 382+ C403                                      ShiftBCRight1
 382+ C403 CB 38       >			   srl b
 382+ C405 CB 19       >			   rr  c
 383+ C407 C3 F6 C3                             jp          .ScaleNodeTo8BitLoop
 384+ C40A              ; now we have scaled values we have to deal with sign
 385+ C40A DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 386+ C40C E6 80                                and			SignOnly8Bit
 387+ C40E B0                                   or			b
 388+ C40F 47                                   ld			b,a
 389+ C410 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 390+ C412 E6 80                                and			SignOnly8Bit
 391+ C414 B4                                   or			h
 392+ C415 67                                   ld			h,a
 393+ C416 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 394+ C418 E6 80                                and			SignOnly8Bit
 395+ C41A B2                                   or			d
 396+ C41B 57                                   ld			d,a
 397+ C41C ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 398+ C420 22 78 C0                             ld			(SBnKXScaled),hl
 399+ C423 ED 53 7A C0                          ld			(SBnKYScaled),de
 400+ C427 78                                   ld			a,b
 401+ C428 32 F2 81                             ld			(varU),a
 402+ C42B 79                                   ld			a,c
 403+ C42C 32 0F 82                             ld			(varT),a
 404+ C42F C9                                   ret
 405+ C430
 406+ C430              ;--------------------------------------------------------------------------------------------------------
 407+ C430              ;;;;X = normal scale
 408+ C430              ;;;;ZtempHi = zhi
 409+ C430              ;;;;......................................................
 410+ C430              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 411+ C430              ;;;;  Loop                                              ::LL90
 412+ C430              ;;;;     inc X
 413+ C430              ;;;;     divide X, Y & ZtempHiLo by 2
 414+ C430              ;;;;  Until ZtempHi = 0
 415+ C430              ;;;;......................................................
 416+ C430              ;-LL21---------------------------------------------------------------------------------------------------
 417+ C430              ;                        include "./Universe/NormaliseTransMat.asm"
 418+ C430              ;-LL91---------------------------------------------------------------------------------------------------
 419+ C430
 420+ C430              ; Now we have
 421+ C430              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 422+ C430              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 423+ C430              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 424+ C430              ;
 425+ C430              ;--------------------------------------------------------------------------------------------------------
 426+ C430              ;--------------------------------------------------------------------------------------------------------
 427+ C430              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 428+ C430              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 429+ C430              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 430+ C430              ; Returns
 431+ C430              ;
 432+ C430              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 433+ C430              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 434+ C430              ;
 435+ C430              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 436+ C430              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 437+ C430              ;
 438+ C430              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 439+ C430              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 440+ C430
 441+ C430
 442+ C430               ; TESTEDOK
 443+ C430              SXX12DotOneRow:
sun_data.asm(444): error: Unrecognized instruction: N0equN1byN2div256 varT, (hl), (SBnKXScaled)
 444+ C430              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 445+ C430 23                                   inc     hl                                  ; move to sign byte
 446+ C431              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 446+ C431 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 446+ C434 AE          >                        xor     (hl)
 447+ C435 32 F5 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 448+ C438 23                                   inc     hl
sun_data.asm(449): error: Unrecognized instruction: N0equN1byN2div256 varQ, (hl),(SBnKYScaled)
 449+ C439              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 450+ C439                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 450+ C439 3A 0F 82    >                        ld       a,(varT)
 450+ C43C 32 F4 81    >                        ld       (varR),a
 451+ C43F 23                                   inc     hl
 452+ C440                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 452+ C440 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 452+ C443 AE          >                        xor     (hl)
 453+ C444              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 454+ C444 E5           SSTequSRplusAQ           push    hl
 455+ C445 CD 86 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 456+ C448 E1                                   pop     hl
 457+ C449 32 0F 82                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 458+ C44C 23                                   inc     hl
sun_data.asm(459): error: Unrecognized instruction: N0equN1byN2div256 varQ,(hl),(SBnKZScaled)
 459+ C44D              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 460+ C44D                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 460+ C44D 3A 0F 82    >                        ld       a,(varT)
 460+ C450 32 F4 81    >                        ld       (varR),a
 461+ C453 23                                   inc     hl
 462+ C454                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 462+ C454 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 462+ C457 AE          >                        xor     (hl)
 463+ C458              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 464+ C458 CD 86 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 465+ C45B              ; Now we exit with A = result S = Sign
 466+ C45B C9                                   ret
 467+ C45C
 468+ C45C
 469+ C45C
 470+ C45C              ;--------------------------------------------------------------------------------------------------------
 471+ C45C                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C45C              CopySXX12ScaledToSXX18:
   2++C45C              CopyResultToSDrawCam:
   3++C45C                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C45C 3A 7E C0    >                        ld       a,(SXX12)
   3++C45F 32 6C C0    >                        ld       (SXX18),a
   4++C462                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C462 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C465 32 6E C0    >                        ld       (SXX18+2),a
   5++C468                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C468 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C46B 32 6F C0    >                        ld       (SXX18+3),a
   6++C46E                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C46E 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C471 32 71 C0    >                        ld       (SXX18+5),a
   7++C474                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C474 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C477 32 72 C0    >                        ld       (SXX18+6),a
   8++C47A                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C47A 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C47D 32 74 C0    >                        ld       (SXX18+8),a
   9++C480 C9                   ret
  10++C481
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 472+ C481              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 473+ C481              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 474+ C481              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 475+ C481              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 476+ C481              ;--------------------------------------------------------------------------------------------------------
 477+ C481              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 478+ C481              ;--------------------------------------------------------------------------------------------------------
 479+ C481
 480+ C481 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 481+ C483 F8                                   ret     m
 482+ C484 21 78 C0                             ld      hl,SBnKXScaled
 483+ C487 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 484+ C489 23                                   inc     hl                          ; looking at SunXX15 x sign now
 485+ C48A 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 486+ C48B CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 487+ C48D 23                                   inc     hl                          ; looking at SunXX15 y sign now
 488+ C48E 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 489+ C48F CB 3E                                srl     (hl)
 490+ C491 C3 81 C4                             jp      ScaleDownSXX15byIXH
 491+ C494 C9                                   ret
 492+ C495
 493+ C495 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 494+ C498 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 495+ C49A 23                                   inc     hl                          ; looking at XX18 x sign now
 496+ C49B 23                                   inc     hl                          ; looking at XX18 y Lo now
 497+ C49C CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 498+ C49E 23                                   inc     hl                          ; looking at XX18 y sign now
 499+ C49F 23                                   inc     hl                          ; looking at XX18 z Lo now
 500+ C4A0 CB 3E                                srl     (hl)
 501+ C4A2 C9                                   ret
 502+ C4A3
 503+ C4A3              ; ......................................................                                                         ;;;
 504+ C4A3
 505+ C4A3
 506+ C4A3
 507+ C4A3
 508+ C4A3              ; Pitch and roll are 2 phases
 509+ C4A3              ; 1 - we apply our pitch and roll to the ship position
 510+ C4A3              ;       x -> x + alpha * (y - alpha * x)
 511+ C4A3              ;       y -> y - alpha * x - beta * z
 512+ C4A3              ;       z -> z + beta * (y - alpha * x - beta * z)
 513+ C4A3              ; which can be simplified as:
 514+ C4A3              ;       1. K2 = y - alpha * x
 515+ C4A3              ;       2. z = z + beta * K2
 516+ C4A3              ;       3. y = K2 - beta * z
 517+ C4A3              ;       4. x = x + alpha * y
 518+ C4A3              ; 2 - we apply our patch and roll to the ship orientation
 519+ C4A3              ;      Roll calculations:
 520+ C4A3              ;
 521+ C4A3              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 522+ C4A3              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 523+ C4A3              ;      Pitch calculations:
 524+ C4A3              ;
 525+ C4A3              ;        nosev_y = nosev_y - beta * nosev_z_hi
 526+ C4A3              ;        nosev_z = nosev_z + beta * nosev_y_hi
 527+ C4A3
 528+ C4A3
 529+ C4A3                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4A3
   2++C4A3              ; Full version
   3++C4A3              ; 1. K2 = y - alpha * x
   4++C4A3              ; 2. z = z + beta * K2
   5++C4A3              ; 3. y = K2 - beta * z
   6++C4A3              ; 4. x = x + alpha * y
   7++C4A3
   8++C4A3
   9++C4A3
  10++C4A3              ; SunrollWork holds Alpha intermidate results
  11++C4A3              ;  1. K2 = y - alpha * x
  12++C4A3              ;  2. z = z + beta * K2
  13++C4A3              ;  3. y = K2 - beta * z
  14++C4A3              ;  4. x = x + alpha * y
  15++C4A3              ;.... or
  16++C4A3              ;  2. z = z + (beta * (y - alpha * x))
  17++C4A3              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4A3              ;  4. x = x + (alpha * y)
  19++C4A3
  20++C4A3
  21++C4A3              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4A3              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4A3              ; Need to write a test routine for roll and pitchs
  24++C4A3 00 00 00 00  SunAlphaMulX            DS 4
  25++C4A7 00 00 00 00  SunAlphaMulY            DS 4
  26++C4AB 00 00 00 00  SunBetaMulZ             DS 4
  27++C4AF 00 00 00     SunK2                   DS 3
  28++C4B2
  29++C4B2 3A 0C 81     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4B5 21 FF 80                             ld      hl,BETA
  31++C4B8 B6                                   or      (hl)
  32++C4B9 E6 7F                                and     SignMask8Bit
  33++C4BB CA 6C C5                             jp      z,.NoRotation
  34++C4BE 3A 0C 81     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4C1 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4C3 57                                   ld      d,a                         ; .
  37++C4C4 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4C7 5F                                   ld      e,a                         ; .
  39++C4C8 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4CB CD F1 95                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4CE              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4CE                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4CE 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4CF 32 A4 C4                             ld      (SunAlphaMulX+1),a
  45++C4D2 7B                                   ld      a,e
  46++C4D3 32 A5 C4                             ld      (SunAlphaMulX+2),a
  47++C4D6 7A                                   ld      a,d
  48++C4D7 32 A6 C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4DA ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C4DE 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C4E1 6F                                   ld      l,a                         ; .
  52++C4E2 ED 4B A5 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C4E6 3A A4 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C4E9 67                                   ld      h,a                         ; .
  55++C4EA CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C4ED 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C4EE 32 AF C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C4F1 ED 53 B0 C4                          ld      (SunK2+1),de                ;
  59++C4F5 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C4F6 5F                                   ld      e,a                         ; .
  61++C4F7 3A FF 80                             ld      a,(BETA)                    ; D = BETA
  62++C4FA 57                                   ld      d,a                         ; .
  63++C4FB CD F1 95                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C4FE ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C502 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C505 67                                   ld      h,a                         ;
  67++C506 CD 6D 93                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C509 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C50D 7D                                   ld      a,l                         ; .
  70++C50E 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C511 3A FF 80     .CalcBetaZ:             ld      a,(BETA)
  72++C514 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C516 57                                   ld      d,a                         ; .
  74++C517 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C51A 5F                                   ld      e,a                         ; .
  76++C51B 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C51E CD F1 95                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C521              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C521                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C521                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C521                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C521                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C521                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C521                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C521                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C521 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C523 65                                   ld      h,l
  88++C524 ED 5B B0 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C528 3A AF C4                             ld      a,(SunK2)
  90++C52B 6F                                   ld      l,a
  91++C52C CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C52F ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C533 7D                                   ld      a,l                         ; .
  94++C534 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C537 3A 0C 81     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C53A 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C53B 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C53E 5F                                   ld      e,a                         ; .
  99++C53F 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C542 CD F1 95                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C545 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C546 32 A7 C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C549 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C54A 32 A8 C4                             ld      (SunAlphaMulY+1),a
 105++C54D 7B                                   ld      a,e
 106++C54E 32 A9 C4                             ld      (SunAlphaMulY+2),a
 107++C551 7A                                   ld      a,d
 108++C552 32 AA C4                             ld      (SunAlphaMulY+3),a
 109++C555 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C557 65                                   ld      h,l                         ; .
 111++C558 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C55C 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C55F 6F                                   ld      l,a                         ; .
 114++C560 CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C563 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C564 63                                   ld      h,e                         ;
 117++C565 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C568 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C56B C9                                   ret
 120++C56C 3A ED 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C56F                                      ReturnIfAIsZero
 121++C56F A7          >                        and     a
 121++C570 C8          >                        ret     z
 122++C571 0E 00                                ld      c,0                         ;
 123++C573 67                                   ld      h,a                         ;
 124++C574 06 80                                ld      b,$80                       ;
 125++C576 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C57A 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C57D 6F                                   ld      l,a                         ; .
 128++C57E CD 6D 93                             call    AddBCHtoDELsigned           ; update speed
 129++C581 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C585 7D                                   ld      a,l
 131++C586 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C589 C9                                   ret
 133++C58A              ;
 134++C58A              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C58A              ;                        ld      hl,BETA
 136++C58A              ;                        or      (hl)
 137++C58A              ;                        and     SignMask8Bit
 138++C58A              ;                        ret     z
 139++C58A              ;.CalcZ:                 ;break
 140++C58A              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C58A              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C58A              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C58A              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C58A              ;                        ld      e,a                         ;
 145++C58A              ;                        ld      hl,(SBnKxhi)                ;
 146++C58A              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C58A              ;                        ld      a,d
 148++C58A              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C58A              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C58A              ;                        ld      h,a
 151++C58A              ;                        ld      bc,(SBnKyhi)
 152++C58A              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C58A              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C58A              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C58A              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C58A              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C58A              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C58A              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C58A              ;                        ld      a,(SunRollResult)           ; .
 160++C58A              ;                        ;ld      (SunRollResult2),a          ; .
 161++C58A              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C58A              ;                        ld      a,(BETA)                    ; get pitch
 163++C58A              ;                        ld      d,a                         ; now D = BETA
 164++C58A              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C58A              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C58A              ;                        ld      a,(SBnKzlo)                 ;
 167++C58A              ;                        ld      h,a                         ;
 168++C58A              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C58A              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C58A              ;                        ld      (SBnKzhi),de                ; .
 171++C58A              ;                        ld      a,l                         ; .
 172++C58A              ;                        ld      (SunZResult),a              ; .
 173++C58A              ;                        ld      (SBnKzlo),a                 ; .
 174++C58A              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C58A              ;                        ld      e,l                         ;
 176++C58A              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C58A              ;                        ld      d,a                         ;
 178++C58A              ;                        xor     SignOnly8Bit                ;
 179++C58A              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C58A              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C58A              ;                        ld      a,(SunRollResult)           ;
 182++C58A              ;                        ld      h,a                         ;
 183++C58A              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C58A              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C58A              ;                        ld      a,l                         ;
 186++C58A              ;                        ld      (SBnKylo),a                 ;
 187++C58A              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C58A              ;                        ld      e,l                         ;
 189++C58A              ;                        ld      a,(ALPHA)
 190++C58A              ;                        ld      d,a                         ; D = alpha
 191++C58A              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C58A              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C58A              ;                        ld      a,(SBnKxlo)                 ;
 194++C58A              ;                        ld      h,a                         ;
 195++C58A              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C58A              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C58A              ;                        ld      a,h                         ;
 198++C58A              ;                        ld      (SBnKxlo),a                 ;
 199++C58A              ;                        ret
 200++C58A              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 530+ C58A              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 531+ C58A
 532+ C58A 00           SunOnScreen             DB 0
 533+ C58B 00 00        cLineArrayPtr            DW 0
 534+ C58D 00           LineCount               DB 0
 535+ C58E 00           RaggedSize              DB 0
 536+ C58F 00           MinYOffset              DB 0
 537+ C590 00           MaxYOffSet              DB 0
 538+ C591 00 00        SunScrnX                DW  0       ; signed
 539+ C593 00 00        SunScrnY                DW  0       ; signed
 540+ C595 00           SunRadius               DB  0       ; unsigned
 541+ C596              ; draw circle
 542+ C596
 543+ C596              ;
 544+ C596              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 545+ C596
 546+ C596 00 00 00 00  SunVarK                 DS 4
 547+ C59A 00 00 00     SunVarP                 DS 3
 548+ C59D 00           SunVarQ                 DS 1
 549+ C59E 00           SunVarR                 DS 1
 550+ C59F 00           SunVarS                 DS 1
 551+ C5A0 00           SunVarT                 DS 1
 552+ C5A1
 553+ C5A1              ; Optimisation
 554+ C5A1              ; if a <> 0
 555+ C5A1              ;       divide AH by CD
 556+ C5A1              ; if h <> 0
 557+ C5A1              ;      if c <> 0 return 0
 558+ C5A1              ;      else
 559+ C5A1              ;        divide HL by DE
 560+ C5A1              ; if l <>0
 561+ C5A1              ;      if c or d <> 0 return 0
 562+ C5A1              ;      else
 563+ C5A1              ;        divide l by e
 564+ C5A1              ;
 565+ C5A1 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 566+ C5A2 79                                   ld      a,c                         ; check for divide by zero
 567+ C5A3 B2                                   or      d                           ; .
 568+ C5A4 B3                                   or      e                           ; .
 569+ C5A5                                      JumpIfZero      .divideByZero       ; .
 569+ C5A5 CA BE C5    >                        jp	z,.divideByZero
 570+ C5A8 78                                   ld      a,b                         ; get a back
 571+ C5A9                                      JumpIfAIsNotZero    .divideAHLbyCDE
 571+ C5A9 A7          >                        and     a
 571+ C5AA C2 C5 C5    >                        jp	    nz,.divideAHLbyCDE
 572+ C5AD 7C           .AIsZero:               ld      a,h
 573+ C5AE                                      JumpIfAIsNotZero    .divideHLbyDE
 573+ C5AE A7          >                        and     a
 573+ C5AF C2 CC C5    >                        jp	    nz,.divideHLbyDE
 574+ C5B2 7D           .HIsZero:               ld      a,l
 575+ C5B3                                      JumpIfAIsNotZero    .divideLbyE
 575+ C5B3 A7          >                        and     a
 575+ C5B4 C2 DB C5    >                        jp	    nz,.divideLbyE
 576+ C5B7              .resultIsZero:          ZeroA
 576+ C5B7 AF          >                        xor a
 577+ C5B8 67                                   ld      h,a                        ; result is zero so set hlde
 578+ C5B9 6F                                   ld      l,a                        ; result is zero so set hlde
 579+ C5BA 54 5D                                ld      de,hl
 580+ C5BC                                      ClearCarryFlag
 580+ C5BC B7          >                        or a
 581+ C5BD C9                                   ret
 582+ C5BE 3E FF        .divideByZero:          ld      a,$FF
 583+ C5C0 67                                   ld      h,a
 584+ C5C1 6F                                   ld      l,a
 585+ C5C2 54 5D                                ld      de,hl
 586+ C5C4                                      SetCarryFlag
 586+ C5C4 37          >                        scf
 587+ C5C5              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 588+ C5C5              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 589+ C5C5 CD 64 94     .divideAHLbyCDE:        call    Div24by24
 590+ C5C8 EB                                   ex      hl,de                         ; ahl is result
 591+ C5C9 79                                   ld      a,c                           ; ahl is result
 592+ C5CA                                      ClearCarryFlag
 592+ C5CA B7          >                        or a
 593+ C5CB
 594+ C5CB C9                                   ret
 595+ C5CC              ; AHL = 0hl/0de as A is zero
 596+ C5CC 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 597+ C5CD                                      JumpIfAIsNotZero   .resultIsZero
 597+ C5CD A7          >                        and     a
 597+ C5CE C2 B7 C5    >                        jp	    nz,.resultIsZero
 598+ C5D1 44 4D                                ld      bc,hl
 599+ C5D3 CD C0 98                             call    BC_Div_DE                   ; BC = HL/DE
 600+ C5D6 60 69                                ld      hl,bc
 601+ C5D8                                      ZeroA                               ; so we can set A to Zero
 601+ C5D8 AF          >                        xor a
 602+ C5D9                                      ClearCarryFlag
 602+ C5D9 B7          >                        or a
 603+ C5DA C9                                   ret
 604+ C5DB              ; AHL = 00l/00e as A and H are zero
 605+ C5DB 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 606+ C5DC B2                                   or      d
 607+ C5DD                                      JumpIfAIsNotZero   .resultIsZero
 607+ C5DD A7          >                        and     a
 607+ C5DE C2 B7 C5    >                        jp	    nz,.resultIsZero
 608+ C5E1 4B                                   ld      c,e
 609+ C5E2 5D                                   ld      e,l
 610+ C5E3 CD 82 98                             call    E_Div_C
 611+ C5E6 6F                                   ld      l,a
 612+ C5E7                                      ZeroA
 612+ C5E7 AF          >                        xor a
 613+ C5E8 67                                   ld      h,a
 614+ C5E9                                      ClearCarryFlag
 614+ C5E9 B7          >                        or a
 615+ C5EA C9                                   ret
 616+ C5EB
 617+ C5EB
 618+ C5EB              ; Needs tuning for registers vs memroy
 619+ C5EB 22 9A C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 620+ C5EE 32 9C C5                             ld      (SunVarP+2),a
 621+ C5F1 ED 53 9D C5                          ld      (SunVarQ),de
 622+ C5F5 79                                   ld      a,c
 623+ C5F6 32 9F C5                             ld      (SunVarS),a
 624+ C5F9 3A 9A C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 625+ C5FC F6 01                                or      1
 626+ C5FE 32 9A C5                             ld      (SunVarP),a
 627+ C601 3A 9C C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 628+ C604 21 9F C5                             ld      hl,SunVarS
 629+ C607 AE                                   xor     (hl)
 630+ C608 E6 80                                and     SignOnly8Bit
 631+ C60A 32 A0 C5                             ld      (SunVarT),a
 632+ C60D 06 00                                ld      b,0                         ; b = y counter
 633+ C60F 3A 9C C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 634+ C612 E6 7F                                and     SignMask8Bit                ; .
 635+ C614 2A 9A C5                             ld      hl,(SunVarP)                ; shift P left
 636+ C617              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 636+ C617 FE 40       >                        cp     64
 636+ C619 D2 26 C6    >                        jp		nc,.SunDV14
 637+ C61C                                      ShiftHLLeft1                        ;
 637+ C61C CB 25       >			   sla l
 637+ C61E CB 14       >			   rl  h
 638+ C620 CB 17                                rl      a                           ;
 639+ C622 04                                   inc     b                           ; increase shift count
 640+ C623 C3 17 C6                             jp      .SunDVL9
 641+ C626 22 9A C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 642+ C629 32 9C C5                             ld      (SunVarP+2),a
 643+ C62C 3A 9F C5                             ld      a,(SunVarS)                 ; a= ABS varS
 644+ C62F E6 7F                                and     SignMask8Bit
 645+ C631 2A 9D C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 646+ C634 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 647+ C635                                      ShiftHLLeft1                        ; varQRA  shift left
 647+ C635 CB 25       >			   sla l
 647+ C637 CB 14       >			   rl  h
 648+ C639 CB 17                                rl      a                           ;
 649+ C63B F2 34 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 650+ C63E 22 9D C5                             ld      (SunVarQ),hl                ; save QR
 651+ C641 32 9F C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 652+ C644                                      ;ld      a,h
 653+ C644                                      ;ld      (varQ),a
 654+ C644 4F                                   ld      c,a
 655+ C645 3A 9C C5                             ld      a,(SunVarP+2)
 656+ C648 C5                                   push    bc                          ; save shift counter in b
 657+ C649 CD 34 98                             call    DIV16Amul256dCUNDOC
 658+ C64C                                      ;call    RequAmul256divQ
 659+ C64C 79                                   ld      a, c
 660+ C64D 32 F4 81                             ld      (varR),a
 661+ C650 C1                                   pop     bc                          ; retrieve shift counter
 662+ C651 21 00 00                             ld      hl,0                        ; set K to 0
 663+ C654 22 96 C5                             ld      (SunVarK),hl                ; .
 664+ C657 22 98 C5                             ld      (SunVarK+2),hl              ; .
 665+ C65A CB 78                                bit     7,b                         ; is counter positive
 666+ C65C 28 32                                jr      z,.SunDV12                  ; .
 667+ C65E 3A F4 81                             ld      a,(varR)                    ;
 668+ C661 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 669+ C663 21 97 C5                             ld      hl,SunVarK+1                ; .
 670+ C666 CB 16                                rl      (hl)                        ; .
 671+ C668 23                                   inc     hl                          ; .
 672+ C669 CB 16                                rl      (hl)                        ; .
 673+ C66B 23                                   inc     hl                          ; .
 674+ C66C CB 16                                rl      (hl)                        ; .
 675+ C66E 04                                   inc     b
 676+ C66F 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 677+ C671 32 96 C5                             ld      (SunVarK),a
 678+ C674 3A 99 C5                             ld      a,(SunVarK+3)
 679+ C677 21 A0 C5                             ld      hl,SunVarT
 680+ C67A B6                                   or      (hl)
 681+ C67B 32 99 C5                             ld      (SunVarK+3),a
 682+ C67E C9                                   ret
 683+ C67F 3A F4 81     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 684+ C682 32 96 C5                             ld      (SunVarK),a
 685+ C685 3A 99 C5                             ld      a,(SunVarK+3)
 686+ C688 21 A0 C5                             ld      hl,SunVarT
 687+ C68B B6                                   or      (hl)
 688+ C68C 32 99 C5                             ld      (SunVarK+3),a
 689+ C68F C9                                   ret
 690+ C690 78           .SunDV12:               ld      a,b
 691+ C691 A7                                   and     a
 692+ C692 28 EB                                jr      z,.SunDV13
 693+ C694 3A F4 81                             ld      a,(varR)                    ; it probably is already R so need to test
 694+ C697 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 695+ C699 05                                   dec     b
 696+ C69A 20 FB                                jr      nz,.SunDVL10
 697+ C69C 32 96 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 698+ C69F 3A A0 C5                             ld      a,(SunVarT)
 699+ C6A2 32 99 C5                             ld      (SunVarK+3),a
 700+ C6A5 C9                                   ret
 701+ C6A6
 702+ C6A6
 703+ C6A6
 704+ C6A6 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 705+ C6A7 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 706+ C6AB 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 707+ C6AE FD 67                                ld      iyh,a                       ; save sign
 708+ C6B0                                      ClearSignBitA
 708+ C6B0 E6 7F       >                        and     SignMask8Bit
 709+ C6B2                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 710+ C6B2              ;                        ld      c,a                         ;
 711+ C6B2 5A                                   ld      e,d
 712+ C6B3 57                                   ld      d,a
 713+ C6B4 0E 00                                ld      c,0
 714+ C6B6                                      ; added above to correct positioning as in reality its X/(Z/256)
 715+ C6B6 78                                   ld      a,b                         ; restore sign byte
 716+ C6B7 FD 6F                                ld      iyl,a                       ; save sign
 717+ C6B9                                      ClearSignBitA
 717+ C6B9 E6 7F       >                        and     SignMask8Bit
 718+ C6BB CD A1 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 719+ C6BE              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 719+ C6BE A7          >                        and     a
 719+ C6BF C2 DC C6    >                        jp	    nz,.IsOffScreen
 720+ C6C2                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 720+ C6C2 7C          >                        ld      a,h
 720+ C6C3 E6 80       >                        and     SignOnly8Bit
 720+ C6C5 C2 DC C6    >                        jp      nz,.IsOffScreen
 721+ C6C8 7C                                   ld      a,h
 722+ C6C9                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 722+ C6C9 FE 04       >                        cp    4
 722+ C6CB D0          >                        ret	 nc
 723+ C6CC FD 7C                                ld      a,iyh                       ; now deal with the sign
 724+ C6CE FD AD                                xor     iyl
 725+ C6D0                                      SignBitOnlyA                        ; a= resultant sign
 725+ C6D0 E6 80       >                        and     SignOnly8Bit
 726+ C6D2 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 727+ C6D4              .XIsNegative:           NegHL                               ; make 2's c as negative
 727+ C6D4 AF          >                    xor a
 727+ C6D5 95          >                    sub l
 727+ C6D6 6F          >                    ld l,a
 727+ C6D7 9F          >                    sbc a,a
 727+ C6D8 94          >                    sub h
 727+ C6D9 67          >                    ld h,a
 728+ C6DA              .calculatedVert:        ClearCarryFlag
 728+ C6DA B7          >                        or a
 729+ C6DB C9                                   ret
 730+ C6DC 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 731+ C6DF FD 7C                                ld      a,iyh
 732+ C6E1 FD AD                                xor     iyl
 733+ C6E3                                      SignBitOnlyA
 733+ C6E3 E6 80       >                        and     SignOnly8Bit
 734+ C6E5 28 02                                jr      z,.calculatedOffScreen
 735+ C6E7 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 736+ C6E8 23                                   inc     hl                          ; .
 737+ C6E9              .calculatedOffScreen:   SetCarryFlag
 737+ C6E9 37          >                        scf
 738+ C6EA C9                                   ret
 739+ C6EB
 740+ C6EB
 741+ C6EB              ; .........................................................................................................................
 742+ C6EB              ; we only hit this if z is positive so we can ignore signs
 743+ C6EB ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 744+ C6EF 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 745+ C6F2 57                                   ld      d,a                         ;
 746+ C6F3 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 747+ C6F6 CD 2D 97                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 748+ C6F9 B4                                   or      h                           ; if A or H are not 0 then max Radius
 749+ C6FA                                      JumpIfAIsZero  .SaveRadius
 749+ C6FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 749+ C6FB CA 00 C7    >                        jp	    z, .SaveRadius
 750+ C6FE 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 751+ C700 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 752+ C701 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 753+ C703 32 95 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 754+ C706 5F                                   ld      e,a                         ; as later code expects it to be in e
 755+ C707 C9                                   ret
 756+ C708
 757+ C708              ; Shorter version when sun does not need to be processed to screen
 758+ C708 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 759+ C70B 2A 10 C0                             ld      hl,(SBnKxlo)
 760+ C70E CD A6 C6                             call    SunProcessVertex
 761+ C711 22 19 C0                             ld      (SunCompassX),hl
 762+ C714 3A 15 C0                             ld      a,(SBnKysgn)
 763+ C717 2A 13 C0                             ld      hl,(SBnKylo)
 764+ C71A CD A6 C6                             call    SunProcessVertex
 765+ C71D 22 1B C0                             ld      (SunCompassY),hl
 766+ C720 C9                                   ret
 767+ C721
 768+ C721                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 769+ C721 CD B2 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 770+ C724 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 771+ C727                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 771+ C727 FE 30       >                        cp     48
 771+ C729 D2 08 C7    >                        jp		nc,SunUpdateCompass
 772+ C72C 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 773+ C72F B6                                   or      (hl)
 774+ C730                                      JumpIfAIsZero       SunUpdateCompass
 774+ C730 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 774+ C731 CA 08 C7    >                        jp	    z, SunUpdateCompass
 775+ C734 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 776+ C737 2A 10 C0                             ld      hl,(SBnKxlo)
 777+ C73A CD A6 C6                             call    SunProcessVertex            ; now returns carry set for failure
 778+ C73D 22 19 C0                             ld      (SunCompassX),hl
 779+ C740 D8                                   ret     c
 780+ C741 1E 80        .calculatedX:           ld      e,ScreenCenterX
 781+ C743 16 00                                ld      d,0
 782+ C745                                      ClearCarryFlag
 782+ C745 B7          >                        or a
 783+ C746 ED 5A                                adc     hl,de
 784+ C748                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 785+ C748 22 91 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 786+ C74B 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 787+ C74E 2A 13 C0                             ld      hl,(SBnKylo)
 788+ C751 CD A6 C6                             call    SunProcessVertex            ; now returns carry set for failure
 789+ C754 22 1B C0                             ld      (SunCompassY),hl
 790+ C757 D8                                   ret     c
 791+ C758 1E 60        .calculatedY:           ld      e,ScreenCenterY
 792+ C75A 16 00                                ld      d,0
 793+ C75C EB                                   ex      de,hl
 794+ C75D                                      ClearCarryFlag
 794+ C75D B7          >                        or a
 795+ C75E ED 52                                sbc     hl,de
 796+ C760                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 797+ C760 22 93 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 798+ C763              ; .........................................................................................................................
 799+ C763 CD EB C6                             call    SunCalculateRadius
 800+ C766              ; .........................................................................................................................
 801+ C766 2A 91 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 802+ C769 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 803+ C76C 16 00                                ld      d,0                         ; e still holds radius
 804+ C76E 7C                                   ld      a,h
 805+ C76F                                      JumpOnLeadSignSet   h,.CheckXNegative
 805+ C76F 7C          >                        ld      a,h
 805+ C770 E6 80       >                        and     SignOnly8Bit
 805+ C772 C2 88 C7    >                        jp      nz,.CheckXNegative
 806+ C775 7C           .CheckXPositive:        ld      a,h
 807+ C776                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 807+ C776 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 807+ C777 CA 91 C7    >                        jp	    z, .XOnScreen
 808+ C77A 16 00                                ld      d,0                         ; de = radius
 809+ C77C                                      ClearCarryFlag
 809+ C77C B7          >                        or a
 810+ C77D ED 52                                sbc     hl,de
 811+ C77F FA 91 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 812+ C782 7C                                   ld      a,h
 813+ C783                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 813+ C783 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 813+ C784 CA 91 C7    >                        jp	    z, .XOnScreen
 814+ C787 C9                                   ret                                 ; None of the X coordinates are on screen
 815+ C788 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 816+ C78A                                      ClearCarryFlag
 816+ C78A B7          >                        or a
 817+ C78B ED 5A                                adc     hl,de                       ; so we have hl - de
 818+ C78D F2 91 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 819+ C790 C9                                   ret                                 ; else x is totally off the left side of the screen
 820+ C791              ; .........................................................................................................................
 821+ C791 2A 93 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 822+ C794                                      JumpOnLeadSignSet   h,.CheckYNegative
 822+ C794 7C          >                        ld      a,h
 822+ C795 E6 80       >                        and     SignOnly8Bit
 822+ C797 C2 B8 C7    >                        jp      nz,.CheckYNegative
 823+ C79A 7C           .CheckYPositive:        ld      a,h
 824+ C79B                                      JumpIfAIsNotZero   .PosYCheck2
 824+ C79B A7          >                        and     a
 824+ C79C C2 A5 C7    >                        jp	    nz,.PosYCheck2
 825+ C79F 7D                                   ld      a,l
 826+ C7A0 E6 80                                and     %10000000
 827+ C7A2 CA C1 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 828+ C7A5 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 829+ C7A7                                      ClearCarryFlag
 829+ C7A7 B7          >                        or a
 830+ C7A8 ED 52                                sbc     hl,de
 831+ C7AA FA C1 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 832+ C7AD 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 833+ C7AE                                      ReturnIfANotZero                    ; .
 833+ C7AE A7          >                        and     a
 833+ C7AF C0          >                        ret     nz
 834+ C7B0 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 835+ C7B1 E6 80                                and     %10000000                   ; .
 836+ C7B3                                      ReturnIfANotZero                    ; .
 836+ C7B3 A7          >                        and     a
 836+ C7B4 C0          >                        ret     nz
 837+ C7B5 C3 C1 C7                             jp      YOnScreen                  ; so Y at least spans
 838+ C7B8 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 839+ C7BA                                      ClearCarryFlag
 839+ C7BA B7          >                        or a
 840+ C7BB ED 5A                                adc     hl,de                       ; so we have hl - de
 841+ C7BD F2 C1 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 842+ C7C0 C9                                   ret                                 ; else never gets above 0 so return
 843+ C7C1              ; .........................................................................................................................
 844+ C7C1 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 845+ C7C4 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 846+ C7C7 3E 00                                ld		a,0
 847+ C7C9 CD 03 7D                             call	memfill_dma
 848+ C7CC              ; .........................................................................................................................
 849+ C7CC 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 850+ C7CF 3A 95 C5                             ld      a,(SunRadius)               ; get readius
 851+ C7D2 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 852+ C7D4                                      FlipCarryFlag
 852+ C7D4 3F          >                        ccf
 853+ C7D5 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 854+ C7D7 FE 28                                cp      40
 855+ C7D9                                      FlipCarryFlag
 855+ C7D9 3F          >                        ccf
 856+ C7DA CB 13                                rl      e
 857+ C7DC FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 858+ C7DE                                      FlipCarryFlag
 858+ C7DE 3F          >                        ccf
 859+ C7DF CB 13                                rl     e
 860+ C7E1 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 861+ C7E2 32 8E C5                             ld      (RaggedSize),a
 862+ C7E5              ; .........................................................................................................................
 863+ C7E5 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 864+ C7E8 22 A3 C1                             ld      (LineArrayPtr),hl
 865+ C7EB AF                                   xor     a
 866+ C7EC 32 8D C5                             ld      (LineCount),a
 867+ C7EF              ; .........................................................................................................................
 868+ C7EF 2A 93 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 869+ C7F2 3A 95 C5                             ld      a,(SunRadius)
 870+ C7F5 5F                                   ld      e,a
 871+ C7F6 16 00                                ld      d,0
 872+ C7F8                                      ClearCarryFlag
 872+ C7F8 B7          >                        or a
 873+ C7F9 ED 52                                sbc     hl,de
 874+ C7FB F2 01 C8                             jp      p,.DoneMinY
 875+ C7FE 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 876+ C801              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 876+ C801 7C          >                        ld      a, h
 876+ C802 A7          >                        and     a
 876+ C803 C0          >                        ret     nz
 877+ C804 7D                                   ld      a,l                         ; check if l > 127
 878+ C805 E6 80                                and     SignOnly8Bit                ; .
 879+ C807 C0                                   ret     nz                          ; if bit is set then > 128
 880+ C808 7D           .SetMinY:               ld      a,l
 881+ C809 32 8F C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 882+ C80C 2A 93 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 883+ C80F 3A 95 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 884+ C812 16 00                                ld      d,0                         ; .
 885+ C814 5F                                   ld      e,a                         ; .
 886+ C815                                      ClearCarryFlag                      ; .
 886+ C815 B7          >                        or a
 887+ C816 ED 5A                                adc     hl,de                       ; .
 888+ C818 7C                                   ld      a,h
 889+ C819 A7                                   and     a
 890+ C81A 28 06                                jr      z,.YHiOK
 891+ C81C 21 7F 00     .YHiGTE127:             ld      hl,127
 892+ C81F C3 2B C8                             jp      .SetMaxY
 893+ C822 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 894+ C823 E6 80                                and     SignOnly8Bit                ; .
 895+ C825 CA 2B C8                             jp      z,.SetMaxY
 896+ C828 21 7F 00                             ld      hl,127
 897+ C82B 7D           .SetMaxY                ld      a,l
 898+ C82C 32 90 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 899+ C82F CD 36 C8                             call    SunDrawCircle
 900+ C832 CD CF C1                             call    SunDraw
 901+ C835 C9                                   ret
 902+ C836                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 903+ C836              ;.. Now we caluclate the circle of the star
 904+ C836              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 905+ C836              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 906+ C836              ; so now there are the following conditions to consider
 907+ C836              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 908+ C836              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 909+ C836              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 910+ C836              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 911+ C836              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 912+ C836              ; x center + radius < 0                                                 => Don't draw
 913+ C836              ; x center - radius > 255                                               => Don't draw
 914+ C836              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 915+ C836              ; x point = max (x point, 0)   on left
 916+ C836              ; x point = min (x point, 255) on right
 917+ C836
 918+ C836              SetIYPlusOffset:        MACRO   reg
 919+ C836 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 920+ C836 ~                                    pop     hl                              ;
 921+ C836 ~                                    ld      a,reg
 922+ C836 ~                                    add     hl,a
 923+ C836 ~                                    add     hl,a
 924+ C836 ~                                    push    hl
 925+ C836 ~                                    pop     iy
 926+ C836 ~                                    pop     hl
 927+ C836                                      ENDM
 928+ C836
 929+ C836              SetIYMinusOffset:       MACRO   reg
 930+ C836 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 931+ C836 ~                                    pop     hl                              ;
 932+ C836 ~                                    ld      a,reg
 933+ C836 ~                                    add     a,a
 934+ C836 ~                                    ld      e,a
 935+ C836 ~                                    ld      d,0
 936+ C836 ~                                    ClearCarryFlag
 937+ C836 ~                                    sbc     hl,de
 938+ C836 ~                                    push    hl
 939+ C836 ~                                    pop     iy
 940+ C836 ~                                    pop     de,,hl
 941+ C836                                      ENDM
 942+ C836
 943+ C836
 944+ C836              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 945+ C836              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 946+ C836              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 947+ C836              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 948+ C836              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 949+ C836              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 950+ C836              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 951+ C836              ;;;-                        push    hl
 952+ C836              ;;;-                        ld      a,(SunRadius)
 953+ C836              ;;;-                        add     hl,a
 954+ C836              ;;;-                        bit     7,h
 955+ C836              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 956+ C836              ;;;-                        pop     hl
 957+ C836              ;;;-                        ld      d,0
 958+ C836              ;;;-                        ld      e,a
 959+ C836              ;;;-                        ClearCarryFlag
 960+ C836              ;;;-                        sbc     hl,de
 961+ C836              ;;;-                        ld      a,h
 962+ C836              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 963+ C836              ;;;-
 964+ C836              ;;;-                        ld      hl,(SunScrnX)
 965+ C836              ;;;-                        push    hl
 966+ C836              ;;;-                        ld      a,(SunRadius)
 967+ C836              ;;;-                        add     hl,a
 968+ C836              ;;;-                        bit     7,h
 969+ C836              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 970+ C836              ;;;-                        pop     hl
 971+ C836              ;;;-                        ld      d,0
 972+ C836              ;;;-                        ld      e,a
 973+ C836              ;;;-                        ClearCarryFlag
 974+ C836              ;;;-                        sbc     hl,de
 975+ C836              ;;;-                        ld      a,h
 976+ C836              ;;;-
 977+ C836              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 978+ C836              SunDrawCircle
 979+ C836                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 980+ C836              .PrepCircleData:       ; ld      ixl,0
 981+ C836                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 982+ C836 3A 95 C5                             ld      a,(SunRadius)
 983+ C839 DD 67                                ld		ixh,a							; ixh = radius
 984+ C83B DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 985+ C83E 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 986+ C840 6F                                   ld		l,a                             ; .
 987+ C841 29                                   add		hl,hl							; .
 988+ C842 EB                                   ex		de,hl							; .
 989+ C843 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 990+ C846 A7                                   and		a                               ; .
 991+ C847 ED 52                                sbc		hl,de							; .
 992+ C849 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 993+ C84A 4D                                   ld		c,l								; .
 994+ C84B 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 995+ C84E 16 00                                ld		d,0                             ; de = ixl
 996+ C850 DD 5D                                ld		e,ixl                           ;
 997+ C852                                      ClearCarryFlag                          ;
 997+ C852 B7          >                        or a
 998+ C853 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 999+ C855 11 01 00     .Setde1:                ld		de,1                            ; del = 1
1000+ C858 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
1001+ C85A DD BD                                cp		ixl                             ;
1002+ C85C D8                                   ret		c                               ;
1003+ C85D D9           .ProcessLoop:	        exx                                     ; save out registers
1004+ C85E              ; Process CY+Y CX+X & CY+Y CX-X..................................
1005+ C85E 2A 93 C5     .Plot1:                 ld      hl, (SunScrnY)
1006+ C861 DD 7C        .Get1YRow:              ld      a,ixh
1007+ C863 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1008+ C865              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1008+ C865 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1008+ C866 A7          >                        and     a                               ; .
1008+ C867 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1008+ C869 7D          >                        ld      a,l                             ; l bit 7 0?
1008+ C86A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1008+ C86C 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1009+ C86E              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1009+ C86E E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1009+ C871 E1          >                        pop     hl                              ;
1009+ C872 DD 7C       >                        ld      a,ixh
1009+ C874 ED 31       >                        add     hl,a
1009+ C876 ED 31       >                        add     hl,a
1009+ C878 E5          >                        push    hl
1009+ C879 FD E1       >                        pop     iy
1009+ C87B E1          >                        pop     hl
1010+ C87C                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1010+ C87C 7D          >                        ld      a,l
1010+ C87D 21 A3 C0    >                        ld      hl,SBnKLineArray
1010+ C880 ED 31       >                        add     hl,a
1010+ C882 ED 31       >                        add     hl,a
1010+ C884 E5          >                        push    hl
1010+ C885 FD E1       >                        pop     iy
1011+ C887 DD 7D                                ld      a,ixl
1012+ C889 CD 5C C9                             call    ProcessXRowA
1013+ C88C C3 8F C8                             jp      .Plot2
1014+ C88F              .NoTopPixelPair:        ;break
1015+ C88F              ; Process CY-Y CX+X & CY-Y CX-X..................................
1016+ C88F 2A 93 C5     .Plot2:                 ld      hl, (SunScrnY)
1017+ C892 16 00        .Get2YRow:              ld      d,0
1018+ C894 DD 5C                                ld      e,ixh
1019+ C896                                      ClearCarryFlag
1019+ C896 B7          >                        or a
1020+ C897 ED 52                                sbc     hl,de
1021+ C899              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1021+ C899 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1021+ C89A A7          >                        and     a                               ; .
1021+ C89B 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1021+ C89D 7D          >                        ld      a,l                             ; l bit 7 0?
1021+ C89E E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1021+ C8A0 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1022+ C8A2                                      SetIYMinusOffset ixh
1022+ C8A2 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1022+ C8A6 E1          >                        pop     hl                              ;
1022+ C8A7 DD 7C       >                        ld      a,ixh
1022+ C8A9 87          >                        add     a,a
1022+ C8AA 5F          >                        ld      e,a
1022+ C8AB 16 00       >                        ld      d,0
1022+ C8AD             >                        ClearCarryFlag
1022+ C8AD B7          >                        or a
1022+ C8AE ED 52       >                        sbc     hl,de
1022+ C8B0 E5          >                        push    hl
1022+ C8B1 FD E1       >                        pop     iy
1022+ C8B3 E1 D1       >                        pop     de,,hl
1023+ C8B5              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1023+ C8B5 7D          >                        ld      a,l
1023+ C8B6 21 A3 C0    >                        ld      hl,SBnKLineArray
1023+ C8B9 ED 31       >                        add     hl,a
1023+ C8BB ED 31       >                        add     hl,a
1023+ C8BD E5          >                        push    hl
1023+ C8BE FD E1       >                        pop     iy
1024+ C8C0 DD 7D                                ld      a,ixl
1025+ C8C2 CD 5C C9                             call    ProcessXRowA
1026+ C8C5 C3 C8 C8                             jp      .Plot3
1027+ C8C8              .NoBottomPixelPair:     ;break
1028+ C8C8              ; Process CY+X CX+Y & CY+X CX-Y..................................
1029+ C8C8 2A 93 C5     .Plot3:                 ld      hl, (SunScrnY)
1030+ C8CB DD 7D        .Get3YRow:              ld      a,ixl
1031+ C8CD ED 31                                add     hl,a                            ; Check to see if CY+Y
1032+ C8CF              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1032+ C8CF 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1032+ C8D0 A7          >                        and     a                               ; .
1032+ C8D1 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1032+ C8D3 7D          >                        ld      a,l                             ; l bit 7 0?
1032+ C8D4 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1032+ C8D6 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1033+ C8D8                                      SetIYPlusOffset ixl
1033+ C8D8 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1033+ C8DB E1          >                        pop     hl                              ;
1033+ C8DC DD 7D       >                        ld      a,ixl
1033+ C8DE ED 31       >                        add     hl,a
1033+ C8E0 ED 31       >                        add     hl,a
1033+ C8E2 E5          >                        push    hl
1033+ C8E3 FD E1       >                        pop     iy
1033+ C8E5 E1          >                        pop     hl
1034+ C8E6              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1034+ C8E6 7D          >                        ld      a,l
1034+ C8E7 21 A3 C0    >                        ld      hl,SBnKLineArray
1034+ C8EA ED 31       >                        add     hl,a
1034+ C8EC ED 31       >                        add     hl,a
1034+ C8EE E5          >                        push    hl
1034+ C8EF FD E1       >                        pop     iy
1035+ C8F1 DD 7C                                ld      a,ixh
1036+ C8F3 CD 5C C9                             call    ProcessXRowA
1037+ C8F6 C3 F9 C8                             jp      .Plot4
1038+ C8F9              .NoTop3PixelPair:       ;break
1039+ C8F9              ; Process CY-X CX+Y & CY-X CX-Y..................................
1040+ C8F9 2A 93 C5     .Plot4:                 ld      hl, (SunScrnY)
1041+ C8FC 16 00        .Get4YRow:              ld      d,0
1042+ C8FE DD 5D                                ld      e,ixl
1043+ C900                                      ClearCarryFlag
1043+ C900 B7          >                        or a
1044+ C901 ED 52                                sbc     hl,de
1045+ C903              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1045+ C903 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1045+ C904 A7          >                        and     a                               ; .
1045+ C905 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1045+ C907 7D          >                        ld      a,l                             ; l bit 7 0?
1045+ C908 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1045+ C90A 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1046+ C90C                                      SetIYMinusOffset ixl
1046+ C90C D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1046+ C910 E1          >                        pop     hl                              ;
1046+ C911 DD 7D       >                        ld      a,ixl
1046+ C913 87          >                        add     a,a
1046+ C914 5F          >                        ld      e,a
1046+ C915 16 00       >                        ld      d,0
1046+ C917             >                        ClearCarryFlag
1046+ C917 B7          >                        or a
1046+ C918 ED 52       >                        sbc     hl,de
1046+ C91A E5          >                        push    hl
1046+ C91B FD E1       >                        pop     iy
1046+ C91D E1 D1       >                        pop     de,,hl
1047+ C91F              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1047+ C91F 7D          >                        ld      a,l
1047+ C920 21 A3 C0    >                        ld      hl,SBnKLineArray
1047+ C923 ED 31       >                        add     hl,a
1047+ C925 ED 31       >                        add     hl,a
1047+ C927 E5          >                        push    hl
1047+ C928 FD E1       >                        pop     iy
1048+ C92A DD 7C                                ld      a,ixh
1049+ C92C CD 5C C9                             call    ProcessXRowA
1050+ C92F              .NoBottom4PixelPair:
1051+ C92F              ; Completed one iteration........................................
1052+ C92F D9                                   exx
1053+ C930 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1054+ C932 28 03                                jr z,   .draw_circle_1
1055+ C934 19                                   add hl,de			; Delta=Delta+D1
1056+ C935 18 05                                jr      .draw_circle_2		;
1057+ C937 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1058+ C938 03                                   inc     bc
1059+ C939 03                                   inc     bc				; D2=D2+2
1060+ C93A DD 25                                dec     ixh				; Y=Y-1
1061+ C93C 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1062+ C93D 03                                   inc bc
1063+ C93E 13                                   inc de				    ; D1=D1+2
1064+ C93F 13                                   inc de
1065+ C940 DD 2C                                inc ixl				    ; X=X+1
1066+ C942 C3 58 C8                             jp      .CircleLoop
1067+ C945 2A 91 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1068+ C948 7C                                   ld      a,h
1069+ C949 A7                                   and     a
1070+ C94A C0                                   ret     nz                  ; if the high byte is set then no pixel
1071+ C94B 4D                                   ld      c,l
1072+ C94C 2A 93 C5                             ld      hl,(SunScrnY)
1073+ C94F 7C                                   ld      a,h
1074+ C950 A7                                   and     a
1075+ C951 C0                                   ret     nz                  ; if the high byte is set then no pixel
1076+ C952 7D                                   ld      a,l
1077+ C953 CB 7F                                bit     7,a
1078+ C955 C0                                   ret     nz                  ; if l > 127 then no pixel
1079+ C956 47                                   ld      b,a
1080+ C957 7B                                   ld		a,e
1081+ C958 CD 07 E3                             call	l2_plot_pixel_y_test
1082+ C95B C9                                   ret
1083+ C95C
1084+ C95C              ProcessXRowA:           ;break
1085+ C95C 2A 91 C5                             ld      hl,(SunScrnX)                    ; get X Center
1086+ C95F F5                                   push    af                              ; save A (curent offset +/- value
1087+ C960 ED 31                                add     hl,a                            ; Hl = HL + offset
1088+ C962 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1089+ C963 CB 7F                                bit     7,a                             ;
1090+ C965 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1091+ C967 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1092+ C968 20 16                                jr      nz,.XCoordMaxed                 ; .
1093+ C96A 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1094+ C96B C5           .AddFuzz:               push    bc
1095+ C96C CD 3B 88                             call    doRandom                        ; c = c - random AND ragged Size
1096+ C96F C1                                   pop     bc
1097+ C970 21 8E C5                             ld      hl,RaggedSize                   ;
1098+ C973 A6                                   and     (hl)                            ;
1099+ C974 81                                   add     c                               ;
1100+ C975 4F                                   ld      c,a                             ;
1101+ C976 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1102+ C978 C3 82 C9                             jp      .ProcessSubtract                ;
1103+ C97B 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1104+ C97D C3 82 C9                             jp      .ProcessSubtract
1105+ C980 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1106+ C982 F1           .ProcessSubtract:       pop     af                              ; get offset back
1107+ C983 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1108+ C984 16 00                                ld      d,0
1109+ C986 2A 91 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1110+ C989                                      ClearCarryFlag                          ; .
1110+ C989 B7          >                        or a
1111+ C98A ED 52                                sbc     hl,de                           ; .
1112+ C98C FA A9 C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1113+ C98F E5 C5        .AddFuzzSubtract:       push    hl,,bc
1114+ C991 CD 3B 88                             call    doRandom                        ; c = c - random AND ragged Size
1115+ C994 C1                                   pop     bc
1116+ C995 21 8E C5                             ld      hl,RaggedSize                   ;
1117+ C998 A6                                   and     (hl)                            ;
1118+ C999 5F                                   ld      e,a
1119+ C99A E1                                   pop     hl
1120+ C99B ED 52                                sbc     hl,de
1121+ C99D FA A9 C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1122+ C9A0 7C                                   ld      a,h
1123+ C9A1 A7                                   and     a
1124+ C9A2 C2 AE C9                             jp      nz,.XCordLeftMaxed
1125+ C9A5 45                                   ld      b,l
1126+ C9A6 C3 B0 C9                             jp      .CompletedXCoords
1127+ C9A9 06 00        .XCoordLeftNegative:    ld      b,0
1128+ C9AB C3 B0 C9                             jp      .CompletedXCoords
1129+ C9AE 06 FF        .XCordLeftMaxed:        ld      b,255
1130+ C9B0 78           .CompletedXCoords:      ld      a,b
1131+ C9B1 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1132+ C9B4 79                                   ld      a,c
1133+ C9B5 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1134+ C9B8 C9                                   ret
1135+ C9B9
1136+ C9B9              ; .....................................................
1137+ C9B9              ; if the universe object is a planet or sun then do that instead
1138+ C9B9              ;;TODOProcessPlanet:          cp      129
1139+ C9B9              ;;TODO                        jr      nz, .ItsAPlanet
1140+ C9B9              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1141+ C9B9              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1142+ C9B9
1143+ C9B9
1144+ C9B9              ; Square Root using tables
1145+ C9B9              ; DE = number to find
1146+ C9B9 21 D9 CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1147+ C9BC 7A           .LookupCorseJump:       ld      a,d
1148+ C9BD ED 31                                add     hl,a
1149+ C9BF ED 31                                add     hl,a
1150+ C9C1 7E                                   ld      a,(hl)
1151+ C9C2 23                                   inc     hl
1152+ C9C3 66                                   ld      h,(hl)
1153+ C9C4 6F                                   ld      l,a
1154+ C9C5 7E           .FineSearchLoop:        ld      a,(hl)
1155+ C9C6                                      JumpIfAEqNusng  e, .FoundByte
1155+ C9C6 BB          >                        cp     e
1155+ C9C7 CA D3 C9    >                        jp      z,.FoundByte
1156+ C9CA                                      JumpIfAGTENusng e, .PreviousByte
1156+ C9CA BB          >                        cp     e
1156+ C9CB D2 D6 C9    >                        jp		nc,.PreviousByte
1157+ C9CE 23           .NotFound:              inc     hl
1158+ C9CF 23                                   inc     hl
1159+ C9D0 C3 C5 C9                             jp      .FineSearchLoop
1160+ C9D3 23           .FoundByte:             inc     hl
1161+ C9D4 7E                                   ld      a,(hl)
1162+ C9D5 C9                                   ret
1163+ C9D6 2B           .PreviousByte:          dec     hl
1164+ C9D7 7E                                   ld      a,(hl)
1165+ C9D8 C9                                   ret
1166+ C9D9
1167+ C9D9 D9 CB EB CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1167+ C9DD F9 CB 05 CC
1167+ C9E1 0F CC 17 CC
1167+ C9E5 1F CC 27 CC
1167+ C9E9 2F CC 35 CC
1167+ C9ED 3D CC 43 CC
1167+ C9F1 47 CC 4D CC
1167+ C9F5 53 CC 59 CC
1168+ C9F9 5F CC 65 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1168+ C9FD 6B CC 71 CC
1168+ CA01 77 CC 7B CC
1168+ CA05 7F CC 81 CC
1168+ CA09 85 CC 89 CC
1168+ CA0D 8D CC 91 CC
1168+ CA11 95 CC 99 CC
1168+ CA15 9B CC 9F CC
1169+ CA19 A1 CC A5 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1169+ CA1D A9 CC AB CC
1169+ CA21 AD CC B1 CC
1169+ CA25 B3 CC B5 CC
1169+ CA29 B9 CC BB CC
1169+ CA2D BD CC BF CC
1169+ CA31 C3 CC C5 CC
1169+ CA35 C7 CC CB CC
1170+ CA39 CF CC D3 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1170+ CA3D D7 CC DB CC
1170+ CA41 DD CC E1 CC
1170+ CA45 E5 CC E9 CC
1170+ CA49 EB CC EF CC
1170+ CA4D F3 CC F7 CC
1170+ CA51 FB CC FF CC
1170+ CA55 03 CD 07 CD
1171+ CA59 0B CD 0F CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1171+ CA5D 13 CD 17 CD
1171+ CA61 1B CD 1F CD
1171+ CA65 23 CD 27 CD
1171+ CA69 2B CD 2F CD
1171+ CA6D 33 CD 37 CD
1171+ CA71 3B CD 3F CD
1171+ CA75 43 CD 47 CD
1172+ CA79 4B CD 4D CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1172+ CA7D 51 CD 55 CD
1172+ CA81 59 CD 5D CD
1172+ CA85 61 CD 65 CD
1172+ CA89 69 CD 6B CD
1172+ CA8D 6F CD 73 CD
1172+ CA91 77 CD 7B CD
1172+ CA95 7F CD 81 CD
1173+ CA99 85 CD 89 CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1173+ CA9D 8D CD 91 CD
1173+ CAA1 93 CD 97 CD
1173+ CAA5 9B CD 9F CD
1173+ CAA9 A3 CD A5 CD
1173+ CAAD A9 CD AD CD
1173+ CAB1 B1 CD B3 CD
1173+ CAB5 B5 CD B9 CD
1174+ CAB9 BD CD C1 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1174+ CABD C5 CD C9 CD
1174+ CAC1 CD CD D1 CD
1174+ CAC5 D3 CD D7 CD
1174+ CAC9 DB CD DD CD
1174+ CACD E1 CD E5 CD
1174+ CAD1 E9 CD EB CD
1174+ CAD5 EF CD F3 CD
1175+ CAD9 F7 CD F9 CD                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1175+ CADD FD CD FF CD
1175+ CAE1 03 CE 07 CE
1175+ CAE5 0B CE 0D CE
1175+ CAE9 11 CE 15 CE
1175+ CAED 17 CE 1B CE
1175+ CAF1 1F CE 21 CE
1175+ CAF5 25 CE 29 CE
1176+ CAF9 2B CE 2F CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1176+ CAFD 33 CE 35 CE
1176+ CB01 39 CE 3D CE
1176+ CB05 3F CE 43 CE
1176+ CB09 47 CE 49 CE
1176+ CB0D 4D CE 51 CE
1176+ CB11 53 CE 57 CE
1176+ CB15 5B CE 5D CE
1177+ CB19 61 CE 65 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1177+ CB1D 67 CE 6B CE
1177+ CB21 6D CE 71 CE
1177+ CB25 75 CE 77 CE
1177+ CB29 7B CE 7D CE
1177+ CB2D 81 CE 85 CE
1177+ CB31 87 CE 8B CE
1177+ CB35 8F CE 91 CE
1178+ CB39 93 CE 95 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1178+ CB3D 99 CE 9D CE
1178+ CB41 9F CE A3 CE
1178+ CB45 A5 CE A9 CE
1178+ CB49 AD CE B1 CE
1178+ CB4D B3 CE B5 CE
1178+ CB51 B9 CE BB CE
1178+ CB55 BF CE C3 CE
1179+ CB59 C5 CE C9 CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1179+ CB5D CB CE CF CE
1179+ CB61 D1 CE D5 CE
1179+ CB65 D9 CE DB CE
1179+ CB69 DD CE DF CE
1179+ CB6D E3 CE E5 CE
1179+ CB71 E9 CE ED CE
1179+ CB75 EF CE F3 CE
1180+ CB79 F5 CE F9 CE                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1180+ CB7D FB CE FF CE
1180+ CB81 01 CF 05 CF
1180+ CB85 09 CF 0B CF
1180+ CB89 0F CF 11 CF
1180+ CB8D 15 CF 17 CF
1180+ CB91 1B CF 1D CF
1180+ CB95 1F CF 21 CF
1181+ CB99 25 CF 29 CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1181+ CB9D 2D CF 31 CF
1181+ CBA1 35 CF 39 CF
1181+ CBA5 3B CF 3F CF
1181+ CBA9 43 CF 47 CF
1181+ CBAD 49 CF 4D CF
1181+ CBB1 4F CF 51 CF
1181+ CBB5 53 CF 57 CF
1182+ CBB9 59 CF 5B CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1182+ CBBD 5D CF 61 CF
1182+ CBC1 63 CF 67 CF
1182+ CBC5 69 CF 6D CF
1182+ CBC9 6F CF 73 CF
1182+ CBCD 75 CF 79 CF
1182+ CBD1 7B CF 7F CF
1182+ CBD5 81 CF 83 CF
1183+ CBD9
1184+ CBD9              SunSquareRootTable:
1185+ CBD9 00 00        SunSqr00:               DB $00,   0
1186+ CBDB 04 02                                DB $04,   2
1187+ CBDD 10 04                                DB $10,   4
1188+ CBDF 24 06                                DB $24,   6
1189+ CBE1 40 08                                DB $40,   8
1190+ CBE3 64 0A                                DB $64,  10
1191+ CBE5 90 0C                                DB $90,  12
1192+ CBE7 C4 0E                                DB $C4,  14
1193+ CBE9 FF 0F                                DB $FF,  15
1194+ CBEB 00 10        SunSqr01:               DB $00,  16
1195+ CBED 21 11                                DB $21,  17
1196+ CBEF 44 12                                DB $44,  18
1197+ CBF1 69 13                                DB $69,  19
1198+ CBF3 90 14                                DB $90,  20
1199+ CBF5 B9 15                                DB $B9,  21
1200+ CBF7 FF 16                                DB $FF,  22
1201+ CBF9 11 17        SunSqr02:               DB $11,  23
1202+ CBFB 40 18                                DB $40,  24
1203+ CBFD 71 19                                DB $71,  25
1204+ CBFF A4 1A                                DB $A4,  26
1205+ CC01 D9 1B                                DB $D9,  27
1206+ CC03 FF 1B                                DB $FF,  27
1207+ CC05 10 1C        SunSqr03:               DB $10,  28
1208+ CC07 49 1D                                DB $49,  29
1209+ CC09 84 1E                                DB $84,  30
1210+ CC0B C1 1F                                DB $C1,  31
1211+ CC0D FF 1F                                DB $FF,  31
1212+ CC0F 00 20        SunSqr04:               DB $00,  32
1213+ CC11 41 21                                DB $41,  33
1214+ CC13 84 22                                DB $84,  34
1215+ CC15 FF 23                                DB $FF,  35
1216+ CC17 10 24        SunSqr05:               DB $10,  36
1217+ CC19 59 25                                DB $59,  37
1218+ CC1B A4 26                                DB $A4,  38
1219+ CC1D FF 27                                DB $FF,  39
1220+ CC1F 40 28        SunSqr06:               DB $40,  40
1221+ CC21 91 29                                DB $91,  41
1222+ CC23 E4 2A                                DB $E4,  42
1223+ CC25 FF 2A                                DB $FF,  42
1224+ CC27 39 2B        SunSqr07:               DB $39,  43
1225+ CC29 90 2C                                DB $90,  44
1226+ CC2B E9 2D                                DB $E9,  45
1227+ CC2D FF 2D                                DB $FF,  45
1228+ CC2F 44 2E        SunSqr08:               DB $44,  46
1229+ CC31 A1 2F                                DB $A1,  47
1230+ CC33 FF 2F                                DB $FF,  47
1231+ CC35 00 30        SunSqr09:               DB $00,  48
1232+ CC37 61 31                                DB $61,  49
1233+ CC39 C4 32                                DB $C4,  50
1234+ CC3B FF 32                                DB $FF,  50
1235+ CC3D 29 33        SunSqr0A:               DB $29,  51
1236+ CC3F 90 34                                DB $90,  52
1237+ CC41 FF 35                                DB $FF,  53
1238+ CC43 64 36        SunSqr0B:               DB $64,  54
1239+ CC45 FF 37                                DB $FF,  55
1240+ CC47 40 38        SunSqr0C:               DB $40,  56
1241+ CC49 B1 39                                DB $B1,  57
1242+ CC4B FF 39                                DB $FF,  57
1243+ CC4D 24 3A        SunSqr0D:               DB $24,  58
1244+ CC4F 99 3B                                DB $99,  59
1245+ CC51 FF 3B                                DB $FF,  59
1246+ CC53 10 3C        SunSqr0E:               DB $10,  60
1247+ CC55 89 3D                                DB $89,  61
1248+ CC57 FF 3D                                DB $FF,  61
1249+ CC59 04 3E        SunSqr0F:               DB $04,  62
1250+ CC5B 81 3F                                DB $81,  63
1251+ CC5D FF 3F                                DB $FF,  63
1252+ CC5F 00 40        SunSqr10:               DB $00,  64
1253+ CC61 81 41                                DB $81,  65
1254+ CC63 FF 41                                DB $FF,  65
1255+ CC65 04 42        SunSqr11:               DB $04,  66
1256+ CC67 89 43                                DB $89,  67
1257+ CC69 FF 43                                DB $FF,  67
1258+ CC6B 10 44        SunSqr12:               DB $10,  68
1259+ CC6D 99 45                                DB $99,  69
1260+ CC6F FF 45                                DB $FF,  69
1261+ CC71 24 46        SunSqr13:               DB $24,  70
1262+ CC73 B1 47                                DB $B1,  71
1263+ CC75 FF 47                                DB $FF,  71
1264+ CC77 40 48        SunSqr14:               DB $40,  72
1265+ CC79 FF 49                                DB $FF,  73
1266+ CC7B 64 4A        SunSqr15:               DB $64,  74
1267+ CC7D FF 4B                                DB $FF,  75
1268+ CC7F FF 4C        SunSqr16:               DB $FF,  76
1269+ CC81 C4 4D        SunSqr17:               DB $C4,  77
1270+ CC83 FF 4E                                DB $FF,  78
1271+ CC85 61 4F        SunSqr18:               DB $61,  79
1272+ CC87 FF 4F                                DB $FF,  79
1273+ CC89 00 50        SunSqr19:               DB $00,  80
1274+ CC8B FF 51                                DB $FF,  81
1275+ CC8D 44 52        SunSqr1A:               DB $44,  82
1276+ CC8F FF 53                                DB $FF,  83
1277+ CC91 90 54        SunSqr1B:               DB $90,  84
1278+ CC93 FF 54                                DB $FF,  84
1279+ CC95 39 55        SunSqr1C:               DB $39,  85
1280+ CC97 FF 56                                DB $FF,  86
1281+ CC99 FF 57        SunSqr1D:               DB $FF,  87
1282+ CC9B 40 58        SunSqr1E:               DB $40,  88
1283+ CC9D FF 59                                DB $FF,  89
1284+ CC9F FF 5A        SunSqr1F:               DB $FF,  90
1285+ CCA1 59 5B        SunSqr20:               DB $59,  91
1286+ CCA3 FF 5B                                DB $FF,  91
1287+ CCA5 10 5C        SunSqr21:               DB $10,  92
1288+ CCA7 FF 5D                                DB $FF,  93
1289+ CCA9 FF 5E        SunSqr22:               DB $FF,  94
1290+ CCAB FF 5F        SunSqr23:               DB $FF,  95
1291+ CCAD 00 60        SunSqr24:               DB $00,  96
1292+ CCAF FF 61                                DB $FF,  97
1293+ CCB1 84 62        SunSqr25:               DB $84,  98
1294+ CCB3 49 63        SunSqr26:               DB $49,  99
1295+ CCB5 10 64        SunSqr27:               DB $10, 100
1296+ CCB7 FF 65                                DB $FF, 101
1297+ CCB9 FF 66        SunSqr28:               DB $FF, 102
1298+ CCBB FF 67        SunSqr29:               DB $FF, 103
1299+ CCBD FF 68        SunSqr2A:               DB $FF, 104
1300+ CCBF 11 69        SunSqr2B:               DB $11, 105
1301+ CCC1 FF 6A                                DB $FF, 106
1302+ CCC3 FF 6B        SunSqr2C:               DB $FF, 107
1303+ CCC5 FF 6C        SunSqr2D:               DB $FF, 108
1304+ CCC7 69 6D        SunSqr2E:               DB $69, 109
1305+ CCC9 FF 6E                                DB $FF, 110
1306+ CCCB 44 6E        SunSqr2F:               DB $44, 110
1307+ CCCD FF 6F                                DB $FF, 111
1308+ CCCF 21 6F        SunSqr30:               DB $21, 111
1309+ CCD1 FF 70                                DB $FF, 112
1310+ CCD3 00 70        SunSqr31:               DB $00, 112
1311+ CCD5 FF 71                                DB $FF, 113
1312+ CCD7 C4 72        SunSqr32:               DB $C4, 114
1313+ CCD9 FF 72                                DB $FF, 114
1314+ CCDB FF 73        SunSqr33:               DB $FF, 115
1315+ CCDD 90 74        SunSqr34:               DB $90, 116
1316+ CCDF FF 75                                DB $FF, 117
1317+ CCE1 79 75        SunSqr35:               DB $79, 117
1318+ CCE3 FF 76                                DB $FF, 118
1319+ CCE5 64 76        SunSqr36:               DB $64, 118
1320+ CCE7 64 77                                DB $64, 119
1321+ CCE9 51 77        SunSqr37:               DB $51, 119
1322+ CCEB 40 78        SunSqr38:               DB $40, 120
1323+ CCED FF 79                                DB $FF, 121
1324+ CCEF 31 79        SunSqr39:               DB $31, 121
1325+ CCF1 FF 7A                                DB $FF, 122
1326+ CCF3 24 7A        SunSqr3A:               DB $24, 122
1327+ CCF5 FF 7B                                DB $FF, 123
1328+ CCF7 19 7B        SunSqr3B:               DB $19, 123
1329+ CCF9 FF 7C                                DB $FF, 124
1330+ CCFB 10 7C        SunSqr3C:               DB $10, 124
1331+ CCFD FF 7D                                DB $FF, 125
1332+ CCFF 09 7D        SunSqr3D:               DB $09, 125
1333+ CD01 FF 7D                                DB $FF, 125
1334+ CD03 04 7E        SunSqr3E:               DB $04, 126
1335+ CD05 FF 7E                                DB $FF, 126
1336+ CD07 01 7F        SunSqr3F:               DB $01, 127
1337+ CD09 FF 7F                                DB $FF, 127
1338+ CD0B 00 80        SunSqr40:               DB $00, 128
1339+ CD0D FF 80                                DB $FF, 128
1340+ CD0F 01 81        SunSqr41:               DB $01, 129
1341+ CD11 FF 82                                DB $FF, 130
1342+ CD13 04 82        SunSqr42:               DB $04, 130
1343+ CD15 FF 83                                DB $FF, 131
1344+ CD17 09 83        SunSqr43:               DB $09, 131
1345+ CD19 FF 84                                DB $FF, 132
1346+ CD1B 10 84        SunSqr44:               DB $10, 132
1347+ CD1D FF 85                                DB $FF, 133
1348+ CD1F 19 85        SunSqr45:               DB $19, 133
1349+ CD21 FF 86                                DB $FF, 134
1350+ CD23 24 86        SunSqr46:               DB $24, 134
1351+ CD25 FF 87                                DB $FF, 135
1352+ CD27 31 87        SunSqr47:               DB $31, 135
1353+ CD29 FF 88                                DB $FF, 136
1354+ CD2B 40 88        SunSqr48:               DB $40, 136
1355+ CD2D FF 89                                DB $FF, 137
1356+ CD2F 51 89        SunSqr49:               DB $51, 137
1357+ CD31 FF 8A                                DB $FF, 138
1358+ CD33 64 8A        SunSqr4A:               DB $64, 138
1359+ CD35 FF 8A                                DB $FF, 138
1360+ CD37 79 8B        SunSqr4B:               DB $79, 139
1361+ CD39 FF 8B                                DB $FF, 139
1362+ CD3B 90 8C        SunSqr4C:               DB $90, 140
1363+ CD3D FF 8C                                DB $FF, 140
1364+ CD3F A9 8D        SunSqr4D:               DB $A9, 141
1365+ CD41 FF 8D                                DB $FF, 141
1366+ CD43 C4 8E        SunSqr4E:               DB $C4, 142
1367+ CD45 FF 8E                                DB $FF, 142
1368+ CD47 E1 8F        SunSqr4F:               DB $E1, 143
1369+ CD49 FF 8F                                DB $FF, 143
1370+ CD4B FF 8F        SunSqr50:               DB $FF, 143
1371+ CD4D 00 90        SunSqr51:               DB $00, 144
1372+ CD4F FF 90                                DB $FF, 144
1373+ CD51 21 91        SunSqr52:               DB $21, 145
1374+ CD53 FF 91                                DB $FF, 145
1375+ CD55 44 92        SunSqr53:               DB $44, 146
1376+ CD57 FF 92                                DB $FF, 146
1377+ CD59 69 93        SunSqr54:               DB $69, 147
1378+ CD5B FF 93                                DB $FF, 147
1379+ CD5D 90 94        SunSqr55:               DB $90, 148
1380+ CD5F FF 94                                DB $FF, 148
1381+ CD61 B9 95        SunSqr56:               DB $B9, 149
1382+ CD63 FF 95                                DB $FF, 149
1383+ CD65 E4 96        SunSqr57:               DB $E4, 150
1384+ CD67 FF 96                                DB $FF, 150
1385+ CD69 FF 96        SunSqr58:               DB $FF, 150
1386+ CD6B 11 97        SunSqr59:               DB $11, 151
1387+ CD6D FF 97                                DB $FF, 151
1388+ CD6F 40 98        SunSqr5A:               DB $40, 152
1389+ CD71 FF 98                                DB $FF, 152
1390+ CD73 71 99        SunSqr5B:               DB $71, 153
1391+ CD75 FF 99                                DB $FF, 153
1392+ CD77 A4 9A        SunSqr5C:               DB $A4, 154
1393+ CD79 FF 9A                                DB $FF, 154
1394+ CD7B D9 9B        SunSqr5D:               DB $D9, 155
1395+ CD7D FF 9B                                DB $FF, 155
1396+ CD7F FF 9B        SunSqr5E:               DB $FF, 155
1397+ CD81 10 9C        SunSqr5F:               DB $10, 156
1398+ CD83 FF 9C                                DB $FF, 156
1399+ CD85 49 9D        SunSqr60:               DB $49, 157
1400+ CD87 FF 9D                                DB $FF, 157
1401+ CD89 84 9E        SunSqr61:               DB $84, 158
1402+ CD8B FF 9E                                DB $FF, 158
1403+ CD8D C1 9F        SunSqr62:               DB $C1, 159
1404+ CD8F FF 9F                                DB $FF, 159
1405+ CD91 FF 9F        SunSqr63:               DB $FF, 159
1406+ CD93 00 A0        SunSqr64:               DB $00, 160
1407+ CD95 FF A0                                DB $FF, 160
1408+ CD97 41 A1        SunSqr65:               DB $41, 161
1409+ CD99 FF A1                                DB $FF, 161
1410+ CD9B 84 A2        SunSqr66:               DB $84, 162
1411+ CD9D FF A2                                DB $FF, 162
1412+ CD9F C9 A3        SunSqr67:               DB $C9, 163
1413+ CDA1 FF A3                                DB $FF, 163
1414+ CDA3 FF A3        SunSqr68:               DB $FF, 163
1415+ CDA5 10 A4        SunSqr69:               DB $10, 164
1416+ CDA7 FF A4                                DB $FF, 164
1417+ CDA9 59 A5        SunSqr6A:               DB $59, 165
1418+ CDAB FF A5                                DB $FF, 165
1419+ CDAD A4 A6        SunSqr6B:               DB $A4, 166
1420+ CDAF FF A6                                DB $FF, 166
1421+ CDB1 FF A7        SunSqr6C:               DB $FF, 167
1422+ CDB3 FF A7        SunSqr6D:               DB $FF, 167
1423+ CDB5 40 A8        SunSqr6E:               DB $40, 168
1424+ CDB7 FF A8                                DB $FF, 168
1425+ CDB9 91 A9        SunSqr6F:               DB $91, 169
1426+ CDBB FF A9                                DB $FF, 169
1427+ CDBD E4 AA        SunSqr70:               DB $E4, 170
1428+ CDBF FF AA                                DB $FF, 170
1429+ CDC1 00 AA        SunSqr71:               DB $00, 170
1430+ CDC3 FF AA                                DB $FF, 170
1431+ CDC5 39 AB        SunSqr72:               DB $39, 171
1432+ CDC7 FF AB                                DB $FF, 171
1433+ CDC9 90 AC        SunSqr73:               DB $90, 172
1434+ CDCB FF AC                                DB $FF, 172
1435+ CDCD E9 AD        SunSqr74:               DB $E9, 173
1436+ CDCF FF AD                                DB $FF, 173
1437+ CDD1 FF AD        SunSqr75:               DB $FF, 173
1438+ CDD3 44 AE        SunSqr76:               DB $44, 174
1439+ CDD5 FF AE                                DB $FF, 174
1440+ CDD7 A1 AF        SunSqr77:               DB $A1, 175
1441+ CDD9 FF AF                                DB $FF, 175
1442+ CDDB FF AF        SunSqr78:               DB $FF, 175
1443+ CDDD 00 B0        SunSqr79:               DB $00, 176
1444+ CDDF FF B0                                DB $FF, 176
1445+ CDE1 61 B1        SunSqr7A:               DB $61, 177
1446+ CDE3 FF B1                                DB $FF, 177
1447+ CDE5 C4 B2        SunSqr7B:               DB $C4, 178
1448+ CDE7 FF B2                                DB $FF, 178
1449+ CDE9 FF B2        SunSqr7C:               DB $FF, 178
1450+ CDEB 29 B3        SunSqr7D:               DB $29, 179
1451+ CDED FF B3                                DB $FF, 179
1452+ CDEF 90 B4        SunSqr7E:               DB $90, 180
1453+ CDF1 FF B4                                DB $FF, 180
1454+ CDF3 F9 B5        SunSqr7F:               DB $F9, 181
1455+ CDF5 FF B5                                DB $FF, 181
1456+ CDF7 FF B5        SunSqr80:               DB $FF, 181
1457+ CDF9 64 B6        SunSqr81:               DB $64, 182
1458+ CDFB FF B6                                DB $FF, 182
1459+ CDFD D1 B7        SunSqr82:               DB $D1, 183
1460+ CDFF FF B7        SunSqr83:               DB $FF, 183
1461+ CE01 FF B7                                DB $FF, 183
1462+ CE03 40 B8        SunSqr84:               DB $40, 184
1463+ CE05 FF B8                                DB $FF, 184
1464+ CE07 B1 B9        SunSqr85:               DB $B1, 185
1465+ CE09 FF B9                                DB $FF, 185
1466+ CE0B FF B9        SunSqr86:               DB $FF, 185
1467+ CE0D 24 BA        SunSqr87:               DB $24, 186
1468+ CE0F FF BA                                DB $FF, 186
1469+ CE11 99 BB        SunSqr88:               DB $99, 187
1470+ CE13 FF BB                                DB $FF, 187
1471+ CE15 FF BB        SunSqr89:               DB $FF, 187
1472+ CE17 10 BC        SunSqr8A:               DB $10, 188
1473+ CE19 FF BC                                DB $FF, 188
1474+ CE1B 89 BD        SunSqr8B:               DB $89, 189
1475+ CE1D FF BD                                DB $FF, 189
1476+ CE1F FF BD        SunSqr8C:               DB $FF, 189
1477+ CE21 04 BE        SunSqr8D:               DB $04, 190
1478+ CE23 FF BE                                DB $FF, 190
1479+ CE25 81 BF        SunSqr8E:               DB $81, 191
1480+ CE27 FF BF                                DB $FF, 191
1481+ CE29 FF BF        SunSqr8F:               DB $FF, 191
1482+ CE2B 00 C0        SunSqr90:               DB $00, 192
1483+ CE2D FF C0                                DB $FF, 192
1484+ CE2F 81 C1        SunSqr91:               DB $81, 193
1485+ CE31 FF C1                                DB $FF, 193
1486+ CE33 FF C1        SunSqr92:               DB $FF, 193
1487+ CE35 04 C2        SunSqr93:               DB $04, 194
1488+ CE37 FF C2                                DB $FF, 194
1489+ CE39 89 C3        SunSqr94:               DB $89, 195
1490+ CE3B FF C3                                DB $FF, 195
1491+ CE3D FF C3        SunSqr95:               DB $FF, 195
1492+ CE3F 10 C4        SunSqr96:               DB $10, 196
1493+ CE41 FF C4                                DB $FF, 196
1494+ CE43 99 C5        SunSqr97:               DB $99, 197
1495+ CE45 FF C5                                DB $FF, 197
1496+ CE47 FF C5        SunSqr98:               DB $FF, 197
1497+ CE49 24 C6        SunSqr99:               DB $24, 198
1498+ CE4B FF C6                                DB $FF, 198
1499+ CE4D B1 C7        SunSqr9A:               DB $B1, 199
1500+ CE4F FF C7                                DB $FF, 199
1501+ CE51 FF C7        SunSqr9B:               DB $FF, 199
1502+ CE53 40 C8        SunSqr9C:               DB $40, 200
1503+ CE55 FF C8                                DB $FF, 200
1504+ CE57 D1 C9        SunSqr9D:               DB $D1, 201
1505+ CE59 FF C9                                DB $FF, 201
1506+ CE5B FF C9        SunSqr9E:               DB $FF, 201
1507+ CE5D 64 CA        SunSqr9F:               DB $64, 202
1508+ CE5F FF CA                                DB $FF, 202
1509+ CE61 F9 CB        SunSqrA0:               DB $F9, 203
1510+ CE63 FF CB                                DB $FF, 203
1511+ CE65 FF CB        SunSqrA1:               DB $FF, 203
1512+ CE67 90 CC        SunSqrA2:               DB $90, 204
1513+ CE69 FF CC                                DB $FF, 204
1514+ CE6B FF CC        SunSqrA3:               DB $FF, 204
1515+ CE6D 29 CD        SunSqrA4:               DB $29, 205
1516+ CE6F FF CD                                DB $FF, 205
1517+ CE71 C4 CE        SunSqrA5:               DB $C4, 206
1518+ CE73 FF CE                                DB $FF, 206
1519+ CE75 FF CE        SunSqrA6:               DB $FF, 206
1520+ CE77 61 CF        SunSqrA7:               DB $61, 207
1521+ CE79 FF CF                                DB $FF, 207
1522+ CE7B FF CF        SunSqrA8:               DB $FF, 207
1523+ CE7D 00 D0        SunSqrA9:               DB $00, 208
1524+ CE7F FF D0                                DB $FF, 208
1525+ CE81 A1 D1        SunSqrAA:               DB $A1, 209
1526+ CE83 FF D1                                DB $FF, 209
1527+ CE85 FF D1        SunSqrAB:               DB $FF, 209
1528+ CE87 44 D2        SunSqrAC:               DB $44, 210
1529+ CE89 FF D2                                DB $FF, 210
1530+ CE8B E9 D3        SunSqrAD:               DB $E9, 211
1531+ CE8D FF D3                                DB $FF, 211
1532+ CE8F FF D3        SunSqrAE:               DB $FF, 211
1533+ CE91 90 D4        SunSqrAF:               DB $90, 212
1534+ CE93 FF D4        SunSqrB0:               DB $FF, 212
1535+ CE95 39 D5        SunSqrB1:               DB $39, 213
1536+ CE97 FF D5                                DB $FF, 213
1537+ CE99 E4 D6        SunSqrB2:               DB $E4, 214
1538+ CE9B FF D6                                DB $FF, 214
1539+ CE9D FF D6        SunSqrB3:               DB $FF, 214
1540+ CE9F 91 D7        SunSqrB4:               DB $91, 215
1541+ CEA1 FF D7                                DB $FF, 215
1542+ CEA3 FF D7        SunSqrB5:               DB $FF, 215
1543+ CEA5 40 D8        SunSqrB6:               DB $40, 216
1544+ CEA7 FF D8                                DB $FF, 216
1545+ CEA9 F1 D9        SunSqrB7:               DB $F1, 217
1546+ CEAB FF D9                                DB $FF, 217
1547+ CEAD FF D9        SunSqrB8:               DB $FF, 217
1548+ CEAF FF D9                                DB $FF, 217
1549+ CEB1 A4 DA        SunSqrB9:               DB $A4, 218
1550+ CEB3 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1551+ CEB5 59 DB        SunSqrBB:               DB $59, 219
1552+ CEB7 FF DB                                DB $FF, 219
1553+ CEB9 FF DB        SunSqrBC:               DB $FF, 219
1554+ CEBB 10 DC        SunSqrBD:               DB $10, 220
1555+ CEBD FF DC                                DB $FF, 220
1556+ CEBF C9 DD        SunSqrBE:               DB $C9, 221
1557+ CEC1 FF DD                                DB $FF, 221
1558+ CEC3 FF DD        SunSqrBF:               DB $FF, 221
1559+ CEC5 84 DE        SunSqrC0:               DB $84, 222
1560+ CEC7 FF DE                                DB $FF, 222
1561+ CEC9 FF DE        SunSqrC1:               DB $FF, 222
1562+ CECB 41 DF        SunSqrC2:               DB $41, 223
1563+ CECD FF DF                                DB $FF, 223
1564+ CECF FF DF        SunSqrC3:               DB $FF, 223
1565+ CED1 00 E0        SunSqrC4:               DB $00, 224
1566+ CED3 FF E0                                DB $FF, 224
1567+ CED5 C1 E1        SunSqrC5:               DB $C1, 225
1568+ CED7 FF E1                                DB $FF, 225
1569+ CED9 FF E1        SunSqrC6:               DB $FF, 225
1570+ CEDB 84 E2        SunSqrC7:               DB $84, 226
1571+ CEDD FF E2        SunSqrC8:               DB $FF, 226
1572+ CEDF 49 E3        SunSqrC9:               DB $49, 227
1573+ CEE1 FF E3                                DB $FF, 227
1574+ CEE3 FF E4        SunSqrCA:               DB $FF, 228
1575+ CEE5 10 E4        SunSqrCB:               DB $10, 228
1576+ CEE7 FF E4                                DB $FF, 228
1577+ CEE9 D9 E5        SunSqrCC:               DB $D9, 229
1578+ CEEB FF E5                                DB $FF, 229
1579+ CEED FF E5        SunSqrCD:               DB $FF, 229
1580+ CEEF A4 E6        SunSqrCE:               DB $A4, 230
1581+ CEF1 FF E6                                DB $FF, 230
1582+ CEF3 FF E6        SunSqrCF:               DB $FF, 230
1583+ CEF5 71 E7        SunSqrD0:               DB $71, 231
1584+ CEF7 FF E7                                DB $FF, 231
1585+ CEF9 FF E7        SunSqrD1:               DB $FF, 231
1586+ CEFB 40 E8        SunSqrD2:               DB $40, 232
1587+ CEFD FF E8                                DB $FF, 232
1588+ CEFF FF E8        SunSqrD3:               DB $FF, 232
1589+ CF01 11 E9        SunSqrD4:               DB $11, 233
1590+ CF03 FF E9                                DB $FF, 233
1591+ CF05 E4 EA        SunSqrD5:               DB $E4, 234
1592+ CF07 FF EA                                DB $FF, 234
1593+ CF09 FF EA        SunSqrD6:               DB $FF, 234
1594+ CF0B B9 EB        SunSqrD7:               DB $B9, 235
1595+ CF0D FF EB                                DB $FF, 235
1596+ CF0F FF EB        SunSqrD8:               DB $FF, 235
1597+ CF11 90 EC        SunSqrD9:               DB $90, 236
1598+ CF13 FF EC                                DB $FF, 236
1599+ CF15 FF EC        SunSqrDA:               DB $FF, 236
1600+ CF17 69 ED        SunSqrDB:               DB $69, 237
1601+ CF19 FF ED                                DB $FF, 237
1602+ CF1B FF ED        SunSqrDC:               DB $FF, 237
1603+ CF1D 44 EE        SunSqrDD:               DB $44, 238
1604+ CF1F FF EE        SunSqrDE:               DB $FF, 238
1605+ CF21 21 EF        SunSqrDF:               DB $21, 239
1606+ CF23 FF EF                                DB $FF, 239
1607+ CF25 00 F0        SunSqrE0:               DB $00, 240
1608+ CF27 FF F0                                DB $FF, 240
1609+ CF29 00 F0        SunSqrE1:               DB $00, 240
1610+ CF2B FF F0                                DB $FF, 240
1611+ CF2D E1 F1        SunSqrE2:               DB $E1, 241
1612+ CF2F FF F1                                DB $FF, 241
1613+ CF31 E1 F1        SunSqrE3:               DB $E1, 241
1614+ CF33 FF F1                                DB $FF, 241
1615+ CF35 C4 F2        SunSqrE4:               DB $C4, 242
1616+ CF37 FF F2                                DB $FF, 242
1617+ CF39 FF F2        SunSqrE5:               DB $FF, 242
1618+ CF3B A9 F3        SunSqrE6:               DB $A9, 243
1619+ CF3D FF F3                                DB $FF, 243
1620+ CF3F FF F3        SunSqrE7:               DB $FF, 243
1621+ CF41 FF F3                                DB $FF, 243
1622+ CF43 90 F3        SunSqrE8:               DB $90, 243
1623+ CF45 FF F4                                DB $FF, 244
1624+ CF47 FF F4        SunSqrE9:               DB $FF, 244
1625+ CF49 79 F5        SunSqrEA:               DB $79, 245
1626+ CF4B FF F5                                DB $FF, 245
1627+ CF4D FF F5        SunSqrEB:               DB $FF, 245
1628+ CF4F 64 F6        SunSqrEC:               DB $64, 246
1629+ CF51 FF F6        SunSqrED:               DB $FF, 246
1630+ CF53 51 F7        SunSqrEE:               DB $51, 247
1631+ CF55 FF F7                                DB $FF, 247
1632+ CF57 FF F7        SunSqrEF:               DB $FF, 247
1633+ CF59 40 F8        SunSqrF0:               DB $40, 248
1634+ CF5B FF F8        SunSqrF1:               DB $FF, 248
1635+ CF5D 31 F9        SunSqrF2:               DB $31, 249
1636+ CF5F FF F9                                DB $FF, 249
1637+ CF61 FF F9        SunSqrF3:               DB $FF, 249
1638+ CF63 24 FA        SunSqrF4:               DB $24, 250
1639+ CF65 FF FA                                DB $FF, 250
1640+ CF67 FF FA        SunSqrF5:               DB $FF, 250
1641+ CF69 19 FB        SunSqrF6:               DB $19, 251
1642+ CF6B FF FB                                DB $FF, 251
1643+ CF6D FF FB        SunSqrF7:               DB $FF, 251
1644+ CF6F 10 FC        SunSqrF8:               DB $10, 252
1645+ CF71 FF FC                                DB $FF, 252
1646+ CF73 FF FC        SunSqrF9:               DB $FF, 252
1647+ CF75 09 FD        SunSqrFA:               DB $09, 253
1648+ CF77 FF FD                                DB $FF, 253
1649+ CF79 FF FD        SunSqrFB:               DB $FF, 253
1650+ CF7B 04 FE        SunSqrFC:               DB $04, 254
1651+ CF7D FF FE                                DB $FF, 254
1652+ CF7F FF FE        SunSqrFD:               DB $FF, 254
1653+ CF81 01 FF        SunSqrFE:               DB $01, 255
1654+ CF83 FF FF        SunSqrFF:               DB $FF, 255
1655+ CF85
1656+ CF85
1657+ CF85
1658+ CF85              SunBankSize  EQU $ - StartOfSun
1659+ CF85
1660+ CF85
# file closed: ./Universe/Sun/sun_data.asm
1030  CF85                                      DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1031  CF85              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1032  CF85                                      SLOT    PlanetBankAddr
1033  CF85                                      PAGE    BankPlanetData
1034  CF85                                      ORG	    PlanetBankAddr,BankPlanetData
1035  C000                                      INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD 03 7D                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA 21 18 C0     WarpPlanetCloser:       ld      hl,PBnKzsgn
  72+ C0BD 7E           .PositiveAxis:          ld      a,(hl)
  73+ C0BE                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  73+ C0BE FE 02       >                        cp    2
  73+ C0C0 D8          >                        ret	 c
  74+ C0C1 35                                   dec     (hl)
  75+ C0C2 C9                                   ret
  76+ C0C3
  77+ C0C3              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
  78+ C0C3 21 18 C0     WarpPlanetFurther:      ld      hl,PBnKzsgn
  79+ C0C6 7E                                   ld      a,(hl)
  80+ C0C7                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
  80+ C0C7 FE 7F       >                        cp    $7F
  80+ C0C9 D0          >                        ret	 nc
  81+ C0CA 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
  82+ C0CB C9                                   ret
  83+ C0CC              ; --------------------------------------------------------------
  84+ C0CC              ; This sets current universe object to a planet,they use sign + 23 bit positions
  85+ C0CC CD A4 C0     CreatePlanet:           call    ResetPBnKData
  86+ C0CF 3A A6 82                             ld      a,(DisplayTekLevel)
  87+ C0D2 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  88+ C0D4 F6 80                                or      %10000000
  89+ C0D6 32 33 C0                             ld      (PBnKShipType),a
  90+ C0D9                                      MaxUnivPitchAndRoll
  90+ C0D9 3E 7F       >                        ld      a,127
  90+ C0DB 32 48 C0    >                        ld      (UBnKRotXCounter),a
  90+ C0DE 32 49 C0    >                        ld      (UBnKRotZCounter),a
  91+ C0E1 3A 78 82                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  92+ C0E4 E6 03                                and     %00000011               ; .
  93+ C0E6 CE 03                                adc     3                       ; .
  94+ C0E8 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  95+ C0EB CB 1F                                rr      a
  96+ C0ED 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F0 32 15 C0                             ld      (PBnKysgn),a
  98+ C0F3 C9                                   ret
  99+ C0F4
 100+ C0F4 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
 101+ C0F7 21 00 00                             ld      hl,0
 102+ C0FA                                      ZeroA
 102+ C0FA AF          >                        xor a
 103+ C0FB 22 10 C0                             ld      (PBnKxlo),hl
 104+ C0FE 22 13 C0                             ld      (PBnKylo),hl
 105+ C101 21 FF FF                             ld      hl,$FFFF
 106+ C104 22 16 C0                             ld      (PBnKzlo),hl
 107+ C107 32 12 C0                             ld      (PBnKxsgn),a
 108+ C10A 32 15 C0                             ld      (PBnKysgn),a
 109+ C10D 32 18 C0                             ld      (PBnKzsgn),a
 110+ C110                                      MaxUnivPitchAndRoll
 110+ C110 3E 7F       >                        ld      a,127
 110+ C112 32 48 C0    >                        ld      (UBnKRotXCounter),a
 110+ C115 32 49 C0    >                        ld      (UBnKRotZCounter),a
 111+ C118 C9                                   ret
 112+ C119              ; NEED FINSIHGING
 113+ C119
 114+ C119
 115+ C119 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 116+ C11D 2A 79 C0                             ld			hl,(PBnKXScaled)
 117+ C120 ED 5B 7B C0                          ld			de,(PBnKYScaled)
 118+ C124 78           .SetABSbc:              ld			a,b
 119+ C125 DD 67                                ld			ixh,a
 120+ C127 E6 7F                                and			SignMask8Bit
 121+ C129 47                                   ld			b,a									; bc = ABS bc
 122+ C12A 7C           .SetABShl:              ld			a,h
 123+ C12B DD 6F                                ld			ixl,a
 124+ C12D E6 7F                                and			SignMask8Bit
 125+ C12F 67                                   ld			h,a									; hl = ABS hl
 126+ C130 7A           .SetABSde:              ld			a,d
 127+ C131 FD 67                                ld			iyh,a
 128+ C133 E6 7F                                and			SignMask8Bit
 129+ C135 57                                   ld			d,a									; de = ABS de
 130+ C136 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 131+ C137 B4                                   or			h                                   ; XX15+1	\ x hi
 132+ C138 B2                                   or			d                                   ; XX15+4	\ y hi
 133+ C139 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 134+ C13B                                      ShiftHLRight1
 134+ C13B CB 3C       >			   srl h
 134+ C13D CB 1D       >			   rr  l
 135+ C13F                                      ShiftDERight1
 135+ C13F CB 3A       >			   srl d
 135+ C141 CB 1B       >			   rr  e
 136+ C143                                      ShiftBCRight1
 136+ C143 CB 38       >			   srl b
 136+ C145 CB 19       >			   rr  c
 137+ C147 C3 36 C1                             jp          .ScaleNodeTo8BitLoop
 138+ C14A              ; now we have scaled values we have to deal with sign
 139+ C14A DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 140+ C14C E6 80                                and			SignOnly8Bit
 141+ C14E B0                                   or			b
 142+ C14F 47                                   ld			b,a
 143+ C150 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 144+ C152 E6 80                                and			SignOnly8Bit
 145+ C154 B4                                   or			h
 146+ C155 67                                   ld			h,a
 147+ C156 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 148+ C158 E6 80                                and			SignOnly8Bit
 149+ C15A B2                                   or			d
 150+ C15B 57                                   ld			d,a
 151+ C15C ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 152+ C160 22 79 C0                             ld			(PBnKXScaled),hl
 153+ C163 ED 53 7B C0                          ld			(PBnKYScaled),de
 154+ C167 78                                   ld			a,b
 155+ C168 32 F2 81                             ld			(varU),a
 156+ C16B 79                                   ld			a,c
 157+ C16C 32 0F 82                             ld			(varT),a
 158+ C16F C9                                   ret
 159+ C170
 160+ C170              ;--------------------------------------------------------------------------------------------------------
 161+ C170                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C170              CopyPSXX12ScaledToPXX18:
   2++C170              CopyResultToPDrawCam:
   3++C170                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C170 3A 7F C0    >                        ld       a,(PXX12)
   3++C173 32 6D C0    >                        ld       (PXX18),a
   4++C176                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C176 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C179 32 6F C0    >                        ld       (PXX18+2),a
   5++C17C                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C17C 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C17F 32 70 C0    >                        ld       (PXX18+3),a
   6++C182                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C182 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C185 32 72 C0    >                        ld       (PXX18+5),a
   7++C188                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C188 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C18B 32 73 C0    >                        ld       (PXX18+6),a
   8++C18E                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C18E 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C191 32 75 C0    >                        ld       (PXX18+8),a
   9++C194 C9                   ret
  10++C195
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 162+ C195
 163+ C195              ; ......................................................                                                         ;;;
 164+ C195                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C195
   2++C195              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C195              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C195              ; Need to write a test routine for roll and pitchs
   5++C195 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C199 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C19D 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C1A1 00 00 00     PlanetK2                   DS 3
   9++C1A4
  10++C1A4 3A 0C 81     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C1A7 21 FF 80                             ld      hl,BETA
  12++C1AA B6                                   or      (hl)
  13++C1AB E6 7F                                and     SignMask8Bit
  14++C1AD CA 5E C2                             jp      z,.NoRotation
  15++C1B0 3A 0C 81     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1B3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1B5 57                                   ld      d,a                         ; .
  18++C1B6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1B9 5F                                   ld      e,a                         ; .
  20++C1BA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1BD CD F1 95                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1C0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1C0                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1C0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1C1 32 96 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1C4 7B                                   ld      a,e
  27++C1C5 32 97 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1C8 7A                                   ld      a,d
  29++C1C9 32 98 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1CC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1D0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1D3 6F                                   ld      l,a                         ; .
  33++C1D4 ED 4B 97 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1D8 3A 96 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1DB 67                                   ld      h,a                         ; .
  36++C1DC CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1DF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1E0 32 A1 C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1E3 ED 53 A2 C1                          ld      (PlanetK2+1),de                ;
  40++C1E7 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1E8 5F                                   ld      e,a                         ; .
  42++C1E9 3A FF 80                             ld      a,(BETA)                    ; D = BETA
  43++C1EC 57                                   ld      d,a                         ; .
  44++C1ED CD F1 95                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1F0 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1F4 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1F7 67                                   ld      h,a                         ;
  48++C1F8 CD 6D 93                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1FB ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1FF 7D                                   ld      a,l                         ; .
  51++C200 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C203 3A FF 80     .CalcBetaZ:             ld      a,(BETA)
  53++C206 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C208 57                                   ld      d,a                         ; .
  55++C209 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C20C 5F                                   ld      e,a                         ; .
  57++C20D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C210 CD F1 95                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C213              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C213                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C213                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C213                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C213                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C213                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C213                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C213                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C213 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C215 65                                   ld      h,l
  69++C216 ED 5B A2 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C21A 3A A1 C1                             ld      a,(PlanetK2)
  71++C21D 6F                                   ld      l,a
  72++C21E CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C221 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C225 7D                                   ld      a,l                         ; .
  75++C226 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C229 3A 0C 81     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C22C 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C22D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C230 5F                                   ld      e,a                         ; .
  80++C231 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C234 CD F1 95                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C237 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C238 32 99 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C23B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C23C 32 9A C1                             ld      (PlanetAlphaMulY+1),a
  86++C23F 7B                                   ld      a,e
  87++C240 32 9B C1                             ld      (PlanetAlphaMulY+2),a
  88++C243 7A                                   ld      a,d
  89++C244 32 9C C1                             ld      (PlanetAlphaMulY+3),a
  90++C247 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C249 65                                   ld      h,l                         ; .
  92++C24A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C24E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C251 6F                                   ld      l,a                         ; .
  95++C252 CD 6D 93                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C255 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C256 63                                   ld      h,e                         ;
  98++C257 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C25A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C25D C9                                   ret
 101++C25E 3A ED 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C261                                      ReturnIfAIsZero
 102++C261 A7          >                        and     a
 102++C262 C8          >                        ret     z
 103++C263 0E 00                                ld      c,0                         ;
 104++C265 67                                   ld      h,a                         ;
 105++C266 06 80                                ld      b,$80                       ;
 106++C268 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C26C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C26F 6F                                   ld      l,a                         ; .
 109++C270 CD 6D 93                             call    AddBCHtoDELsigned           ; update speed
 110++C273 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C277 7D                                   ld      a,l
 112++C278 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C27B C9                                   ret
 114++C27C
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 165+ C27C
 166+ C27C 00           PlanetOnScreen          DB 0
 167+ C27D 00 00        PlanetScrnX             DW  0       ; signed
 168+ C27F 00 00        PlanetScrnY             DW  0       ; signed
 169+ C281 00           PlanetRadius            DB  0       ; unsigned
 170+ C282              ; draw circle
 171+ C282
 172+ C282              ;
 173+ C282              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 174+ C282
 175+ C282 00 00 00 00  PlanetVarK                 DS 4
 176+ C286 00 00 00     PlanetVarP                 DS 3
 177+ C289 00           PlanetVarQ                 DS 1
 178+ C28A 00           PlanetVarR                 DS 1
 179+ C28B 00           PlanetVarS                 DS 1
 180+ C28C 00           PlanetVarT                 DS 1
 181+ C28D
 182+ C28D              ; Optimisation
 183+ C28D              ; if a <> 0
 184+ C28D              ;       divide AH by CD
 185+ C28D              ; if h <> 0
 186+ C28D              ;      if c <> 0 return 0
 187+ C28D              ;      else
 188+ C28D              ;        divide HL by DE
 189+ C28D              ; if l <>0
 190+ C28D              ;      if c or d <> 0 return 0
 191+ C28D              ;      else
 192+ C28D              ;        divide l by e
 193+ C28D              ;
 194+ C28D 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 195+ C28E 79                                   ld      a,c                         ; check for divide by zero
 196+ C28F B2                                   or      d                           ; .
 197+ C290 B3                                   or      e                           ; .
 198+ C291                                      JumpIfZero      .divideByZero       ; .
 198+ C291 CA AA C2    >                        jp	z,.divideByZero
 199+ C294 78                                   ld      a,b                         ; get a back
 200+ C295                                      JumpIfAIsNotZero    .divideAHLbyCDE
 200+ C295 A7          >                        and     a
 200+ C296 C2 B1 C2    >                        jp	    nz,.divideAHLbyCDE
 201+ C299 7C           .AIsZero:               ld      a,h
 202+ C29A                                      JumpIfAIsNotZero    .divideHLbyDE
 202+ C29A A7          >                        and     a
 202+ C29B C2 B8 C2    >                        jp	    nz,.divideHLbyDE
 203+ C29E 7D           .HIsZero:               ld      a,l
 204+ C29F                                      JumpIfAIsNotZero    .divideLbyE
 204+ C29F A7          >                        and     a
 204+ C2A0 C2 C7 C2    >                        jp	    nz,.divideLbyE
 205+ C2A3              .resultIsZero:          ZeroA
 205+ C2A3 AF          >                        xor a
 206+ C2A4 67                                   ld      h,a                        ; result is zero so set hlde
 207+ C2A5 6F                                   ld      l,a                        ; result is zero so set hlde
 208+ C2A6 54 5D                                ld      de,hl
 209+ C2A8                                      ClearCarryFlag
 209+ C2A8 B7          >                        or a
 210+ C2A9 C9                                   ret
 211+ C2AA 3E FF        .divideByZero:          ld      a,$FF
 212+ C2AC 67                                   ld      h,a
 213+ C2AD 6F                                   ld      l,a
 214+ C2AE 54 5D                                ld      de,hl
 215+ C2B0                                      SetCarryFlag
 215+ C2B0 37          >                        scf
 216+ C2B1              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 217+ C2B1              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 218+ C2B1 CD 64 94     .divideAHLbyCDE:        call    Div24by24
 219+ C2B4 EB                                   ex      hl,de                         ; ahl is result
 220+ C2B5 79                                   ld      a,c                           ; ahl is result
 221+ C2B6                                      ClearCarryFlag
 221+ C2B6 B7          >                        or a
 222+ C2B7 C9                                  ret
 223+ C2B8              ; AHL = 0hl/0de as A is zero
 224+ C2B8 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 225+ C2B9                                      JumpIfAIsNotZero   .resultIsZero
 225+ C2B9 A7          >                        and     a
 225+ C2BA C2 A3 C2    >                        jp	    nz,.resultIsZero
 226+ C2BD 44 4D                                ld      bc,hl
 227+ C2BF CD C0 98                             call    BC_Div_DE                   ; BC = HL/DE
 228+ C2C2 60 69                                ld      hl,bc
 229+ C2C4                                      ZeroA                               ; so we can set A to Zero
 229+ C2C4 AF          >                        xor a
 230+ C2C5                                      ClearCarryFlag
 230+ C2C5 B7          >                        or a
 231+ C2C6 C9                                   ret
 232+ C2C7              ; AHL = 00l/00e as A and H are zero
 233+ C2C7 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 234+ C2C8 B2                                   or      d
 235+ C2C9                                      JumpIfAIsNotZero   .resultIsZero
 235+ C2C9 A7          >                        and     a
 235+ C2CA C2 A3 C2    >                        jp	    nz,.resultIsZero
 236+ C2CD 4B                                   ld      c,e
 237+ C2CE 5D                                   ld      e,l
 238+ C2CF CD 82 98                             call    E_Div_C
 239+ C2D2 6F                                   ld      l,a
 240+ C2D3                                      ZeroA
 240+ C2D3 AF          >                        xor a
 241+ C2D4 67                                   ld      h,a
 242+ C2D5                                      ClearCarryFlag
 242+ C2D5 B7          >                        or a
 243+ C2D6 C9                                   ret
 244+ C2D7
 245+ C2D7
 246+ C2D7 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 247+ C2D8 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 248+ C2DC 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 249+ C2DF FD 67                                ld      iyh,a                       ; save sign
 250+ C2E1                                      ClearSignBitA
 250+ C2E1 E6 7F       >                        and     SignMask8Bit
 251+ C2E3                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 252+ C2E3              ;                        ld      c,a                         ;
 253+ C2E3 5A                                   ld      e,d
 254+ C2E4 57                                   ld      d,a
 255+ C2E5 0E 00                                ld      c,0
 256+ C2E7                                      ; added above to correct positioning as in reality its X/(Z/256)
 257+ C2E7 78                                   ld      a,b                         ; restore sign byte
 258+ C2E8 FD 6F                                ld      iyl,a                       ; save sign
 259+ C2EA                                      ClearSignBitA
 259+ C2EA E6 7F       >                        and     SignMask8Bit
 260+ C2EC CD 8D C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 261+ C2EF              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 261+ C2EF A7          >                        and     a
 261+ C2F0 C2 0D C3    >                        jp	    nz,.IsOffScreen
 262+ C2F3                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 262+ C2F3 7C          >                        ld      a,h
 262+ C2F4 E6 80       >                        and     SignOnly8Bit
 262+ C2F6 C2 0D C3    >                        jp      nz,.IsOffScreen
 263+ C2F9 7C                                   ld      a,h
 264+ C2FA                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 264+ C2FA FE 04       >                        cp    4
 264+ C2FC D0          >                        ret	 nc
 265+ C2FD FD 7C                                ld      a,iyh                       ; now deal with the sign
 266+ C2FF FD AD                                xor     iyl
 267+ C301                                      SignBitOnlyA                        ; a= resultant sign
 267+ C301 E6 80       >                        and     SignOnly8Bit
 268+ C303 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 269+ C305              .XIsNegative:           NegHL                               ; make 2's c as negative
 269+ C305 AF          >                    xor a
 269+ C306 95          >                    sub l
 269+ C307 6F          >                    ld l,a
 269+ C308 9F          >                    sbc a,a
 269+ C309 94          >                    sub h
 269+ C30A 67          >                    ld h,a
 270+ C30B              .calculatedVert:        ClearCarryFlag
 270+ C30B B7          >                        or a
 271+ C30C C9                                   ret
 272+ C30D 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 273+ C310 FD 7C                                ld      a,iyh
 274+ C312 FD AD                                xor     iyl
 275+ C314                                      SignBitOnlyA
 275+ C314 E6 80       >                        and     SignOnly8Bit
 276+ C316 28 02                                jr      z,.calculatedOffScreen
 277+ C318 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 278+ C319 23                                   inc     hl                          ; .
 279+ C31A              .calculatedOffScreen:   SetCarryFlag
 279+ C31A 37          >                        scf
 280+ C31B C9                                   ret
 281+ C31C
 282+ C31C
 283+ C31C              ; .........................................................................................................................
 284+ C31C              ; we only hit this if z is positive so we can ignore signs
 285+ C31C ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 286+ C320 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 287+ C323 57                                   ld      d,a                         ;
 288+ C324 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 289+ C327 CD 2D 97                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 290+ C32A B4                                   or      h                           ; if A or H are not 0 then max Radius
 291+ C32B                                      JumpIfAIsZero  .SaveRadius
 291+ C32B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 291+ C32C CA 31 C3    >                        jp	    z, .SaveRadius
 292+ C32F 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 293+ C331 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 294+ C332 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 295+ C334 32 81 C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 296+ C337 5F                                   ld      e,a                         ; as later code expects it to be in e
 297+ C338 C9                                   ret
 298+ C339
 299+ C339              ; Shorter version when sun does not need to be processed to screen
 300+ C339 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 301+ C33C 2A 10 C0                             ld      hl,(PBnKxlo)
 302+ C33F CD D7 C2                             call    PlanetProcessVertex
 303+ C342 22 19 C0                             ld      (PlanetCompassX),hl
 304+ C345 3A 15 C0                             ld      a,(PBnKysgn)
 305+ C348 2A 13 C0                             ld      hl,(PBnKylo)
 306+ C34B CD D7 C2                             call    PlanetProcessVertex
 307+ C34E 22 1B C0                             ld      (PlanetCompassY),hl
 308+ C351 C9                                   ret
 309+ C352
 310+ C352                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 311+ C352 C9           PlanetUpdateAndRender:  ret; This is the source of the rogue single pixel
 312+ C353 CD A4 C1                             call    PlanetApplyMyRollAndPitch
 313+ C356 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 314+ C359                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 314+ C359 FE 30       >                        cp     48
 314+ C35B D2 39 C3    >                        jp		nc,PlanetUpdateCompass
 315+ C35E 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 316+ C361 B6                                   or      (hl)
 317+ C362                                      JumpIfAIsZero       PlanetUpdateCompass
 317+ C362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 317+ C363 CA 39 C3    >                        jp	    z, PlanetUpdateCompass
 318+ C366 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 319+ C369 2A 10 C0                             ld      hl,(PBnKxlo)
 320+ C36C CD D7 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 321+ C36F 22 19 C0                             ld      (PlanetCompassX),hl
 322+ C372 D8                                   ret     c
 323+ C373 1E 80        .calculatedX:           ld      e,ScreenCenterX
 324+ C375 16 00                                ld      d,0
 325+ C377                                      ClearCarryFlag
 325+ C377 B7          >                        or a
 326+ C378 ED 5A                                adc     hl,de
 327+ C37A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 328+ C37A 22 7D C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 329+ C37D 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 330+ C380 2A 13 C0                             ld      hl,(PBnKylo)
 331+ C383 CD D7 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 332+ C386 22 1B C0                             ld      (PlanetCompassY),hl
 333+ C389 D8                                   ret     c
 334+ C38A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 335+ C38C 16 00                                ld      d,0
 336+ C38E EB                                   ex      de,hl
 337+ C38F                                      ClearCarryFlag
 337+ C38F B7          >                        or a
 338+ C390 ED 52                                sbc     hl,de
 339+ C392                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 340+ C392 22 7F C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 341+ C395              ; .........................................................................................................................
 342+ C395 CD 1C C3                             call    PlanetCalculateRadius
 343+ C398              ; .........................................................................................................................
 344+ C398 2A 7D C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 345+ C39B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 346+ C39E 16 00                                ld      d,0                         ; e still holds radius
 347+ C3A0 7C                                   ld      a,h
 348+ C3A1                                      JumpOnLeadSignSet   h,.CheckXNegative
 348+ C3A1 7C          >                        ld      a,h
 348+ C3A2 E6 80       >                        and     SignOnly8Bit
 348+ C3A4 C2 BA C3    >                        jp      nz,.CheckXNegative
 349+ C3A7 7C           .CheckXPositive:        ld      a,h
 350+ C3A8                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 350+ C3A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 350+ C3A9 CA C3 C3    >                        jp	    z, .XOnScreen
 351+ C3AC 16 00                                ld      d,0                         ; de = radius
 352+ C3AE                                      ClearCarryFlag
 352+ C3AE B7          >                        or a
 353+ C3AF ED 52                                sbc     hl,de
 354+ C3B1 FA C3 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 355+ C3B4 7C                                   ld      a,h
 356+ C3B5                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 356+ C3B5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 356+ C3B6 CA C3 C3    >                        jp	    z, .XOnScreen
 357+ C3B9 C9                                   ret                                 ; None of the X coordinates are on screen
 358+ C3BA 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 359+ C3BC                                      ClearCarryFlag
 359+ C3BC B7          >                        or a
 360+ C3BD ED 5A                                adc     hl,de                       ; so we have hl - de
 361+ C3BF F2 C3 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 362+ C3C2 C9                                   ret                                 ; else x is totally off the left side of the screen
 363+ C3C3              ; .........................................................................................................................
 364+ C3C3 2A 7F C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 365+ C3C6                                      JumpOnLeadSignSet   h,.CheckYNegative
 365+ C3C6 7C          >                        ld      a,h
 365+ C3C7 E6 80       >                        and     SignOnly8Bit
 365+ C3C9 C2 EA C3    >                        jp      nz,.CheckYNegative
 366+ C3CC 7C           .CheckYPositive:        ld      a,h
 367+ C3CD                                      JumpIfAIsNotZero   .PosYCheck2
 367+ C3CD A7          >                        and     a
 367+ C3CE C2 D7 C3    >                        jp	    nz,.PosYCheck2
 368+ C3D1 7D                                   ld      a,l
 369+ C3D2 E6 80                                and     %10000000
 370+ C3D4 CA F3 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 371+ C3D7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 372+ C3D9                                      ClearCarryFlag
 372+ C3D9 B7          >                        or a
 373+ C3DA ED 52                                sbc     hl,de
 374+ C3DC FA F3 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 375+ C3DF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 376+ C3E0                                      ReturnIfANotZero                    ; .
 376+ C3E0 A7          >                        and     a
 376+ C3E1 C0          >                        ret     nz
 377+ C3E2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 378+ C3E3 E6 80                                and     %10000000                   ; .
 379+ C3E5                                      ReturnIfANotZero                    ; .
 379+ C3E5 A7          >                        and     a
 379+ C3E6 C0          >                        ret     nz
 380+ C3E7 C3 C1 C7                             jp      YOnScreen                  ; so Y at least spans
 381+ C3EA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 382+ C3EC                                      ClearCarryFlag
 382+ C3EC B7          >                        or a
 383+ C3ED ED 5A                                adc     hl,de                       ; so we have hl - de
 384+ C3EF F2 F3 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 385+ C3F2 C9                                   ret                                 ; else never gets above 0 so return
 386+ C3F3              ; .........................................................................................................................
 387+ C3F3 CD F7 C3     .YOnScreen:             call    PlanetDraw
 388+ C3F6 C9                                   ret
 389+ C3F7
 390+ C3F7              PlanetDraw:             MMUSelectLayer2
 390+ C3F7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 391+ C3FB 2A 7D C2                             ld      hl,(PlanetScrnX)
 392+ C3FE ED 5B 7F C2                          ld      de,(PlanetScrnY)
 393+ C402 3A 81 C2                             ld      a,(PlanetRadius)
 394+ C405 4F                                   ld      c,a
 395+ C406 3E 0C                                ld      a,L2ColourGREEN_4
 396+ C408 CD F5 ED                             call    l2_draw_clipped_circle
 397+ C40B C9                                   ret
 398+ C40C
 399+ C40C
 400+ C40C              PlanetBankSize  EQU $ - StartOfPlanet
 401+ C40C
 402+ C40C
# file closed: ./Universe/Planet/planet_data.asm
1036  C40C                                      DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1037  C40C              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1038  C40C              ;;;***                        SLOT    SpriteDataAAddr
1039  C40C              ;;;***                        PAGE    BankSpriteDataA
1040  C40C              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1041  C40C              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1042  C40C              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1043  C40C              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1044  C40C              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1045  C40C              ;;;***                        SLOT    SpriteDataBAddr
1046  C40C              ;;;***                        PAGE    BankSpriteDataB
1047  C40C              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1048  C40C              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1049  C40C              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1050  C40C              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1051  C40C              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1052  C40C                                      SLOT    GalaxyDataAddr
1053  C40C                                      PAGE    BankGalaxyData0
1054  C40C                                      ORG GalaxyDataAddr, BankGalaxyData0
1055  E000                                      INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 E2 8B 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 7F 8F 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 C7 8B D8 8B                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A DE 8B 00 00
 317+ F41E EE 8B F5 8B                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 E2 8B E7 8B                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E CD 8B D4 8B                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 FC 8B 03 8C                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 61 8C FC 8B                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 2F 8C 00 00
 322+ F446 3B 8C 43 8C                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 58 8C 97 8E                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 B1 8B 0E 8C                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A 08 8C 00 00
 325+ F45E C2 8B 0E 8C                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 08 8C 00 00
 326+ F466 BD 8B 0E 8C                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A 08 8C 00 00
 327+ F46E B7 8B 0E 8C                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 08 8C 00 00
 328+ F476 B1 8B 14 8C                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A 08 8C 00 00
 329+ F47E C2 8B 14 8C                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 08 8C 00 00
 330+ F486 BD 8B 14 8C                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A 08 8C 00 00
 331+ F48E B7 8B 14 8C                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 08 8C 00 00
 332+ F496 B1 8B 21 8C                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A 08 8C 00 00
 333+ F49E C2 8B 21 8C                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 08 8C 00 00
 334+ F4A6 BD 8B 21 8C                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA 08 8C 00 00
 335+ F4AE B7 8B 21 8C                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 08 8C 00 00
 336+ F4B6 B1 8B A2 8E                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA 08 8C 00 00
 337+ F4BE C2 8B A2 8E                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 08 8C 00 00
 338+ F4C6 BD 8B A2 8E                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA 08 8C 00 00
 339+ F4CE B7 8B A2 8E                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 08 8C 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD A9 88     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD C1 88     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 AD 92     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 77 82                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD CE 92     .LargeSizeName:         call	NamingLoop
 402+ F691 CD CE 92     .SmallSizeName:         call	NamingLoop
 403+ F694 CD CE 92                             call	NamingLoop
 404+ F697 CD CE 92                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 79 82     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 7A 82                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 7B 82                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 7C 82                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 1F 88     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 04 88     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 96 82     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD B2 95                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 5F 82     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 77 82             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 77 82             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 5F 82     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 5F 82     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 5F 82     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 F8 81                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A F8 81     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 F8 81     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 85 96                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 AB 82                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 AB 82                             ld      (Distance),a
1231+ FC60 32 AC 82                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 F8 81                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 77 82                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 94 88                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A F8 81                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 F8 81                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 5F 82     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 F8 81                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 5F 82                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 94 88                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD C9 88                             call    next_system_seed                ; .
1286+ FCCF 3A F8 81                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 F8 81                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1056  FCDC                                      DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1057  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1058  FCDC                                      SLOT    GalaxyDataAddr
1059  FCDC                                      PAGE    BankGalaxyData1
1060  FCDC                                      ORG GalaxyDataAddr, BankGalaxyData1
1061  E000 FF           GALAXYDATABlock1         DB $FF
1062  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1063  0000                                      DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1064  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1065  0000                                      SLOT    GalaxyDataAddr
1066  0000                                      PAGE    BankGalaxyData2
1067  0000                                      ORG GalaxyDataAddr, BankGalaxyData2
1068  E000 FF           GALAXYDATABlock2        DB $FF
1069  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1070  0000                                      DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1071  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1072  0000                                      SLOT    GalaxyDataAddr
1073  0000                                      PAGE    BankGalaxyData3
1074  0000                                      ORG GalaxyDataAddr, BankGalaxyData3
1075  E000 FF           GALAXYDATABlock3        DB $FF
1076  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1077  0000                                      DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1078  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1079  0000                                      SLOT    GalaxyDataAddr
1080  0000                                      PAGE    BankGalaxyData4
1081  0000                                      ORG GalaxyDataAddr, BankGalaxyData4
1082  E000 FF           GALAXYDATABlock4        DB $FF
1083  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1084  0000                                      DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1085  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1086  0000                                      SLOT    GalaxyDataAddr
1087  0000                                      PAGE    BankGalaxyData5
1088  0000                                      ORG GalaxyDataAddr,BankGalaxyData5
1089  E000 FF           GALAXYDATABlock5        DB $FF
1090  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1091  0000                                      DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1092  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1093  0000                                      SLOT    GalaxyDataAddr
1094  0000                                      PAGE    BankGalaxyData6
1095  0000                                      ORG GalaxyDataAddr,BankGalaxyData6
1096  E000 FF           GALAXYDATABlock6        DB $FF
1097  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1098  0000                                      DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1099  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1100  0000                                      SLOT    GalaxyDataAddr
1101  0000                                      PAGE    BankGalaxyData7
1102  0000                                      ORG GalaxyDataAddr,BankGalaxyData7
1103  E000 FF           GALAXYDATABlock7        DB $FF
1104  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1105  0000                                      DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1106  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1107  0000                                      SLOT    MathsTablesAddr
1108  0000                                      PAGE    BankMathsTables
1109  0000                                      ORG     MathsTablesAddr,BankMathsTables
1110  0000                                      INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 05 07                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 05 05                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 05 05                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
  34+ 0043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  34+ 0044 CA 6C 00    >                        jp	    z, .ResultIsZero
  35+ 0047 21 05 05                             ld      hl,LogTable                     ; de = log a
  36+ 004A ED 31                                add     hl,a                            ; .
  37+ 004C ED 31                                add     hl,a                            ; .
  38+ 004E 5E                                   ld      e,(hl)                          ; .
  39+ 004F 23                                   inc     hl                              ; .
  40+ 0050 56                                   ld      d,(hl)                          ; .
  41+ 0051 21 05 05                             ld      hl,LogTable                     ; hl = log b
  42+ 0054 78                                   ld      a,b                             ; .
  43+ 0055 ED 31                                add     hl,a                            ; .
  44+ 0057 ED 31                                add     hl,a                            ; .
  45+ 0059 7E                                   ld      a,(hl)                          ; .
  46+ 005A 23                                   inc     hl                              ; .
  47+ 005B 66                                   ld      h,(hl)                          ; .
  48+ 005C 6F                                   ld      l,a                             ; .
  49+ 005D                                      ClearCarryFlag                          ;
  49+ 005D B7          >                        or a
  50+ 005E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  51+ 005F ED 52                                sbc     hl,de                           ; hl = log a - log b
  52+ 0061 7C                                   ld      a,h                             ; .
  53+ 0062 21 05 03                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
  54+ 0065 ED 31                                add     hl,a                            ; which is also a / b
  55+ 0067 ED 31                                add     hl,a                            ; .
  56+ 0069 7E                                   ld      a,(hl)                          ; .
  57+ 006A                                      ClearCarryFlag                          ;
  57+ 006A B7          >                        or a
  58+ 006B C9                                   ret
  59+ 006C              .ResultIsZero:          ClearCarryFlag
  59+ 006C B7          >                        or a
  60+ 006D                                      ZeroA
  60+ 006D AF          >                        xor a
  61+ 006E C9                                   ret
  62+ 006F
  63+ 006F              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
  63+ 006F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 0070 CA A6 00    >                        jp	    z, .ResultIsZero
  64+ 0073                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
  64+ 0073 BA          >                        cp     d
  64+ 0074 D2 43 00    >                        jp		nc,AEquAmul256DivBLogLT
  65+ 0077 21 05 05                             ld      hl,LogTable                     ; de = log a
  66+ 007A ED 31                                add     hl,a                            ; .
  67+ 007C ED 31                                add     hl,a                            ; .
  68+ 007E 5E                                   ld      e,(hl)                          ; .
  69+ 007F 23                                   inc     hl                              ; .
  70+ 0080 56                                   ld      d,(hl)                          ; .
  71+ 0081 21 05 05                             ld      hl,LogTable                     ; hl = log b
  72+ 0084 78                                   ld      a,b                             ; .
  73+ 0085 ED 31                                add     hl,a                            ; .
  74+ 0087 ED 31                                add     hl,a                            ; .
  75+ 0089 7E                                   ld      a,(hl)                          ; .
  76+ 008A 23                                   inc     hl                              ; .
  77+ 008B 66                                   ld      h,(hl)                          ; .
  78+ 008C 6F                                   ld      l,a                             ; .
  79+ 008D                                      ClearCarryFlag                          ;
  79+ 008D B7          >                        or a
  80+ 008E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  81+ 008F ED 52                                sbc     hl,de                           ; hl = log a - log b
  82+ 0091 38 0B                                jr      c,.ResultIsOne                  ; .
  83+ 0093 7C                                   ld      a,h                             ; .
  84+ 0094 21 05 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
  85+ 0097 ED 31                                add     hl,a                            ; which is also a / b
  86+ 0099 ED 31                                add     hl,a                            ; .
  87+ 009B 7E                                   ld      a,(hl)                          ; .
  88+ 009C                                      ClearCarryFlag                          ;
  88+ 009C B7          >                        or a
  89+ 009D C9                                   ret
  90+ 009E              .ResultIsOne:           ClearCarryFlag
  90+ 009E B7          >                        or a
  91+ 009F 3E FF                                ld      a,$FF
  92+ 00A1 C9                                   ret
  93+ 00A2              .ResultIsInfinte:       SetCarryFlag
  93+ 00A2 37          >                        scf
  94+ 00A3 3E FF                                ld      a,$FF
  95+ 00A5 C9                                   ret
  96+ 00A6              .ResultIsZero:          ClearCarryFlag
  96+ 00A6 B7          >                        or a
  97+ 00A7 C9                                   ret
  98+ 00A8
  99+ 00A8              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
  99+ 00A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  99+ 00A9 CA C8 00    >                        jp	    z, .ResultIsZero
 100+ 00AC 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 101+ 00AF ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 102+ 00B1 ED 31                                add     hl,a
 103+ 00B3 5E                                   ld      e,(hl)                          ; de = log a
 104+ 00B4 23                                   inc     hl                              ; .
 105+ 00B5 56                                   ld      d,(hl)                          ; .
 106+ 00B6 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 107+ 00B9                                      ClearCarryFlag
 107+ 00B9 B7          >                        or a
 108+ 00BA EB                                   ex      hl,de                           ; hl = log a, de = log 197
 109+ 00BB ED 52                                sbc     hl,de
 110+ 00BD 7C                                   ld      a,h
 111+ 00BE 21 05 03                             ld      hl,AnitLogODDTable
 112+ 00C1 ED 31                                add     hl,a
 113+ 00C3 ED 31                                add     hl,a
 114+ 00C5 7E                                   ld      a,(hl)
 115+ 00C6                                      ClearCarryFlag
 115+ 00C6 B7          >                        or a
 116+ 00C7 C9                                   ret
 117+ 00C8              .ResultIsZero:          ClearCarryFlag
 117+ 00C8 B7          >                        or a
 118+ 00C9                                      ZeroA
 118+ 00C9 AF          >                        xor a
 119+ 00CA C9                                   ret
 120+ 00CB
 121+ 00CB
 122+ 00CB              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 122+ 00CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 122+ 00CC CA F5 00    >                        jp	    z, .ResultIsZero
 123+ 00CF                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 123+ 00CF BA          >                        cp     d
 123+ 00D0 D2 A8 00    >                        jp		nc,AEquAmul256Div197LogLT
 124+ 00D3 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 125+ 00D6 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 126+ 00D8 ED 31                                add     hl,a
 127+ 00DA 5E                                   ld      e,(hl)                          ; de = log a
 128+ 00DB 23                                   inc     hl                              ; .
 129+ 00DC 56                                   ld      d,(hl)                          ; .
 130+ 00DD 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 131+ 00E0                                      ClearCarryFlag
 131+ 00E0 B7          >                        or a
 132+ 00E1 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 133+ 00E2 ED 52                                sbc     hl,de
 134+ 00E4 38 0B                                jr      c,.ResultIsOne
 135+ 00E6 7C                                   ld      a,h
 136+ 00E7 21 05 01                             ld      hl,AntiLogTable
 137+ 00EA ED 31                                add     hl,a
 138+ 00EC ED 31                                add     hl,a
 139+ 00EE 7E                                   ld      a,(hl)
 140+ 00EF                                      ClearCarryFlag
 140+ 00EF B7          >                        or a
 141+ 00F0 C9                                   ret
 142+ 00F1              .ResultIsOne:           ClearCarryFlag
 142+ 00F1 B7          >                        or a
 143+ 00F2 3E FF                                ld      a,$FF
 144+ 00F4 C9                                   ret
 145+ 00F5              .ResultIsZero:          ClearCarryFlag
 145+ 00F5 B7          >                        or a
 146+ 00F6 C9                                   ret
 147+ 00F7
 148+ 00F7              AEquAmul256Div197LogSignA:
 149+ 00F7 FD 67                                ld      iyh,a
 150+ 00F9                                      ClearSignBitA
 150+ 00F9 E6 7F       >                        and     SignMask8Bit
 151+ 00FB CD CB 00                             call    AEquAmul256Div197Log
 152+ 00FE 47                                   ld      b,a
 153+ 00FF FD 7C                                ld      a,iyh
 154+ 0101                                      SignBitOnlyA
 154+ 0101 E6 80       >                        and     SignOnly8Bit
 155+ 0103 B0                                   or      b
 156+ 0104 C9                                   ret
# file closed: ./Maths/logmaths.asm
1111  0105                                      INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0105 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   1+ 0109 01 00 01 00
   1+ 010D 01 00 01 00
   1+ 0111 01 00 01 00
   1+ 0115 01 00 01 00
   1+ 0119 01 00 01 00
   1+ 011D 01 00 01 00
   1+ 0121 01 00 01 00
   2+ 0125 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   2+ 0129 01 00 01 00
   2+ 012D 01 00 01 00
   2+ 0131 01 00 01 00
   2+ 0135 01 00 01 00
   2+ 0139 01 00 01 00
   2+ 013D 01 00 01 00
   2+ 0141 01 00 01 00
   3+ 0145 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
   3+ 0149 02 00 02 00
   3+ 014D 02 00 02 00
   3+ 0151 02 00 02 00
   3+ 0155 02 00 02 00
   3+ 0159 02 00 02 00
   3+ 015D 02 00 02 00
   3+ 0161 02 00 02 00
   4+ 0165 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
   4+ 0169 02 00 03 00
   4+ 016D 03 00 03 00
   4+ 0171 03 00 03 00
   4+ 0175 03 00 03 00
   4+ 0179 03 00 03 00
   4+ 017D 03 00 03 00
   4+ 0181 03 00 03 00
   5+ 0185 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
   5+ 0189 04 00 04 00
   5+ 018D 04 00 04 00
   5+ 0191 04 00 04 00
   5+ 0195 04 00 04 00
   5+ 0199 04 00 05 00
   5+ 019D 05 00 05 00
   5+ 01A1 05 00 05 00
   6+ 01A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
   6+ 01A9 05 00 06 00
   6+ 01AD 06 00 06 00
   6+ 01B1 06 00 06 00
   6+ 01B5 06 00 06 00
   6+ 01B9 07 00 07 00
   6+ 01BD 07 00 07 00
   6+ 01C1 07 00 07 00
   7+ 01C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
   7+ 01C9 08 00 08 00
   7+ 01CD 08 00 08 00
   7+ 01D1 09 00 09 00
   7+ 01D5 09 00 09 00
   7+ 01D9 09 00 0A 00
   7+ 01DD 0A 00 0A 00
   7+ 01E1 0A 00 0B 00
   8+ 01E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
   8+ 01E9 0B 00 0C 00
   8+ 01ED 0C 00 0C 00
   8+ 01F1 0C 00 0D 00
   8+ 01F5 0D 00 0D 00
   8+ 01F9 0E 00 0E 00
   8+ 01FD 0E 00 0E 00
   8+ 0201 0F 00 0F 00
   9+ 0205 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
   9+ 0209 10 00 11 00
   9+ 020D 11 00 11 00
   9+ 0211 12 00 12 00
   9+ 0215 13 00 13 00
   9+ 0219 13 00 14 00
   9+ 021D 14 00 15 00
   9+ 0221 15 00 16 00
  10+ 0225 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
  10+ 0229 17 00 18 00
  10+ 022D 18 00 19 00
  10+ 0231 19 00 1A 00
  10+ 0235 1A 00 1B 00
  10+ 0239 1C 00 1C 00
  10+ 023D 1D 00 1D 00
  10+ 0241 1E 00 1F 00
  11+ 0245 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
  11+ 0249 21 00 22 00
  11+ 024D 22 00 23 00
  11+ 0251 24 00 25 00
  11+ 0255 26 00 26 00
  11+ 0259 27 00 28 00
  11+ 025D 29 00 2A 00
  11+ 0261 2B 00 2C 00
  12+ 0265 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
  12+ 0269 2F 00 30 00
  12+ 026D 31 00 32 00
  12+ 0271 33 00 34 00
  12+ 0275 35 00 36 00
  12+ 0279 38 00 39 00
  12+ 027D 3A 00 3B 00
  12+ 0281 3D 00 3E 00
  13+ 0285 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
  13+ 0289 42 00 44 00
  13+ 028D 45 00 47 00
  13+ 0291 48 00 4A 00
  13+ 0295 4C 00 4D 00
  13+ 0299 4F 00 51 00
  13+ 029D 52 00 54 00
  13+ 02A1 56 00 58 00
  14+ 02A5 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
  14+ 02A9 5E 00 60 00
  14+ 02AD 62 00 64 00
  14+ 02B1 67 00 69 00
  14+ 02B5 6B 00 6D 00
  14+ 02B9 70 00 72 00
  14+ 02BD 75 00 77 00
  14+ 02C1 7A 00 7D 00
  15+ 02C5 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
  15+ 02C9 85 00 88 00
  15+ 02CD 8B 00 8E 00
  15+ 02D1 91 00 94 00
  15+ 02D5 98 00 9B 00
  15+ 02D9 9E 00 A2 00
  15+ 02DD A5 00 A9 00
  15+ 02E1 AD 00 B1 00
  16+ 02E5 B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
  16+ 02E9 BD 00 C1 00
  16+ 02ED C5 00 C9 00
  16+ 02F1 CE 00 D2 00
  16+ 02F5 D7 00 DB 00
  16+ 02F9 E0 00 E5 00
  16+ 02FD EA 00 EF 00
  16+ 0301 F5 00 FA 00
  17+ 0305
  18+ 0305 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
  18+ 0309 01 00 01 00
  18+ 030D 01 00 01 00
  18+ 0311 01 00 01 00
  18+ 0315 01 00 01 00
  18+ 0319 01 00 01 00
  18+ 031D 01 00 01 00
  18+ 0321 01 00 01 00
  19+ 0325 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
  19+ 0329 01 00 01 00
  19+ 032D 01 00 01 00
  19+ 0331 01 00 01 00
  19+ 0335 01 00 01 00
  19+ 0339 01 00 01 00
  19+ 033D 01 00 01 00
  19+ 0341 01 00 01 00
  20+ 0345 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
  20+ 0349 02 00 02 00
  20+ 034D 02 00 02 00
  20+ 0351 02 00 02 00
  20+ 0355 02 00 02 00
  20+ 0359 02 00 02 00
  20+ 035D 02 00 02 00
  20+ 0361 02 00 02 00
  21+ 0365 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
  21+ 0369 02 00 03 00
  21+ 036D 03 00 03 00
  21+ 0371 03 00 03 00
  21+ 0375 03 00 03 00
  21+ 0379 03 00 03 00
  21+ 037D 03 00 03 00
  21+ 0381 03 00 03 00
  22+ 0385 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
  22+ 0389 04 00 04 00
  22+ 038D 04 00 04 00
  22+ 0391 04 00 04 00
  22+ 0395 04 00 04 00
  22+ 0399 05 00 05 00
  22+ 039D 05 00 05 00
  22+ 03A1 05 00 05 00
  23+ 03A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
  23+ 03A9 05 00 06 00
  23+ 03AD 06 00 06 00
  23+ 03B1 06 00 06 00
  23+ 03B5 06 00 06 00
  23+ 03B9 07 00 07 00
  23+ 03BD 07 00 07 00
  23+ 03C1 07 00 07 00
  24+ 03C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
  24+ 03C9 08 00 08 00
  24+ 03CD 08 00 09 00
  24+ 03D1 09 00 09 00
  24+ 03D5 09 00 09 00
  24+ 03D9 0A 00 0A 00
  24+ 03DD 0A 00 0A 00
  24+ 03E1 0A 00 0B 00
  25+ 03E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
  25+ 03E9 0B 00 0C 00
  25+ 03ED 0C 00 0C 00
  25+ 03F1 0D 00 0D 00
  25+ 03F5 0D 00 0D 00
  25+ 03F9 0E 00 0E 00
  25+ 03FD 0E 00 0F 00
  25+ 0401 0F 00 0F 00
  26+ 0405 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
  26+ 0409 10 00 11 00
  26+ 040D 11 00 12 00
  26+ 0411 12 00 12 00
  26+ 0415 13 00 13 00
  26+ 0419 14 00 14 00
  26+ 041D 14 00 15 00
  26+ 0421 15 00 16 00
  27+ 0425 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
  27+ 0429 17 00 18 00
  27+ 042D 18 00 19 00
  27+ 0431 1A 00 1A 00
  27+ 0435 1B 00 1B 00
  27+ 0439 1C 00 1D 00
  27+ 043D 1D 00 1E 00
  27+ 0441 1E 00 1F 00
  28+ 0445 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
  28+ 0449 21 00 22 00
  28+ 044D 23 00 24 00
  28+ 0451 24 00 25 00
  28+ 0455 26 00 27 00
  28+ 0459 28 00 29 00
  28+ 045D 29 00 2A 00
  28+ 0461 2B 00 2C 00
  29+ 0465 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
  29+ 0469 2F 00 30 00
  29+ 046D 31 00 32 00
  29+ 0471 34 00 35 00
  29+ 0475 36 00 37 00
  29+ 0479 38 00 3A 00
  29+ 047D 3B 00 3C 00
  29+ 0481 3D 00 3F 00
  30+ 0485 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
  30+ 0489 43 00 45 00
  30+ 048D 46 00 48 00
  30+ 0491 49 00 4B 00
  30+ 0495 4C 00 4E 00
  30+ 0499 50 00 52 00
  30+ 049D 53 00 55 00
  30+ 04A1 57 00 59 00
  31+ 04A5 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
  31+ 04A9 5F 00 61 00
  31+ 04AD 63 00 65 00
  31+ 04B1 68 00 6A 00
  31+ 04B5 6C 00 6F 00
  31+ 04B9 71 00 74 00
  31+ 04BD 76 00 79 00
  31+ 04C1 7B 00 7E 00
  32+ 04C5 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
  32+ 04C9 87 00 8A 00
  32+ 04CD 8D 00 90 00
  32+ 04D1 93 00 96 00
  32+ 04D5 99 00 9D 00
  32+ 04D9 A0 00 A4 00
  32+ 04DD A7 00 AB 00
  32+ 04E1 AF 00 B3 00
  33+ 04E5 B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
  33+ 04E9 BF 00 C3 00
  33+ 04ED C7 00 CB 00
  33+ 04F1 D0 00 D4 00
  33+ 04F5 D9 00 DE 00
  33+ 04F9 E3 00 E8 00
  33+ 04FD ED 00 F2 00
  33+ 0501 F7 00 FD 00
  34+ 0505
# file closed: ./Tables/antilogtable.asm
1112  0505                                      INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0505 00 00        LogTable:               DW $0000                                                            ; 0
   2+ 0507 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
   2+ 050B 0F 32 0D 40
   2+ 050F EC 4A 16 52
   2+ 0513 C2 59 13 60
   3+ 0517 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
   3+ 051B 9A 6E 1C 72
   3+ 051F 80 76 C9 79
   3+ 0523 FB 7D 1A 80
   4+ 0527 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
   4+ 052B 15 87 F9 8A
   4+ 052F D2 8C A0 8E
   4+ 0533 66 90 23 92
   5+ 0537 D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
   5+ 053B 2E 98 CF 99
   5+ 053F 6B 9B 02 9D
   5+ 0543 93 9E 20 A0
   6+ 0547 A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
   6+ 054B AE A4 2C A5
   6+ 054F A5 A6 1C A7
   6+ 0553 8F A9 00 AA
   7+ 0557 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
   7+ 055B 41 AD A7 AE
   7+ 055F 0B AF 6C B0
   7+ 0563 CC B1 29 B2
   8+ 0567 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
   8+ 056B 37 B5 8D B6
   8+ 056F E1 B7 34 B8
   8+ 0573 86 B9 D6 B9
   9+ 0577 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
   9+ 057B BE BC 08 BD
   9+ 057F 52 BD 9A BE
   9+ 0583 E1 BF 27 C0
  10+ 0587 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
  10+ 058B F2 C2 34 C2
  10+ 058F 75 C3 B5 C4
  10+ 0593 F4 C4 32 C5
  11+ 0597 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
  11+ 059B E7 C7 22 C7
  11+ 059F 5C C8 96 C9
  11+ 05A3 CE C9 06 CA
  12+ 05A7 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
  12+ 05AB AA CC DF CC
  12+ 05AF 13 CD 47 CD
  12+ 05B3 7B CE AD CE
  13+ 05B7 E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
  13+ 05BB 42 D0 73 D0
  13+ 05BF A3 D1 D2 D1
  13+ 05C3 01 D2 30 D2
  14+ 05C7 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
  14+ 05CB B9 D4 E5 D4
  14+ 05CF 11 D5 3D D5
  14+ 05D3 68 D5 93 D6
  15+ 05D7 BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
  15+ 05DB 12 D7 3B D8
  15+ 05DF 64 D8 8C D9
  15+ 05E3 B5 D9 DD D9
  16+ 05E7 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
  16+ 05EB 52 DB 78 DB
  16+ 05EF 9E DB C4 DC
  16+ 05F3 EA DC 0F DD
  17+ 05F7 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
  17+ 05FB 7D DE A1 DE
  17+ 05FF C4 DE E8 DF
  17+ 0603 0B DF 2E E0
  18+ 0607 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
  18+ 060B 94 E1 B6 E1
  18+ 060F D8 E1 F9 E2
  18+ 0613 1A E2 3B E2
  19+ 0617 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
  19+ 061B 9C E3 BC E4
  19+ 061F DB E4 FB E4
  19+ 0623 1A E5 39 E5
  20+ 0627 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
  20+ 062B 94 E6 B2 E6
  20+ 062F D0 E7 EE E7
  20+ 0633 0C E7 29 E7
  21+ 0637 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
  21+ 063B 80 E8 9C E9
  21+ 063F B9 E9 D5 E9
  21+ 0643 F1 EA 0D EA
  22+ 0647 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
  22+ 064B 5F EB 7A EB
  22+ 064F 95 EB B0 EC
  22+ 0653 CB EC E5 EC
  23+ 0657 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
  23+ 065B 34 ED 4E ED
  23+ 065F 68 ED 81 EE
  23+ 0663 9B EE B4 EE
  24+ 0667 CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
  24+ 066B FF EF 18 EF
  24+ 066F 30 EF 49 F0
  24+ 0673 61 F0 79 F0
  25+ 0677 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
  25+ 067B C1 F1 D9 F1
  25+ 067F F0 F1 08 F2
  25+ 0683 1F F2 36 F2
  26+ 0687 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
  26+ 068B 7B F3 92 F3
  26+ 068F A9 F3 BF F4
  26+ 0693 D5 F4 EC F4
  27+ 0697 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
  27+ 069B 2E F5 44 F5
  27+ 069F 59 F5 6F F5
  27+ 06A3 85 F6 9A F6
  28+ 06A7 AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
  28+ 06AB DA F7 EF F7
  28+ 06AF 03 F7 18 F7
  28+ 06B3 2D F7 42 F8
  29+ 06B7 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
  29+ 06BB 7F F8 93 F9
  29+ 06BF A7 F9 BB F9
  29+ 06C3 CF F9 E3 F9
  30+ 06C7 F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
  30+ 06CB 1E FA 32 FA
  30+ 06CF 45 FA 58 FB
  30+ 06D3 6C FB 7F FB
  31+ 06D7 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
  31+ 06DB B8 FC CB FC
  31+ 06DF DE FC F0 FC
  31+ 06E3 03 FC 16 FD
  32+ 06E7 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
  32+ 06EB 4D FD 5F FD
  32+ 06EF 71 FD 83 FE
  32+ 06F3 95 FE A7 FE
  33+ 06F7 B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
  33+ 06FB DD FF EE FF
  33+ 06FF 00 FF 11 FF
  33+ 0703 23 FF
  34+ 0705
  35+ 0705 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  35+ 0709 20 00 02 00
  35+ 070D 32 00 03 00
  35+ 0711 40 00 04 00
  35+ 0715 4A 00 05 00
  35+ 0719 52 00 06 00
  36+ 071D 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  36+ 0721 60 00 08 00
  36+ 0725 65 00 09 00
  36+ 0729 6A 00 0A 00
  36+ 072D 6E 00 0B 00
  36+ 0731 72 00 0C 00
  37+ 0735 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  37+ 0739 79 00 0E 00
  37+ 073D 7D 00 0F 00
  37+ 0741 80 00 10 00
  37+ 0745 82 00 11 00
  37+ 0749 85 00 12 00
  38+ 074D 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  38+ 0751 8A 00 14 00
  38+ 0755 8C 00 15 00
  38+ 0759 8E 00 16 00
  38+ 075D 90 00 17 00
  38+ 0761 92 00 18 00
  39+ 0765 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  39+ 0769 96 00 1A 00
  39+ 076D 98 00 1B 00
  39+ 0771 99 00 1C 00
  39+ 0775 9B 00 1D 00
  39+ 0779 9D 00 1E 00
  40+ 077D 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  40+ 0781 A0 00 20 00
  40+ 0785 A1 00 21 00
  40+ 0789 A2 00 22 00
  40+ 078D A4 00 23 00
  40+ 0791 A5 00 24 00
  41+ 0795 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  41+ 0799 A7 00 26 00
  41+ 079D A9 00 27 00
  41+ 07A1 AA 00 28 00
  41+ 07A5 AB 00 29 00
  41+ 07A9 AC 00 2A 00
  42+ 07AD AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  42+ 07B1 AE 00 2C 00
  42+ 07B5 AF 00 2D 00
  42+ 07B9 B0 00 2E 00
  42+ 07BD B1 00 2F 00
  42+ 07C1 B2 00 30 00
  43+ 07C5 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  43+ 07C9 B4 00 32 00
  43+ 07CD B5 00 33 00
  43+ 07D1 B6 00 34 00
  43+ 07D5 B7 00 35 00
  43+ 07D9 B8 00 36 00
  44+ 07DD B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  44+ 07E1 B9 00 38 00
  44+ 07E5 BA 00 39 00
  44+ 07E9 BB 00 3A 00
  44+ 07ED BC 00 3B 00
  44+ 07F1 BD 00 3C 00
  45+ 07F5 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  45+ 07F9 BF 00 3F 00
  45+ 07FD C0 00 40 00
  45+ 0801 C1 00 42 00
  45+ 0805 C2 00 43 00
  45+ 0809 C3 00 45 00
  46+ 080D C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  46+ 0811 C5 00 48 00
  46+ 0815 C6 00 48 00
  46+ 0819 C7 00 4A 00
  46+ 081D C8 00 4C 00
  46+ 0821 C9 00 4D 00
  47+ 0825 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  47+ 0829 CB 00 52 00
  47+ 082D CC 00 53 00
  47+ 0831 CD 00 55 00
  47+ 0835 CE 00 57 00
  47+ 0839 CF 00 58 00
  48+ 083D D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  48+ 0841 D1 00 5C 00
  48+ 0845 D2 00 5E 00
  48+ 0849 D3 00 61 00
  48+ 084D D4 00 64 00
  48+ 0851 D5 00 66 00
  49+ 0855 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  49+ 0859 D6 00 69 00
  49+ 085D D7 00 6A 00
  49+ 0861 D7 00 6B 00
  49+ 0865 D8 00 6C 00
  49+ 0869 D8 00 6D 00
  50+ 086D D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  50+ 0871 D9 00 6F 00
  50+ 0875 D9 00 70 00
  50+ 0879 DA 00 71 00
  50+ 087D DB 00 72 00
  50+ 0881 DC 00 75 00
  51+ 0885 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  51+ 0889 DE 00 7B 00
  51+ 088D DF 00 7E 00
  51+ 0891 E0 00 80 00
  51+ 0895 E1 00 83 00
  51+ 0899 E2 00 86 00
  52+ 089D E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  52+ 08A1 E4 00 8C 00
  52+ 08A5 E5 00 8F 00
  52+ 08A9 E6 00 92 00
  52+ 08AD E7 00 95 00
  52+ 08B1 E8 00 99 00
  53+ 08B5 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  53+ 08B9 EA 00 9F 00
  53+ 08BD EB 00 A3 00
  53+ 08C1 EC 00 A6 00
  53+ 08C5 ED 00 AA 00
  53+ 08C9 EE 00 AE 00
  54+ 08CD EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  54+ 08D1 F0 00 B6 00
  54+ 08D5 F1 00 B9 00
  54+ 08D9 F2 00 BE 00
  54+ 08DD F3 00 C2 00
  54+ 08E1 F4 00 C6 00
  55+ 08E5 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  55+ 08E9 F6 00 CF 00
  55+ 08ED F7 00 D3 00
  55+ 08F1 F8 00 D8 00
  55+ 08F5 F8 00 D9 00
  55+ 08F9 F9 00 DC 00
  56+ 08FD FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  56+ 0901 FB 00 E6 00
  56+ 0905 FB 00 E9 00
  56+ 0909 FC 00 EB 00
  56+ 090D FD 00 F0 00
  56+ 0911 FE 00 F6 00
  57+ 0915 FF 00 FB 00                          DW $FF, 251
  58+ 0919              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1113  0919                                      DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1114  0919
1115  0919              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1116  0919
1117  0919                                      SLOT    SoundAddr
1118  0919                                      PAGE    BankSound
1119  0919                                      ORG SoundAddr, BankSound
1120  E000                                      INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A ED 81     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A F0 81     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A F0 81     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 F0 81                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A ED 81     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A ED 81     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A ED 81                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1121  EC43                                      DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1122  EC43
1123  EC43                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1124  EC43                  SAVENEX CFG  0,0,0,1
1125  EC43                  SAVENEX AUTO
1126  EC43                  SAVENEX CLOSE
1127  EC43
# file closed: eliteNext.asm
