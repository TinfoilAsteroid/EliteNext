# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               CSPECTMAP eliteN.map
   4  0000               OPT --zxnext=cspect --syntax=a --reversepop
   5  0000
   6  0000              DEBUGSEGSIZE   equ 1
   7  0000              DEBUGLOGSUMMARY equ 1
   8  0000              ;DEBUGLOGDETAIL equ 1
   9  0000
  10  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  11  0000              ; Game Defines
  12  0000              ScreenLocal      EQU 0
  13  0000              ScreenGalactic   EQU ScreenLocal + 1
  14  0000              ScreenMarket     EQU ScreenGalactic + 1
  15  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  16  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  17  0000              ScreenInvent     EQU ScreenStatus + 1
  18  0000              ScreenPlanet     EQU ScreenInvent + 1
  19  0000              ScreenEquip      EQU ScreenPlanet + 1
  20  0000              ScreenLaunch     EQU ScreenEquip + 1
  21  0000              ScreenFront      EQU ScreenLaunch + 1
  22  0000              ScreenAft        EQU ScreenFront+1
  23  0000              ScreenLeft       EQU ScreenAft+1
  24  0000              ScreenRight      EQU ScreenLeft+1
  25  0000              ScreenDocking    EQU ScreenRight+1
  26  0000              ScreenHyperspace EQU ScreenDocking+1
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SHADOW_BANK1          equ 11
  34+ 0000              LAYER2_SHADOW_BANK2          equ 12
  35+ 0000              LAYER2_SHADOW_BANK3          equ 13
  36+ 0000
  37+ 0000              SCREEN_HEIGHT 				 equ 192
  38+ 0000              SCREEN_RAM_BASE				 equ $0000
  39+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  40+ 0000
  41+ 0000              SPRITES_VISIBLE_MASK         equ $01
  42+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  43+ 0000              LAYER_PRIORITIES_MASK        equ $07
  44+ 0000              LORES_MODE_MASK              equ $80
  45+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  46+ 0000
  47+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  48+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  49+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  50+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  51+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  52+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  53+ 0000
  54+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  55+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  56+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  57+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  58+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  59+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  60+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  61+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  62+ 0000              DMA_WR4_CONT_MODE            equ $AD
  63+ 0000              DMA_RESET                    equ $c3
  64+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  65+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  66+ 0000              DMA_LOAD                     equ $cf
  67+ 0000              DMA_CONTINUE                 equ $d3
  68+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  69+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  70+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  71+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  72+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  73+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  74+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  75+ 0000              DMA_FORCE_READY              equ $b3
  76+ 0000              DMA_STOP_AT_END			     equ $82
  77+ 0000              DMA_DISABLE                  equ $83
  78+ 0000              DMA_ENABLE                   equ $87
  79+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  80+ 0000              DMA_BURST                    equ $cd
  81+ 0000              DMA_CONTINUOUS               equ $ad
  82+ 0000              ZXN_DMA_PORT                 equ $6b
  83+ 0000
  84+ 0000
  85+ 0000              COLOUR_TRANSPARENT			 equ $E3
  86+ 0000
  87+ 0000
  88+ 0000
  89+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CommanderAddr           equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  43+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  44+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  45+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  46+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  47+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  48+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  59+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  60+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  61+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  62+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  63+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  64+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  66+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  67+ 0000
  68+ 0000              BankResetUniv           equ 49
  69+ 0000              BankMenuShrCht          equ 50
  70+ 0000              BankMenuGalCht          equ 51
  71+ 0000              BankMenuInvent          equ 52
  72+ 0000              BankMenuSystem          equ 53
  73+ 0000              BankMenuMarket          equ 54
  74+ 0000              BankStockTable          equ 55
  75+ 0000              BankCommander           equ 56
  76+ 0000              BankLAYER2              equ 57
  77+ 0000              BankLAYER1              equ 58
  78+ 0000              BankShipModels1         equ 59
  79+ 0000              BankSPRITE              equ 60
  80+ 0000              BankConsole             equ 61
  81+ 0000              BankFrontView           equ 62
  82+ 0000              BankMenuStatus          equ 63
  83+ 0000              BankMenuEquipS          equ 64
  84+ 0000              BankLaunchShip          equ 65
  85+ 0000              BankDispMarket          equ 66
  86+ 0000              BankShipModels2         equ 67
  87+ 0000              BankShipModels3         equ 68
  88+ 0000              BankShipModels4         equ 69
  89+ 0000
  90+ 0000              BankUNIVDATA0           equ 70
  91+ 0000              BankUNIVDATA1           equ 71
  92+ 0000              BankUNIVDATA2           equ 72
  93+ 0000              BankUNIVDATA3           equ 73
  94+ 0000              BankUNIVDATA4           equ 74
  95+ 0000              BankUNIVDATA5           equ 75
  96+ 0000              BankUNIVDATA6           equ 76
  97+ 0000              BankUNIVDATA7           equ 77
  98+ 0000              BankUNIVDATA8           equ 78
  99+ 0000              BankUNIVDATA9           equ 79
 100+ 0000              BankUNIVDATA10          equ 80
 101+ 0000              BankUNIVDATA11          equ 81
 102+ 0000              BankUNIVDATA12          equ 82
 103+ 0000              BankSunData             equ 83
 104+ 0000              BankPlanetData          equ 84
 105+ 0000
 106+ 0000              BankGalaxyData0         equ 91
 107+ 0000              BankGalaxyData1         equ 92
 108+ 0000              BankGalaxyData2         equ 93
 109+ 0000              BankGalaxyData3         equ 94
 110+ 0000              BankGalaxyData4         equ 95
 111+ 0000              BankGalaxyData5         equ 96
 112+ 0000              BankGalaxyData6         equ 97
 113+ 0000              BankGalaxyData7         equ 98
 114+ 0000
 115+ 0000              BankROM                 equ 255
 116+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipAIFlagsOffset       equ 24
  23+ 0000              ShipDataLength          equ ShipAIFlagsOffset+1
  24+ 0000
  25+ 0000              CobraTablePointer       equ 43
  26+ 0000              ;29 faulty
  27+ 0000              BankThreshold           equ 16
  28+ 0000
  29+ 0000              ShipTableALast          equ 23
  30+ 0000              ShipTableBLast          equ 39
  31+ 0000              ShipTableCLast          equ 55
  32+ 0000
# file closed: ./Data/ShipModelEquates.asm
  51  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  52  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  53  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld   a,(mem)
  25+ 0000 ~                                    ld   hl,address
  26+ 0000 ~                                    cp   (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld   a,(mem)
  32+ 0000 ~                                    cp   value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemTrue:          MACRO mem, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfMemFalse:         MACRO mem, target
  43+ 0000 ~                                    ld      a,(mem)
  44+ 0000 ~                                    and     a
  45+ 0000 ~                                    call    nz, target
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              CallIfMemZero:          MACRO mem, target
  49+ 0000 ~                                    ld      a,(mem)
  50+ 0000 ~                                    and     a
  51+ 0000 ~                                    call    z, target
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              CallIfMemNotZero:       MACRO mem, target
  55+ 0000 ~                                    ld      a,(mem)
  56+ 0000 ~                                    and     a
  57+ 0000 ~                                    call    nz, target
  58+ 0000                                      ENDM
  59+ 0000              CallIfATrue:            MACRO target
  60+ 0000 ~                                    and     a
  61+ 0000 ~                                    call    z, target
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              CallIfAFalse:           MACRO target
  65+ 0000 ~                                    and     a
  66+ 0000 ~                                    call    nz, target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              CallIfAZero:            MACRO target
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    call    z, target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CallIfANotZero:         MACRO target
  75+ 0000 ~                                    and     a
  76+ 0000 ~                                    call    nz, target
  77+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  54  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  55  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  56  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ldhlde:			        MACRO
 107+ 0000 ~                                    ld		h,d
 108+ 0000 ~                                    ld		l,e
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ldhlbc:			        MACRO
 112+ 0000 ~                                    ld		h,b
 113+ 0000 ~                                    ld		l,c
 114+ 0000                                      ENDM
 115+ 0000
 116+ 0000              ldbcde:			        MACRO
 117+ 0000 ~                                    ld		b,d
 118+ 0000 ~                                    ld		c,e
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              lddebc:			        MACRO
 122+ 0000 ~                                    ld		d,b
 123+ 0000 ~                                    ld		e,c
 124+ 0000                                      ENDM
 125+ 0000
 126+ 0000              ldbchl:			        MACRO
 127+ 0000 ~                                    ld		b,h
 128+ 0000 ~                                    ld		c,l
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              lddeiy:			        MACRO
 132+ 0000 ~                                    ld		d,iyh
 133+ 0000 ~                                    ld		e,iyl
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              ldiyde:			        MACRO
 137+ 0000 ~                                    ld		iyh,d
 138+ 0000 ~                                    ld		iyl,e
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000
 142+ 0000              FourLDIInstrunctions:   MACRO
 143+ 0000 ~                                    ldi
 144+ 0000 ~                                    ldi
 145+ 0000 ~                                    ldi
 146+ 0000 ~                                    ldi
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              FiveLDIInstrunctions:   MACRO
 150+ 0000 ~                                    ldi
 151+ 0000 ~                                    ldi
 152+ 0000 ~                                    ldi
 153+ 0000 ~                                    ldi
 154+ 0000 ~                                    ldi
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              SixLDIInstrunctions:    MACRO
 158+ 0000 ~                                    ldi
 159+ 0000 ~                                    ldi
 160+ 0000 ~                                    ldi
 161+ 0000 ~                                    ldi
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000                                      ENDM
 165+ 0000
 166+ 0000              EightLDIInstrunctions:  MACRO
 167+ 0000 ~            		                ldi
 168+ 0000 ~            		                ldi
 169+ 0000 ~            		                ldi
 170+ 0000 ~            		                ldi
 171+ 0000 ~            		                ldi
 172+ 0000 ~            		                ldi
 173+ 0000 ~            		                ldi
 174+ 0000 ~            		                ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              NineLDIInstrunctions:  MACRO
 178+ 0000 ~            		                ldi
 179+ 0000 ~            		                ldi
 180+ 0000 ~            		                ldi
 181+ 0000 ~            		                ldi
 182+ 0000 ~            		                ldi
 183+ 0000 ~            		                ldi
 184+ 0000 ~            		                ldi
 185+ 0000 ~            		                ldi
 186+ 0000 ~            		                ldi
 187+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              JumpOnABit5Set:         MACRO   target
  63+ 0000 ~                                    and     Bit5Only
  64+ 0000 ~                                    jp      nz,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              JumpOnABit5Clear:       MACRO   target
  68+ 0000 ~                                    and     Bit5Only
  69+ 0000 ~                                    jp      z,target
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  73+ 0000 ~                                    and     bitmask
  74+ 0000 ~                                    jp      nz,target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  78+ 0000 ~                                    and     bitmask
  79+ 0000 ~                                    jp      z,target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  83+ 0000 ~                                    bit 	bitnbr,reg
  84+ 0000 ~                                    jp      nz,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  88+ 0000 ~                                    bit 	bitnbr,reg
  89+ 0000 ~                                    jp      z,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              ; Comparison Routines
  93+ 0000              JumpIfAGTEusng:         MACRO
  94+ 0000 ~                                    jp		nc,target
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              JumpIfAGTENusng:        MACRO reg,target
  98+ 0000 ~                                    cp     reg
  99+ 0000 ~                                    jp		nc,target
 100+ 0000                                      ENDM
 101+ 0000
 102+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 103+ 0000 ~                                    ld      hl,mem
 104+ 0000 ~                                    cp      (hl)
 105+ 0000 ~                                    jp		nc,target
 106+ 0000                                      ENDM
 107+ 0000
 108+ 0000              JumpIfALTMemusng:       MACRO mem,target
 109+ 0000 ~                                    ld      hl,mem
 110+ 0000 ~                                    cp      (hl)
 111+ 0000 ~                                    jp		c,target
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 115+ 0000 ~                                    ld     a,(mem)
 116+ 0000 ~                                    cp     value
 117+ 0000 ~                                    jp	  nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 121+ 0000 ~                                    ld   a,(mem)
 122+ 0000 ~                                    ld   hl,address
 123+ 0000 ~                                    cp   (hl)
 124+ 0000 ~                                    jp	  nc,target
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 128+ 0000 ~                                    ld   a,(mem)
 129+ 0000 ~                                    ld   hl,address
 130+ 0000 ~                                    cp   (hl)
 131+ 0000 ~                                    jp	  z,target
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 135+ 0000 ~                                    ld   a,(mem)
 136+ 0000 ~                                    ld   hl,address
 137+ 0000 ~                                    cp   (hl)
 138+ 0000 ~                                    jp	  nz,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfMemTrue:          MACRO mem, target
 142+ 0000 ~                                    ld      a,(mem)
 143+ 0000 ~                                    and     a
 144+ 0000 ~                                    jp      z, target
 145+ 0000                                      ENDM
 146+ 0000
 147+ 0000              JumpIfMemFalse:         MACRO mem, target
 148+ 0000 ~                                    ld      a,(mem)
 149+ 0000 ~                                    and     a
 150+ 0000 ~                                    jp      nz, target
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              JumpIfATrue:            MACRO target
 154+ 0000 ~                                    and     a
 155+ 0000 ~                                    jp      z, target
 156+ 0000                                      ENDM
 157+ 0000
 158+ 0000              JumpIfAFalse:           MACRO target
 159+ 0000 ~                                    and     a
 160+ 0000 ~                                    jp      nz, target
 161+ 0000                                      ENDM
 162+ 0000
 163+ 0000              JumpIfALTusng:          MACRO target
 164+ 0000 ~                                    jp		c,target
 165+ 0000                                      ENDM
 166+ 0000
 167+ 0000              JumpIfALTNusng:         MACRO value, target
 168+ 0000 ~                                    cp      value
 169+ 0000 ~                                    jp		c, target
 170+ 0000                                      ENDM
 171+ 0000
 172+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 173+ 0000 ~                                    ld      a,(mem)
 174+ 0000 ~                                    cp      value
 175+ 0000 ~                                    jp	  c,target
 176+ 0000                                      ENDM
 177+ 0000
 178+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 179+ 0000 ~                                    ld    a,(mem)
 180+ 0000 ~                                    ld    hl,value
 181+ 0000 ~                                    cp    (hl)
 182+ 0000 ~                                    jp	  c,target
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 186+ 0000 ~                                    ld  a,(mem)
 187+ 0000 ~                                    cp  value
 188+ 0000 ~                                    jp  z,target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 192+ 0000 ~                                    ld  a,(mem)
 193+ 0000 ~                                    cp  value
 194+ 0000 ~                                    jp  nz,target
 195+ 0000                                      ENDM
 196+ 0000
 197+ 0000              JumpIfMemZero:          MACRO mem,target
 198+ 0000 ~                                    ld  a,(mem)
 199+ 0000 ~                                    and a
 200+ 0000 ~                                    jp  z,target
 201+ 0000                                      ENDM
 202+ 0000
 203+ 0000              JumpIfMemNotZero:       MACRO mem,target
 204+ 0000 ~                                    ld  a,(mem)
 205+ 0000 ~                                    and a
 206+ 0000 ~                                    jp  nz,target
 207+ 0000                                      ENDM
 208+ 0000
 209+ 0000              JumpIfALTMemHLusng:     MACRO target
 210+ 0000 ~                                    cp    (hl)
 211+ 0000 ~                                    jp	  c,target
 212+ 0000                                      ENDM
 213+ 0000
 214+ 0000              JumpIfANENusng:         MACRO value, target
 215+ 0000 ~                                    cp     value
 216+ 0000 ~                                    jp      nz,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfANEquNusng:       MACRO value, target
 220+ 0000 ~                                    cp     value
 221+ 0000 ~                                    jp     z,target
 222+ 0000                                      ENDM
 223+ 0000
 224+ 0000              JumpIfANEMemusng:       MACRO  value, target
 225+ 0000 ~                                    ld    hl,value
 226+ 0000 ~                                    cp    (hl)
 227+ 0000 ~                                    jp      nz,target
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              JumpIfAEqNusng:         MACRO value, target
 231+ 0000 ~                                    cp     value
 232+ 0000 ~                                    jp      z,target
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              JumpIfAIsZero:	        MACRO target
 236+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 237+ 0000 ~                                    jp	    z, target
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 241+ 0000 ~                                    ld      a,reg
 242+ 0000 ~                                    and     a
 243+ 0000 ~                                    jp	    nz,target
 244+ 0000                                      ENDM
 245+ 0000
 246+ 0000              JumpIfAIsNotZero:       MACRO target
 247+ 0000 ~                                    and     a
 248+ 0000 ~                                    jp	    nz,target
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              IfResultZeroGoto:	    MACRO target
 252+ 0000 ~                                    jp	z,target
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              IfResultNotZeroGoto:    MACRO target
 256+ 0000 ~                                    jp	nz,target
 257+ 0000                                      ENDM
 258+ 0000
# file closed: ./Macros/jumpMacros.asm
  59  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              DEEquSquareA:           MACRO
   3+ 0000 ~                                    ld  d,a
   4+ 0000 ~                                    ld  e,a
   5+ 0000 ~                                    mul de
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   9+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  10+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  11+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  12+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  13+ 0000 ~                                    xor $80                             ;
  14+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  15+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  17+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  18+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  19+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SignedHLTo2C:           MACRO
  23+ 0000 ~                                    bit     7,h
  24+ 0000 ~                                    jr      z,.Done2c
  25+ 0000 ~                                    ld      a,h
  26+ 0000 ~                                    and     SignMask8Bit
  27+ 0000 ~                                    ld      h,a
  28+ 0000 ~                                    NegHL
  29+ 0000 ~            .Done2c:
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              MemSignedTo2C:          MACRO   memfrom
  33+ 0000 ~                                    ld      hl,(memfrom)
  34+ 0000 ~                                    bit     7,h
  35+ 0000 ~                                    jr      z,.Done2c
  36+ 0000 ~                                    ld      a,h
  37+ 0000 ~                                    and     SignMask8Bit
  38+ 0000 ~                                    ld      h,a
  39+ 0000 ~            .Done2c:                ld      (memfrom),hl
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000                  ;returns result in H
  44+ 0000              EDiv10Inline:           MACRO
  45+ 0000 ~                                    ld      d,0
  46+ 0000 ~                                    ld      hl,de
  47+ 0000 ~                                    add     hl,hl
  48+ 0000 ~                                    add     hl,de
  49+ 0000 ~                                    add     hl,hl
  50+ 0000 ~                                    add     hl,hl
  51+ 0000 ~                                    add     hl,de
  52+ 0000 ~                                    add     hl,hl
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              cpHLDE:                 MACRO
  56+ 0000 ~                                    push    hl
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    sbc     hl,de
  59+ 0000 ~                                    pop     hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ;Unsigned
  63+ 0000              ;If HL == DE, then Z flag is set.
  64+ 0000              ;If HL != DE, then Z flag is reset.
  65+ 0000              ;If HL <  DE, then C flag is set.
  66+ 0000              ;If HL >= DE, then C flag is reset.
  67+ 0000              ;
  68+ 0000              ;Signed
  69+ 0000              ;If HL == DE, then Z flag is set.
  70+ 0000              ;If HL != DE, then Z flag is reset.
  71+ 0000              ;If HL <  DE, then S and P/V are different.
  72+ 0000              ;If HL >= DE, then S and P/V are the same.
# file closed: ./Macros/MathsMacros.asm
  60  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROMS:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   4+ 0000                                   ENDM
   5+ 0000
   6+ 0000              MMUSelectSpriteBank: MACRO
   7+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   8+ 0000              					 ENDM
   9+ 0000
  10+ 0000              MMUSelectConsoleBank: MACRO
  11+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  12+ 0000              					 ENDM
  13+ 0000
  14+ 0000              MMUSelectLayer1: 	 MACRO
  15+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectLayer2: 	 MACRO
  19+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectResetUniv:  MACRO
  23+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  24+ 0000                                   ENDM
  25+ 0000
  26+ 0000              MMUSelectShipBank1:  MACRO
  27+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  28+ 0000              					 ENDM
  29+ 0000              MMUSelectShipBank2:  MACRO
  30+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  31+ 0000              					 ENDM
  32+ 0000              MMUSelectShipBank3:  MACRO
  33+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  34+ 0000              					 ENDM
  35+ 0000              MMUSelectShipBank4:  MACRO
  36+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  37+ 0000              					 ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBankA   MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    a
  41+ 0000              					 ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBankN:  MACRO value
  44+ 0000 ~            					 nextreg ShipModelMMU,	    value
  45+ 0000              					 ENDM
  46+ 0000
  47+ 0000              MMUSelectCommander:	 MACRO
  48+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  49+ 0000              					 ENDM
  50+ 0000
  51+ 0000              MMUSelectStockTable: MACRO
  52+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  53+ 0000              					 ENDM
  54+ 0000
  55+ 0000              MMUSelectCpySrcA:    MACRO
  56+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  57+ 0000              					 ENDM
  58+ 0000
  59+ 0000              MMUSelectCpySrcN:    MACRO value
  60+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  61+ 0000              					 ENDM
  62+ 0000
  63+ 0000              MMUSelectSun:        MACRO
  64+ 0000 ~                                 nextreg SunMMU,            BankSunData
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectPlanet:     MACRO
  68+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseA:  MACRO
  72+ 0000 ~                                 add    a,BankUNIVDATA0
  73+ 0000 ~                                 nextreg UniverseMMU,       a
  74+ 0000                                   ENDM
  75+ 0000
  76+ 0000              MMUSelectUniverseN:  MACRO value
  77+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectGalaxyA:    MACRO
  81+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectGalaxyN:    MACRO value
  85+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  86+ 0000                                   ENDM
  87+ 0000              MMUSelectGalaxyACopy:MACRO
  88+ 0000 ~                                 nextreg UniverseMMU,       a
  89+ 0000                                   ENDM
  90+ 0000
  91+ 0000              MMUSelectUniverseAbs:MACRO value
  92+ 0000 ~                                 nextreg UniverseMMU,       value
  93+ 0000                                   ENDM
  94+ 0000
  95+ 0000              MMUSelectMenuGalCht: MACRO
  96+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  97+ 0000              					 ENDM
  98+ 0000
  99+ 0000              MMUSelectMenuShrCht: MACRO
 100+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 101+ 0000              					 ENDM
 102+ 0000
 103+ 0000              MMUSelectMenuInvent: MACRO
 104+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 105+ 0000              					 ENDM
 106+ 0000
 107+ 0000              MMUSelectMenuSystem: MACRO
 108+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 109+ 0000              					 ENDM
 110+ 0000
 111+ 0000              MMUSelectMenuMarket: MACRO
 112+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 113+ 0000              					 ENDM
 114+ 0000
 115+ 0000              MMUSelectMenuStatus: MACRO
 116+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 117+ 0000              					 ENDM
 118+ 0000
 119+ 0000              MMUSelectViewFront:  MACRO
 120+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 121+ 0000              					 ENDM
 122+ 0000
 123+ 0000              MMUSelectScreenA:    MACRO
 124+ 0000 ~                                 nextreg ScreenBankMMU,		a
 125+ 0000              					 ENDM
 126+ 0000
# file closed: ./Macros/MMUMacros.asm
  61  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  62  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000
  90+ 0000              ReturnIfNegative:       MACRO
  91+ 0000 ~                                    ret     m
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000
  95+ 0000              ReturnIfMemNotZero:     MACRO mem
  96+ 0000 ~                                    ld     a,(mem)
  97+ 0000 ~                                    and     a
  98+ 0000 ~                                    ret    nz
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ReturnIfAGTEusng:       MACRO value
 102+ 0000 ~                                    cp    value
 103+ 0000 ~                                    ret	 nc
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 107+ 0000 ~                                    ld      a,reg
 108+ 0000 ~                                    cp      value
 109+ 0000 ~                                    ret	    c
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ReturnIfALTNusng:       MACRO value
 113+ 0000 ~                                    cp    value
 114+ 0000 ~                                    ret	 c
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              ReturnIfAGTENusng:      MACRO value
 118+ 0000 ~                                    cp    value
 119+ 0000 ~                                    ret	 nc
 120+ 0000                                      ENDM
 121+ 0000
 122+ 0000              ReturnIfAGTEMemusng:    MACRO value
 123+ 0000 ~                                    ld      hl,value
 124+ 0000 ~                                    cp      (hl)
 125+ 0000 ~                                    ret	    nc
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              ReturnIfANENusng:       MACRO value
 129+ 0000 ~                                    cp      value
 130+ 0000 ~                                    ret     nz
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ReturnIfAEqNusng:       MACRO value
 134+ 0000 ~                                    cp      value
 135+ 0000 ~                                    ret     z
 136+ 0000                                      ENDM
 137+ 0000
# file closed: ./Macros/returnMacros.asm
  63  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  64  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              ClearSignBitMem:        MACRO mem
   2+ 0000 ~                                    ld      a,(mem)
   3+ 0000 ~                                    and     SignMask8Bit
   4+ 0000 ~                                    ld      (mem),a
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SetSignBitMem:          MACRO   mem
   8+ 0000 ~                                    ld      a,(mem)
   9+ 0000 ~                                    or      SignOnly8Bit
  10+ 0000 ~                                    ld      (mem),a
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              FlipSignMem:            MACRO mem
  14+ 0000 ~                                    ld  a,(mem)
  15+ 0000 ~                                    xor SignOnly8Bit
  16+ 0000 ~                                    ld  (mem),a
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              SignBitOnlyMem:         MACRO mem
  20+ 0000 ~                                    ld      a
  21+ 0000 ~                                    and     SignOnly8Bit
  22+ 0000 ~                                    ld      (mem),a
  23+ 0000                                      ENDM
  24+ 0000
  25+ 0000              ClearSignBit:           MACRO reg
  26+ 0000 ~                                    ld      a,reg
  27+ 0000 ~                                    and     SignMask8Bit
  28+ 0000 ~                                    ld      reg,a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              SetSignBit:             MACRO   reg
  32+ 0000 ~                                    ld      a,reg
  33+ 0000 ~                                    or      SignOnly8Bit
  34+ 0000 ~                                    ld      reg,a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              FlipSignBit:            MACRO   reg
  38+ 0000 ~                                    ld      a,reg
  39+ 0000 ~                                    xor     SignOnly8Bit
  40+ 0000 ~                                    ld      reg,a
  41+ 0000                                      ENDM
  42+ 0000
  43+ 0000              SignBitOnly:            MACRO   reg
  44+ 0000 ~                                    ld      a,reg
  45+ 0000 ~                                    and     SignOnly8Bit
  46+ 0000 ~                                    ld      reg,a
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              ClearSignBitA:          MACRO
  50+ 0000 ~                                    and     SignMask8Bit
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              SetSignBitA:            MACRO
  54+ 0000 ~                                    or      SignOnly8Bit
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              FlipSignBitA:           MACRO
  58+ 0000 ~                                    xor     SignOnly8Bit
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              SignBitOnlyA:           MACRO
  62+ 0000 ~                                    and     SignOnly8Bit
  63+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  65  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  66  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ClearMissileTarget:     MACRO
  91+ 0000 ~                                    ld      a,StageMissileNoTarget
  92+ 0000 ~                                    ld      (MissileTargettingFlag),a           ; reset targetting
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              SetMissileLaunch:       MACRO
  96+ 0000 ~                                    ld      a,(MissileTargettingFlag)
  97+ 0000 ~                                    and     $0F
  98+ 0000 ~                                    ld      (MissileTargettingFlag),a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              LockMissileToA:         MACRO
 102+ 0000 ~                                    or      $80
 103+ 0000 ~                                    ld      (MissileTargettingFlag),a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ClearECM:               MACRO
 107+ 0000 ~                                    xor     a
 108+ 0000 ~                                    ld      (ECMLoopA),a
 109+ 0000 ~                                    ld      (ECMLoopB),a
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ChargeEnergyAndShields: MACRO
 113+ 0000 ~                                    ld      a,$FF
 114+ 0000 ~                                    ld      (PlayerEnergy),a
 115+ 0000 ~                                    ld      (ForeShield),a
 116+ 0000 ~                                    ld      (AftShield),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              CopyPresentSystemToTarget: MACRO
 120+ 0000 ~                                    ld      hl,(PresentSystemX)
 121+ 0000 ~                                    ld      (TargetSystemX),hl
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000              CopyTargetSystemToPresent: MACRO
 125+ 0000 ~                                    ld      hl,(TargetSystemX)
 126+ 0000 ~                                    ld      (PresentSystemX),hl
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              HalveFugitiveStatus:    MACRO
 130+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 131+ 0000 ~                                    srl     (hl)
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ClearForceTransition    MACRO
 135+ 0000 ~                                    ld      a,$FF
 136+ 0000 ~                                    ld      (ScreenTransitionForced),a
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ForceTransition:        MACRO newScreen
 140+ 0000 ~                                    ld      a,newScreen
 141+ 0000 ~                                    ld      (ScreenTransitionForced), a
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              IsSpaceStationPresent:  MACRO
 145+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 146+ 0000 ~                                    and     a
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              SetSafeZone:            MACRO
 150+ 0000 ~                                    xor     a
 151+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ClearSafeZone:          MACRO
 155+ 0000 ~                                    ld      a,$FF
 156+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              ClearTemperatures:      MACRO
 160+ 0000 ~                                    xor     a
 161+ 0000 ~                                    ld      (CabinTemperature),a
 162+ 0000 ~                                    ld      (GunTemperature),a
 163+ 0000                                      ENDM
 164+ 0000
 165+ 0000              CoolCabin:              MACRO
 166+ 0000 ~                                    ld      a,(CabinTemperature)
 167+ 0000 ~                                    and     a
 168+ 0000 ~                                    jr      z,.AlreadyCool
 169+ 0000 ~                                    dec     a
 170+ 0000 ~                                    ld      (CabinTemperature),a
 171+ 0000 ~            .AlreadyCool:
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              CoolLasers:             MACRO
 175+ 0000 ~                                    ld      a,(GunTemperature)
 176+ 0000 ~                                    and     a
 177+ 0000 ~                                    jr      z,.AlreadyCool
 178+ 0000 ~                                    dec     a
 179+ 0000 ~                                    ld      (GunTemperature),a
 180+ 0000 ~            .AlreadyCool:
 181+ 0000                                      ENDM
 182+ 0000
 183+ 0000              ; type 255 is "not fitted"
 184+ 0000
 185+ 0000
 186+ 0000              InitEventCounter:       MACRO
 187+ 0000 ~                                    xor     a
 188+ 0000 ~                                    ld      (EventCounter),a
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              ClearMissJump:          MACRO
 192+ 0000 ~                                    ld      a,$FF
 193+ 0000 ~                                    ld      (MissJumpFlag),a
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000
 197+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 198+ 0000 ~                                    ld      a,(DrainMem)
 199+ 0000 ~                                    ld      b,a
 200+ 0000 ~                                    ld      a,(SystemMem)
 201+ 0000 ~                                    sub     a,b
 202+ 0000 ~                                    ld      (SystemMem),a
 203+ 0000 ~                                    jr      c,.ZeroSystem
 204+ 0000 ~                                    jp      .ExitPoint
 205+ 0000 ~            .ZeroSystem:            ZeroA
 206+ 0000 ~                                    ld      (SystemMem),a
 207+ 0000 ~            .ExitPoint
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 211+ 0000 ~                                    ld      a,(BoostMem)
 212+ 0000 ~                                    ld      b,a
 213+ 0000 ~                                    ld      a,(SystemMem)
 214+ 0000 ~                                    add     b
 215+ 0000 ~                                    ld      (SystemMem),a
 216+ 0000 ~                                    jr      c, .MaxSystem
 217+ 0000 ~                                    jp      .ExitPoint
 218+ 0000 ~            .MaxSystem:             ld      a,255
 219+ 0000 ~                                    ld      (SystemMem),a
 220+ 0000 ~            .ExitPoint
 221+ 0000                                      ENDM
 222+ 0000
# file closed: ./Variables/general_variables_macros.asm
  67  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              TestRoomForJunk:        MACRO   Target
  38+ 0000 ~                                    ld      a,3
  39+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              JumpIfSpaceStation:     MACRO   Target
  43+ 0000 ~                                    ld      hl,UniverseSlotType
  44+ 0000 ~                                    ld      a,(hl)
  45+ 0000 ~                                    cp      ShipTypeStation
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              IsSlotEmpty:            MACRO
  49+ 0000 ~                                    ld      hl,UniverseSlotList
  50+ 0000 ~                                    add     hl,a
  51+ 0000 ~                                    ld      a,(hl)
  52+ 0000 ~                                    cp      0
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000
  56+ 0000              ; Checks if slot is empty else A = ship type
  57+ 0000              ReturnIfSlotAEmpty:     MACRO
  58+ 0000 ~                                    ld      hl,UniverseSlotList
  59+ 0000 ~                                    add     hl,a
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    inc     a
  62+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  63+ 0000 ~                                    dec     a           ; get original value back for later
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  67+ 0000 ~                                    ld      hl,UniverseSlotList
  68+ 0000 ~                                    add     hl,a
  69+ 0000 ~                                    ld      a,(hl)
  70+ 0000 ~                                    inc     a
  71+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  72+ 0000 ~                                    dec     a           ; get original value back for later
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  76+ 0000 ~                                    ld      a,(hl)
  77+ 0000 ~                                    and     a
  78+ 0000 ~                                    jr      nz,Target
  79+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  68  0000
  69  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  70  0000
  71  0000              InputMainMacro:         MACRO
  72  0000 ~                                    call    ViewKeyTest
  73  0000 ~                                    call    TestPauseMode
  74  0000 ~                                    ld      a,(GamePaused)
  75  0000 ~                                    cp      0
  76  0000 ~                                    jr      nz,MainLoop
  77  0000 ~                                    call    MovementKeyTest
  78  0000                                      ENDM
  79  0000
  80  0000              DecrementIfPossible:    MACRO   memaddr,notpossjp
  81  0000 ~                                    JumpIfMemZero memaddr, notpossjp
  82  0000 ~                                    dec     a
  83  0000 ~                                    ld      (memaddr),a
  84  0000                                      ENDM
  85  0000
  86  0000              UpdateOnCounter:        MACRO
  87  0000 ~                                    DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
  88  0000 ~                                    JumpIfAIsNotZero     .UpdateOnDone
  89  0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  90  0000 ~            .UpdateOnDone:
  91  0000                                      ENDM
  92  0000
  93  0000              UpdateOffCounter:       MACRO
  94  0000 ~                                    DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
  95  0000 ~                                    JumpIfAIsNotZero     .UpdateOffDone
  96  0000 ~                                    JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
  97  0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  98  0000 ~            .UpdateOffDone:
  99  0000                                      ENDM
 100  0000
 101  0000              UpdateRestCounter:      MACRO
 102  0000 ~                                    DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
 103  0000 ~            .DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
 104  0000 ~            .ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
 105  0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 106  0000 ~            .UpdateRestDone
 107  0000                                      ENDM
 108  0000
 109  0000
 110  0000              UpdateLaserCounters:    MACRO
 111  0000 ~
 112  0000 ~                                    UpdateOnCounter
 113  0000 ~                                    UpdateOffCounter
 114  0000 ~                                    UpdateRestCounter
 115  0000                                      ENDM
 116  0000
 117  0000              UpdateLaserCountersold: MACRO
 118  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 119  0000 ~                                    dec     a                                               ; .
 120  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 121  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 122  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 123  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 124  0000 ~                                    dec     a                                               ;       .
 125  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 126  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 127  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 128  0000 ~                                    dec     a
 129  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 130  0000 ~                                    jr      nz,.SkipRestCounter
 131  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 132  0000 ~            .SkipRestCounter:
 133  0000                                      ENDM
 134  0000
 135  0000
 136  0000              charactersetaddr		equ 15360
 137  0000              STEPDEBUG               equ 1
 138  0000
 139  0000              TopOfStack              equ $7F00
 140  0000
 141  0000              EliteNextStartup:       ORG         $8000
 142  8000 F3                                   di
 143  8001                                      ; "STARTUP"
 144  8001                                      ; Make sure  rom is in page 0 during load
 145  8001                                      MMUSelectLayer2
 145  8001 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146  8005 CD 0E E0                             call        asm_disable_l2_readwrite
 147  8008                                      MMUSelectROMS
 147  8008 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 147  800C ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 148  8010              .GenerateDefaultCmdr:   MMUSelectCommander
 148  8010 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 149  8014 CD 45 E2                             call		defaultCommander
 150  8017 CD 18 E2                             call        saveCommander
 151  801A                                      MMUSelectLayer1
 151  801A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152  801E CD 80 E0                             call		l1_cls
 153  8021 3E 07                                ld			a,7
 154  8023 CD 9B E0                             call		l1_attr_cls_to_a
 155  8026 3E FF                                ld          a,$FF
 156  8028 CD A5 E0                             call        l1_set_border
 157  802B                                      MMUSelectSpriteBank
 157  802B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 158  802F CD C5 E4                             call		sprite_load_sprite_data
 159  8032              Initialise:             MMUSelectLayer2
 159  8032 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 160  8036 CD FA E0                             call 		l2_initialise
 161  8039 CD 84 9A                             call        init_keyboard
 162  803C                                      ClearForceTransition
 162  803C 3E FF       >                        ld      a,$FF
 162  803E 32 7A 88    >                        ld      (ScreenTransitionForced),a
 163  8041 3E 10        TidyDEBUG:              ld          a,16
 164  8043 32 48 87                             ld          (TidyCounter),a
 165  8046 AF           TestText:               xor			a
 166  8047 32 D1 9C                             ld      (JSTX),a
 167  804A              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 167  804A 3E FF       >                        ld      a,$FF
 167  804C 32 AB 9E    >                        ld      (SpaceStationSafeZone),a
 168  804F                                      MMUSelectSpriteBank
 168  804F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 169  8053 CD BD E4                             call		init_sprites
 170  8056              .ClearLayer2Buffers:    DoubleBufferIfPossible
 170  8056             >                        IFDEF DOUBLEBUFFER
 170  8056             >                            MMUSelectLayer2
 170  8056 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170  805A CD F3 E0    >                            call  l2_cls
 170  805D CD 07 E1    >                            call  l2_flip_buffers
 170  8060             >                        ENDIF
 171  8060                                      DoubleBufferIfPossible
 171  8060             >                        IFDEF DOUBLEBUFFER
 171  8060             >                            MMUSelectLayer2
 171  8060 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 171  8064 CD F3 E0    >                            call  l2_cls
 171  8067 CD 07 E1    >                            call  l2_flip_buffers
 171  806A             >                        ENDIF
 172  806A              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 173  806A CD 7B 88     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
 174  806D CD A3 88                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 175  8070 CD CC 88                             call        SeedAllGalaxies
 176  8073 CD DC 93     StartAttractMode:       call        AttractMode
 177  8076                                      JumpIfAIsZero  .SkipDefault
 177  8076 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 177  8077 CA 84 80    >                        jp	    z, .SkipDefault
 178  807A                                      MMUSelectCommander
 178  807A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 179  807E CD 45 E2                             call		defaultCommander
 180  8081 C3 84 80                             jp          InitialiseMainLoop
 180  8084
 181  8084              .SkipDefault
 182  8084              ;                        call    FindNextFreeSlotInA
 183  8084              ;                        ld      b,a
 184  8084              ;                        ld      a,13 ;Coriolis station
 185  8084              ;                        call    InitialiseShipAUnivB
 186  8084              ;                        xor     a
 187  8084 CD F7 A1     InitialiseMainLoop:     call    InitMainLoop
 188  8087              ;..MAIN GAME LOOP..................................................................................................................
 189  8087              ; MACRO BLOCKS.....................................................................................................................
 190  8087              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 191  8087
 192  8087
 193  8087
 194  8087              ; if beam on count > 0
 195  8087              ;    then beam on count --
 196  8087              ;         if beam on count = 0
 197  8087              ;            then beam off count = beam off
 198  8087              ; if beam off > 0
 199  8087              ;    then beam off --
 200  8087              ;         if beam off = 0 and pulse rate count = max count
 201  8087              ;            then pulse rest count = pulse rest
 202  8087              ; if pulse rest > 0 then pulse rest --
 203  8087              ;    if pulse rest = 0
 204  8087              ;       then pulse rate count = 0
 205  8087
 206  8087
 207  8087              ; counter logic
 208  8087              ;    if beam on count > 0 then beam on count --
 209  8087              ;    if beam on = 0 then
 210  8087              ;       if beam off count >0 then beam off count --
 211  8087              ;       if beam off count = 0 them
 212  8087              ;          if pulse rest count > 0 then pulse rest count --
 213  8087              ;             if reset count = 0 then pulse rate count = 0
 214  8087              ; shoting logic
 215  8087              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 216  8087              ;       then  if fire pressed is OK
 217  8087              ;                if not beam type
 218  8087              ;                   then pulse rate count ++
 219  8087              ;                        if pulse rate count < pulse max count
 220  8087              ;                           then pulse on count = pulse on time
 221  8087              ;                                pulse off count = pulse off time
 222  8087              ;                                pulse rest count = pulse rest time
 223  8087              ;                           else pulse rest count = pulse rest time
 224  8087              ;                                pulse rate count, pulse on count, pulse off count = 0
 225  8087              ;                   else pulse on count = $FF
 226  8087              ;                        pulse off time , rest time = 0
 227  8087
 228  8087              ;..................................................................................................................................
 229  8087 CD 35 A3     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 230  808A                                      UpdateLaserCounters
 230  808A             >
 230  808A             >                        UpdateOnCounter
 230  808A             >                        DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
 230  808A             >                        JumpIfMemZero CurrLaserPulseOnCount, .UpdateOnDone
 230  808A 3A D5 A0    >                        ld  a,(CurrLaserPulseOnCount)
 230  808D A7          >                        and a
 230  808E CA 9F 80    >                        jp  z,.UpdateOnDone
 230  8091 3D          >                        dec     a
 230  8092 32 D5 A0    >                        ld      (CurrLaserPulseOnCount),a
 230  8095             >                        JumpIfAIsNotZero     .UpdateOnDone
 230  8095 A7          >                        and     a
 230  8096 C2 9F 80    >                        jp	    nz,.UpdateOnDone
 230  8099             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 230  8099 3A D3 A0    >                        ld       a,(CurrLaserPulseOffTime)
 230  809C 32 D6 A0    >                        ld       (CurrLaserPulseOffCount),a
 230  809F             >.UpdateOnDone:
 230  809F             >                        UpdateOffCounter
 230  809F             >                        DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
 230  809F             >                        JumpIfMemZero CurrLaserPulseOffCount, .UpdateOffDone
 230  809F 3A D6 A0    >                        ld  a,(CurrLaserPulseOffCount)
 230  80A2 A7          >                        and a
 230  80A3 CA BE 80    >                        jp  z,.UpdateOffDone
 230  80A6 3D          >                        dec     a
 230  80A7 32 D6 A0    >                        ld      (CurrLaserPulseOffCount),a
 230  80AA             >                        JumpIfAIsNotZero     .UpdateOffDone
 230  80AA A7          >                        and     a
 230  80AB C2 BE 80    >                        jp	    nz,.UpdateOffDone
 230  80AE             >                        JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
 230  80AE 3A D1 A0    >                        ld   a,(CurrLaserPulseRate)
 230  80B1 21 D8 A0    >                        ld   hl,CurrLaserPulseRateCount
 230  80B4 BE          >                        cp   (hl)
 230  80B5 C2 BE 80    >                        jp	  nz,.UpdateOffDone
 230  80B8             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 230  80B8 3A D4 A0    >                        ld       a,(CurrLaserPulseRest)
 230  80BB 32 D7 A0    >                        ld       (CurrLaserPulseRestCount),a
 230  80BE             >.UpdateOffDone:
 230  80BE             >                        UpdateRestCounter
 230  80BE             >                        DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
 230  80BE             >                        JumpIfMemZero CurrLaserPulseRestCount, .UpdateRestDone
 230  80BE 3A D7 A0    >                        ld  a,(CurrLaserPulseRestCount)
 230  80C1 A7          >                        and a
 230  80C2 CA D4 80    >                        jp  z,.UpdateRestDone
 230  80C5 3D          >                        dec     a
 230  80C6 32 D7 A0    >                        ld      (CurrLaserPulseRestCount),a
 230  80C9             >.DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
 230  80C9 3A D7 A0    >                        ld  a,(CurrLaserPulseRestCount)
 230  80CC A7          >                        and a
 230  80CD C2 D4 80    >                        jp  nz,.UpdateRestDone
 230  80D0             >.ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
 230  80D0 AF          >                        xor a
 230  80D1 32 D8 A0    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
 230  80D4             >.UpdateRestDone
 231  80D4                                      CoolLasers
 231  80D4 3A B3 A0    >                        ld      a,(GunTemperature)
 231  80D7 A7          >                        and     a
 231  80D8 28 04       >                        jr      z,.AlreadyCool
 231  80DA 3D          >                        dec     a
 231  80DB 32 B3 A0    >                        ld      (GunTemperature),a
 231  80DE             >.AlreadyCool:
 232  80DE CD 90 9A                             call    scan_keyboard                       ; perform the physical input scan
 233  80E1              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 234  80E1 CD 90 85     DemoOfShipsDEBUG:       call    TestForNextShip
 235  80E4              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 236  80E4 3E 00        InputBlockerCheck:      ld      a,$0
 237  80E6                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 237  80E6 FE 01       >                        cp     $01
 237  80E8 CA 11 81    >                        jp      z,SkipInputHandlers
 238  80EB                                      JumpIfMemTrue TextInputMode, SkipInputHandlers  ; in input mode all keys are processed by input
 238  80EB 3A A8 9E    >                        ld      a,(TextInputMode)
 238  80EE A7          >                        and     a
 238  80EF CA 11 81    >                        jp      z, SkipInputHandlers
 239  80F2                                      InputMainMacro
 239  80F2 CD 8C 89    >                        call    ViewKeyTest
 239  80F5 CD AC 86    >                        call    TestPauseMode
 239  80F8 3A CD 9D    >                        ld      a,(GamePaused)
 239  80FB FE 00       >                        cp      0
 239  80FD 20 88       >                        jr      nz,MainLoop
 239  80FF CD 0D 9C    >                        call    MovementKeyTest
 240  8102              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 241  8102 3A 10 81     HandleMovement:         ld      a,(CallCursorRoutine+2)
 242  8105                                      JumpIfAIsZero     TestAreWeDocked
 242  8105 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 242  8106 CA 11 81    >                        jp	    z, TestAreWeDocked
 243  8109              ;.. Handle displaying correct screen ..............................................................................................
 244  8109 3E 00        HandleBankSelect:       ld      a,$00
 245  810B                                      MMUSelectScreenA
 245  810B ED 92 56    >                     nextreg ScreenBankMMU,		a
 246  810E CD 00 00     CallCursorRoutine:      call    $0000
 247  8111              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 248  8111              ;.. Also end up here if we have the screen input blocker set
 249  8111              SkipInputHandlers:
 250  8111              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 251  8111 3A CC 9D     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 252  8114                                      JumpIfANENusng  0, UpdateLoop                        ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 252  8114 FE 00       >                        cp     0
 252  8116 C2 D7 81    >                        jp      nz,UpdateLoop
 253  8119 21 85 9E     .UpdateEventCounter:    ld      hl,EventCounter                               ; evnery 256 cycles we do a trigger test
 254  811C 35                                   dec     (hl)
 255  811D CC 7A 82                             call    z,LoopEventTriggered
 256  8120 3A BD A0                             ld      a,(MissileTargettingFlag)                     ; if bit 7 is clear then we have a target and launch requested
 257  8123 E6 80                                and     $80
 258  8125 CC 60 83                             call    z,  LaunchPlayerMissile
 259  8128              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 260  8128              ;.. we do one universe slot each loop update ......................................................................................
 261  8128              ;.. First update Sun...............................................................................................................
 262  8128 CD EE 83     .UpdateShips:           call    UpdateUniverseObjects
 263  812B                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 263  812B 3A 7A 88    >                        ld  a,(ScreenTransitionForced)
 263  812E FE FF       >                        cp  $FF
 263  8130 C2 C9 83    >                        jp  nz,BruteForceChange
 264  8133 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 265  8135                                      JumpIfAIsZero  UpdateLoop                             ; This will change as more screens are added TODO
 265  8135 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 265  8136 CA D7 81    >                        jp	    z, UpdateLoop
 266  8139              ;..Processing a view...............................................................................................................
 267  8139              ;..Display any message ............................................................................................................
 268  8139              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 268  8139 2A 83 9E    >                        ld      hl,(InnerHyperCount)
 268  813C 7C          >                        ld      a,h
 268  813D B5          >                        or      l
 268  813E 28 03       >                        jr      z, .HandleMessages
 269  8140 CD 48 92                             call    HyperSpaceMessage
 270  8143              .HandleMessages:        AnyMessagesMacro  .NoMessages
 270  8143 3A D9 9C    >                        ld      a, (MessageCount)
 270  8146 A7          >                        and     a
 270  8147 28 06       >                        jr      z, .NoMessages
 271  8149 CD 2A 92                             call    DisplayCurrentMessage
 272  814C CD 09 92                             call    UpdateMessageTimer
 273  814F
 274  814F              .NoMessages:            MMUSelectLayer2
 274  814F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 275  8153 CD D3 E0                             call   l2_cls_upper_two_thirds
 276  8156                                      MMUSelectLayer1
 276  8156 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277  815A              .UpdateSun:             MMUSelectSun
 277  815A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 278  815E              .DEBUGFORCE:
 279  815E                                     ;ld          hl,$0081
 280  815E                                     ;ld          (SBnKxlo),hl
 281  815E                                     ;ld          hl,$0001
 282  815E                                     ;ld          (SBnKylo),hl
 283  815E                                     ; ld          hl,$0160
 284  815E                                     ; ld          (SBnKzlo),hl
 285  815E                                      ;ld          a,$80
 286  815E                                      ;ld          (SBnKxsgn),a
 287  815E                                      ;ld          (SBnKysgn),a
 288  815E                                     ; ZeroA
 289  815E                                    ;  ld          (SBnKzsgn),a
 290  815E CD 33 C7                             call    SunUpdateAndRender
 291  8161              .UpdatePlanet:          MMUSelectPlanet
 291  8161 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 292  8165 CD 40 C3                             call    PlanetUpdateAndRender
 293  8168              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 294  8168 3E DF        DrawDustForwards:       ld     a,$DF
 295  816A 32 A4 EA                             ld     (line_gfx_colour),a
 296  816D              DustUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 296  816D ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 297  8171 CD 91 97     DustUpdateRoutine:      call   DustForward                                   ; This needs to be self modifying
 298  8174 21 A6 9E     PrepLayer2:             ld      hl,ConsoleRefreshCounter
 299  8177 35                                   dec     (hl)
 300  8178 CA 86 81                             jp      z,ConsoleDraw
 301  817B FA 94 81                             jp      m,ConsoleDrawReset
 302  817E              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 302  817E 3E FF       >                        ld      a,$FF
 302  8180 32 A7 9E    >                        ld      (ConsoleRedrawFlag),a
 303  8183 C3 CD 81                             jp      ProcessPlanet
 304  8186              ConsoleDraw:            SetMemTrue ConsoleRedrawFlag
 304  8186 AF          >                        xor     a
 304  8187 32 A7 9E    >                        ld      (ConsoleRedrawFlag),a
 305  818A                                      MMUSelectLayer2
 305  818A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 306  818E CD E8 E0                             call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 307  8191 C3 CD 81                             jp      ProcessPlanet
 308  8194              ConsoleDrawReset:       SetMemTrue ConsoleRedrawFlag
 308  8194 AF          >                        xor     a
 308  8195 32 A7 9E    >                        ld      (ConsoleRedrawFlag),a
 309  8198 36 04                                ld      (hl),ConsoleRefreshInterval
 310  819A                                      MMUSelectLayer2
 310  819A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 311  819E CD E8 E0                             call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 312  81A1              ;ProcessSun:             call    DrawForwardSun
 313  81A1 3A D1 A0     ProcessLaser:           ld      a,(CurrLaserPulseRate)
 314  81A4                                      JumpIfAIsNotZero .CheckForPulse
 314  81A4 A7          >                        and     a
 314  81A5 C2 B2 81    >                        jp	    nz,.CheckForPulse
 315  81A8                                      JumpIfMemFalse FireLaserPressed, .NoLaser
 315  81A8 3A AA 9E    >                        ld      a,(FireLaserPressed)
 315  81AB A7          >                        and     a
 315  81AC C2 C6 81    >                        jp      nz, .NoLaser
 316  81AF C3 B9 81                             jp      .FireLaser
 317  81B2              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 317  81B2 3A D5 A0    >                        ld  a,(CurrLaserPulseOnCount)
 317  81B5 A7          >                        and a
 317  81B6 CA C6 81    >                        jp  z,.NoLaser
 318  81B9              .FireLaser:             MMUSelectSpriteBank
 318  81B9 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 319  81BD CD AE E2                             call    sprite_laser_show
 320  81C0 CD 32 A1                             call    LaserDrainSystems
 321  81C3 C3 CD 81                             jp      ProcessPlanet
 322  81C6              .NoLaser:               MMUSelectSpriteBank
 322  81C6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 323  81CA CD 12 E4                             call    sprite_laser_hide
 324  81CD              ProcessPlanet:
 325  81CD CD 4C 85     ProcessShipModels:      call   DrawForwardShips                               ; Draw all ships (this may need to be self modifying)
 326  81D0                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 327  81D0                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 328  81D0                                      ; now will CLS bottom thrid
 329  81D0                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 329  81D0 3A A7 9E    >                        ld      a,(ConsoleRedrawFlag)
 329  81D3 A7          >                        and     a
 329  81D4 CC B1 8A    >                        call    z, UpdateConsole
 330  81D7              ;..If we were not in views then we were in display screens/menus...................................................................
 331  81D7              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 331  81D7 3A E4 81    >                        ld  a,(ScreenLoopJP+1)
 331  81DA A7          >                        and a
 331  81DB CA E6 81    >                        jp  z,LoopRepeatPoint
 332  81DE              ;..This is the screen update routine for menus.....................................................................................
 333  81DE              ;.. Also used by transition routines
 334  81DE 3E 00        ScreenLoopBank:         ld      a,$0
 335  81E0                                      MMUSelectScreenA
 335  81E0 ED 92 56    >                     nextreg ScreenBankMMU,		a
 336  81E3 CD 00 00     ScreenLoopJP:           call    $0000
 337  81E6 3A CC 9D     LoopRepeatPoint:        ld      a,(DockedFlag)
 338  81E9              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 338  81E9 FE FD       >                        cp     StateCompletedLaunch
 338  81EB CA 05 82    >                        jp      z,WeHaveCompletedLaunch
 339  81EE                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 339  81EE FE FE       >                        cp     StateInTransition
 339  81F0 CA AE 83    >                        jp      z,WeAreInTransition
 340  81F3                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 340  81F3 FE FC       >                        cp     StateHJumping
 340  81F5 CA 0B 82    >                        jp      z,WeAreHJumping
 341  81F8                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 341  81F8 FE FB       >                        cp     StateHEntering
 341  81FA CA 19 82    >                        jp      z,WeAreHEntering
 342  81FD                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 342  81FD FE FA       >                        cp     StateCompletedHJump
 342  81FF CA 21 82    >                        jp      z,WeHaveCompletedHJump
 343  8202
 344  8202 C3 AE 83                             jp  DoubleBufferCheck
 345  8205 CD DD 88     WeHaveCompletedLaunch:  call    LaunchedFromStation
 346  8208 C3 AE 83                             jp      DoubleBufferCheck
 347  820B CD 47 C2     WeAreHJumping:          call    hyperspace_Lightning
 348  820E DA AE 83                             jp      c,DoubleBufferCheck
 349  8211 3E FB                                ld      a,StateHEntering
 350  8213 32 CC 9D                             ld      (DockedFlag),a
 351  8216 C3 AE 83                             jp      DoubleBufferCheck
 352  8219 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 353  821B 32 CC 9D                             ld      (DockedFlag),a
 354  821E C3 AE 83                             jp      DoubleBufferCheck
 355  8221
 356  8221
 357  8221              ; to create planet position
 358  8221              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 359  8221              ;       take result and divide by 2 then store in x and y sign
 360  8221              ;
 361  8221              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 362  8221              ;       take seed 6 AND %00000011 and store in x sign and y sign
 363  8221              ;       set pitch and roll to 0
 364  8221              ;
 365  8221              ;
 366  8221              ;
 367  8221              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 368  8221 3A B2 9E     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 369  8224                                      MMUSelectGalaxyA
 369  8224 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 370  8227 2A C7 9E                             ld      hl,(TargetSystemX)
 371  822A 22 C5 9E                             ld      (PresentSystemX),hl
 372  822D 44                                   ld      b,h
 373  822E 4D                                   ld      c,l
 374  822F                                      CorrectPostJumpFuel
 374  822F 3A FE A2    >                        ld      a,(Fuel)
 374  8232 21 4E 9E    >                        ld      hl,Distance
 374  8235 96          >                        sub     a,(hl)
 374  8236 32 FE A2    >                        ld      (Fuel),a
 375  8239                                      ForceTransition ScreenFront            ; This will also trigger stars
 375  8239 3E 09       >                        ld      a,ScreenFront
 375  823B 32 7A 88    >                        ld      (ScreenTransitionForced), a
 376  823E 3E 00                                ld      a,$00
 377  8240 32 AC 9E                             ld      (ExtraVesselsCounter),a
 378  8243 32 CC 9D                             ld      (DockedFlag),a
 379  8246 CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 380  8249 CD 8F A3                             call    copy_working_to_system         ; and propogate copies of seeds
 381  824C CD 87 A3                             call    copy_working_to_galaxy         ; .
 382  824F CD 75 A4                             call    get_planet_data_working_seed   ; sort out system data
 383  8252                                      ;call    GetDigramGalaxySeed           ; .
 384  8252                                      MMUSelectStockTable                    ; .
 384  8252 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 385  8256 CD AA E0                             call    generate_stock_market          ; generate new prices
 386  8259 CD 70 A2                             call    ClearUnivSlotList              ; clear out any ships
 387  825C CD 5C A1                             call    ResetPlayerShip
 388  825F                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 388  825F 21 29 9E    >                        ld      hl,FugitiveInnocentStatus
 388  8262 CB 3E       >                        srl     (hl)
 389  8264                                      MMUSelectSun
 389  8264 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 390  8268 CD 61 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 391  826B                                      MMUSelectPlanet
 391  826B ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 392  826F CD BA C0                             call    CreatePlanet
 393  8272              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 394  8272              ;TODO.CreateSun:             call    SetSunSlot
 395  8272              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 396  8272              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 397  8272              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 398  8272              ;;TODO                        call    CopyBodyToUniverse
 399  8272              ;;TODO                        call    CreateSun
 400  8272              ;;TODOCreatePlanet:          call    SetPlanetSlot
 401  8272              ;;TODO                       MMUSelectShipBank1
 402  8272              ;;TODO                       call    GetShipBankId
 403  8272              ;;TODO                       MMUSelectUniverseBankN 1
 404  8272              ;;TODO                       call    CopyBodyToUniverse
 405  8272                                      SetMemFalse DockedFlag
 405  8272 3E FF       >                        ld      a,$FF
 405  8274 32 CC 9D    >                        ld      (DockedFlag),a
 406  8277 C3 AE 83                             jp  DoubleBufferCheck
 407  827A
 408  827A CD DC A2     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 409  827D D8                                   ret     c                                   ; then may as well just skip routine
 410  827E              .DEBUGTEST:             SetMemFalse SpaceStationSafeZone
 410  827E 3E FF       >                        ld      a,$FF
 410  8280 32 AB 9E    >                        ld      (SpaceStationSafeZone),a
 411  8283 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 412  8285              .AreWeInWhichSpace:     JumpIfMemTrue MissJumpFlag, .WitchSpaceEvent
 412  8285 3A 87 9E    >                        ld      a,(MissJumpFlag)
 412  8288 A7          >                        and     a
 412  8289 CA 5F 83    >                        jp      z, .WitchSpaceEvent
 413  828C CD 35 A3     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 414  828F                                      JumpIfAGTENusng 35, .NotJunk                ; .
 414  828F FE 23       >                        cp     35
 414  8291 D2 C2 82    >                        jp		nc,.NotJunk
 415  8294              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 415  8294 3E 03       >                        ld      a,3
 415  8296             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 415  8296 21 AD 9E    >                        ld      hl,JunkCount
 415  8299 BE          >                        cp      (hl)
 415  829A DA C2 82    >                        jp		c,.NotJunk
 416  829D CD 35 A3     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 417  82A0 E6 01                                and     1
 418  82A2 CA 0D 83                             jp      z,.SpawnTrader
 419  82A5              ;... Handle spawning of junk if possible
 420  82A5 CD 35 A3     .SpawnJunk:             call    doRandom
 421  82A8 FE 0A                                cp      10                                  ; will set carry if a < 10
 422  82AA                                      FlipCarryFlag                               ; so now carry is set if a > 10
 422  82AA 3F          >                        ccf
 423  82AB E6 01                                and     1                                   ; so only have carry flag
 424  82AD CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 425  82AF 47                                   ld      b,a                                 ; save ship type
 426  82B0                                      ; if in space station zone then we can't do asteroids
 427  82B0              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 427  82B0 3A AB 9E    >                        ld      a,(SpaceStationSafeZone)
 427  82B3 A7          >                        and     a
 427  82B4 C2 BB 82    >                        jp      nz, .NotInSafeZone
 428  82B7 78                                   ld      a,b
 429  82B8              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 429  82B8 FE 06       >                        cp      ShipID_Asteroid
 429  82BA C8          >                        ret     z
 430  82BB              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 430  82BB 21 AD 9E    >                        ld      hl,JunkCount
 430  82BE 34          >                        inc     (hl)
 431  82BF C3 80 83                             jp      SpawnShipTypeA
 432  82C2                                      ;.......implicit ret
 433  82C2              ;... Handle spawing of non junk type object
 434  82C2              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 434  82C2 3A AB 9E    >                        ld      a,(SpaceStationSafeZone)
 434  82C5 A7          >                        and     a
 434  82C6 CA 0D 83    >                        jp      z, .SpawnTrader
 435  82C9              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 435  82C9 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 436  82CD CD 40 E3     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 437  82D0 CB 27                                sla     a                                   ; double badness for scans
 438  82D2                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 438  82D2 3A B0 9E    >                        ld  a,(CopCount)
 438  82D5 A7          >                        and a
 438  82D6 CA DD 82    >                        jp  z,.NoCopsInSystem
 439  82D9 21 29 9E     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 440  82DC B6                                   or      (hl)
 441  82DD 32 CE A0     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 442  82E0 CD 35 A3                             call    doRandom                            ; then its hostile
 443  82E3                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 443  82E3 21 CE A0    >                        ld      hl,BadnessStatus
 443  82E6 BE          >                        cp      (hl)
 443  82E7 D4 0D 83    >                        call	nc,.SpawnHostileCop
 444  82EA                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 444  82EA 3A B0 9E    >                        ld     a,(CopCount)
 444  82ED A7          >                        and     a
 444  82EE C0          >                        ret    nz
 445  82EF 21 AC 9E                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 446  82F2 35                                   dec     (hl)                                ; to prevent mass spawing
 447  82F3 F0                                   ret     p                                   ;
 448  82F4 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 449  82F5                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 450  82F5                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 451  82F5 3A B2 9E                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 452  82F8                                      MMUSelectGalaxyA
 452  82F8 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 453  82FB 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 454  82FE                                      JumpIfAIsNotZero .NotAnarchySystem
 454  82FE A7          >                        and     a
 454  82FF C2 35 83    >                        jp	    nz,.NotAnarchySystem
 455  8302 47                                   ld      b,a
 456  8303 CD 35 A3                             call    doRandom                            ; if random > 120 then don't spawn
 457  8306                                      ReturnIfAGTENusng 120                       ;
 457  8306 FE 78       >                        cp    120
 457  8308 D0          >                        ret	 nc
 458  8309 E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 459  830B                                      ReturnIfALTNusng b                          ; then return
 459  830B B8          >                        cp    b
 459  830C D8          >                        ret	 c
 460  830D              .SpawnTrader:       ; TODO
 461  830D              ; ... Spawn a cop at hostile status
 462  830D 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 463  830F CD 80 83                             call    SpawnShipTypeA                      ; call rather than jump
 464  8312 CD 2E CA                             call    SetShipHostile                      ; as we have correct universe banked in now
 465  8315 C9                                   ret
 466  8316              ; ... Spawb a hostile ship or cluster
 467  8316 CD 35 A3     .SpawnHostile:          call    doRandom
 468  8319                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 468  8319 FE 64       >                        cp     100
 468  831B D2 36 83    >                        jp		nc,.SpawnPirates
 469  831E 21 AC 9E     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 470  8321 34                                   inc     (hl)                                ;
 471  8322 E6 03                                and     3                                   ; a = random 0..3
 472  8324                                      MMUSelectShipBank1
 472  8324 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 473  8328                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 473  8328 21 8C 93    >                    ld          hl,ShipHunterTable
 473  832B ED 31       >                    add         hl,a
 473  832D 7E          >                    ld          a,(hl)
 474  832E CD 80 83                             call    SpawnShipTypeA
 475  8331 CD 2E CA                             call    SetShipHostile
 476  8334 C9                                   ret
 477  8335 C9           .NotAnarchySystem:      ret
 478  8336 CD 35 A3     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 479  8339 E6 03                                and     3
 480  833B 32 AC 9E                             ld      (ExtraVesselsCounter),a
 481  833E CD 35 A3     .PirateLoop:            call    doRandom
 482  8341 4F                                   ld      c,a                                 ; random and random and 7
 483  8342 CD 35 A3                             call    doRandom
 484  8345 A1                                   and     c
 485  8346 E6 07                                and     7
 486  8348                                      GetByteAInTable ShipPackList
 486  8348 21 84 93    >                    ld          hl,ShipPackList
 486  834B ED 31       >                    add         hl,a
 486  834D 7E          >                    ld          a,(hl)
 487  834E CD 80 83                             call    SpawnShipTypeA
 488  8351 CD 2E CA                             call    SetShipHostile                      ; make sure its hostile
 489  8354                                      AddPirateCount                              ; another pirate has been spawned
 489  8354 21 B1 9E    >                        ld      hl,PirateCount
 489  8357 34          >                        inc     (hl)
 490  8358 21 AC 9E                             ld      hl,ExtraVesselsCounter
 491  835B 35                                   dec     (hl)
 492  835C 20 E0                                jr      nz,.PirateLoop
 493  835E C9                                   ret
 494  835F C9           .WitchSpaceEvent:       ret; TODO for now
 495  8360
 496  8360
 497  8360 CD DC A2     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 498  8363 38 1A                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 499  8365 3E 19        .LaunchGood:            ld      a,ShipID_Missile                    ; TODO For now only 1 missile type
 500  8367                                      GetByteAInTable ShipPackList                ; swap in missile data
 500  8367 21 84 93    >                    ld          hl,ShipPackList
 500  836A ED 31       >                    add         hl,a
 500  836C 7E          >                    ld          a,(hl)
 501  836D CD 80 83                             call    SpawnShipTypeA                      ; spawn the ship
 502  8370 3A BD A0                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 503  8373 32 30 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 504  8376 CD 56 CA                             call    UnivSetPlayerMissile                ; .
 505  8379                                      ClearMissileTarget                          ; reset targetting
 505  8379 3E FF       >                        ld      a,StageMissileNoTarget
 505  837B 32 BD A0    >                        ld      (MissileTargettingFlag),a           ; reset targetting
 506  837E C9                                   ret
 507  837F C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 508  8380
 509  8380              ; a = ship type, iyh = universe slot to create in
 510  8380 FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 511  8382                                      MMUSelectShipBank1                          ; select bank 1
 511  8382 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 512  8386 FD 7C                                ld      a,iyh                               ; select unverse free slot
 513  8388 FD 45                                ld      b,iyl
 514  838A CD 87 A2                             call    SetSlotAToTypeB
 515  838D                                      MMUSelectUniverseA                          ; .
 515  838D C6 46       >                     add    a,BankUNIVDATA0
 515  838F ED 92 56    >                     nextreg UniverseMMU,       a
 516  8392 FD 7D                                ld      a, iyl                              ; retrive ship type
 517  8394                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 518  8394 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 519  8397                                      MMUSelectShipBankA
 519  8397 ED 92 57    >					 nextreg ShipModelMMU,	    a
 520  839A 78                                   ld      a,b                                 ; b = computed ship id for bank
 521  839B CD 6A E0                             call    CopyShipToUniverse
 522  839E CD C5 CA                             call    UnivSetSpawnPosition                ; set initial spawn position
 523  83A1 CD 7A CB                             call    UnivInitRuntime                     ; Clear runtime data before startup
 524  83A4 3A 22 C3                             ld      a,(ShipTypeAddr)
 525  83A7 47                                   ld      b,a
 526  83A8 FD 7D                                ld      a,iyl
 527  83AA CD 8E A2                             call    SetSlotAToClassB
 528  83AD C9                                   ret
 529  83AE
 530  83AE                                      ; reset main loop counters
 531  83AE                                      ; from BBC TT18 jump code
 532  83AE                                      ; need to set system corrodinates, flush out univere ships etc
 533  83AE                                      ; set up new star system and landing location in system
 534  83AE                                      ; reset ship speed etc (RES2)
 535  83AE                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 536  83AE                                      ;   put planet into data blokc 1 of FRIN
 537  83AE                                      ;   put sun inot data block (NWWSHIP)
 538  83AE                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 539  83AE
 540  83AE
 541  83AE              WeAreInTransition:
 542  83AE 3E 00        DoubleBufferCheck:      ld      a,00
 543  83B0                                      IFDEF DOUBLEBUFFER
 544  83B0 FE 00                                    cp      0
 545  83B2 CA C1 83                                 jp      z,TestTransition
 546  83B5                                          MMUSelectLayer2
 546  83B5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 547  83B9 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 548  83BC FE 00                                    cp     0
 549  83BE C4 07 E1                                 call   nz,l2_flip_buffers
 550  83C1                                      ENDIF
 551  83C1 3A 7A 88     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 552  83C4 FE FF                                cp      $FF
 553  83C6 CA 87 80                             jp      z,MainLoop
 554  83C9 57           BruteForceChange:       ld      d,a
 555  83CA 1E 10                                ld      e,ScreenMapRow
 556  83CC ED 30                                mul
 557  83CE DD 21 8D 87                          ld      ix,ScreenKeyMap
 558  83D2 DD 19                                add     ix,de                               ; Force screen transition
 559  83D4 CD 2C 89                             call    SetScreenAIX
 560  83D7 C3 87 80                             jp MainLoop
 561  83DA
 562  83DA              ;..................................................................................................................................
 563  83DA              ;..Process A ship..................................................................................................................
 564  83DA              ; Apply Damage b to ship based on shield value of a
 565  83DA              ; returns a with new shield value
 566  83DA              ApplyDamage:            ClearCarryFlag
 566  83DA B7          >                        or a
 567  83DB 98                                   sbc     b
 568  83DC F0                                   ret     p
 569  83DD ED 44        .KilledShield:          neg                         ; over hit shield
 570  83DF 4F                                   ld      c,a                 ; save overhit in c
 571  83E0 3A BA A0                             ld      a,(PlayerEnergy)    ; and apply it to player energy
 572  83E3                                      ClearCarryFlag
 572  83E3 B7          >                        or a
 573  83E4 99                                   sbc     c
 574  83E5 F2 E9 83                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
 575  83E8 AF           .KilledPlayer:          xor     a
 576  83E9 32 BA A0     .DoneDamage:            ld      (PlayerEnergy),a
 577  83EC AF                                   xor     a                   ; shield is gone
 578  83ED C9                                   ret
 579  83EE
 580  83EE              ;..Update Universe Objects.........................................................................................................
 581  83EE AF           UpdateUniverseObjects:  xor     a
 582  83EF 32 80 9E                             ld      (SelectedUniverseSlot),a
 583  83F2 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 584  83F3              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 585  83F3 CD D0 A2                             call    GetTypeAtSlotA
 586  83F6 FD 6F                                ld      iyl,a                                           ; save type into iyl for later
 587  83F8 FE FF                                cp      $FF
 588  83FA CA 0F 85                             jp      z,.ProcessedUniverseSlot
 589  83FD 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 590  83FE                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 590  83FE C6 46       >                     add    a,BankUNIVDATA0
 590  8400 ED 92 56    >                     nextreg UniverseMMU,       a
 591  8403 CD 3C DC                             call    ApplyMyRollAndPitch
 592  8406 CD 16 DD                             call    ApplyShipRollAndPitch
 593  8409              ;.. If its a space station then see if we are ready to dock........................................................................
 594  8409 3A 35 C0     .CheckExploding:        ld      a,(UBnKexplDsp)                                 ; is it destroyed
 595  840C E6 A0                                and     %10100000                                       ; or exploding
 596  840E C2 0F 85                             jp      nz,.ProcessedUniverseSlot                       ; then no action
 597  8411 2A 0C C0     .CheckIfClose:          ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
 598  8414 ED 5B 0F C0                          ld      de,(UBnKylo)                                    ; .
 599  8418 ED 4B 12 C0                          ld      bc,(UBnKzlo)                                    ; .
 600  841C B4                                   or      h                                               ; .
 601  841D B2                                   or      d                                               ; .
 602  841E B0                                   or      b                                               ; .
 603  841F C2 E5 84                             jp      nz,.CollisionDone                                    ; .
 604  8422 B5           .CheckLowBit7Close:     or      l                                               ; if bit 7 of low is set then still too far
 605  8423 B3                                   or      e                                               ; .
 606  8424 B1                                   or      c                                               ; .
 607  8425 FD 67                                ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
 608  8427 E6 80                                and     $80                                             ; .
 609  8429 C2 E5 84                             jp      nz,.CollisionDone                                    ; .
 610  842C 3A 22 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 611  842F                                      JumpIfANENusng  ShipTypeStation, .CollisionCheck        ; if its not a station so we don't test docking
 611  842F FE 02       >                        cp     ShipTypeStation
 611  8431 C2 65 84    >                        jp      nz,.CollisionCheck
 612  8434              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .CollisionCheck     ; if it is angry then we dont test docking
 612  8434 3A 23 C3    >                        ld      a,(ShipNewBitsAddr)
 612  8437 CB 67       >                        bit 	4,a
 612  8439 C2 65 84    >                        jp      nz,.CollisionCheck
 613  843C              .CheckHighNoseZ:        JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
 613  843C 3A 26 C0    >                        ld      a,(UBnkrotmatNosevZ+1)
 613  843F FE D6       >                        cp      214
 613  8441 DA 65 84    >                        jp	  c,.CollisionCheck
 614  8444 CD E2 86     .GetStationVector:      call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 615  8447                                      JumpIfALTNusng  89, .CollisionCheck                     ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
 615  8447 FE 59       >                        cp      89
 615  8449 DA 65 84    >                        jp		c, .CollisionCheck
 616  844C 3A 1C C0     .CheckAbsRoofXHi:       ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
 617  844F E6 7F                                and     SignMask8Bit                                    ; .
 618  8451                                      JumpIfALTNusng 80, .CollisionCheck                      ; note 80 decimal for 36.6 degrees horizontal
 618  8451 FE 50       >                        cp      80
 618  8453 DA 65 84    >                        jp		c, .CollisionCheck
 619  8456              ;.. Its passed all validation and we are docking...................................................................................
 620  8456              .WeAreDocking:          MMUSelectLayer1
 620  8456 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 621  845A 3E 06                                ld        a,$6
 622  845C CD A5 E0                             call      l1_set_border
 623  845F              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
 623  845F 3E 0D       >                        ld      a,ScreenDocking
 623  8461 32 7A 88    >                        ld      (ScreenTransitionForced), a
 624  8464 C9                                   ret                                                     ;  don't bother with other objects
 625  8465                                      ; So it is a candiate to test docking. Now we do the position and angle checks
 626  8465 FD 7D        .CollisionCheck:        ld      a,iyl
 627  8467                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
 627  8467 FE 02       >                        cp     ShipTypeStation
 627  8469 CA A2 84    >                        jp      z,.HaveCollided
 628  846C                                      JumpIfAEqNusng ShipTypeMissile, .CollisionDone          ; Missile collisions are done in the tactics code
 628  846C FE 01       >                        cp     ShipTypeMissile
 628  846E CA E5 84    >                        jp      z,.CollisionDone
 629  8471 FD 7C        .VeryCloseCheck:        ld      a,iyh                                           ; bit 6 is still too far
 630  8473 E6 C0                                and     %11000000                                       ; .
 631  8475 20 6E                                jr      nz,.CollisionDone                                    ; .
 632  8477 FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
 633  8479                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
 633  8479 FE 04       >                        cp     ShipTypeScoopable
 633  847B C2 A2 84    >                        jp      nz,.HaveCollided
 634  847E 3A 1D A3     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
 635  8481                                      JumpIfANENusng  EquipmentItemNotFitted, .HaveCollided   ;
 635  8481 FE 00       >                        cp     EquipmentItemNotFitted
 635  8483 C2 A2 84    >                        jp      nz,.HaveCollided
 636  8486 3A 11 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
 637  8489                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
 637  8489 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 637  848A CA A2 84    >                        jp	    z, .HaveCollided
 638  848D CD 19 CB     .CollectedCargo:        call    ShipCargoType
 639  8490 57           .DoWeHaveCapacity:      ld      d,a                                           ; save cargotype
 640  8491 CD B2 A1                             call    CanWeScoopCargoD
 641  8494 38 03                                jr      c, .NoRoom
 642  8496 CD AA A1     .CanScoop:              call    AddCargoTypeD
 643  8499 3A 80 9E     .NoRoom:                ld      a,(SelectedUniverseSlot)
 644  849C CD A9 A2                             call    ClearSlotA                                      ; we only need to clear slot list as univ ship is now junk
 645  849F C3 E5 84                             jp      .CollisionDone
 646  84A2              ; ... Generic collision
 647  84A2              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 647  84A2 3A B9 9D    >                        ld      a,(DELTA)
 647  84A5 FE 05       >                        cp      5
 647  84A7 DA B6 84    >                        jp	  c,.SmallBump
 648  84AA CD 90 DE     .BigBump:               call    KillShip                                        ; mark ship as dead (if possible)
 649  84AD 3A 3A C0                             ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 650  84B0                                      SetCarryFlag
 650  84B0 37          >                        scf
 651  84B1 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 652  84B2 47                                   ld      b,a
 653  84B3 C3 C0 84                             jp      .CalculatedDamage
 654  84B6 3A B9 9D     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 655  84B9 47                                   ld      b,a
 656  84BA CD A3 DE                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 657  84BD C3 C6 84                             jp      .ApplyDamage
 658  84C0 3A 3A C0     .CalculatedDamage:      ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 659  84C3                                      SetCarryFlag
 659  84C3 37          >                        scf
 660  84C4 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 661  84C5 47                                   ld      b,a
 662  84C6 CD 38 A2     .ApplyDamage:           call    SetSpeedZero
 663  84C9 3A 14 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 664  84CC E6 80                                and     $80
 665  84CE 20 0C                                jr      nz,.HitRear
 666  84D0 3A B8 A0                             ld      a,(ForeShield)
 667  84D3 CD DA 83                             call    ApplyDamage
 668  84D6 32 B8 A0                             ld      (ForeShield),a
 669  84D9 C3 E5 84                             jp      .CollisionDone
 670  84DC 3A B9 A0     .HitRear:               ld      a,(AftShield)
 671  84DF CD DA 83                             call    ApplyDamage
 672  84E2 32 B9 A0                             ld      (AftShield),a
 673  84E5              ; Now check laser
 674  84E5 CD 1F 8A     .CollisionDone:         call    ShipInSights
 675  84E8 30 25                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 676  84EA 3A D2 A0                             ld      a,(CurrLaserPulseOnTime)
 677  84ED                                      JumpIfAIsZero   .PlayerMissileLock                      ; if no pulse on time then check missile
 677  84ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 677  84EE CA FF 84    >                        jp	    z, .PlayerMissileLock
 678  84F1 3A D0 A0                             ld      a,(CurrLaserDamage)
 679  84F4 CD A3 DE                             call    DamageShip
 680  84F7 3A 35 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 681  84FA E6 A0                                and     %10100000
 682  84FC C2 0F 85                             jp      nz,.ProcessedUniverseSlot                        ; can't lock on debris
 683  84FF              ; Now check missile lock
 684  84FF              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 684  84FF 3A BD A0    >                        ld  a,(MissileTargettingFlag)
 684  8502 FE FE       >                        cp  StageMissileTargeting
 684  8504 C2 0F 85    >                        jp  nz,.ProcessedUniverseSlot
 685  8507 3A 80 9E     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 686  850A                                      LockMissileToA                                          ; .
 686  850A F6 80       >                        or      $80
 686  850C 32 BD A0    >                        ld      (MissileTargettingFlag),a
 687  850F              .ProcessedUniverseSlot:
 688  850F              .AreWeReadyForAI:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 688  850F 3A 80 9E    >                        ld   a,(SelectedUniverseSlot)
 688  8512 21 7F 9E    >                        ld   hl,CurrentUniverseAI
 688  8515 BE          >                        cp   (hl)
 688  8516 CC D7 86    >                        call    z,UpdateShip
 689  8519 3A 80 9E                             ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 690  851C 3C                                   inc     a                                               ; .
 691  851D                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter    ; .
 691  851D FE 0C       >                        cp     UniverseSlotListSize
 691  851F D2 28 85    >                        jp		nc,.UpdateAICounter
 692  8522 32 80 9E                             ld      (SelectedUniverseSlot),a
 693  8525 C3 F2 83                             jp      .UpdateUniverseLoop
 694  8528 3A 7F 9E     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 695  852B 3C                                   inc     a
 696  852C FE 0C                                cp      12
 697  852E 38 01                                jr      c,.IterateAI
 698  8530 AF                                   xor     a
 699  8531 32 7F 9E     .IterateAI:             ld      (CurrentUniverseAI),a
 700  8534              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 700  8534 3A 81 9E    >                        ld      a,(SetStationAngryFlag)
 700  8537 A7          >                        and     a
 700  8538 C0          >                        ret     nz
 701  8539              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 701  8539 3A 8E 9E    >                        ld   a,(UniverseSlotList)
 701  853C FE 02       >                        cp     ShipTypeStation
 701  853E C8          >                        ret    z
 702  853F                                      MMUSelectUniverseN 0
 702  853F ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 703  8543 CD 2E CA                             call    SetShipHostile
 704  8546                                      SetMemFalse    SetStationAngryFlag
 704  8546 3E FF       >                        ld      a,$FF
 704  8548 32 81 9E    >                        ld      (SetStationAngryFlag),a
 705  854B C9                                   ret
 706  854C
 707  854C
 708  854C              ;..................................................................................................................................
 709  854C              ;; TODODrawForwardSun:         MMUSelectSun
 710  854C              ;; TODO                        ld      a,(SunKShipType)
 711  854C              ;; TODO.ProcessBody:           cp      129
 712  854C              ;; TODO                        jr      nz,.ProcessPlanet
 713  854C              ;; TODO.ProcessSun:            call    ProcessSun
 714  854C              ;; TODO
 715  854C              ;; TODOProcessSun:             call    CheckSunDistance
 716  854C              ;; TODO
 717  854C              ;; TODO                        ret
 718  854C              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 719  854C              ;; TODO                        ret
 720  854C              ;..................................................................................................................................
 721  854C AF           DrawForwardShips:       xor     a
 722  854D 32 8F 85     .DrawShipLoop:          ld      (CurrentShipUniv),a
 723  8550 CD D0 A2                             call    GetTypeAtSlotA
 724  8553 FE FF                                cp      $FF
 725  8555 28 12                                jr      z,.ProcessedDrawShip
 726  8557              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 727  8557 3A 8F 85     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 728  855A                                      MMUSelectUniverseA
 728  855A C6 46       >                     add    a,BankUNIVDATA0
 728  855C ED 92 56    >                     nextreg UniverseMMU,       a
 729  855F                                      ; Need check for exploding here
 730  855F CD 54 DE     .ProcessUnivShip:       call    ProcessShip          ; TODFO TUNE THIS   ;; call    ProcessUnivShip
 731  8562              .UpdateRadar:
 732  8562              ;;;Does nothing                       ld      a,BankFrontView
 733  8562              ;;;Does nothing                       MMUSelectScreenA
 734  8562              ;;;Does nothing         ld      a,(CurrentShipUniv)
 735  8562              ;;;Does nothing         MMUSelectUniverseA
 736  8562
 737  8562                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 737  8562 3A A7 9E    >                        ld      a,(ConsoleRedrawFlag)
 737  8565 A7          >                        and     a
 737  8566 CC 04 91    >                        call    z, UpdateScannerShip
 738  8569 3A 8F 85     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 739  856C 3C                                   inc     a
 740  856D                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 740  856D FE 0C       >                        cp      UniverseSlotListSize
 740  856F DA 4D 85    >                        jp		c, .DrawShipLoop
 741  8572              .DrawSunCompass:        MMUSelectSun
 741  8572 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 742  8576 CD 1F 8D                             call    UpdateCompassSun                ; Always update the sun position
 743  8579 CD 82 8F                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 744  857C              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 744  857C 3A AB 9E    >                        ld      a,(SpaceStationSafeZone)
 744  857F A7          >                        and     a
 744  8580 C2 8E 85    >                        jp      nz, .DrawStationCompass
 745  8583              .DrawPlanetCompass:     MMUSelectPlanet
 745  8583 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 746  8587 CD 9F 8D                             call    UpdateCompassPlanet
 747  858A CD 43 90                             call    UpdateScannerPlanet
 748  858D C9                                   ret
 749  858E              .DrawStationCompass:
 750  858E
 751  858E C9                                   ret
 752  858F              ;..................................................................................................................................
 753  858F 00           CurrentShipUniv:        DB      0
 754  8590
 755  8590              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 756  8590              ;;;                        ret     c
 757  8590              ;;;                        ld      a,(UbnkDrawAsDot)
 758  8590              ;;;                        and     a
 759  8590              ;;;                        jr      z,.CarryOnWithDraw
 760  8590              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 761  8590              ;;;                        ld      a,$FF                       ; just draw a pixel
 762  8590              ;;;                        MMUSelectLayer2                     ; then go to update radar
 763  8590              ;;;                        call    l2_plot_pixel               ;
 764  8590              ;;;                        ClearCarryFlag
 765  8590              ;;;                        ret
 766  8590              ;;;.ProcessShipNodes:      call    ProcessShip
 767  8590              ;;;
 768  8590              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 769  8590              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 770  8590              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 771  8590              ;;;                        ld      a,(CurrentShipUniv)
 772  8590              ;;;                        MMUSelectUniverseA
 773  8590              ;;;                        call   DrawLines
 774  8590              ;;;                        ClearCarryFlag
 775  8590              ;;;                        ret
 776  8590
 777  8590
 778  8590 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 779  8592 CD EB 9A                             call    is_key_pressed
 780  8595 C0                                   ret     nz
 781  8596 3A D6 86                             ld      a,(currentDemoShip)
 782  8599 3C                                   inc     a
 783  859A FE 2C                                cp      44
 784  859C 20 01                                jr      nz,.TestOK
 785  859E AF                                   xor     a
 786  859F 32 D6 86     .TestOK:                ld      (currentDemoShip),a
 787  85A2 CD 70 A2                             call    ClearUnivSlotList
 788  85A5 3A D6 86                             ld      a,(currentDemoShip)
 789  85A8 47                                   ld      b,a
 790  85A9 AF                                   xor     a
 791  85AA CD 87 A2                             call    SetSlotAToTypeB
 792  85AD                                      MMUSelectUniverseN 2
 792  85AD ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 793  85B1 CD 40 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 794  85B4 3A D6 86                             ld      a,(currentDemoShip)
 795  85B7                                      MMUSelectShipBank1
 795  85B7 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 796  85BB CD 0F E0                             call    GetShipBankId
 797  85BE                                      MMUSelectShipBankA
 797  85BE ED 92 57    >					 nextreg ShipModelMMU,	    a
 798  85C1 78                                   ld      a,b
 799  85C2 CD 6A E0                             call    CopyShipToUniverse
 800  85C5 CD F4 89                             call    SetInitialShipPosition
 801  85C8 CD 49 87                             call    DEBUGSETNODES
 802  85CB C9                                   ret
 803  85CC
 804  85CC              ;----------------------------------------------------------------------------------------------------------------------------------
 805  85CC              NeedAMessageQueue:
 806  85CC
 807  85CC 3A 84 9E     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 808  85CF 11 26 86                             ld		de,Hyp_counter
 809  85D2 0E 9C                                ld	c, -100
 810  85D4 CD DE 85                             call	.Num1
 811  85D7 0E F6                                ld	c,-10
 812  85D9 CD DE 85                             call	.Num1
 813  85DC 0E FF                                ld	c,-1
 814  85DE 06 2F        .Num1:	                ld	b,'0'-1
 815  85E0 04           .Num2:	                inc		b
 816  85E1 81                                   add		a,c
 817  85E2 38 FC                                jr		c,.Num2
 818  85E4 91                                   sub 	c
 819  85E5 C5                                   push	bc
 820  85E6 F5                                   push	af
 821  85E7 79                                   ld		a,c
 822  85E8 FE FF                                cp		-1
 823  85EA 78                                   ld		a,b
 824  85EB 12                                   ld		(de),a
 825  85EC 13                                   inc		de
 826  85ED F1                                   pop		af
 827  85EE C1                                   pop		bc
 828  85EF C9                                   ret
 829  85F0
 830  85F0              ;----------------------------------------------------------------------------------------------------------------------------------
 831  85F0 54 6F 3A     Hyp_message             DB "To:"
 832  85F3 00 00 00...  Hyp_to                  DS 32
 833  8613 20           Hyp_space1              DB " "
 834  8614 30 2E 30     Hyp_dist_amount         DB "0.0"
 835  8617 2E           Hyp_decimal             DB "."
 836  8618 30           Hyp_fraction            DB "0"
 837  8619 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 838  861D 43 68 61 72  Hyp_charging            DB "Charging:"
 838  8621 67 69 6E 67
 838  8625 3A
 839  8626 30 30 30 00  Hyp_counter             DB "000",0
 840  862A 00 00 00...  Hyp_centeredTarget      DS 32
 841  864A 00           Hyp_centeredEol         DB 0
 842  864B 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 843  866B 00 00 00...  Hyp_centeredCharging    DS 32
 844  868B 00           Hyp_centeredEol2        DB 0
 845  868C 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 846  86AC
 847  86AC
 848  86AC              ;DisplayTargetAndRange
 849  86AC              ;DisplayCountDownNumber
 850  86AC              ;----------------------------------------------------------------------------------------------------------------------------------
 851  86AC 3A CD 9D     TestPauseMode:          ld      a,(GamePaused)
 852  86AF FE 00                                cp      0
 853  86B1 20 12                                jr      nz,.TestForResume
 854  86B3 3A C6 9D     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 855  86B6                                      ReturnIfAGTENusng       ScreenFront
 855  86B6 FE 09       >                        cp    ScreenFront
 855  86B8 D0          >                        ret	 nc
 856  86B9 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 857  86BB CD EB 9A                             call    is_key_pressed
 858  86BE C0                                   ret     nz
 859  86BF              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 859  86BF 3E FF       >                        ld      a,$FF
 860  86C1 32 CD 9D                             ld      (GamePaused),a
 861  86C4 C9                                   ret
 862  86C5 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 863  86C7 CD EB 9A                             call    is_key_pressed
 864  86CA C0                                   ret     nz
 865  86CB AF           .ResumePressed:         xor     a
 866  86CC 32 CD 9D                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 867  86CF C9                                   ret
 868  86D0
 869  86D0 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 870  86D2 CD EB 9A                             call    is_key_pressed
 871  86D5 C9                                   ret
 872  86D6 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 873  86D7
 874  86D7
 875  86D7              ;----------------------------------------------------------------------------------------------------------------------------------
 876  86D7              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 877  86D7 21 48 87                             ld      hl,TidyCounter
 878  86DA 35                                   dec     (hl)
 879  86DB C0                                   ret     nz
 880  86DC 3E 10                                ld      a,16
 881  86DE 32 48 87                             ld      (TidyCounter),a
 882  86E1                                      ; call    TIDY TIDY IS BROKEN
 883  86E1                                     ; add AI in here too
 884  86E1 C9                                   ret
 885  86E2
 886  86E2
 887  86E2 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 888  86E5 11 DA 9D                             ld      de,varVector9ByteWork
 889  86E8 ED A0                                ldi
 890  86EA ED A0                                ldi
 891  86EC ED A0                                ldi
 892  86EE ED A0                                ldi
 893  86F0 ED A0                                ldi
 894  86F2 ED A0                                ldi
 895  86F4 ED A0                                ldi
 896  86F6 ED A0                                ldi
 897  86F8 ED A0                                ldi
 898  86FA 2A DA 9D     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 899  86FD ED 5B DD 9D                          ld      de, (varVector9ByteWork+3); Y
 900  8701 ED 4B E0 9D                          ld      bc, (varVector9ByteWork+6); Z
 901  8705 7D                                   ld      a,l
 902  8706 B3                                   or      e
 903  8707 B1                                   or      c
 904  8708 F6 01                                or      1
 905  870A DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 906  870C 7C                                   ld      a,h
 907  870D B2                                   or      d
 908  870E B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 909  870F C5           .MulBy2Loop:            push    bc
 910  8710 DD 45                                ld      b,ixl
 911  8712 CB 20                                sla     b                       ; Shift ixl left
 912  8714 DD 68                                ld      ixl,b
 913  8716 C1                                   pop     bc
 914  8717 CB 17                                rl      a                       ; roll into a
 915  8719 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 916  871B                                      ShiftHLLeft1                    ; Shift Left X
 916  871B CB 25       >			   sla l
 916  871D CB 14       >			   rl  h
 917  871F                                      ShiftDELeft1                    ; Shift Left Y
 917  871F CB 23       >			   sla e
 917  8721 CB 12       >			   rl  d
 918  8723                                      ShiftBCLeft1                    ; Shift Left Z
 918  8723 CB 21       >			   sla c
 918  8725 CB 10       >			   rl  b
 919  8727 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 920  8729 3A DC 9D     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 921  872C CB 3C                                srl     h
 922  872E B4                                   or      h
 923  872F 32 83 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 924  8732 3A DF 9D                             ld      a,(varVector9ByteWork+5); y sign
 925  8735 CB 3A                                srl     d
 926  8737 B2                                   or      d
 927  8738 32 84 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 928  873B 3A E2 9D                             ld      a,(varVector9ByteWork+8); y sign
 929  873E CB 38                                srl     b
 930  8740 B0                                   or      b
 931  8741 32 85 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 932  8744 CD 9F B2                             call    normaliseXX1596fast
 933  8747 C9                                   ret                          ; will return with a holding Vector Z
 934  8748
 935  8748 00           TidyCounter             DB  0
 936  8749
 937  8749                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 8749
   2+ 8749
   3+ 8749 21 6C 87     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 874C 11 0C C0                             ld      de,UBnKxlo
   5+ 874F 01 09 00                             ld      bc,9
   6+ 8752 ED B0                                ldir
   7+ 8754 21 75 87                             ld      hl,DEBUGROTMATDATA
   8+ 8757 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 875A 01 12 00                             ld      bc,6*3
  10+ 875D ED B0                                ldir
  11+ 875F C9                                   ret
  12+ 8760
  13+ 8760 21 6C 87     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 8763 11 0C C0                             ld      de,UBnKxlo
  15+ 8766 01 06 00                             ld      bc,9 - 3
  16+ 8769 ED B0                                ldir
  17+ 876B C9                                   ret
  18+ 876C
  19+ 876C              ; culltest
  20+ 876C              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 876C 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 8770 00 00 5C 07
  21+ 8774 00
  22+ 8775 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 8779 00 00
  23+ 877B 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 877F 00 00
  24+ 8781 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 8785 00 E0
  25+ 8787
  26+ 8787              ; FAILS due to sharp angle, OK now
  27+ 8787              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 8787              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 8787              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 8787              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 8787              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 8787              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 8787              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 8787              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 8787              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 8787              ; Looks OK
  37+ 8787              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 8787              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 8787              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 8787              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 8787              ;
  42+ 8787              ; Massive horizontal line
  43+ 8787              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 8787              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 8787              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 8787              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 8787              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 8787              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 8787              ; Line lost in clipping
  50+ 8787              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 8787              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 8787              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 8787              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 8787              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 8787              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 8787              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 8787              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 8787              ;
  59+ 8787              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 8787              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 8787              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 8787              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 8787              ; top left off right issue
  64+ 8787              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 8787              ; test middle of screen
  69+ 8787              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 8787              ;
  71+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 8787              ; test middle of screen futher away
  75+ 8787              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 8787              ;
  77+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 8787
  81+ 8787              ; Test left center clip still warping
  82+ 8787              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 8787              ;
  84+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 8787              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 8787              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 8787              ;
  90+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 8787              ; Test top center clip test 1 - good test many ships fail
  94+ 8787              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 8787              ;
  96+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 8787              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 8787              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 8787              ;
 102+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 8787              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 8787              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 8787              ; looks better now may have some clipping issues maybe ship data
 107+ 8787              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 8787              ;
 109+ 8787              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 8787              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 8787 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 878B B0 55
 112+ 878D              ; Test left top center clip
 113+ 878D
 114+ 878D              ; Test right top center clip
 115+ 878D              ; Test left bottom center clip
 116+ 878D              ; Test right bottom center clip
 117+ 878D
 118+ 878D              ; Tests with no clip
 119+ 878D              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 878D              ;
 121+ 878D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 878D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 878D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 878D              ;
 125+ 878D              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 878D              ;
 127+ 878D              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 878D              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 878D
# file closed: ./debugMatrices.asm
 938  878D
 939  878D
 940  878D              ;TODO Optimisation
 941  878D              ; Need this table to handle differnet events
 942  878D              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 943  878D              ; cursor key, joystick press
 944  878D              ; cursor key, joystick press
 945  878D              ; non cursor keys presses
 946  878D              ;
 947  878D              ; First byte is now docked flag
 948  878D              ;
 949  878D              ; Padded to 8 bytes to allow a * 8 for addressing
 950  878D              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 951  878D              ; Byte 1   - Screen Id
 952  878D              ; Byte 2,3 - address of keypress table
 953  878D              ; Byte 4   - Bank with Display code
 954  878D              ; Byte 5,6 - Function for display
 955  878D              ; Byte 7,8 - Main loop update routine
 956  878D              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
 957  878D              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 958  878D              ; byte 11  - Double Buffering 0 = no, 1 = yes
 959  878D              ; byte 12,13  - cursor key input routine
 960  878D              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 961  878D              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 962  878D              ;
 963  878D              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 964  878D 00 00 3C 9A  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 964  8791 32 FC C3 00
 964  8795 00 00 00 00
 964  8799 5A C4 01 00
 965  879D 00 01 3A 9A  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 965  87A1 33 48 C1 78
 965  87A5 C2 00 00 00
 965  87A9 00 C3 01 00
 966  87AD 01 02 3E 9A                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 966  87B1 36 43 C3 FA
 966  87B5 C3 00 00 00
 966  87B9 00 00 01 00
 967  87BD 02 03 3E 9A                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 967  87C1 36 43 C3 00
 967  87C5 00 00 00 00
 967  87C9 00 00 01 00
 968  87CD 00 04 40 9A  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 968  87D1 3F 46 CF 8A
 968  87D5 CF 00 00 00
 968  87D9 00 00 01 00
 969  87DD 00 05 42 9A                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 969  87E1 34 F5 C1 00
 969  87E5 00 00 00 00
 969  87E9 00 00 01 00
 970  87ED 00 06 50 9A                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 970  87F1 35 F0 C2 00
 970  87F5 00 00 00 00
 970  87F9 00 00 01 00
 971  87FD 01 07 38 9A                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 971  8801 40 EA D3 86
 971  8805 D4 00 00 00
 971  8809 00 00 01 00
 972  880D 01 08 32 9A                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 972  8811 41 79 C1 63
 972  8815 C2 00 01 01
 972  8819 00 00 01 00
 973  881D 02 09 08 9A  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 973  8821 3E 6A C0 BD
 973  8825 C0 01 00 01
 973  8829 DE C2 00 00
 974  882D 02 0A 08 9A                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 974  8831 3E 6A C0 00
 974  8835 00 01 00 01
 974  8839 DE C2 00 00
 975  883D 02 0B 08 9A                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 975  8841 3E 6A C0 00
 975  8845 00 01 00 01
 975  8849 DE C2 00 00
 976  884D 02 0C 08 9A                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 976  8851 3E 6A C0 00
 976  8855 00 01 00 01
 976  8859 DE C2 00 00
 977  885D 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 977  8861 41 F5 C1 98
 977  8865 C2 00 01 01
 977  8869 00 00 01 00
 978  886D 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 978  8871 3E 96 C2 DC
 978  8875 C2 00 01 01
 978  8879 00
 979  887A
 980  887A              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 981  887A              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 982  887A              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 983  887A              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 984  887A              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 985  887A              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 986  887A FF           ScreenTransitionForced  DB $FF
 987  887B                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 887B              ; Use bank 0 as source and bank 7 as write target
   2+ 887B              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 887B ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 887F 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 8881 06 0C                                ld		b,12
   5+ 8883 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 8885                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 8885 C6 46       >                     add    a,BankUNIVDATA0
   6+ 8887 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 888A 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 888D 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 8890 01 F6 1F                             ld		bc,UnivBankSize
  10+ 8893 CD AC 99                             call	memcopy_dma
  11+ 8896 F1 C1                                pop		bc,,af
  12+ 8898 57                                   ld      d,a
  13+ 8899 C6 41                                add     "A"
  14+ 889B 32 0B C0                             ld      (StartOfUnivN),a
  15+ 889E 7A                                   ld      a,d
  16+ 889F 3C                                   inc		a
  17+ 88A0 10 E1                                djnz	.ResetCopyLoop
  18+ 88A2 C9                                   ret
  19+ 88A3
  20+ 88A3              ; Use bank 0 as source and bank 7 as write target
  21+ 88A3              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 88A3 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 88A7 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 88A9 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 88AB 0E 01                                ld      c,1                              ;
  25+ 88AD F5           .ResetCopyLoop:         push	af                               ;
  26+ 88AE C5                                   push	bc                               ;
  27+ 88AF                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 88AF ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 88B2 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 88B5 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 88B8 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 88BB CD AC 99                             call	memcopy_dma                      ; .
  32+ 88BE C1                                   pop		bc                               ; .
  33+ 88BF 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 88C2 79                                   ld      a,c                              ;
  35+ 88C3 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 88C5 77                                   ld      (hl),a                           ; .
  37+ 88C6 0C                                   inc     c                                ; Do next bank
  38+ 88C7 F1                                   pop     af                               ; .
  39+ 88C8 3C                                   inc		a                                ; .
  40+ 88C9 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 88CB C9                                   ret
  42+ 88CC
  43+ 88CC 06 08        SeedAllGalaxies:        ld          b,8
  44+ 88CE 0E 5B                                ld          c,BankGalaxyData0
  45+ 88D0 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 88D1 79                                   ld          a,c
  47+ 88D2                                      MMUSelectGalaxyA
  47+ 88D2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 88D5 CD 9F FC                             call        SeedGalaxy
  49+ 88D8 C1                                   pop         bc
  50+ 88D9 0C                                   inc         c
  51+ 88DA 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 88DC C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 988  88DD
 989  88DD
 990  88DD              ;----------------------------------------------------------------------------------------------------------------------------------
 991  88DD              LaunchedFromStation:    MMUSelectSun
 991  88DD ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 992  88E1 CD 85 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 993  88E4                                      MMUSelectPlanet
 993  88E4 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 994  88E8 CD E2 C0                             call    CreatePlanetLaunched
 995  88EB CD 70 A2                             call    ClearUnivSlotList
 996  88EE CD 7C A2                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 997  88F1                                      MMUSelectUniverseN 0                        ; Prep Target universe
 997  88F1 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 998  88F5                                      MMUSelectShipBank1                          ; Bank in the ship model code
 998  88F5 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 999  88F9 CD 7A CB                             call    UnivInitRuntime                     ; Zerp ship runtime data
1000  88FC 3E 0D                                ld      a,CoriloisStation
1001  88FE CD 0F E0                             call    GetShipBankId
1002  8901                                      MMUSelectShipBankA                          ; Select the correct bank found
1002  8901 ED 92 57    >					 nextreg ShipModelMMU,	    a
1003  8904 78                                   ld      a,b                                 ; Select the correct ship
1004  8905 CD 6A E0                             call    CopyShipToUniverse
1005  8908 CD 47 CB     .BuiltStation:          call    ResetStationLaunch
1006  890B AF           .NowInFlight:           xor     a
1007  890C 32 CC 9D                             ld      (DockedFlag),a
1008  890F                                      ForceTransition ScreenFront
1008  890F 3E 09       >                        ld      a,ScreenFront
1008  8911 32 7A 88    >                        ld      (ScreenTransitionForced), a
1009  8914 CD 5C A1                             call    ResetPlayerShip
1010  8917 C9                                   ret
1011  8918
1012  8918 3A CE 87     InitialiseCommander:    ld      a,(ScreenCmdr+1)
1013  891B DD 21 CD 87                          ld      ix,ScreenCmdr
1014  891F C3 2C 89                             jp      SetScreenAIX
1015  8922
1016  8922 3A 1E 88     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
1017  8925 DD 21 1D 88                          ld      ix,ScreenKeyFront
1018  8929 C3 2C 89                             jp      SetScreenAIX
1019  892C              ; false ret here as we get it free from jp
1020  892C
1021  892C              ;----------------------------------------------------------------------------------------------------------------------------------
1022  892C 32 C6 9D     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
1023  892F                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
1023  892F 3E FF       >                        ld      a,$FF
1023  8931 32 7A 88    >                        ld      (ScreenTransitionForced),a
1024  8934 32 C5 9D                             ld      (ScreenChanged),a               ; Set screen changed to FF
1025  8937 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
1026  893A 32 34 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
1027  893D                                      JumpIfAIsZero .NotViewPort              ;
1027  893D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1027  893E CA 4D 89    >                        jp	    z, .NotViewPort
1028  8941 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
1029  8944 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
1030  8946                                      MMUSelectCommander                      ; Load view laser to current
1030  8946 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
1031  894A CD F4 E2                             call    LoadLaserToCurrent              ;
1032  894D DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
1033  8950 32 DF 81                             ld      (ScreenLoopBank+1),a            ; setup loop
1034  8953 32 0A 81                             ld      (HandleBankSelect+1),a          ; setup cursor keys
1035  8956                                      MMUSelectScreenA
1035  8956 ED 92 56    >                     nextreg ScreenBankMMU,		a
1036  8959 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
1037  895C 32 8A 89                             ld      (ScreenUpdateAddr+1),a
1038  895F DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
1039  8962 32 8B 89                             ld      (ScreenUpdateAddr+2),a
1040  8965 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
1041  8968 32 E4 81                             ld      (ScreenLoopJP+1),a
1042  896B DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
1043  896E 32 E5 81                             ld      (ScreenLoopJP+2),a
1044  8971 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
1045  8974 32 E5 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
1046  8977 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
1047  897A 32 AF 83                             ld      (DoubleBufferCheck+1),a
1048  897D DD 7E 0C                             ld      a,(ix+12)
1049  8980 32 0F 81                             ld      (CallCursorRoutine+1),a
1050  8983 DD 7E 0D                             ld      a,(ix+13)
1051  8986 32 10 81                             ld      (CallCursorRoutine+2),a
1052  8989
1053  8989 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
1054  898C              ;----------------------------------------------------------------------------------------------------------------------------------
1055  898C 3A C6 9D     ViewKeyTest:            ld      a,(ScreenIndex)
1056  898F 4F                                   ld      c,a
1057  8990 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
1058  8992 DD 21 8D 87                          ld      ix,ScreenKeyMap
1059  8996 2A 83 9E                             ld      hl,(InnerHyperCount)
1060  8999 7C                                   ld      a,h
1061  899A B5                                   or      l
1062  899B FD 67                                ld      iyh,a
1063  899D FD 7C        ViewScanLoop:           ld      a,iyh
1064  899F A7           .HyperspaceCountdown:   and     a
1065  89A0 28 08                                jr      z,.DockedFlag
1066  89A2 DD 7E 0E                             ld      a,(ix+14)
1067  89A5 FE 01                                cp      1
1068  89A7 CA EC 89                             jp      z,NotReadNextKey
1069  89AA DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
1070  89AD              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
1071  89AD FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
1072  89AF 28 3B                                jr      z,NotReadNextKey                ;
1073  89B1 FE 00                                cp      0                               ; if itr a always read skip docking check
1074  89B3 28 14                                jr      z,.NoDocCheck
1075  89B5 57           .DocCheck:              ld      d,a
1076  89B6 3A CC 9D                             ld      a,(DockedFlag)
1077  89B9 FE 00                                cp      0                               ; if we are docked
1078  89BB 28 07                                jr      z,.NotDockedCheck
1079  89BD 7A           .DockedCheck:           ld      a,d
1080  89BE FE 01                                cp      1                               ; if we are docked and its a dock only then scan
1081  89C0 20 2A                                jr      nz,NotReadNextKey
1082  89C2 18 05                                jr      .NoDocCheck
1083  89C4 7A           .NotDockedCheck:        ld      a,d
1084  89C5 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
1085  89C7 20 23                                jr      nz,NotReadNextKey
1086  89C9 DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
1087  89CC B9                                   cp      c                               ; is the index the current screen, if so skip the scan
1088  89CD 5F                                   ld      e,a
1089  89CE 28 1C                                jr      z,NotReadNextKey
1090  89D0 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
1091  89D3 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
1092  89D5 28 15                                jr      z,NotReadNextKey
1093  89D7 32 E1 89                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
1094  89DA DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
1095  89DD 32 E2 89                             ld      (ReadKeyAddr+2),a
1096  89E0 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
1097  89E3 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
1098  89E4                                      JumpIfAIsZero NotReadNextKey
1098  89E4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1098  89E5 CA EC 89    >                        jp	    z, NotReadNextKey
1099  89E8 7B           .ValidScreenChange:     ld      a,e
1100  89E9 C3 2C 89                             jp      SetScreenAIX
1101  89EC              ;--- CODE WILL NOT FALL TO HERE ---
1102  89EC 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
1103  89EF DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
1104  89F1 10 AA                                djnz    ViewScanLoop
1105  89F3 C9                                   ret
1106  89F4
1107  89F4 21 00 00     SetInitialShipPosition: ld      hl,$0000
1108  89F7 22 0C C0                             ld      (UBnKxlo),hl
1109  89FA 21 00 00                             ld      hl,$0000
1110  89FD 22 0F C0                             ld      (UBnKylo),hl
1111  8A00 21 B4 03                             ld      hl,$03B4
1112  8A03 22 12 C0                             ld      (UBnKzlo),hl
1113  8A06 AF                                   xor     a
1114  8A07 32 0E C0                             ld      (UBnKxsgn),a
1115  8A0A 32 11 C0                             ld      (UBnKysgn),a
1116  8A0D 32 14 C0                             ld      (UBnKzsgn),a
1117  8A10              ;    call    Reset TODO
1118  8A10 CD ED CC                             call	InitialiseOrientation            ;#00;
1119  8A13 3E 01                                ld      a,1
1120  8A15 32 B9 9D                             ld      (DELTA),a
1121  8A18 21 04 00                             ld      hl,4
1122  8A1B 22 BA 9D                             ld      (DELTA4),hl
1123  8A1E C9                                   ret
1124  8A1F
1125  8A1F              ; Checks to see if current ship swapped in is in our sights
1126  8A1F              ; we don;t need to deal with planets or sun as they have their own memory bank
1127  8A1F              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
1127  8A1F B7          >                        or a
1128  8A20                                      ReturnIfMemIsNegative UBnKzsgn
1128  8A20 3A 14 C0    >                        ld      a,(UBnKzsgn)
1128  8A23 E6 80       >                        and     $80
1128  8A25 C0          >                        ret     nz
1129  8A26 3A 35 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
1130  8A29 2A 0C C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
1131  8A2C ED 4B 0F C0                          ld      bc,(UBnKylo)                    ; .
1132  8A30 B4                                   or      h
1133  8A31 B0                                   or      b
1134  8A32 C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
1135  8A33 7D                                   ld      a,l                             ; hl =xlo ^ 2
1136  8A34                                      DEEquSquareA                            ; .
1136  8A34 57          >                        ld  d,a
1136  8A35 5F          >                        ld  e,a
1136  8A36 ED 30       >                        mul de
1137  8A38 62 6B                                ld      hl,de                           ; .
1138  8A3A 79                                   ld      a,c                             ; de = de = ylo ^ 2
1139  8A3B                                      DEEquSquareA                            ; .
1139  8A3B 57          >                        ld  d,a
1139  8A3C 5F          >                        ld  e,a
1139  8A3D ED 30       >                        mul de
1140  8A3F 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
1141  8A40 D8                                   ret     c                               ; if there was a carry then out of line of sight
1142  8A41 ED 5B 0D C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
1143  8A45                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
1143  8A45 E5          >                        push    hl
1143  8A46 A7          >                        and     a
1143  8A47 ED 52       >                        sbc     hl,de
1143  8A49 E1          >                        pop     hl
1144  8A4A 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
1145  8A4C C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
1146  8A4D              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
1146  8A4D 37          >                        scf
1147  8A4E C9                                   ret
1148  8A4F
1149  8A4F
1150  8A4F                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 8A4F              ; bc = start position, d = length, e = colour
   2+ 8A4F 1E 10        Draw3LineBar:           ld      e,16
   3+ 8A51 C5 D5                                push    bc,,de
   4+ 8A53                                      MMUSelectLayer2
   4+ 8A53 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 8A57 CD 8A E2                             call    l2_draw_horz_line
   6+ 8A5A D1 C1                                pop     bc,,de
   7+ 8A5C 05                                   dec     b
   8+ 8A5D C5 D5                                push    bc,,de
   9+ 8A5F 1E 14                                ld      e,20
  10+ 8A61                                      MMUSelectLayer2
  10+ 8A61 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 8A65 CD 8A E2                             call    l2_draw_horz_line
  12+ 8A68 D1 C1                                pop     bc,,de
  13+ 8A6A 05                                   dec     b
  14+ 8A6B                                      MMUSelectLayer2
  14+ 8A6B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 8A6F CD 8A E2                             call    l2_draw_horz_line
  16+ 8A72 C9                                   ret
  17+ 8A73
  18+ 8A73 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 8A75 FE 28                                cp      40
  20+ 8A77 30 18                                jr      nc,DrawColourEBar
  21+ 8A79 1E 54                                ld      e,84
  22+ 8A7B FE 1E                                cp      30
  23+ 8A7D 30 12                                jr      nc,DrawColourEBar
  24+ 8A7F 1E D8                                ld      e,216
  25+ 8A81 FE 14                                cp      20
  26+ 8A83 1E EC                                ld      e,236
  27+ 8A85 FE 0A                                cp      10
  28+ 8A87 30 08                                jr      nc,DrawColourEBar
  29+ 8A89 1E E1                                ld      e,225
  30+ 8A8B FE 05                                cp      5
  31+ 8A8D 30 02                                jr      nc,DrawColourEBar
  32+ 8A8F 1E E0                                ld      e,224
  33+ 8A91 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 8A93                                      MMUSelectLayer2
  34+ 8A93 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 8A97 CD 8A E2                             call    l2_draw_horz_line
  36+ 8A9A D1 C1                                pop     bc,,de
  37+ 8A9C 05                                   dec     b
  38+ 8A9D C5 D5                                push    bc,,de
  39+ 8A9F                                      MMUSelectLayer2
  39+ 8A9F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 8AA3 CD 8A E2                             call    l2_draw_horz_line
  41+ 8AA6 D1 C1                                pop     bc,,de
  42+ 8AA8 05                                   dec     b
  43+ 8AA9                                      MMUSelectLayer2
  43+ 8AA9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 8AAD CD 8A E2                             call    l2_draw_horz_line
  45+ 8AB0 C9                                   ret
  46+ 8AB1
  47+ 8AB1                                      ; no ret needed as jp handles it
  48+ 8AB1
  49+ 8AB1
  50+ 8AB1 3A B9 9D     UpdateConsole:          ld      a,(DELTA)
  51+ 8AB4 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  52+ 8AB6 28 0C                                jr      z,.UpdateRoll
  53+ 8AB8 01 D1 84                             ld      bc,SpeedoStart
  54+ 8ABB 21 09 A1                             ld      hl,SpeedoMapping
  55+ 8ABE ED 31                                add     hl,a
  56+ 8AC0 56                                   ld      d,(hl)
  57+ 8AC1 CD 4F 8A                             call    Draw3LineBar
  58+ 8AC4 3A D4 9C     .UpdateRoll:            ld      a,(ALP1)
  59+ 8AC7 FE 00                                cp      0
  60+ 8AC9 CA FD 8A                             jp      z,.UpdatePitch
  61+ 8ACC 21 E0 8C                             ld      hl,RollMiddle
  62+ 8ACF 3A D5 9C                             ld      a,(ALP2)
  63+ 8AD2 FE 00                                cp      0
  64+ 8AD4 CA EF 8A                             jp     z,.PosRoll
  65+ 8AD7 16 00        .NegRoll:               ld      d,0
  66+ 8AD9 3A D4 9C                             ld      a,(ALP1)
  67+ 8ADC CB 27                                sla     a
  68+ 8ADE 5F                                   ld      e,a
  69+ 8ADF B7                                   or      a
  70+ 8AE0 ED 52                                sbc     hl,de
  71+ 8AE2 44 4D                                ld      bc,hl
  72+ 8AE4 3E E1                                ld      a,DialMiddleXPos
  73+ 8AE6 91                                   sub     c
  74+ 8AE7 57                                   ld      d,a
  75+ 8AE8 1E FF                                ld      e,$FF
  76+ 8AEA CD 4F 8A                             call    Draw3LineBar
  77+ 8AED 18 0E                                jr      .UpdatePitch
  78+ 8AEF 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  79+ 8AF2 3A D4 9C                             ld      a,(ALP1)
  80+ 8AF5 CB 27                                sla     a
  81+ 8AF7 57                                   ld      d,a
  82+ 8AF8 1E FF                                ld      e,$FF
  83+ 8AFA CD 4F 8A                             call    Draw3LineBar
  84+ 8AFD 3A C7 9C     .UpdatePitch:           ld      a,(BET1)
  85+ 8B00 FE 00                                cp      0
  86+ 8B02 CA 37 8B                             jp      z,.Fuel
  87+ 8B05 21 E0 94                             ld      hl,PitchMiddle
  88+ 8B08 3A C8 9C                             ld      a,(BET2)
  89+ 8B0B FE 00                                cp      0
  90+ 8B0D CA 29 8B                             jp      z,.PosPitch
  91+ 8B10 16 00        .NegPitch:              ld      d,0
  92+ 8B12 3A C7 9C                             ld      a,(BET1)
  93+ 8B15 CB 27                                sla     a
  94+ 8B17 5F                                   ld      e,a
  95+ 8B18 B7                                   or      a
  96+ 8B19 ED 52                                sbc     hl,de
  97+ 8B1B 44 4D                                ld      bc,hl
  98+ 8B1D 3E E1                                ld      a,DialMiddleXPos
  99+ 8B1F 91                                   sub     c
 100+ 8B20 57                                   ld      d,a
 101+ 8B21 1E FF                                ld      e,$FF
 102+ 8B23 CD 4F 8A                             call    Draw3LineBar
 103+ 8B26 C3 37 8B                             jp      .Fuel
 104+ 8B29 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 105+ 8B2C 3A C7 9C                             ld      a,(BET1)
 106+ 8B2F CB 27                                sla     a
 107+ 8B31 57                                   ld      d,a
 108+ 8B32 1E FF                                ld      e,$FF
 109+ 8B34 CD 4F 8A                             call    Draw3LineBar
 110+ 8B37 3A FE A2     .Fuel:                  ld      a,(Fuel)
 111+ 8B3A CB 3F                                srl     a               ; divide by 4 to get range on screen
 112+ 8B3C 21 E4 A0                             ld      hl,FuelMapping
 113+ 8B3F ED 31                                add     hl,a
 114+ 8B41 7E                                   ld      a,(hl)
 115+ 8B42 01 10 94                             ld      bc,FuelStart
 116+ 8B45 57                                   ld      d,a
 117+ 8B46 CD 73 8A                             call    DrawColourCodedBar
 118+ 8B49 3A B8 A0     .ForeShield:            ld      a,(ForeShield)
 119+ 8B4C CB 3F                                srl     a
 120+ 8B4E CB 3F                                srl     a
 121+ 8B50 CB 3F                                srl     a
 122+ 8B52 01 10 84                             ld      bc,FShieldStart
 123+ 8B55 CD 73 8A                             call    DrawColourCodedBar
 124+ 8B58 3A B9 A0     .AftShield:             ld      a,(AftShield)
 125+ 8B5B CB 3F                                srl     a
 126+ 8B5D CB 3F                                srl     a
 127+ 8B5F CB 3F                                srl     a
 128+ 8B61 01 10 8D                             ld      bc,AShieldStart
 129+ 8B64 57                                   ld      d,a
 130+ 8B65 CD 73 8A                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 131+ 8B68              ;PlayerEnergy
 132+ 8B68              ; BNEED LASER temp
 133+ 8B68              ; NEED CABIN TEMP
 134+ 8B68              ;NEED ALTITUDE
 135+ 8B68              ; Draw compas - if in range draw station, else do planet
 136+ 8B68 3A BA A0     .EnergyBars:            ld      a,(PlayerEnergy)
 137+ 8B6B CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 138+ 8B6D                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 138+ 8B6D FE 20       >                        cp      31 + 1
 138+ 8B6F DA 80 8B    >                        jp		c, Draw1EnergyBar
 139+ 8B72                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 139+ 8B72 FE 3F       >                        cp      (31*2) + 1
 139+ 8B74 DA 8A 8B    >                        jp		c, Draw2EnergyBars
 140+ 8B77                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 140+ 8B77 FE 5E       >                        cp      (31*3) + 1
 140+ 8B79 DA A0 8B    >                        jp		c, Draw3EnergyBars
 141+ 8B7C C3 C2 8B                             jp      Draw4EnergyBars
 142+ 8B7F              ; implicit ret
 143+ 8B7F
 144+ 8B7F
 145+ 8B7F              ; NEED ENERGY BAR
 146+ 8B7F
 147+ 8B7F C9           .DoneConsole:           ret
 148+ 8B80
 149+ 8B80 1E E0        Draw1EnergyBar:         ld      e,224
 150+ 8B82 57                                   ld      d,a
 151+ 8B83 01 D5 BD                             ld      bc,EnergyBar1Start
 152+ 8B86 CD 91 8A                             call    DrawColourEBar
 153+ 8B89 C9                                   ret
 154+ 8B8A 1E D8        Draw2EnergyBars:        ld      e,216
 155+ 8B8C D6 1F                                sub     31
 156+ 8B8E 57                                   ld      d,a
 157+ 8B8F 01 D5 B5                             ld      bc,EnergyBar2Start
 158+ 8B92 CD 91 8A                             call    DrawColourEBar
 159+ 8B95 16 1F                                ld      d,31
 160+ 8B97 1E D8                                ld      e,216
 161+ 8B99 01 D5 BD                             ld      bc,EnergyBar1Start
 162+ 8B9C CD 91 8A                             call    DrawColourEBar
 163+ 8B9F C9                                   ret
 164+ 8BA0 1E 14        Draw3EnergyBars:        ld      e,20
 165+ 8BA2 D6 3E                                sub     31*2
 166+ 8BA4 57                                   ld      d,a
 167+ 8BA5 1E 14                                ld      e,20
 168+ 8BA7 01 D5 AD                             ld      bc,EnergyBar3Start
 169+ 8BAA CD 91 8A                             call    DrawColourEBar
 170+ 8BAD 16 1F                                ld      d,31
 171+ 8BAF 1E 14                                ld      e,20
 172+ 8BB1 01 D5 B5                             ld      bc,EnergyBar2Start
 173+ 8BB4 CD 91 8A                             call    DrawColourEBar
 174+ 8BB7 16 1F                                ld      d,31
 175+ 8BB9 1E 14                                ld      e,20
 176+ 8BBB 01 D5 BD                             ld      bc,EnergyBar1Start
 177+ 8BBE CD 91 8A                             call    DrawColourEBar
 178+ 8BC1 C9                                   ret
 179+ 8BC2 1E 18        Draw4EnergyBars:        ld      e,24
 180+ 8BC4 D6 5D                                sub     31*3
 181+ 8BC6                                      JumpIfALTNusng 31,.NoMax
 181+ 8BC6 FE 1F       >                        cp      31
 181+ 8BC8 DA CD 8B    >                        jp		c, .NoMax
 182+ 8BCB 3E 1F        .Max                    ld      a,31
 183+ 8BCD 57           .NoMax:                 ld      d,a
 184+ 8BCE 01 D5 A5                             ld      bc,EnergyBar4Start
 185+ 8BD1 CD 91 8A                             call    DrawColourEBar
 186+ 8BD4 16 1F                                ld      d,31
 187+ 8BD6 1E 18                                ld      e,24
 188+ 8BD8 01 D5 AD                             ld      bc,EnergyBar3Start
 189+ 8BDB CD 91 8A                             call    DrawColourEBar
 190+ 8BDE 16 1F                                ld      d,31
 191+ 8BE0 1E 18                                ld      e,24
 192+ 8BE2 01 D5 B5                             ld      bc,EnergyBar2Start
 193+ 8BE5 CD 91 8A                             call    DrawColourEBar
 194+ 8BE8 16 1F                                ld      d,31
 195+ 8BEA 1E 18                                ld      e,24
 196+ 8BEC 01 D5 BD                             ld      bc,EnergyBar1Start
 197+ 8BEF CD 91 8A                             call    DrawColourEBar
 198+ 8BF2 C9                                   ret
 199+ 8BF3
 200+ 8BF3              ScannerBottom           equ 190
 201+ 8BF3              ScannerTypeMissle       equ 2
 202+ 8BF3              ScannerXRangeOffset     equ $35
 203+ 8BF3              ScannerCenter           equ 127
 204+ 8BF3
 205+ 8BF3              ScannerDefault          equ 0
 206+ 8BF3              ScannerMissile          equ 2
 207+ 8BF3              ScannerStation          equ 4
 208+ 8BF3              ScannerEnemy            equ 6
 209+ 8BF3
 210+ 8BF3
 211+ 8BF3 00           SunXScaled              DB  0
 212+ 8BF4 00           SunYScaled              DB  0
 213+ 8BF5 00           SunZScaled              DB  0
 214+ 8BF6
 215+ 8BF6
 216+ 8BF6 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 216+ 8BFA 12 1F 80 E0
 217+ 8BFE C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 218+ 8C00
 219+ 8C00              GetShipColor:           MACRO
 220+ 8C00 ~                                    ld      a,(ShipTypeAddr)
 221+ 8C00 ~                                    sla     a                            ; as its byte pairs * 2
 222+ 8C00 ~                                    ld      hl,ScannerColourTable
 223+ 8C00 ~                                    add     hl,a
 224+ 8C00 ~                                    ld      a,(hl)
 225+ 8C00                                      ENDM
 226+ 8C00              GetShipColorBright:     MACRO
 227+ 8C00 ~                                    ld      a,(ShipTypeAddr)
 228+ 8C00 ~                                    sla     a                            ; as its byte pairs * 2
 229+ 8C00 ~                                    inc     a
 230+ 8C00 ~                                    ld      hl,ScannerColourTable
 231+ 8C00 ~                                    add     hl,a
 232+ 8C00 ~                                    ld      a,(hl)
 233+ 8C00                                      ENDM
 234+ 8C00
 235+ 8C00              Shift24BitScan:         MACRO   regHi, reglo
 236+ 8C00 ~                                    ld      hl,(regHi)
 237+ 8C00 ~                                    ld      b,h
 238+ 8C00 ~                                    ld      a,h
 239+ 8C00 ~                                    and     SignMask8Bit
 240+ 8C00 ~                                    ld      h,a
 241+ 8C00 ~                                    ld      a,(reglo)
 242+ 8C00 ~                                    sla     a
 243+ 8C00 ~                                    rl      l
 244+ 8C00 ~                                    rl      h
 245+ 8C00 ~                                    sla     a
 246+ 8C00 ~                                    rl      l
 247+ 8C00 ~                                    rl      h
 248+ 8C00 ~                                    sla     a
 249+ 8C00 ~                                    rl      l
 250+ 8C00 ~                                    rl      h
 251+ 8C00 ~                                    sla     a
 252+ 8C00 ~                                    rl      l
 253+ 8C00 ~                                    rl      h
 254+ 8C00 ~                                    sla     a
 255+ 8C00 ~                                    rl      l
 256+ 8C00 ~                                    rl      h
 257+ 8C00 ~                                    sla     a
 258+ 8C00 ~                                    rl      l
 259+ 8C00 ~                                    rl      h
 260+ 8C00                                      ENDM
 261+ 8C00
 262+ 8C00              SunShiftRight           MACRO   reglo, reghi, regsgn
 263+ 8C00 ~                                    ld      a,regsgn
 264+ 8C00 ~                                    srl     a
 265+ 8C00 ~                                    rr      reghi
 266+ 8C00 ~                                    rr      reglo
 267+ 8C00 ~                                    ld      regsgn,a
 268+ 8C00                                      ENDM
 269+ 8C00
 270+ 8C00              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 271+ 8C00              ;                        ld      a,(SBnKzsgn)
 272+ 8C00              ;                        push    af
 273+ 8C00              ;                        and     SignMask8Bit
 274+ 8C00              ;                        ld      iyl,a
 275+ 8C00              ;                        ld      hl,(SBnKxlo)
 276+ 8C00              ;                        ld      a,(SBnKxsgn)
 277+ 8C00              ;                        push    af
 278+ 8C00              ;                        and     SignMask8Bit
 279+ 8C00              ;                        ld      ixl,a
 280+ 8C00              ;                        ld      bc,(SBnKylo)
 281+ 8C00              ;                        ld      a,(SBnKysgn)
 282+ 8C00              ;                        and     SignMask8Bit
 283+ 8C00              ;                        push    af
 284+ 8C00              ;                        ld      iyh,a
 285+ 8C00              ;.ShiftLoop:             ld      a,iyh
 286+ 8C00              ;                        or      iyl
 287+ 8C00              ;                        or      ixl
 288+ 8C00              ;                        jr      z,.ShiftBit15
 289+ 8C00              ;.ShiftZ:                SunShiftRight iyl, d, e
 290+ 8C00              ;.ShiftX:                SunShiftRight ixl, h, l
 291+ 8C00              ;.ShiftY:                SunShiftRight ixh, b, c
 292+ 8C00              ;                        jr      .ShipLoop
 293+ 8C00              ;.ShiftBit15:            ld      a,iyh
 294+ 8C00              ;                        or      iyl
 295+ 8C00              ;                        or      ixl
 296+ 8C00              ;                        jr      z,.CompletedShift
 297+ 8C00              ;.ShiftZ:                SunShiftRight iyl, d, e
 298+ 8C00              ;.ShiftX:                SunShiftRight ixl, h, l
 299+ 8C00              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 300+ 8C00              ;.CompletedShift:        pop     af                          ; get ysgn
 301+ 8C00              ;                        and     SignOnly8Bit
 302+ 8C00              ;                        or      b
 303+ 8C00              ;                        ld      b,a
 304+ 8C00              ;                        pop     af                          ; get xsgn
 305+ 8C00              ;                        and     SignOnly8Bit
 306+ 8C00              ;                        or      h
 307+ 8C00              ;                        ld      h,a
 308+ 8C00              ;                        pop     af                          ; get zsgn
 309+ 8C00              ;                        and     SignOnly8Bit
 310+ 8C00              ;                        or      d
 311+ 8C00              ;                        ld      d,a
 312+ 8C00              ;                        ret
 313+ 8C00              ;
 314+ 8C00 ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 315+ 8C04 7A                                   ld      a,d                         ; .
 316+ 8C05 F5                                   push    af                          ; .
 317+ 8C06 E6 7F                                and     SignMask8Bit                ; .
 318+ 8C08 57                                   ld      d,a                         ; .
 319+ 8C09 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 320+ 8C0C 7C                                   ld      a,h                         ; .
 321+ 8C0D F5                                   push    af                          ; .
 322+ 8C0E E6 7F                                and     SignMask8Bit                ; .
 323+ 8C10 67                                   ld      h,a                         ; .
 324+ 8C11 ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 325+ 8C15 78                                   ld      a,b                         ; .
 326+ 8C16 F5                                   push    af                          ; .
 327+ 8C17 E6 7F                                and     SignMask8Bit                ; .
 328+ 8C19 47                                   ld      b,a                         ; .
 329+ 8C1A 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 330+ 8C1B B2                                   or      d                           ; .
 331+ 8C1C B4                                   or      h                           ; .
 332+ 8C1D 28 0E                                jr      z,.Shifted                  ; .
 333+ 8C1F                                      ShiftBCRight1                       ; .
 333+ 8C1F CB 38       >			   srl b
 333+ 8C21 CB 19       >			   rr  c
 334+ 8C23                                      ShiftHLRight1                       ; .
 334+ 8C23 CB 3C       >			   srl h
 334+ 8C25 CB 1D       >			   rr  l
 335+ 8C27                                      ShiftDERight1                       ; .
 335+ 8C27 CB 3A       >			   srl d
 335+ 8C29 CB 1B       >			   rr  e
 336+ 8C2B 18 ED                                jr      .ShiftLoop
 337+ 8C2D 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 338+ 8C2E B5                                   or      l                           ;
 339+ 8C2F B3                                   or      e                           ;
 340+ 8C30 E6 80                                and     $80                         ;
 341+ 8C32 28 0C                                jr      z,.NoAdditionalShift        ;
 342+ 8C34                                      ShiftBCRight1                       ; we want 7 bit
 342+ 8C34 CB 38       >			   srl b
 342+ 8C36 CB 19       >			   rr  c
 343+ 8C38                                      ShiftHLRight1                       ; to acommodate the sign
 343+ 8C38 CB 3C       >			   srl h
 343+ 8C3A CB 1D       >			   rr  l
 344+ 8C3C                                      ShiftDERight1                       ; .
 344+ 8C3C CB 3A       >			   srl d
 344+ 8C3E CB 1B       >			   rr  e
 345+ 8C40 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 346+ 8C41 E6 80                                and     SignOnly8Bit                ;
 347+ 8C43 47                                   ld      b,a                         ; bc = shifted signed Y
 348+ 8C44 F1                                   pop     af                          ; get xsgn
 349+ 8C45 E6 80                                and     SignOnly8Bit                ;
 350+ 8C47 67                                   ld      h,a                         ; hl = shifted signed X
 351+ 8C48 F1                                   pop     af                          ; get zsgn
 352+ 8C49 E6 80                                and     SignOnly8Bit                ;
 353+ 8C4B 57                                   ld      d,a                         ; de = shifted signed Z
 354+ 8C4C C9                                   ret
 355+ 8C4D
 356+ 8C4D ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 357+ 8C51 7A                                   ld      a,d                         ; .
 358+ 8C52 F5                                   push    af                          ; .
 359+ 8C53 E6 7F                                and     SignMask8Bit                ; .
 360+ 8C55 57                                   ld      d,a                         ; .
 361+ 8C56 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 362+ 8C59 7C                                   ld      a,h                         ; .
 363+ 8C5A F5                                   push    af                          ; .
 364+ 8C5B E6 7F                                and     SignMask8Bit                ; .
 365+ 8C5D 67                                   ld      h,a                         ; .
 366+ 8C5E ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 367+ 8C62 78                                   ld      a,b                         ; .
 368+ 8C63 F5                                   push    af                          ; .
 369+ 8C64 E6 7F                                and     SignMask8Bit                ; .
 370+ 8C66 47                                   ld      b,a                         ; .
 371+ 8C67 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 372+ 8C68 B2                                   or      d                           ; .
 373+ 8C69 B4                                   or      h                           ; .
 374+ 8C6A 28 0E                                jr      z,.Shifted                  ; .
 375+ 8C6C                                      ShiftBCRight1                       ; .
 375+ 8C6C CB 38       >			   srl b
 375+ 8C6E CB 19       >			   rr  c
 376+ 8C70                                      ShiftHLRight1                       ; .
 376+ 8C70 CB 3C       >			   srl h
 376+ 8C72 CB 1D       >			   rr  l
 377+ 8C74                                      ShiftDERight1                       ; .
 377+ 8C74 CB 3A       >			   srl d
 377+ 8C76 CB 1B       >			   rr  e
 378+ 8C78 18 ED                                jr      .ShiftLoop
 379+ 8C7A 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 380+ 8C7B B5                                   or      l                           ;
 381+ 8C7C B3                                   or      e                           ;
 382+ 8C7D E6 80                                and     $80                         ;
 383+ 8C7F 28 0C                                jr      z,.NoAdditionalShift        ;
 384+ 8C81                                      ShiftBCRight1                       ; we want 7 bit
 384+ 8C81 CB 38       >			   srl b
 384+ 8C83 CB 19       >			   rr  c
 385+ 8C85                                      ShiftHLRight1                       ; to acommodate the sign
 385+ 8C85 CB 3C       >			   srl h
 385+ 8C87 CB 1D       >			   rr  l
 386+ 8C89                                      ShiftDERight1                       ; .
 386+ 8C89 CB 3A       >			   srl d
 386+ 8C8B CB 1B       >			   rr  e
 387+ 8C8D F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 388+ 8C8E E6 80                                and     SignOnly8Bit                ;
 389+ 8C90 47                                   ld      b,a                         ; bc = shifted signed Y
 390+ 8C91 F1                                   pop     af                          ; get xsgn
 391+ 8C92 E6 80                                and     SignOnly8Bit                ;
 392+ 8C94 67                                   ld      h,a                         ; hl = shifted signed X
 393+ 8C95 F1                                   pop     af                          ; get zsgn
 394+ 8C96 E6 80                                and     SignOnly8Bit                ;
 395+ 8C98 57                                   ld      d,a                         ; de = shifted signed Z
 396+ 8C99 C9                                   ret
 397+ 8C9A
 398+ 8C9A              ;compass sun
 399+ 8C9A              ;            if value is still 24 bit
 400+ 8C9A              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 401+ 8C9A              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 402+ 8C9A              ;                tempk39 = OR 3 low bytes
 403+ 8C9A              ;                tempkA = OR 3 high bytes
 404+ 8C9A              ;                 TAL2:    repeat
 405+ 8C9A              ;                             asl tempka tempk39
 406+ 8C9A              ;                             exit if carry set
 407+ 8C9A              ;                             x coord << 1
 408+ 8C9A              ;                             y corrd << 1
 409+ 8C9A              ;                             z coord << 1
 410+ 8C9A              ;                          until carry clear
 411+ 8C9A              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 412+ 8C9A              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 413+ 8C9A              ;                          RQ = AP = X ^ 2
 414+ 8C9A              ;                          TP = AP = Y ^ 2
 415+ 8C9A              ;                          RQ = RQ + TP
 416+ 8C9A              ;                          TP = AP = Z ^ 2
 417+ 8C9A              ;                          RQ = RQ + TP
 418+ 8C9A              ;                          Q = SQRT (RQ)
 419+ 8C9A              ;                          for each coord - A = A/Q * 3/ 8
 420+ 8C9A              ;
 421+ 8C9A              ;
 422+ 8C9A
 423+ 8C9A ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 424+ 8C9E 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 425+ 8CA1 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 426+ 8CA5 7A                                   ld      a,d
 427+ 8CA6 E6 80                                and     SignOnly8Bit
 428+ 8CA8 CB 3F                                srl     a
 429+ 8CAA FD 6F                                ld      iyl,a
 430+ 8CAC 7C                                   ld      a,h
 431+ 8CAD E6 80                                and     SignOnly8Bit
 432+ 8CAF FD B5                                or      iyl
 433+ 8CB1 CB 3F                                srl     a
 434+ 8CB3 78                                   ld      a,b
 435+ 8CB4 E6 80                                and     SignOnly8Bit
 436+ 8CB6 FD B5                                or      iyl
 437+ 8CB8 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 438+ 8CBA                                      ClearSignBit d
 438+ 8CBA 7A          >                        ld      a,d
 438+ 8CBB E6 7F       >                        and     SignMask8Bit
 438+ 8CBD 57          >                        ld      d,a
 439+ 8CBE                                      ClearSignBit h
 439+ 8CBE 7C          >                        ld      a,h
 439+ 8CBF E6 7F       >                        and     SignMask8Bit
 439+ 8CC1 67          >                        ld      h,a
 440+ 8CC2                                      ClearSignBit b
 440+ 8CC2 78          >                        ld      a,b
 440+ 8CC3 E6 7F       >                        and     SignMask8Bit
 440+ 8CC5 47          >                        ld      b,a
 441+ 8CC6 78                                   ld      a,b
 442+ 8CC7 B3                                   or      e
 443+ 8CC8 B4                                   or      h
 444+ 8CC9 B5                                   or      l
 445+ 8CCA B0                                   or      b
 446+ 8CCB B1                                   or      c
 447+ 8CCC 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 448+ 8CCE 7A                                   ld      a,d
 449+ 8CCF B3                                   or      e
 450+ 8CD0 B4                                   or      h
 451+ 8CD1 CB 27                                sla     a
 452+ 8CD3 38 15                                jr      c,.DoneCalc
 453+ 8CD5 28 13                                jr      z,.DoneCalc
 454+ 8CD7              .UpscaleLoop:           ShiftDELeft1
 454+ 8CD7 CB 23       >			   sla e
 454+ 8CD9 CB 12       >			   rl  d
 455+ 8CDB                                      ShiftHLLeft1
 455+ 8CDB CB 25       >			   sla l
 455+ 8CDD CB 14       >			   rl  h
 456+ 8CDF                                      ShiftBCLeft1
 456+ 8CDF CB 21       >			   sla c
 456+ 8CE1 CB 10       >			   rl  b
 457+ 8CE3 CB 27                                sla     a
 458+ 8CE5 38 03                                jr      c,.DoneCalc
 459+ 8CE7 C3 D7 8C                             jp      .UpscaleLoop
 460+ 8CEA              .DoneCalc               ShiftDERight1
 460+ 8CEA CB 3A       >			   srl d
 460+ 8CEC CB 1B       >			   rr  e
 461+ 8CEE                                      ShiftHLRight1
 461+ 8CEE CB 3C       >			   srl h
 461+ 8CF0 CB 1D       >			   rr  l
 462+ 8CF2                                      ShiftBCRight1
 462+ 8CF2 CB 38       >			   srl b
 462+ 8CF4 CB 19       >			   rr  c
 463+ 8CF6 5A           .NowSetResultInLowByte: ld      e,d
 464+ 8CF7 6C                                   ld      l,h
 465+ 8CF8 48                                   ld      c,b
 466+ 8CF9 FD 7D                                ld      a,iyl
 467+ 8CFB E6 80                                and     SignOnly8Bit
 468+ 8CFD 47                                   ld      b,a
 469+ 8CFE FD 7D                                ld      a,iyl
 470+ 8D00 CB 27                                sla     a
 471+ 8D02 FD 6F                                ld      iyl,a
 472+ 8D04 E6 80                                and     SignOnly8Bit
 473+ 8D06 67                                   ld      h,a
 474+ 8D07 FD 7D                                ld      a,iyl
 475+ 8D09 CB 27                                sla     a
 476+ 8D0B E6 80                                and     SignOnly8Bit
 477+ 8D0D 57                                   ld      d,a
 478+ 8D0E C9                                   ret
 479+ 8D0F 3E 01        .Setto1:                ld      a,1
 480+ 8D11 4F                                   ld      c,a
 481+ 8D12 5F                                   ld      e,a
 482+ 8D13 6F                                   ld      l,a
 483+ 8D14 FD 7D                                ld      a,iyl
 484+ 8D16 CB 27                                sla     a
 485+ 8D18 CB 27                                sla     a
 486+ 8D1A E6 80                                and     SignOnly8Bit
 487+ 8D1C B3                                   or      e
 488+ 8D1D 5F                                   ld      e,a
 489+ 8D1E C9                                   ret
 490+ 8D1F
 491+ 8D1F
 492+ 8D1F              UpdateCompassSun:       MMUSelectSun
 492+ 8D1F ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 493+ 8D23 CD 4D 8C                             call    ScaleSunPos                 ; get as 7 bit signed
 494+ 8D26 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 495+ 8D29 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 496+ 8D2A 59                                   ld      e,c                         ; .
 497+ 8D2B ED 30                                mul                                 ; .
 498+ 8D2D 42 4B                                ld      bc,de                       ; .
 499+ 8D2F 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 500+ 8D30 5D                                   ld      e,l                         ; .
 501+ 8D31 ED 30                                mul                                 ; .
 502+ 8D33 EB                                   ex      de,hl                       ; .
 503+ 8D34 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 504+ 8D35 53                                   ld      d,e                         ; de = z ^
 505+ 8D36 ED 30                                mul                                 ; .
 506+ 8D38 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 507+ 8D39 09                                   add     hl,bc                       ; .
 508+ 8D3A EB                                   ex      de,hl                       ; .
 509+ 8D3B CD 5C AF                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 510+ 8D3E                                      ; if h <> 0 then more difficult
 511+ 8D3E 55                                   ld      d,l                         ; iyl = q
 512+ 8D3F FD 6A                                ld      iyl,d                       ; .
 513+ 8D41 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 514+ 8D42 7C                                   ld      a,h                         ; c = sign
 515+ 8D43 E6 80                                and     SignOnly8Bit                ; .
 516+ 8D45 4F                                   ld      c,a                         ; .
 517+ 8D46 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 518+ 8D47 7D                                   ld      a,l                         ; a = 8 bit abs z
 519+ 8D48 CD C1 B4                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 520+ 8D4B 5F                                   ld      e,a                         ; .
 521+ 8D4C                                      EDiv10Inline                        ; a = e / 10
 521+ 8D4C 16 00       >                        ld      d,0
 521+ 8D4E 62 6B       >                        ld      hl,de
 521+ 8D50 29          >                        add     hl,hl
 521+ 8D51 19          >                        add     hl,de
 521+ 8D52 29          >                        add     hl,hl
 521+ 8D53 29          >                        add     hl,hl
 521+ 8D54 19          >                        add     hl,de
 521+ 8D55 29          >                        add     hl,hl
 522+ 8D56 7C                                   ld      a,h                         ; .
 523+ 8D57 C1                                   pop     bc                          ; +1 retrieve bc
 524+ 8D58 FE 00                                cp      0                           ; if result in h was 0 then done
 525+ 8D5A 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 526+ 8D5C CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 527+ 8D5E 28 02                                jr      z,.DoneNormX
 528+ 8D60 ED 44                                neg
 529+ 8D62 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 530+ 8D64 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 531+ 8D66 E1                                   pop     hl                          ; +0 hl y scaled
 532+ 8D67 7C                                   ld      a,h                         ; c = sign
 533+ 8D68 E6 80                                and     SignOnly8Bit                ; .
 534+ 8D6A 4F                                   ld      c,a                         ; .
 535+ 8D6B C5                                   push    bc                          ; +1 save sign to stack
 536+ 8D6C 7D                                   ld      a,l                         ; a = 8 bit signed z
 537+ 8D6D CD C1 B4                             call    AequAdivQmul96ABS           ; .
 538+ 8D70 5F                                   ld      e,a                         ; a = e / 10
 539+ 8D71                                      EDiv10Inline                        ; .
 539+ 8D71 16 00       >                        ld      d,0
 539+ 8D73 62 6B       >                        ld      hl,de
 539+ 8D75 29          >                        add     hl,hl
 539+ 8D76 19          >                        add     hl,de
 539+ 8D77 29          >                        add     hl,hl
 539+ 8D78 29          >                        add     hl,hl
 539+ 8D79 19          >                        add     hl,de
 539+ 8D7A 29          >                        add     hl,hl
 540+ 8D7B 7C                                   ld      a,h                         ; retrieve sign
 541+ 8D7C C1                                   pop     bc                          ; +1 retrieve sign
 542+ 8D7D FE 00                                cp      0
 543+ 8D7F 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 544+ 8D81 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 545+ 8D83 28 02                                jr      z,.DoneNormY
 546+ 8D85 ED 44                                neg                                 ;
 547+ 8D87 47           .DoneNormY:             ld      b,a                         ; result from Y
 548+ 8D88 DD 4C                                ld      c,ixh                       ; x = saved X
 549+ 8D8A              .SetSprite:             MMUSelectSpriteBank
 549+ 8D8A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 550+ 8D8E CD 05 E1                             call    compass_sun_move
 551+ 8D91 DD 7D                                ld      a,ixl
 552+ 8D93 CB 7F                                bit     7,a
 553+ 8D95 20 04                                jr      nz,.SunBehind
 554+ 8D97 CD 8C E1     .SunInfront:            call    show_compass_sun_infront
 555+ 8D9A C9                                   ret
 556+ 8D9B CD 97 E1     .SunBehind:             call    show_compass_sun_behind
 557+ 8D9E C9                                   ret
 558+ 8D9F
 559+ 8D9F
 560+ 8D9F              UpdateCompassPlanet:    MMUSelectPlanet
 560+ 8D9F ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 561+ 8DA3 CD 00 8C                             call    ScalePlanetPos              ; get as 7 bit signed
 562+ 8DA6 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 563+ 8DA9 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 564+ 8DAA 59                                   ld      e,c                         ; .
 565+ 8DAB ED 30                                mul                                 ; .
 566+ 8DAD 42 4B                                ld      bc,de                       ; .
 567+ 8DAF 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 568+ 8DB0 5D                                   ld      e,l                         ; .
 569+ 8DB1 ED 30                                mul                                 ; .
 570+ 8DB3 EB                                   ex      de,hl                       ; .
 571+ 8DB4 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 572+ 8DB5 53                                   ld      d,e                         ; de = z ^
 573+ 8DB6 ED 30                                mul                                 ; .
 574+ 8DB8 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 575+ 8DB9 09                                   add     hl,bc
 576+ 8DBA EB                                   ex      de,hl
 577+ 8DBB CD 5C AF                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 578+ 8DBE                                      ; if h <> 0 then more difficult
 579+ 8DBE 55                                   ld      d,l                         ; iyl = q
 580+ 8DBF FD 6A                                ld      iyl,d                       ; .
 581+ 8DC1 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 582+ 8DC2 7C                                   ld      a,h                         ; c = sign
 583+ 8DC3 E6 80                                and     SignOnly8Bit                ; .
 584+ 8DC5 4F                                   ld      c,a                         ; .
 585+ 8DC6 C5                                   push    bc                          ; save sign to stack
 586+ 8DC7 7D                                   ld      a,l                         ; a = 8 bit abs z
 587+ 8DC8 CD C1 B4                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 588+ 8DCB 5F                                   ld      e,a                         ; .
 589+ 8DCC                                      EDiv10Inline                        ; a = e / 10
 589+ 8DCC 16 00       >                        ld      d,0
 589+ 8DCE 62 6B       >                        ld      hl,de
 589+ 8DD0 29          >                        add     hl,hl
 589+ 8DD1 19          >                        add     hl,de
 589+ 8DD2 29          >                        add     hl,hl
 589+ 8DD3 29          >                        add     hl,hl
 589+ 8DD4 19          >                        add     hl,de
 589+ 8DD5 29          >                        add     hl,hl
 590+ 8DD6 7C                                   ld      a,h                         ; .
 591+ 8DD7 C1                                   pop     bc                          ; retrieve sign
 592+ 8DD8 FE 00                                cp      0
 593+ 8DDA 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 594+ 8DDC CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 595+ 8DDE 28 02                                jr      z,.DoneNormX
 596+ 8DE0 ED 44                                neg
 597+ 8DE2 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 598+ 8DE4 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 599+ 8DE6 E1                                   pop     hl                          ; hl y scaled
 600+ 8DE7 7C                                   ld      a,h                         ; c = sign
 601+ 8DE8 E6 80                                and     SignOnly8Bit                ; .
 602+ 8DEA 4F                                   ld      c,a                         ; .
 603+ 8DEB C5                                   push    bc                          ; save sign to stack
 604+ 8DEC 7D                                   ld      a,l                         ; a = 8 bit signed z
 605+ 8DED CD C1 B4                             call    AequAdivQmul96ABS           ; .
 606+ 8DF0 5F                                   ld      e,a                         ; a = e / 10
 607+ 8DF1                                      EDiv10Inline                        ; .
 607+ 8DF1 16 00       >                        ld      d,0
 607+ 8DF3 62 6B       >                        ld      hl,de
 607+ 8DF5 29          >                        add     hl,hl
 607+ 8DF6 19          >                        add     hl,de
 607+ 8DF7 29          >                        add     hl,hl
 607+ 8DF8 29          >                        add     hl,hl
 607+ 8DF9 19          >                        add     hl,de
 607+ 8DFA 29          >                        add     hl,hl
 608+ 8DFB 7C                                   ld      a,h                         ; retrieve sign
 609+ 8DFC C1                                   pop     bc                          ; retrieve sign
 610+ 8DFD FE 00                                cp      0
 611+ 8DFF 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 612+ 8E01 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 613+ 8E03 28 02                                jr      z,.DoneNormY
 614+ 8E05 ED 44                                neg                                 ;
 615+ 8E07 47           .DoneNormY:             ld      b,a                         ; result from Y
 616+ 8E08 DD 4C                                ld      c,ixh                       ; x = saved X
 617+ 8E0A              .SetSprite:             MMUSelectSpriteBank
 617+ 8E0A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 618+ 8E0E CD 17 E1                             call    compass_station_move
 619+ 8E11 DD 7D                                ld      a,ixl
 620+ 8E13 CB 7F                                bit     7,a
 621+ 8E15 20 04                                jr      nz,.PlanetBehind
 622+ 8E17 CD A2 E1     .PlanetInfront:         call    show_compass_station_infront
 623+ 8E1A C9                                   ret
 624+ 8E1B CD AD E1     .PlanetBehind:          call    show_compass_station_behind
 625+ 8E1E C9                                   ret
 626+ 8E1F
 627+ 8E1F              UpdatePlanetSun:        MMUSelectPlanet
 627+ 8E1F ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 628+ 8E23                                      Shift24BitScan  PBnKyhi, PBnKylo
 628+ 8E23 2A 14 C0    >                        ld      hl,(PBnKyhi)
 628+ 8E26 44          >                        ld      b,h
 628+ 8E27 7C          >                        ld      a,h
 628+ 8E28 E6 7F       >                        and     SignMask8Bit
 628+ 8E2A 67          >                        ld      h,a
 628+ 8E2B 3A 13 C0    >                        ld      a,(PBnKylo)
 628+ 8E2E CB 27       >                        sla     a
 628+ 8E30 CB 15       >                        rl      l
 628+ 8E32 CB 14       >                        rl      h
 628+ 8E34 CB 27       >                        sla     a
 628+ 8E36 CB 15       >                        rl      l
 628+ 8E38 CB 14       >                        rl      h
 628+ 8E3A CB 27       >                        sla     a
 628+ 8E3C CB 15       >                        rl      l
 628+ 8E3E CB 14       >                        rl      h
 628+ 8E40 CB 27       >                        sla     a
 628+ 8E42 CB 15       >                        rl      l
 628+ 8E44 CB 14       >                        rl      h
 628+ 8E46 CB 27       >                        sla     a
 628+ 8E48 CB 15       >                        rl      l
 628+ 8E4A CB 14       >                        rl      h
 628+ 8E4C CB 27       >                        sla     a
 628+ 8E4E CB 15       >                        rl      l
 628+ 8E50 CB 14       >                        rl      h
 629+ 8E52 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 630+ 8E55 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 631+ 8E58 B6                                   or      (hl)                        ; then its too far away
 632+ 8E59 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 633+ 8E5C B6                                   or      (hl)                        ; so rely on the compass
 634+ 8E5D E6 7F                                and     SignMask8Bit                ;
 635+ 8E5F C0                                   ret     nz                          ;
 636+ 8E60 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 637+ 8E63 ED 5B 10 C0                          ld      de,(PBnKxlo)
 638+ 8E67 ED 4B 13 C0                          ld      bc,(PBnKylo)
 639+ 8E6B 7C                                   ld      a,h
 640+ 8E6C B2                                   or      d
 641+ 8E6D B0                                   or      b
 642+ 8E6E E6 C0                                and     %11000000
 643+ 8E70 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 644+ 8E71 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 645+ 8E74 CB 7F                                bit     7,a
 646+ 8E76 28 04                                jr      z,.absXHi
 647+ 8E78                                      NegD
 647+ 8E78 7A          >                    ld      a,d
 647+ 8E79 ED 44       >                    neg
 647+ 8E7B 57          >                    ld      d,a
 648+ 8E7C 7A           .absXHi:                ld      a,d
 649+ 8E7D C6 80                                add     ScannerX
 650+ 8E7F DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 651+ 8E81 CB 3C        .ProcessZCoord:         srl     h
 652+ 8E83 CB 3C                                srl     h
 653+ 8E85 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 654+ 8E88 CB 7F                                bit     7,a
 655+ 8E8A 28 04                                jr      z,.absZHi
 656+ 8E8C                                      NegH
 656+ 8E8C 7C          >                    ld      a,h
 656+ 8E8D ED 44       >                    neg
 656+ 8E8F 67          >                    ld      h,a
 657+ 8E90 3E AB        .absZHi:                ld      a,ScannerY
 658+ 8E92 94                                   sub     h
 659+ 8E93 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 660+ 8E95 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 661+ 8E97 20 0B                                jr      nz,.StickHasLength
 662+ 8E99 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 663+ 8E9B FD 6F                                ld      iyl,a
 664+ 8E9D                                      MMUSelectLayer2
 664+ 8E9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 665+ 8EA1 C3 CC 8E                             jp      .NoStick
 666+ 8EA4 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 667+ 8EA7 CB 7F                                bit     7,a
 668+ 8EA9 28 04                                jr      z,.absYHi
 669+ 8EAB                                      NegB
 669+ 8EAB 78          >                    ld      a,b
 669+ 8EAC ED 44       >                    neg
 669+ 8EAE 47          >                    ld      b,a
 670+ 8EAF FD 7C        .absYHi:                ld      a,iyh
 671+ 8EB1 90           .SetStickPos:           sub     b
 672+ 8EB2                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 672+ 8EB2 FE BE       >                        cp      ScannerBottom
 672+ 8EB4 DA B9 8E    >                        jp		c, .StickOnScreen
 673+ 8EB7 3E BE                                ld      a,ScannerBottom
 674+ 8EB9 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 675+ 8EBB DD 6F                                ld      ixl,a
 676+ 8EBD FD 44                                ld      b,iyh                       ; from row
 677+ 8EBF DD 4C                                ld      c,ixh                       ; from col
 678+ 8EC1 FD 55                                ld      d,iyl                       ; to row
 679+ 8EC3 1E B4                                ld      e,L2SunScanner
 680+ 8EC5                                      MMUSelectLayer2
 680+ 8EC5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 681+ 8EC9 CD 35 E3                             call    l2_draw_vert_line_to
 682+ 8ECC FD 45        .NoStick:               ld      b,iyl                       ; row
 683+ 8ECE DD 4C                                ld      c,ixh                       ; col
 684+ 8ED0 3E FC                                ld      a,L2SunScannerBright
 685+ 8ED2 CD 29 E1                             call    l2_plot_pixel
 686+ 8ED5 FD 45                                ld      b,iyl
 687+ 8ED7 DD 4C                                ld      c,ixh
 688+ 8ED9 0C                                   inc     c
 689+ 8EDA 3E FC                                ld      a,L2SunScannerBright
 690+ 8EDC CD 29 E1                             call    l2_plot_pixel
 691+ 8EDF C9                                   ret
 692+ 8EE0
 693+ 8EE0              UpdateCompassStation:   MMUSelectShipBankN 0
 693+ 8EE0 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 694+ 8EE4
 695+ 8EE4 CD 4D 8C                             call    ScaleSunPos                 ; get as 7 bit signed
 696+ 8EE7 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 697+ 8EEB 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 698+ 8EEC 59                                   ld      e,c                         ; .
 699+ 8EED ED 30                                mul                                 ; .
 700+ 8EEF 42 4B                                ld      bc,de                       ; .
 701+ 8EF1 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 702+ 8EF2 5D                                   ld      e,l                         ; .
 703+ 8EF3 ED 30                                mul                                 ; .
 704+ 8EF5 EB                                   ex      de,hl                       ; .
 705+ 8EF6 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 706+ 8EF7 53                                   ld      d,e                         ; de = z ^
 707+ 8EF8 ED 30                                mul                                 ; .
 708+ 8EFA 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 709+ 8EFB 09                                   add     hl,bc
 710+ 8EFC EB                                   ex      de,hl
 711+ 8EFD CD 5C AF                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 712+ 8F00                                      ; if h <> 0 then more difficult
 713+ 8F00 55                                   ld      d,l                         ; iyl = q
 714+ 8F01 FD 6A                                ld      iyl,d                       ; .
 715+ 8F03 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 716+ 8F04 7C                                   ld      a,h                         ; c = sign
 717+ 8F05 E6 80                                and     SignOnly8Bit                ; .
 718+ 8F07 4F                                   ld      c,a                         ; .
 719+ 8F08 C5                                   push    bc                          ; save sign to stack
 720+ 8F09 7D                                   ld      a,l                         ; a = 8 bit abs z
 721+ 8F0A CD C1 B4                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 722+ 8F0D 5F                                   ld      e,a                         ; .
 723+ 8F0E                                      EDiv10Inline                        ; a = e / 10
 723+ 8F0E 16 00       >                        ld      d,0
 723+ 8F10 62 6B       >                        ld      hl,de
 723+ 8F12 29          >                        add     hl,hl
 723+ 8F13 19          >                        add     hl,de
 723+ 8F14 29          >                        add     hl,hl
 723+ 8F15 29          >                        add     hl,hl
 723+ 8F16 19          >                        add     hl,de
 723+ 8F17 29          >                        add     hl,hl
 724+ 8F18 7C                                   ld      a,h                         ; .
 725+ 8F19 C1                                   pop     bc                          ; retrieve sign
 726+ 8F1A FE 00                                cp      0
 727+ 8F1C 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 728+ 8F1E CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 729+ 8F20 28 02                                jr      z,.DoneNormX
 730+ 8F22 ED 44                                neg
 731+ 8F24 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 732+ 8F26 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 733+ 8F28 E1                                   pop     hl                          ; hl z scaled
 734+ 8F29 7C                                   ld      a,h                         ; c = sign
 735+ 8F2A E6 80                                and     SignOnly8Bit                ; .
 736+ 8F2C 4F                                   ld      c,a                         ; .
 737+ 8F2D C5                                   push    bc                          ; save sign to stack
 738+ 8F2E 7D                                   ld      a,l                         ; e = a /q * 96
 739+ 8F2F CD C1 B4                             call    AequAdivQmul96ABS              ; .
 740+ 8F32 5F                                   ld      e,a                         ; a = e / 10
 741+ 8F33                                      EDiv10Inline                        ; .
 741+ 8F33 16 00       >                        ld      d,0
 741+ 8F35 62 6B       >                        ld      hl,de
 741+ 8F37 29          >                        add     hl,hl
 741+ 8F38 19          >                        add     hl,de
 741+ 8F39 29          >                        add     hl,hl
 741+ 8F3A 29          >                        add     hl,hl
 741+ 8F3B 19          >                        add     hl,de
 741+ 8F3C 29          >                        add     hl,hl
 742+ 8F3D 7C                                   ld      a,h                         ; retrieve sign
 743+ 8F3E C1                                   pop     bc                          ; retrieve sign
 744+ 8F3F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 745+ 8F41 28 02                                jr      z,.DoneNormZ
 746+ 8F43 ED 44                                neg
 747+ 8F45 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 748+ 8F47 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 749+ 8F49 E1                                   pop     hl                          ; hl y scaled
 750+ 8F4A 7C                                   ld      a,h                         ; c = sign
 751+ 8F4B E6 80                                and     SignOnly8Bit                ; .
 752+ 8F4D 4F                                   ld      c,a                         ; .
 753+ 8F4E C5                                   push    bc                          ; save sign to stack
 754+ 8F4F 7D                                   ld      a,l                         ; a = 8 bit signed z
 755+ 8F50 CD C1 B4                             call    AequAdivQmul96ABS              ; .
 756+ 8F53 5F                                   ld      e,a                         ; a = e / 10
 757+ 8F54                                      EDiv10Inline                        ; .
 757+ 8F54 16 00       >                        ld      d,0
 757+ 8F56 62 6B       >                        ld      hl,de
 757+ 8F58 29          >                        add     hl,hl
 757+ 8F59 19          >                        add     hl,de
 757+ 8F5A 29          >                        add     hl,hl
 757+ 8F5B 29          >                        add     hl,hl
 757+ 8F5C 19          >                        add     hl,de
 757+ 8F5D 29          >                        add     hl,hl
 758+ 8F5E 7C                                   ld      a,h                         ; retrieve sign
 759+ 8F5F C1                                   pop     bc                          ; retrieve sign
 760+ 8F60 FE 00                                cp      0
 761+ 8F62 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 762+ 8F64 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 763+ 8F66 28 02                                jr      z,.DoneNormY
 764+ 8F68 ED 44                                neg
 765+ 8F6A 47           .DoneNormY:             ld      b,a                       ; .
 766+ 8F6B DD 4C                                ld      c,ixh
 767+ 8F6D              .SetSprite:             MMUSelectSpriteBank
 767+ 8F6D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 768+ 8F71 CD 05 E1                             call    compass_sun_move
 769+ 8F74 DD 7D                                ld      a,ixl
 770+ 8F76 CB 7F                                bit     7,a
 771+ 8F78 20 04                                jr      nz,.SunBehind
 772+ 8F7A CD 8C E1     .SunInfront:            call    show_compass_sun_infront
 773+ 8F7D C9                                   ret
 774+ 8F7E CD 97 E1     .SunBehind:             call    show_compass_sun_behind
 775+ 8F81 C9                                   ret
 776+ 8F82
 777+ 8F82
 778+ 8F82              UpdateScannerSun:       MMUSelectSun
 778+ 8F82 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 779+ 8F86                                      Shift24BitScan  SBnKyhi, SBnKylo
 779+ 8F86 2A 14 C0    >                        ld      hl,(SBnKyhi)
 779+ 8F89 44          >                        ld      b,h
 779+ 8F8A 7C          >                        ld      a,h
 779+ 8F8B E6 7F       >                        and     SignMask8Bit
 779+ 8F8D 67          >                        ld      h,a
 779+ 8F8E 3A 13 C0    >                        ld      a,(SBnKylo)
 779+ 8F91 CB 27       >                        sla     a
 779+ 8F93 CB 15       >                        rl      l
 779+ 8F95 CB 14       >                        rl      h
 779+ 8F97 CB 27       >                        sla     a
 779+ 8F99 CB 15       >                        rl      l
 779+ 8F9B CB 14       >                        rl      h
 779+ 8F9D CB 27       >                        sla     a
 779+ 8F9F CB 15       >                        rl      l
 779+ 8FA1 CB 14       >                        rl      h
 779+ 8FA3 CB 27       >                        sla     a
 779+ 8FA5 CB 15       >                        rl      l
 779+ 8FA7 CB 14       >                        rl      h
 779+ 8FA9 CB 27       >                        sla     a
 779+ 8FAB CB 15       >                        rl      l
 779+ 8FAD CB 14       >                        rl      h
 779+ 8FAF CB 27       >                        sla     a
 779+ 8FB1 CB 15       >                        rl      l
 779+ 8FB3 CB 14       >                        rl      h
 780+ 8FB5 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 781+ 8FB8 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 782+ 8FBB B6                                   or      (hl)                        ; then its too far away
 783+ 8FBC 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 784+ 8FBF B6                                   or      (hl)                        ; so rely on the compass
 785+ 8FC0 E6 7F                                and     SignMask8Bit                ;
 786+ 8FC2 C0                                   ret     nz                          ;
 787+ 8FC3 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 788+ 8FC6 ED 5B 10 C0                          ld      de,(SBnKxlo)
 789+ 8FCA ED 4B 13 C0                          ld      bc,(SBnKylo)
 790+ 8FCE 7C                                   ld      a,h
 791+ 8FCF B2                                   or      d
 792+ 8FD0 B0                                   or      b
 793+ 8FD1 E6 C0                                and     %11000000
 794+ 8FD3 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 795+ 8FD4 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 796+ 8FD7 CB 7F                                bit     7,a
 797+ 8FD9 28 04                                jr      z,.absXHi
 798+ 8FDB                                      NegD
 798+ 8FDB 7A          >                    ld      a,d
 798+ 8FDC ED 44       >                    neg
 798+ 8FDE 57          >                    ld      d,a
 799+ 8FDF 7A           .absXHi:                ld      a,d
 800+ 8FE0 C6 80                                add     ScannerX
 801+ 8FE2 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 802+ 8FE4 CB 3C        .ProcessZCoord:         srl     h
 803+ 8FE6 CB 3C                                srl     h
 804+ 8FE8 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 805+ 8FEB CB 7F                                bit     7,a
 806+ 8FED 28 04                                jr      z,.absZHi
 807+ 8FEF                                      NegH
 807+ 8FEF 7C          >                    ld      a,h
 807+ 8FF0 ED 44       >                    neg
 807+ 8FF2 67          >                    ld      h,a
 808+ 8FF3 3E AB        .absZHi:                ld      a,ScannerY
 809+ 8FF5 94                                   sub     h
 810+ 8FF6 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 811+ 8FF8 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 812+ 8FFA 20 0B                                jr      nz,.StickHasLength
 813+ 8FFC FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 814+ 8FFE FD 6F                                ld      iyl,a
 815+ 9000                                      MMUSelectLayer2
 815+ 9000 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 816+ 9004 C3 2F 90                             jp      .NoStick
 817+ 9007 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 818+ 900A CB 7F                                bit     7,a
 819+ 900C 28 04                                jr      z,.absYHi
 820+ 900E                                      NegB
 820+ 900E 78          >                    ld      a,b
 820+ 900F ED 44       >                    neg
 820+ 9011 47          >                    ld      b,a
 821+ 9012 FD 7C        .absYHi:                ld      a,iyh
 822+ 9014 90           .SetStickPos:           sub     b
 823+ 9015                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 823+ 9015 FE BE       >                        cp      ScannerBottom
 823+ 9017 DA 1C 90    >                        jp		c, .StickOnScreen
 824+ 901A 3E BE                                ld      a,ScannerBottom
 825+ 901C FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 826+ 901E DD 6F                                ld      ixl,a
 827+ 9020 FD 44                                ld      b,iyh                       ; from row
 828+ 9022 DD 4C                                ld      c,ixh                       ; from col
 829+ 9024 FD 55                                ld      d,iyl                       ; to row
 830+ 9026 1E B4                                ld      e,L2SunScanner
 831+ 9028                                      MMUSelectLayer2
 831+ 9028 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 832+ 902C CD 35 E3                             call    l2_draw_vert_line_to
 833+ 902F FD 45        .NoStick:               ld      b,iyl                       ; row
 834+ 9031 DD 4C                                ld      c,ixh                       ; col
 835+ 9033 3E FC                                ld      a,L2SunScannerBright
 836+ 9035 CD 29 E1                             call    l2_plot_pixel
 837+ 9038 FD 45                                ld      b,iyl
 838+ 903A DD 4C                                ld      c,ixh
 839+ 903C 0C                                   inc     c
 840+ 903D 3E FC                                ld      a,L2SunScannerBright
 841+ 903F CD 29 E1                             call    l2_plot_pixel
 842+ 9042 C9                                   ret
 843+ 9043
 844+ 9043              ; This will do a planet update if we are not in space station range
 845+ 9043              UpdateScannerPlanet:    MMUSelectPlanet
 845+ 9043 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 846+ 9047                                      Shift24BitScan  PBnKyhi, PBnKylo
 846+ 9047 2A 14 C0    >                        ld      hl,(PBnKyhi)
 846+ 904A 44          >                        ld      b,h
 846+ 904B 7C          >                        ld      a,h
 846+ 904C E6 7F       >                        and     SignMask8Bit
 846+ 904E 67          >                        ld      h,a
 846+ 904F 3A 13 C0    >                        ld      a,(PBnKylo)
 846+ 9052 CB 27       >                        sla     a
 846+ 9054 CB 15       >                        rl      l
 846+ 9056 CB 14       >                        rl      h
 846+ 9058 CB 27       >                        sla     a
 846+ 905A CB 15       >                        rl      l
 846+ 905C CB 14       >                        rl      h
 846+ 905E CB 27       >                        sla     a
 846+ 9060 CB 15       >                        rl      l
 846+ 9062 CB 14       >                        rl      h
 846+ 9064 CB 27       >                        sla     a
 846+ 9066 CB 15       >                        rl      l
 846+ 9068 CB 14       >                        rl      h
 846+ 906A CB 27       >                        sla     a
 846+ 906C CB 15       >                        rl      l
 846+ 906E CB 14       >                        rl      h
 846+ 9070 CB 27       >                        sla     a
 846+ 9072 CB 15       >                        rl      l
 846+ 9074 CB 14       >                        rl      h
 847+ 9076 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 848+ 9079 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 849+ 907C B6                                   or      (hl)                        ; then its too far away
 850+ 907D 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 851+ 9080 B6                                   or      (hl)                        ; so rely on the compass
 852+ 9081 E6 7F                                and     SignMask8Bit                ;
 853+ 9083 C0                                   ret     nz                          ;
 854+ 9084 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 855+ 9087 ED 5B 10 C0                          ld      de,(PBnKxlo)
 856+ 908B ED 4B 13 C0                          ld      bc,(PBnKylo)
 857+ 908F 7C                                   ld      a,h
 858+ 9090 B2                                   or      d
 859+ 9091 B0                                   or      b
 860+ 9092 E6 C0                                and     %11000000
 861+ 9094 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 862+ 9095 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 863+ 9098 CB 7F                                bit     7,a
 864+ 909A 28 04                                jr      z,.absXHi
 865+ 909C                                      NegD
 865+ 909C 7A          >                    ld      a,d
 865+ 909D ED 44       >                    neg
 865+ 909F 57          >                    ld      d,a
 866+ 90A0 7A           .absXHi:                ld      a,d
 867+ 90A1 C6 80                                add     ScannerX
 868+ 90A3 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 869+ 90A5 CB 3C        .ProcessZCoord:         srl     h
 870+ 90A7 CB 3C                                srl     h
 871+ 90A9 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 872+ 90AC CB 7F                                bit     7,a
 873+ 90AE 28 04                                jr      z,.absZHi
 874+ 90B0                                      NegH
 874+ 90B0 7C          >                    ld      a,h
 874+ 90B1 ED 44       >                    neg
 874+ 90B3 67          >                    ld      h,a
 875+ 90B4 3E AB        .absZHi:                ld      a,ScannerY
 876+ 90B6 94                                   sub     h
 877+ 90B7 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 878+ 90B9 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 879+ 90BB 20 0B                                jr      nz,.StickHasLength
 880+ 90BD FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 881+ 90BF FD 6F                                ld      iyl,a
 882+ 90C1                                      MMUSelectLayer2
 882+ 90C1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 883+ 90C5 C3 F0 90                             jp      .NoStick
 884+ 90C8 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 885+ 90CB CB 7F                                bit     7,a
 886+ 90CD 28 04                                jr      z,.absYHi
 887+ 90CF                                      NegB
 887+ 90CF 78          >                    ld      a,b
 887+ 90D0 ED 44       >                    neg
 887+ 90D2 47          >                    ld      b,a
 888+ 90D3 FD 7C        .absYHi:                ld      a,iyh
 889+ 90D5 90           .SetStickPos:           sub     b
 890+ 90D6                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 890+ 90D6 FE BE       >                        cp      ScannerBottom
 890+ 90D8 DA DD 90    >                        jp		c, .StickOnScreen
 891+ 90DB 3E BE                                ld      a,ScannerBottom
 892+ 90DD FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 893+ 90DF DD 6F                                ld      ixl,a
 894+ 90E1 FD 44                                ld      b,iyh                       ; from row
 895+ 90E3 DD 4C                                ld      c,ixh                       ; from col
 896+ 90E5 FD 55                                ld      d,iyl                       ; to row
 897+ 90E7 1E B4                                ld      e,L2SunScanner
 898+ 90E9                                      MMUSelectLayer2
 898+ 90E9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 899+ 90ED CD 35 E3                             call    l2_draw_vert_line_to
 900+ 90F0 FD 45        .NoStick:               ld      b,iyl                       ; row
 901+ 90F2 DD 4C                                ld      c,ixh                       ; col
 902+ 90F4 3E FC                                ld      a,L2SunScannerBright
 903+ 90F6 CD 29 E1                             call    l2_plot_pixel
 904+ 90F9 FD 45                                ld      b,iyl
 905+ 90FB DD 4C                                ld      c,ixh
 906+ 90FD 0C                                   inc     c
 907+ 90FE 3E FC                                ld      a,L2SunScannerBright
 908+ 9100 CD 29 E1                             call    l2_plot_pixel
 909+ 9103 C9                                   ret
 910+ 9104
 911+ 9104
 912+ 9104              ; As the space station is always ship 0 then we can just use the scanner
 913+ 9104
 914+ 9104              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 915+ 9104 3A 35 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 916+ 9107 CB 67                                bit     4,a                         ; .
 917+ 9109                                      ;DEBUG ret     z                           ; .
 918+ 9109 3A 22 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 919+ 910C CB 7F                                bit     7,a
 920+ 910E C0                                   ret     nz
 921+ 910F              ; DEBUG Add in station types later
 922+ 910F 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 923+ 9112 ED 5B 0C C0                          ld      de,(UBnKxlo)
 924+ 9116 ED 4B 0F C0                          ld      bc,(UBnKylo)
 925+ 911A 7C                                   ld      a,h
 926+ 911B B2                                   or      d
 927+ 911C B0                                   or      b
 928+ 911D E6 C0                                and     %11000000
 929+ 911F C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 930+ 9120 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 931+ 9123 CB 7F                                bit     7,a
 932+ 9125 28 04                                jr      z,.absXHi
 933+ 9127                                      NegD
 933+ 9127 7A          >                    ld      a,d
 933+ 9128 ED 44       >                    neg
 933+ 912A 57          >                    ld      d,a
 934+ 912B 7A           .absXHi:                ld      a,d
 935+ 912C C6 80                                add     ScannerX
 936+ 912E DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 937+ 9130 CB 3C        .ProcessZCoord:         srl     h
 938+ 9132 CB 3C                                srl     h
 939+ 9134 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 940+ 9137 CB 7F                                bit     7,a
 941+ 9139 28 04                                jr      z,.absZHi
 942+ 913B                                      NegH
 942+ 913B 7C          >                    ld      a,h
 942+ 913C ED 44       >                    neg
 942+ 913E 67          >                    ld      h,a
 943+ 913F 3E AB        .absZHi:                ld      a,ScannerY
 944+ 9141 94                                   sub     h
 945+ 9142 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 946+ 9144 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 947+ 9146 20 19                                jr      nz,.StickHasLength
 948+ 9148 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 949+ 914A FD 6F                                ld      iyl,a
 950+ 914C DD 7D                                ld      a,ixl
 951+ 914E                                      GetShipColorBright
 951+ 914E 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 951+ 9151 CB 27       >                        sla     a                            ; as its byte pairs * 2
 951+ 9153 3C          >                        inc     a
 951+ 9154 21 F6 8B    >                        ld      hl,ScannerColourTable
 951+ 9157 ED 31       >                        add     hl,a
 951+ 9159 7E          >                        ld      a,(hl)
 952+ 915A                                      MMUSelectLayer2
 952+ 915A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 953+ 915E C3 98 91                             jp      .NoStick
 954+ 9161 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 955+ 9164 CB 7F                                bit     7,a
 956+ 9166 28 04                                jr      z,.absYHi
 957+ 9168                                      NegB
 957+ 9168 78          >                    ld      a,b
 957+ 9169 ED 44       >                    neg
 957+ 916B 47          >                    ld      b,a
 958+ 916C FD 7C        .absYHi:                ld      a,iyh
 959+ 916E 90           .SetStickPos:           sub     b
 960+ 916F                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 960+ 916F FE BE       >                        cp      ScannerBottom
 960+ 9171 DA 76 91    >                        jp		c, .StickOnScreen
 961+ 9174 3E BE                                ld      a,ScannerBottom
 962+ 9176 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 963+ 9178                                      GetShipColor
 963+ 9178 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 963+ 917B CB 27       >                        sla     a                            ; as its byte pairs * 2
 963+ 917D 21 F6 8B    >                        ld      hl,ScannerColourTable
 963+ 9180 ED 31       >                        add     hl,a
 963+ 9182 7E          >                        ld      a,(hl)
 964+ 9183 DD 6F                                ld      ixl,a
 965+ 9185 FD 44                                ld      b,iyh                       ; from row
 966+ 9187 DD 4C                                ld      c,ixh                       ; from col
 967+ 9189 FD 55                                ld      d,iyl                       ; to row
 968+ 918B DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 969+ 918D E5                                   push    hl
 970+ 918E                                      MMUSelectLayer2
 970+ 918E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 971+ 9192 CD 35 E3                             call    l2_draw_vert_line_to
 972+ 9195 E1                                   pop     hl
 973+ 9196 23                                   inc     hl
 974+ 9197 7E                                   ld      a,(hl)
 975+ 9198 FD 45        .NoStick:               ld      b,iyl                       ; row
 976+ 919A DD 4C                                ld      c,ixh                       ; col
 977+ 919C F5                                   push    af
 978+ 919D CD 29 E1                             call    l2_plot_pixel
 979+ 91A0 F1                                   pop     af
 980+ 91A1 FD 45                                ld      b,iyl
 981+ 91A3 DD 4C                                ld      c,ixh
 982+ 91A5 0C                                   inc     c
 983+ 91A6 CD 29 E1                             call    l2_plot_pixel
 984+ 91A9 C9                                   ret
 985+ 91AA
 986+ 91AA
# file closed: ./Views/ConsoleDrawing.asm
1151  91AA                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 91AA
   2+ 91AA
   3+ 91AA              ResetMessageQueue:      ZeroA
   3+ 91AA AF          >                        xor a
   4+ 91AB 32 D9 9C                             ld      (MessageCount),a
   5+ 91AE 32 DA 9C                             ld      (MessageCurrent),a
   6+ 91B1 21 DD 9C                             ld      hl,MessageQueue
   7+ 91B4 11 DB 9C                             ld      de,MessageIndex
   8+ 91B7 06 05                                ld      b,5
   9+ 91B9 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 91BA 12                                   ld      (de),a                              ;
  11+ 91BB 13                                   inc     de                                  ;
  12+ 91BC 7C                                   ld      a,h                                 ;
  13+ 91BD 12                                   ld      (de),a                              ;
  14+ 91BE 13                                   inc     de                                  ;
  15+ 91BF 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 91C1 ED 31                                add     hl,a                                ;
  17+ 91C3 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 91C5 21 DD 9C     .ClearText:             ld      hl,MessageQueue
  19+ 91C8 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 91CB 3E 00                                ld      a,0
  21+ 91CD CD 86 99                             call	memfill_dma
  22+ 91D0 C9                                   ret
  23+ 91D1
  24+ 91D1              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 91D1              ;                                       IYH = timer for message
  26+ 91D1 3A D9 9C     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 91D4                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 91D4 FE 05       >                        cp    MAXMESSAGES
  27+ 91D6 D0          >                        ret	 nc
  28+ 91D7 3C                                   inc     a
  29+ 91D8 32 D9 9C                             ld      (MessageCount),a                    ; get ready for next message
  30+ 91DB 4F           .AddMessage:            ld      c,a
  31+ 91DC 3A DA 9C                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 91DF 81                                   add     c                                   ;
  33+ 91E0                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 91E0 FE 05       >                        cp      MAXMESSAGES
  33+ 91E2 DA E7 91    >                        jp		c, .ReadyToAdd
  34+ 91E5 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 91E7 21 82 9D     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 91EA ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 91EC 4F                                   ld      c,a                                 ;
  38+ 91ED FD 7C                                ld      a,iyh                               ;
  39+ 91EF 77                                   ld      (hl),a                              ;
  40+ 91F0 79                                   ld      a,c                                 ; get back index
  41+ 91F1 21 DB 9C                             ld      hl,MessageIndex
  42+ 91F4                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 91F4 CB 27       >                    sla         a
  42+ 91F6 ED 31       >                    add         hl,a
  42+ 91F8 7E          >                    ld          a,(hl)
  42+ 91F9 23          >                    inc         hl
  42+ 91FA 66          >                    ld          h,(hl)
  42+ 91FB 6F          >                    ld          l,a
  43+ 91FC EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 91FD                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 91FD 7E          >.CopyLoop:              ld      a,(hl)
  44+ 91FE 12          >                        ld      (de),a
  44+ 91FF FE 00       >                        cp      0
  44+ 9201 CA 08 92    >                        jp      z,.DoneCopy
  44+ 9204 23          >                        inc     hl
  44+ 9205 13          >                        inc     de
  44+ 9206 18 F5       >                        jr      .CopyLoop
  44+ 9208             >.DoneCopy:
  45+ 9208 C9                                   ret
  46+ 9209
  47+ 9209 3A DA 9C     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 920C 21 82 9D                             ld      hl,MessageTimeout
  49+ 920F ED 31                                add     hl,a
  50+ 9211 7E                                   ld      a,(hl)
  51+ 9212 3D                                   dec     a
  52+ 9213 28 02                                jr      z,.UpdateQueue
  53+ 9215 77           .UpdateTimer            ld      (hl),a
  54+ 9216 C9                                   ret
  55+ 9217 77           .UpdateQueue:           ld      (hl),a
  56+ 9218 21 D9 9C                             ld      hl,MessageCount
  57+ 921B 35                                   dec     (hl)
  58+ 921C 3A DA 9C                             ld      a,(MessageCurrent)
  59+ 921F 23                                   inc     hl
  60+ 9220                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 9220 FE 05       >                        cp      MAXMESSAGES
  60+ 9222 DA 26 92    >                        jp		c, .ReadyToUpdate
  61+ 9225              .CircularQueue:         ZeroA
  61+ 9225 AF          >                        xor a
  62+ 9226 32 DA 9C     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 9229 C9                                   ret
  64+ 922A
  65+ 922A 3A D9 9C     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 922D                                      ReturnIfAIsZero
  66+ 922D A7          >                        and     a
  66+ 922E C8          >                        ret     z
  67+ 922F 3A DA 9C                             ld      a,(MessageCurrent)
  68+ 9232 21 DB 9C                             ld      hl,MessageIndex
  69+ 9235                                      HLEquAddrAtHLPlusA
  69+ 9235 CB 27       >                    sla         a
  69+ 9237 ED 31       >                    add         hl,a
  69+ 9239 7E          >                    ld          a,(hl)
  69+ 923A 23          >                    inc         hl
  69+ 923B 66          >                    ld          h,(hl)
  69+ 923C 6F          >                    ld          l,a
  70+ 923D                                      MMUSelectLayer1
  70+ 923D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 9241 11 01 00                             ld      de,MESSAGELINE
  72+ 9244 CD 15 E1                             call    l1_print_at_wrap
  73+ 9247 C9                                   ret
  74+ 9248
  75+ 9248              HyperSpaceMessage:      MMUSelectLayer1
  75+ 9248 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 924C 11 F3 85     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 924F 21 95 AB                             ld      hl,name_expanded
  78+ 9252                                      ldCopyTextAtHLtoDE
  78+ 9252 7E          >.CopyLoop:              ld      a,(hl)
  78+ 9253 12          >                        ld      (de),a
  78+ 9254 FE 00       >                        cp      0
  78+ 9256 CA 5D 92    >                        jp      z,.DoneCopy
  78+ 9259 23          >                        inc     hl
  78+ 925A 13          >                        inc     de
  78+ 925B 18 F5       >                        jr      .CopyLoop
  78+ 925D             >.DoneCopy:
  79+ 925D AF           .DoneName:              xor     a
  80+ 925E 12                                   ld      (de),a
  81+ 925F 32 0F 86                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 9262 21 F0 85     .CentreJustify:         ld      hl,Hyp_message
  83+ 9265                                      HalfLengthHL
  83+ 9265 06 00       >                        ld      b,0
  83+ 9267 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 9268 FE 00       >                        cp      0
  83+ 926A 28 04       >                        jr      z,.DoneCount
  83+ 926C 04          >                        inc     b
  83+ 926D 23          >                        inc     hl
  83+ 926E 18 F7       >                        jr      .CountLenLoop
  83+ 9270 3E 20       >.DoneCount:             ld      a,32
  83+ 9272 90          >                        sub     b
  83+ 9273 CB 2F       >                        sra     a
  84+ 9275 21 2A 86                             ld      hl,Hyp_centeredTarget
  85+ 9278                                      ldClearTextLoop 32
  85+ 9278 47          >                        ld      b,a
  85+ 9279 3E 20       >                        ld      a,32
  85+ 927B 77          >.ClearLoop:             ld      (hl),a
  85+ 927C 23          >                        inc     hl
  85+ 927D 10 FC       >                        djnz    .ClearLoop
  86+ 927F EB                                   ex      de,hl
  87+ 9280 21 F0 85                             ld      hl,Hyp_message
  88+ 9283                                      ldCopyTextAtHLtoDE
  88+ 9283 7E          >.CopyLoop:              ld      a,(hl)
  88+ 9284 12          >                        ld      (de),a
  88+ 9285 FE 00       >                        cp      0
  88+ 9287 CA 8E 92    >                        jp      z,.DoneCopy
  88+ 928A 23          >                        inc     hl
  88+ 928B 13          >                        inc     de
  88+ 928C 18 F5       >                        jr      .CopyLoop
  88+ 928E             >.DoneCopy:
  89+ 928E                                      ZeroA
  89+ 928E AF          >                        xor a
  90+ 928F 32 4A 86                             ld      (Hyp_centeredEol),a
  91+ 9292 21 26 86                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 9295 3E 20                                ld      a,32                     ; clear counter digits
  93+ 9297 77                                   ld      (hl),a                   ; clear counter digits
  94+ 9298 23                                   inc     hl                       ; clear counter digits
  95+ 9299 77                                   ld      (hl),a                   ; clear counter digits
  96+ 929A 23                                   inc     hl                       ; clear counter digits
  97+ 929B 77                                   ld      (hl),a                   ; clear counter digits
  98+ 929C CD CC 85                             call    UpdateCountdownNumber
  99+ 929F 21 1D 86                             ld      hl,Hyp_charging
 100+ 92A2                                      HalfLengthHL
 100+ 92A2 06 00       >                        ld      b,0
 100+ 92A4 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 92A5 FE 00       >                        cp      0
 100+ 92A7 28 04       >                        jr      z,.DoneCount
 100+ 92A9 04          >                        inc     b
 100+ 92AA 23          >                        inc     hl
 100+ 92AB 18 F7       >                        jr      .CountLenLoop
 100+ 92AD 3E 20       >.DoneCount:             ld      a,32
 100+ 92AF 90          >                        sub     b
 100+ 92B0 CB 2F       >                        sra     a
 101+ 92B2 21 6B 86                             ld      hl,Hyp_centeredCharging
 102+ 92B5                                      ldClearTextLoop 32
 102+ 92B5 47          >                        ld      b,a
 102+ 92B6 3E 20       >                        ld      a,32
 102+ 92B8 77          >.ClearLoop:             ld      (hl),a
 102+ 92B9 23          >                        inc     hl
 102+ 92BA 10 FC       >                        djnz    .ClearLoop
 103+ 92BC EB                                   ex      de,hl
 104+ 92BD 21 1D 86                             ld      hl,Hyp_charging
 105+ 92C0                                      ldCopyTextAtHLtoDE
 105+ 92C0 7E          >.CopyLoop:              ld      a,(hl)
 105+ 92C1 12          >                        ld      (de),a
 105+ 92C2 FE 00       >                        cp      0
 105+ 92C4 CA CB 92    >                        jp      z,.DoneCopy
 105+ 92C7 23          >                        inc     hl
 105+ 92C8 13          >                        inc     de
 105+ 92C9 18 F5       >                        jr      .CopyLoop
 105+ 92CB             >.DoneCopy:
 106+ 92CB AF                                   xor     a
 107+ 92CC 32 8B 86                             ld      (Hyp_centeredEol2),a
 108+ 92CF 2A 83 9E     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 92D2 2D                                   dec     l
 110+ 92D3 20 26                                jr      nz,.decHyperInnerOnly
 111+ 92D5 25                                   dec     h
 112+ 92D6 FA FF 92                             jp      m,.HyperCountDone
 113+ 92D9 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 92DB E5                                   push    hl
 115+ 92DC 16 0C                                ld      d,12
 116+ 92DE 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 92E0 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 92E3 16 60                                ld      d,12 * 8
 119+ 92E5 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 92E8 11 00 60                             ld      de,$6000
 121+ 92EB 21 2A 86                             ld      hl,Hyp_centeredTarget
 122+ 92EE CD C8 E0                             call    l1_print_at
 123+ 92F1 11 00 68                             ld      de,$6800
 124+ 92F4 21 6B 86                             ld      hl,Hyp_centeredCharging
 125+ 92F7 CD C8 E0                             call    l1_print_at
 126+ 92FA E1                                   pop     hl
 127+ 92FB 22 83 9E     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 92FE C9                                   ret
 129+ 92FF 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 9302 22 83 9E                             ld      (InnerHyperCount),hl
 131+ 9305 16 0C                                ld      d,12
 132+ 9307 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 9309 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 930C 16 60                                ld      d,12 * 8
 135+ 930E CD 74 E0                             call    l1_cls_2_lines_d
 136+ 9311                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 9311 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 9313 32 7A 88    >                        ld      (ScreenTransitionForced), a
 137+ 9316 C9                                   ret
 138+ 9317
# file closed: ./Tables/message_queue.asm
1152  9317                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 9317              ; LaserTypeTable
   2+ 9317              ; laser type = id of laser
   3+ 9317              ; laser pulse pause = time before next pulse
   4+ 9317              ; laser pulse duration = time laser is on per shot
   5+ 9317              ; laser damage output
   6+ 9317              ;
   7+ 9317              ; LaserType
   8+ 9317              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 9317              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 9317              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 9317              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 9317              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 9317              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 9317              ; LaserHeat                               ; amount of heat generated
  15+ 9317              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 9317              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 9317              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 9317              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 9317              ;
  20+ 9317              LaserStatsTableWidth    EQU 12
  21+ 9317              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 9317              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 9317 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 931B 40 03 10 02
  23+ 931F 20 10 00 00
  24+ 9323 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 9327 20 03 10 08
  24+ 932B 20 10 00 01
  25+ 932F 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 9333 3A 03 10 02
  25+ 9337 20 10 00 02
  26+ 933B 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 933F 50 02 10 05
  26+ 9343 30 10 00 03
  27+ 9347 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 934B 03 03 03 10
  27+ 934F 20 10 00 04
  28+ 9353 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 9357 60 03 02 02
  28+ 935B 20 10 00 05
  29+ 935F 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 9363 06 05 05 05
  29+ 9367 10 10 00 08
  30+ 936B 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 936F 20 22 01 30
  30+ 9373 30 11 01 10
  31+ 9377 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 937B 80 70 02 03
  31+ 937F 60 11 01 10
  32+ 9383
  33+ 9383
  34+ 9383
  35+ 9383
  36+ 9383
  37+ 9383
  38+ 9383
# file closed: ./Tables/LaserStatsTable.asm
1153  9383                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 9383 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 9384 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 9388 13 0A 2A 0B
   3+ 938C              ShipPackTableSize       EQU $ - ShipPackList
   4+ 938C 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 9390              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 9390
# file closed: ./Tables/ShipClassTable.asm
1154  9390
1155  9390 AF           SeedGalaxy0:            xor     a
1156  9391                                      MMUSelectGalaxyA
1156  9391 ED 92 57    >                     nextreg GalaxyDataMMU,       a
1157  9394 DD 21 16 E0                          ld      ix,galaxy_data
1158  9398 AF                                   xor		a
1159  9399 32 C2 9D                             ld		(XSAV),a
1160  939C CD 64 A3                             call    copy_galaxy_to_system
1161  939F DD E5        SeedGalaxy0Loop:        push    ix
1162  93A1 D1                                   pop     de
1163  93A2 21 A9 9D                             ld      hl,SystemSeed
1164  93A5 CD 6A A3                             call    copy_seed
1165  93A8 DD E5                                push    ix
1166  93AA E1                                   pop     hl
1167  93AB ED 34 08 00                          add     hl,8
1168  93AF E5                                   push    hl
1169  93B0 DD E1                                pop     ix
1170  93B2 CD 9F A3                             call    next_system_seed
1171  93B5 3A C2 9D                             ld		a,(XSAV)
1172  93B8 3D                                   dec		a
1173  93B9 FE 00                                cp		0
1174  93BB C8                                   ret		z
1175  93BC 32 C2 9D                             ld		(XSAV),a
1176  93BF 20 DE                                jr      nz,SeedGalaxy0Loop
1177  93C1 C9                                   ret
1178  93C2
1179  93C2
1180  93C2
1181  93C2
1182  93C2                  ;include "./ModelRender/testdrawing.asm"
1183  93C2                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 93C2              AttractDuration             EQU $00F0
   2+ 93C2              AttractCounterStart         EQU $80
   3+ 93C2 F0 00        AttractTimer:              DW      AttractDuration
   4+ 93C4 80           AttractCounter:            DB      AttractCounterStart
   5+ 93C5
   6+ 93C5 3D 08        Attract_boiler_text		DW $083D
   7+ 93C7
   8+ 93C7
   9+ 93C7 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 93CB 20 43 6F 6D
   9+ 93CF 6D 61 6E 64
   9+ 93D3 65 72 20 28
   9+ 93D7 59 2F 4E 29
   9+ 93DB 00
  10+ 93DC
  11+ 93DC              AttractMode:            MMUSelectLayer1
  11+ 93DC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  12+ 93E0 CD 80 E0                             call	l1_cls
  13+ 93E3 3E 07                                ld		a,7
  14+ 93E5 CD 9B E0                             call	l1_attr_cls_to_a
  15+ 93E8 1E FF                                ld      e,$FF
  16+ 93EA ED 5B C5 93                          ld      de,(Attract_boiler_text)
  17+ 93EE 21 C7 93                             ld      hl,ATTR_LoadCommander
  18+ 93F1 CD C8 E0                             call    l1_print_at
  19+ 93F4                                      MMUSelectSpriteBank
  19+ 93F4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  20+ 93F8 CD A4 E4                             call        sprite_cls_cursors
  21+ 93FB CD E8 E0                             call    l2_cls_lower_third
  22+ 93FE                                      MMUSelectConsoleBank
  22+ 93FE ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  23+ 9402 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  24+ 9405 11 00 E0                             ld          de,ConsoleImageData
  25+ 9408 01 00 08                             ld          bc, ScreenL1BottomLen
  26+ 940B CD AC 99                             call        memcopy_dma
  27+ 940E 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  28+ 9411 11 00 E8                             ld          de,ConsoleAttributes
  29+ 9414 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  30+ 9417 CD AC 99                             call        memcopy_dma
  31+ 941A                                      MMUSelectLayer2
  31+ 941A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  32+ 941E CD 03 E0                             call    asm_l2_double_buffer_on
  33+ 9421 CD 8D 94     .StartShip:             call    SelectARandomShip
  34+ 9424 CD 90 9A     .DrawLoop:              call    scan_keyboard
  35+ 9427 3E 50                                ld      a,c_Pressed_Yes
  36+ 9429 CD DE 9A                             call    is_key_up_state
  37+ 942C 20 57                                jr      nz,.YPressed
  38+ 942E 3E 52                                ld      a,c_Pressed_No
  39+ 9430 CD DE 9A                             call    is_key_up_state
  40+ 9433 20 53                                jr      nz,.NPressed
  41+ 9435                                      MMUSelectUniverseN  1
  41+ 9435 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  42+ 9439 CD 16 DD                             call    ApplyShipRollAndPitch
  43+ 943C                                   ;   xor     a
  44+ 943C                                   ;  ld      (UBnKRotXCounter),a
  45+ 943C                                   ;  ld      (UBnKRotZCounter),a
  46+ 943C              .ProcessUnivShip:       MMUSelectLayer2
  46+ 943C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  47+ 9440 CD D3 E0                             call   l2_cls_upper_two_thirds
  48+ 9443 CD 54 DE                             call    ProcessShip
  49+ 9446 01 01 01     .Drawbox:               ld		bc,$0101
  50+ 9449 11 FD 7F                             ld		de,$7FFD
  51+ 944C 3E C0                                ld		a,$C0
  52+ 944E                                      MMUSelectLayer2
  52+ 944E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  53+ 9452 CD 20 E2                             call	l2_draw_box
  54+ 9455 CD 07 E1     .DoubleBuffer:          call    l2_flip_buffers
  55+ 9458 3A C4 93                             ld      a,(AttractCounter)
  56+ 945B                                      JumpIfAIsZero .SameShipPosition
  56+ 945B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  56+ 945C CA 71 94    >                        jp	    z, .SameShipPosition
  57+ 945F 3D                                   dec     a
  58+ 9460 32 C4 93                             ld      (AttractCounter),a
  59+ 9463 2A 12 C0                             ld      hl, (UBnKzlo)
  60+ 9466 11 08 00     .UpdatePos:             ld      de, $0008
  61+ 9469 ED 52                                sbc     hl,de
  62+ 946B 22 12 C0                             ld      (UBnKzlo),hl
  63+ 946E CD 35 A3                             call    doRandom
  64+ 9471 2A C2 93     .SameShipPosition:      ld      hl,(AttractTimer)
  65+ 9474 2B                                   dec     hl
  66+ 9475 22 C2 93                             ld      (AttractTimer),hl
  67+ 9478 7C                                   ld      a,h
  68+ 9479 B5                                   or      l
  69+ 947A 20 A8                                jr      nz,.DrawLoop
  70+ 947C 21 F0 00     .NewShip:               ld      hl,AttractDuration
  71+ 947F 22 C2 93                             ld      (AttractTimer),hl
  72+ 9482 C3 21 94                             jp      .StartShip
  73+ 9485 3E 00        .YPressed:              ld      a,0
  74+ 9487 C9                                   ret
  75+ 9488 3E FF        .NPressed:              ld      a,$FF
  76+ 948A C9                                   ret
  77+ 948B DD 01        .ExitAttractMode:       break
  78+ 948D
  79+ 948D 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
  80+ 948F                                      MMUSelectUniverseN  1
  80+ 948F ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  81+ 9493                                      MMUSelectShipBank1
  81+ 9493 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  82+ 9497 CD 35 A3     .SelectRandom:          call    doRandom
  83+ 949A                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
  83+ 949A FE 2C       >                        cp     ShipID_Rattler+1
  83+ 949C D2 97 94    >                        jp		nc,.SelectRandom
  84+ 949F CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
  85+ 94A2                                      MMUSelectShipBankA
  85+ 94A2 ED 92 57    >					 nextreg ShipModelMMU,	    a
  86+ 94A5 78                                   ld      a,b
  87+ 94A6 CD 6A E0                             call    CopyShipToUniverse
  88+ 94A9 3A 22 C3                             ld      a,(ShipTypeAddr)
  89+ 94AC CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
  90+ 94AE 20 E7                                jr      nz,.SelectRandom
  91+ 94B0 CD 7A CB                             call    UnivInitRuntime
  92+ 94B3 CD 8C CA                             call    UnivSetDemoPostion
  93+ 94B6 21 F0 00                             ld      hl,AttractDuration
  94+ 94B9 22 C2 93                             ld      (AttractTimer),hl
  95+ 94BC 3E 80                                ld      a, AttractCounterStart
  96+ 94BE 32 C4 93                             ld      (AttractCounter),a
  97+ 94C1 C9                                   ret
  98+ 94C2
  99+ 94C2
 100+ 94C2
# file closed: ./Menus/AttractMode.asm
1184  94C2
1185  94C2                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 94C2              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 94C2              ; so xx12 = XX15 * XX16 row
   3+ 94C2              XX12ProcessOneRow:
   4+ 94C2              XX12CalcXCell:
   5+ 94C2 ED 4B 83 C0          ld		bc,(UBnkXScaled)
   6+ 94C6 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 94C7 23           		inc		hl
   8+ 94C8 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 94C9 7A           		ld		a,d
  10+ 94CA A8                   xor     b
  11+ 94CB E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 94CD DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 94CF 78           		ld		a,b                                     ; now make bc abs bc
  14+ 94D0 E6 7F        		and		SignMask8Bit
  15+ 94D2 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 94D3 E5           		push	hl
  17+ 94D4 16 00                ld      d,0                                     ; d = value
  18+ 94D6 60           		ld		h,b
  19+ 94D7 69           		ld		l,c
  20+ 94D8 CD 7D AE     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 94DB 22 C7 99     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 94DE DD 7C        		ld		a,ixh
  23+ 94E0 32 CE 99     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 94E3 E1           		pop		hl
  25+ 94E4              XX12CalcYCell:
  26+ 94E4 ED 4B 85 C0          ld		bc,(UBnkYScaled)
  27+ 94E8 23           		inc		hl
  28+ 94E9 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 94EA 23           		inc		hl
  30+ 94EB 56           		ld		d,(hl)
  31+ 94EC 7A           		ld		a,d
  32+ 94ED A8                   xor     b
  33+ 94EE E6 80        		and		SignOnly8Bit
  34+ 94F0 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 94F2 78           		ld		a,b                                     ; now make bc abs bc
  36+ 94F3 E6 7F        		and		SignMask8Bit
  37+ 94F5 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 94F6 E5           		push	hl
  39+ 94F7 16 00                ld      d,0                                     ; d = value
  40+ 94F9 60           		ld		h,b
  41+ 94FA 69           		ld		l,c
  42+ 94FB CD 7D AE     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 94FE 22 C9 99     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 9501 DD 7C        		ld		a,ixh
  45+ 9503 32 CD 99     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 9506 E1           		pop		hl
  47+ 9507              XX12CalcZCell:
  48+ 9507 ED 4B 87 C0          ld		bc,(UBnkZScaled)
  49+ 950B 23           		inc		hl
  50+ 950C 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 950D 23           		inc		hl
  52+ 950E 56           		ld		d,(hl)
  53+ 950F 7A           		ld		a,d
  54+ 9510 A8                   xor     b
  55+ 9511 E6 80        		and		SignOnly8Bit
  56+ 9513 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 9515 78           		ld		a,b                                     ; now make bc abs bc
  58+ 9516 E6 7F        		and		SignMask8Bit
  59+ 9518 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 9519 16 00                ld      d,0                                     ; d = value
  61+ 951B 60           		ld		h,b
  62+ 951C 69           		ld		l,c
  63+ 951D CD 7D AE     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 9520 22 CB 99     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 9523 DD 7C        		ld		a,ixh
  66+ 9525 32 CF 99     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 9528              XX12CalcCellResult:
  68+ 9528 2A C7 99     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 952B ED 5B C9 99  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 952F ED 4B CD 99  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 9533              XX12MSBOnly:
  72+ 9533 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 9534 5A           		ld		e,d									    ; for both results
  74+ 9535 AF           		xor		a									    ;
  75+ 9536 67           		ld		h,a									    ;
  76+ 9537 57           		ld		d,a									    ; so set high byte to 0
  77+ 9538 CD 9E B4     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 953B 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 953C 3A CF 99     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 953F 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 9540 ED 5B CB 99  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 9544 5A           		ld		e,d                                     ; d = result /256
  83+ 9545 16 00        		ld		d,0									    ; and only us high byte
  84+ 9547 CD 9E B4     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 954A C9           		ret											    ; hl = result, a = sign
  86+ 954B              								    ; hl = result, a = sign
  87+ 954B
  88+ 954B              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 954B              ;...X cell
  90+ 954B 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 954E CD C2 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 9551 47           		ld		b,a                                 ; b = sign
  93+ 9552 7C           		ld		a,h                                 ; a = high byte
  94+ 9553 B0           		or		b
  95+ 9554 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 9557 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 9558 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 955B              ;...Y cell
  99+ 955B 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 955E CD C2 94             call    XX12ProcessOneRow
 101+ 9561 47           		ld		b,a
 102+ 9562 7C           		ld		a,h
 103+ 9563              ;		ld		a,l
 104+ 9563 B0           		or		b
 105+ 9564 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 9567 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 9568 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 956B              ;...Z cell
 109+ 956B 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 956E CD C2 94             call    XX12ProcessOneRow
 111+ 9571 47           		ld		b,a
 112+ 9572 7C                   ld		a,h
 113+ 9573              ;		ld		a,l
 114+ 9573 B0           		or		b
 115+ 9574 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 9577 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 9578 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 957B C9                   ret
 119+ 957C
 120+ 957C              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 957C              ;...X cell
 122+ 957C 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 957F CD C2 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 9582 47           		ld		b,a                                 ; b = sign
 125+ 9583 7C           		ld		a,h                                 ; a = high byte
 126+ 9584 B0           		or		b
 127+ 9585 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 9588 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 9589 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 958C              ;...Y cell
 131+ 958C 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 958F CD C2 94             call    XX12ProcessOneRow
 133+ 9592 47           		ld		b,a
 134+ 9593 7C           		ld		a,h
 135+ 9594              ;		ld		a,l
 136+ 9594 B0           		or		b
 137+ 9595 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 9598 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 9599 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 959C              ;...Z cell
 141+ 959C 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 959F CD C2 94             call    XX12ProcessOneRow
 143+ 95A2 47           		ld		b,a
 144+ 95A3 7C                   ld		a,h
 145+ 95A4              ;		ld		a,l
 146+ 95A4 B0           		or		b
 147+ 95A5 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 95A8 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 95A9 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 95AC C9                   ret
 151+ 95AD
 152+ 95AD              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 95AD              ;...X cell
 154+ 95AD 21 3E C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 95B0 CD C2 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 95B3 47           		ld		b,a                                 ; b = sign
 157+ 95B4 7C           		ld		a,h                                 ; a = high byte
 158+ 95B5 B0           		or		b
 159+ 95B6 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 95B9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 95BA 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 95BD              ;...Y cell
 163+ 95BD 21 44 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 95C0 CD C2 94             call    XX12ProcessOneRow
 165+ 95C3 47           		ld		b,a
 166+ 95C4 7C           		ld		a,h
 167+ 95C5              ;		ld		a,l
 168+ 95C5 B0           		or		b
 169+ 95C6 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 95C9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 95CA 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 95CD              ;...Z cell
 173+ 95CD 21 4A C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 95D0 CD C2 94             call    XX12ProcessOneRow
 175+ 95D3 47           		ld		b,a
 176+ 95D4 7C                   ld		a,h
 177+ 95D5              ;		ld		a,l
 178+ 95D5 B0           		or		b
 179+ 95D6 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 95D9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 95DA 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 95DD C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1186  95DE                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 95DE 21 89 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 95E1 11 83 C0                             ld      de,XX15
   3+ 95E4 01 06 00                             ld      bc,6
   4+ 95E7 ED B0                                ldir
   5+ 95E9 C9                                   ret
   6+ 95EA
   7+ 95EA 21 89 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 95ED 11 8F C0                             ld      de,XX12Save
   9+ 95F0 01 06 00                             ld      bc,6
  10+ 95F3 ED B0                                ldir
  11+ 95F5 C9                                   ret
  12+ 95F6
  13+ 95F6 21 8F C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 95F9 11 89 C0                             ld      de,XX12
  15+ 95FC 01 06 00                             ld      bc,6
  16+ 95FF ED B0                                ldir
  17+ 9601 C9                                   ret
  18+ 9602
  19+ 9602 21 89 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 9605 11 95 C0                             ld      de,XX12Save2
  21+ 9608 01 06 00                             ld      bc,6
  22+ 960B ED B0                                ldir
  23+ 960D C9                                   ret
  24+ 960E
  25+ 960E 21 95 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 9611 11 89 C0                             ld      de,XX12
  27+ 9614 01 06 00                             ld      bc,6
  28+ 9617 ED B0                                ldir
  29+ 9619 C9                                   ret
  30+ 961A
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1187  961A                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 961A 21 83 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 961D 11 89 C0                             ld      de,XX12
   3+ 9620 01 06 00                             ld      bc,6
   4+ 9623 ED B0                                ldir
   5+ 9625 C9                                   ret
   6+ 9626
   7+ 9626
   8+ 9626
   9+ 9626 21 83 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 9629 11 9F C0                             ld      de,XX15Save
  11+ 962C 01 06 00                             ld      bc,6
  12+ 962F ED B0                                ldir
  13+ 9631 C9                                   ret
  14+ 9632
  15+ 9632 21 9F C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 9635 11 83 C0                             ld      de,XX15
  17+ 9638 01 06 00                             ld      bc,6
  18+ 963B ED B0                                ldir
  19+ 963D C9                                   ret
  20+ 963E
  21+ 963E 21 83 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 9641 11 A7 C0                             ld      de,XX15Save2
  23+ 9644 01 06 00                             ld      bc,6
  24+ 9647 ED B0                                ldir
  25+ 9649 C9                                   ret
  26+ 964A
  27+ 964A 21 A7 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 964D 11 83 C0                             ld      de,XX15
  29+ 9650 01 06 00                             ld      bc,6
  30+ 9653 ED B0                                ldir
  31+ 9655 C9                                   ret
  32+ 9656
# file closed: ./ModelRender/CopyXX15ToXX12.asm
1188  9656                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 9656 06 09        ScaleXX16Matrix197:     ld		b,9                 ; Interate though all 9 matrix elements
   2+ 9658 0E C5                                ld		c,ConstNorm         ; c = 197
   3+ 965A 21 3E C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   4+ 965D 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
   5+ 965E 5F                                   ld		e,a                 ;
   6+ 965F 23                                   inc		hl                  ;
   7+ 9660 7E                                   ld		a,(hl)              ;
   8+ 9661 57                                   ld		d,a                 ;
   9+ 9662 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  10+ 9664 DD 6F                                ld		ixl,a				; retain for sign bit
  11+ 9666                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  11+ 9666 CB 23       >			   sla e
  11+ 9668 CB 12       >			   rl  d
  12+ 966A 7A                                   ld      a,d                 ; a = high byte after x 2
  13+ 966B C5                                   push	bc                  ; save BC  counter and constant 197
  14+ 966C E5                                   push	hl                  ; save HL
  15+ 966D CD 5F B0                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  16+ 9670 E1                                   pop		hl
  17+ 9671 2B                                   dec     hl                  ; move back to low byte
  18+ 9672 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  19+ 9673 23                                   inc     hl                  ; move back to high byte
  20+ 9674                                  ;    ld      a,(hl)
  21+ 9674                                  ;    and     $80
  22+ 9674 DD 7D                                ld      a,ixl
  23+ 9676 77                                   ld      (hl),a              ; write back just sign bit
  24+ 9677 C1                                   pop		bc                  ; retrieve both counter and constant 197
  25+ 9678 23                                   inc     hl                  ; no to next vertex value
  26+ 9679 10 E2                                djnz	.ScaleXX16Loop
  27+ 967B C9                                   ret
  28+ 967C
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1189  967C
1190  967C                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 967C              ;note: DIV16Amul256dCUNDOC as per
   2+ 967C              ;                                   BC = A0
   3+ 967C              ;                                   DE = 0C
   4+ 967C              ;                                   so BC = a * 256 / C
   5+ 967C
   6+ 967C              ; We can cheat here, Speed is always 0 or positive
   7+ 967C              ; z postion will always be positive if we can see it
   8+ 967C
   9+ 967C EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 967D CD 35 A3                             call    doRND               ; a = random OR bit 5
  11+ 9680 EB                                   ex      de,hl               ; .
  12+ 9681 F6 08                                or      8                   ; .
  13+ 9683 77                                   ld      (hl),a              ; save to x pos
  14+ 9684 E6 7F                                and     $7F                 ; a = abs a
  15+ 9686 23                                   inc     hl                  ;
  16+ 9687 77                                   ld      (hl),a              ;
  17+ 9688 EB                                   ex      de,hl               ; preserving hl
  18+ 9689 CD 35 A3                             call    doRND               ; a = -ve (random / 2)
  19+ 968C EB                                   ex      de,hl               ; .
  20+ 968D 0F                                   rrca                        ; .
  21+ 968E E6 80                                and     $80                 ; .
  22+ 9690 B6                                   or      (hl)                ; or with
  23+ 9691 77                                   ld      (hl),a
  24+ 9692 23                                   inc     hl
  25+ 9693 EB                                   ex      de,hl
  26+ 9694 CD 35 A3                             call    doRND
  27+ 9697 EB                                   ex      de,hl
  28+ 9698 F6 04                                or      4
  29+ 969A 77                                   ld      (hl),a
  30+ 969B 23                                   inc     hl
  31+ 969C E6 7F                                and     $7F
  32+ 969E 77                                   ld      (hl),a
  33+ 969F EB                                   ex      de,hl
  34+ 96A0 CD 35 A3                             call    doRND
  35+ 96A3 EB                                   ex      de,hl
  36+ 96A4 0F                                   rrca
  37+ 96A5 E6 80                                and     $80
  38+ 96A7 B6                                   or      (hl)
  39+ 96A8 77                                   ld      (hl),a
  40+ 96A9 23                                   inc     hl
  41+ 96AA EB                                   ex      de,hl
  42+ 96AB CD 35 A3                             call    doRND
  43+ 96AE EB                                   ex      de,hl
  44+ 96AF F6 90                                or      144
  45+ 96B1 77                                   ld      (hl),a
  46+ 96B2 23                                   inc     hl
  47+ 96B3 F6 70                                or      %01110000
  48+ 96B5 E6 7F                                and     $7f     ; bodge
  49+ 96B7 77                                   ld      (hl),a
  50+ 96B8 23                                   inc     hl
  51+ 96B9 C9                                   ret
  52+ 96BA
  53+ 96BA EB           InitHyperStarAtHL:      ex      de,hl
  54+ 96BB CD 35 A3                             call    doRND
  55+ 96BE CB 27                                sla     a
  56+ 96C0 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 96C2 EB                                   ex      de,hl
  58+ 96C3 E6 F8                                and     %11111000
  59+ 96C5 77                                   ld      (hl),a
  60+ 96C6 E6 7F                                and     $7F
  61+ 96C8 23                                   inc     hl
  62+ 96C9 77                                   ld      (hl),a
  63+ 96CA EB                                   ex      de,hl
  64+ 96CB CD 35 A3                             call    doRND
  65+ 96CE EB                                   ex      de,hl
  66+ 96CF 0F                                   rrca
  67+ 96D0 E6 80                                and     $80
  68+ 96D2 B6                                   or      (hl)
  69+ 96D3 77                                   ld      (hl),a
  70+ 96D4 23                                   inc     hl
  71+ 96D5 EB                                   ex      de,hl
  72+ 96D6 CD 35 A3                             call    doRND
  73+ 96D9 CB 27                                sla     a
  74+ 96DB CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 96DD EB                                   ex      de,hl
  76+ 96DE E6 F8                                and     %11111000
  77+ 96E0 77                                   ld      (hl),a
  78+ 96E1 23                                   inc     hl
  79+ 96E2 E6 7F                                and     $7F
  80+ 96E4 77                                   ld      (hl),a
  81+ 96E5 EB                                   ex      de,hl
  82+ 96E6 CD 35 A3                             call    doRND
  83+ 96E9 EB                                   ex      de,hl
  84+ 96EA 0F                                   rrca
  85+ 96EB E6 80                                and     $80
  86+ 96ED B6                                   or      (hl)
  87+ 96EE 77                                   ld      (hl),a
  88+ 96EF 23                                   inc     hl
  89+ 96F0 EB                                   ex      de,hl
  90+ 96F1 CD 35 A3                             call    doRND
  91+ 96F4 EB                                   ex      de,hl
  92+ 96F5 F6 5F                                or      95
  93+ 96F7 77                                   ld      (hl),a
  94+ 96F8 23                                   inc     hl
  95+ 96F9 F6 70                                or      %01110000
  96+ 96FB E6 7F                                and     $7f     ; bodge
  97+ 96FD 77                                   ld      (hl),a
  98+ 96FE 23                                   inc     hl
  99+ 96FF C9                                   ret
 100+ 9700
 101+ 9700              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 9700 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 9701 E6 80                                and     SignOnly8Bit
 104+ 9703 47                                   ld      b,a                         ;save sign bit in b
 105+ 9704 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 9705                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 9705 FA 33 97    >                        jp		m, .SUBHLDEOppSGN
 107+ 9708 78           .SUBHLDESameSigns:      ld      a,b
 108+ 9709 B2                                   or      d
 109+ 970A                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 970A FA 14 97    >                        jp		m, .SUBHLDESameNeg
 110+ 970D B7                                   or      a
 111+ 970E ED 52                                sbc     hl,de
 112+ 9710                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 9710 FA 27 97    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 9713 C9                                   ret
 114+ 9714 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 9715 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 9717 67                                   ld      h,a
 117+ 9718 7A                                   ld      a,d
 118+ 9719 E6 7F                                and     SignMask8Bit
 119+ 971B 57                                   ld      d,a
 120+ 971C B7                                   or      a
 121+ 971D ED 52                                sbc     hl,de
 122+ 971F                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 971F FA 27 97    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 9722 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 9723 F6 80                                or      SignOnly8Bit
 125+ 9725 67                                   ld      h,a
 126+ 9726 C9                                   ret
 127+ 9727              .SUBHLDESameOvrFlw:     NegHL
 127+ 9727 AF          >                    xor a
 127+ 9728 95          >                    sub l
 127+ 9729 6F          >                    ld l,a
 127+ 972A 9F          >                    sbc a,a
 127+ 972B 94          >                    sub h
 127+ 972C 67          >                    ld h,a
 128+ 972D 78                                   ld      a,b
 129+ 972E EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 9730 B4                                   or      h
 131+ 9731 67                                   ld      h,a                         ; recover sign
 132+ 9732 C9                                   ret
 133+ 9733 B7           .SUBHLDEOppSGN:         or      a
 134+ 9734 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 9735 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 9737 67                                   ld      h,a
 137+ 9738 7A                                   ld      a,d
 138+ 9739 E6 7F                                and     SignMask8Bit
 139+ 973B 57                                   ld      d,a
 140+ 973C 19                                   add     hl,de
 141+ 973D 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 973E B4                                   or      h
 143+ 973F 67                                   ld      h,a                         ; set the previou sign value
 144+ 9740 C9                                   ret
 145+ 9741
 146+ 9741 7C           StarsADDHLDESigned:     ld      a,h
 147+ 9742 E6 80                                and     SignOnly8Bit
 148+ 9744 47                                   ld      b,a                         ;save sign bit in b
 149+ 9745 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 9746                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 9746 FA 5E 97    >                        jp		m, .ADDHLDEOppSGN
 151+ 9749 78           .ADDHLDESameSigns:      ld      a,b
 152+ 974A B2                                   or      d
 153+ 974B                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 974B FA 50 97    >                        jp		m, .ADDHLDESameNeg
 154+ 974E 19                                   add     hl,de
 155+ 974F C9                                   ret
 156+ 9750 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 9751 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 9753 67                                   ld      h,a
 159+ 9754 7A                                   ld      a,d
 160+ 9755 E6 7F                                and     SignMask8Bit
 161+ 9757 57                                   ld      d,a
 162+ 9758 19                                   add     hl,de
 163+ 9759 3E 80                                ld      a,SignOnly8Bit
 164+ 975B B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 975C 67                                   ld      h,a
 166+ 975D C9                                   ret
 167+ 975E 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 975F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 9761 67                                   ld      h,a
 170+ 9762 7A                                   ld      a,d
 171+ 9763 E6 7F                                and     SignMask8Bit
 172+ 9765 57                                   ld      d,a
 173+ 9766 B7                                   or      a
 174+ 9767 ED 52                                sbc     hl,de
 175+ 9769 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 976B 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 976C B4                                   or      h
 178+ 976D 67                                   ld      h,a                         ; set the previou sign value
 179+ 976E C9                                   ret
 180+ 976F              .ADDHLDEOppInvert:      NegHL
 180+ 976F AF          >                    xor a
 180+ 9770 95          >                    sub l
 180+ 9771 6F          >                    ld l,a
 180+ 9772 9F          >                    sbc a,a
 180+ 9773 94          >                    sub h
 180+ 9774 67          >                    ld h,a
 181+ 9775 78                                   ld      a,b
 182+ 9776 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 9778 B4                                   or      h
 184+ 9779 67                                   ld      h,a                         ; recover sign
 185+ 977A C9                                   ret
 186+ 977B              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 977B 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 977D 21 17 A0                             ld      hl,varDust
 189+ 9780 CD 7C 96     .InitStarsLoop:         call    InitStarAtHL
 190+ 9783 10 FB                                djnz    .InitStarsLoop
 191+ 9785 C9                                   ret
 192+ 9786              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ 9786 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 194+ 9788 21 17 A0                             ld      hl,varDust
 195+ 978B CD BA 96     .InitStarsLoop:         call    InitHyperStarAtHL
 196+ 978E 10 FB                                djnz    .InitStarsLoop
 197+ 9790 C9                                   ret
 198+ 9791              ;----------------------------------------------------------------------------------------------------------------------------------
 199+ 9791 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 200+ 9793 FD 21 17 A0                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 201+ 9797 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 202+ 9798 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 203+ 979B 5F                                   ld      e,a                                 ; d = 0
 204+ 979C 16 00                                ld      d,0                                 ; de = zhi/256
 205+ 979E 3A B9 9D                             ld      a,(DELTA)                           ; a = speed
 206+ 97A1                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 206+ 97A1 A7          >                        and     a
 206+ 97A2 C2 A6 97    >                        jp	    nz,.NormalSpeed
 207+ 97A5 3C                                   inc     a                                   ; so it is at least some dust movement
 208+ 97A6 47           .NormalSpeed:           ld      b,a                                 ;
 209+ 97A7 0E 00                                ld      c,0                                 ; bc = delta * 256
 210+ 97A9 CD 11 B1                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 211+ 97AC                                      ShiftHLRight1
 211+ 97AC CB 3C       >			   srl h
 211+ 97AE CB 1D       >			   rr  l
 212+ 97B0                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 212+ 97B0 CB 3C       >			   srl h
 212+ 97B2 CB 1D       >			   rr  l
 213+ 97B4 7D                                   ld      a,l                                 ;
 214+ 97B5 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 215+ 97B7 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 216+ 97B9 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 216+ 97BD 66 05
 217+ 97BF ED 5B BA 9D                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 218+ 97C3 CD 00 97                             call    StarsSUBHLDESigned
 219+ 97C6                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 219+ 97C6 CB 7C       >                        bit 	7,h
 219+ 97C8 C2 1D 99    >                        jp      nz,ResetStar
 220+ 97CB FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 220+ 97CF 74 05
 221+ 97D1 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 221+ 97D5 66 01
 222+ 97D7 7C                                   ld      a,h                                 ;
 223+ 97D8 E6 7F                                and     $7F                                 ;
 224+ 97DA 57                                   ld      d,a                                 ; d = abs(x hi)
 225+ 97DB DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 226+ 97DD ED 30                                mul                                         ; de =  abs(x hi) * Q
 227+ 97DF 7C                                   ld      a,h                                 ;
 228+ 97E0 E6 80                                and     $80                                 ;
 229+ 97E2 B2                                   or      d                                   ; set sign bit in d
 230+ 97E3 57                                   ld      d,a                                 ;
 231+ 97E4 CD 41 97                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 232+ 97E7 7C                                   ld      a,h
 233+ 97E8 E6 7F                                and     $7F
 234+ 97EA                                      JumpIfAGTENusng $70, ResetStar
 234+ 97EA FE 70       >                        cp     $70
 234+ 97EC D2 1D 99    >                        jp		nc,ResetStar
 235+ 97EF FD 75 00 FD                          ld      (iy+0),hl                           ;
 235+ 97F3 74 01
 236+ 97F5 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 236+ 97F9 66 03
 237+ 97FB 7C                                   ld      a,h                                 ;
 238+ 97FC E6 7F                                and     $7F                                 ;
 239+ 97FE 57                                   ld      d,a                                 ; d = abs(y hi)
 240+ 97FF DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 241+ 9801 ED 30                                mul                                         ; de =  abs(y hi) * Q
 242+ 9803 7C                                   ld      a,h                                 ;
 243+ 9804 E6 80                                and     $80                                 ;
 244+ 9806 B2                                   or      d                                   ; set sign bit in d
 245+ 9807 57                                   ld      d,a                                 ;
 246+ 9808 CD 41 97                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 247+ 980B 7C                                   ld      a,h
 248+ 980C E6 7F                                and     $7F
 249+ 980E                                      JumpIfAGTENusng $60, ResetStar
 249+ 980E FE 60       >                        cp     $60
 249+ 9810 D2 1D 99    >                        jp		nc,ResetStar
 250+ 9813 7C                                   ld      a,h
 251+ 9814 E6 80                                and     $80
 252+ 9816 20 06                                jr      nz,.NoSecondCheck
 253+ 9818 7C                                   ld      a,h
 254+ 9819                                      JumpIfAGTENusng $20, ResetStar
 254+ 9819 FE 20       >                        cp     $20
 254+ 981B D2 1D 99    >                        jp		nc,ResetStar
 255+ 981E FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 255+ 9822 74 03
 256+ 9824              ; Now roll
 257+ 9824              ;  6. x = x - alpha * y / 256
 258+ 9824 2A D4 9C     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 259+ 9827 7D                                   ld      a,l
 260+ 9828 FE 00                                cp      0
 261+ 982A 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 262+ 982C                                      ;break
 263+ 982C                                      ;ld      a,$80
 264+ 982C                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 265+ 982C E5                                   push    hl
 266+ 982D 7C                                   ld      a,h
 267+ 982E E6 80                                and     $80
 268+ 9830 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 269+ 9831 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 270+ 9832 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 271+ 9835 5F                                   ld      e,a
 272+ 9836 E6 80                                and     $80
 273+ 9838 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 274+ 9839 7B           .rxEEquABSignX:         ld      a,e
 275+ 983A E6 7F                                and     $7F
 276+ 983C 5F                                   ld      e,a                                 ; save abs x hi in e
 277+ 983D ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 278+ 983F 79                                   ld      a,c
 279+ 9840 A8                                   xor     b                                   ; handle muliple sign bits
 280+ 9841 B2                                   or      d
 281+ 9842 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 282+ 9843 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 282+ 9847 66 01
 283+ 9849 CD 00 97                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 284+ 984C FD 75 00 FD                          ld      (iy+0),hl
 284+ 9850 74 01
 285+ 9852              ;  5. y = y + alpha * x / 256
 286+ 9852              .YRoll:                 ;break
 287+ 9852 E1                                   pop     hl                                  ; h = sign, l = magnitude
 288+ 9853 7C                                   ld      a,h
 289+ 9854 E6 80                                and     $80
 290+ 9856 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 291+ 9857 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 292+ 9858 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 293+ 985B 5F                                   ld      e,a
 294+ 985C E6 80                                and     $80
 295+ 985E 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 296+ 985F 7B           .ryEEquABSignX:         ld      a,e
 297+ 9860 E6 7F                                and     $7F
 298+ 9862 5F                                   ld      e,a                                 ; save abs x hi in e
 299+ 9863 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 300+ 9865 79                                   ld      a,c
 301+ 9866 A8                                   xor     b                                   ; handle muliple sign bits
 302+ 9867 B2                                   or      d
 303+ 9868 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 304+ 9869 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 304+ 986D 66 03
 305+ 986F CD 41 97                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 306+ 9872 FD 75 02 FD                          ld      (iy+2),hl
 306+ 9876 74 03
 307+ 9878 3A C7 9C     .NoRoll:                ld      a,(BET1)
 308+ 987B FE 00                                cp      0
 309+ 987D 28 22                                jr      z,.NoPitch
 310+ 987F              ;  8. y = y - beta * 256
 311+ 987F 57           .YPitch:                ld      d,a                                 ; d = BET1
 312+ 9880 FD 7E 02                             ld      a,(iy+2)
 313+ 9883 5F                                   ld      e,a                                 ; e = Y HI
 314+ 9884 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 315+ 9886 5F                                   ld      e,a
 316+ 9887 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 317+ 9889                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 317+ 9889 CB 23       >			   sla e
 317+ 988B CB 12       >			   rl  d
 318+ 988D 3A C9 9C                             ld      a,(BET2FLIP)                        ; get inverted Sign
 319+ 9890 B2                                   or      d
 320+ 9891 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 321+ 9892 FD 6E 02 FD                          ld      hl,(iy+2)
 321+ 9896 66 03
 322+ 9898 CD 41 97                             call    StarsADDHLDESigned
 323+ 989B FD 75 02 FD                          ld      (iy+2),hl
 323+ 989F 74 03
 324+ 98A1              ; now work out screen pos
 325+ 98A1              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 326+ 98A1              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 327+ 98A1              ;        pop     de
 328+ 98A1               ;       call    ProjectStarXToScreen
 329+ 98A1                                      ;pop     de
 330+ 98A1              .NoPitch:
 331+ 98A1 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 332+ 98A4 6F                                   ld      l,a
 333+ 98A5 E6 7F                                and     $7F
 334+ 98A7                                      JumpOnBitSet l,7,StarNegXPt
 334+ 98A7 CB 7D       >                        bit 	7,l
 334+ 98A9 C2 B2 98    >                        jp      nz,StarNegXPt
 335+ 98AC C6 80                                add     a,$80
 336+ 98AE 4F                                   ld      c,a
 337+ 98AF C3 B7 98                             jp      StarDoneX
 338+ 98B2 47           StarNegXPt:             ld      b,a
 339+ 98B3 3E 80                                ld      a,$80
 340+ 98B5 90                                   sub     b
 341+ 98B6 4F                                   ld      c,a
 342+ 98B7 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 343+ 98BA 6F                                   ld      l,a
 344+ 98BB E6 7F                                and     $7F
 345+ 98BD                                      JumpOnBitSet l,7,StarNegYPt
 345+ 98BD CB 7D       >                        bit 	7,l
 345+ 98BF C2 C8 98    >                        jp      nz,StarNegYPt
 346+ 98C2 C6 60                                add     a,$60
 347+ 98C4 47                                   ld      b,a
 348+ 98C5 C3 CD 98                             jp      StarDoneY
 349+ 98C8 47           StarNegYPt:             ld      b,a
 350+ 98C9 3E 60                                ld      a,$60
 351+ 98CB 90                                   sub     b
 352+ 98CC 47                                   ld      b,a
 353+ 98CD 3E 92        StarDoneY:              ld      a,L2DustColour
 354+ 98CF C5                                   push    bc
 355+ 98D0              .DrawStar:              MMUSelectLayer2
 355+ 98D0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 355+ 98D4 CD 29 E1       call    l2_plot_pixel
 356+ 98D7 FD 7E 05                             ld      a,(iy+5)
 357+ 98DA C1                                   pop    bc
 358+ 98DB                                      JumpIfAGTENusng $60,EndofStarsLoop
 358+ 98DB FE 60       >                        cp     $60
 358+ 98DD D2 0D 99    >                        jp		nc,EndofStarsLoop
 359+ 98E0 3E 92                                ld      a,L2DustColour
 360+ 98E2 0C                                   inc     c
 361+ 98E3 C5                                   push    bc
 362+ 98E4                                      MMUSelectLayer2
 362+ 98E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 98E8 CD 29 E1                             call    l2_plot_pixel
 364+ 98EB FD 7E 05                             ld      a,(iy+5)
 365+ 98EE C1                                   pop    bc
 366+ 98EF                                      JumpIfAGTENusng $37,EndofStarsLoop
 366+ 98EF FE 37       >                        cp     $37
 366+ 98F1 D2 0D 99    >                        jp		nc,EndofStarsLoop
 367+ 98F4 3E 92                                ld      a,L2DustColour
 368+ 98F6 04                                   inc     b
 369+ 98F7 C5                                   push    bc
 370+ 98F8                                      MMUSelectLayer2
 370+ 98F8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 370+ 98FC CD 29 E1         call    l2_plot_pixel
 371+ 98FF FD 7E 05                             ld      a,(iy+5)
 372+ 9902 C1                                   pop    bc
 373+ 9903 3E 92                                ld      a,L2DustColour
 374+ 9905 0D                                   dec     c
 375+ 9906                                      MMUSelectLayer2
 375+ 9906 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 375+ 990A CD 29 E1         call    l2_plot_pixel
 376+ 990D C1           EndofStarsLoop:         pop     bc                                      ;  0
 377+ 990E FD E5        NextStarLoop3:          push    iy                                      ; +1
 378+ 9910 E1                                   pop     hl                                      ;  0
 379+ 9911 ED 34 06 00                          add     hl,6
 380+ 9915 E5           NextStarLoop2:          push    hl                                      ; +1
 381+ 9916 FD E1                                pop     iy                                      ;  0
 382+ 9918 05                                   dec     b
 383+ 9919 C2 97 97                             jp      nz,StarProcessLoop
 384+ 991C C9                                   ret
 385+ 991D C1           ResetStar:              pop     bc                                      ; 0
 386+ 991E FD E5                                push    iy                                      ; +1 (current star)
 387+ 9920 E1                                   pop     hl                                      ; 0
 388+ 9921 CD 7C 96                             call    InitStarAtHL
 389+ 9924 C3 0E 99                             jp      NextStarLoop3
 390+ 9927              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ 9927 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 392+ 992A FD 7E 01                             ld      a,(iy+1)
 393+ 992D 6F                                   ld      l,a
 394+ 992E E6 7F                                and     $7F
 395+ 9930 47                                   ld      b,a
 396+ 9931 CD 76 B0                             call    DIV16BCDivDEUNDOC
 397+ 9934 7D                                   ld      a,l
 398+ 9935                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 398+ 9935 CB 7F       >                        bit 	7,a
 398+ 9937 C2 42 99    >                        jp      nz,StarXNegativePoint
 399+ 993A              ;StarXPositivePoint:									; x was positive result
 400+ 993A 2E 80                                ld          l,ScreenCenterX						;
 401+ 993C 26 00                                ld          h,0
 402+ 993E 09                                   add         hl,bc								; hl = Screen Centre + X
 403+ 993F C3 49 99                             jp          StarStoreXPoint
 404+ 9942              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 405+ 9942 2E 80                                ld          l,ScreenCenterX
 406+ 9944 26 00                                ld          h,0
 407+ 9946                                      ClearCarryFlag
 407+ 9946 B7          >                        or a
 408+ 9947 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 409+ 9949              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 410+ 9949 7D                                   ld          a,l
 411+ 994A 32 6F A0                             ld          (varStarX),a
 412+ 994D C9                                   ret
 413+ 994E
 414+ 994E FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 415+ 9951 FD 7E 03                             ld          a,(iy+3)
 416+ 9954 6F                                   ld          l,a
 417+ 9955 E6 7F                                and         $7F
 418+ 9957 47                                   ld          b,a
 419+ 9958 CD 76 B0                             call        DIV16BCDivDEUNDOC
 420+ 995B 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 421+ 995C                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 421+ 995C CB 7F       >                        bit 	7,a
 421+ 995E C2 69 99    >                        jp      nz,StarNegativeYPoint
 422+ 9961                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 423+ 9961 2E 60                               ld          l,ScreenCenterY
 424+ 9963                                      ClearCarryFlag
 424+ 9963 B7          >                        or a
 425+ 9964 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 426+ 9966 C3 6E 99                             jp          StarStoreYPoint
 427+ 9969              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 428+ 9969 2E 60                                ld          l,ScreenCenterY
 429+ 996B 26 00                                ld          h,0
 430+ 996D 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 431+ 996E              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 432+ 996E 7D                                   ld          a,l
 433+ 996F 32 70 A0                             ld          (varStarY),a
 434+ 9972 C9                                   ret
 435+ 9973
 436+ 9973
# file closed: ./Universe/StarDust/StarRoutines.asm
1191  9973              ;    include "Universe/move_object-MVEIT.asm"
1192  9973              ;    include "./ModelRender/draw_object.asm"
1193  9973              ;    include "./ModelRender/draw_ship_point.asm"
1194  9973              ;    include "./ModelRender/drawforwards-LL17.asm"
1195  9973              ;    include "./ModelRender/drawforwards-LL17.asm"
1196  9973
1197  9973                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 9973
   2+ 9973 00           memfillvalue		DB 0
   3+ 9974 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 9978 7D
   4+ 9979 73 99        memfill_astrt  		DW memfillvalue
   5+ 997B 00 40        memfill_length 		DB $00,$40
   6+ 997D 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 9980 00 00        memfill_bstrt  		DB $00,$00
   8+ 9982 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 9986              memfill_cmd_len	  	EQU $ - memfill
  10+ 9986
  11+ 9986              memfill_dma:
  12+ 9986              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 9986              .set_fill_value:
  14+ 9986 32 73 99     	ld 		(memfillvalue),a
  15+ 9989              .set_target:
  16+ 9989 22 80 99     	ld		(memfill_bstrt),hl
  17+ 998C              .set_length:
  18+ 998C ED 53 7B 99  	ld		(memfill_length),de
  19+ 9990              .write_dma:
  20+ 9990 21 74 99     	ld 		hl, memfill
  21+ 9993 06 12        	ld 		b, memfill_cmd_len
  22+ 9995 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 9997 ED B3        	otir
  24+ 9999 C9           	ret
  25+ 999A
# file closed: ./Hardware/memfill_dma.asm
1198  999A                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 999A
   2+ 999A 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 999E 7D
   3+ 999F 00 00        memcopy_astrt  		DB $00,$00
   4+ 99A1 00 40        memcopy_length 		DB $00,$40
   5+ 99A3 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 99A6 00 00        memcopy_bstrt  		DB $00,$00
   7+ 99A8 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 99AC              memcopy_cmd_len	  	equ $ - memcopy
   9+ 99AC
  10+ 99AC              memcopy_dma:
  11+ 99AC              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 99AC              .set_target:
  13+ 99AC 22 A6 99     	ld		(memcopy_bstrt),hl
  14+ 99AF              .set_source:
  15+ 99AF ED 53 9F 99  	ld		(memcopy_astrt),de
  16+ 99B3              .set_length:
  17+ 99B3 ED 43 A1 99  	ld		(memcopy_length),bc
  18+ 99B7              .write_dma:
  19+ 99B7 21 9A 99     	ld 		hl, memcopy
  20+ 99BA 06 12        	ld 		b, memcopy_cmd_len
  21+ 99BC 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 99BE ED B3        	otir
  23+ 99C0 C9           	ret
  24+ 99C1
# file closed: ./Hardware/memcopy_dma.asm
1199  99C1 00 00        XX12PVarQ			DW 0
1200  99C3 00 00        XX12PVarR			DW 0
1201  99C5 00 00        XX12PVarS			DW 0
1202  99C7 00 00        XX12PVarResult1		DW 0
1203  99C9 00 00        XX12PVarResult2		DW 0
1204  99CB 00 00        XX12PVarResult3		DW 0
1205  99CD 00           XX12PVarSign2		DB 0
1206  99CE 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1207  99CF 00           XX12PVarSign3		DB 0
1208  99D0                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 99D0              ;
   2+ 99D0              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 99D0              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 99D0              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 99D0              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 99D0              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 99D0              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 99D0              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 99D0              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 99D0              ;
  11+ 99D0              ; Keyboard
  12+ 99D0              ;
  13+ 99D0              ;   0      1       2       3       4       5        6       7       8       9
  14+ 99D0              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 99D0              ;   10     11      12      13      14      15       16      17      18      19
  16+ 99D0              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 99D0              ;   20     21      22      23      24      25       26      27      28      29
  18+ 99D0              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 99D0              ;   30     31      32      33      34      35       36      37      38      39
  20+ 99D0              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 99D0              ;
  22+ 99D0              ; Default map
  23+ 99D0              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 99D0              ;   0          1           2             3              4           5           6           7           8           9
  25+ 99D0              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 99D0              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 99D0              ;                                                                                                       Find System
  28+ 99D0              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 99D0              ;   10         11          12            13             14          15          16          17          18          19
  30+ 99D0              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 99D0              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 99D0              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 99D0              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 99D0              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 99D0              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 99D0              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 99D0              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 99D0              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 99D0              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 99D0              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 99D0              ;              ResumeGame
  42+ 99D0
  43+ 99D0              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 99D0
  45+ 99D0              c_Pressed_Front         equ 0  * 2
  46+ 99D0              c_Pressed_Aft           equ 1  * 2
  47+ 99D0              c_Pressed_Left          equ 2  * 2
  48+ 99D0              c_Pressed_Right         equ 3  * 2
  49+ 99D0              c_Pressed_RollLeft      equ 4  * 2
  50+ 99D0              c_Pressed_RollRight     equ 5  * 2
  51+ 99D0              c_Pressed_Dive          equ 6  * 2
  52+ 99D0              c_Pressed_Climb         equ 7  * 2
  53+ 99D0              c_Pressed_Accellerate   equ 8  * 2
  54+ 99D0              c_Pressed_Decellerate   equ 9  * 2
  55+ 99D0              c_Pressed_FireLaser     equ 10 * 2
  56+ 99D0              c_Pressed_TargetMissle  equ 11 * 2
  57+ 99D0              c_Pressed_FireMissile   equ 12 * 2
  58+ 99D0              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 99D0              c_Pressed_ECM           equ 14 * 2
  60+ 99D0              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 99D0              c_Pressed_EscapePod     equ 16 * 2
  62+ 99D0              c_Pressed_DockingComp   equ 17 * 2
  63+ 99D0              c_Pressed_Hyperspace    equ 18 * 2
  64+ 99D0              c_Pressed_Distance      equ 19 * 2
  65+ 99D0              c_Pressed_HomeCursor    equ 20 * 2
  66+ 99D0              c_Pressed_Launch        equ 21 * 2
  67+ 99D0              c_Pressed_BuyCargo      equ 22 * 2
  68+ 99D0              c_Pressed_SellCargo     equ 23 * 2
  69+ 99D0              c_Pressed_Equip         equ 24 * 2
  70+ 99D0              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 99D0              c_Pressed_LocalChart    equ 26 * 2
  72+ 99D0              c_Pressed_MarketPrices  equ 27 * 2
  73+ 99D0              c_Pressed_Status        equ 28 * 2
  74+ 99D0              c_Pressed_Inventory     equ 29 * 2
  75+ 99D0              c_Pressed_GameSkip      equ 30 * 2
  76+ 99D0              c_Pressed_Save          equ 31 * 2
  77+ 99D0              c_Pressed_Freeze        equ 32 * 2
  78+ 99D0              c_Pressed_Resume        equ 33 * 2
  79+ 99D0              c_Pressed_Recentre      equ 34 * 2
  80+ 99D0              c_Pressed_Quit          equ 35 * 2
  81+ 99D0              c_Pressed_PlanetData    equ 36 * 2
  82+ 99D0              c_Pressed_CursorUp      equ 37 * 2
  83+ 99D0              c_Pressed_CursorDown    equ 38 * 2
  84+ 99D0              c_Pressed_Find          equ 39 * 2
  85+ 99D0              c_Pressed_Yes           equ 40 * 2
  86+ 99D0              c_Pressed_No            equ 41 * 2
  87+ 99D0
  88+ 99D0
  89+ 99D0              ; half row 1
  90+ 99D0              VK_CAPS  				equ 0
  91+ 99D0              VK_Z  					equ 1
  92+ 99D0              VK_X  					equ 2
  93+ 99D0              VK_C  					equ 3
  94+ 99D0              VK_V  					equ 4
  95+ 99D0              ; half row 2
  96+ 99D0              VK_A  					equ 5
  97+ 99D0              VK_S  					equ 6
  98+ 99D0              VK_D  					equ 7
  99+ 99D0              VK_F  					equ 8
 100+ 99D0              VK_G  					equ 9
 101+ 99D0              ; half row 3
 102+ 99D0              VK_Q  					equ 10
 103+ 99D0              VK_W  					equ 11
 104+ 99D0              VK_E  					equ 12
 105+ 99D0              VK_R  					equ 13
 106+ 99D0              VK_T  					equ 14
 107+ 99D0              ; half row 4
 108+ 99D0              VK_1  					equ 15
 109+ 99D0              VK_2  					equ 16
 110+ 99D0              VK_3  					equ 17
 111+ 99D0              VK_4  					equ 18
 112+ 99D0              VK_5  					equ 19
 113+ 99D0              ; half row 5
 114+ 99D0              VK_0 					equ 20
 115+ 99D0              VK_9 					equ 21
 116+ 99D0              VK_8 					equ 22
 117+ 99D0              VK_7 					equ 23
 118+ 99D0              VK_6 					equ 24
 119+ 99D0              ; half row 6
 120+ 99D0              VK_P  					equ 25
 121+ 99D0              VK_O  					equ 26
 122+ 99D0              VK_I  					equ 27
 123+ 99D0              VK_U  					equ 28
 124+ 99D0              VK_Y  					equ 29
 125+ 99D0              ; half row 7
 126+ 99D0              VK_ENTER 				equ 30
 127+ 99D0              VK_L  					equ 31
 128+ 99D0              VK_K  					equ 32
 129+ 99D0              VK_J  					equ 33
 130+ 99D0              VK_H  					equ 34
 131+ 99D0              ; half row 8
 132+ 99D0              VK_SPACE 				equ 35
 133+ 99D0              VK_SYM  				equ 36
 134+ 99D0              VK_M  					equ 37
 135+ 99D0              VK_N  					equ 38
 136+ 99D0              VK_B  					equ 39
 137+ 99D0
 138+ 99D0              ;KeyboardMapping
 139+ 99D0              KeyCode_Front        	equ VK_1
 140+ 99D0              KeyCode_Aft          	equ VK_2
 141+ 99D0              KeyCode_Left         	equ VK_3
 142+ 99D0              KeyCode_Right        	equ VK_4
 143+ 99D0              KeyCode_RollLeft     	equ VK_O
 144+ 99D0              KeyCode_RollRight    	equ VK_P
 145+ 99D0              KeyCode_Dive         	equ VK_Q
 146+ 99D0              KeyCode_Climb        	equ VK_A
 147+ 99D0              KeyCode_Accellerate  	equ VK_W
 148+ 99D0              KeyCode_Decellerate  	equ VK_S
 149+ 99D0              KeyCode_FireLaser    	equ VK_SPACE
 150+ 99D0              KeyCode_TargetMissle 	equ VK_T
 151+ 99D0              KeyCode_FireMissile  	equ VK_F
 152+ 99D0              KeyCode_Find        	equ VK_F
 153+ 99D0              KeyCode_UnarmMissile 	equ VK_R
 154+ 99D0              KeyCode_ECM          	equ VK_E
 155+ 99D0              KeyCode_EnergyBomb   	equ VK_U
 156+ 99D0              KeyCode_EscapePod    	equ VK_CAPS
 157+ 99D0              KeyCode_DockingComp  	equ VK_N
 158+ 99D0              KeyCode_Hyperspace   	equ VK_H
 159+ 99D0              KeyCode_Distance     	equ VK_J
 160+ 99D0              KeyCode_HomeCursor   	equ VK_G
 161+ 99D0              KeyCode_Launch       	equ VK_L
 162+ 99D0              KeyCode_BuyCargo     	equ VK_B
 163+ 99D0              KeyCode_SellCargo    	equ VK_V
 164+ 99D0              KeyCode_Equip        	equ VK_C
 165+ 99D0              KeyCode_GalacticChrt 	equ VK_5
 166+ 99D0              KeyCode_LocalChart   	equ VK_6
 167+ 99D0              KeyCode_MarketPrices 	equ VK_7
 168+ 99D0              KeyCode_Status       	equ VK_8
 169+ 99D0              KeyCode_Inventory    	equ VK_9
 170+ 99D0              KeyCode_GameSkip     	equ VK_Z
 171+ 99D0              KeyCode_Save         	equ VK_O
 172+ 99D0              KeyCode_Freeze       	equ VK_B
 173+ 99D0              KeyCode_Resume       	equ VK_L
 174+ 99D0              KeyCode_Recentre     	equ VK_D
 175+ 99D0              KeyCode_Quit         	equ VK_Y
 176+ 99D0              KeyCode_PlanetData   	equ VK_0
 177+ 99D0              KeyCode_CursorUp        equ VK_Q
 178+ 99D0              KeyCode_CursorDown      equ VK_A
 179+ 99D0              KeyCode_PressedYes      equ VK_Y
 180+ 99D0              KeyCode_PressedNo       equ VK_N
 181+ 99D0
 182+ 99D0 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 183+ 99F8              c_KeyBoardLen 			equ $ - Keys
 184+ 99F8 00 00 00...  RawKeys					DS	8
 185+ 9A00 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 185+ 9A04 EF DF BF 7F
 186+ 9A08              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 187+ 9A08              ; of updating this table with the respective location to look up
 188+ 9A08              ; key list sequence is in table above
 189+ 9A08 DF 99 E0 99  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 189+ 9A0C E1 99 E2 99
 189+ 9A10 EA 99
 190+ 9A12 E9 99 DA 99                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 190+ 9A16 D5 99 DB 99
 190+ 9A1A D6 99
 191+ 9A1C F3 99 DE 99                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 191+ 9A20 D8 99 DD 99
 191+ 9A24 DC 99
 192+ 9A26 EC 99 D0 99                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 192+ 9A2A F6 99 F2 99
 192+ 9A2E F1 99
 193+ 9A30 D9 99 EF 99                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 193+ 9A34 F7 99 D4 99
 193+ 9A38 D3 99
 194+ 9A3A E3 99 E8 99                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 194+ 9A3E E7 99 E6 99
 194+ 9A42 E5 99
 195+ 9A44 D1 99 EA 99                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 195+ 9A48 F7 99 EF 99
 195+ 9A4C D7 99
 196+ 9A4E ED 99 E4 99                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 196+ 9A52 DA 99 D5 99
 196+ 9A56 D8 99
 197+ 9A58 ED 99 F6 99                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo
 198+ 9A5C
 199+ 9A5C 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 199+ 9A60 56
 200+ 9A61 41 53 44 46                          DB "A","S","D","F","G"
 200+ 9A65 47
 201+ 9A66 51 57 45 52                          DB "Q","W","E","R","T"
 201+ 9A6A 54
 202+ 9A6B 31 32 33 34                          DB "1","2","3","4","5"
 202+ 9A6F 35
 203+ 9A70 30 39 38 37                          DB "0","9","8","7","6"
 203+ 9A74 36
 204+ 9A75 50 4F 49 55                          DB "P","O","I","U","Y"
 204+ 9A79 59
 205+ 9A7A 3E 4C 4B 4A                          DB ">","L","K","J","H"
 205+ 9A7E 48
 206+ 9A7F 20 5E 4D 4E                          DB " ","^","M","N","B"
 206+ 9A83 42
 207+ 9A84
 208+ 9A84              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 209+ 9A84              ; for the raw key press status
 210+ 9A84              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 211+ 9A84              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 212+ 9A84              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 213+ 9A84              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 214+ 9A84              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 215+ 9A84              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 216+ 9A84              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 217+ 9A84              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 218+ 9A84              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 219+ 9A84              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 220+ 9A84              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 221+ 9A84              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 222+ 9A84              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 223+ 9A84              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 224+ 9A84              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 225+ 9A84              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 226+ 9A84              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 227+ 9A84              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 228+ 9A84              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 229+ 9A84              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 230+ 9A84              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 231+ 9A84              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 232+ 9A84              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 233+ 9A84              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 234+ 9A84              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 235+ 9A84              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 236+ 9A84              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 237+ 9A84              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 238+ 9A84              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 239+ 9A84              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 240+ 9A84              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 241+ 9A84              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 242+ 9A84              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 243+ 9A84              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 244+ 9A84              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 245+ 9A84              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 246+ 9A84              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 247+ 9A84              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 248+ 9A84              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 249+ 9A84              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 250+ 9A84
 251+ 9A84
 252+ 9A84              MIsKeyPressed:          MACRO   keyaddress, misstarget
 253+ 9A84 ~                                    ld      hl,(keyaddress)
 254+ 9A84 ~                                    ld      a,(hl)
 255+ 9A84 ~                                    JumpIfAIsZero   misstarget
 256+ 9A84                                      ENDM
 257+ 9A84
 258+ 9A84 21 D0 99     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 259+ 9A87 11 28 00                             ld		de, c_KeyBoardLen               ;
 260+ 9A8A 3E 00                                ld		a,0                             ;
 261+ 9A8C CD 86 99                             call	memfill_dma                     ;
 262+ 9A8F C9                                   ret                                     ;
 263+ 9A90
 264+ 9A90
 265+ 9A90
 266+ 9A90 DD 21 F8 99  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 267+ 9A94 21 00 9A                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 268+ 9A97 0E 08                                ld		c,8                             ; 8 ports to ready
 269+ 9A99 11 D0 99                             ld      de,Keys                         ; ix = table of key states from raw read
 270+ 9A9C 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 271+ 9A9D DB FE                                in		a,($FE)							; read port to a
 272+ 9A9F DD 77 00                             ld      (ix+0),a                        ; save raw scan
 273+ 9AA2 DD 23                                inc     ix
 274+ 9AA4 23                                   inc		hl                              ; and ready for next read
 275+ 9AA5 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 276+ 9AA7 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 277+ 9AA8 CB 47                                bit		0,a								; is bit set
 278+ 9AAA 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 279+ 9AAC FD 6F                                ld      iyl,a
 280+ 9AAE                                      ZeroA
 280+ 9AAE AF          >                        xor a
 281+ 9AAF C3 BC 9A                             jp      .SetKey
 282+ 9AB2 20 0B                                jr		nz,.SkipKeySet
 283+ 9AB4 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 284+ 9AB6 1A                                   ld      a,(de)                          ; get current keystate
 285+ 9AB7 FE 02                                cp      2
 286+ 9AB9 28 02                                jr      z,.AlreadyHeld
 287+ 9ABB 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 288+ 9ABC 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 289+ 9ABD FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 290+ 9ABF 13           .SkipKeySet:	        inc		de								; move to next key
 291+ 9AC0 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 292+ 9AC2 0D                                   dec     c                               ; thats one row of bits all processed
 293+ 9AC3 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 294+ 9AC5 C9                                   ret
 295+ 9AC6
 296+ 9AC6
 297+ 9AC6
 298+ 9AC6              GetKeyStateAddressDE:   MACRO
 299+ 9AC6 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 300+ 9AC6 ~                                    add     hl,a
 301+ 9AC6 ~                                    ld      e,(hl)
 302+ 9AC6 ~                                    inc     hl
 303+ 9AC6 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 304+ 9AC6                                      ENDM
 305+ 9AC6
 306+ 9AC6              GetKeyStateAddressHL:   MACRO
 307+ 9AC6 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 308+ 9AC6 ~                                    add     hl,a
 309+ 9AC6 ~                                    ld      a,(hl)
 310+ 9AC6 ~                                    inc     hl
 311+ 9AC6 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 312+ 9AC6 ~                                    ld      l,a
 313+ 9AC6                                      ENDM
 314+ 9AC6
 315+ 9AC6
 316+ 9AC6              ;;old debug codeCurrentX            DB 0
 317+ 9AC6              ;;old debug codeCurrentY            DB 0
 318+ 9AC6              ;;old debug code
 319+ 9AC6              ;;old debug codedisplayKeyStatus:       xor         a
 320+ 9AC6              ;;old debug code                        ld          (CurrentX),a
 321+ 9AC6              ;;old debug code                        ld          hl,RawKeys
 322+ 9AC6              ;;old debug code                        ld          a,(hl)
 323+ 9AC6              ;;old debug code                        and         %00011111
 324+ 9AC6              ;;old debug code                        ld          b,5
 325+ 9AC6              ;;old debug code.displayLoop:           push        bc,,hl
 326+ 9AC6              ;;old debug code                        rra
 327+ 9AC6              ;;old debug code                        jr          c,.displayNoPress
 328+ 9AC6              ;;old debug code.displayPress:          push        af
 329+ 9AC6              ;;old debug code                        ld          a,(CurrentX)
 330+ 9AC6              ;;old debug code                        ld          e,a
 331+ 9AC6              ;;old debug code                        ld          a,(CurrentY)
 332+ 9AC6              ;;old debug code                        ld          d,a
 333+ 9AC6              ;;old debug code                        ld          a,'*'
 334+ 9AC6              ;;old debug code                        MMUSelectLayer1
 335+ 9AC6              ;;old debug code                        call        l1_print_char
 336+ 9AC6              ;;old debug code                        ld          a,(CurrentX)
 337+ 9AC6              ;;old debug code                        add         a,8
 338+ 9AC6              ;;old debug code                        ld          (CurrentX),a
 339+ 9AC6              ;;old debug code                        pop         af
 340+ 9AC6              ;;old debug code                        pop         bc,,hl
 341+ 9AC6              ;;old debug code                        djnz        .displayLoop
 342+ 9AC6              ;;old debug code                        ret
 343+ 9AC6              ;;old debug code.displayNoPress:        push        af
 344+ 9AC6              ;;old debug code                        ld          a,(CurrentX)
 345+ 9AC6              ;;old debug code                        ld          e,a
 346+ 9AC6              ;;old debug code                        ld          a,(CurrentY)
 347+ 9AC6              ;;old debug code                        ld          d,a
 348+ 9AC6              ;;old debug code                        ld          a,'O'
 349+ 9AC6              ;;old debug code                        MMUSelectLayer1
 350+ 9AC6              ;;old debug code                        call        l1_print_char
 351+ 9AC6              ;;old debug code                        ld          a,(CurrentX)
 352+ 9AC6              ;;old debug code                        add         a,8
 353+ 9AC6              ;;old debug code                        ld          (CurrentX),a
 354+ 9AC6              ;;old debug code                        pop         af
 355+ 9AC6              ;;old debug code                        pop         bc,,hl
 356+ 9AC6              ;;old debug code                        djnz        .displayLoop
 357+ 9AC6              ;;old debug code                        ret
 358+ 9AC6              ;;old debug code
 359+ 9AC6              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 360+ 9AC6              ;;old debug code                        cp  0
 361+ 9AC6              ;;old debug code                        jr      z,.displayNoUp
 362+ 9AC6              ;;old debug code                        cp  1
 363+ 9AC6              ;;old debug code                        jr      z,.displayUp
 364+ 9AC6              ;;old debug code.displayHeld:           ld      de,8*15
 365+ 9AC6              ;;old debug code                        ld      a,"*"
 366+ 9AC6              ;;old debug code                        MMUSelectLayer1
 367+ 9AC6              ;;old debug code                        call        l1_print_char
 368+ 9AC6              ;;old debug code                        ret
 369+ 9AC6              ;;old debug code.displayUp:             ld      de,8*15
 370+ 9AC6              ;;old debug code                        ld      a,"+"
 371+ 9AC6              ;;old debug code                        MMUSelectLayer1
 372+ 9AC6              ;;old debug code                        call        l1_print_char
 373+ 9AC6              ;;old debug code                        ret
 374+ 9AC6              ;;old debug code.displayNoUp:             ld      de,8*15
 375+ 9AC6              ;;old debug code                        ld      a,"O"
 376+ 9AC6              ;;old debug code                        MMUSelectLayer1
 377+ 9AC6              ;;old debug code                        call        l1_print_char
 378+ 9AC6              ;;old debug code                        ret
 379+ 9AC6              ;;old debug code
 380+ 9AC6
 381+ 9AC6
 382+ 9AC6              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 383+ 9AC6              ; it will have to be let go to reset of 0 and scan again
 384+ 9AC6              ; Deprecated as not used as yet
 385+ 9AC6              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 386+ 9AC6              ;;;;;;                        push    hl
 387+ 9AC6              ;;;;;;.wait_loop:             call    scan_keyboard
 388+ 9AC6              ;;;;;;                        pop     hl                              ; get key address into hl
 389+ 9AC6              ;;;;;;                        push    hl
 390+ 9AC6              ;;;;;;                        ld      a,(hl)
 391+ 9AC6              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 392+ 9AC6              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 393+ 9AC6              ;;;;;;                        ret
 394+ 9AC6              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 395+ 9AC6              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 396+ 9AC6              ;;;;;;                        push    hl
 397+ 9AC6              ;;;;;;.wait_loop:             call    scan_keyboard
 398+ 9AC6              ;;;;;;                        pop     hl
 399+ 9AC6              ;;;;;;                        push    hl
 400+ 9AC6              ;;;;;;                        ld      a,(hl)
 401+ 9AC6              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 402+ 9AC6              ;;;;;;                        pop     hl
 403+ 9AC6              ;;;;;;                        ret
 404+ 9AC6
 405+ 9AC6              ; Gets the current keystate of the c_Pressed Key in a register
 406+ 9AC6              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 406+ 9AC6 21 08 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 406+ 9AC9 ED 31       >                        add     hl,a
 406+ 9ACB 7E          >                        ld      a,(hl)
 406+ 9ACC 23          >                        inc     hl
 406+ 9ACD 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 406+ 9ACE 6F          >                        ld      l,a
 407+ 9ACF 7E                                   ld      a,(hl)                          ; a = keystate
 408+ 9AD0 C9                                   ret
 409+ 9AD1
 410+ 9AD1              ; sets they keystate of c pressed key in a register to 1 (pressed)
 411+ 9AD1              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 411+ 9AD1 21 08 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 9AD4 ED 31       >                        add     hl,a
 411+ 9AD6 7E          >                        ld      a,(hl)
 411+ 9AD7 23          >                        inc     hl
 411+ 9AD8 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 9AD9 6F          >                        ld      l,a
 412+ 9ADA 3E 01                                ld      a,1
 413+ 9ADC 77                                   ld      (hl),a
 414+ 9ADD C9                                   ret
 415+ 9ADE
 416+ 9ADE              is_key_up_state:        GetKeyStateAddressHL
 416+ 9ADE 21 08 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 416+ 9AE1 ED 31       >                        add     hl,a
 416+ 9AE3 7E          >                        ld      a,(hl)
 416+ 9AE4 23          >                        inc     hl
 416+ 9AE5 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 416+ 9AE6 6F          >                        ld      l,a
 417+ 9AE7 7E                                   ld      a,(hl)
 418+ 9AE8 FE 00                                cp      0
 419+ 9AEA C9                                   ret
 420+ 9AEB
 421+ 9AEB              ; returns z is set if c_ key is pressed
 422+ 9AEB              is_key_pressed:         GetKeyStateAddressHL
 422+ 9AEB 21 08 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 422+ 9AEE ED 31       >                        add     hl,a
 422+ 9AF0 7E          >                        ld      a,(hl)
 422+ 9AF1 23          >                        inc     hl
 422+ 9AF2 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 422+ 9AF3 6F          >                        ld      l,a
 423+ 9AF4 7E                                   ld      a,(hl)                          ; a = keystate
 424+ 9AF5 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 425+ 9AF7 C9                                   ret
 426+ 9AF8
 427+ 9AF8              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 428+ 9AF8              is_key_held:            GetKeyStateAddressHL
 428+ 9AF8 21 08 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 428+ 9AFB ED 31       >                        add     hl,a
 428+ 9AFD 7E          >                        ld      a,(hl)
 428+ 9AFE 23          >                        inc     hl
 428+ 9AFF 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 428+ 9B00 6F          >                        ld      l,a
 429+ 9B01 7E                                   ld      a,(hl)                          ; a = keystate
 430+ 9B02 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 431+ 9B04 C9                                   ret
 432+ 9B05
 433+ 9B05              ; checks to see if any key is pressed in the key table
 434+ 9B05 21 D0 99     is_any_key_pressed:     ld      hl,Keys
 435+ 9B08 01 28 00                             ld      bc,40
 436+ 9B0B 3E 01                                ld      a,1
 437+ 9B0D ED B1                                cpir                                    ; search for the value 1
 438+ 9B0F 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 439+ 9B11                                      SetAFalse
 439+ 9B11 3E FF       >                        ld      a,$FF
 440+ 9B13 C9                                   ret
 441+ 9B14 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 442+ 9B16 91                                   sub     c                               ; so a = 40 - c to get to result
 443+ 9B17 C9                                   ret
 444+ 9B18
 445+ 9B18 21 D0 99     is_any_key_held:        ld      hl,Keys
 446+ 9B1B 06 28                                ld      b,40
 447+ 9B1D 0E 00                                ld      c,0
 448+ 9B1F 7E           .KeyReadLoop:           ld      a,(hl)
 449+ 9B20 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 450+ 9B22 C2 2C 9B                             jp      nz,.KeyPressed
 451+ 9B25 23                                   inc     hl
 452+ 9B26 0C                                   inc     c
 453+ 9B27 10 F6                                djnz    .KeyReadLoop
 454+ 9B29                                      SetAFalse
 454+ 9B29 3E FF       >                        ld      a,$FF
 455+ 9B2B C9                                   ret
 456+ 9B2C 79           .KeyPressed:            ld      a,c
 457+ 9B2D C9                                   ret
 458+ 9B2E
 459+ 9B2E
 460+ 9B2E 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 461+ 9B4C 00                                   DB  0               ; end of string marker as a safety
 462+ 9B4D 00           InputCursor             DB  0
 463+ 9B4E 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 464+ 9B4F 00           InputChanged            DB  0
 465+ 9B50              InputLimit              EQU 20
 466+ 9B50
 467+ 9B50 21 2E 9B     keyboard_copy_input_to_de:  ld      hl,InputString
 468+ 9B53 3A 4D 9B                                 ld      a,(InputCursor)
 469+ 9B56 FE 00                                    cp      0
 470+ 9B58 28 05                                    jr      z,.NoString
 471+ 9B5A 4F                                       ld      c,a
 472+ 9B5B 06 00                                    ld      b,0
 473+ 9B5D ED B0                                    ldir
 474+ 9B5F 3E 00        .NoString                   ld      a,0
 475+ 9B61 12                                       ld      (de),a
 476+ 9B62 C9                                       ret
 477+ 9B63
 478+ 9B63 AF           initInputText:          xor     a
 479+ 9B64 32 4D 9B                             ld      (InputCursor),a
 480+ 9B67                                      SetMemFalse EnterPressed
 480+ 9B67 3E FF       >                        ld      a,$FF
 480+ 9B69 32 4E 9B    >                        ld      (EnterPressed),a
 481+ 9B6C                                      SetMemFalse InputChanged
 481+ 9B6C 3E FF       >                        ld      a,$FF
 481+ 9B6E 32 4F 9B    >                        ld      (InputChanged),a
 482+ 9B71 21 2E 9B                             ld      hl,InputString
 483+ 9B74 06 1E                                ld      b,30
 484+ 9B76 77           .wipeloop:              ld      (hl),a
 485+ 9B77 23                                   inc     hl
 486+ 9B78 10 FC                                djnz    .wipeloop
 487+ 9B7A C9                                   ret
 488+ 9B7B
 489+ 9B7B              InputName:              SetMemFalse InputChanged
 489+ 9B7B 3E FF       >                        ld      a,$FF
 489+ 9B7D 32 4F 9B    >                        ld      (InputChanged),a
 490+ 9B80 CD 05 9B                             call    is_any_key_pressed
 491+ 9B83 FE FF                                cp      $FF
 492+ 9B85 C8                                   ret     z
 493+ 9B86 4F           .KeyPressed:            ld      c,a
 494+ 9B87 3A 4D 9B                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 495+ 9B8A FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 496+ 9B8C 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 497+ 9B8E 21 5C 9A                             ld      hl,ASCII_Map
 498+ 9B91 79                                   ld      a,c
 499+ 9B92 ED 31                                add     hl,a
 500+ 9B94 7E                                   ld      a,(hl)
 501+ 9B95 FE 41                                cp      "A"
 502+ 9B97 30 0B                                jr      nc,.AlphaPressed
 503+ 9B99              ; CAPS and Symbol act as delete for now
 504+ 9B99 FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 505+ 9B9B 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 506+ 9B9D FE 3E                                cp      ">"         ; ENTER
 507+ 9B9F 28 19                                jr      z,.EnterPressed
 508+ 9BA1 FE 23                                cp      "#"         ; CAPS
 509+ 9BA3 C9                                   ret
 510+ 9BA4 47           .AlphaPressed:          ld      b,a
 511+ 9BA5 3A 4D 9B                             ld      a,(InputCursor)
 512+ 9BA8 4F                                   ld      c,a
 513+ 9BA9 21 2E 9B                             ld      hl,InputString
 514+ 9BAC ED 31                                add     hl,a
 515+ 9BAE 78                                   ld      a,b
 516+ 9BAF 70                                   ld      (hl),b
 517+ 9BB0 79                                   ld      a,c
 518+ 9BB1 21 4D 9B                             ld      hl,InputCursor
 519+ 9BB4 34                                   inc     (hl)
 520+ 9BB5                                      SetMemTrue InputChanged
 520+ 9BB5 AF          >                        xor     a
 520+ 9BB6 32 4F 9B    >                        ld      (InputChanged),a
 521+ 9BB9 C9                                   ret
 522+ 9BBA 3A 4D 9B     .EnterPressed:          ld      a,(InputCursor)
 523+ 9BBD 21 2E 9B                             ld      hl,InputString
 524+ 9BC0 ED 31                                add     hl,a
 525+ 9BC2                                      ZeroA
 525+ 9BC2 AF          >                        xor a
 526+ 9BC3 77                                   ld      (hl),a
 527+ 9BC4                                      SetMemTrue EnterPressed
 527+ 9BC4 AF          >                        xor     a
 527+ 9BC5 32 4E 9B    >                        ld      (EnterPressed),a
 528+ 9BC8                                      SetMemTrue InputChanged
 528+ 9BC8 AF          >                        xor     a
 528+ 9BC9 32 4F 9B    >                        ld      (InputChanged),a
 529+ 9BCC CD 84 9A                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 530+ 9BCF C9                                   ret
 531+ 9BD0 3A 4D 9B     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 532+ 9BD3 FE 00                                cp      0                       ; if input is zero length then can not delete
 533+ 9BD5 C8                                   ret     z
 534+ 9BD6 3D                                   dec     a                       ; move back one and update cursor pos
 535+ 9BD7 32 4D 9B                             ld      (InputCursor),a         ;
 536+ 9BDA 21 2E 9B                             ld      hl,InputString          ; now update end of line to null
 537+ 9BDD ED 31                                add     hl,a                    ; .
 538+ 9BDF                                      ZeroA                           ; .
 538+ 9BDF AF          >                        xor a
 539+ 9BE0 77                                   ld      (hl),a                  ; .
 540+ 9BE1                                      SetMemTrue InputChanged
 540+ 9BE1 AF          >                        xor     a
 540+ 9BE2 32 4F 9B    >                        ld      (InputChanged),a
 541+ 9BE5 C9                                   ret
 542+ 9BE6
 543+ 9BE6              TargetMissileTest:      JumpIfMemZero NbrMissiles,      .ClearTargetting
 543+ 9BE6 3A 28 9E    >                        ld  a,(NbrMissiles)
 543+ 9BE9 A7          >                        and a
 543+ 9BEA CA 01 9C    >                        jp  z,.ClearTargetting
 544+ 9BED 3A BD A0                             ld      a,(MissileTargettingFlag)   ; if we are comitted to launch
 545+ 9BF0 CB 7F                                bit     7,a                         ; then don't scan
 546+ 9BF2 C8                                   ret     z                           ; as it will be cleared on launch
 547+ 9BF3 3E 16        .ScanForKey:            ld      a,c_Pressed_TargetMissle    ; if not pressed we are done
 548+ 9BF5 CD EB 9A                             call    is_key_pressed              ; .
 549+ 9BF8 C0                                   ret     nz                          ; .
 550+ 9BF9 3A BD A0     .TargetPressed:         ld      a,(MissileTargettingFlag)   ; get flag back
 551+ 9BFC                                      JumpIfAEqNusng StageMissileNoTarget, .SetTargetting
 551+ 9BFC FE FF       >                        cp     StageMissileNoTarget
 551+ 9BFE CA 07 9C    >                        jp      z,.SetTargetting
 552+ 9C01              .ClearTargetting:       SetMemToN   MissileTargettingFlag, StageMissileNoTarget
 552+ 9C01 3E FF       >                        ld      a,StageMissileNoTarget
 552+ 9C03 32 BD A0    >                        ld      (MissileTargettingFlag),a
 553+ 9C06 C9                                   ret
 554+ 9C07              .SetTargetting:         SetMemToN   MissileTargettingFlag, StageMissileTargeting
 554+ 9C07 3E FE       >                        ld      a,StageMissileTargeting
 554+ 9C09 32 BD A0    >                        ld      (MissileTargettingFlag),a
 555+ 9C0C C9                                   ret
 556+ 9C0D
 557+ 9C0D AF           MovementKeyTest:        xor     a
 558+ 9C0E 32 A9 9E                             ld      (CursorKeysPressed),a
 559+ 9C11 3A C8 9D                             ld      a,(MenuIdMax)
 560+ 9C14 E6 FC                                and     $FC
 561+ 9C16 20 26                                jr      nz,CursorKeys
 562+ 9C18 2A 16 9A     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)
 563+ 9C1B 7E                                   ld      a,(hl)
 564+ 9C1C                                      JumpIfAIsZero ScanDiveKey
 564+ 9C1C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 564+ 9C1D CA 2B 9C    >                        jp	    z, ScanDiveKey
 565+ 9C20 3A A9 9E                             ld      a,(CursorKeysPressed)
 566+ 9C23 F6 80                                or      $80
 567+ 9C25 32 A9 9E                             ld      (CursorKeysPressed),a
 568+ 9C28 C3 61 9C                             jp      ScanLeftKey
 569+ 9C2B 2A 14 9A     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)
 570+ 9C2E 7E                                   ld      a,(hl)
 571+ 9C2F                                      JumpIfAIsZero ScanLeftKey
 571+ 9C2F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 571+ 9C30 CA 61 9C    >                        jp	    z, ScanLeftKey
 572+ 9C33 3A A9 9E                             ld      a,(CursorKeysPressed)
 573+ 9C36 F6 40                                or      $40
 574+ 9C38 32 A9 9E                             ld      (CursorKeysPressed),a
 575+ 9C3B C3 61 9C                             jp      ScanLeftKey
 576+ 9C3E 2A 52 9A     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)
 577+ 9C41 7E                                   ld      a,(hl)
 578+ 9C42                                      JumpIfAIsZero ScanCursorDownKey
 578+ 9C42 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 578+ 9C43 CA 51 9C    >                        jp	    z, ScanCursorDownKey
 579+ 9C46 3A A9 9E                             ld      a,(CursorKeysPressed)
 580+ 9C49 F6 80                                or      $80
 581+ 9C4B 32 A9 9E                             ld      (CursorKeysPressed),a
 582+ 9C4E C3 61 9C                             jp      ScanLeftKey
 583+ 9C51 2A 54 9A     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 584+ 9C54 7E                                   ld      a,(hl)
 585+ 9C55                                      JumpIfAIsZero ScanLeftKey
 585+ 9C55 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 585+ 9C56 CA 61 9C    >                        jp	    z, ScanLeftKey
 586+ 9C59 3A A9 9E                             ld      a,(CursorKeysPressed)
 587+ 9C5C F6 40                                or      $40
 588+ 9C5E 32 A9 9E                             ld      (CursorKeysPressed),a
 589+ 9C61 2A 10 9A     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 590+ 9C64 7E                                   ld      a,(hl)
 591+ 9C65                                      JumpIfAIsZero ScanRightKey
 591+ 9C65 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 591+ 9C66 CA 72 9C    >                        jp	    z, ScanRightKey
 592+ 9C69 3A A9 9E                             ld      a,(CursorKeysPressed)
 593+ 9C6C F6 20                                or      $20
 594+ 9C6E 32 A9 9E                             ld      (CursorKeysPressed),a
 595+ 9C71 C9                                   ret
 596+ 9C72 2A 12 9A     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 597+ 9C75 7E                                   ld      a,(hl)
 598+ 9C76                                      JumpIfAIsZero ScanHomeKey
 598+ 9C76 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 598+ 9C77 CA 83 9C    >                        jp	    z, ScanHomeKey
 599+ 9C7A 3A A9 9E                             ld      a,(CursorKeysPressed)
 600+ 9C7D F6 10                                or      $10
 601+ 9C7F 32 A9 9E                             ld      (CursorKeysPressed),a
 602+ 9C82 C9                                   ret
 603+ 9C83 2A 30 9A     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 604+ 9C86 7E                                   ld      a,(hl)
 605+ 9C87                                      JumpIfAIsZero ScanRecentreKey
 605+ 9C87 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 605+ 9C88 CA 94 9C    >                        jp	    z, ScanRecentreKey
 606+ 9C8B 3A A9 9E                             ld      a,(CursorKeysPressed)
 607+ 9C8E F6 08                                or      $08
 608+ 9C90 32 A9 9E                             ld      (CursorKeysPressed),a
 609+ 9C93 C9                                   ret
 610+ 9C94 2A 4C 9A     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 611+ 9C97 7E                                   ld      a,(hl)
 612+ 9C98                                      ReturnIfAIsZero
 612+ 9C98 A7          >                        and     a
 612+ 9C99 C8          >                        ret     z
 613+ 9C9A 3A A9 9E                             ld      a,(CursorKeysPressed)
 614+ 9C9D F6 04                                or      $04
 615+ 9C9F 32 A9 9E                             ld      (CursorKeysPressed),a
 616+ 9CA2 C9                                   ret
 617+ 9CA3
 618+ 9CA3
# file closed: ./Hardware/keyboard.asm
1209  9CA3
1210  9CA3                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 9CA3              ;Contants
   2+ 9CA3
   3+ 9CA3              SignMask8Bit		equ %01111111
   4+ 9CA3              SignMask16Bit		equ %0111111111111111
   5+ 9CA3              SignOnly8Bit		equ $80
   6+ 9CA3              SignOnly16Bit		equ $8000
   7+ 9CA3
   8+ 9CA3              Bit7Only            equ %10000000
   9+ 9CA3              Bit6Only            equ %01000000
  10+ 9CA3              Bit5Only            equ %00100000
  11+ 9CA3              Bit4Only            equ %00010000
  12+ 9CA3              Bit3Only            equ %00001000
  13+ 9CA3              Bit2Only            equ %00000100
  14+ 9CA3              Bit1Only            equ %00000010
  15+ 9CA3              Bit0Only            equ %00000001
  16+ 9CA3              Bit7Clear           equ %01111111
  17+ 9CA3              Bit6Clear           equ %10111111
  18+ 9CA3              Bit5Clear           equ %11011111
  19+ 9CA3              Bit4Clear           equ %11101111
  20+ 9CA3              Bit3Clear           equ %11110111
  21+ 9CA3              Bit2Clear           equ %11111011
  22+ 9CA3              Bit1Clear           equ %11111101
  23+ 9CA3              Bit0Clear           equ %11111110
  24+ 9CA3              ConstPi				equ $80
  25+ 9CA3              ConstNorm           equ 197
  26+ 9CA3
  27+ 9CA3              ;Text Tokens
  28+ 9CA3              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 9CA3              BrabenBellToken 	equ $0D
  30+ 9CA3              AcorToken			equ $0C
  31+ 9CA3
  32+ 9CA3              ; Intro Screen
  33+ 9CA3              TitleShip			equ	$8C
  34+ 9CA3              RotationUnity		equ $60
  35+ 9CA3              DBCheckCode			equ $DB
  36+ 9CA3              MaxVisibility		equ $1F
  37+ 9CA3              FarInFront			equ $C0
  38+ 9CA3              ; Equipment Flags
  39+ 9CA3              EquipmentItemFitted     equ $FF
  40+ 9CA3              EquipmentItemNotFitted  equ 0
  41+ 9CA3              ; Universe Managment
  42+ 9CA3              ShipTypeScoopable   equ 4         ; a sub set of junk
  43+ 9CA3              ShipTypeJunk        equ 3
  44+ 9CA3              ShipTypeStation     equ 2
  45+ 9CA3              ShipTypeMissile     equ 1
  46+ 9CA3              ShipTypeNormal      equ 0
  47+ 9CA3              ShipTypeText        equ 253
  48+ 9CA3              ShipTypeDebug       equ 254
  49+ 9CA3              ShipTypeEmpty       equ 255
  50+ 9CA3              ; TacticsControl
  51+ 9CA3              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  52+ 9CA3              ShipIsBountyHunter  equ Bit1Only   ;
  53+ 9CA3              ShipIsHostile       equ Bit2Only   ;
  54+ 9CA3              ShipNotHostile      equ Bit2Clear   ;
  55+ 9CA3              ShipIsPirate        equ Bit3Only   ;
  56+ 9CA3              ShipIsDocking       equ Bit4Only   ;
  57+ 9CA3              ShipIsBystander     equ Bit5Only   ;
  58+ 9CA3              ShipIsCop           equ Bit6Only   ;
  59+ 9CA3              ShipIsScoopDockEsc  equ Bit7Only   ;
  60+ 9CA3              ShipAIEnabled       equ Bit7Only   ;
  61+ 9CA3              ShipExploding       equ Bit5Only
  62+ 9CA3              ShipKilled          equ Bit7Clear
  63+ 9CA3              ; Main Loop State
  64+ 9CA3              StatePlayerDocked    equ $FF
  65+ 9CA3              StateCompletedLaunch equ $FD
  66+ 9CA3              StateInTransition    equ $FE
  67+ 9CA3              StateHJumping        equ $FC
  68+ 9CA3              StateHEntering       equ $FB
  69+ 9CA3              StateCompletedHJump  equ $FA
  70+ 9CA3              StateNormal          equ 0
  71+ 9CA3              ; Missile Stage flags , $Fx = locked to ship id x, $0x = fire at ship id x requested
  72+ 9CA3              StageMissileNoTarget equ $FF
  73+ 9CA3              StageMissileTargeting equ $FE
  74+ 9CA3              ; UniverseAIControl
  75+ 9CA3              ShipCanAnger        equ %00000001
  76+ 9CA3
  77+ 9CA3
  78+ 9CA3              ShipMaxDistance     equ 192
  79+ 9CA3              HyperSpaceTimers    equ $0B0B
  80+ 9CA3
  81+ 9CA3
  82+ 9CA3              MaxNumberOfStars	equ 11
  83+ 9CA3              ConsoleRefreshInterval  equ 4
  84+ 9CA3
  85+ 9CA3              ShipTypeSize		equ	32 			;??????? just a guess for now
  86+ 9CA3              ShipSST				equ 4			; its a space station
  87+ 9CA3              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  88+ 9CA3              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  89+ 9CA3              ShipCountMax		equ	2			; For now just 2 ships to debug
  90+ 9CA3              LineLimitPerShip	equ 70			; Max lines per ship
  91+ 9CA3              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  92+ 9CA3              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  93+ 9CA3
  94+ 9CA3              ; Memory page managment	(Refers to a memory slot as a place to access data)
  95+ 9CA3              ShipDataSlot		equ	6			; this may move into rom swap out space later
  96+ 9CA3              UniverseObjectSlot	equ	7
  97+ 9CA3
  98+ 9CA3              KeyForwardsView		equ	$20
  99+ 9CA3              ; Game specific equates
 100+ 9CA3              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 101+ 9CA3
 102+ 9CA3              ;...Game Colour Mapping
 103+ 9CA3              L2DustColour        equ L2ColourGREY_1
 104+ 9CA3              L2SunScannerBright  equ 252
 105+ 9CA3              L2SunScanner        equ 180
 106+ 9CA3
 107+ 9CA3
 108+ 9CA3              ; Ship Data
 109+ 9CA3              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 110+ 9CA3              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 111+ 9CA3              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 112+ 9CA3              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 113+ 9CA3              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 114+ 9CA3              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 115+ 9CA3              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 116+ 9CA3              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 117+ 9CA3              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 118+ 9CA3              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 119+ 9CA3              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 120+ 9CA3              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 121+ 9CA3              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 122+ 9CA3              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 123+ 9CA3              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 124+ 9CA3              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 125+ 9CA3              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 126+ 9CA3              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 127+ 9CA3              ;;;;00 00			 EQUW 0     \ type 18 is
 128+ 9CA3              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 129+ 9CA3              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 130+ 9CA3              ;;;;00 00			 EQUW 0     \ type 21 is
 131+ 9CA3              ;;;;00 00			 EQUW 0     \ type 22 is
 132+ 9CA3              ;;;;00 00			 EQUW 0     \ type 23 is
 133+ 9CA3              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 134+ 9CA3              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 135+ 9CA3              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 136+ 9CA3              ;;;;00 00			 EQUW 0     \ type 27 is
 137+ 9CA3              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 138+ 9CA3              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 139+ 9CA3              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 140+ 9CA3              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 141+ 9CA3              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 142+ 9CA3              ;;;;			\ NEWB examples
 143+ 9CA3              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 144+ 9CA3              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 145+ 9CA3              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 146+ 9CA3              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 147+ 9CA3              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 148+ 9CA3
# file closed: ./Variables/constant_equates.asm
1211  9CA3                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 9CA3
   2+ 9CA3
   3+ 9CA3 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 9CA5 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 9CA7              ; Variables to simulate 6502 registers until code fixed
   6+ 9CA7              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 9CA7 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 9CA8 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 9CA9 00           regA		DB	0
  10+ 9CAA
  11+ 9CAA
  12+ 9CAA 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 9CAB 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 9CAD 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 9CAF
  16+ 9CAF
  17+ 9CAF
  18+ 9CAF              ;XX16		DS	16				; 16 byte Matrix
  19+ 9CAF
  20+ 9CAF              P0INWK							; page 0 & 46
  21+ 9CAF              p0INWK31						; page 0 & 65
  22+ 9CAF              P0INWK36						; PAGE 0 &6A
  23+ 9CAF
  24+ 9CAF 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 9CB0              LastNormalVisible	equ	XX4
  26+ 9CB0              varXX4              equ XX4
  27+ 9CB0
  28+ 9CB0
  29+ 9CB0
  30+ 9CB0 00           PATG		DB	0				; 6502 &03C9
  31+ 9CB1 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 9CB3
  33+ 9CB3
  34+ 9CB3              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 9CB3              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 9CB3
  37+ 9CB3              ; Present System Variables
  38+ 9CB3
  39+ 9CB3 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
  40+ 9CB4 20           RandomSeed1				DB	32	; 01
  41+ 9CB5 0C           RandomSeed2				DB	12			; 02
  42+ 9CB6 42           RandomSeed3				DB	66			; 03
  43+ 9CB7
  44+ 9CB7 00           varT1					DB	0				; 06
  45+ 9CB8 00           SClo					DB 0				; 07
  46+ 9CB9 00           SChi					DB 0				; 08
  47+ 9CBA 00           varP					DB 0 				; 10	XX16+7
  48+ 9CBB 00           varPhi					DB 0 				; 11	XX16+8
  49+ 9CBC 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 9CBD              varPp1                  equ varPhi
  51+ 9CBD              varPp2                  equ varPhi2
  52+ 9CBD 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 9CBE 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 9CBF              UnivPointer				equ	UnivPointerLo
  55+ 9CBF 00           varV					DB 0				; 22                          XX0+4
  56+ 9CC0 00           varVHi					DB 0				; 23                          XX0+5
  57+ 9CC1 00           varXXlo                 DB 0                ; 24
  58+ 9CC2 00           varXXHi                 DB 0                ; 25
  59+ 9CC3              varXX					equ	varXXlo
  60+ 9CC3 00           YYlo                    DB 0                ; 26
  61+ 9CC4 00           YYHi                    DB 0                ; 27
  62+ 9CC5              varYY					equ	YYlo
  63+ 9CC5              											;	28
  64+ 9CC5              											;	29
  65+ 9CC5              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 9CC5 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 9CC6 00           JSTY                    DB  0               ; Joystick analog
  68+ 9CC7 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 9CC8 00           BET2                    DB  0               ;            climb sign
  70+ 9CC9 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 9CCA 1F           BET1MAXC                DB  31              ; max climb
  72+ 9CCB E1           BET1MAXD                DB  -31             ; max dive
  73+ 9CCC 00           XC						DB	0               ; 2C
  74+ 9CCD 00           YC						DB 	0               ; 2D
  75+ 9CCE              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 9CCE 00           ECMActive				DB 	0				; 30		ECM Active flag
  77+ 9CCF 00           ECMLoopA                DB  0
  78+ 9CD0 00           ECMLoopB                DB  0
  79+ 9CD1 00 00        JSTX                    DW  0               ;           Joystick analog value
  80+ 9CD3 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  81+ 9CD4 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  82+ 9CD5 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  83+ 9CD6 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  84+ 9CD7 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  85+ 9CD8 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  86+ 9CD9
  87+ 9CD9
  88+ 9CD9
  89+ 9CD9              MAXMESSAGES             EQU 5
  90+ 9CD9              MESSAGETIMELIMIT        EQU 20
  91+ 9CD9              MESSAGESIZE             EQU 33
  92+ 9CD9              MESSAGELINE             EQU $0001
  93+ 9CD9
  94+ 9CD9 00           MessageCount            DB  0                ; used for enquing messages later
  95+ 9CDA 00           MessageCurrent          DB  0
  96+ 9CDB 05 00        MessageIndex            DW  MAXMESSAGES
  97+ 9CDD 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  98+ 9D82 05           MessageTimeout          DB  MAXMESSAGES
  99+ 9D83 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 100+ 9DA8
 101+ 9DA8              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 102+ 9DA8              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 103+ 9DA8              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 104+ 9DA8 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 105+ 9DA9              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 106+ 9DA9
 107+ 9DA9
 108+ 9DA9 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 109+ 9DAE              											;	6D		QQ15+1
 110+ 9DAE              											;	6E		QQ15+2
 111+ 9DAE              											;	6F		QQ15+3
 112+ 9DAE              											;	70		QQ15+4
 113+ 9DAE              											;	71		QQ15+5
 114+ 9DAE 00           QQ17					DB	0				;   72
 115+ 9DAF 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 116+ 9DB0 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 117+ 9DB1 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 118+ 9DB2 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 119+ 9DB3 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 120+ 9DB4 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 121+ 9DB5 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 122+ 9DB6 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 123+ 9DB7 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 124+ 9DB8
 125+ 9DB8 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 126+ 9DB9 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 127+ 9DBA 00           DELT4Lo					DB 	0				; 7E
 128+ 9DBB 00           DELT4Hi					DB 	0				; 7F
 129+ 9DBC              DELTA4                  equ                 DELT4Lo
 130+ 9DBC
 131+ 9DBC
 132+ 9DBC              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 9DBC 00           varU                    DB  0               ;   80
 134+ 9DBD 00           varQ					DB  0 				;	81
 135+ 9DBE 00           varR					DB  0 				;	82
 136+ 9DBF 00           varS					DB  0 				;	83
 137+ 9DC0              varRS                   equ varR
 138+ 9DC0
 139+ 9DC0 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 9DC2
 141+ 9DC2 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 9DC3 00           YSAV                    DB  0               ; 85
 143+ 9DC4 00           XX17					DB	0				; 86
 144+ 9DC5              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 9DC5              varXX17                 equ  XX17
 146+ 9DC5 00           ScreenChanged           DB  0
 147+ 9DC6 00           ScreenIndex             DB  0
 148+ 9DC7 00           InvertedYAxis           DB  0
 149+ 9DC8 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 150+ 9DC9              											; Bit 7 Set  ShortRangeChart    $80
 151+ 9DC9              											; Bit 6 Set  Galactic Chart     $40
 152+ 9DC9              											; Bit 5 Set  Market Place       $20
 153+ 9DC9              											; Bit 4 Set  Status Screen      $10
 154+ 9DC9              											; Bit 3 Set  Display Inventory  $08
 155+ 9DC9                                                          ; Bit 2 Set  Planet Data        $04
 156+ 9DC9                                                          ; View bit combinations if the ones above not matched
 157+ 9DC9                                                          ; bits 1 0
 158+ 9DC9                                                          ;      1 1  Front view , i.e. $03
 159+ 9DC9                                                          ;      1 0  Aft View          $02
 160+ 9DC9                                                          ;      0 1  Left View         $01
 161+ 9DC9                                                          ;      0 0  Right view        $00
 162+ 9DC9              											; Bit 0 Set  Data On System
 163+ 9DC9              											; 0  Space View (Not a menu)
 164+ 9DC9 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 165+ 9DCA 00           XX13                    DB  0               ;   89
 166+ 9DCB 00           TYPE					DB	0				; 8C used for ship type in drawing
 167+ 9DCC              ;Docked flag = 00 = in free space
 168+ 9DCC              ;              FF = Docked
 169+ 9DCC              ;              FE = transition
 170+ 9DCC              ;              FD = Setup open space and transition to not docked
 171+ 9DCC              ;              FC = Hyperspace manimation
 172+ 9DCC              ;              FB = Hyperspace complete
 173+ 9DCC 00           DockedFlag				DB	0				; 8E -
 174+ 9DCD 00           GamePaused              DB  0
 175+ 9DCE 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 176+ 9DCF 00           varCNT                  DB  0               ; 93
 177+ 9DD0
 178+ 9DD0 00           varK					DB	0				; 40
 179+ 9DD1 00           varKp1					DB	0				; 41
 180+ 9DD2 00           varKp2					DB	0				; 42
 181+ 9DD3 00           varKp3					DB	0				; 43
 182+ 9DD4
 183+ 9DD4 00           varK2                   DB  0               ; 9B
 184+ 9DD5 00           varK2p1                 DB  0               ; 9C K2 plus 1
 185+ 9DD6 00           varK2p2                 DB  0               ; 9D K2 plus 2
 186+ 9DD7 00           varK2p3                 DB  0               ; 9E K2 plus 3
 187+ 9DD8
 188+ 9DD8 00           Point                   DB  0               ; 9F      POINT
 189+ 9DD9
 190+ 9DD9 00           varT					DB	0				; D1
 191+ 9DDA
 192+ 9DDA 00 00 00...  varVector9ByteWork      DS  9
 193+ 9DE3
 194+ 9DE3 00 00 00 00  varK3					DS	4				; D2
 195+ 9DE7 00           varK3p2					DB	0				; 42
 196+ 9DE8 00           varK3p3					DB	0				; 43
 197+ 9DE9              varK3p1					equ varK3+1			; D3
 198+ 9DE9 00 00 00 00  varK4					DS	4				; E0
 199+ 9DED              varK4p1					equ varK4+1			; D3
 200+ 9DED
 201+ 9DED
 202+ 9DED              ;Heap
 203+ 9DED
 204+ 9DED 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 205+ 9DEF 00 00 00...  HeapData				DS	50
 206+ 9E21              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 207+ 9E21              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 208+ 9E21              ; i.e. a list of programmed missiles in universe slot list code
 209+ 9E21 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 210+ 9E28              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 211+ 9E28              ;  #&5 Does J reverse both joystick channels
 212+ 9E28              ;  #&4 Does Y reverse joystick Y channel			03CB
 213+ 9E28              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 214+ 9E28              ;  #&3 Does F toggle flashing information			03CA
 215+ 9E28              ;  #&1 Does A toggle keyboard auto-recentering ?
 216+ 9E28              ;  #&0 Caps-lock toggles keyboard flight damping
 217+ 9E28 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 218+ 9E29 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 219+ 9E2A 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 220+ 9E3A 00           AlienItemsAvaliability  DB	0				; 039D
 221+ 9E3B 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 222+ 9E3C 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 223+ 9E3E 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 224+ 9E3F              											;
 225+ 9E3F 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 226+ 9E40 00           MarketPrice				DB	0				; 03AA QQ24
 227+ 9E41 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 228+ 9E42 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 229+ 9E43 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 230+ 9E44 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 231+ 9E46              											; this is ship lines stack pointer so may be redundant with paging
 232+ 9E46              											; LS = line stack so we will have one for now to remove later
 233+ 9E46 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 234+ 9E47 00           DisplayEcononmy			DB	0				; 03B8
 235+ 9E48 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 236+ 9E49 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 237+ 9E4A 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 238+ 9E4C 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 239+ 9E4E 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 240+ 9E50 00 00        DisplayRadius			DW	0
 241+ 9E52              ; --- Used in creation of sun and planet----;
 242+ 9E52 00           PlanetXPos              DS  1
 243+ 9E53 00           PlanetYPos              DS  1
 244+ 9E54 00           PlanetZPos              DS  1
 245+ 9E55 00           PlanetType              DS  1
 246+ 9E56 00           SunXPos                 DS  1
 247+ 9E57 00           SunYPos                 DS  1
 248+ 9E58 00           SunZPos                 DS  1
 249+ 9E59              ; -- Current Missile Runbtime data
 250+ 9E59 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 251+ 9E5A 00 00        MissileXPos             DW      0
 252+ 9E5C 00           MissileXSgn             DB      0
 253+ 9E5D 00 00        MissileYPos             DW      0
 254+ 9E5F 00           MissileYSgn             DB      0
 255+ 9E60 00 00        MissileZPos             DW      0
 256+ 9E62 00           MissileZSgn             DB      0
 257+ 9E63 00 00        CurrentTargetXpos       DS      2
 258+ 9E65 00 00        CurrentTargetXsgn       DS      2
 259+ 9E67 00 00        CurrentTargetYpos       DS      2
 260+ 9E69 00 00        CurrentTargetYsgn       DS      2
 261+ 9E6B 00 00        CurrentTargetZpos       DS      2
 262+ 9E6D 00 00        CurrentTargetZsgn       DS      2
 263+ 9E6F 00 00        TargetVectorXpos        DS      2
 264+ 9E71 00 00        TargetVectorXsgn        DS      2
 265+ 9E73 00 00        TargetVectorYpos        DS      2
 266+ 9E75 00 00        TargetVectorYsgn        DS      2
 267+ 9E77 00 00        TargetVectorZpos        DS      2
 268+ 9E79 00 00        TargetVectorZsgn        DS      2
 269+ 9E7B 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 270+ 9E7C 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 271+ 9E7D 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 272+ 9E7E 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 273+ 9E7F
 274+ 9E7F              ; --- Main Loop Data -----------------------;
 275+ 9E7F 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 276+ 9E80 00           SelectedUniverseSlot    DB  0
 277+ 9E81 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 278+ 9E82 00           ShipBlastCheckCounter   DB  0
 279+ 9E83 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 280+ 9E84 00           OuterHyperCount			DB 	0				; 2E QQ22
 281+ 9E85 00           EventCounter            DB  0
 282+ 9E86 00           HyperCircle             DB  0
 283+ 9E87 00           MissJumpFlag            DB  0
 284+ 9E88 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 285+ 9E89 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 286+ 9E8A 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 287+ 9E8B 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 288+ 9E8C 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 289+ 9E8D 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 290+ 9E8E              UniverseSlotListSize    equ	12
 291+ 9E8E 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 292+ 9E9A 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 293+ 9EA6              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 294+ 9EA6 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 295+ 9EA7 00           ConsoleRedrawFlag       DB  0
 296+ 9EA8 00           TextInputMode           DB  0
 297+ 9EA9 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 298+ 9EAA                                                          ; 7    6    5    4     3    2        1    0
 299+ 9EAA                                                          ; Up   Down Left Right Home Recentre
 300+ 9EAA 00           FireLaserPressed        DB  0
 301+ 9EAB              ; --- Current System Data ------------------;
 302+ 9EAB 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 303+ 9EAC 00           ExtraVesselsCounter     DB  0
 304+ 9EAD 00           JunkCount				DB  0				; $033E
 305+ 9EAE 00           AsteroidCount           DB  0               ; Not used as yet
 306+ 9EAF 00           TransporterCount        DB  0
 307+ 9EB0 00           CopCount                DB  0
 308+ 9EB1 00           PirateCount             DB  0
 309+ 9EB2              ; --- Galaxy Data --------------------------;
 310+ 9EB2 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 311+ 9EB3 00 00 00...  WorkingSeeds			DS	6
 312+ 9EB9 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 313+ 9EBF 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 314+ 9EC5 00           PresentSystemX			DB	0				; System we are currently in
 315+ 9EC6 00           PresentSystemY			DB  0				; System we are currently in
 316+ 9EC7 00           TargetSystemX			DB	0				; System we are targeting for jump
 317+ 9EC8 00           TargetSystemY			DB	0				; System we are targeting for jump
 318+ 9EC9 00           GovPresentSystem		DB	0				; 03AE Govenment
 319+ 9ECA 00           TekPresentSystem		DB	0				; 03AF Technology
 320+ 9ECB
 321+ 9ECB 00           CompassColor			DB	0				; 03C5
 322+ 9ECC 00           SoundToggle				DB	0				; 03C6
 323+ 9ECD 00           KeyboardRecenterToggle	DB	0				; 03C8
 324+ 9ECE 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 325+ 9ECF 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 326+ 9ED0 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 327+ 9ED1 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 328+ 9ED2 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 329+ 9ED3 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 330+ 9ED4
 331+ 9ED4              ; Working Data
 332+ 9ED4
 333+ 9ED4              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 334+ 9ED4              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 335+ 9ED4              ; $0925 =	EQUW page9+37* 1
 336+ 9ED4              ; $094A =	EQUW page9+37* 2
 337+ 9ED4              ; $096F =	EQUW page9+37* 3
 338+ 9ED4              ; $0994 =	EQUW page9+37* 4
 339+ 9ED4              ; $09B9 =	EQUW page9+37* 5
 340+ 9ED4              ; $09DE =	EQUW page9+37* 6
 341+ 9ED4              ; $0A03 =	EQUW page9+37* 7
 342+ 9ED4              ; $0A28 =	EQUW page9+37* 8
 343+ 9ED4              ; $0A4D =	EQUW page9+37* 9
 344+ 9ED4              ; $0A72 =	EQUW page9+37*10
 345+ 9ED4              ; $0A97 =	EQUW page9+37*11
 346+ 9ED4              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 347+ 9ED4
 348+ 9ED4
 349+ 9ED4
 350+ 9ED4              ; 0b00 is start address of data to save
 351+ 9ED4              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 352+ 9ED4              											; Bit mask XXXX10XX - Thargoid plan mission
 353+ 9ED4
 354+ 9ED4 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 355+ 9ED5
 356+ 9ED5 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 357+ 9ED7 00 00        CommanderLoadAddress	DW	0				;0C03
 358+ 9ED9 00 00        LengthOfFile			DW	0				;0C0B
 359+ 9EDB 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 360+ 9EDD
 361+ 9EDD 00 00 00...  EdgesBuffer				DS 50
 362+ 9F0F              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 363+ 9F0F              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 364+ 9F0F
 365+ 9F0F 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 366+ 9F55              ShipLineStackTop		equ $ - ShipLineStack
 367+ 9F55
 368+ 9F55 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 369+ A015              ; LSX vector overlaps with LSO
 370+ A015 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 371+ A016 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 372+ A017
 373+ A017              ; Star Positions are 16 bit 3d coordinates
 374+ A017 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 375+ A059 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 376+ A06F 00           varStarX                DB  0
 377+ A070 00           varStarY                DB  0
 378+ A071 00 00 00...  varDustX                DS MaxNumberOfStars *2
 379+ A087 00 00 00...  varDustY                DS MaxNumberOfStars *2
 380+ A09D 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 381+ A0B3              ; -- Player Runtime Data
 382+ A0B3 00           GunTemperature          DB  0
 383+ A0B4 00           CabinTemperature        DB  0
 384+ A0B5 00           PlayerForwardSheild0	DB	0 ; ?????
 385+ A0B6 00           PlayerForwardSheild1    DB	0
 386+ A0B7 00           PlayerForwardSheild2    DB	0
 387+ A0B8 00           ForeShield				DB	0				; 03A5
 388+ A0B9 00           AftShield				DB	0				; 03A6
 389+ A0BA 00           PlayerEnergy			DB	0				; 03A7
 390+ A0BB 00           CompassX				DB	0				; 03A8
 391+ A0BC 00           CompassY				DB	0				; 03A9
 392+ A0BD              ; Simplification of missile targetting
 393+ A0BD              ; $FF no missile targettting enabled
 394+ A0BD              ; $FE missile targetting, no target selected
 395+ A0BD              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 396+ A0BD              ; bit 7 clear launch at selected target in lower nibble
 397+ A0BD 00           MissileTargettingFlag   DB  0
 398+ A0BE              ;;MissileTarget			DB  0				; 45
 399+ A0BE              ;;MissileLaunchFlag       DB  0
 400+ A0BE 00 00 00...  CommanderName           DS  15
 401+ A0CD 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 402+ A0CE 00           BadnessStatus           DB  0
 403+ A0CF              ; need to add copy table routines
 404+ A0CF 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 405+ A0D0 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 406+ A0D1 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 407+ A0D2 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 408+ A0D3 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 409+ A0D4 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 410+ A0D5              ; Count down timers must be aligned like this to work
 411+ A0D5 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 412+ A0D6 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 413+ A0D7 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 414+ A0D8 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 415+ A0D9              ;note rapidly changing views could reset these so need to consider it in an array
 416+ A0D9
 417+ A0D9              ; LaserType
 418+ A0D9              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 419+ A0D9              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 420+ A0D9              ; LaserPulseRest                          ; time before pulse count resets to 0
 421+ A0D9              ; LaserDamageOutput                       ; amount of damage for a laser hit
 422+ A0D9              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 423+ A0D9              ; LaserHeat                               ; amount of heat generated
 424+ A0D9              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 425+ A0D9              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 426+ A0D9              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 427+ A0D9              ; LaserTechLevel                          ; minimum tech level system to buy from
 428+ A0D9
 429+ A0D9 00           CurrLaserBurstRate      DB  0
 430+ A0DA 00           CurrLaserBurstCount     DB  0
 431+ A0DB 00           CurrLaserDamageOutput   DB  0
 432+ A0DC 00           CurrLaserEnergyDrain    DB  0
 433+ A0DD 00           CurrLaserHeat           DB  0
 434+ A0DE 00           CurrLaserDurability     DB  0
 435+ A0DF 00           CurrLaserDurabilityAmount DB  0
 436+ A0E0
 437+ A0E0              ; -- Input variables
 438+ A0E0 00           JoystickX				DB	0				; 034C JSTX
 439+ A0E1 00           JoystickY				DB	0				; 034D JSTY
 440+ A0E2 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 441+ A0E3 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 442+ A0E4
 443+ A0E4              ; -- Console drawing data
 444+ A0E4              FShieldStart            equ $8410
 445+ A0E4              AShieldStart            equ $8D10
 446+ A0E4              FuelStart               equ $9410
 447+ A0E4
 448+ A0E4              EnergyBar4Start         equ $A5D5
 449+ A0E4              EnergyBar3Start         equ $ADD5
 450+ A0E4              EnergyBar2Start         equ $B5D5
 451+ A0E4              EnergyBar1Start         equ $BDD5
 452+ A0E4              ; 70 /2 = 35 values
 453+ A0E4              ;                            0                             1                             2                             3
 454+ A0E4              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 455+ A0E4 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 455+ A0E8 04 04 05 06
 455+ A0EC 06 07 08 09
 455+ A0F0 0A 0A 0B 0C
 455+ A0F4 0D 0E 0E 0F
 455+ A0F8 10 10 11 13
 455+ A0FC 14 15 15 16
 455+ A100 17 18 19 1A
 455+ A104 1B 1C 1E 1F
 455+ A108 1F
 456+ A109              SpeedoStart             equ $84D1
 457+ A109              ;                            0                             1                             2                             3                             4
 458+ A109              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 459+ A109 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 459+ A10D 04 04 05 06
 459+ A111 06 07 08 09
 459+ A115 0A 0A 0B 0C
 459+ A119 0D 0E 0E 0F
 459+ A11D 10 10 11 12
 459+ A121 13 14 14 15
 459+ A125 16 17 18 18
 459+ A129 19 1A 1A 1B
 459+ A12D 1C 1C 1D 1E
 459+ A131 1F
 460+ A132
 461+ A132              DialMiddleXPos          equ $E1
 462+ A132              RollMiddle              equ $8CE0
 463+ A132              PitchMiddle             equ $94E0
 464+ A132
 465+ A132
 466+ A132
 467+ A132
 468+ A132
# file closed: ./Variables/general_variables.asm
1212  A132                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ A132              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ A132 3A DC A0    >                        ld      a,(CurrLaserEnergyDrain)
   1+ A135 47          >                        ld      b,a
   1+ A136 3A BA A0    >                        ld      a,(PlayerEnergy)
   1+ A139 90          >                        sub     a,b
   1+ A13A 32 BA A0    >                        ld      (PlayerEnergy),a
   1+ A13D 38 03       >                        jr      c,.ZeroSystem
   1+ A13F C3 46 A1    >                        jp      .ExitPoint
   1+ A142             >.ZeroSystem:            ZeroA
   1+ A142 AF          >                        xor a
   1+ A143 32 BA A0    >                        ld      (PlayerEnergy),a
   1+ A146             >.ExitPoint
   2+ A146                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ A146 3A DD A0    >                        ld      a,(CurrLaserHeat)
   2+ A149 47          >                        ld      b,a
   2+ A14A 3A B3 A0    >                        ld      a,(GunTemperature)
   2+ A14D 80          >                        add     b
   2+ A14E 32 B3 A0    >                        ld      (GunTemperature),a
   2+ A151 38 03       >                        jr      c, .MaxSystem
   2+ A153 C3 5B A1    >                        jp      .ExitPoint
   2+ A156 3E FF       >.MaxSystem:             ld      a,255
   2+ A158 32 B3 A0    >                        ld      (GunTemperature),a
   2+ A15B             >.ExitPoint
   3+ A15B C9                                   ret
   4+ A15C
   5+ A15C
   6+ A15C              ResetPlayerShip:        ZeroThrottle
   6+ A15C AF          >                        xor     a
   6+ A15D 32 B9 9D    >                        ld      (DELTA),a
   6+ A160 32 BA 9D    >                        ld      (DELT4Lo),a
   6+ A163 32 BB 9D    >                        ld      (DELT4Lo+1),a
   7+ A166                                      ZeroPitch
   7+ A166 AF          >                        xor     a
   7+ A167 32 C8 9C    >                        ld      (BET2),a
   7+ A16A 32 C9 9C    >                        ld      (BET2FLIP),a
   7+ A16D 32 C6 9C    >                        ld      (JSTY),a
   7+ A170 32 C5 9C    >                        ld      (BETA),a
   8+ A173                                      ZeroRoll
   8+ A173 AF          >                        xor     a                              ; zero roll and climb
   8+ A174 32 D5 9C    >                        ld      (ALP2),a
   8+ A177 32 D6 9C    >                        ld      (ALP2FLIP),a
   8+ A17A 32 D1 9C    >                        ld      (JSTX),a
   8+ A17D 32 D3 9C    >                        ld      (ALPHA),a
   9+ A180                                      ClearMissileTarget
   9+ A180 3E FF       >                        ld      a,StageMissileNoTarget
   9+ A182 32 BD A0    >                        ld      (MissileTargettingFlag),a           ; reset targetting
  10+ A185                                      ClearECM
  10+ A185 AF          >                        xor     a
  10+ A186 32 CF 9C    >                        ld      (ECMLoopA),a
  10+ A189 32 D0 9C    >                        ld      (ECMLoopB),a
  11+ A18C                                      ChargeEnergyAndShields
  11+ A18C 3E FF       >                        ld      a,$FF
  11+ A18E 32 BA A0    >                        ld      (PlayerEnergy),a
  11+ A191 32 B8 A0    >                        ld      (ForeShield),a
  11+ A194 32 B9 A0    >                        ld      (AftShield),a
  12+ A197                                      ClearTemperatures
  12+ A197 AF          >                        xor     a
  12+ A198 32 B4 A0    >                        ld      (CabinTemperature),a
  12+ A19B 32 B3 A0    >                        ld      (GunTemperature),a
  13+ A19E CD EB A1                             call    IsLaserUseable
  14+ A1A1                                      MMUSelectCommander
  14+ A1A1 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  15+ A1A5 CD F4 E2                             call    LoadLaserToCurrent
  16+ A1A8 C8                                   ret     z
  17+ A1A9
  18+ A1A9 C9                                   ret
  19+ A1AA
  20+ A1AA 21 01 A3     AddCargoTypeD:          ld      hl,CargoTonnes
  21+ A1AD 57                                   ld      d,a
  22+ A1AE ED 31                                add     hl,a
  23+ A1B0 34                                   inc     (hl)
  24+ A1B1 C9                                   ret
  25+ A1B2
  26+ A1B2 7A           CanWeScoopCargoD:       ld      a,d
  27+ A1B3                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  27+ A1B3 FE 0E       >                        cp     GoldIndex
  27+ A1B5 D2 D7 A1    >                        jp		nc,.ItMayNotBeTonnes
  28+ A1B8 21 01 A3     .ItsTonnes:             ld      hl,CargoTonnes
  29+ A1BB 0E 00                                ld      c,0
  30+ A1BD 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  31+ A1BF 7E           .AddLoop:               ld      a,(hl)
  32+ A1C0 81                                   add     c
  33+ A1C1 4F                                   ld      c,a                     ; add to counter
  34+ A1C2 05                                   dec     b
  35+ A1C3 23                                   inc     hl
  36+ A1C4 10 F9                                djnz    .AddLoop
  37+ A1C6 21 12 A3                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  38+ A1C9 7E                                   ld      a,(hl)
  39+ A1CA 81                                   add     c
  40+ A1CB 4F                                   ld      c,a
  41+ A1CC 3A FF A2                             ld      a,(CargoBaySize)        ; Get Bay Size
  42+ A1CF                                      JumpIfAEqNusng c, .CargoFull
  42+ A1CF B9          >                        cp     c
  42+ A1D0 CA D5 A1    >                        jp      z,.CargoFull
  43+ A1D3              .StillRoom:             ClearCarryFlag
  43+ A1D3 B7          >                        or a
  44+ A1D4 C9                                   ret
  45+ A1D5              .CargoFull:             SetCarryFlag
  45+ A1D5 37          >                        scf
  46+ A1D6 C9                                   ret
  47+ A1D7              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  47+ A1D7 FE 11       >                        cp     AlienItemsIndex
  47+ A1D9 CA B8 A1    >                        jp      z,.ItsTonnes
  48+ A1DC 21 01 A3                             ld      hl,CargoTonnes
  49+ A1DF 7A                                   ld      a,d
  50+ A1E0 ED 31                                add     hl,a
  51+ A1E2 7E                                   ld      a,(hl)
  52+ A1E3                                      JumpIfAEqNusng  200, .StillRoom
  52+ A1E3 FE C8       >                        cp     200
  52+ A1E5 CA D3 A1    >                        jp      z,.StillRoom
  53+ A1E8 C3 D5 A1                             jp      .CargoFull
  54+ A1EB              ; END of rountine
  55+ A1EB
  56+ A1EB 3A CF A0     IsLaserUseable:         ld      a,(CurrLaserType)
  57+ A1EE FE FF                                cp      255
  58+ A1F0 C8                                   ret     z
  59+ A1F1 3A D0 A0                             ld      a,(CurrLaserDamage)
  60+ A1F4 FE FF                                cp      255
  61+ A1F6 C9                                   ret
  62+ A1F7
  63+ A1F7 CD 70 A2     InitMainLoop:           call    ClearUnivSlotList
  64+ A1FA AF                                   xor     a
  65+ A1FB 32 7F 9E                             ld      (CurrentUniverseAI),a
  66+ A1FE 32 81 9E                             ld      (SetStationAngryFlag),a
  67+ A201 3E 03                                ld      a,3
  68+ A203 32 C8 9D                             ld      (MenuIdMax),a
  69+ A206                                      SetMemFalse DockedFlag
  69+ A206 3E FF       >                        ld      a,$FF
  69+ A208 32 CC 9D    >                        ld      (DockedFlag),a
  70+ A20B              ;                        call    InitialiseFrontView
  71+ A20B CD 18 89                             call    InitialiseCommander
  72+ A20E                                      MMUSelectUniverseN 2
  72+ A20E ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  73+ A212 CD F4 89                             call    SetInitialShipPosition
  74+ A215              ; Initialist screen refresh
  75+ A215 3E 04                                ld      a, ConsoleRefreshInterval
  76+ A217 32 A6 9E                             ld      (ConsoleRefreshCounter),a
  77+ A21A                                      SetMemFalse    ConsoleRedrawFlag
  77+ A21A 3E FF       >                        ld      a,$FF
  77+ A21C 32 A7 9E    >                        ld      (ConsoleRedrawFlag),a
  78+ A21F                                      MMUSelectStockTable
  78+ A21F ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  79+ A223 CD AA E0                             call    generate_stock_market
  80+ A226 CD AA 91                             call    ResetMessageQueue
  81+ A229                                      InitEventCounter
  81+ A229 AF          >                        xor     a
  81+ A22A 32 85 9E    >                        ld      (EventCounter),a
  82+ A22D                                      ClearMissJump
  82+ A22D 3E FF       >                        ld      a,$FF
  82+ A22F 32 87 9E    >                        ld      (MissJumpFlag),a
  83+ A232                                      SetMemFalse TextInputMode
  83+ A232 3E FF       >                        ld      a,$FF
  83+ A234 32 A8 9E    >                        ld      (TextInputMode),a
  84+ A237 C9                                   ret
  85+ A238
  86+ A238 3E 00        SetSpeedZero:           ld      a,0
  87+ A23A 32 B9 9D                             ld      (DELTA),a                                       ;
  88+ A23D 67                                   ld      h,a                                             ;
  89+ A23E 6F                                   ld      l,a                                             ;
  90+ A23F 22 BA 9D                             ld      (DELT4Lo),hl                                    ;
  91+ A242 C9                                   ret
  92+ A243
  93+ A243              ; sets carry to true if target
  94+ A243 3A BD A0     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
  95+ A246 CB 7F                                bit     7,a
  96+ A248 28 07                                jr      z, .TargetSelected
  97+ A24A E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
  98+ A24C CA 51 A2                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
  99+ A24F                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
  99+ A24F B7          >                        or a
 100+ A250 C9                                   ret
 101+ A251              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 101+ A251 21 8E 9E    >                        ld      hl,UniverseSlotList
 101+ A254 ED 31       >                        add     hl,a
 101+ A256 7E          >                        ld      a,(hl)
 101+ A257 3C          >                        inc     a
 101+ A258 CA 5E A2    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 101+ A25B 3D          >                        dec     a           ; get original value back for later
 102+ A25C                                      SetCarryFlag
 102+ A25C 37          >                        scf
 103+ A25D C9                                   ret
 104+ A25E 3E FF        .TargetInvalid:         ld      a, StageMissileNoTarget     ; housekeep missile status if target gone
 105+ A260 32 BD A0                             ld      (MissileTargettingFlag),a
 106+ A263 C9                                   ret
 107+ A264
 108+ A264              SetMissileTargetting:   MACRO
 109+ A264 ~                                    SetMemTrue MissileTargettingFlag
 110+ A264                                      ENDM
 111+ A264
 112+ A264              ClearMissileTargetting: MACRO
 113+ A264 ~                                    SetMemTrue MissileTargettingFlag
 114+ A264                                      ENDM
 115+ A264
# file closed: ./Variables/general_variablesRoutines.asm
1213  A264
1214  A264                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ A264 AF           ClearSlotCount:         xor     a
   2+ A265 21 8E 9E                             ld      hl,UniverseSlotList
   3+ A268 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   4+ A26A 77           .fillLoop:              ld      (hl),a
   5+ A26B 23                                   inc     hl
   6+ A26C 10 FC                                djnz    .fillLoop
   7+ A26E C9                                   ret
   8+ A26F
   9+ A26F              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ A26F              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ A26F              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  12+ A26F              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  13+ A26F              ; DOE NOT WORK                         ld      de,UniverseSlotList
  14+ A26F              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  15+ A26F              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  16+ A26F              ; DOE NOT WORK                         cp      $FF
  17+ A26F              ; DOE NOT WORK                         jr      z,.SkipSlot
  18+ A26F              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  19+ A26F              ; DOE NOT WORK                         inc     hl
  20+ A26F              ; DOE NOT WORK                         ld      (hl),1
  21+ A26F              ; DOE NOT WORK                         inc     hl
  22+ A26F              ; DOE NOT WORK                         inc     hl
  23+ A26F              ; DOE NOT WORK .SkipSlot               inc     de
  24+ A26F              ; DOE NOT WORK                         djnz    .fillLoop
  25+ A26F C9                                   ret
  26+ A270              ; Wipe all items
  27+ A270 3E FF        ClearUnivSlotList:      ld      a,$FF
  28+ A272 21 8E 9E                             ld      hl,UniverseSlotList
  29+ A275 06 18                                ld      b, UniverseSlotListSize * 2
  30+ A277 77           .fillLoop:              ld      (hl),a
  31+ A278 23                                   inc     hl
  32+ A279 10 FC                                djnz    .fillLoop
  33+ A27B C9                                   ret
  34+ A27C
  35+ A27C 21 8E 9E     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  36+ A27F 36 02                                ld      (hl),ShipTypeStation
  37+ A281 21 9A 9E                             ld      hl,UniverseSlotType
  38+ A284 36 02                                ld      (hl),ShipTypeStation
  39+ A286 C9                                   ret
  40+ A287
  41+ A287 21 8E 9E     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  42+ A28A ED 31                                add     hl,a
  43+ A28C 70                                   ld      (hl),b
  44+ A28D C9                                   ret
  45+ A28E
  46+ A28E 21 9A 9E     SetSlotAToClassB:       ld      hl,UniverseSlotType
  47+ A291 ED 31                                add     hl,a
  48+ A293 70                                   ld      (hl),b
  49+ A294 C9                                   ret
  50+ A295
  51+ A295              ; Clears all except slot A, used when say restarting a space station post launch
  52+ A295 57           ClearFreeSlotListSaveA: ld      d,a
  53+ A296 0E 00                                ld      c,0
  54+ A298 21 8E 9E                             ld      hl,UniverseSlotList
  55+ A29B 06 18                                ld      b, UniverseSlotListSize * 2
  56+ A29D 79           .fillLoop:              ld      a,c
  57+ A29E BA                                   cp      d
  58+ A29F 28 03                                jr      z,.SkipSlot
  59+ A2A1 3E FF                                ld      a,$FF
  60+ A2A3 77                                   ld      (hl),a
  61+ A2A4 23           .SkipSlot:              inc     hl
  62+ A2A5 23                                   inc     hl
  63+ A2A6 10 F5                                djnz    .fillLoop
  64+ A2A8 C9                                   ret
  65+ A2A9
  66+ A2A9 21 8E 9E     ClearSlotA:             ld      hl,UniverseSlotList
  67+ A2AC ED 31                                add     hl,a
  68+ A2AE 36 FF                                ld      (hl),$FF
  69+ A2B0 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  70+ A2B2 ED 31                                add     hl,a
  71+ A2B4 36 FF                                ld      (hl),$FF
  72+ A2B6 C9                                   ret
  73+ A2B7              ; Space Station will always be slot 0
  74+ A2B7
  75+ A2B7 21 9B 9E     AreShipsPresent:        ld      hl,UniverseSlotType+1
  76+ A2BA 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  77+ A2BC 7E           .NextShip:              ld      a,(hl)
  78+ A2BD FE 00                                cp      ShipTypeNormal
  79+ A2BF                                      ClearCarryFlag
  79+ A2BF B7          >                        or a
  80+ A2C0 C8                                   ret     z
  81+ A2C1 23                                   inc     hl
  82+ A2C2 10 F8                                djnz    .NextShip
  83+ A2C4                                      SetCarryFlag
  83+ A2C4 37          >                        scf
  84+ A2C5 C9                                   ret
  85+ A2C6
  86+ A2C6 21 8E 9E     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  87+ A2C9                                      ClearCarryFlag
  87+ A2C9 B7          >                        or a
  88+ A2CA 7E           .SearchLoop:            ld      a,(hl)
  89+ A2CB                                      ReturnIfAEqNusng ShipTypeStation
  89+ A2CB FE 02       >                        cp      ShipTypeStation
  89+ A2CD C8          >                        ret     z
  90+ A2CE                                      SetCarryFlag
  90+ A2CE 37          >                        scf
  91+ A2CF C9                                   ret
  92+ A2D0
  93+ A2D0 21 8E 9E     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ A2D3 ED 31                                add     hl,a
  95+ A2D5 7E                                   ld      a,(hl)
  96+ A2D6 C9                                   ret
  97+ A2D7
  98+ A2D7 21 8F 9E     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ A2DA 7E                                   ld      a,(hl)
 100+ A2DB C9                                   ret
 101+ A2DC
 102+ A2DC 21 8E 9E     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 103+ A2DF 06 0C                                ld      b, UniverseSlotListSize
 104+ A2E1 0E 00                                ld      c, 0
 105+ A2E3 7E           .SearchLoop:            ld      a,(hl)
 106+ A2E4                                      JumpIfAEqNusng $FF, .FoundSlot
 106+ A2E4 FE FF       >                        cp     $FF
 106+ A2E6 CA EF A2    >                        jp      z,.FoundSlot
 107+ A2E9 0C                                   inc     c
 108+ A2EA 23                                   inc     hl
 109+ A2EB 10 F6                                djnz    .SearchLoop
 110+ A2ED                                      SetCarryFlag
 110+ A2ED 37          >                        scf
 111+ A2EE C9                                   ret
 112+ A2EF              .FoundSlot:             ClearCarryFlag
 112+ A2EF B7          >                        or a
 113+ A2F0 C9                                   ret
 114+ A2F1
 115+ A2F1
 116+ A2F1 CD DC A2     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 117+ A2F4 79                                   ld      a,c
 118+ A2F5 C9                                   ret
 119+ A2F6
# file closed: ./Variables/UniverseSlotRoutines.asm
1215  A2F6
1216  A2F6                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ A2F6 00           AutoDocking				DB	0				; $033F
   2+ A2F7 00           PlayerECM				DB	0				; $0340
   3+ A2F8 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ A2F9 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ A2FA 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ A2FE 19           Fuel					DB	25				; 0365  QQ14
   7+ A2FF 46           CargoBaySize			DB	70				; 036E
   8+ A300 00           CargoRunningLoad        DB  0
   9+ A301 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ A305 00 00 00 00
   9+ A309 00 00 00 00
   9+ A30D 00 00 00 00
  10+ A311              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ A311              SlaveCargoTonnes		equ CargoTonnes+3
  12+ A311              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ A311              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ A311              GoldCargoKGs:           equ CargoTonnes+15
  15+ A311              AlienItemsTonnes        equ CargoTonnes+17
  16+ A311              ; For each view laser a localised copy of the stats
  17+ A311              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ A311 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ A315 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ A319              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ A319              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ A319              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ A319              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ A319              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ A319              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ A319              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ A319              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ A319
  29+ A319
  30+ A319              QQ20                    equ CargoTonnes
  31+ A319 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ A333              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ A333              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ A333              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ A333              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ A333              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ A333              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ A333              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ A333 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ A334
# file closed: ./Variables/EquipmentVariables.asm
1217  A334
1218  A334                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ A334              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ A334              doRND2:
   3+ A334 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ A335              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ A335              ; "doRandom, Random Seed update, new value in A & B)"
   6+ A335 3A B3 9C     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ A338 CB 17                                rl		a								; Rotate L including carry
   8+ A33A 4F                                   ld		c,a								; c =  double lo
   9+ A33B 21 B5 9C     .AddSeed2:              ld		hl,RandomSeed2
  10+ A33E 8E                                   adc		a,(hl)							; RAND+2
  11+ A33F 32 B3 9C     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ A342 08           .SaveBtoSeed2:          ex		af,af'
  13+ A343 79                                   ld		a,c
  14+ A344 32 B5 9C                             ld		(RandomSeed2),a
  15+ A347 08                                   ex		af,af'
  16+ A348 3A B4 9C                             ld		a,(RandomSeed1)
  17+ A34B 4F                                   ld		c,a								; C = Seed1
  18+ A34C 21 B6 9C     .AddSeed3:              ld		hl,RandomSeed3
  19+ A34F 8E                                   adc		a,(hl)
  20+ A350 32 B4 9C                             ld		(RandomSeed1),a
  21+ A353 08                                   ex		af,af'
  22+ A354 79                                   ld		a,c
  23+ A355 32 B6 9C                             ld		(RandomSeed3),a
  24+ A358 08                                   ex		af,af'
  25+ A359 C9                                   ret
  26+ A35A
# file closed: ./Variables/random_number.asm
1219  A35A                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ A35A 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ A35E 58 59 53 45
   1+ A362 45 44
   2+ A364 21 BF 9E     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ A367 11 A9 9D                             ld		de,SystemSeed
   4+ A36A ED A0        copy_seed:		        ldi
   5+ A36C ED A0                                ldi
   6+ A36E ED A0                                ldi
   7+ A370 ED A0                                ldi
   8+ A372 ED A0                                ldi
   9+ A374 ED A0                                ldi
  10+ A376 C9                                   ret
  11+ A377
  12+ A377 21 A9 9D     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ A37A 11 BF 9E                             ld		de,GalaxySeeds
  14+ A37D 18 EB                                jr		copy_seed
  15+ A37F
  16+ A37F 21 BF 9E     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ A382 11 B3 9E                             ld		de,WorkingSeeds
  18+ A385 18 E3                                jr		copy_seed
  19+ A387
  20+ A387 21 B3 9E     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ A38A 11 BF 9E                             ld		de,GalaxySeeds
  22+ A38D 18 DB                                jr		copy_seed
  23+ A38F
  24+ A38F 21 B3 9E     copy_working_to_system: ld		hl,WorkingSeeds
  25+ A392 11 A9 9D                             ld		de,SystemSeed
  26+ A395 18 D3                                jr		copy_seed
  27+ A397
  28+ A397 21 A9 9D     copy_system_to_working: ld		hl,SystemSeed
  29+ A39A 11 B3 9E                             ld		de,WorkingSeeds
  30+ A39D 18 CB                                jr		copy_seed
  31+ A39F
  32+ A39F              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ A39F CD A2 A3     		call	.NextStep					; This logic means we hard code x4
  34+ A3A2              .NextStep:
  35+ A3A2 CD A5 A3     		call	process_seed				; This logic means we hard code x2
  36+ A3A5              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ A3A5 3A A9 9D     		ld		a,(SystemSeed)				; QQ15
  38+ A3A8 B7           		or		a							; clear carry flag
  39+ A3A9 21 AB 9D     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ A3AC 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ A3AD 47           		ld		b,a							; partial sum lo
  42+ A3AE 3A AA 9D     		ld		a,(SystemSeed+1)
  43+ A3B1 21 AC 9D     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ A3B4 8E           		adc		a,(hl)						; note add with carry
  45+ A3B5 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ A3B6 3A AB 9D     		ld		a,(SystemSeed+2)
  47+ A3B9 32 A9 9D     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ A3BC 3A AC 9D     		ld		a,(SystemSeed+3)
  49+ A3BF 32 AA 9D     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ A3C2 3A AE 9D     		ld		a,(SystemSeed+5)
  51+ A3C5 32 AC 9D     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ A3C8 3A AD 9D     		ld		a,(SystemSeed+4)
  53+ A3CB 32 AB 9D     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ A3CE B7           		or		a
  55+ A3CF 78           		ld		a,b
  56+ A3D0 21 AB 9D     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ A3D3 86           		add	    a,(hl)
  58+ A3D4 32 AD 9D     		ld		(SystemSeed+4),a
  59+ A3D7 79           		ld		a,c
  60+ A3D8 21 AC 9D     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ A3DB 8E           		adc		a,(hl)
  62+ A3DC 32 AE 9D     		ld		(SystemSeed+5),a
  63+ A3DF C9           		ret
  64+ A3E0
  65+ A3E0              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ A3E0 CD E3 A3     		call	.NextStep					; This logic means we hard code x4
  67+ A3E3              .NextStep:
  68+ A3E3 CD E6 A3     		call	working_seed				; This logic means we hard code x2
  69+ A3E6              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ A3E6              ; x = a + c
  71+ A3E6 3A B3 9E     		ld		a,(WorkingSeeds)			; QQ15
  72+ A3E9 B7           		or		a							; clear carry flag
  73+ A3EA 21 B5 9E     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ A3ED 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ A3EE 47           		ld		b,a							; partial sum lo [x]
  76+ A3EF              ; y = b + d	+ carry
  77+ A3EF 3A B4 9E     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ A3F2 21 B6 9E     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ A3F5 8E           		adc		a,(hl)						; note add with carry
  80+ A3F6 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ A3F7 3A B5 9E     		ld		a,(WorkingSeeds+2)
  82+ A3FA 32 B3 9E     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ A3FD 3A B6 9E     		ld		a,(WorkingSeeds+3)
  84+ A400 32 B4 9E     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ A403 3A B8 9E     		ld		a,(WorkingSeeds+5)
  86+ A406 32 B6 9E     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ A409 3A B7 9E     		ld		a,(WorkingSeeds+4)
  88+ A40C 32 B5 9E     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ A40F B7           		or		a
  90+ A410 78           		ld		a,b
  91+ A411 21 B5 9E     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ A414 86           		add	    a,(hl)
  93+ A415 32 B7 9E     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ A418 79           		ld		a,c
  95+ A419 21 B6 9E     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ A41C 8E           		adc		a,(hl)
  97+ A41D 32 B8 9E     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ A420 C9           		ret
  99+ A421
 100+ A421 32           working_distX	DB 50
 101+ A422 32           working_distY	DB 50
 102+ A423 00           current_distY	DB 0
 103+ A424
 104+ A424 AF           find_present_system:    xor		a
 105+ A425 32 C2 9D                             ld		(XSAV),a
 106+ A428 3A AA 9D     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ A42B 4F                                   ld		c,a
 108+ A42C 3A C6 9E     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ A42F 47                                   ld		b,a								; so b holds Y ccord
 110+ A430 79                                   ld		a,c
 111+ A431 90                                   sub		b
 112+ A432 CB 7F                                bit		7,a
 113+ A434 28 02                                jr		z,.positivedy
 114+ A436 ED 44        .negativedy:            neg
 115+ A438 32 23 A4     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ A43B ED 5B 21 A4                          ld		de,(working_distX)
 117+ A43F BA                                   cp		d
 118+ A440 30 24                                jr		nc,.toofar
 119+ A442 3A AC 9D     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ A445 4F                                   ld		c,a
 121+ A446 3A C5 9E                             ld		a,(PresentSystemX)
 122+ A449 47                                   ld		b,a								; so b holds Y ccord
 123+ A44A 79                                   ld		a,c
 124+ A44B 90                                   sub		b
 125+ A44C CB 7F                                bit		7,a
 126+ A44E 28 02                                jr		z,.positivedx
 127+ A450 ED 44        .negativedx:            neg
 128+ A452 4F           .positivedx:            ld		c,a
 129+ A453 BB                                   cp		e
 130+ A454 30 10                                jr		nc,.toofar
 131+ A456 3A 23 A4     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ A459 47                                   ld		b,a								; we have c to recall Y into b
 133+ A45A ED 43 21 A4                          ld		(working_distX),bc
 134+ A45E C5                                   push	bc
 135+ A45F CD 97 A3                             call 	copy_system_to_working
 136+ A462 C1                                   pop		bc
 137+ A463 78                                   ld		a,b								;
 138+ A464 B1                                   or		c								;
 139+ A465 C8                                   ret		z								; if we have distance 0 then bang on
 140+ A466 CD 9F A3     .toofar:                call	next_system_seed
 141+ A469 3A C2 9D                             ld		a,(XSAV)
 142+ A46C 3D                                   dec		a
 143+ A46D FE 00                                cp		0
 144+ A46F C8                                   ret		z
 145+ A470 32 C2 9D                             ld		(XSAV),a
 146+ A473 18 B3                                jr		.CounterLoop
 147+ A475
 148+ A475              get_planet_data_working_seed:
 149+ A475 3A B4 9E     		ld		a, (WorkingSeeds+1)
 150+ A478 E6 07        		and		7
 151+ A47A 32 47 9E     		ld		(DisplayEcononmy),a
 152+ A47D 3A B5 9E     		ld		a, (WorkingSeeds+2)
 153+ A480 CB 3F        		srl	a
 154+ A482 CB 3F        		srl	a
 155+ A484 CB 3F        		srl	a
 156+ A486 CB 3F        		srl	a								; c/8
 157+ A488 E6 07        		and		7
 158+ A48A 32 48 9E     		ld		(DisplayGovernment),a
 159+ A48D CB 3F        		srl	a
 160+ A48F FE 00        		cp		0
 161+ A491 20 08        		jr		nz,.CanBeRich
 162+ A493              .Fedual:
 163+ A493 3A 47 9E     		ld		a,(DisplayEcononmy)
 164+ A496 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ A498 32 47 9E     		ld		(DisplayEcononmy),a
 166+ A49B              .CanBeRich:
 167+ A49B 3A 47 9E     		ld		a,(DisplayEcononmy)
 168+ A49E EE 07        		xor		7							; flip economy so Rich is now 7
 169+ A4A0 32 49 9E     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ A4A3 47           		ld		b,a
 171+ A4A4 3A B6 9E     		ld		a,(WorkingSeeds+3)
 172+ A4A7 E6 03        		and		3
 173+ A4A9 80           		add		a,b
 174+ A4AA 32 49 9E     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ A4AD 3A 48 9E     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ A4B0 CB 3F        		srl		a 							; gov/2
 177+ A4B2 47           		ld		b,a
 178+ A4B3 3A 49 9E     		ld		a,(DisplayTekLevel)
 179+ A4B6 80           		add		a,b
 180+ A4B7 32 49 9E     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ A4BA CB 27        		sla		a
 182+ A4BC CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ A4BE 47           		ld		b,a
 184+ A4BF 3A 47 9E     		ld		a,(DisplayEcononmy)
 185+ A4C2 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ A4C3 47           		ld		b,a
 187+ A4C4 3A 48 9E     		ld		a,(DisplayGovernment)
 188+ A4C7 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ A4C8 32 4A 9E     		ld		(DisplayPopulation),a
 190+ A4CB 3A 47 9E     		ld		a,(DisplayEcononmy)
 191+ A4CE EE 07        		xor		7							; Onto productivity
 192+ A4D0 C6 03        		add		3							;  (Flipped eco +3)
 193+ A4D2 57           		ld		d,a
 194+ A4D3 3A 48 9E     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ A4D6 C6 04        		add		4
 196+ A4D8 5F           		ld		e,a
 197+ A4D9 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ A4DB 3A 4A 9E     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ A4DE 57           		ld		d,a
 200+ A4DF ED 30        		mul
 201+ A4E1 CB 23        		sla		e
 202+ A4E3 CB 1A        		rr		d
 203+ A4E5 CB 23        		sla		e
 204+ A4E7 CB 1A        		rr		d
 205+ A4E9 CB 23        		sla		e
 206+ A4EB CB 1A        		rr		d							; de * 8
 207+ A4ED ED 53 4C 9E  		ld		(DisplayProductivity),de
 208+ A4F1              .DoRadius:
 209+ A4F1 3A B6 9E     		ld		a,(WorkingSeeds+3)
 210+ A4F4 4F           		ld		c,a
 211+ A4F5 3A B8 9E     		ld		a,(WorkingSeeds+5)
 212+ A4F8 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ A4FA C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ A4FC 47           		ld		b,a							;
 215+ A4FD ED 43 50 9E  		ld		(DisplayRadius),bc
 216+ A501 C9           		ret
 217+ A502
# file closed: ./Variables/galaxy_seed.asm
1220  A502                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ A502 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ A506 65 00
   2+ A508 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ A50C 00
   3+ A50D 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ A511 74 61 72 79
   3+ A515 00
   4+ A516 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ A51A 6E 67 00
   5+ A51D 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ A521 6F 6D 00
   6+ A524
   7+ A524 02 A5 08 A5  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ A528 0D A5 16 A5
   7+ A52C 1D A5
   8+ A52E              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ A52E
  10+ A52E 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ A532 65 64 00
  11+ A535 47 72 65 65  ConditionName2		DB "Green",0
  11+ A539 6E 00
  12+ A53B 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ A53F 6F 77 00
  13+ A542 52 65 64 00  ConditionName4		DB "Red",0
  14+ A546
  15+ A546 2E A5 35 A5  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ A54A 3B A5 42 A5
  16+ A54E              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ A54E
  18+ A54E 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ A552 53 45 49 54
  18+ A556 49 4C 45 54
  18+ A55A 53 54 4F 4E
  18+ A55E 4C 4F 4E 55
  18+ A562 54 48 4E 4F
  18+ A566 41 4C 4C 45
  18+ A56A 58 45 47 45
  18+ A56E 5A 41 43 45
  18+ A572 42 49 53 4F
  18+ A576 55 53 45 53
  18+ A57A 41 52 4D 41
  18+ A57E 49 4E 44 49
  18+ A582 52 45 41 3F
  18+ A586 45 52 41 54
  18+ A58A 45 4E 42 45
  18+ A58E 52 41 4C 41
  18+ A592 56 45 54 49
  18+ A596 45 44 4F 52
  18+ A59A 51 55 41 4E
  18+ A59E 54 45 49 53
  18+ A5A2 52 49 4F 4E
  18+ A5A6 00
  19+ A5A7
  20+ A5A7 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ A5AB 10 00 20 00
  20+ A5AF 40 00 80 00
  20+ A5B3 00 02 00 0A
  20+ A5B7 00 19 00 49
  20+ A5BB FF FF
  21+ A5BD
  22+ A5BD 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ A5C1 6C 65 73 73
  22+ A5C5 00
  23+ A5C6 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ A5CA 6C 79 20 48
  23+ A5CE 61 72 6D 6C
  23+ A5D2 65 73 73 00
  24+ A5D6 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ A5DA 00
  25+ A5DB 41 76 65 72  RankingName4		DB 	"Average",0
  25+ A5DF 61 67 65 00
  26+ A5E3 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ A5E7 65 20 41 76
  26+ A5EB 65 72 61 67
  26+ A5EF 65 00
  27+ A5F1 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ A5F5 65 74 65 6E
  27+ A5F9 74 00
  28+ A5FB 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ A5FF 65 72 6F 75
  28+ A603 73 00
  29+ A605 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ A609 6C 79 00
  30+ A60C 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ A610 20 45 20 4C
  30+ A614 20 49 20 54
  30+ A618 20 45 20 2D
  30+ A61C 2D 2D 00
  31+ A61F 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ A623 6C 6F 62 73
  31+ A627 67 6F 64 00
  32+ A62B 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ A62F 65 72 00
  33+ A632
  34+ A632 BD A5 C6 A5  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ A636 D6 A5 DB A5
  34+ A63A E3 A5 F1 A5
  34+ A63E FB A5 05 A6
  34+ A642 0C A6 1F A6
  34+ A646 2B A6
  35+ A648              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ A648
  37+ A648
  38+ A648              getTableText:
  39+ A648              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ A648              ; ">Note for ranking first 2 bytes are target rank"
  41+ A648 D5           	push	de								; save DE as we will likley need it in caller
  42+ A649 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ A64B ED 31        	add		hl,a
  44+ A64D 5E           	ld		e,(hl)
  45+ A64E 23           	inc		hl
  46+ A64F 56           	ld		d,(hl)							; de = indexed address
  47+ A650 EB           	ex		de,hl							; flip it to hl
  48+ A651 D1           	pop		de								; retrieve de
  49+ A652 C9           	ret										; return with hl as start entry
  50+ A653
  51+ A653
  52+ A653              ;               CF      ZF      Result
  53+ A653              ;               -----------------------------------
  54+ A653              ;               0       0       HL > DE
  55+ A653              ;               0       1       HL == DE
  56+ A653              ;               1       0       HL < DE
  57+ A653              ;               1       1       Impossible
  58+ A653              getRankIndex:
  59+ A653              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ A653              ; ">Note for ranking first 2 bytes are target rank"
  61+ A653 7A           	ld		a,d
  62+ A654 B3           	or		e
  63+ A655 FE 00        	cp		0
  64+ A657 C8           	ret		z								; quicks skip for 0 kills
  65+ A658 AF           	xor 	a
  66+ A659 21 A7 A5     	ld		hl,RankingTable
  67+ A65C              .testLoop:
  68+ A65C 4E           	ld		c,(hl)
  69+ A65D 23           	inc		hl
  70+ A65E 46           	ld		b,(hl)							; bc = ranking
  71+ A65F E5           	push	hl
  72+ A660 60           	ld		h,b
  73+ A661 69           	ld		l,c
  74+ A662 CD 55 B2     	call	compare16HLDE
  75+ A665 38 06        	jr		c,.HLLTDE
  76+ A667              .HLGTEDE									; Found the correct rank
  77+ A667 E1           	pop		hl
  78+ A668 23           	inc		hl								; move to next value
  79+ A669 23           	inc		hl
  80+ A66A 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ A66B 18 EF        	jr		.testLoop
  82+ A66D              .HLLTDE:									; HL < Kills so found correct rank
  83+ A66D E1           	pop		hl
  84+ A66E C9           	ret
  85+ A66F
# file closed: ./Tables/text_tables.asm
1221  A66F                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ A66F 58 00        WordDummy					DB  "X",0
   2+ A671 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ A675 74 00
   3+ A677 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ A67B 74 00
   4+ A67D 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ A681 00
   5+ A682 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ A686 00
   6+ A687 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ A68B 65 00
   7+ A68D 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ A691 70 65 00
   8+ A694 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ A698 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ A69C 6F 00
  10+ A69E 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ A6A2 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ A6A6 00
  12+ A6A7 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ A6AB 70 73 00
  13+ A6AE 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ A6B2 4D 2E 00
  14+ A6B5 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ A6B9 65 6D 00
  15+ A6BC 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ A6C0 67 79 00
  16+ A6C3 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ A6C7 00
  17+ A6C8 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ A6CC 72 00
  18+ A6CE 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ A6D2 65 00
  19+ A6D4 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ A6D8 00
  20+ A6D9 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ A6DD 61 72 79 00
  21+ A6E1 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ A6E5 6E 67 00
  22+ A6E8 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ A6EC 6F 6D 00
  23+ A6EF 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ A6F3 00
  24+ A6F4 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ A6F8 6C 64 00
  25+ A6FB 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A6FF 69 6E 67 00
  26+ A703 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A707 75 74 65 72
  26+ A70B 73 00
  27+ A70D 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A711 72 73 70 61
  27+ A715 63 65 00
  28+ A718 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A71C 63 74 69 63
  28+ A720 00
  29+ A721 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A725 61 00
  30+ A727 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A72B 6E 00
  31+ A72D 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A731 6E 64 65 72
  31+ A735 00
  32+ A736 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A73A 74 69 76 65
  32+ A73E 00
  33+ A73F 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A743 00
  34+ A744 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A748 69 6C 65 73
  34+ A74C 00
  35+ A74D 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A751 6F 61 63 74
  35+ A755 69 76 65 73
  35+ A759 00
  36+ A75A 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A75E 65 73 00
  37+ A761 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A765 6F 72 2F 57
  37+ A769 69 6E 65 73
  37+ A76D 00
  38+ A76E 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A772 72 69 65 73
  38+ A776 00
  39+ A777 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A77B 6F 74 69 63
  39+ A77F 73 00
  40+ A781 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A785 69 6E 65 72
  40+ A789 79 00
  41+ A78B 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A78F 79 73 00
  42+ A792 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A796 61 72 6D 73
  42+ A79A 00
  43+ A79B 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A79F 00
  44+ A7A0 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A7A4 72 61 6C 73
  44+ A7A8 00
  45+ A7A9 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A7AD 00
  46+ A7AE 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A7B2 69 6E 75 6D
  46+ A7B6 00
  47+ A7B7 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A7BB 53 74 6F 6E
  47+ A7BF 65 73 00
  48+ A7C2 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A7C6 6E 20 49 74
  48+ A7CA 65 6D 73 00
  49+ A7CE 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A7D2 65 73 00
  50+ A7D5 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A7D9 67 72 61 6D
  50+ A7DD 73 00
  51+ A7DF 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A7E3 73 00
  52+ A7E5 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A7E9 74 00
  53+ A7EB 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A7EF 65 00
  54+ A7F1 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A7F5 74 00
  55+ A7F7 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A7FB 00
  56+ A7FC 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A7FF 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A803 61 6E 63 65
  57+ A807 00
  58+ A808 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A80C 6F 6D 79 00
  59+ A810 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A814 72 6E 6D 65
  59+ A818 6E 74 00
  60+ A81B 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A81F 4C 65 76 65
  60+ A823 6C 00
  61+ A825 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A829 6C 61 74 69
  61+ A82D 6F 6E 00
  62+ A830 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A834 69 6F 6E 00
  63+ A838 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A83C 69 6F 6E 00
  64+ A840 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A844 73 00
  65+ A846 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A84A 75 63 74 69
  65+ A84E 76 69 74 79
  65+ A852 00
  66+ A853 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A857 61 67 65 00
  67+ A85B 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A85F 75 73 00
  68+ A862 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A865 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A869 00
  70+ A86A 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A86E 00
  71+ A86F 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A873 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A877 6C 79 00
  73+ A87A 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A87E 00
  74+ A87F 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A883 73 74 72 69
  74+ A887 61 6C 00
  75+ A88A 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A88E 63 75 6C 74
  75+ A892 75 72 61 6C
  75+ A896 00
  76+ A897 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A89B 63 68 79 00
  77+ A89F 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A8A3 61 6C 00
  78+ A8A6 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A8AA 69 2D 47 6F
  78+ A8AE 76 65 72 6E
  78+ A8B2 6D 65 6E 74
  78+ A8B6 00
  79+ A8B7 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A8BB 61 74 6F 72
  79+ A8BF 73 68 69 70
  79+ A8C3 00
  80+ A8C4 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A8C8 75 6E 69 73
  80+ A8CC 74 00
  81+ A8CE 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A8D2 65 64 65 72
  81+ A8D6 61 63 79 00
  82+ A8DA 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A8DE 63 72 61 63
  82+ A8E2 79 00
  83+ A8E4 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A8E8 6F 72 61 74
  83+ A8EC 65 20 53 74
  83+ A8F0 61 74 65 00
  84+ A8F4 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A8F8 65 00
  85+ A8FA 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A8FE 74 00
  86+ A900 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A904 73 00
  87+ A906 30 00        Word0						DB  "0",0				   ;86
  88+ A908 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A90C 65 74 00
  89+ A90F 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A913 65 73 00
  90+ A916 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A91A 75 63 74 00
  91+ A91E 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A922 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A926 65 00
  93+ A928 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A92C 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A930 00
  95+ A931 74 00        Wordt						DB  "t",0                  ;94
  96+ A933 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A936 67 00        Wordg						DB  "g",0                  ;96
  98+ A938 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A93C 69 74 69 74
  98+ A940 79 00
  99+ A942 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A946 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A94A 6B 00
 101+ A94C 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A950 70 00
 102+ A952 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A956 00
 103+ A957 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A95B 69 6C 65 00
 104+ A95F 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A963 72 64 72 69
 104+ A967 76 65 00
 105+ A96A 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A96E 74 61 72 79
 105+ A972 00
 106+ A973
 107+ A973 6F A6 71 A6  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A977 77 A6 7D A6
 108+ A97B 82 A6 87 A6  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A97F 8D A6 94 A6
 109+ A983 98 A6 9E A6  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A987 A2 A6 A7 A6
 110+ A98B AE A6 B5 A6  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A98F BC A6 C3 A6
 111+ A993 C8 A6 CE A6  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ A997 D4 A6 D9 A6
 112+ A99B E1 A6 E8 A6  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ A99F EF A6 F4 A6
 113+ A9A3 FB A6 03 A7  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ A9A7 0D A7 18 A7
 114+ A9AB 21 A7 27 A7  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ A9AF 2D A7 36 A7
 115+ A9B3 3F A7 44 A7  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ A9B7 4D A7 5A A7
 116+ A9BB 61 A7 6E A7  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ A9BF 77 A7 81 A7
 117+ A9C3 8B A7 92 A7  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ A9C7 9B A7 A0 A7
 118+ A9CB A9 A7 AE A7  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ A9CF B7 A7 C2 A7
 119+ A9D3 CE A7 D5 A7  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ A9D7 DF A7 E5 A7
 120+ A9DB EB A7 F1 A7  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ A9DF F7 A7 FC A7
 121+ A9E3 FF A7 08 A8  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ A9E7 10 A8 1B A8
 122+ A9EB 25 A8 30 A8  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ A9EF 38 A8 40 A8
 123+ A9F3 46 A8 53 A8  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ A9F7 5B A8 62 A8
 124+ A9FB 65 A8        					DW  WordMCR																	;68
 125+ A9FD 6A A8 6F A8  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ AA01 73 A8 7A A8
 126+ AA05 7F A8 8A A8                      DW  WordIndustrial,     WordAgricultural									;73
 127+ AA09 97 A8 9F A8  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ AA0D A6 A8 B7 A8
 128+ AA11 C4 A8 CE A8                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ AA15 DA A8 E4 A8
 129+ AA19 F4 A8 FA A8  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ AA1D 00 A9 06 A9
 130+ AA21 08 A9 0F A9  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ AA25 16 A9 1E A9
 131+ AA29 22 A9 28 A9                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ AA2D 2C A9
 132+ AA2F 31 A9 33 A9  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ AA33 36 A9
 133+ AA35 38 A9 42 A9  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ AA39 46 A9 4C A9
 134+ AA3D 52 A9 57 A9                      DW  WordShip,           WordMissile       ; 101
 135+ AA41
 136+ AA41              ; Phrases
 137+ AA41 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ AA45 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ AA48 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ AA4B 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ AA4E 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ AA51 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ AA54 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ AA57 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ AA5A 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ AA5E 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ AA62 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ AA66 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ AA6A 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ AA6E 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ AA71 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ AA74 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ AA77 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ AA7A 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ AA7D 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ AA80 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ AA83 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ AA86 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ AA89 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ AA8C 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ AA8F 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ AA93 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ AA96 64 65        TextEquipShip               DB  100,101          ;26
 164+ AA98
 165+ AA98 00           TextDummy					DB  0
 166+ AA99
 167+ AA99 41 AA 45 AA  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ AA9D 48 AA
 168+ AA9F 4B AA 4E AA  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ AAA3 51 AA
 169+ AAA5 54 AA 57 AA  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ AAA9 5A AA 5E AA  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ AAAD 62 AA 66 AA
 171+ AAB1 6A AA 6E AA  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ AAB5 71 AA
 172+ AAB7 74 AA 77 AA  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ AABB 7D AA 7A AA
 172+ AABF 86 AA 80 AA
 172+ AAC3 83 AA 89 AA
 173+ AAC7 8C AA        					DW  TextLightYears		                                            ; 21 23
 174+ AAC9 8F AA 93 AA  					DW  Text0LightYears, TextMarketPrices
 175+ AACD 98 AA        					DW  TextDummy;  25
 176+ AACF 00 00 00...  TextBuffer			DS	33
 177+ AAF0
 178+ AAF0              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ AAF0              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ AAF0
 181+ AAF0              CapitaliseString:
 182+ AAF0              ; ">CapitaliseString hl = address"
 183+ AAF0              .CapLoop:
 184+ AAF0 23           	inc		hl
 185+ AAF1 7E           	ld		a,(hl)
 186+ AAF2 FE 00        	cp		0
 187+ AAF4 C8           	ret		z
 188+ AAF5 FE 5B        	cp		'Z'+1
 189+ AAF7 30 F7        	jr		nc,.CapLoop
 190+ AAF9 FE 41        	cp		'A'
 191+ AAFB 38 F3        	jr		c,.CapLoop
 192+ AAFD              .LowerCase:
 193+ AAFD C6 20        	add		a,'a'-'A'
 194+ AAFF 77           	ld		(hl),a
 195+ AB00 18 EE        	jr		.CapLoop
 196+ AB02
 197+ AB02              WordIndexToAddress:
 198+ AB02 21 73 A9     	ld		hl,WordIdx
 199+ AB05 ED 31        	add		hl,a
 200+ AB07 ED 31        	add		hl,a
 201+ AB09 D5           	push	de
 202+ AB0A 5E           	ld		e,(hl)
 203+ AB0B 23           	inc		hl
 204+ AB0C 56           	ld		d,(hl)
 205+ AB0D EB           	ex		de,hl
 206+ AB0E D1           	pop		de
 207+ AB0F C9           	ret
 208+ AB10
 209+ AB10
 210+ AB10              expandTokenToString:
 211+ AB10              ; ">expandTokenToString a = texttoken"
 212+ AB10 21 99 AA     	ld		hl,TextTokens
 213+ AB13 CD 48 A6     	call	getTableText
 214+ AB16 11 CF AA     	ld		de,TextBuffer
 215+ AB19              .ReadLoop:
 216+ AB19 7E           	ld		a,(hl)
 217+ AB1A FE 00        	cp		0
 218+ AB1C 28 1B        	jr		z,.ReadDone
 219+ AB1E E5           	push	hl
 220+ AB1F D5           	push	de
 221+ AB20 21 73 A9     	ld		hl,WordIdx
 222+ AB23 CD 48 A6     	call	getTableText
 223+ AB26 D1           	pop		de
 224+ AB27              .WordExpandLoop:
 225+ AB27 7E           	ld		a,(hl)
 226+ AB28 FE 00        	cp		0
 227+ AB2A 28 05        	jr		z,.AddSpace
 228+ AB2C              ;.GetChar:
 229+ AB2C 12           	ld		(de),a
 230+ AB2D 13           	inc		de
 231+ AB2E 23           	inc		hl
 232+ AB2F 18 F6        	jr		.WordExpandLoop
 233+ AB31              .AddSpace:
 234+ AB31 3E 20        	ld		a,' '
 235+ AB33 12           	ld		(de),a
 236+ AB34 13           	inc		de
 237+ AB35 E1           	pop		hl
 238+ AB36 23           	inc		hl
 239+ AB37 18 E0        	jr		.ReadLoop
 240+ AB39              .ReadDone:
 241+ AB39 1B           	dec		de
 242+ AB3A AF           	xor		a
 243+ AB3B 12           	ld		(de),a
 244+ AB3C C9           	ret
 245+ AB3D
# file closed: ./Tables/dictionary.asm
1222  AB3D                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ AB3D 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ AB41 53 45 49 54
   1+ AB45 49 4C 45 54
   1+ AB49 53 54 4F 4E
   1+ AB4D 4C 4F 4E 55
   1+ AB51 54 48 4E 4F
   2+ AB55 41 4C 4C     name_digrams2   DB "ALL"
   3+ AB58 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ AB5C 45 5A 41 43
   3+ AB60 45 42 49 53
   3+ AB64 4F 55 53 45
   3+ AB68 53 41 52 4D
   3+ AB6C 41 49 4E 44
   3+ AB70 49 52 45 41
   4+ AB74 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ AB78 54 45 4E 42
   4+ AB7C 45 52 41 4C
   4+ AB80 41 56 45 54
   4+ AB84 49 45 44 4F
   4+ AB88 52 51 55 41
   4+ AB8C 4E 54 45 49
   4+ AB90 53 52 49 4F
   4+ AB94 4E
   5+ AB95
   6+ AB95              ; TODO Moveinto galaxy data module
   7+ AB95 00 00 00...  name_expanded	DS 32
   8+ ABB5 00           				DB 0
   9+ ABB6
  10+ ABB6
  11+ ABB6
  12+ ABB6              NamingLoop:
  13+ ABB6 3A B8 9E     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ ABB9 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ ABBB FE 00        	cp		0					; 0 = skip 2 chars
  16+ ABBD 28 12        	jr		z,.SkipPhrase
  17+ ABBF C6 0C        	add		a,12
  18+ ABC1 CB 27        	sla		a					; phrase = (a+12)*2
  19+ ABC3 21 3D AB     	ld		hl,name_digrams
  20+ ABC6 ED 31        	add		hl,a
  21+ ABC8 ED A0        	ldi
  22+ ABCA 7E           	ld		a,(hl)
  23+ ABCB FE 3F        	cp		'?'
  24+ ABCD 28 02        	jr		z,.SkipPhrase
  25+ ABCF              .AddExtra:
  26+ ABCF ED A0        	ldi
  27+ ABD1              .SkipPhrase:
  28+ ABD1 D5           	push	de
  29+ ABD2 CD E6 A3     	call	working_seed
  30+ ABD5 D1           	pop		de
  31+ ABD6 C9           	ret
  32+ ABD7
  33+ ABD7              ;GetDigramGalaxySeed:
  34+ ABD7              ;	call	copy_galaxy_to_working
  35+ ABD7              ;	jr		GetDigramWorkingSeed
  36+ ABD7              ;GetDigramSystemSeed:
  37+ ABD7              ;	call	copy_system_to_working
  38+ ABD7              ;GetDigramWorkingSeed:
  39+ ABD7              ;; ">GetDigram a = digram seed"
  40+ ABD7              ;	ld		de,name_expanded
  41+ ABD7              ;	ld		b,3
  42+ ABD7              ;	ld		a,(WorkingSeeds)
  43+ ABD7              ;	and		$40
  44+ ABD7              ;	jr		z,.SmallSizeName
  45+ ABD7              ;.LargeSizeName:
  46+ ABD7              ;	call	NamingLoop
  47+ ABD7              ;.SmallSizeName:
  48+ ABD7              ;	call	NamingLoop
  49+ ABD7              ;	call	NamingLoop
  50+ ABD7              ;	call	NamingLoop
  51+ ABD7              ;.DoneName:
  52+ ABD7              ;	ex		de,hl
  53+ ABD7              ;	ld		(hl),0
  54+ ABD7              ;	ex		de,hl
  55+ ABD7              ;	ret
  56+ ABD7
  57+ ABD7
  58+ ABD7
  59+ ABD7              ;GetDigramWorkingSeed:
  60+ ABD7              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ ABD7              ;	ld		b,5					; working seed
  62+ ABD7              ;	ld		de,name_expanded
  63+ ABD7              ;.ExpansionLoop:
  64+ ABD7              ;	push	bc
  65+ ABD7              ;	ld		hl,WorkingSeeds
  66+ ABD7              ;	ld		a,b
  67+ ABD7              ;	add		hl,a
  68+ ABD7              ;	ld		a,(hl)	; a = first byte of name seed
  69+ ABD7              ;	and 	$1F					; Keep bottom 5 bits only
  70+ ABD7              ;	cp		0					; 0 = skip 2 chars
  71+ ABD7              ;	jr		z,.SkipPhrase
  72+ ABD7              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ ABD7              ;	call	TT27
  74+ ABD7              ;.SkipPhrase:
  75+ ABD7              ;	push	de
  76+ ABD7              ;	call	next_working_seed
  77+ ABD7              ;	pop		de
  78+ ABD7              ;	pop		bc
  79+ ABD7              ;	djnz	GetDigramWorkingSeed
  80+ ABD7              ;.DoneName:
  81+ ABD7              ;	ex		de,hl
  82+ ABD7              ;	ld		(hl),0
  83+ ABD7              ;	ex		de,hl
  84+ ABD7              ;	ret
  85+ ABD7              ;
  86+ ABD7              ;ExpandToken:
  87+ ABD7              ;	DE = target
  88+ ABD7              ;	a = token
  89+ ABD7              ;
  90+ ABD7              ;PlanetDigram:
  91+ ABD7              ;	cp		&A0							; >- 160
  92+ ABD7              ;	jr		c,MorePage4
  93+ ABD7              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ ABD7              ;	asl		2							; Multiply by 2
  95+ ABD7              ;	ld		hl, name_digrams2
  96+ ABD7              ;	add		hl,a
  97+ ABD7              ;	ld		a,(hl)
  98+ ABD7              ;	call	ProcessTextToken
  99+ ABD7              ;	inc		hl
 100+ ABD7              ;	ld		a,(hl)
 101+ ABD7              ;	cp		'?'
 102+ ABD7              ;	ret		z
 103+ ABD7              ;	call	ProcessTextToken
 104+ ABD7              ;	ret
 105+ ABD7              ;MorePage4:
 106+ ABD7              ;	sub		$A0
 107+ ABD7              ;ExtraTokenCheck:
 108+ ABD7              ;	push	de							; save target address
 109+ ABD7              ;	push	bc
 110+ ABD7              ;	ld		b,a
 111+ ABD7              ;	ld		hl,varV
 112+ ABD7              ;	ld		(VarV),0400
 113+ ABD7              ;	ld		(varV),a
 114+ ABD7              ;	ld
 115+ ABD7              ;
 116+ ABD7              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ ABD7              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ ABD7              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ ABD7              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ ABD7              ;0A                      ASL A		      \ *= 2
 121+ ABD7              ;A8                      TAY 		      \ digram index = 0to62
 122+ ABD7              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ ABD7              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ ABD7              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ ABD7              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ ABD7              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ ABD7              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ ABD7              ;
 129+ ABD7              ;	.TT47	\ more page4, subtract #160
 130+ ABD7              ;E9 A0                   SBC #&A0	\ -= 160
 131+ ABD7              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ ABD7              ;AA                      TAX 		\ copy of word index
 133+ ABD7              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ ABD7              ;85 22                   STA &22		\ V
 135+ ABD7              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ ABD7              ;85 23                   STA &23		\ V+1
 137+ ABD7              ;A0 00                   LDY #0
 138+ ABD7              ;8A                      TXA 		\ token = word index
 139+ ABD7              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ ABD7              ;	.TT51	\ counters Y letter, X token
 141+ ABD7              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ ABD7              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ ABD7              ;C8                      INY 		\ letter count
 144+ ABD7              ;D0 F9                   BNE TT51	\ loop Y
 145+ ABD7              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ ABD7              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ ABD7              ;	.TT49	\ word ended
 148+ ABD7              ;C8                      INY
 149+ ABD7              ;D0 02                   BNE TT59    	\ next word
 150+ ABD7              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ ABD7              ;	.TT59	\ next word
 152+ ABD7              ;CA                      DEX 		\ token count
 153+ ABD7              ;D0 ED                   BNE TT51	\ loop X token
 154+ ABD7              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ ABD7              ;98                      TYA
 156+ ABD7              ;48                      PHA 		\ store Yindex
 157+ ABD7              ;A5 23                   LDA &23		\ V+1
 158+ ABD7              ;48                      PHA 		\ correct pointer hi
 159+ ABD7              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ ABD7              ;49 23                   EOR #&23	\ decode '#'
 161+ ABD7              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ ABD7              ;68                      PLA 		\ restore this depth's Vhi
 163+ ABD7              ;85 23                   STA &23		\ V+1
 164+ ABD7              ;68                      PLA
 165+ ABD7              ;A8                      TAY 		\ restore this depth's Yindex
 166+ ABD7              ;C8                      INY 		\ next letter
 167+ ABD7              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ ABD7              ;E6 23                   INC &23		\ V+1
 169+ ABD7              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ ABD7              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ ABD7              ;	.TT48 	\ rts
 172+ ABD7              ;60                      RTS 		\ end of flight token printing TT27
 173+ ABD7              ;
 174+ ABD7              ;
 175+ ABD7              ;
 176+ ABD7              ;
 177+ ABD7              ;
 178+ ABD7              ;
 179+ ABD7              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ ABD7              ;;AA                      TAX		\ copy token to count down
 181+ ABD7              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ ABD7              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ ABD7              ;CA                      DEX
 184+ ABD7              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ ABD7              ;CA                      DEX
 186+ ABD7              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ ABD7              ;CA                      DEX
 188+ ABD7              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ ABD7              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ ABD7              ;CA                      DEX
 191+ ABD7              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ ABD7              ;CA                      DEX
 193+ ABD7              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ ABD7              ;CA                      DEX
 195+ ABD7              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ ABD7              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ ABD7              ;85 72                   STA &72	 	\ QQ17
 198+ ABD7              ;60                      RTS
 199+ ABD7              ;CA                      DEX 		\ skip Acc ==7
 200+ ABD7              ;CA                      DEX
 201+ ABD7              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ ABD7              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ ABD7              ;60                      RTS
 204+ ABD7              ;CA                      DEX 		\ continue 9to127 tokens
 205+ ABD7              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ ABD7              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ ABD7              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ ABD7              ;C9 0E                   CMP #14		\ < 14 ?
 209+ ABD7              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ ABD7              ;C9 20                   CMP #32		\ < 32 ?
 211+ ABD7              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ ABD7              ;		\ Token  < 14 or > 31
 213+ ABD7              ;A6 72                   LDX &72	 	\ QQ17
 214+ ABD7              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ ABD7              ;30 11                   BMI TT41 	\ if bit7 set
 216+ ABD7              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ ABD7              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ ABD7              ;	.TT42	\ Uppercase to lowercase
 219+ ABD7              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ ABD7              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ ABD7              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ ABD7              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ ABD7              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ ABD7              ;	.TT44	\ print character as is with TT26
 225+ ABD7              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ ABD7              ;
 227+ ABD7              ;	.TT41	\ QQ17 bit7 set
 228+ ABD7              ;24 72                   BIT &72		\ QQ17
 229+ ABD7              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ ABD7              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ ABD7              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ ABD7              ;48                      PHA 		\ else store token Acc
 233+ ABD7              ;8A                      TXA 		\ QQ17 copy
 234+ ABD7              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ ABD7              ;85 72                   STA &72	 	\ QQ17
 236+ ABD7              ;68                      PLA 		\ restore token
 237+ ABD7              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ ABD7              ;
 239+ ABD7              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ ABD7              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ ABD7              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ ABD7              ;
 243+ ABD7              ;	.crlf	\ Acc == 9,  colon on right
 244+ ABD7              ;A9 15                   LDA #21		\ on right
 245+ ABD7              ;85 2C                   STA &2C		\ XC
 246+ ABD7              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ ABD7              ;
 248+ ABD7              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ ABD7              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ ABD7              ;F0 63                   BEQ TT48	\ rts
 251+ ABD7              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ ABD7              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ ABD7              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ ABD7              ;48                      PHA 		\ push token
 255+ ABD7              ;8A                      TXA 		\ QQ17 copy
 256+ ABD7              ;29 BF                   AND #&BF	\ clear bit6
 257+ ABD7              ;85 72                   STA &72	 	\ QQ17
 258+ ABD7              ;68                      PLA 		\ pull token
 259+ ABD7              ;	.TT74	\ TT26, print character.
 260+ ABD7              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ ABD7              ;
 262+ ABD7              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ ABD7              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ ABD7              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ ABD7              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ ABD7              ;0A                      ASL A		      \ *= 2
 267+ ABD7              ;A8                      TAY 		      \ digram index = 0to62
 268+ ABD7              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ ABD7              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ ABD7              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ ABD7              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ ABD7              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ ABD7              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ ABD7              ;
 275+ ABD7              ;	.TT47	\ more page4, subtract #160
 276+ ABD7              ;E9 A0                   SBC #&A0	\ -= 160
 277+ ABD7              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ ABD7              ;AA                      TAX 		\ copy of word index
 279+ ABD7              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ ABD7              ;85 22                   STA &22		\ V
 281+ ABD7              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ ABD7              ;85 23                   STA &23		\ V+1
 283+ ABD7              ;A0 00                   LDY #0
 284+ ABD7              ;8A                      TXA 		\ token = word index
 285+ ABD7              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ ABD7              ;	.TT51	\ counters Y letter, X token
 287+ ABD7              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ ABD7              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ ABD7              ;C8                      INY 		\ letter count
 290+ ABD7              ;D0 F9                   BNE TT51	\ loop Y
 291+ ABD7              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ ABD7              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ ABD7              ;	.TT49	\ word ended
 294+ ABD7              ;C8                      INY
 295+ ABD7              ;D0 02                   BNE TT59    	\ next word
 296+ ABD7              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ ABD7              ;	.TT59	\ next word
 298+ ABD7              ;CA                      DEX 		\ token count
 299+ ABD7              ;D0 ED                   BNE TT51	\ loop X token
 300+ ABD7              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ ABD7              ;98                      TYA
 302+ ABD7              ;48                      PHA 		\ store Yindex
 303+ ABD7              ;A5 23                   LDA &23		\ V+1
 304+ ABD7              ;48                      PHA 		\ correct pointer hi
 305+ ABD7              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ ABD7              ;49 23                   EOR #&23	\ decode '#'
 307+ ABD7              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ ABD7              ;68                      PLA 		\ restore this depth's Vhi
 309+ ABD7              ;85 23                   STA &23		\ V+1
 310+ ABD7              ;68                      PLA
 311+ ABD7              ;A8                      TAY 		\ restore this depth's Yindex
 312+ ABD7              ;C8                      INY 		\ next letter
 313+ ABD7              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ ABD7              ;E6 23                   INC &23		\ V+1
 315+ ABD7              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ ABD7              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ ABD7              ;	.TT48 	\ rts
 318+ ABD7              ;60                      RTS 		\ end of flight token printing TT27
 319+ ABD7              ;
 320+ ABD7              ;
 321+ ABD7              ;
# file closed: ./Tables/name_digrams.asm
1223  ABD7              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1224  ABD7
1225  ABD7              ; Include all maths libraries to test assembly
1226  ABD7
1227  ABD7                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ ABD7 CB 7C        addhldesigned:          bit     7,h
   2+ ABD9 20 03                                jr      nz,.noneghl
   3+ ABDB CD 6B B2                             call    negate16hl
   4+ ABDE CB 7A        .noneghl:               bit     7,d
   5+ ABE0 20 03                                jr      nz,.nonegde
   6+ ABE2 CD 72 B2                             call    negate16de
   7+ ABE5 19           .nonegde:               add     hl,de                       ; do 2'd c add
   8+ ABE6 AF                                   xor     a                           ; assume positive
   9+ ABE7 CB 7C                                bit     7,h
  10+ ABE9 C8                                   ret     z                           ; if not set then can exit early
  11+ ABEA CD 6B B2                             call    negate16hl
  12+ ABED 3E FF                                ld      a,$FF
  13+ ABEF C9                                   ret
  14+ ABF0
# file closed: ./Maths/addhldesigned.asm
1228  ABF0                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ ABF0
   2+ ABF0              ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
   3+ ABF0 16 00        HL2cEquHLSgnPlusAusgn:  ld      d,0
   4+ ABF2 5F                                   ld      e,a                         ; set up DE = A
   5+ ABF3 7C                                   ld      a,h
   6+ ABF4 E6 7F                                and     SignMask8Bit
   7+ ABF6 28 07                                jr      z,.HLPositive               ; if HL is negative then do HL - A
   8+ ABF8 67           .HLNegative:            ld      h,a                         ; hl = ABS (HL)
   9+ ABF9                                      NegHL                               ; hl = - hl
   9+ ABF9 AF          >                    xor a
   9+ ABFA 95          >                    sub l
   9+ ABFB 6F          >                    ld l,a
   9+ ABFC 9F          >                    sbc a,a
   9+ ABFD 94          >                    sub h
   9+ ABFE 67          >                    ld h,a
  10+ ABFF              .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
  10+ ABFF B7          >                        or a
  11+ AC00 ED 5A                                adc     hl,de                       ; aftert his hl will be 2's c
  12+ AC02 C9                                   ret
  13+ AC03
  14+ AC03 5F           HLEquHLSgnPlusAusgn:    ld      e,a
  15+ AC04 7C                                   ld      a,h
  16+ AC05 E6 7F                                and     SignMask8Bit
  17+ AC07 20 04                                jr      nz,.HLNegative              ; if HL is negative then do HL - A
  18+ AC09 7B           .HLPositive:            ld      a,e                         ; else its HL + A
  19+ AC0A ED 31                                add     hl,a
  20+ AC0C C9                                   ret
  21+ AC0D              .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
  21+ AC0D 7C          >                        ld      a,h
  21+ AC0E E6 7F       >                        and     SignMask8Bit
  21+ AC10 67          >                        ld      h,a
  22+ AC11                                      NegHL                               ; and convert to 2's C
  22+ AC11 AF          >                    xor a
  22+ AC12 95          >                    sub l
  22+ AC13 6F          >                    ld l,a
  22+ AC14 9F          >                    sbc a,a
  22+ AC15 94          >                    sub h
  22+ AC16 67          >                    ld h,a
  23+ AC17 16 00                                ld      d,0
  24+ AC19                                      ClearCarryFlag
  24+ AC19 B7          >                        or a
  25+ AC1A ED 52                                sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
  26+ AC1C FA 24 AC                             jp      m,.FlipResult               ; if it was negative then its really positive
  27+ AC1F                                      SetSignBit      h
  27+ AC1F 7C          >                        ld      a,h
  27+ AC20 F6 80       >                        or      SignOnly8Bit
  27+ AC22 67          >                        ld      h,a
  28+ AC23 C9                                   ret
  29+ AC24              .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
  29+ AC24 AF          >                    xor a
  29+ AC25 95          >                    sub l
  29+ AC26 6F          >                    ld l,a
  29+ AC27 9F          >                    sbc a,a
  29+ AC28 94          >                    sub h
  29+ AC29 67          >                    ld h,a
  30+ AC2A C9                                   ret
  31+ AC2B
  32+ AC2B
  33+ AC2B
  34+ AC2B              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
  35+ AC2B 57           AddAusngToHLsng:        ld      d,a
  36+ AC2C 5C                                   ld      e,h
  37+ AC2D 7C                                   ld      a,h
  38+ AC2E E6 7F                                and     SignMask8Bit
  39+ AC30 67                                   ld      h,a
  40+ AC31 7A                                   ld      a,d
  41+ AC32 ED 31                                add     hl,a
  42+ AC34 7B                                   ld      a,e
  43+ AC35 E6 80                                and     SignOnly8Bit
  44+ AC37 B4                                   or      h
  45+ AC38 C9                                   ret
  46+ AC39              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  47+ AC39 44           HLEequAusngMinusHLsng:  ld      b,h
  48+ AC3A 4F                                   ld      c,a
  49+ AC3B 78                                   ld      a,b
  50+ AC3C E6 80                                and     SignOnly8Bit
  51+ AC3E 20 08                                jr      nz,.DoAdd
  52+ AC40 EB           .DoSubtract:            ex      de,hl               ; move hl into de
  53+ AC41 26 00                                ld      h,0                 ; hl = a
  54+ AC43 69                                   ld      l,c
  55+ AC44                                      ClearCarryFlag
  55+ AC44 B7          >                        or a
  56+ AC45 ED 52                                sbc     hl,de               ; hl = a - hl
  57+ AC47 C9                                   ret
  58+ AC48 79           .DoAdd:                 ld      a,c
  59+ AC49 ED 31                                add hl,a
  60+ AC4B C9                                   ret
  61+ AC4C              ;tested mathstestsun2
  62+ AC4C              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
  63+ AC4C 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
  64+ AC4D AA                                   xor     d                   ; .
  65+ AC4E E6 80                                and     SignOnly8Bit        ; .
  66+ AC50 20 19                                jr      nz,.SignDifferent   ; .
  67+ AC52 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
  68+ AC53 E6 80                                and     SignOnly8Bit        ; so store it in iyh
  69+ AC55 FD 67                                ld      iyh,a               ;
  70+ AC57 78                                   ld      a,b                 ; bch = abs bch
  71+ AC58 E6 7F                                and     SignMask8Bit        ; .
  72+ AC5A 47                                   ld      b,a                 ; .
  73+ AC5B 7A                                   ld      a,d                 ; del = abs del
  74+ AC5C E6 7F                                and     SignMask8Bit        ; .
  75+ AC5E 57                                   ld      d,a                 ; .
  76+ AC5F 7C                                   ld      a,h                 ; l = h + l
  77+ AC60 85                                   add     l                   ; .
  78+ AC61 6F                                   ld      l,a                 ; .
  79+ AC62 79                                   ld      a,c                 ; e = e + c + carry
  80+ AC63 8B                                   adc     e                   ; .
  81+ AC64 5F                                   ld      e,a                 ; .
  82+ AC65 78                                   ld      a,b                 ; d = b + d + carry (signed)
  83+ AC66 8A                                   adc     d                   ;
  84+ AC67 FD B4                                or      iyh                 ; d = or back in sign bit
  85+ AC69 57                                   ld      d,a                 ;
  86+ AC6A C9                                   ret                         ; done
  87+ AC6B 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
  88+ AC6C FD 67                                ld      iyh,a               ; iyh = b sign
  89+ AC6E E6 7F                                and     SignMask8Bit        ; .
  90+ AC70 47                                   ld      b,a                 ; .
  91+ AC71 7A                                   ld      a,d                 ; del = abs del
  92+ AC72 FD 6F                                ld      iyl,a               ; iyl = d sign
  93+ AC74 E6 7F                                and     SignMask8Bit        ; .
  94+ AC76 57                                   ld      d,a                 ; .
  95+ AC77 E5                                   push    hl                  ; save hl
  96+ AC78 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
  97+ AC7A ED 52                                sbc     hl,de               ;
  98+ AC7C E1                                   pop     hl                  ;
  99+ AC7D 38 0E                                jr      c,.BCHltDEL
 100+ AC7F 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 101+ AC81 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 102+ AC82                                      JumpIfALTNusng l,.BCHltDEL
 102+ AC82 BD          >                        cp      l
 102+ AC83 DA 8D AC    >                        jp		c, .BCHltDEL
 103+ AC86 20 15                                jr      nz,.DELltBCH
 104+ AC88              ; The same so its just zero
 105+ AC88 AF           .BCHeqDEL:              xor     a                  ; its just zero
 106+ AC89 57                                   ld      d,a                ; .
 107+ AC8A 5F                                   ld      e,a                ; .
 108+ AC8B 6F                                   ld      l,a                ; .
 109+ AC8C C9                                   ret                        ; .
 110+ AC8D              ;BCH is less than DEL so its DEL - BCH the sort out sign
 111+ AC8D 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 112+ AC8E 94                                   sub     h                  ; .                              ;   01D70F DEL
 113+ AC8F 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 114+ AC90 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 115+ AC91 99                                   sbc     c                  ; .                              ;
 116+ AC92 5F                                   ld      e,a                ; .                              ;
 117+ AC93 7A                                   ld      a,d                ; d = d - b - carry              ;
 118+ AC94 98                                   sbc     b                  ; .                              ;
 119+ AC95 57                                   ld      d,a                ; .                              ;
 120+ AC96 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 121+ AC98 E6 80                                and     SignOnly8Bit       ;
 122+ AC9A B2                                   or      d                  ;
 123+ AC9B 57                                   ld      d,a                ;
 124+ AC9C C9                                   ret
 125+ AC9D 7C           .DELltBCH:              ld      a,h                ; l = h - l
 126+ AC9E 95                                   sub     l                  ;
 127+ AC9F 6F                                   ld      l,a                ;
 128+ ACA0 79                                   ld      a,c                ; e = c - e - carry
 129+ ACA1 9B                                   sbc     e                  ;
 130+ ACA2 5F                                   ld      e,a                ;
 131+ ACA3 78                                   ld      a,b                ; d = b - d - carry
 132+ ACA4 9A                                   sbc     d                  ;
 133+ ACA5 57                                   ld      d,a                ;
 134+ ACA6 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 135+ ACA8 E6 80                                and     SignOnly8Bit       ;
 136+ ACAA B2                                   or      d                  ;
 137+ ACAB 57                                   ld      d,a                ;
 138+ ACAC C9                                   ret
 139+ ACAD
 140+ ACAD
 141+ ACAD              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 142+ ACAD 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 143+ ACAE 4A                                   ld      c,d                     ; .
 144+ ACAF A9                                   xor     c                       ; A = A xor C
 145+ ACB0 CB BA                                res     7,d                     ; clear sign bit of D
 146+ ACB2 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 147+ ACB4 19                                   add     hl,de                   ; HL = HL + DE
 148+ ACB5 C9                                   ret                             ; return
 149+ ACB6 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 150+ ACB8 D0                                   ret     nc                      ; if no carry return
 151+ ACB9 19                                   add     hl,de                   ; else HL = HL + DE
 152+ ACBA EB                                   ex      de,hl                   ;      swap HL and DE
 153+ ACBB A7                                   and     a                       ;      reset carry
 154+ ACBC ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 155+ ACBE 41                                   ld      b,c                     ;      B = sign of C
 156+ ACBF C9                                   ret                             ;      ret
 157+ ACC0
 158+ ACC0
 159+ ACC0
 160+ ACC0              ; a = value to add
 161+ ACC0              ; b = offset (equivalent to regX)
 162+ ACC0              ; returns INWK [x] set to new value
 163+ ACC0              addINWKbasigned:
 164+ ACC0 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 165+ ACC3 4F           		ld      c,a                         ; preserve a
 166+ ACC4 78           		ld		a,b
 167+ ACC5 ED 31        		add		hl,a                        ; hl = INWK[x]
 168+ ACC7 79                   ld      a,c                         ; get back a value
 169+ ACC8 E6 80                and     $80                         ; get sign bit from a
 170+ ACCA 47                   ld      b,a                         ; now b = sign bit of a
 171+ ACCB 79                   ld      a,c                         ; a = original value
 172+ ACCC E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 173+ ACCE              ; hl = unsigned version of INWK0[b]
 174+ ACCE              ; a = value to add, also in c which will optimise later code
 175+ ACCE              ; b = sign bit of a ( in old code was varT)
 176+ ACCE              addhlcsigned:
 177+ ACCE 5E                   ld      e,(hl)                      ; de = INKK value
 178+ ACCF 23                   inc     hl
 179+ ACD0 56                   ld      d,(hl)
 180+ ACD1 23                   inc     hl                          ; now pointing a sign
 181+ ACD2 7E                   ld      a,(hl)                      ; a = sign bit
 182+ ACD3 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 183+ ACD4 A8                   xor     b                           ; a = resultant sign
 184+ ACD5 CB 7F                bit     7,a                         ; is it negative?
 185+ ACD7 28 2B                jr      z,.postivecalc
 186+ ACD9              .negativecalc:
 187+ ACD9 7C                   ld      a,h
 188+ ACDA E6 7F                and     SignMask8Bit
 189+ ACDC 67                   ld      h,a                         ; strip high bit
 190+ ACDD DD 68                ld      ixl,b                       ; save sign bit from b into d
 191+ ACDF 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 192+ ACE1 ED 42                sbc     hl,bc
 193+ ACE3 DD 45                ld      b,ixl                       ; get sign back
 194+ ACE5 EB                   ex      de,hl                       ; de = value hl = pointer to sign
 195+ ACE6 7E                   ld      a,(hl)                      ;
 196+ ACE7 E6 7F                and     SignMask8Bit
 197+ ACE9 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 198+ ACEB F6 80                or      $80                         ; set bit 0
 199+ ACED A8                   xor     b                           ; flip bit on sign (var T)
 200+ ACEE 77                   ld      (hl),a
 201+ ACEF 2B                   dec     hl
 202+ ACF0 72                   ld      (hl),d
 203+ ACF1 2B                   dec     hl
 204+ ACF2 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 205+ ACF3 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 206+ ACF4 D8                   ret     c                           ; if carry was set then we can exit now
 207+ ACF5              .nocarry:
 208+ ACF5                      NegHL                               ; get hl back to positive, a is still inkw+2
 208+ ACF5 AF          >                    xor a
 208+ ACF6 95          >                    sub l
 208+ ACF7 6F          >                    ld l,a
 208+ ACF8 9F          >                    sbc a,a
 208+ ACF9 94          >                    sub h
 208+ ACFA 67          >                    ld h,a
 209+ ACFB B0                   or      b                           ; b is still varT
 210+ ACFC EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 211+ ACFD 73                   ld      (hl),e
 212+ ACFE 23                   inc     hl
 213+ ACFF 72                   ld      (hl),d
 214+ AD00 23                   inc     hl
 215+ AD01 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 216+ AD02 EB                   ex      de,hl                       ; hl = value de = pointer to sign
 217+ AD03 C9                   ret
 218+ AD04              .postivecalc:
 219+ AD04 DD 68                ld      ixl,b
 220+ AD06 06 00                ld      b,0
 221+ AD08 19                   add     hl,de
 222+ AD09 EB                   ex      de,hl
 223+ AD0A DD B5                or      ixl                         ; we don;t need to recover b here
 224+ AD0C 77                   ld      (hl),a                      ; push sign into INWK[x]
 225+ AD0D 2B                   dec     hl
 226+ AD0E 72                   ld      (hl),d
 227+ AD0F 2B                   dec     hl
 228+ AD10 73                   ld      (hl),e
 229+ AD11 C9                   ret
 230+ AD12
 231+ AD12              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 232+ AD12              ;MVT1
 233+ AD12              ;    S = bits 6 to 0 of A
 234+ AD12              ;    A = sign bit => T
 235+ AD12              ;    xor sign bit with ink[x] Sign
 236+ AD12              ;    if negative thn its not an add
 237+ AD12              ;
 238+ AD12              ;        and h, 7F
 239+ AD12              ;        b = 0
 240+ AD12              ;        c = varS
 241+ AD12              ;        subtract INW[X]hilo, bc
 242+ AD12              ;        retain carry
 243+ AD12              ;        get INKW[x]Sign
 244+ AD12              ;        and 7F
 245+ AD12              ;        subtract carry (so will go negtive if negative)
 246+ AD12              ;        xor bit 7 of h with T to flip bit
 247+ AD12              ;        write to INKW[x]Sign
 248+ AD12              ;
 249+ AD12              ;    else
 250+ AD12              ;MV10.
 251+ AD12              ;        add INWK[x]hi,lo, varS
 252+ AD12              ;        or      sign bit
 253+ AD12
 254+ AD12
# file closed: ./Maths/asm_add.asm
1229  AD12                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ AD12              ; Note its big endian
   2+ AD12 2A FA A2     addDEtoCash:            ld      hl,(Cash)
   3+ AD15 19                                   add     hl,de
   4+ AD16 22 FA A2                             ld      (Cash),hl
   5+ AD19 11 00 00                             ld      de,0
   6+ AD1C 2A FC A2                             ld      hl,(Cash+2)
   7+ AD1F ED 5A                                adc     hl,de
   8+ AD21 22 FC A2                             ld      (Cash+2),hl
   9+ AD24 C9                                   ret
  10+ AD25
  11+ AD25 2A FA A2     subDEfromCash:          ld      hl,(Cash)
  12+ AD28 7C                                   ld      a,h
  13+ AD29 B5                                   or      l
  14+ AD2A 2A FC A2                             ld      hl,(Cash+2)
  15+ AD2D B4                                   or      h
  16+ AD2E B5                                   or      l
  17+ AD2F C8                                   ret     z               ; No cash return
  18+ AD30 B7                                   or      a
  19+ AD31 2A FA A2                             ld      hl,(Cash)
  20+ AD34 ED 52                                sbc     hl,de
  21+ AD36 22 FA A2                             ld      (Cash),hl
  22+ AD39 11 00 00                             ld      de,0
  23+ AD3C 2A FC A2                             ld      hl,(Cash+2)
  24+ AD3F ED 52                                sbc     hl,de
  25+ AD41 22 FC A2                             ld      (Cash+2),hl
  26+ AD44                                      JumpOnBitSet h,7,.ZeroCash
  26+ AD44 CB 7C       >                        bit 	7,h
  26+ AD46 C2 4A AD    >                        jp      nz,.ZeroCash
  27+ AD49 C9                                   ret
  28+ AD4A 21 00 00     .ZeroCash:              ld      hl,0
  29+ AD4D 22 FA A2                             ld      (Cash),hl
  30+ AD50 22 FC A2                             ld      (Cash+2),hl
  31+ AD53 C9                                   ret
  32+ AD54
# file closed: ./Maths/Utilities/AddDEToCash.asm
1230  AD54                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ AD54              ;INPUTS: ahl = dividend cde = divisor
   2+ AD54              ;OUTPUTS: cde = quotient ahl = remainder
   3+ AD54 47           Div24by24:              ld b,a
   4+ AD55 E5                                   push hl
   5+ AD56 DD E1                                pop ix
   6+ AD58 2E 18                                ld l,24
   7+ AD5A E5                                   push hl
   8+ AD5B AF                                   xor a
   9+ AD5C 67                                   ld h,a
  10+ AD5D 6F                                   ld l,a
  11+ AD5E DD 29        .Div24by24loop:         add ix,ix
  12+ AD60 CB 10                                rl b
  13+ AD62 ED 6A                                adc hl,hl
  14+ AD64 17                                   rla
  15+ AD65 B9                                   cp c
  16+ AD66 38 0C                                jr c,.Div24by24skip
  17+ AD68 20 05                                jr nz,.Div24by24setbit
  18+ AD6A ED 52                                sbc hl,de
  19+ AD6C 19                                   add hl,de
  20+ AD6D 38 05                                jr c,.Div24by24skip
  21+ AD6F ED 52        .Div24by24setbit:       sbc hl,de
  22+ AD71 99                                   sbc a,c
  23+ AD72 DD 23                                inc ix
  24+ AD74 E3           .Div24by24skip:         ex (sp),hl
  25+ AD75 2D                                   dec l
  26+ AD76 E3                                   ex (sp),hl
  27+ AD77 20 E5                                jr nz,.Div24by24loop
  28+ AD79 D1                                   pop de
  29+ AD7A 48                                   ld c,b
  30+ AD7B DD E5                                push ix
  31+ AD7D D1                                   pop de
  32+ AD7E C9                                   ret
  33+ AD7F
  34+ AD7F FD 67        Div24by24ASigned:       ld      iyh,a
  35+ AD81 E6 7F                                and     SignMask8Bit
  36+ AD83 CD 54 AD                             call    Div24by24
  37+ AD86 F5                                   push    af
  38+ AD87 FD 7C                                ld      a,iyh
  39+ AD89 E6 80                                and     SignOnly8Bit
  40+ AD8B B1                                   or      c
  41+ AD8C 4F                                   ld      c,a
  42+ AD8D F1                                   pop     af
  43+ AD8E C9                                   ret
  44+ AD8F
  45+ AD8F                                      ; CDE = AHL/CDE, AHL = remainder
  46+ AD8F FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ AD91 A9                                   xor     c               ; flip sign if negative
  48+ AD92 E6 80                                and     SignOnly8Bit    ; .
  49+ AD94 FD 6F                                ld      iyl,a           ; .
  50+ AD96 79                                   ld      a,c             ; make both values ABS
  51+ AD97 E6 7F                                and     SignMask8Bit    ; .
  52+ AD99 4F                                   ld      c,a             ; .
  53+ AD9A FD 7C                                ld      a,iyh           ; .
  54+ AD9C E6 7F                                and     SignMask8Bit    ; .
  55+ AD9E CD 54 AD                             call    Div24by24       ; do abs divide
  56+ ADA1 FD B5                                or      iyl             ; bring in sign bit
  57+ ADA3 FD 67                                ld      iyh,a           ; save a
  58+ ADA5 79                                   ld      a,c             ; sort sign for c
  59+ ADA6 FD B5                                or      iyl             ;
  60+ ADA8 4F                                   ld      c,a             ;
  61+ ADA9 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ ADAB C9                                   ret
  63+ ADAC
  64+ ADAC              ; --------------------------------------------------------------
  65+ ADAC              ;divdide by 16 using undocumented instrunctions
  66+ ADAC              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ ADAC              ;Output: BC = Quotient, HL = Remainder
  68+ ADAC 47           PROJ256mulAdivQ:        ld      b,a
  69+ ADAD 0E 00                                ld      c,0
  70+ ADAF 16 00                                ld      d,0
  71+ ADB1 3A BD 9D                             ld      a,(varQ)
  72+ ADB4 5F                                   ld      e,a
  73+ ADB5 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ ADB8 78                                   ld      a,b
  75+ ADB9 06 10                                ld      b,16
  76+ ADBB CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ ADBD 17                                   rla             ; ...
  78+ ADBE ED 6A                                adc     hl,hl       ; ...
  79+ ADC0 ED 52                                sbc     hl,de       ; ...
  80+ ADC2 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ ADC4 19                                   add     hl,de       ; ...
  82+ ADC5 0D                                   dec     c       ; ...
  83+ ADC6 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ ADC8 79                                   ld      a,c
  85+ ADC9 32 BE 9D                             ld      (varR),a
  86+ ADCC C9                                   ret
  87+ ADCD
  88+ ADCD
  89+ ADCD
  90+ ADCD
# file closed: ./Maths/DIVD3B2.asm
1231  ADCD                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ ADCD              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ ADCD 2A BE 9D                             ld  hl,(varRS)
   3+ ADD0 3A BD 9D                             ld  a,(varQ)
   4+ ADD3 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ ADD5 11 00 00                             ld  de,0        ; de = XY
   6+ ADD8 47                                   ld  b,a         ; b = Q
   7+ ADD9                                      ShiftHLRight1
   7+ ADD9 CB 3C       >			   srl h
   7+ ADDB CB 1D       >			   rr  l
   8+ ADDD CB 20                                sla b
   9+ ADDF 30 03                                jr  nc,.LL126
  10+ ADE1 EB           .LL125:                 ex de,hl
  11+ ADE2 19                                   add hl,de
  12+ ADE3 EB                                   ex  de,hl       ; de = de + rs
  13+ ADE4              .LL126:                 ShiftHLRight1
  13+ ADE4 CB 3C       >			   srl h
  13+ ADE6 CB 1D       >			   rr  l
  14+ ADE8 CB 20                                sla b
  15+ ADEA 38 F5                                jr      c,.LL125
  16+ ADEC 20 F6                                jr      nz,.LL126
  17+ ADEE EB                                   ex      de,hl   ; hl = result
  18+ ADEF D1 C1                                pop     bc,,de
  19+ ADF1 C9                                   ret
  20+ ADF2
  21+ ADF2
  22+ ADF2              MacroDEEquQmulASigned:  MACRO
  23+ ADF2 ~                                    ld      d,a                         ; save a into d
  24+ ADF2 ~                                    ld      a,(varQ)
  25+ ADF2 ~                                    ld      e,a
  26+ ADF2 ~                                    xor     d                           ; a = a xor var Q
  27+ ADF2 ~                                    and     SignOnly8Bit
  28+ ADF2 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ ADF2 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ ADF2 ~                                    and     SignMask8Bit
  31+ ADF2 ~                                    ld      d,a
  32+ ADF2 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ ADF2 ~                                    and     SignMask8Bit
  34+ ADF2 ~                                    ld      e,a
  35+ ADF2 ~                                    mul                                 ; de = a * Q
  36+ ADF2 ~                                    ld      a,d
  37+ ADF2 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ ADF2 ~                                    ld      d,a
  39+ ADF2                                      ENDM
  40+ ADF2
  41+ ADF2
  42+ ADF2
  43+ ADF2                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ ADF2              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ ADF2 57          >                        ld      d,a                         ; save a into d
  44+ ADF3 3A BD 9D    >                        ld      a,(varQ)
  44+ ADF6 5F          >                        ld      e,a
  44+ ADF7 AA          >                        xor     d                           ; a = a xor var Q
  44+ ADF8 E6 80       >                        and     SignOnly8Bit
  44+ ADFA 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ ADFB 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ ADFC E6 7F       >                        and     SignMask8Bit
  44+ ADFE 57          >                        ld      d,a
  44+ ADFF 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ AE00 E6 7F       >                        and     SignMask8Bit
  44+ AE02 5F          >                        ld      e,a
  44+ AE03 ED 30       >                        mul                                 ; de = a * Q
  44+ AE05 7A          >                        ld      a,d
  44+ AE06 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ AE07 57          >                        ld      d,a
  45+ AE08 2A BE 9D     madDEaddRS:             ld		hl,(varR)
  46+ AE0B CD 14 AE                             call	madXAAddHLDESigned
  47+ AE0E EB                                   ex      de,hl                       ; de = R.S + DE
  48+ AE0F                                      ClearCarryFlag
  48+ AE0F B7          >                        or a
  49+ AE10 DD 6B                                ld      ixl,e
  50+ AE12 7A                                   ld      a,d
  51+ AE13 C9                                   ret
  52+ AE14
  53+ AE14
  54+ AE14 7C           madXAAddHLDESigned:     ld      a,h
  55+ AE15 E6 80                                and     SignOnly8Bit
  56+ AE17 47                                   ld      b,a                         ;save sign bit in b
  57+ AE18 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ AE19                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ AE19 FA 31 AE    >                        jp		m, .ADDHLDEOppSGN
  59+ AE1C 78           .ADDHLDESameSigns:       ld      a,b
  60+ AE1D B2                                   or      d
  61+ AE1E                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ AE1E FA 23 AE    >                        jp		m, .ADDHLDESameNeg
  62+ AE21 19                                   add     hl,de
  63+ AE22 C9                                   ret
  64+ AE23 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ AE24 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ AE26 67                                   ld      h,a
  67+ AE27 7A                                   ld      a,d
  68+ AE28 E6 7F                                and     SignMask8Bit
  69+ AE2A 57                                   ld      d,a
  70+ AE2B 19                                   add     hl,de
  71+ AE2C 3E 80                                ld      a,SignOnly8Bit
  72+ AE2E B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ AE2F 67                                   ld      h,a
  74+ AE30 C9                                   ret
  75+ AE31 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ AE32 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ AE34 67                                   ld      h,a
  78+ AE35 7A                                   ld      a,d
  79+ AE36 E6 7F                                and     SignMask8Bit
  80+ AE38 57                                   ld      d,a
  81+ AE39 B7                                   or      a
  82+ AE3A ED 52                                sbc     hl,de
  83+ AE3C 38 04                                jr      c,.ADDHLDEOppInvert
  84+ AE3E 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ AE3F B4                                   or      h
  86+ AE40 67                                   ld      h,a                         ; set the previou sign value
  87+ AE41 C9                                   ret
  88+ AE42              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ AE42 AF          >                    xor a
  88+ AE43 95          >                    sub l
  88+ AE44 6F          >                    ld l,a
  88+ AE45 9F          >                    sbc a,a
  88+ AE46 94          >                    sub h
  88+ AE47 67          >                    ld h,a
  89+ AE48 78                                   ld      a,b
  90+ AE49 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ AE4B B4                                   or      h
  92+ AE4C 67                                   ld      h,a                         ; recover sign
  93+ AE4D C9                                   ret
  94+ AE4E
  95+ AE4E
  96+ AE4E                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ AE4E                  ;
  98+ AE4E                  ; enter : hl = 16-bit multiplier   = x
  99+ AE4E                  ;          e =  8-bit multiplicand = y
 100+ AE4E                  ;
 101+ AE4E                  ; exit  : ahl = 24-bit product
 102+ AE4E                  ;         carry reset
 103+ AE4E                  ;
 104+ AE4E                  ; uses  : af, de, hl
 105+ AE4E 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ AE4F 63                                   ld h,e                      ; yl
 107+ AE50 ED 30                                mul de                      ; xh*yl
 108+ AE52 EB                                   ex de,hl
 109+ AE53 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ AE55
 111+ AE55 7A                                   ld  a,d                     ; sum products
 112+ AE56 85                                   add a,l
 113+ AE57 57                                   ld  d,a
 114+ AE58 EB                                   ex de,hl
 115+ AE59
 116+ AE59 7A                                   ld  a,d
 117+ AE5A CE 00                                adc a,0
 118+ AE5C C9                                   ret
 119+ AE5D
 120+ AE5D
 121+ AE5D
 122+ AE5D                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ AE5D                 ;
 124+ AE5D                 ; enter : de = 16-bit multiplicand = y
 125+ AE5D                 ;         hl = 16-bit multiplicand = x
 126+ AE5D                 ;
 127+ AE5D                 ; exit  : dehl = 32-bit product
 128+ AE5D                 ;         carry reset
 129+ AE5D                 ;
 130+ AE5D                 ; uses  : af, bc, de, hl
 131+ AE5D
 132+ AE5D
 133+ AE5D
 134+ AE5D 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ AE5E 4B                                   ld c,e                      ; y0
 136+ AE5F 5D                                   ld e,l                      ; x0
 137+ AE60 6A                                   ld l,d
 138+ AE61 E5                                   push hl                     ; x1 y1
 139+ AE62 69                                   ld l,c                      ; y0
 140+ AE63              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ AE63 ED 30                                mul de                      ; y1*x0
 142+ AE65 EB                                   ex de,hl
 143+ AE66 ED 30                                mul de                      ; x1*y0
 144+ AE68
 145+ AE68 AF                                   xor a                       ; zero A
 146+ AE69 19                                   add hl,de                   ; sum cross products p2 p1
 147+ AE6A 8F                                   adc a,a                     ; capture carry p3
 148+ AE6B
 149+ AE6B 59                                   ld e,c                      ; x0
 150+ AE6C 50                                   ld d,b                      ; y0
 151+ AE6D ED 30                                mul de                      ; y0*x0
 152+ AE6F
 153+ AE6F 47                                   ld b,a                      ; carry from cross products
 154+ AE70 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ AE71
 156+ AE71 7A                                   ld a,d
 157+ AE72 85                                   add a,l
 158+ AE73 67                                   ld h,a
 159+ AE74 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ AE75
 161+ AE75 D1                                   pop de
 162+ AE76 ED 30                                mul de                      ; x1*y1
 163+ AE78
 164+ AE78 EB                                   ex de,hl
 165+ AE79 ED 4A                                adc hl,bc
 166+ AE7B EB                                   ex de,hl                    ; de = final MSW
 167+ AE7C
 168+ AE7C C9                                   ret
 169+ AE7D
 170+ AE7D              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ AE7D              ; enter : de = 16-bit multiplicand
 172+ AE7D              ;         hl = 16-bit multiplicand
 173+ AE7D              ; exit  : hl = 16-bit product
 174+ AE7D              ;         carry reset
 175+ AE7D              ; maths is
 176+ AE7D              ;        hl = y , de= x
 177+ AE7D              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ AE7D              ;        hl = yhih & xlo + x
 179+ AE7D              ;
 180+ AE7D              ;
 181+ AE7D              ; uses  : af, bc, de, hl
 182+ AE7D C5           mulDEbyHL:              push    bc
 183+ AE7E 7A                                   ld a,d                      ; a = xh
 184+ AE7F 54                                   ld d,h                      ; d = yh
 185+ AE80 67                                   ld h,a                      ; h = xh
 186+ AE81 4B                                   ld c,e                      ; c = xl
 187+ AE82 45                                   ld b,l                      ; b = yl
 188+ AE83 ED 30                                mul                         ; yh * yl
 189+ AE85 EB                                   ex de,hl
 190+ AE86 ED 30                                mul                         ; xh * yl
 191+ AE88 19                                   add hl,de                   ; add cross products
 192+ AE89 59                                   ld e,c
 193+ AE8A 50                                   ld d,b
 194+ AE8B ED 30                                mul                         ; yl * xl
 195+ AE8D 7D                                   ld a,l                      ; cross products lsb
 196+ AE8E 82                                   add a,d                     ; add to msb final
 197+ AE8F 67                                   ld h,a
 198+ AE90 6B                                   ld l,e                      ; hl = final
 199+ AE91                                      ; 83 cycles, 19 bytes
 200+ AE91 AF                                   xor a                       ; reset carry
 201+ AE92 C1                                   pop     bc
 202+ AE93 C9                                   ret
 203+ AE94
 204+ AE94
 205+ AE94              ; CHL = multiplicand D = multiplier
 206+ AE94              ; DCHL = CHL * D
 207+ AE94 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 208+ AE95 AC                                   xor     h                   ; xor with h to get resultant sign
 209+ AE96 E6 80                                and     SignOnly8Bit        ; .
 210+ AE98 FD 67                                ld      iyh,a               ; iyh = copy of sign
 211+ AE9A 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 212+ AE9B E6 7F                                and     SignMask8Bit        ; .
 213+ AE9D 4F                                   ld      c,a                 ; .
 214+ AE9E 7A                                   ld      a,d                 ; d = ABS D
 215+ AE9F E6 7F                                and     SignMask8Bit        ; .
 216+ AEA1              ; At this point CHL = ABS (HLE), A = ABS(D)
 217+ AEA1 57           .mul1:                  ld      d,a                 ; first do D * L
 218+ AEA2 5D                                   ld      e,l                 ; .
 219+ AEA3 ED 30                                mul     de                  ; DE = L * D
 220+ AEA5 08                                   ex      af,af'              ; save multiplier
 221+ AEA6 6B                                   ld      l,e                 ; L = p0
 222+ AEA7 7A                                   ld      a,d                 ; carry byte
 223+ AEA8 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 224+ AEA9 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 225+ AEAA 57                                   ld      d,a                 ; and multiplier
 226+ AEAB ED 30                                mul     de                  ; now its D & L
 227+ AEAD 08                                   ex      af,af'              ; get back carry byte with flags
 228+ AEAE 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 229+ AEAF 67                                   ld      h,a                 ; h = P1
 230+ AEB0 7A                                   ld      a,d                 ; a = carry byte
 231+ AEB1 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 232+ AEB2 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 233+ AEB3 57                                   ld      d,a                 ;
 234+ AEB4 ED 30                                mul     de                  ;
 235+ AEB6 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 236+ AEB7 8B                                   adc     a,e                 ;
 237+ AEB8 FD B4                                or      iyh                 ; recover saved resultant sign
 238+ AEBA 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 239+ AEBB C9                                   ret
 240+ AEBC
 241+ AEBC              ;  CHL = 53456 D = 1E
 242+ AEBC              ;  56 * 1E = A14 L = 14 carry = 0A
 243+ AEBC              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 244+ AEBC              ;  5  * 1E = 096 C = 96 + 6 = 9C
 245+ AEBC              ;  CHL = 9C2214
 246+ AEBC              ;mult3
 247+ AEBC              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 248+ AEBC              ; HLE = multiplicand D = multiplier
 249+ AEBC              ; tested by mathstestsun.asm all passed
 250+ AEBC              ; Algorithm
 251+ AEBC              ; AC =  E * D   (save carry)         H    L    E
 252+ AEBC              ; DE =  L * D                                  D
 253+ AEBC              ;  L =  A + E + carry                         E*D (lo)
 254+ AEBC              ; DE =  H * D                             L*D+ ^ (hi)
 255+ AEBC              ;  E =  A + E + carry                H*D (lo) + carry
 256+ AEBC              ;
 257+ AEBC              ;
 258+ AEBC 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 259+ AEBD AC                                   xor     h                   ; xor with h to get resultant sign
 260+ AEBE E6 80                                and     SignOnly8Bit        ; .
 261+ AEC0 FD 67                                ld      iyh,a               ; iyh = copy of sign
 262+ AEC2 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 263+ AEC3 E6 7F                                and     SignMask8Bit        ; .
 264+ AEC5 67                                   ld      h,a                 ; .
 265+ AEC6 7A                                   ld      a,d                 ; d = ABS D
 266+ AEC7 E6 7F                                and     SignMask8Bit        ; .
 267+ AEC9 57                                   ld      d,a                 ; .
 268+ AECA B7           .testEitherSideZero:    or      a
 269+ AECB 28 24                                jr      z,.ResultZero
 270+ AECD 7C                                   ld      a,h
 271+ AECE B5                                   or      l
 272+ AECF B3                                   or      e
 273+ AED0 28 1F                                jr      z,.ResultZero
 274+ AED2              ; At this point HLE = ABS (HLE), A = ABS(D)
 275+ AED2 42                                   ld      b,d                 ; save Quotient
 276+ AED3 ED 30        .mul1:                  mul     de                  ; C = E * D
 277+ AED5 4B                                   ld      c,e                 ; C = p0
 278+ AED6 FD 6A                                ld      iyl,d               ; save carry (p1)
 279+ AED8 5D           .mul2:                  ld      e,l                 ; L = L * D
 280+ AED9 50                                   ld      d,b                 ; .
 281+ AEDA ED 30                                mul     de                  ; .
 282+ AEDC FD 7D                                ld      a,iyl               ; get back p1
 283+ AEDE 83           .carrybyte1:            add     a,e                 ; L = L + E
 284+ AEDF 6F                                   ld      l,a                 ; .
 285+ AEE0 FD 6A                                ld      iyl,d               ; save new carry byte
 286+ AEE2 5C           .mul3:                  ld      e,h                 ; E = H * D
 287+ AEE3 50                                   ld      d,b                 ; .
 288+ AEE4 ED 30                                mul     de                  ; .
 289+ AEE6 FD 7D                                ld      a,iyl
 290+ AEE8 8B                                   adc     a,e                 ; .
 291+ AEE9 5F                                   ld      e,a                 ; .
 292+ AEEA 7A           .ItsNotZero:            ld      a,d                 ;
 293+ AEEB CE 00                                adc     a,0                 ; final carry bit
 294+ AEED FD B4                                or      iyh                 ; bring back sign
 295+ AEEF 57                                   ld      d,a                 ; s = sign
 296+ AEF0 C9                                   ret
 297+ AEF1 11 00 00     .ResultZero:            ld      de,0
 298+ AEF4                                      ZeroA
 298+ AEF4 AF          >                        xor a
 299+ AEF5 4F                                   ld      c,a
 300+ AEF6 6F                                   ld      l,a
 301+ AEF7 C9                                   ret
 302+ AEF8
 303+ AEF8              ;;;
 304+ AEF8              ;;;
 305+ AEF8              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 306+ AEF8              ;;;                        xor     h                   ; xor with h to get resultant sign
 307+ AEF8              ;;;                        and     SignOnly8Bit        ; .
 308+ AEF8              ;;;                        ld      iyh,a               ; iyh = copy of sign
 309+ AEF8              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 310+ AEF8              ;;;                        and     SignMask8Bit        ; .
 311+ AEF8              ;;;                        ld      h,a                 ; .
 312+ AEF8              ;;;                        ld      a,d                 ; d = ABS D
 313+ AEF8              ;;;                        and     SignMask8Bit        ; .
 314+ AEF8              ;;;                        ld      d,a                 ; .
 315+ AEF8              ;;;.testEitherSideZero:    or      a
 316+ AEF8              ;;;                        jr      z,.ResultZero
 317+ AEF8              ;;;                        ld      a,h
 318+ AEF8              ;;;                        or      l
 319+ AEF8              ;;;                        or      e
 320+ AEF8              ;;;                        jr      z,.ResultZero
 321+ AEF8              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 322+ AEF8              ;;;.mul1:                  mul     de                  ; C = E * D
 323+ AEF8              ;;;                        ex      af,af'              ; save mulitplier
 324+ AEF8              ;;;                        ld      c,e                 ; C = p0
 325+ AEF8              ;;;                        ld      a,d                 ; save carry (p1)
 326+ AEF8              ;;;                        ex      af,af'              ; .
 327+ AEF8              ;;;.mul2:                  ld      e,l                 ; L = L * D
 328+ AEF8              ;;;                        ld      d,a                 ; .
 329+ AEF8              ;;;                        mul     de                  ; .
 330+ AEF8              ;;;                        ex      af,af'              ; .
 331+ AEF8              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 332+ AEF8              ;;;                        ld      l,a                 ; .
 333+ AEF8              ;;;                        ld      a,d
 334+ AEF8              ;;;                        ex      af,af'              ; save new carry byte
 335+ AEF8              ;;;.mul3:                  ld      e,h                 ; E = H * D
 336+ AEF8              ;;;                        ld      d,a                 ; .
 337+ AEF8              ;;;                        mul     de                  ; .
 338+ AEF8              ;;;                        ex      af,af'              ; .
 339+ AEF8              ;;;                        adc     a,e                 ; .
 340+ AEF8              ;;;                        ld      e,a                 ; .
 341+ AEF8              ;;;.ItsNotZero:            ld      a,d                 ;
 342+ AEF8              ;;;                        adc     a,0                 ; final carry bit
 343+ AEF8              ;;;                        or      iyh                 ; bring back sign
 344+ AEF8              ;;;                        ld      d,a                 ; s = sign
 345+ AEF8              ;;;                        ret
 346+ AEF8              ;;;.ResultZero:            ld      de,0
 347+ AEF8              ;;;                        ZeroA
 348+ AEF8              ;;;                        ld      c,a
 349+ AEF8              ;;;                        ld      l,a
 350+ AEF8              ;;;                        ret
 351+ AEF8
 352+ AEF8              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 353+ AEF8              ; enter : de = 16-bit multiplicand
 354+ AEF8              ;         hl = 16-bit multiplicand
 355+ AEF8              ; exit  : hl = 16-bit product
 356+ AEF8              ;         carry reset
 357+ AEF8              ;
 358+ AEF8              ; uses  : af, bc, de, hl
 359+ AEF8 00           mulDEbyHLSignByte       DB      0
 360+ AEF9 AF           mulDEbyHLSgnTo2c:       xor     a
 361+ AEFA 32 F8 AE                             ld      (mulDEbyHLSignByte),a
 362+ AEFD 7A           .SignDE:                ld      a,d
 363+ AEFE ED 27 80                             test    $80
 364+ AF01 28 08                                jr      z,.SignHL
 365+ AF03 E6 7F        .NegativeDE:            and     $7F
 366+ AF05 57                                   ld      d,a
 367+ AF06 3E 80                                ld      a,$80
 368+ AF08 32 F8 AE                             ld      (mulDEbyHLSignByte),a
 369+ AF0B 7C           .SignHL:                ld      a,h
 370+ AF0C ED 27 80                             test    $80
 371+ AF0F 28 0B                                jr      z,.AbsoluteMultiply
 372+ AF11 E6 7F        .NegativeHL:            and     $7F
 373+ AF13 67                                   ld      h,a
 374+ AF14 3A F8 AE                             ld      a,(mulDEbyHLSignByte)
 375+ AF17 EE 80                                xor     $80
 376+ AF19 32 F8 AE                             ld      (mulDEbyHLSignByte),a
 377+ AF1C CD 7D AE     .AbsoluteMultiply:      call    mulDEbyHL
 378+ AF1F 3A F8 AE     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 379+ AF22 ED 27 80                             test    $80
 380+ AF25 C8                                   ret     z
 381+ AF26 AF           .Negateghl: 			xor 	a
 382+ AF27 95                                   sub 	l
 383+ AF28 6F                                   ld 		l,a
 384+ AF29 9F                                   sbc 	a,a
 385+ AF2A 94                                   sub 	h
 386+ AF2B 67                                   ld 		h,a
 387+ AF2C C9                                   ret
 388+ AF2D
 389+ AF2D AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 390+ AF2E 32 F8 AE                             ld      (mulDEbyHLSignByte),a
 391+ AF31 7A           .SignDE:                ld      a,d
 392+ AF32 ED 27 80                             test    $80
 393+ AF35 28 08                                jr      z,.AbsoluteMultiply
 394+ AF37 E6 7F        .NegativeDE:            and     $7F
 395+ AF39 57                                   ld      d,a
 396+ AF3A 3E 80                                ld      a,$80
 397+ AF3C 32 F8 AE                             ld      (mulDEbyHLSignByte),a
 398+ AF3F CD 7D AE     .AbsoluteMultiply:      call    mulDEbyHL
 399+ AF42 3A F8 AE     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 400+ AF45 ED 27 80                             test    $80
 401+ AF48 C8                                   ret     z
 402+ AF49 AF           .Negateghl:             xor 	a
 403+ AF4A 95                                   sub 	l
 404+ AF4B 6F                                   ld 		l,a
 405+ AF4C 9F                                   sbc 	a,a
 406+ AF4D 94                                   sub 	h
 407+ AF4E 67                                   ld 		h,a
 408+ AF4F C9                                   ret
 409+ AF50
 410+ AF50
# file closed: ./Maths/multiply.asm
1232  AF50                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ AF50              ; "ASM_SQUA : TESTGOOD"
   2+ AF50              ; "AP = A^2 A = low,P = hi"
   3+ AF50
   4+ AF50              inline_squde: MACRO
   5+ AF50 ~            			ld	e,a
   6+ AF50 ~            			ld  d,a
   7+ AF50 ~            			mul
   8+ AF50              			ENDM
   9+ AF50
  10+ AF50              inline_squa: MACRO
  11+ AF50 ~            			ld	e,a
  12+ AF50 ~            			ld  d,a
  13+ AF50 ~            			mul
  14+ AF50 ~            			ld	a,e
  15+ AF50              			ENDM
  16+ AF50
  17+ AF50
  18+ AF50              asm_squa:
  19+ AF50 E6 7F        	and SignMask8Bit
  20+ AF52              ; "ASM SQUA2 : TESTGOOD"
  21+ AF52              ; "AP = A^2 A = low,P = hi singed"
  22+ AF52              asm_squa2:
  23+ AF52 5F           	ld e, a
  24+ AF53 57           	ld d,a
  25+ AF54 ED 30        	mul
  26+ AF56 ED 53 BA 9C  	ld (varP),de
  27+ AF5A 7B           	ld a,e
  28+ AF5B C9           	ret
# file closed: ./Maths/asm_square.asm
1233  AF5C                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ AF5C              ; "ASM SQRT : TESTGOOD"
   2+ AF5C              ; "16-bit integer square root"
   3+ AF5C              ; "call with de = number to square root"
   4+ AF5C              ; "returns   hl = square root"
   5+ AF5C              ; "corrupts  bc, de"
   6+ AF5C              asm_sqrt:
   7+ AF5C 01 00 80     	ld bc,$8000
   8+ AF5F 61           	ld h,c
   9+ AF60 69           	ld l,c
  10+ AF61              .sqrloop:
  11+ AF61 CB 38        	srl b
  12+ AF63 CB 19        	rr c
  13+ AF65 09           	add hl,bc
  14+ AF66 EB           	ex de,hl
  15+ AF67 ED 52        	sbc hl,de
  16+ AF69 38 04        	jr c,.sqrbit
  17+ AF6B EB           	ex de,hl
  18+ AF6C 09           	add hl,bc
  19+ AF6D 18 05        	jr .sqrfi
  20+ AF6F              .sqrbit:
  21+ AF6F 19           	add hl,de
  22+ AF70 EB           	ex de,hl
  23+ AF71 B7           	or a
  24+ AF72 ED 42        	sbc hl,bc
  25+ AF74              .sqrfi:
  26+ AF74 CB 3C        	srl h
  27+ AF76 CB 1D        	rr l
  28+ AF78 CB 38        	srl b
  29+ AF7A CB 19        	rr c
  30+ AF7C 30 E3        	jr nc,.sqrloop
  31+ AF7E C9           	ret
  32+ AF7F
  33+ AF7F
  34+ AF7F              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ AF7F 3A BD 9D     	ld		a,(varQ)
  36+ AF82 5F           	ld		e,a
  37+ AF83 3A BE 9D     	ld		a,(varR)
  38+ AF86 57           	ld		d,a
  39+ AF87 CD 5C AF     	call	asm_sqrt
  40+ AF8A 7D               ld      a,l
  41+ AF8B 32 BD 9D     	ld		(varQ),a
  42+ AF8E C9           	ret
  43+ AF8F
# file closed: ./Maths/asm_sqrt.asm
1234  AF8F                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ AF8F              ;
   2+ AF8F              ;   Set flags E to 11111110
   3+ AF8F              ;   Loop:   A << 2
   4+ AF8F              ;           if carry was 0
   5+ AF8F              ;               if a >= D
   6+ AF8F              ;                   A = A - D
   7+ AF8F              ;                   clear carry (probably irrelevant really)
   8+ AF8F              ;           else
   9+ AF8F
  10+ AF8F              ;               sla flags << bringing in carry of 1
  11+ AF8F              ;               if bit 7 of flag was set then loop
  12+ AF8F              ;                                        elase a = e and exit
  13+ AF8F              ;
  14+ AF8F              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  15+ AF8F              ;
  16+ AF8F              ;INPUTS: hl = dividend dbc = divisor
  17+ AF8F              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  18+ AF8F 14           Div16by24usgn:          inc     d                           ; can we fast retu
  19+ AF90 15                                   dec     d
  20+ AF91 20 13                                jr      nz,.ResultZero
  21+ AF93 50 59                                ld      de,bc                       ; so prep for bc/de
  22+ AF95 44 4D                                ld      bc,hl
  23+ AF97 7A           .div16by16usng:         ld      a,d
  24+ AF98 B3                                   or      e
  25+ AF99 28 10                                jr      z,.DivideByZero
  26+ AF9B 14                                   inc     d
  27+ AF9C 15                                   dec     d
  28+ AF9D CD 11 B1                             call    BC_Div_DE
  29+ AFA0                                      ZeroA
  29+ AFA0 AF          >                        xor a
  30+ AFA1 EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
  31+ AFA2 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
  32+ AFA4 4F                                   ld      c,a                         ; now fix c
  33+ AFA5 C9                                   ret
  34+ AFA6 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
  35+ AFA7 4F                                   ld      c,a                         ; c = 0
  36+ AFA8 67                                   ld      h,a
  37+ AFA9 6F                                   ld      l,a
  38+ AFAA C9                                   ret
  39+ AFAB 3E FF        .DivideByZero:          ld      a,$FF
  40+ AFAD 67                                   ld      h,a
  41+ AFAE 6F                                   ld      l,a
  42+ AFAF                                      SetCarryFlag
  42+ AFAF 37          >                        scf
  43+ AFB0 C9                                   ret
  44+ AFB1
  45+ AFB1              AEquAmul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
  45+ AFB1 BA          >                        cp     d
  45+ AFB2 D2 D0 AF    >                        jp		nc,.Ll28Exit255
  46+ AFB5 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  47+ AFB7 CB 27        .DivideLoop:            sla     a
  48+ AFB9 38 0D                                jr      c,.LL29
  49+ AFBB                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  49+ AFBB BA          >                        cp      d
  49+ AFBC DA C1 AF    >                        jp		c, .SkipSub
  50+ AFBF 92                                   sub     d
  51+ AFC0                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  51+ AFC0 B7          >                        or a
  52+ AFC1              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  52+ AFC1 3F          >                        ccf
  53+ AFC2 CB 13                                rl      e
  54+ AFC4 38 F1                                jr      c,.DivideLoop
  55+ AFC6 7B                                   ld      a,e
  56+ AFC7 C9                                   ret
  57+ AFC8 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  58+ AFC9                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
  58+ AFC9 37          >                        scf
  59+ AFCA CB 13                                rl      e                           ; rotate counter e left
  60+ AFCC 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
  61+ AFCE 7B                                   ld      a,e                         ; stick result in a
  62+ AFCF C9                                   ret
  63+ AFD0 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  64+ AFD2 C9                                   ret
  65+ AFD3
  66+ AFD3
  67+ AFD3              ; Divide 8-bit values
  68+ AFD3              ; In: Divide E by divider C
  69+ AFD3              ; Out: A = result, B = rest
  70+ AFD3              ;
  71+ AFD3              ;;;Div8:
  72+ AFD3              ;;;    xor a
  73+ AFD3              ;;;    ld b,8
  74+ AFD3              ;;;Div8_Loop:
  75+ AFD3              ;;;    rl e
  76+ AFD3              ;;;    rla
  77+ AFD3              ;;;    sub c
  78+ AFD3              ;;;    jr nc,Div8_NoAdd
  79+ AFD3              ;;;    add a,c
  80+ AFD3              ;;;Div8_NoAdd:
  81+ AFD3              ;;;    djnz Div8_Loop
  82+ AFD3              ;;;    ld b,a0
  83+ AFD3              ;;;    ld a,e
  84+ AFD3              ;;;    rla
  85+ AFD3              ;;;    cpl
  86+ AFD3              ;;;    ret
  87+ AFD3
  88+ AFD3              ;;Inputs: DE is the numerator, BC is the divisor
  89+ AFD3              ;;Outputs: DE is the result
  90+ AFD3              ;;         A is a copy of E
  91+ AFD3              ;;         HL is the remainder
  92+ AFD3              ;;         BC is not changed
  93+ AFD3              ;; so DE = DE /BC
  94+ AFD3              ;140 bytes
  95+ AFD3              ;145cc
  96+ AFD3
  97+ AFD3              MacroDEDivBC:       MACRO
  98+ AFD3 ~                                rla
  99+ AFD3 ~                                adc     hl,hl
 100+ AFD3 ~                                sbc     hl,bc
 101+ AFD3 ~                                jr      nc,$+3
 102+ AFD3 ~                                add     hl,bc
 103+ AFD3                                  ENDM
 104+ AFD3
 105+ AFD3              DEequDEDivBC:
 106+ AFD3 AF               xor a
 107+ AFD4 ED 62            sbc hl,hl
 108+ AFD6 7A               ld a,d
 109+ AFD7                  MacroDEDivBC
 109+ AFD7 17          >                    rla
 109+ AFD8 ED 6A       >                    adc     hl,hl
 109+ AFDA ED 42       >                    sbc     hl,bc
 109+ AFDC 30 01       >                    jr      nc,$+3
 109+ AFDE 09          >                    add     hl,bc
 110+ AFDF                  MacroDEDivBC
 110+ AFDF 17          >                    rla
 110+ AFE0 ED 6A       >                    adc     hl,hl
 110+ AFE2 ED 42       >                    sbc     hl,bc
 110+ AFE4 30 01       >                    jr      nc,$+3
 110+ AFE6 09          >                    add     hl,bc
 111+ AFE7                  MacroDEDivBC
 111+ AFE7 17          >                    rla
 111+ AFE8 ED 6A       >                    adc     hl,hl
 111+ AFEA ED 42       >                    sbc     hl,bc
 111+ AFEC 30 01       >                    jr      nc,$+3
 111+ AFEE 09          >                    add     hl,bc
 112+ AFEF                  MacroDEDivBC
 112+ AFEF 17          >                    rla
 112+ AFF0 ED 6A       >                    adc     hl,hl
 112+ AFF2 ED 42       >                    sbc     hl,bc
 112+ AFF4 30 01       >                    jr      nc,$+3
 112+ AFF6 09          >                    add     hl,bc
 113+ AFF7                  MacroDEDivBC
 113+ AFF7 17          >                    rla
 113+ AFF8 ED 6A       >                    adc     hl,hl
 113+ AFFA ED 42       >                    sbc     hl,bc
 113+ AFFC 30 01       >                    jr      nc,$+3
 113+ AFFE 09          >                    add     hl,bc
 114+ AFFF                  MacroDEDivBC
 114+ AFFF 17          >                    rla
 114+ B000 ED 6A       >                    adc     hl,hl
 114+ B002 ED 42       >                    sbc     hl,bc
 114+ B004 30 01       >                    jr      nc,$+3
 114+ B006 09          >                    add     hl,bc
 115+ B007                  MacroDEDivBC
 115+ B007 17          >                    rla
 115+ B008 ED 6A       >                    adc     hl,hl
 115+ B00A ED 42       >                    sbc     hl,bc
 115+ B00C 30 01       >                    jr      nc,$+3
 115+ B00E 09          >                    add     hl,bc
 116+ B00F                  MacroDEDivBC
 116+ B00F 17          >                    rla
 116+ B010 ED 6A       >                    adc     hl,hl
 116+ B012 ED 42       >                    sbc     hl,bc
 116+ B014 30 01       >                    jr      nc,$+3
 116+ B016 09          >                    add     hl,bc
 117+ B017 17               rla
 118+ B018 2F               cpl
 119+ B019 57               ld d,a
 120+ B01A
 121+ B01A 7B               ld a,e
 122+ B01B                  MacroDEDivBC
 122+ B01B 17          >                    rla
 122+ B01C ED 6A       >                    adc     hl,hl
 122+ B01E ED 42       >                    sbc     hl,bc
 122+ B020 30 01       >                    jr      nc,$+3
 122+ B022 09          >                    add     hl,bc
 123+ B023                  MacroDEDivBC
 123+ B023 17          >                    rla
 123+ B024 ED 6A       >                    adc     hl,hl
 123+ B026 ED 42       >                    sbc     hl,bc
 123+ B028 30 01       >                    jr      nc,$+3
 123+ B02A 09          >                    add     hl,bc
 124+ B02B                  MacroDEDivBC
 124+ B02B 17          >                    rla
 124+ B02C ED 6A       >                    adc     hl,hl
 124+ B02E ED 42       >                    sbc     hl,bc
 124+ B030 30 01       >                    jr      nc,$+3
 124+ B032 09          >                    add     hl,bc
 125+ B033                  MacroDEDivBC
 125+ B033 17          >                    rla
 125+ B034 ED 6A       >                    adc     hl,hl
 125+ B036 ED 42       >                    sbc     hl,bc
 125+ B038 30 01       >                    jr      nc,$+3
 125+ B03A 09          >                    add     hl,bc
 126+ B03B                  MacroDEDivBC
 126+ B03B 17          >                    rla
 126+ B03C ED 6A       >                    adc     hl,hl
 126+ B03E ED 42       >                    sbc     hl,bc
 126+ B040 30 01       >                    jr      nc,$+3
 126+ B042 09          >                    add     hl,bc
 127+ B043                  MacroDEDivBC
 127+ B043 17          >                    rla
 127+ B044 ED 6A       >                    adc     hl,hl
 127+ B046 ED 42       >                    sbc     hl,bc
 127+ B048 30 01       >                    jr      nc,$+3
 127+ B04A 09          >                    add     hl,bc
 128+ B04B                  MacroDEDivBC
 128+ B04B 17          >                    rla
 128+ B04C ED 6A       >                    adc     hl,hl
 128+ B04E ED 42       >                    sbc     hl,bc
 128+ B050 30 01       >                    jr      nc,$+3
 128+ B052 09          >                    add     hl,bc
 129+ B053                  MacroDEDivBC
 129+ B053 17          >                    rla
 129+ B054 ED 6A       >                    adc     hl,hl
 129+ B056 ED 42       >                    sbc     hl,bc
 129+ B058 30 01       >                    jr      nc,$+3
 129+ B05A 09          >                    add     hl,bc
 130+ B05B 17               rla
 131+ B05C 2F               cpl
 132+ B05D 5F               ld e,a
 133+ B05E C9               ret
 134+ B05F
 135+ B05F
 136+ B05F
 137+ B05F              ;divdide by 16 using undocumented instrunctions
 138+ B05F              ;Input: BC = Dividend, DE = Divisor, HL = 0
 139+ B05F              ;Output: BC = Quotient, HL = Remainder
 140+ B05F              ; Our use
 141+ B05F              ; BC = A0
 142+ B05F              ; DE = 0C
 143+ B05F              ; so BC = a * 256 / C
 144+ B05F              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 144+ B05F B9          >                        cp     c
 144+ B060 D2 8B B0    >                        jp		nc,DEV16ATooLarge
 145+ B063 47                                   ld      b,a
 146+ B064 59                                   ld      e,c
 147+ B065 0E 00                                ld      c,0
 148+ B067 16 00                                ld      d,0
 149+ B069 C3 76 B0                             jp      DIV16UNDOC
 150+ B06C 47           DIV16Amul256dQUNDOC:    ld      b,a
 151+ B06D 0E 00                                ld      c,0
 152+ B06F 21 BD 9D                             ld      hl,varQ
 153+ B072 7E                                   ld      a,(hl)
 154+ B073 16 00                                ld      d,0
 155+ B075 5F                                   ld      e,a
 156+ B076              DIV16BCDivDEUNDOC:
 157+ B076 21 00 00     DIV16UNDOC:             ld      hl,0
 158+ B079 78                                   ld      a,b
 159+ B07A 06 10                                ld      b,16
 160+ B07C CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 161+ B07E 17                                   rla			; ...
 162+ B07F ED 6A                                adc	hl,hl		; ...
 163+ B081 ED 52                                sbc	hl,de		; ...
 164+ B083 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 165+ B085 19                                   add	hl,de		; ...
 166+ B086 0D                                   dec	c		; ...
 167+ B087 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 168+ B089 47                                   ld   b,a
 169+ B08A C9                                   ret
 170+ B08B 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 171+ B08E C9                                   ret
 172+ B08F
 173+ B08F              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 174+ B08F 06 08        asm_div8:               ld b,8
 175+ B091 AF                                   xor a
 176+ B092 CB 21        .div8_loop:	            sla c
 177+ B094 17                                   rla
 178+ B095 BA                                   cp d
 179+ B096 38 02                                jr c,.div8_skip
 179+ B098
 180+ B098 0C                                   inc c
 181+ B099 92                                   sub d
 182+ B09A 10 F6        .div8_skip:	            djnz .div8_loop
 183+ B09C C9                                   ret
 184+ B09D              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 185+ B09D 06 10        asm_div16:              ld b,16
 186+ B09F AF                                   xor a
 187+ B0A0 CB 25        div16_loop:	            sla l
 188+ B0A2 CB 14                                rl	h
 189+ B0A4              ;    add hl,hl
 190+ B0A4 17                                   rla
 191+ B0A5 B9                                   cp c
 192+ B0A6 38 02                                jr c,div16_skip
 193+ B0A8 2C                                   inc l
 194+ B0A9 91                                   sub c
 195+ B0AA 10 F4        div16_skip:		        djnz div16_loop
 196+ B0AC C9                                   ret
 197+ B0AD              ;
 198+ B0AD              ; Divide 16-bit values (with 16-bit result)
 199+ B0AD              ; In: Divide BC by divider DE
 200+ B0AD              ; Out: BC = result, HL = rest
 201+ B0AD              ;
 202+ B0AD              HLDivC_Iteration: 	MACRO
 203+ B0AD ~            					add	hl,hl		; unroll 16 times
 204+ B0AD ~            					rla				; ...
 205+ B0AD ~            					cp	c			; ...
 206+ B0AD ~            					jr	1F
 207+ B0AD ~            					sub	c			; ...
 208+ B0AD ~            1:
 209+ B0AD ~            					inc	l			; ...
 210+ B0AD              					ENDM
 211+ B0AD
 212+ B0AD
 213+ B0AD
 214+ B0AD              ; ">div1616: BC = BC / DE. HL = remainder"
 215+ B0AD 21 00 00     Div1616:            ld hl,0
 216+ B0B0 78                               ld a,b
 217+ B0B1 06 08                            ld b,8
 218+ B0B3 17           .Div16_Loop1:       rla
 219+ B0B4 ED 6A                            adc hl,hl
 220+ B0B6 ED 52                            sbc hl,de
 221+ B0B8 30 01                            jr nc,.Div16_NoAdd1
 222+ B0BA 19                               add hl,de
 223+ B0BB 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 224+ B0BD 17                               rla
 225+ B0BE 2F                               cpl
 226+ B0BF 47                               ld b,a
 227+ B0C0 79                               ld a,c
 228+ B0C1 48                               ld c,b
 229+ B0C2 06 08                            ld b,8
 230+ B0C4 17           .Div16_Loop2:       rla
 231+ B0C5 ED 6A                            adc hl,hl
 232+ B0C7 ED 52                            sbc hl,de
 233+ B0C9 30 01                            jr nc,.Div16_NoAdd2
 234+ B0CB 19                               add hl,de
 235+ B0CC 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 236+ B0CE 17                               rla
 237+ B0CF 2F                               cpl
 238+ B0D0 41                               ld b,c
 239+ B0D1 4F                               ld c,a
 240+ B0D2 C9                               ret
 241+ B0D3
 242+ B0D3
 243+ B0D3              EDivC_Iteration:        MACRO
 244+ B0D3 ~                                    rl  e
 245+ B0D3 ~                                    rla
 246+ B0D3 ~                                    sub c
 247+ B0D3 ~                                    jr  nc,.Div8_NoAdd
 248+ B0D3 ~                                    add a,c
 249+ B0D3 ~            .Div8_NoAdd:
 250+ B0D3                                      ENDM
 251+ B0D3
 252+ B0D3              ; Divide E by divider C Out: A = result, B = rest
 253+ B0D3              E_Div_C:                ZeroA
 253+ B0D3 AF          >                        xor a
 254+ B0D4                                      EDivC_Iteration
 254+ B0D4 CB 13       >                        rl  e
 254+ B0D6 17          >                        rla
 254+ B0D7 91          >                        sub c
 254+ B0D8 30 01       >                        jr  nc,.Div8_NoAdd
 254+ B0DA 81          >                        add a,c
 254+ B0DB             >.Div8_NoAdd:
 255+ B0DB                                      EDivC_Iteration
 255+ B0DB CB 13       >                        rl  e
 255+ B0DD 17          >                        rla
 255+ B0DE 91          >                        sub c
 255+ B0DF 30 01       >                        jr  nc,.Div8_NoAdd
 255+ B0E1 81          >                        add a,c
 255+ B0E2             >.Div8_NoAdd:
 256+ B0E2                                      EDivC_Iteration
 256+ B0E2 CB 13       >                        rl  e
 256+ B0E4 17          >                        rla
 256+ B0E5 91          >                        sub c
 256+ B0E6 30 01       >                        jr  nc,.Div8_NoAdd
 256+ B0E8 81          >                        add a,c
 256+ B0E9             >.Div8_NoAdd:
 257+ B0E9                                      EDivC_Iteration
 257+ B0E9 CB 13       >                        rl  e
 257+ B0EB 17          >                        rla
 257+ B0EC 91          >                        sub c
 257+ B0ED 30 01       >                        jr  nc,.Div8_NoAdd
 257+ B0EF 81          >                        add a,c
 257+ B0F0             >.Div8_NoAdd:
 258+ B0F0                                      EDivC_Iteration
 258+ B0F0 CB 13       >                        rl  e
 258+ B0F2 17          >                        rla
 258+ B0F3 91          >                        sub c
 258+ B0F4 30 01       >                        jr  nc,.Div8_NoAdd
 258+ B0F6 81          >                        add a,c
 258+ B0F7             >.Div8_NoAdd:
 259+ B0F7                                      EDivC_Iteration
 259+ B0F7 CB 13       >                        rl  e
 259+ B0F9 17          >                        rla
 259+ B0FA 91          >                        sub c
 259+ B0FB 30 01       >                        jr  nc,.Div8_NoAdd
 259+ B0FD 81          >                        add a,c
 259+ B0FE             >.Div8_NoAdd:
 260+ B0FE                                      EDivC_Iteration
 260+ B0FE CB 13       >                        rl  e
 260+ B100 17          >                        rla
 260+ B101 91          >                        sub c
 260+ B102 30 01       >                        jr  nc,.Div8_NoAdd
 260+ B104 81          >                        add a,c
 260+ B105             >.Div8_NoAdd:
 261+ B105                                      EDivC_Iteration
 261+ B105 CB 13       >                        rl  e
 261+ B107 17          >                        rla
 261+ B108 91          >                        sub c
 261+ B109 30 01       >                        jr  nc,.Div8_NoAdd
 261+ B10B 81          >                        add a,c
 261+ B10C             >.Div8_NoAdd:
 262+ B10C 47                                   ld      b,a
 263+ B10D 7B                                   ld      a,e
 264+ B10E 17                                   rla
 265+ B10F 2F                                   cpl
 266+ B110 C9                                   ret
 267+ B111
 268+ B111
 269+ B111              BCDIVDE_Iteration:      MACRO
 270+ B111 ~                                    rla
 271+ B111 ~                                    adc	    hl,hl
 272+ B111 ~                                    add	    hl,de
 273+ B111 ~                                    jr	    c,1F
 274+ B111 ~                                    sbc	    hl,de
 275+ B111 ~            1:
 276+ B111                                      ENDM
 277+ B111
 278+ B111
 279+ B111              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 280+ B111              ;BC/DE ==> BC, remainder in HL
 281+ B111              ;NOTE: BC/0 returns 0 as the quotient.
 282+ B111              ;min: 738cc
 283+ B111              ;max: 898cc
 284+ B111              ;avg: 818cc
 285+ B111              ;144 bytes
 286+ B111 AF           BC_Div_DE:              xor a
 287+ B112 67                                   ld h,a
 288+ B113 6F                                   ld l,a
 289+ B114 93                                   sub e
 290+ B115 5F                                   ld e,a
 291+ B116 9F                                   sbc a,a
 292+ B117 92                                   sub d
 293+ B118 57                                   ld d,a
 294+ B119 78                                   ld a,b
 295+ B11A                                      BCDIVDE_Iteration
 295+ B11A 17          >                        rla
 295+ B11B ED 6A       >                        adc	    hl,hl
 295+ B11D 19          >                        add	    hl,de
 295+ B11E 38 02       >                        jr	    c,1F
 295+ B120 ED 52       >                        sbc	    hl,de
 295+ B122             >1:
 296+ B122                                      BCDIVDE_Iteration
 296+ B122 17          >                        rla
 296+ B123 ED 6A       >                        adc	    hl,hl
 296+ B125 19          >                        add	    hl,de
 296+ B126 38 02       >                        jr	    c,1F
 296+ B128 ED 52       >                        sbc	    hl,de
 296+ B12A             >1:
 297+ B12A                                      BCDIVDE_Iteration
 297+ B12A 17          >                        rla
 297+ B12B ED 6A       >                        adc	    hl,hl
 297+ B12D 19          >                        add	    hl,de
 297+ B12E 38 02       >                        jr	    c,1F
 297+ B130 ED 52       >                        sbc	    hl,de
 297+ B132             >1:
 298+ B132                                      BCDIVDE_Iteration
 298+ B132 17          >                        rla
 298+ B133 ED 6A       >                        adc	    hl,hl
 298+ B135 19          >                        add	    hl,de
 298+ B136 38 02       >                        jr	    c,1F
 298+ B138 ED 52       >                        sbc	    hl,de
 298+ B13A             >1:
 299+ B13A                                      BCDIVDE_Iteration
 299+ B13A 17          >                        rla
 299+ B13B ED 6A       >                        adc	    hl,hl
 299+ B13D 19          >                        add	    hl,de
 299+ B13E 38 02       >                        jr	    c,1F
 299+ B140 ED 52       >                        sbc	    hl,de
 299+ B142             >1:
 300+ B142                                      BCDIVDE_Iteration
 300+ B142 17          >                        rla
 300+ B143 ED 6A       >                        adc	    hl,hl
 300+ B145 19          >                        add	    hl,de
 300+ B146 38 02       >                        jr	    c,1F
 300+ B148 ED 52       >                        sbc	    hl,de
 300+ B14A             >1:
 301+ B14A                                      BCDIVDE_Iteration
 301+ B14A 17          >                        rla
 301+ B14B ED 6A       >                        adc	    hl,hl
 301+ B14D 19          >                        add	    hl,de
 301+ B14E 38 02       >                        jr	    c,1F
 301+ B150 ED 52       >                        sbc	    hl,de
 301+ B152             >1:
 302+ B152                                      BCDIVDE_Iteration
 302+ B152 17          >                        rla
 302+ B153 ED 6A       >                        adc	    hl,hl
 302+ B155 19          >                        add	    hl,de
 302+ B156 38 02       >                        jr	    c,1F
 302+ B158 ED 52       >                        sbc	    hl,de
 302+ B15A             >1:
 303+ B15A 17                                   rla
 304+ B15B 47                                   ld b,a
 305+ B15C
 306+ B15C 79                                   ld a,c
 307+ B15D                                      BCDIVDE_Iteration
 307+ B15D 17          >                        rla
 307+ B15E ED 6A       >                        adc	    hl,hl
 307+ B160 19          >                        add	    hl,de
 307+ B161 38 02       >                        jr	    c,1F
 307+ B163 ED 52       >                        sbc	    hl,de
 307+ B165             >1:
 308+ B165                                      BCDIVDE_Iteration
 308+ B165 17          >                        rla
 308+ B166 ED 6A       >                        adc	    hl,hl
 308+ B168 19          >                        add	    hl,de
 308+ B169 38 02       >                        jr	    c,1F
 308+ B16B ED 52       >                        sbc	    hl,de
 308+ B16D             >1:
 309+ B16D                                      BCDIVDE_Iteration
 309+ B16D 17          >                        rla
 309+ B16E ED 6A       >                        adc	    hl,hl
 309+ B170 19          >                        add	    hl,de
 309+ B171 38 02       >                        jr	    c,1F
 309+ B173 ED 52       >                        sbc	    hl,de
 309+ B175             >1:
 310+ B175                                      BCDIVDE_Iteration
 310+ B175 17          >                        rla
 310+ B176 ED 6A       >                        adc	    hl,hl
 310+ B178 19          >                        add	    hl,de
 310+ B179 38 02       >                        jr	    c,1F
 310+ B17B ED 52       >                        sbc	    hl,de
 310+ B17D             >1:
 311+ B17D                                      BCDIVDE_Iteration
 311+ B17D 17          >                        rla
 311+ B17E ED 6A       >                        adc	    hl,hl
 311+ B180 19          >                        add	    hl,de
 311+ B181 38 02       >                        jr	    c,1F
 311+ B183 ED 52       >                        sbc	    hl,de
 311+ B185             >1:
 312+ B185                                      BCDIVDE_Iteration
 312+ B185 17          >                        rla
 312+ B186 ED 6A       >                        adc	    hl,hl
 312+ B188 19          >                        add	    hl,de
 312+ B189 38 02       >                        jr	    c,1F
 312+ B18B ED 52       >                        sbc	    hl,de
 312+ B18D             >1:
 313+ B18D                                      BCDIVDE_Iteration
 313+ B18D 17          >                        rla
 313+ B18E ED 6A       >                        adc	    hl,hl
 313+ B190 19          >                        add	    hl,de
 313+ B191 38 02       >                        jr	    c,1F
 313+ B193 ED 52       >                        sbc	    hl,de
 313+ B195             >1:
 314+ B195                                      BCDIVDE_Iteration
 314+ B195 17          >                        rla
 314+ B196 ED 6A       >                        adc	    hl,hl
 314+ B198 19          >                        add	    hl,de
 314+ B199 38 02       >                        jr	    c,1F
 314+ B19B ED 52       >                        sbc	    hl,de
 314+ B19D             >1:
 315+ B19D 17                                   rla
 316+ B19E 4F                                   ld c,a
 317+ B19F C9                                   ret
 318+ B1A0
 319+ B1A0              ;Inputs:
 320+ B1A0              ;     DE,BC are 8.8 Fixed Point numbers
 321+ B1A0              ;Outputs:
 322+ B1A0              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 323+ B1A0              ;if DE is 0 : 122cc or 136cc if BC is negative
 324+ B1A0              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 325+ B1A0              ;Otherwise:
 326+ B1A0              ;min: 1107cc
 327+ B1A0              ;max: 1319cc
 328+ B1A0              ;avg: 1201cc
 329+ B1A0 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 330+ B1A1 AA                                   xor d
 331+ B1A2 F5                                   push af   ;sign bit is the result sign bit
 332+ B1A3              ; Now make sure the inputs are positive
 333+ B1A3 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 334+ B1A4 F2 AD B1                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 335+ B1A7 AF                                   xor a
 336+ B1A8 91                                   sub c
 337+ B1A9 4F                                   ld c,a
 338+ B1AA 9F                                   sbc a,a
 339+ B1AB 90                                   sub b
 340+ B1AC 47                                   ld b,a
 341+ B1AD 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 342+ B1AE B2                                   or d
 343+ B1AF FA B8 B1                             jp m,BC_Div_DE_88_lbl2
 344+ B1B2 AF                                   xor a
 345+ B1B3 93                                   sub e
 346+ B1B4 5F                                   ld e,a
 347+ B1B5 9F                                   sbc a,a
 348+ B1B6 92                                   sub d
 349+ B1B7 57                                   ld d,a
 350+ B1B8 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 351+ B1B9 28 1D                                jr z,div_fixed88_overflow
 352+ B1BB 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 353+ B1BD 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 354+ B1BE 83                                   add a,e
 355+ B1BF 7A                                   ld a,d
 356+ B1C0 8C                                   adc a,h
 357+ B1C1 38 15                                jr c,div_fixed88_overflow
 358+ B1C3 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 359+ B1C4 79                                   ld a,c
 360+ B1C5 CD E0 B1                             call div_fixed88_sub
 361+ B1C8 4F                                   ld c,a
 362+ B1C9 78                                   ld a,b      ;A is now 0
 363+ B1CA CD E0 B1                             call div_fixed88_sub
 364+ B1CD 51                                   ld d,c
 365+ B1CE 5F                                   ld e,a
 366+ B1CF F1                                   pop af
 367+ B1D0 F0                                   ret p
 368+ B1D1 AF                                   xor a
 369+ B1D2 93                                   sub e
 370+ B1D3 5F                                   ld e,a
 371+ B1D4 9F                                   sbc a,a
 372+ B1D5 92                                   sub d
 373+ B1D6 57                                   ld d,a
 374+ B1D7 C9                                   ret
 375+ B1D8
 376+ B1D8 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 377+ B1DB F1                                   pop af
 378+ B1DC F0                                   ret p
 379+ B1DD 13                                   inc de
 380+ B1DE 1C                                   inc e
 381+ B1DF C9                                   ret
 382+ B1E0
 383+ B1E0              ;min: 456cc
 384+ B1E0              ;max: 536cc
 385+ B1E0              ;avg: 496cc
 386+ B1E0 06 08        div_fixed88_sub:        ld b,8
 387+ B1E2 17           BC_Div_DE_88_lbl3:      rla
 388+ B1E3 ED 6A                                adc hl,hl
 389+ B1E5 19                                   add hl,de
 390+ B1E6 38 02                                jr c,$+4
 391+ B1E8 ED 52                                sbc hl,de
 392+ B1EA 10 F6                                djnz BC_Div_DE_88_lbl3
 393+ B1EC 8F                                   adc a,a
 394+ B1ED C9                                   ret
 395+ B1EE
# file closed: ./Maths/asm_divide.asm
1235  B1EE                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ B1EE              asm_tis2:
   2+ B1EE              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ B1EE              ; ">DOES NOT DO SIGNED YET"
   4+ B1EE F5           	push af
   5+ B1EF E6 7F            and SignMask8Bit
   6+ B1F1 57           	ld d,a				;; d = A
   7+ B1F2 3A BD 9D     	ld a,(varQ)
   8+ B1F5 5F           	ld e,a
   9+ B1F6 7A           	ld a,d
  10+ B1F7 BB           	cp e
  11+ B1F8 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ B1FA 1E 60        	ld e, 96
  13+ B1FC ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ B1FE EB           	ex de,hl
  15+ B1FF 3A BD 9D     	ld a,(varQ)
  16+ B202 4F           	ld c,a
  17+ B203 CD 9D B0     	call asm_div16
  18+ B206 F1           	pop af
  19+ B207 E6 80        	and $80
  20+ B209 B5           	or l
  21+ B20A C9           	ret
  22+ B20B              .tis2_set96:
  23+ B20B F1           	pop af
  24+ B20C E6 80        	and $80
  25+ B20E F6 96        	or $96
  26+ B210 C9           	ret
  27+ B211
  28+ B211
  29+ B211              asm_unit_vector:
  30+ B211              squareregfx:
  31+ B211 3A 83 C0     	ld a,(UBnkXScaled)
  32+ B214 57           	ld d,a
  33+ B215 5F           	ld e,a
  34+ B216 ED 30        	mul
  35+ B218 EB           	ex de,hl
  36+ B219              squareregfy:
  37+ B219 3A 85 C0     	ld a, (UBnkYScaled)
  38+ B21C 57           	ld d,a
  39+ B21D 5F           	ld e,a
  40+ B21E ED 30        	mul
  41+ B220 19           	add hl,de
  42+ B221              squareregfz:
  43+ B221 3A 87 C0     	ld a, (UBnkZScaled)
  44+ B224 57           	ld d,a
  45+ B225 5F           	ld e,a
  46+ B226 ED 30        	mul
  47+ B228 19           	add hl,de
  48+ B229 EB           	ex de,hl			; de de to number to root
  49+ B22A              hlequsquareroot:
  50+ B22A CD 5C AF     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ B22D E5           	push hl				; save it for work 3 copies
  52+ B22E E5           	push hl				; save it for work
  53+ B22F E5           	push hl				; save it for work
  54+ B230              normfx:
  55+ B230 3A 83 C0     	ld a,(UBnkXScaled)
  56+ B233 E1           	pop hl				; get copy #1
  57+ B234 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ B235 4F           	ld c,a
  59+ B236 CD EE B1     	call asm_tis2
  60+ B239 32 83 C0     	ld (UBnkXScaled),a
  61+ B23C              normfy:
  62+ B23C 3A 85 C0     	ld a,(UBnkYScaled)
  63+ B23F E1           	pop hl				; get copy #2
  64+ B240 7D           	ld a,l
  65+ B241 4F           	ld c,a
  66+ B242 CD EE B1     	call asm_tis2
  67+ B245 32 85 C0     	ld (UBnkYScaled),a
  68+ B248              normfz:
  69+ B248 3A 87 C0     	ld a,(UBnkZScaled)
  70+ B24B E1           	pop hl				; get copy #2
  71+ B24C 7D           	ld a,l
  72+ B24D 4F           	ld c,a
  73+ B24E CD EE B1     	call asm_tis2
  74+ B251 32 87 C0     	ld (UBnkZScaled),a
  75+ B254              asm_unit_vector_end:
  76+ B254 C9           	ret
  77+ B255
# file closed: ./Maths/asm_unitvector.asm
1236  B255                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ B255              ; Input:
   2+ B255              ;       HL = 1st value
   3+ B255              ;       DE = 2nd value
   4+ B255              ; Output:
   5+ B255              ;       CF, ZF = results of comparison:
   6+ B255              ;
   7+ B255              ;               CF      ZF      Result
   8+ B255              ;               -----------------------------------
   9+ B255              ;               0       0       HL > DE
  10+ B255              ;               0       1       HL == DE
  11+ B255              ;               1       0       HL < DE
  12+ B255              ;               1       1       Impossible
  13+ B255              ;
  14+ B255
  15+ B255 E5           compare16HLDE:      push    hl
  16+ B256 A7                               and     a
  17+ B257 ED 52                            sbc     hl,de
  18+ B259 E1                               pop     hl
  19+ B25A C9                               ret
  20+ B25B
  21+ B25B              ; With compare signed we do ABS comparison
  22+ B25B              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ B25B
  24+ B25B E5 D5        compare16HLDEABS:   push    hl,,de
  25+ B25D 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ B25E E6 7F                            and     SignMask8Bit
  27+ B260 67                               ld      h,a
  28+ B261 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ B262 E6 7F                            and     SignMask8Bit
  30+ B264 57                               ld      d,a
  31+ B265 A7                               and     a
  32+ B266 ED 52                            sbc     hl,de
  33+ B268 D1 E1                            pop     hl,,de
  34+ B26A C9                               ret
  35+ B26B
  36+ B26B
# file closed: ./Maths/compare16.asm
1237  B26B                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ B26B              ;;----------------------------------------------------------------------------------------------------------------------
   2+ B26B              ;; 16-bit negate
   3+ B26B              negate16:
   4+ B26B              negate16hl:
   5+ B26B                      ; Input:
   6+ B26B                      ;       HL = value
   7+ B26B                      ; Output:
   8+ B26B                      ;       HL = -value
   9+ B26B                      ; Destroys:
  10+ B26B                      ;       AF
  11+ B26B                      ;
  12+ B26B AF           	xor 	a
  13+ B26C 95           	sub 	l
  14+ B26D 6F           	ld 		l,a
  15+ B26E 9F           	sbc 	a,a
  16+ B26F 94           	sub 	h
  17+ B270 67           	ld 		h,a
  18+ B271 C9           	ret
  19+ B272
  20+ B272              negate16de:
  21+ B272 AF           	xor 	a
  22+ B273 93           	sub 	e
  23+ B274 5F           	ld 		e,a
  24+ B275 9F           	sbc 	a,a
  25+ B276 92           	sub 	d
  26+ B277 57           	ld 		d,a
  27+ B278 C9           	ret
  28+ B279
  29+ B279              negate16bc:
  30+ B279 AF           	xor 	a
  31+ B27A 91           	sub 	c
  32+ B27B 4F           	ld 		c,a
  33+ B27C 9F           	sbc 	a,a
  34+ B27D 90           	sub 	b
  35+ B27E 47           	ld 		b,a
  36+ B27F C9           	ret
  37+ B280
  38+ B280
  39+ B280              macronegate16hl:	MACRO
  40+ B280 ~            					xor 	a
  41+ B280 ~            					sub 	l
  42+ B280 ~            					ld 		l,a
  43+ B280 ~            					sbc 	a,a
  44+ B280 ~            					sub 	h
  45+ B280 ~            					ld 		h,a
  46+ B280              					ENDM
  47+ B280
  48+ B280              macronegate16de:	MACRO
  49+ B280 ~            					xor 	a
  50+ B280 ~                                sub 	e
  51+ B280 ~                                ld 		e,a
  52+ B280 ~                                sbc 	a,a
  53+ B280 ~                                sub 	d
  54+ B280 ~                                ld 		d,a
  55+ B280              					ENDM
  56+ B280              macronegate16bc:	MACRO
  57+ B280 ~            					xor 	a
  58+ B280 ~                                sub 	c
  59+ B280 ~                                ld 		c,a
  60+ B280 ~                                sbc 	a,a
  61+ B280 ~                                sub 	b
  62+ B280 ~                                ld 		b,a
  63+ B280              					ENDM
  64+ B280
  65+ B280              macronegate16ix:	MACRO
  66+ B280 ~            					xor 	a
  67+ B280 ~                                sub 	ixl
  68+ B280 ~                                ld 		ixl,a
  69+ B280 ~                                sbc 	a,a
  70+ B280 ~                                sub 	ixh
  71+ B280 ~                                ld 		ixh,a
  72+ B280              					ENDM
# file closed: ./Maths/negate16.asm
1238  B280                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ B280 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ B282                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ B282 BA          >                        cp     d
   2+ B283 D2 98 B2    >                        jp		nc,TISXAccGTEQ
   3+ B286 4F                                   ld			c,a
   4+ B287 CD 8F B0                             call		asm_div8
   5+ B28A 79                                   ld			a,c							; a = result
   6+ B28B CB 3F                                srl			a							; result / 4
   7+ B28D 47                                   ld			b,a							; t = t /4
   8+ B28E CB 3F                                srl			a							; result / 8
   9+ B290 80                                   add			a,b							; result /8 + result /4
  10+ B291 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ B292 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ B294 E6 80                                and			$80							; recover sign only
  13+ B296 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ B297 C9                                   ret
  15+ B298              TISXAccGTEQ:
  16+ B298              ;TI4:										;\ clean to +/- unity
  17+ B298 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ B29A E6 80                                and			$80							; copy of Acc
  19+ B29C F6 60                                or			$60							; unity
  20+ B29E C9                                   ret
  21+ B29F
  22+ B29F
  23+ B29F
  24+ B29F
  25+ B29F              normaliseXX1596fast:
  26+ B29F                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ B29F 3A 83 C0     	ld		a,(XX15)		    ; XX15+0
  28+ B2A2 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ B2A4 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ B2A6              N96SQX:
  31+ B2A6              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ B2A6 5F          >			ld	e,a
  31+ B2A7 57          >			ld  d,a
  31+ B2A8 ED 30       >			mul
  32+ B2AA 62           	ld		h,d					; h == varR d = varO e= varA
  33+ B2AB 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ B2AC              N96SQY:
  35+ B2AC 3A 84 C0     	ld		a,(XX15+1)
  36+ B2AF DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ B2B1 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ B2B3              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ B2B3 5F          >			ld	e,a
  38+ B2B4 57          >			ld  d,a
  38+ B2B5 ED 30       >			mul
  39+ B2B7 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ B2B8              N96SQZ:
  41+ B2B8 3A 85 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ B2BB FD 67        	ld		iyh,a               ; iyh = signed
  43+ B2BD E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ B2BF              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ B2BF 5F          >			ld	e,a
  44+ B2C0 57          >			ld  d,a
  44+ B2C1 ED 30       >			mul
  45+ B2C3              N96SQADD:
  46+ B2C3 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ B2C4 EB           	ex		de,hl				; hl => de ready for square root
  48+ B2C5              N96SQRT:
  49+ B2C5 CD 5C AF     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ B2C8              N96NORMX:
  51+ B2C8 3A 83 C0     	ld		a,(XX15+0)
  52+ B2CB E6 7F        	and		SignMask8Bit
  53+ B2CD 4F           	ld		c,a
  54+ B2CE 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ B2CF CD F6 B4     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ B2D2 47           	ld		b,a				;++SGN
  57+ B2D3 DD 7C        	ld		a,ixh			;++SGN
  58+ B2D5 E6 80        	and		$80				;++SGN
  59+ B2D7 B0           	or		b				;++SGN
  60+ B2D8 32 83 C0     	ld		(XX15+0),a
  61+ B2DB              N96NORMY:
  62+ B2DB 3A 84 C0     	ld		a,(XX15+1)
  63+ B2DE E6 7F        	and		SignMask8Bit
  64+ B2E0 4F           	ld		c,a
  65+ B2E1 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ B2E2 CD F6 B4     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ B2E5 47           	ld		b,a				;++SGN
  68+ B2E6 DD 7D        	ld		a,ixl			;++SGN
  69+ B2E8 E6 80        	and		$80				;++SGN
  70+ B2EA B0           	or		b				;++SGN
  71+ B2EB 32 84 C0     	ld		(XX15+1),a
  72+ B2EE              N96NORMZ:
  73+ B2EE 3A 85 C0     	ld		a,(XX15+2)
  74+ B2F1 E6 7F        	and		SignMask8Bit
  75+ B2F3 4F           	ld		c,a
  76+ B2F4 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ B2F5 CD F6 B4     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ B2F8 47           	ld		b,a				;++SGN
  79+ B2F9 FD 7C        	ld		a,iyh			;++SGN
  80+ B2FB E6 80        	and		$80				;++SGN
  81+ B2FD B0           	or		b				;++SGN
  82+ B2FE 32 85 C0     	ld		(XX15+2),a
  83+ B301 C9           	ret
  84+ B302
  85+ B302              ; Normalise vector
  86+ B302              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ B302              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ B302              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ B302              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ B302              ;
  91+ B302              ;
  92+ B302              ;
  93+ B302
  94+ B302              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ B302 3A 83 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ B305                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ B305 5F          >			ld	e,a
  96+ B306 57          >			ld  d,a
  96+ B307 ED 30       >			mul
  97+ B309 7A                                   ld		a,d
  98+ B30A 32 BE 9D                             ld		(varR),a			; R	 \ hi sum later use b
  99+ B30D 7B                                   ld		a,e
 100+ B30E 32 BD 9D                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ B311 32 BA 9C                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ B314 3A 84 C0                             ld		a,(XX15+1)
 103+ B317                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ B317 5F          >			ld	e,a
 103+ B318 57          >			ld  d,a
 103+ B319 ED 30       >			mul
 104+ B31B 7A                                   ld		a,d
 105+ B31C 32 D9 9D                             ld		(varT),a			; T	 \ hi sum
 106+ B31F 7B                                   ld		a,e
 107+ B320 32 BA 9C                             ld		(varP),a			; P	 \ lo sum
 108+ B323 21 BD 9D                             ld		hl,varQ
 109+ B326 8E                                   adc		a,(hl)				; +Q
 110+ B327 32 BD 9D                             ld		(varQ),a			; =>Q
 111+ B32A 3A D9 9D                             ld		a,(varT)			;
 112+ B32D 21 BE 9D                             ld		hl,varR
 113+ B330 8E                                   adc		a,(hl)				;  R
 114+ B331 32 BE 9D                             ld		(varR),a			; R
 115+ B334 3A 85 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ B337                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ B337 5F          >			ld	e,a
 116+ B338 57          >			ld  d,a
 116+ B339 ED 30       >			mul
 117+ B33B 7A                                   ld		a,d
 118+ B33C 32 D9 9D                             ld		(varT),a			; T	 \ hi sum
 119+ B33F 7B                                   ld		a,e
 120+ B340 32 BA 9C                             ld		(varP),a			; P	 \ lo sum
 121+ B343 21 BD 9D                             ld		hl,varQ
 122+ B346 8E                                   adc		a,(hl)				; +Q
 123+ B347 32 BD 9D                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ B34A 3A D9 9D                             ld		a,(varT)			; T temp Hi
 125+ B34D 21 BE 9D                             ld		hl,varR
 126+ B350 8E                                   adc		a,(hl)				; +R
 127+ B351 32 BE 9D                             ld		(varR),a			; R
 128+ B354 CD 7F AF                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ B357 3A 83 C0                             ld		a,(XX15+0)
 130+ B35A CD F0 B4                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ B35D 32 83 C0                             ld		(XX15+0),a
 132+ B360 3A 84 C0                             ld		a,(XX15+1)
 133+ B363 CD F0 B4                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ B366 32 84 C0                             ld		(XX15+1),a
 135+ B369 3A 84 C0                             ld		a,(XX15+1)
 136+ B36C CD F0 B4                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ B36F 32 84 C0                             ld		(XX15+1),a
 138+ B372 C9                                   ret
 139+ B373
 140+ B373
# file closed: ./Maths/normalise96.asm
1239  B373                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ B373              ;Number in hl to decimal ASCII
   2+ B373              ;Thanks to z80 Bits
   3+ B373              ;inputs:	hl = number to ASCII
   4+ B373              ;example: hl=300 outputs '00300'
   5+ B373              ;destroys: af, bc, hl, de used
   6+ B373              DispHLtoDE:
   7+ B373              ; "DispHL, writes HL to DE address"
   8+ B373 01 F0 D8     	ld	bc,-10000
   9+ B376 CD 8C B3     	call	Num1
  10+ B379 01 18 FC     	ld	bc,-1000
  11+ B37C CD 8C B3     	call	Num1
  12+ B37F 01 9C FF     	ld	bc,-100
  13+ B382 CD 8C B3     	call	Num1
  14+ B385 0E F6        	ld	c,-10
  15+ B387 CD 8C B3     	call	Num1
  16+ B38A 0E FF        	ld	c,-1
  17+ B38C              Num1:
  18+ B38C 3E 2F        	ld	a,'0'-1
  19+ B38E              .Num2:
  20+ B38E 3C           	inc	a
  21+ B38F 09           	add	hl,bc
  22+ B390 38 FC        	jr	c,.Num2
  23+ B392 ED 42        	sbc	hl,bc
  24+ B394 12           	ld	(de),a
  25+ B395 13           	inc	de
  26+ B396 C9           	ret
  27+ B397
  28+ B397              DispAtoDE:
  29+ B397 26 00        	ld h,0
  30+ B399 6F           	ld l,a
  31+ B39A C3 73 B3     	jp DispHLtoDE
  32+ B39D
  33+ B39D              DispPriceAtoDE:
  34+ B39D 26 00        	ld h,0
  35+ B39F 6F           	ld l,a
  36+ B3A0 01 9C FF     	ld	bc,-100
  37+ B3A3 CD B3 B3     	call	.NumLeadBlank1
  38+ B3A6 0E F6        	ld	c,-10
  39+ B3A8 CD 8C B3     	call	Num1
  40+ B3AB 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ B3AD 12           	ld		(de),a					; we can optimse that later TODO
  42+ B3AE 13           	inc		de						; with just an inc De
  43+ B3AF 0E FF        	ld	c,-1
  44+ B3B1 18 D9        	jr		Num1
  45+ B3B3              .NumLeadBlank1:
  46+ B3B3 3E 2F        	ld	a,'0'-1
  47+ B3B5              .NumLeadBlank2:
  48+ B3B5 3C           	inc	a
  49+ B3B6 09           	add	hl,bc
  50+ B3B7 38 FC        	jr	c,.NumLeadBlank2
  51+ B3B9 FE 30        	cp	'0'
  52+ B3BB 20 02        	jr	nz,.DontBlank
  53+ B3BD              .Blank:
  54+ B3BD 3E 20        	ld	a,' '
  55+ B3BF              .DontBlank:
  56+ B3BF ED 42        	sbc	hl,bc
  57+ B3C1 12           	ld	(de),a
  58+ B3C2 13           	inc	de
  59+ B3C3 C9           	ret
  60+ B3C4
  61+ B3C4              DispQtyAtoDE:
  62+ B3C4 FE 00        	cp	0
  63+ B3C6 28 23        	jr	z,.NoStock
  64+ B3C8 26 00        	ld h,0
  65+ B3CA 6F           	ld l,a
  66+ B3CB 01 9C FF     	ld	bc,-100
  67+ B3CE CD DA B3     	call	.NumLeadBlank1
  68+ B3D1 0E F6        	ld	c,-10
  69+ B3D3 CD DA B3     	call	.NumLeadBlank1
  70+ B3D6 0E FF        	ld	c,-1
  71+ B3D8 18 B2        	jr		Num1
  72+ B3DA              .NumLeadBlank1:
  73+ B3DA 3E 2F        	ld	a,'0'-1
  74+ B3DC              .NumLeadBlank2:
  75+ B3DC 3C           	inc	a
  76+ B3DD 09           	add	hl,bc
  77+ B3DE 38 FC        	jr	c,.NumLeadBlank2
  78+ B3E0 FE 30        	cp	'0'
  79+ B3E2 20 02        	jr	nz,.DontBlank
  80+ B3E4              .Blank:
  81+ B3E4 3E 20        	ld	a,' '
  82+ B3E6              .DontBlank:
  83+ B3E6 ED 42        	sbc	hl,bc
  84+ B3E8 12           	ld	(de),a
  85+ B3E9 13           	inc	de
  86+ B3EA C9           	ret
  87+ B3EB              .NoStock:
  88+ B3EB 3E 20        	ld	a,' '
  89+ B3ED 12           	ld	(de),a
  90+ B3EE 13           	inc	de
  91+ B3EF 12           	ld	(de),a
  92+ B3F0 13           	inc	de
  93+ B3F1 3E 2D        	ld	a,'-'
  94+ B3F3 12           	ld	(de),a
  95+ B3F4 13           	inc de
  96+ B3F5 C9           	ret
  97+ B3F6
  98+ B3F6
  99+ B3F6              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ B3F6              ;### Input      DE,IX=32bit value, IY=destination address
 101+ B3F6              ;### Output     IY=last char in destination string
 102+ B3F6              ;### Destroyed AF,BC,DE,HL,IX
 103+ B3F6 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ B3FA 0A 00 00 00
 103+ B3FE 64 00 00 00
 103+ B402 E8 03 00 00
 103+ B406 10 27 00 00
 104+ B40A A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ B40E 40 42 0F 00
 104+ B412 80 96 98 00
 104+ B416 00 E1 F5 05
 104+ B41A 00 CA 9A 3B
 105+ B41E 00 00 00 00  clcn32z ds 4
 106+ B422
 107+ B422              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ B422 CD 31 B4     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ B425 FD 7E 00                             ld      a,(IY+0)
 110+ B428 FD 77 01                             ld      (IY+1),a
 111+ B42B 3E 2E                                ld      a,"."
 112+ B42D FD 77 00                             ld      (IY+0),a
 113+ B430 C9                                   ret
 114+ B431
 115+ B431 DD 22 1E B4  DispDEIXtoIY:           ld (clcn32z),ix
 116+ B435 ED 53 20 B4                          ld (clcn32z+2),de
 117+ B439 DD 21 1A B4                          ld ix,clcn32t+36
 118+ B43D 06 09                                ld b,9
 119+ B43F 0E 00                                ld c,0
 120+ B441 3E 30        .clcn321:               ld a,'0'
 121+ B443 B7                                   or a
 122+ B444 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ B447 DD 56 01                             ld d,(ix+1)
 124+ B44A 2A 1E B4                             ld hl,(clcn32z)
 125+ B44D ED 52                                sbc hl,de
 126+ B44F 22 1E B4                             ld (clcn32z),hl
 127+ B452 DD 5E 02                             ld e,(ix+2)
 128+ B455 DD 56 03                             ld d,(ix+3)
 129+ B458 2A 20 B4                             ld hl,(clcn32z+2)
 130+ B45B ED 52                                sbc hl,de
 131+ B45D 22 20 B4                             ld (clcn32z+2),hl
 132+ B460 38 04                                jr c,.clcn325
 133+ B462 0C                                   inc c
 134+ B463 3C                                   inc a
 135+ B464 18 DE                                jr .clcn322
 136+ B466 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ B469 DD 56 01                             ld d,(ix+1)
 138+ B46C 2A 1E B4                             ld hl,(clcn32z)
 139+ B46F 19                                   add hl,de
 140+ B470 22 1E B4                             ld (clcn32z),hl
 141+ B473 DD 5E 02                             ld e,(ix+2)
 142+ B476 DD 56 03                             ld d,(ix+3)
 143+ B479 2A 20 B4                             ld hl,(clcn32z+2)
 144+ B47C ED 5A                                adc hl,de
 145+ B47E 22 20 B4                             ld (clcn32z+2),hl
 146+ B481 11 FC FF                             ld de,-4
 147+ B484 DD 19                                add ix,de
 148+ B486 0C                                   inc c
 149+ B487 0D                                   dec c
 150+ B488 28 05                                jr z,.clcn323
 151+ B48A FD 77 00                             ld (iy+0),a
 152+ B48D FD 23                                inc iy
 153+ B48F 10 B0        .clcn323:               djnz .clcn321
 154+ B491 3A 1E B4                             ld a,(clcn32z)
 155+ B494 C6 30                                add A,'0'
 156+ B496 FD 77 00                             ld (iy+0),a
 157+ B499 FD 36 01 00                          ld (iy+1),0
 158+ B49D C9                                   ret
 159+ B49E
# file closed: ./Maths/binary_to_decimal.asm
1240  B49E                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ B49E              ;; calcs HLB + DEC where B and C are signs
   2+ B49E              ;; result HL with A as sign
   3+ B49E              ;; special handling if result is zero forcign sign bit to be zero
   4+ B49E 78           ADDHLDESignBC:          ld      a,b
   5+ B49F E6 80                                and     SignOnly8Bit
   6+ B4A1 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ B4A2                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ B4A2 FA B0 B4    >                        jp		m, ADDHLDEsBCOppSGN
   8+ B4A5 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ B4A6 B1                                   or      c
  10+ B4A7                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ B4A7 FA AC B4    >                        jp		m, ADDHLDEsBCSameNeg
  11+ B4AA 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ B4AB C9                                   ret
  13+ B4AC 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ B4AD 78                                   ld      a,b
  15+ B4AE B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ B4AF C9                                   ret
  17+ B4B0 B7           ADDHLDEsBCOppSGN:       or      a
  18+ B4B1 ED 52                                sbc     hl,de
  19+ B4B3 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ B4B5 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ B4B6 C9                                   ret
  22+ B4B7              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ B4B7 AF          >                    xor a
  22+ B4B8 95          >                    sub l
  22+ B4B9 6F          >                    ld l,a
  22+ B4BA 9F          >                    sbc a,a
  22+ B4BB 94          >                    sub h
  22+ B4BC 67          >                    ld h,a
  23+ B4BD 78                                   ld      a,b
  24+ B4BE EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ B4C0 C9                                   ret
  26+ B4C1
# file closed: ./Maths/ADDHLDESignBC.asm
1241  B4C1              ;INCLUDE "badd_ll38.asm"
1242  B4C1              ;;INCLUDE "XX12equXX15byXX16.asm"
1243  B4C1                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ B4C1              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ B4C1 BA          >                        cp     d
   1+ B4C2 D2 DD B4    >                        jp		nc,.TIS2AccGTEQ
   2+ B4C5 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ B4C7 CB 27        .TIS2RollTLoop:			sla			a
   4+ B4C9                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ B4C9 BA          >                        cp      d
   4+ B4CA DA E0 B4    >                        jp		c, .TIS2SkipSub
   5+ B4CD 9A                                   sbc			a,d							; do subtraction with carry
   6+ B4CE 37                                   scf
   7+ B4CF CB 10                                rl			b							; T rolled left to push bit out the end
   8+ B4D1 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ B4D3 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ B4D4 CB 3F                                srl			a							; result / 2
  11+ B4D6 CB 3F                                srl			a							; result / 4
  12+ B4D8 47                                   ld			b,a							; t = t /4
  13+ B4D9 CB 3F                                srl			a							; result / 8
  14+ B4DB 80                                   add			a,b							; result /8 + result /4
  15+ B4DC C9                                   ret
  16+ B4DD 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ B4DF C9                                   ret
  18+ B4E0 B7           .TIS2SkipSub:           or			a
  19+ B4E1 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ B4E3 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ B4E5 C3 D3 B4                             jp			.TIS2SKIPCont
  22+ B4E8
  23+ B4E8
  24+ B4E8              ; USES 			A DE BC
  25+ B4E8              ; DOES NOT USE 	HL
  26+ B4E8              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ B4E8 CB 7F        	bit			7,a
  28+ B4EA 28 04        	jr			z,AequAdivQmul96
  29+ B4EC ED 44        	neg										; revers 2s'c and just set neg bit
  30+ B4EE CB FF        	set			7,a
  31+ B4F0              ; Note negative numbers are bit 7 set not 2's compliment
  32+ B4F0              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ B4F0              TIS2:
  34+ B4F0 4F           	ld			c,a							; copy of Acc
  35+ B4F1 3A BD 9D     	ld			a,(varQ)
  36+ B4F4 57           	ld			d,a							; d = varQ
  37+ B4F5 79           	ld			a,c							; recover a
  38+ B4F6              AequAdivDmul96:
  39+ B4F6 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ B4F7 E6 7F        	and			SignMask8Bit				; ignore sign
  41+ B4F9              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ B4F9 BA          >                        cp     d
  41+ B4FA D2 1A B5    >                        jp		nc,.TIS2AccGTEQ
  42+ B4FD 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ B4FF              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ B4FF CB 27        	sla			a
  45+ B501              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ B501 BA          >                        cp      d
  45+ B502 DA 20 B5    >                        jp		c, .TIS2SkipSub
  46+ B505 9A           	sbc			a,d							; do subtraction with carry
  47+ B506 37           	scf
  48+ B507 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ B509 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ B50B              .TIS2SKIPCont:
  51+ B50B 78           	ld			a,b							; T
  52+ B50C CB 3F        	srl			a							; result / 2
  53+ B50E CB 3F        	srl			a							; result / 4
  54+ B510 47           	ld			b,a							; t = t /4
  55+ B511 CB 3F        	srl			a							; result / 8
  56+ B513 80           	add			a,b							; result /8 + result /4
  57+ B514 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ B515 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ B516 E6 80        	and			$80							; recover sign only
  60+ B518 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ B519 C9           	ret
  62+ B51A              .TIS2AccGTEQ:
  63+ B51A              ;TI4:										;\ clean to +/- unity
  64+ B51A 79           	ld			a,c
  65+ B51B E6 80        	and			$80							; copy of Acc
  66+ B51D F6 60        	or			$60							; unity
  67+ B51F C9           	ret
  68+ B520              .TIS2SkipSub:
  69+ B520 B7           	or			a
  70+ B521 CB 10        	rl			b							; T rolled left to push bit out the end
  71+ B523 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ B525 C3 0B B5     	jp			.TIS2SKIPCont
  73+ B528
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1244  B528                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ B528              fmltu:
   2+ B528              AequAmulQdiv256:
   3+ B528              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ B528 57           	ld	d,a
   5+ B529 3A BD 9D     	ld	a,(varQ)
   6+ B52C 5F           	ld	e,a
   7+ B52D ED 30        	mul
   8+ B52F 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ B530 C9           	ret
  10+ B531
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1245  B531                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ B531              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ B531              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ B531 21 9D A0     		ld		hl,varDustZ
   4+ B534 FD 7D        		ld		a,iyl
   5+ B536 ED 31        		add		hl,a
   6+ B538 7E           		ld		a,(hl)
   7+ B539 C3 45 B5     		jp		DV41
   8+ B53C              DV42:										; travel step of dust particle front/rear
   9+ B53C 21 9D A0     		ld		hl,varDustZ
  10+ B53F 3A A8 9C     		ld		a,(regY)
  11+ B542 ED 31        		add		hl,a
  12+ B544 7E           		ld		a,(hl)						; a = SZ[y]
  13+ B545              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ B545 5F           		ld		e,a							; using E as Q var replacement
  15+ B546 3A B9 9D     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ B549              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ B549 06 08        		ld		b,8							; counter
  18+ B54B CB 27        		sla		a							;
  19+ B54D 57           		ld		d,a							; use d for - p = delta * 2
  20+ B54E AF           		xor		a
  21+ B54F              DVL4:										; counter x loop (b reg)
  22+ B54F CB 17        		rl		a							; a = a * 2
  23+ B551 38 03        		jr		c,DV8						; jump on carry
  24+ B553 BB           		cp		e							; var Q
  25+ B554 38 02        		jr		c,DV5						; skip subtraction
  26+ B556              DV8:
  27+ B556 9B           		sbc		a,e							; a = a - q (with carry)
  28+ B557 37           		scf									;  carry gets set
  29+ B558              DV5:										; skipped subtraction
  30+ B558 CB 12        		rl		d							; d (P hi)
  31+ B55A 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ B55C              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ B55C              ; Note we are not going to call LL28+4 but inline code here:
  34+ B55C 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ B55E 4F           		ld		c,a							; use c as R var
  36+ B55F              .RollRemainder:
  37+ B55F CB 27        		sla		a
  38+ B561 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ B563 B8           		cp		b							; a < q?
  40+ B564 30 01        		jr		nc,.DontSBC
  41+ B566              .DoSBC:										; a is < q
  42+ B566 98           		sbc		a,b							; 	a -= q
  43+ B567              .DontSBC:
  44+ B567 CB 11        		rl		c							; r << 1
  45+ B569 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ B56B 79           		ld		a,c
  47+ B56C 32 BE 9D     		ld		(varR),a					; for backwards compat
  48+ B56F 7A           		ld		a,d
  49+ B570 32 BA 9C     		ld		(varP),a
  50+ B573 C9           		ret									; R (c) left with remainder
  51+ B574              .Reduce:									; a geneated a carry
  52+ B574 98           		sbc		a,b							; a = a - (q +1)
  53+ B575 37           		scf									; set carry flag for rl
  54+ B576 CB 11        		rl		c							; r << 1 briging in carry
  55+ B578 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ B57A 79           		ld		a,c
  57+ B57B 32 BE 9D     		ld		(varR),a					; for backwards compat
  58+ B57E 7A           		ld		a,d
  59+ B57F 32 BA 9C     		ld		(varP),a
  60+ B582 C9           		ret
  61+ B583              .AnswerTooBig:
  62+ B583 0E FF        		ld		c,$FF						; arse its too big
  63+ B585 79           		ld		a,c
  64+ B586 32 BE 9D     		ld		(varR),a					; for backwards compat
  65+ B589 7A           		ld		a,d
  66+ B58A 32 BA 9C     		ld		(varP),a
  67+ B58D C9           		ret
  68+ B58E
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1246  B58E                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ B58E
   2+ B58E              asm_defmutl:
   3+ B58E              AequDmulEdiv256usgn:
   4+ B58E              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ B58E ED 30        	mul
   6+ B590 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ B591 C9           	ret
   8+ B592
   9+ B592
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1247  B592              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1248  B592              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1249  B592              ;INCLUDE "APequPmulX-MU11.asm"
1250  B592                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ B592              APequQmulA:
   2+ B592              asm_mult1:
   3+ B592              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ B592 FE 00        	cp	0
   5+ B594 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ B596 5F           	ld	e,a
   7+ B597 3A BD 9D     	ld	a,(varQ)
   8+ B59A 57           	ld	d,a
   9+ B59B FE 00        	cp	0				; compare a
  10+ B59D 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ B59F AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ B5A0 E6 80        	and $80				; get the resultant sign and save into b
  13+ B5A2 47           	ld	b,a
  14+ B5A3 7A           	ld	a,d
  15+ B5A4 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ B5A6 57           	ld	d,a
  17+ B5A7 7B           	ld	a,e
  18+ B5A8 E6 7F        	and SignMask8Bit
  19+ B5AA 5F           	ld	e,a
  20+ B5AB ED 30        	mul					; zxn de = d * e
  21+ B5AD 7B           	ld	a,e
  22+ B5AE 32 BA 9C     	ld	(varP),a		; p = lo
  23+ B5B1 7A           	ld	a,d				; a = hi
  24+ B5B2 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ B5B3 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ B5B4 C9           	ret
  27+ B5B5              .mul0:
  28+ B5B5 AF           	xor	a
  29+ B5B6 32 BA 9C     	ld	(varP),a
  30+ B5B9 57           	ld	d,a
  31+ B5BA 5F           	ld  e,a
  32+ B5BB C9           	ret
  33+ B5BC
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1251  B5BC                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ B5BC              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ B5BC              SAEquSRPlusAQ:
   3+ B5BC              ; Calculate the following between sign-magnitude numbers:
   4+ B5BC              ;   (S A) = (S R) + (A Q)
   5+ B5BC              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ B5BC              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ B5BC              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ B5BC              LL38:
   9+ B5BC              ;	ld		d,a
  10+ B5BC              ;	ld		a,(varQ)
  11+ B5BC              ;	ld		e,a
  12+ B5BC              ;	ld		a,(varS)
  13+ B5BC              ;	ld		h,a
  14+ B5BC              ;	ld		a,(varR)
  15+ B5BC              ;	ld		l,a
  16+ B5BC              ;	call	ADDHLDESignedv3
  17+ B5BC              ;	ld		a,h
  18+ B5BC              ;	ld		(varS),a
  19+ B5BC              ;	ld		a,l
  20+ B5BC              ;	ret
  21+ B5BC              ; calculation table
  22+ B5BC              ;   R     Q    Op            Sign calc
  23+ B5BC              ;	10    5    Add           +    sign same add R sign
  24+ B5BC              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ B5BC              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ B5BC              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ B5BC              ;   5    10    Add           +    sign same add R sign
  28+ B5BC              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ B5BC              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ B5BC              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ B5BC
  32+ B5BC              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ B5BC              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ B5BC              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ B5BC              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ B5BC
  37+ B5BC
  38+ B5BC              ; Calculate sign for Q from A and varS
  39+ B5BC 21 BF 9D     	ld		hl,varS							;
  40+ B5BF AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ B5C0 FA CB B5     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ B5C3 3A BD 9D     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ B5C6 21 BE 9D     	ld		hl,varR
  44+ B5C9 86           	add		a,(hl)							; a = Q + R
  45+ B5CA C9           	ret										; Done carry set if overflow
  46+ B5CB              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ B5CB 3A BE 9D     	ld		a,(varR)						; a = R
  48+ B5CE 21 BD 9D     	ld		hl,varQ                         ; Q
  49+ B5D1              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ B5D1              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ B5D1 B7          >                        or a
  51+ B5D2 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ B5D3 38 01            jr      c,.LL39SignCorrection
  53+ B5D5              ;--    jr      a,.LL39ResultZero
  54+ B5D5              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ B5D5              ;--	or		a								; Clear carry flag to say result is correct
  56+ B5D5 C9           	ret
  57+ B5D6              .LL39SignCorrection:
  58+ B5D6 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ B5D8 28 0E            jr      z,.LL39ResultZero
  60+ B5DA ED 44            neg                                     ; flip A 2'c value to positive
  61+ B5DC 08           	ex		af,af'							; save A temporarily
  62+ B5DD 3A BF 9D     	ld		a,(varS)						; Flip Sign bit in varS
  63+ B5E0 EE 80        	xor		$80							    ;
  64+ B5E2 32 BF 9D     	ld		(varS),a                        ; flip sign bit of a
  65+ B5E5 08           	ex		af,af'                          ; get back a which is the result
  66+ B5E6                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ B5E6 B7          >                        or a
  67+ B5E7 C9           	ret
  68+ B5E8              .LL39ResultZero:
  69+ B5E8 32 BF 9D         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ B5EB                  ClearCarryFlag                          ; clear carry
  70+ B5EB B7          >                        or a
  71+ B5EC C9               ret
  72+ B5ED              ;--LL39SwapSubtraction:
  73+ B5ED              ;--	push	bc
  74+ B5ED              ;--	ld		b,a
  75+ B5ED              ;--	ld		a,(hl)
  76+ B5ED              ;--	sub		b
  77+ B5ED              ;--	pop		bc
  78+ B5ED              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ B5ED              ;--	ld		a,(varS)
  80+ B5ED              ;--	xor		$80
  81+ B5ED              ;--	ld		(varS),a
  82+ B5ED              ;--	ex		af,af'
  83+ B5ED              ;--	ret
  84+ B5ED
  85+ B5ED              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ B5ED              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ B5ED              ;;;;;   (S A) = (S R) + (A Q)
  88+ B5ED              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ B5ED              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ B5ED              ;;;;LL38:
  91+ B5ED              ;;;;; Calculate sign for Q from A and varS
  92+ B5ED              ;;;;	ld		hl,varS							;
  93+ B5ED              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ B5ED              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ B5ED              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ B5ED              ;;;;	ld		hl,varR
  97+ B5ED              ;;;;	add		a,(hl)							; a = Q + R
  98+ B5ED              ;;;;	ret										; Done
  99+ B5ED              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ B5ED              ;;;;	ld		hl,varQ                         ;
 101+ B5ED              ;;;;	ld		a,(hl)
 102+ B5ED              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ B5ED              ;;;;	ld		a,(varR)						;
 104+ B5ED              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ B5ED              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ B5ED              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ B5ED              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ B5ED              ;;;;	ret
 109+ B5ED              ;;;;.SignCorrection:
 110+ B5ED              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ B5ED              ;;;;	ex		af,af'							; save A temporarily
 112+ B5ED              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ B5ED              ;;;;	xor		$80							    ;
 114+ B5ED              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ B5ED              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ B5ED              ;;;;	ret
 117+ B5ED              ;;;;LL39Sub16Bit:
 118+ B5ED              ;;;;	ld		e,a
 119+ B5ED              ;;;;	ld		d,0
 120+ B5ED              ;;;;	ld		a,(varR)
 121+ B5ED              ;;;;	ld		l,a
 122+ B5ED              ;;;;	ld		h,0
 123+ B5ED              ;;;;	ClearCarryFlag
 124+ B5ED              ;;;;	sbc		hl,de
 125+ B5ED              ;;;;	jr		c,.SignCorrection16bit
 126+ B5ED              ;;;;	bit		7,h
 127+ B5ED              ;;;;	jr		z,.GoodToReturn
 128+ B5ED              ;;;;.Needtonegate:
 129+ B5ED              ;;;;	macronegate16hl
 130+ B5ED              ;;;;.GoodToReturn
 131+ B5ED              ;;;;	ld		a,l
 132+ B5ED              ;;;;	or		a
 133+ B5ED              ;;;;	ret
 134+ B5ED              ;;;;.SignCorrection16bit:
 135+ B5ED              ;;;;	macronegate16hl
 136+ B5ED              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ B5ED              ;;;;	xor		$80							    ;
 138+ B5ED              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ B5ED              ;;;;	ld		a,l
 140+ B5ED              ;;;;	ret
 141+ B5ED
 142+ B5ED
# file closed: ./Maths/Utilities/badd_ll38.asm
1252  B5ED                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ B5ED              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ B5ED              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ B5ED              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ B5ED
   5+ B5ED
   6+ B5ED              moveship4Yreg:
   7+ B5ED 3A A8 9C     		ld		a,(regY)
   8+ B5F0 47           		ld		b,a
   9+ B5F1              moveship4breg:
  10+ B5F1              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ B5F1              MVS4PitchAlphaRollBeta:
  12+ B5F1              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ B5F1 3A D3 9C     		ld		a,(ALPHA)					;  ALPHA
  14+ B5F4 32 BD 9D     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ B5F7 21 0E C0     		ld		hl,UBnKxsgn
  16+ B5FA 78           		ld		a,b							; from
  17+ B5FB ED 31        		add		hl,a
  18+ B5FD 7E           		ld		a,(hl)						; INWK+2,Y
  19+ B5FE 32 BE 9D     		ld		(varR),a					; R  \ lo
  20+ B601 23           		inc		hl
  21+ B602 7E           		ld		a,(hl)						; INWK+3,Y
  22+ B603 32 BF 9D     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ B606 2B           		dec		hl
  24+ B607 2B           		dec		hl
  25+ B608 2B           		dec		hl							;
  26+ B609 7E           		ld		a,(hl)						; INWK+0,Y
  27+ B60A 32 BA 9C     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ B60D 23           		inc		hl
  29+ B60E 7E           		ld		a,(hl)						; INWK+1,Y
  30+ B60F EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ B611 CD F2 AD     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ B614 23                   inc     hl
  33+ B615 23                   inc     hl
  34+ B616 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ B617 2B                   dec     hl
  36+ B618 3A A7 9C             ld      a,(regX)
  37+ B61B 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ B61C 32 BA 9C             ld      (varP),a                    ;  P
  39+ B61F 2B                   dec     hl
  40+ B620 2B                   dec     hl
  41+ B621 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ B622 32 BE 9D             ld      (varR),a                    ;  R	\ lo
  43+ B625 23                   inc     hl
  44+ B626 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ B627 32 BF 9D             ld      (varS),a                    ; S	\ hi
  46+ B62A 23                   inc     hl
  47+ B62B 23                   inc     hl
  48+ B62C 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ B62D CD F2 AD             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ B630 2B                   dec     hl
  51+ B631 2B                   dec     hl
  52+ B632 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ B633 3A A7 9C             ld      a,(regX)
  54+ B636 2B                   dec     hl
  55+ B637 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ B638 32 BA 9C             ld      (varP),a                    ; P
  57+ B63B 3A C5 9C             ld      a,(BETA)                    ; BETA
  58+ B63E 32 BD 9D             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ B641 23                   inc     hl
  60+ B642 23                   inc     hl
  61+ B643 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ B644 32 BE 9D             ld      (varR),a                    ; R	\ lo
  63+ B647 23                   inc     hl
  64+ B648 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ B649 32 BF 9D             ld      (varS),a                    ; S	\ hi
  66+ B64C 23                   inc     hl
  67+ B64D 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ B64E 32 BA 9C             ld      (varP),a                    ; P	\ lo
  69+ B651 23                   inc     hl
  70+ B652 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ B653 EE 80                xor     $80                         ; flip sign hi
  72+ B655 CD F2 AD             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ B658 2B                   dec     hl
  74+ B659 2B                   dec     hl
  75+ B65A 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ B65B 3A A7 9C             ld      a,(regX)
  77+ B65E 2B                   dec     hl
  78+ B65F 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ B660 32 BA 9C             ld      (varP),a                    ; P
  80+ B663 23                   inc     hl
  81+ B664 23                   inc     hl
  82+ B665 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ B666 32 BE 9D             ld      (varR),a                    ; R	\ lo
  84+ B669 23                   inc     hl
  85+ B66A 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ B66B 32 BF 9D             ld      (varS),a                    ; S	\ hi
  87+ B66E 2B                   dec     hl
  88+ B66F 2B                   dec     hl
  89+ B670 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ B671 CD F2 AD             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ B674 23                   inc     hl
  92+ B675 23                   inc     hl
  93+ B676 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ B677 3A A7 9C             ld      a,(regX)
  95+ B67A 2B                   dec     hl
  96+ B67B 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ B67C C9                   ret
  98+ B67D
  99+ B67D
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1253  B67D              ;INCLUDE "MoveShip5-MVS5.asm"
1254  B67D              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1255  B67D              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1256  B67D              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1257  B67D                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ B67D              ;;;LL28:
   2+ B67D              ;;;    ld      c,a                         ;
   3+ B67D              ;;;    ld      a,(varQ)                    ;
   4+ B67D              ;;;    ld      b,a                         ;
   5+ B67D              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ B67D              ;;;RequAmul256divB:                        ;
   7+ B67D              ;;;LL28Breg:
   8+ B67D              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ B67D              ;;;	cp		b							; Check A >= Q
  10+ B67D              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ B67D              ;;;.CalcRemainder:
  12+ B67D              ;;;	ld		c, 	$FE						; set R to $FE
  13+ B67D              ;;;.RollRemainder:
  14+ B67D              ;;;	sla		a
  15+ B67D              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ B67D              ;;;	cp		b							; a < q?
  17+ B67D              ;;;	jr		nc,.DontSBC
  18+ B67D              ;;;.DoSBC:									; a is < q
  19+ B67D              ;;;	sbc		a,b							; 	a -= q
  20+ B67D              ;;;.DontSBC:
  21+ B67D              ;;;	rl		c							; r << 1
  22+ B67D              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ B67D              ;;;    ld      a,c
  24+ B67D              ;;;    ld      (varR),a
  25+ B67D              ;;;	ret									; R (c) left with remainder
  26+ B67D              ;;;.Reduce:								; a geneated a carry
  27+ B67D              ;;;	sbc		a,b							; a = a - (q +1)
  28+ B67D              ;;;	scf									; set carry flag for rl
  29+ B67D              ;;;	rl		c							; r << 1 briging in carry
  30+ B67D              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ B67D              ;;;    ld      a,c
  32+ B67D              ;;;    ld      (varR),a
  33+ B67D              ;;;	ret
  34+ B67D              ;;;.AnswerTooBig:
  35+ B67D              ;;;	ld	    c,$FF							; arse its too big
  36+ B67D              ;;;    ld      a,c
  37+ B67D              ;;;    ld      (varR),a
  38+ B67D              ;;;	ret
  39+ B67D
  40+ B67D              BCequAmul256DivC:
  41+ B67D 59             ld    e,c
  42+ B67E 67             ld    h,a
  43+ B67F 2E 00          ld    l,0
  44+ B681              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ B681 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ B682 B7             or a                                   ; from this time on the carry is cleared
  47+ B683 C8             ret z
  48+ B684 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ B687 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ B689              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ B689 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ B68B 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ B68C 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ B68E C9             ret
  55+ B68F
  56+ B68F              HL_Div_C:
  57+ B68F              ; Integer divides HL by C
  58+ B68F              ; Result in HL, remainder in A
  59+ B68F              ; Clobbers F, B
  60+ B68F 06 10                ld b,16
  61+ B691 AF                   xor a
  62+ B692              HL_Div_C_Loop:
  63+ B692 29                   add hl,hl
  64+ B693 17                   rla
  65+ B694 B9                   cp c
  66+ B695 38 02                jr c,HL_DivC_Skip
  67+ B697 91                   sub c
  68+ B698 2C                   inc l
  69+ B699              HL_DivC_Skip:
  70+ B699 10 F7                djnz HL_Div_C_Loop
  71+ B69B 7D                   ld   a,l
  72+ B69C 32 BE 9D             ld  (varR),a
  73+ B69F C9                   ret
  74+ B6A0
  75+ B6A0
  76+ B6A0
  77+ B6A0              ; Entry point if varQ is populated with demoninator
  78+ B6A0              RequAmul256divQ:
  79+ B6A0              BFRDIV:
  80+ B6A0 F5           		push	af
  81+ B6A1 3A BD 9D     		ld		a,(varQ)
  82+ B6A4 4F           		ld		c,a
  83+ B6A5 F1           		pop		af
  84+ B6A6 FE 00        		cp		0
  85+ B6A8 CA BF B6     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ B6AB              RequAmul256divC:
  87+ B6AB 2E 00        		ld		l,0
  88+ B6AD 67           		ld		h,a
  89+ B6AE              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ B6AE 06 10        		ld b,16
  91+ B6B0 AF           		xor a
  92+ B6B1              LOOPPOINT:
  93+ B6B1 29           		add hl,hl
  94+ B6B2 17           		rla
  95+ B6B3 B9           		cp c
  96+ B6B4 38 02        		jr c,SKIPINCSUB
  97+ B6B6 2C           		inc l
  98+ B6B7 91           		sub c
  99+ B6B8              SKIPINCSUB:
 100+ B6B8 10 F7        		djnz LOOPPOINT
 101+ B6BA 7D           		ld		a,l
 102+ B6BB 32 BE 9D     		ld 		(varR),a
 103+ B6BE C9           		ret
 104+ B6BF              HLDIVC_0_BY:
 105+ B6BF 32 BE 9D     		ld		(varR),a
 106+ B6C2 C9           		ret
 107+ B6C3              ;	push	af
 108+ B6C3              ;	ld		a,b
 109+ B6C3              ;	ld		(varQ),a
 110+ B6C3              ;	pop		af
 111+ B6C3              ;RequAmul256divQ:
 112+ B6C3              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ B6C3              ;	ld		hl,varQ
 114+ B6C3              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ B6C3              ;	ld		b,$FE						; b = X
 116+ B6C3              ;	ld		c,a							; c = R	div roll counter
 117+ B6C3              ;LL31:									; roll R
 118+ B6C3              ;	sla		a
 119+ B6C3              ;	jr		c,LL29						; hop to Reduce
 120+ B6C3              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ B6C3              ;	sbc		a,(hl)						; a = a - Q
 122+ B6C3              ;	rl		c							; rotate R left
 123+ B6C3              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ B6C3              ;	jr		LL2Good
 125+ B6C3              ;LL29:									; Reduce
 126+ B6C3              ;	sbc		a,(hl)
 127+ B6C3              ;	scf
 128+ B6C3              ;	rl		c							; roll a carry flag into R
 129+ B6C3              ;	jr		c,LL31						;  loop R
 130+ B6C3              ;	jr		LL2Good
 131+ B6C3              ;LL2:
 132+ B6C3              ;	ld		c,$FF
 133+ B6C3              ;LL2Good:
 134+ B6C3              ;	ld		a,c
 135+ B6C3              ;	ld		(varR),a
 136+ B6C3              ;	ret
 137+ B6C3
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1258  B6C3                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ B6C3              RequAdivQ:
   2+ B6C3              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ B6C3              LL61:										; Handling division R=A/Q for case further down
   4+ B6C3 4F           	ld		c,a								; c = A
   5+ B6C4 3A BD 9D     	ld		a,(varQ)						; test for divide by 0
   6+ B6C7 FE 00        	cp		0
   7+ B6C9 28 16        	jr		z,LL84							; divide by zero error
   8+ B6CB 57           	ld		d,a								; now we can do C/D
   9+ B6CC 06 08            ld b,8
  10+ B6CE AF               xor a
  11+ B6CF              LL63:										; roll divide loop
  12+ B6CF CB 21            sla c
  13+ B6D1 17               rla
  14+ B6D2 BA               cp d
  15+ B6D3 38 02            jr c,LL64
  16+ B6D5 0C               inc c
  17+ B6D6 92               sub d
  18+ B6D7              LL64:
  19+ B6D7 10 F6            djnz LL63
  20+ B6D9 32 BC 9D     	ld	(varU),a							; store remainder in U
  21+ B6DC 79           	ld	a,c
  22+ B6DD 32 BE 9D     	ld	(varR),a							; store remainder in R
  23+ B6E0 C9               ret
  24+ B6E1              LL84:										; div error  R=U=#5
  25+ B6E1 3E 32        	ld		a,50
  26+ B6E3 32 BE 9D     	ld		(varR),a
  27+ B6E6 32 BC 9D     	ld		(varU),a
  28+ B6E9 C9           	ret
  29+ B6EA
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1259  B6EA              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1260  B6EA                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ B6EA              asm_mult12:
   2+ B6EA              RSequQmulA:
   3+ B6EA              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ B6EA CD 92 B5     	call APequQmulA
   5+ B6ED 08           	ex 	af,af'
   6+ B6EE 7A           	ld	a,d
   7+ B6EF 32 BF 9D     	ld	(varS),a
   8+ B6F2 7B           	ld	a,e
   9+ B6F3 32 BE 9D     	ld	(varR),a
  10+ B6F6 08           	ex 	af,af'
  11+ B6F7 C9           	ret
  12+ B6F8
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1261  B6F8              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1262  B6F8                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ B6F8              ;rotmap0xLo: DB	0				; INWK +9
   2+ B6F8              ;rotmap0xHi: DB	0				; INWK +10
   3+ B6F8              ;rotmat0yLo: DB	0				; INWK +11
   4+ B6F8              ;rotmat0yHi: DB	0				; INWK +12
   5+ B6F8              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ B6F8              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ B6F8              ;rotmap1xLo: DB	0				; INWK +15
   8+ B6F8              ;rotmap1xHi:	DB	0				; INWK +16
   9+ B6F8              ;rotmat1yLo:	DB	0				; INWK +17
  10+ B6F8              ;rotmat1yHi:	DB	0				; INWK +18
  11+ B6F8              ;rotmat1zLo:	DB	0				; INWK +19
  12+ B6F8              ;rotmat1zHi:	DB	0				; INWK +20
  13+ B6F8              ;rotmat2xLo: DB	0				; INWK +21
  14+ B6F8              ;rotmat2xHi:	DB	0				; INWK +22
  15+ B6F8              ;rotmat2yLo:	DB	0				; INWK +23
  16+ B6F8              ;rotmat2yHi:	DB	0				; INWK +24
  17+ B6F8              ;rotmat2zLo:	DB	0				; INWK +25
  18+ B6F8              ;rotmat2zHi:	DB	0				; INWK +26
  19+ B6F8              ;
  20+ B6F8              ;rotmatFx	equ	rotmat0xHi
  21+ B6F8              ;rotmatFy	equ	rotmat0yHi
  22+ B6F8              ;rotmatFz	equ	rotmat0zHi
  23+ B6F8              ;rotmatUx	equ	rotmat1xHi
  24+ B6F8              ;rotmatUy	equ	rotmat1yHi
  25+ B6F8              ;rotmatUz	equ	rotmat1zHi
  26+ B6F8              ;
  27+ B6F8              ;inwkarray			equ		INWK+10
  28+ B6F8
  29+ B6F8                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++B6F8              CopyRotMatNoseVtoXX15:
   2++B6F8                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++B6F8 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++B6FB 32 83 C0    >                        ld       (XX15VecX),a
   3++B6FE                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++B6FE 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++B701 32 84 C0    >                        ld       (XX15VecY),a
   4++B704                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++B704 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++B707 32 85 C0    >                        ld       (XX15VecZ),a
   5++B70A C9                   ret
   6++B70B
   7++B70B              CopyRotMatRoofVtoXX15:
   8++B70B                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++B70B 3A 1C C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++B70E 32 83 C0    >                        ld       (XX15VecX),a
   9++B711                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++B711 3A 1E C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B714 32 84 C0    >                        ld       (XX15VecY),a
  10++B717                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B717 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B71A 32 85 C0    >                        ld       (XX15VecZ),a
  11++B71D C9                   ret
  12++B71E
  13++B71E              CopyRotMatSideVtoXX15:
  14++B71E                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B71E 3A 16 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B721 32 83 C0    >                        ld       (XX15VecX),a
  15++B724                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B724 3A 18 C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B727 32 84 C0    >                        ld       (XX15VecY),a
  16++B72A                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B72A 3A 1A C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B72D 32 85 C0    >                        ld       (XX15VecZ),a
  17++B730 C9                   ret
  18++B731
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B731
  31+ B731                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B731              CopyXX15toRotMatNoseV:
   2++B731                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B731 3A 83 C0    >                        ld       a,(XX15VecX)
   2++B734 32 22 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B737                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B737 3A 84 C0    >                        ld       a,(XX15VecY)
   3++B73A 32 24 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B73D                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B73D 3A 85 C0    >                        ld       a,(XX15VecZ)
   4++B740 32 26 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B743 C9                   ret
   6++B744
   7++B744              CopyXX15toRotMatRoofV:
   8++B744                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B744 3A 83 C0    >                        ld       a,(XX15VecX)
   8++B747 32 1C C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B74A                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B74A 3A 84 C0    >                        ld       a,(XX15VecY)
   9++B74D 32 1E C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B750                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B750 3A 85 C0    >                        ld       a,(XX15VecZ)
  10++B753 32 20 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B756 C9                   ret
  12++B757
  13++B757              CopyXX15toRotMatSideV:
  14++B757                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B757 3A 83 C0    >                        ld       a,(XX15VecX)
  14++B75A 32 16 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B75D                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B75D 3A 84 C0    >                        ld       a,(XX15VecY)
  15++B760 32 18 C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B763                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B763 3A 85 C0    >                        ld       a,(XX15VecZ)
  16++B766 32 1A C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B769 C9                   ret
  18++B76A
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B76A
  33+ B76A              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B76A              		; b = regX on entry
  35+ B76A              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B76A 08           		ex		af,af'
  37+ B76B 78           		ld		a,b
  38+ B76C 32 BD 9D     		ld		(varQ),a
  39+ B76F 08           		ex		af,af'
  40+ B770 EE 80        		xor		$80							;	 flip sign of Acc
  41+ B772 CD F2 AD     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B775              ; USES 				A BC E
  43+ B775              ; DOES NOT USE		D HL
  44+ B775              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B775 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B776 E6 80        		and		SignOnly8Bit						; ..
  47+ B778 5F           		ld		e,a							; ..
  48+ B779 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B77A E6 7F        		and		SignMask8Bit							; ..
  50+ B77C 06 FE        		ld		b,$FE						; slide counter T1
  51+ B77E              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B77E CB 27        		sla		a
  53+ B780              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B780 FE 60       >                        cp      $60
  53+ B782 DA 8F B7    >                        jp		c, TIS1SkipSub
  54+ B785 DE 60        		sbc		a,$60							; subtract 96
  55+ B787 37           		scf
  56+ B788 CB 10        		rl		b							;  T1
  57+ B78A 38 F2        		jr		c,TIS1RollTLoop
  58+ B78C              TIS1KIPCont:
  59+ B78C 78           		ld		a,b							;   T1
  60+ B78D B3           		or		e							;   restore T sign
  61+ B78E C9           		ret
  62+ B78F              TIS1SkipSub:
  63+ B78F B7           	or			a
  64+ B790 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B792 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B794 C3 8C B7     	jp			TIS1KIPCont
  67+ B797
  68+ B797              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B797              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B797
  71+ B797
  72+ B797
  73+ B797
  74+ B797              TidyRotYSmall:
  75+ B797 CD C2 B8     		call	CalcRoofvZ
  76+ B79A 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B79D C3 D3 B7     		jp		NormaliseRoofV
  78+ B7A0
  79+ B7A0              TidyRotXSmall:
  80+ B7A0 AF           		xor		a
  81+ B7A1 47           		ld		b,a
  82+ B7A2 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B7A5 E6 60        		and		%01100000
  84+ B7A7 CA 97 B7     		jp		z,TidyRotYSmall
  85+ B7AA 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B7AD 47           		ld		b,a							; b = regX for now
  87+ B7AE 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B7B1 CD 88 B8     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B7B4 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B7B7 C3 D3 B7     		jp		NormaliseRoofV
  91+ B7BA              ; TIDY is broken
  92+ B7BA              TIDY:
  93+ B7BA DD 01                break
  94+ B7BC              ORTHOGALISE:
  95+ B7BC              ;-- NormaliseNosev
  96+ B7BC CD F8 B6     		call	CopyRotMatNoseVtoXX15
  97+ B7BF CD 9F B2     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B7C2 CD 31 B7     		call	CopyXX15toRotMatNoseV
  99+ B7C5              .CheckNXSmall:
 100+ B7C5 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B7C8 E6 60        		and		%01100000					; check top two magnitude bits
 102+ B7CA CA A0 B7     		jp		z,TidyRotXSmall
 103+ B7CD              .RotXIsBig:
 104+ B7CD CD 4E B8             call	CalcRoofvX
 105+ B7D0 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B7D3              NormaliseRoofV:
 107+ B7D3 CD 0B B7     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B7D6 CD 9F B2     		call	normaliseXX1596fast			; normalise roof
 109+ B7D9              ;calc sidev x
 110+ B7D9 CD 44 B7     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B7DC 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B7DF 32 BD 9D     		ld		(varQ),a					; q = nosev_y
 113+ B7E2 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B7E5 CD EA B6     		call	RSequQmulA
 115+ B7E8 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B7EB 47           		ld		b,a							; b = regX for now
 117+ B7EC 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B7EF CD 6A B7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B7F2                      JumpIfAIsZero NormSideXNoNeg
 119+ B7F2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B7F3 CA F8 B7    >                        jp	    z, NormSideXNoNeg
 120+ B7F6 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B7F8              NormSideXNoNeg:
 122+ B7F8 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B7FB              ;calc sidev y
 124+ B7FB 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B7FE 32 BD 9D     		ld		(varQ),a
 126+ B801 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B804 CD EA B6     		call	RSequQmulA
 128+ B807 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B80A 47           		ld		b,a							; b = regX for now
 130+ B80B 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B80E CD 6A B7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B811                      JumpIfAIsZero NormSideYNoNeg
 132+ B811 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B812 CA 17 B8    >                        jp	    z, NormSideYNoNeg
 133+ B815 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B817              NormSideYNoNeg:
 135+ B817 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B81A              ;calc sidev z
 137+ B81A 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B81D 32 BD 9D     		ld		(varQ),a
 139+ B820 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B823 CD EA B6     		call	RSequQmulA
 141+ B826 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B829 47           		ld		b,a							; b = regX for now
 143+ B82A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B82D CD 6A B7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B830                      JumpIfAIsZero NormSideZNoNeg
 145+ B830 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B831 CA 36 B8    >                        jp	    z, NormSideZNoNeg
 146+ B834 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B836              NormSideZNoNeg:
 148+ B836 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B839              .ClearLoBytes:
 150+ B839 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ B83C 06 09        		ld		b,9
 152+ B83E AF                   xor     a
 153+ B83F              .ClearLoLoop:
 154+ B83F 77           		ld		(hl),a						; zero out lo bytes
 155+ B840 23           		inc		hl
 156+ B841 23           		inc		hl
 157+ B842 10 FB        		djnz	.ClearLoLoop
 158+ B844 CD 1E B7     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B847 CD 9F B2     		call	normaliseXX1596fast			; normalise roof
 160+ B84A              ;calc sidev x
 161+ B84A CD 57 B7     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B84D
 163+ B84D C9           		ret
 164+ B84E
 165+ B84E
 166+ B84E
 167+ B84E              ;;;;;;;;.CheckNYSmall:
 168+ B84E              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B84E              ;;;;;;;;		and		$7F
 170+ B84E              ;;;;;;;;		cp		0
 171+ B84E              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B84E              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B84E              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B84E              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B84E              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B84E              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B84E              ;;;;;;;;.DoNZ:
 178+ B84E              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B84E              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B84E              ;;;;;;;;NormaliseRoofv:
 181+ B84E              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B84E              ;;;;;;;;		push	bc
 183+ B84E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B84E              ;;;;;;;;		pop		bc
 185+ B84E              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B84E              ;;;;;;;;ProcessSidev:
 187+ B84E              ;;;;;;;;; -- SIDEV X
 188+ B84E              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B84E              ;;;;;;;;		push	bc
 191+ B84E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B84E              ;;;;;;;;		pop		bc
 193+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B84E              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B84E              ;;;;;;;;		push	bc
 197+ B84E              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B84E              ;;;;;;;;		pop		bc
 199+ B84E              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B84E              ;;;;;;;;; -- SIDEV Y
 201+ B84E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B84E              ;;;;;;;;		push	bc
 204+ B84E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B84E              ;;;;;;;;		pop		bc
 206+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B84E              ;;;;;;;;		ld		b,a
 208+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B84E              ;;;;;;;;		push	bc
 210+ B84E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B84E              ;;;;;;;;		pop		bc
 212+ B84E              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B84E              ;;;;;;;;		push	bc
 215+ B84E              ;;;;;;;;; -- SIDEV Z
 216+ B84E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B84E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B84E              ;;;;;;;;		pop		bc
 220+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B84E              ;;;;;;;;		ld		b,a
 222+ B84E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B84E              ;;;;;;;;		push	bc
 224+ B84E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B84E              ;;;;;;;;		pop		bc
 226+ B84E              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B84E              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B84E              ;;;;;;;;		ld		hl,sidev_z
 229+ B84E              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B84E              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B84E              ;;;;;;;;NormaliseSideV:
 232+ B84E              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B84E              ;;;;;;;;		push	bc
 234+ B84E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B84E              ;;;;;;;;		pop		bc
 236+ B84E              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B84E              ;;;;;;;;
 238+ B84E
 239+ B84E
 240+ B84E              CalcRoofvX:
 241+ B84E              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B84E              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B84E 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B851 32 BD 9D    >                        ld       (varQ),a
 243+ B854 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B857 CD EA B6     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B85A              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B85A 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B85D 32 BD 9D    >                        ld       (varQ),a
 246+ B860 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B863 CD F2 AD     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B866 7A           		ld		a,d
 249+ B867 E6 80        		and 	$80
 250+ B869 FD 67        		ld		iyh,a
 251+ B86B              ;DEBUG		ld		c,a
 252+ B86B 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B86E 4F           		ld		c,a								; temp save
 254+ B86F E6 80        		and		$80
 255+ B871 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B873 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B875 79           		ld		a,c								; recover a
 258+ B876 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B878 42           		ld		b,d
 260+ B879 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B87A 57           		ld		d,a								; de = nosev x hi
 262+ B87B 1E 00        		ld		e,0
 263+ B87D CD 11 B1     		call	BC_Div_DE
 264+ B880 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B882 EE 80        		xor		$80								; flip sign
 266+ B884 E6 80        		and		$80								; keep sign bit only
 267+ B886 B0           		or		b
 268+ B887 C9           		ret
 269+ B888
 270+ B888
 271+ B888              CalcRoofvY:
 272+ B888              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B888              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B888 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B88B 32 BD 9D    >                        ld       (varQ),a
 274+ B88E 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B891 CD EA B6     		call	RSequQmulA
 276+ B894              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B894 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B897 32 BD 9D    >                        ld       (varQ),a
 277+ B89A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B89D CD F2 AD     		call	madXAequQmulAaddRS
 279+ B8A0 7A           		ld		a,d
 280+ B8A1 E6 80        		and 	$80
 281+ B8A3 FD 67        		ld		iyh,a
 282+ B8A5 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B8A8 4F           		ld		c,a								; temp save
 284+ B8A9 E6 80        		and		$80
 285+ B8AB FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B8AD FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B8AF 79           		ld		a,c								; recover a
 288+ B8B0 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B8B2 42           		ld		b,d
 290+ B8B3 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B8B4 57           		ld		d,a								; de = nosev x hi
 292+ B8B5 1E 00        		ld		e,0
 293+ B8B7 CD 11 B1     		call	BC_Div_DE
 294+ B8BA FD 7C        		ld		a,iyh
 295+ B8BC EE 80        		xor		$80
 296+ B8BE E6 80        		and		$80
 297+ B8C0 B0           		or		b
 298+ B8C1 C9           		ret
 299+ B8C2
 300+ B8C2              CalcRoofvZ:
 301+ B8C2              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B8C2              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B8C2 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B8C5 32 BD 9D    >                        ld       (varQ),a
 303+ B8C8 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B8CB CD EA B6     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B8CE              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B8CE 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B8D1 32 BD 9D    >                        ld       (varQ),a
 306+ B8D4 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B8D7 CD F2 AD     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B8DA 7A           		ld		a,d
 309+ B8DB E6 80        		and 	$80
 310+ B8DD FD 67        		ld		iyh,a
 311+ B8DF 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B8E2 4F           		ld		c,a								; temp save
 313+ B8E3 E6 80        		and		$80
 314+ B8E5 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B8E7 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B8E9 79           		ld		a,c								; recover a
 317+ B8EA E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B8EC 42           		ld		b,d
 319+ B8ED 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B8EE 57           		ld		d,a								; de = nosev x hi
 321+ B8EF 1E 00        		ld		e,0
 322+ B8F1 CD 11 B1     		call	BC_Div_DE
 323+ B8F4 FD 7C        		ld		a,iyh
 324+ B8F6 EE 80        		xor		$80
 325+ B8F8 E6 80        		and		$80
 326+ B8FA B0           		or		b
 327+ B8FB C9           		ret
 328+ B8FC
 329+ B8FC
 330+ B8FC
 331+ B8FC              ;;ProcessSidev:
 332+ B8FC              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B8FC              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B8FC              ;;		push	bc
 335+ B8FC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B8FC              ;;		pop		bc
 337+ B8FC              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B8FC              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B8FC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B8FC              ;;		push	bc
 341+ B8FC              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B8FC              ;;		pop		bc
 343+ B8FC              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B8FC              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B8FC              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B8FC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B8FC              ;;		push	bc
 348+ B8FC              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B8FC              ;;		pop		bc
 350+ B8FC              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B8FC              ;;		ld		b,a
 352+ B8FC              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B8FC              ;;		push	bc
 354+ B8FC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B8FC              ;;		pop		bc
 356+ B8FC              ;;		xor		$80							; a *= -1
 357+ B8FC              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B8FC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B8FC              ;;		push	bc
 360+ B8FC              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B8FC              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B8FC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B8FC              ;;		pop		bc
 364+ B8FC              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B8FC              ;;		ld		b,a
 366+ B8FC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B8FC              ;;		push	bc
 368+ B8FC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B8FC              ;;		pop		bc
 370+ B8FC              ;;		xor		$80
 371+ B8FC              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B8FC              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B8FC              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B8FC              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B8FC              ;;		ld		hl,UBnkrotmatNosevX
 376+ B8FC
 377+ B8FC
 378+ B8FC
 379+ B8FC
 380+ B8FC
 381+ B8FC
 382+ B8FC              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B8FC              ;;;;;;;;.ProcessRoofv:
 384+ B8FC              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B8FC              ;;;;;;;;		push	bc
 386+ B8FC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B8FC              ;;;;;;;;		pop		bc
 388+ B8FC              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B8FC              ;;;;;;;;.ProcessSidev:
 390+ B8FC              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B8FC              ;;;;;;;;		push	bc
 392+ B8FC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B8FC              ;;;;;;;;		pop		bc
 394+ B8FC              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B8FC
# file closed: ./Maths/Utilities/tidy.asm
1263  B8FC                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B8FC
   2+ B8FC              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B8FC BA          >                        cp     d
   2+ B8FD D2 1B B9    >                        jp		nc,.Ll28Exit255
   3+ B900 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B902 CB 27        .LL31:                  sla     a
   5+ B904 38 0D                                jr      c,.LL29
   6+ B906                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B906 BA          >                        cp      d
   6+ B907 DA 0C B9    >                        jp		c, .SkipSub
   7+ B90A 92                                   sub     d
   8+ B90B                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B90B B7          >                        or a
   9+ B90C 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B90D CB 13                                rl      e
  11+ B90F 38 F1                                jr      c,.LL31
  12+ B911 7B                                   ld      a,e
  13+ B912 C9                                   ret
  14+ B913 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B914 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B915 CB 13                                rl      e                           ; rotate counter e left
  17+ B917 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B919 7B                                   ld      a,e                         ; stick result in a
  19+ B91A C9                                   ret
  20+ B91B 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B91D C9                                   ret
  22+ B91E
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1264  B91E                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B91E              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B91E              TIS1:
   3+ B91E 08           		ex		af,af'
   4+ B91F 3A A7 9C     		ld		a,(regX)
   5+ B922 47           		ld		b,a
   6+ B923 08           		ex		af,af'
   7+ B924              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ B924 08           		ex		af,af'
   9+ B925 78           		ld		a,b
  10+ B926 32 BD 9D     		ld		(varQ),a
  11+ B929 08           		ex		af,af'
  12+ B92A EE 80        		xor		$80							;	 flip sign of Acc
  13+ B92C CD F2 AD     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ B92F              ; USES 				A BC E
  15+ B92F              ; DOES NOT USE		D HL
  16+ B92F              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ B92F 47           		ld		b,a
  18+ B930 E6 80        		and		$80							;	hi sign
  19+ B932 5F           		ld		e,a							;   e = varT
  20+ B933 78           		ld		a,b
  21+ B934 E6 7F        		and		$7F							;	hi A7
  22+ B936 06 FE        		ld		b,$FE						;   slide counter
  23+ B938 48           		ld		c,b							;   c == T1 ::  T1
  24+ B939              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ B939 CB 27        		sla		a
  26+ B93B FE 60        		cp		$60							; max 96
  27+ B93D 30 02        		jr		nc,.DV4
  28+ B93F DE 60        		sbc		a,$60							;  SBC #&60
  29+ B941              .DV4:										; skip subtraction
  30+ B941 CB 11        		rl		c							;  T1
  31+ B943 38 F4        		jr		c,.DVL3
  32+ B945 79           		ld		a,c							;   T1
  33+ B946 B3           		or		e							;   restore T sign
  34+ B947 C9           		ret
  35+ B948
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1265  B948              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1266  B948              ;INCLUDE "XHiYLoequPA-gc3.asm"
1267  B948              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1268  B948              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1269  B948              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1270  B948                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1271  B948
1272  B948                  INCLUDE "./Tactics.asm"
# file opened: ./Tactics.asm
   1+ B948              ;Ship Tactics
   2+ B948              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
   3+ B948
   4+ B948
   5+ B948              ; set angry if possible, if its an innocent then flag the space station to get angry
   6+ B948 3A 23 C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
   7+ B94B                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
   7+ B94B 3A 22 C3    >                        ld  a,(ShipTypeAddr)
   7+ B94E FE 02       >                        cp  ShipTypeStation
   7+ B950 CA 73 B9    >                        jp  z,.SetNewbAngry
   8+ B953 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
   9+ B955 C4 79 B9                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  10+ B958 3A 37 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  11+ B95B                                      ReturnIfAIsZero                                 ; if 0 then no AI attached
  11+ B95B A7          >                        and     a
  11+ B95C C8          >                        ret     z
  12+ B95D F6 80                                or      ShipAIEnabled                           ; set AI Enabled set to ensure its set
  13+ B95F 32 37 C0                             ld      (UBnkaiatkecm),a                        ; .
  14+ B962 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  15+ B963                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  15+ B963 3E 02       >                        ld      a,2
  15+ B965 32 32 C0    >                        ld      (UBnKAccel),a
  16+ B968 CB 27                                sla     a                                       ; set pitch to 4
  17+ B96A 32 34 C0                             ld      (UBnKRotZCounter),a                     ; .
  18+ B96D 3A 24 C3                             ld      a,(ShipAIFlagsAddr)
  19+ B970                                      ReturnIfBitMaskClear ShipCanAnger
  19+ B970 E6 01       >                        and     ShipCanAnger
  19+ B972 C8          >                        ret     z
  20+ B973 CD 2E CA     .SetNewbAngry:          call    SetShipHostile
  21+ B976 C9                                   ret
  22+ B977
  23+ B977 C9           MissileDidHitUs:        ret ; TODO
  24+ B978
  25+ B978 C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  26+ B979
  27+ B979 CD C6 A2     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  28+ B97C D8                                   ret     c
  29+ B97D 3A 2C C0                             ld      a,(UbnKShipBankNbr)                     ; save current bank
  30+ B980 FD 67                                ld      iyh,a
  31+ B982                                      MMUSelectUniverseN 0                            ; space station is always 0
  31+ B982 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  32+ B986 CD 2E CA                             call    SetShipHostile
  33+ B989 FD 7C                                ld      a,iyh                                   ; get prev bank back
  34+ B98B                                      MMUSelectUniverseA                              ;
  34+ B98B C6 46       >                     add    a,BankUNIVDATA0
  34+ B98D ED 92 56    >                     nextreg UniverseMMU,       a
  35+ B990 C9                                   ret
  36+ B991
  37+ B991              CheckMissileBlastInit:  ZeroA
  37+ B991 AF          >                        xor a
  38+ B992 32 8C 9E                             ld      (CurrentMissileCheck),a
  39+ B995 21 0C C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  40+ B998 01 0C 00                             ld      bc,12                           ; and Damage stats
  41+ B99B 11 5A 9E                             ld      de,MissileXPos
  42+ B99E ED B0                                ldir
  43+ B9A0                                      ZeroA                                   ; we have processd enque request
  43+ B9A0 AF          >                        xor a
  44+ B9A1 32 2F C0                             ld      (UBnKMissleHitToProcess),a      ;
  45+ B9A4 CD 61 BA                             call    CheckIfBlastHitUs               ; If we are in Range
  46+ B9A7 DC 77 B9                             call    c, MissileDidHitUs              ; Then we get hit
  47+ B9AA C9                                   ret
  48+ B9AB
  49+ B9AB              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  50+ B9AB ~                                    ld      a,(MissilePos)                      ; check X Coord
  51+ B9AB ~                                    ld      hl,(ShipSign)
  52+ B9AB ~                                    xor     (hl)
  53+ B9AB ~                                    and     SignOnly8Bit
  54+ B9AB ~                                    ld      hl,(ShipPos)
  55+ B9AB ~                                    ld      de,(MissilePos)
  56+ B9AB ~                                    jr      z,.SignsDiffernt
  57+ B9AB ~            .XSame:                 and     a
  58+ B9AB ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
  59+ B9AB ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
  60+ B9AB ~                                    NegHL
  61+ B9AB ~                                    jp      .CheckDiff
  62+ B9AB ~            .SignsDiffernt:         add     hl,de
  63+ B9AB ~                                    ReturnIfNegative                            ; if we overflowed then return
  64+ B9AB ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  65+ B9AB ~                                    ReturnIfANotZero
  66+ B9AB ~                                    ld      a,l
  67+ B9AB ~                                    and     a
  68+ B9AB ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
  69+ B9AB                                      ENDM
  70+ B9AB              ;...................................................................
  71+ B9AB              ; We only do one test per loop for spreading the load of work
  72+ B9AB 3A 8C 9E     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
  73+ B9AE                                      ReturnIfAGTENusng   UniverseSlotListSize
  73+ B9AE FE 0C       >                        cp    UniverseSlotListSize
  73+ B9B0 D0          >                        ret	 nc
  74+ B9B1 FD 6F                                ld      iyl,a
  75+ B9B3 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
  76+ B9B4 32 8C 9E                             ld      (CurrentMissileCheck),a
  77+ B9B7                                      ReturnIfSlotAEmpty
  77+ B9B7 21 8E 9E    >                        ld      hl,UniverseSlotList
  77+ B9BA ED 31       >                        add     hl,a
  77+ B9BC 7E          >                        ld      a,(hl)
  77+ B9BD 3C          >                        inc     a
  77+ B9BE C8          >                        ret     z           ; if slot was ff inc would make it 0
  77+ B9BF 3D          >                        dec     a           ; get original value back for later
  78+ B9C0 CD C6 A2                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
  79+ B9C3 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
  80+ B9C4 3A 35 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
  81+ B9C7 E6 20                                and     ShipExploding                       ;
  82+ B9C9                                      ReturnIfNotZero                             ;
  82+ B9C9 C0          >                        ret     nz
  83+ B9CA 3A 7B 9E                             ld      a,(CurrentMissileBlastRange)
  84+ B9CD FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
  85+ B9CF FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
  86+ B9D1                                      MMUSelectUniverseA
  86+ B9D1 C6 46       >                     add    a,BankUNIVDATA0
  86+ B9D3 ED 92 56    >                     nextreg UniverseMMU,       a
  87+ B9D6                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
  87+ B9D6 3A 5A 9E    >                        ld      a,(MissileXPos)                      ; check X Coord
  87+ B9D9 2A 0E C0    >                        ld      hl,(UBnKxsgn)
  87+ B9DC AE          >                        xor     (hl)
  87+ B9DD E6 80       >                        and     SignOnly8Bit
  87+ B9DF 2A 0C C0    >                        ld      hl,(UBnKxlo)
  87+ B9E2 ED 5B 5A 9E >                        ld      de,(MissileXPos)
  87+ B9E6 28 0F       >                        jr      z,.SignsDiffernt
  87+ B9E8 A7          >.XSame:                 and     a
  87+ B9E9 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  87+ B9EB             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  87+ B9EB F2 F9 B9    >                        jp		p, .CheckDiff
  87+ B9EE             >                        NegHL
  87+ B9EE AF          >                    xor a
  87+ B9EF 95          >                    sub l
  87+ B9F0 6F          >                    ld l,a
  87+ B9F1 9F          >                    sbc a,a
  87+ B9F2 94          >                    sub h
  87+ B9F3 67          >                    ld h,a
  87+ B9F4 C3 F9 B9    >                        jp      .CheckDiff
  87+ B9F7 19          >.SignsDiffernt:         add     hl,de
  87+ B9F8             >                        ReturnIfNegative                            ; if we overflowed then return
  87+ B9F8 F8          >                        ret     m
  87+ B9F9 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  87+ B9FA             >                        ReturnIfANotZero
  87+ B9FA A7          >                        and     a
  87+ B9FB C0          >                        ret     nz
  87+ B9FC 7D          >                        ld      a,l
  87+ B9FD A7          >                        and     a
  87+ B9FE             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  87+ B9FE 21 7B 9E    >                        ld      hl,CurrentMissileBlastRange
  87+ BA01 BE          >                        cp      (hl)
  87+ BA02 D0          >                        ret	    nc
  88+ BA03                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
  88+ BA03 3A 5D 9E    >                        ld      a,(MissileYPos)                      ; check X Coord
  88+ BA06 2A 11 C0    >                        ld      hl,(UBnKysgn)
  88+ BA09 AE          >                        xor     (hl)
  88+ BA0A E6 80       >                        and     SignOnly8Bit
  88+ BA0C 2A 0F C0    >                        ld      hl,(UBnKylo)
  88+ BA0F ED 5B 5D 9E >                        ld      de,(MissileYPos)
  88+ BA13 28 0F       >                        jr      z,.SignsDiffernt
  88+ BA15 A7          >.XSame:                 and     a
  88+ BA16 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  88+ BA18             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  88+ BA18 F2 26 BA    >                        jp		p, .CheckDiff
  88+ BA1B             >                        NegHL
  88+ BA1B AF          >                    xor a
  88+ BA1C 95          >                    sub l
  88+ BA1D 6F          >                    ld l,a
  88+ BA1E 9F          >                    sbc a,a
  88+ BA1F 94          >                    sub h
  88+ BA20 67          >                    ld h,a
  88+ BA21 C3 26 BA    >                        jp      .CheckDiff
  88+ BA24 19          >.SignsDiffernt:         add     hl,de
  88+ BA25             >                        ReturnIfNegative                            ; if we overflowed then return
  88+ BA25 F8          >                        ret     m
  88+ BA26 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  88+ BA27             >                        ReturnIfANotZero
  88+ BA27 A7          >                        and     a
  88+ BA28 C0          >                        ret     nz
  88+ BA29 7D          >                        ld      a,l
  88+ BA2A A7          >                        and     a
  88+ BA2B             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  88+ BA2B 21 7B 9E    >                        ld      hl,CurrentMissileBlastRange
  88+ BA2E BE          >                        cp      (hl)
  88+ BA2F D0          >                        ret	    nc
  89+ BA30                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
  89+ BA30 3A 60 9E    >                        ld      a,(MissileZPos)                      ; check X Coord
  89+ BA33 2A 14 C0    >                        ld      hl,(UBnKzsgn)
  89+ BA36 AE          >                        xor     (hl)
  89+ BA37 E6 80       >                        and     SignOnly8Bit
  89+ BA39 2A 12 C0    >                        ld      hl,(UBnKzlo)
  89+ BA3C ED 5B 60 9E >                        ld      de,(MissileZPos)
  89+ BA40 28 0F       >                        jr      z,.SignsDiffernt
  89+ BA42 A7          >.XSame:                 and     a
  89+ BA43 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  89+ BA45             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  89+ BA45 F2 53 BA    >                        jp		p, .CheckDiff
  89+ BA48             >                        NegHL
  89+ BA48 AF          >                    xor a
  89+ BA49 95          >                    sub l
  89+ BA4A 6F          >                    ld l,a
  89+ BA4B 9F          >                    sbc a,a
  89+ BA4C 94          >                    sub h
  89+ BA4D 67          >                    ld h,a
  89+ BA4E C3 53 BA    >                        jp      .CheckDiff
  89+ BA51 19          >.SignsDiffernt:         add     hl,de
  89+ BA52             >                        ReturnIfNegative                            ; if we overflowed then return
  89+ BA52 F8          >                        ret     m
  89+ BA53 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  89+ BA54             >                        ReturnIfANotZero
  89+ BA54 A7          >                        and     a
  89+ BA55 C0          >                        ret     nz
  89+ BA56 7D          >                        ld      a,l
  89+ BA57 A7          >                        and     a
  89+ BA58             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  89+ BA58 21 7B 9E    >                        ld      hl,CurrentMissileBlastRange
  89+ BA5B BE          >                        cp      (hl)
  89+ BA5C D0          >                        ret	    nc
  90+ BA5D CD 6C CA                             call    ShipMissileBlast                    ; Ship hit by missile blast
  91+ BA60 C9                                   ret                                         ; we are done
  92+ BA61              ;...................................................................
  93+ BA61 3A 27 C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
  94+ BA64 4F                                   ld      c,a
  95+ BA65 C3 6C BA                             jp      MissileHitUsCheckPos
  96+ BA68              ;...................................................................
  97+ BA68 3A 29 C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
  98+ BA6B 4F                                   ld      c,a
  99+ BA6C              ;...................................................................
 100+ BA6C 2A 0C C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 101+ BA6F                                      ZeroA
 101+ BA6F AF          >                        xor a
 102+ BA70 B4                                   or      h
 103+ BA71                                      ClearCarryFlag
 103+ BA71 B7          >                        or a
 104+ BA72                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 104+ BA72 C0          >                        ret     nz
 105+ BA73 7D                                   ld      a,l
 106+ BA74                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 106+ BA74 B9          >                        cp    c
 106+ BA75 D0          >                        ret	 nc
 107+ BA76 2A 0F C0     .CheckY:                ld      hl,(UBnKylo)
 108+ BA79                                      ZeroA
 108+ BA79 AF          >                        xor a
 109+ BA7A B5                                   or      l
 110+ BA7B                                      ClearCarryFlag
 110+ BA7B B7          >                        or a
 111+ BA7C                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 111+ BA7C C0          >                        ret     nz
 112+ BA7D 7D                                   ld      a,l
 113+ BA7E                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 113+ BA7E B9          >                        cp    c
 113+ BA7F D0          >                        ret	 nc
 114+ BA80 2A 12 C0     .CheckZ:                ld      hl,(UBnKzlo)
 115+ BA83                                      ZeroA
 115+ BA83 AF          >                        xor a
 116+ BA84 B5                                   or      l
 117+ BA85                                      ClearCarryFlag
 117+ BA85 B7          >                        or a
 118+ BA86                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 118+ BA86 C0          >                        ret     nz
 119+ BA87 7D                                   ld      a,l
 120+ BA88                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 120+ BA88 B9          >                        cp    c
 120+ BA89 D0          >                        ret	 nc
 121+ BA8A              .ItsAHit:               SetCarryFlag
 121+ BA8A 37          >                        scf
 121+ BA8B                                              ; So must have hit
 122+ BA8B C9                                   ret
 123+ BA8C
 124+ BA8C              ;...................................................................
 125+ BA8C              ;... Now the tactics if current ship is the missile
 126+ BA8C              MissileLogic:           JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 126+ BA8C 3A 2F C0    >                        ld      a,(UBnKMissleHitToProcess)
 126+ BA8F A7          >                        and     a
 126+ BA90 CA E9 BA    >                        jp      z, .ProcessMissileHit
 127+ BA93              .CheckForECM:           JumpIfMemTrue ECMActive,.ECMIsActive
 127+ BA93 3A CE 9C    >                        ld      a,(ECMActive)
 127+ BA96 A7          >                        and     a
 127+ BA97 CA F2 BA    >                        jp      z, .ECMIsActive
 128+ BA9A 3A 23 C3     .IsMissileHostile:      ld      a,(ShipNewBitsAddr)                 ; is missle attacking us?
 129+ BA9D E6 04                                and     ShipIsHostile
 130+ BA9F                                      JumpIfNotZero .MissileTargetingShip
 130+ BA9F C2 B6 BA    >                        jp	nz,.MissileTargetingShip
 131+ BAA2 2A 0C C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 132+ BAA5 3A 29 C0                             ld      a,(UBnKMissileDetonateRange)
 133+ BAA8 4F                                   ld      c,a                                 ; c holds detonation range
 134+ BAA9 CD 6C BA                             call    MissileHitUsCheckPos
 135+ BAAC D2 B5 BA     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 136+ BAAF CD 78 B9     .MissleHitUs:           call    PlayerHitByMissile
 137+ BAB2 C3 F2 BA                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 138+ BAB5 C9           .UpdateTargetingUsPos:  ret                         //TODO
 139+ BAB6 3A 30 C0     .MissileTargetingShip:  ld      a,(UBnKMissileTarget)
 140+ BAB9              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 140+ BAB9 21 8E 9E    >                        ld      hl,UniverseSlotList
 140+ BABC ED 31       >                        add     hl,a
 140+ BABE 7E          >                        ld      a,(hl)
 140+ BABF 3C          >                        inc     a
 140+ BAC0 CA F2 BA    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 140+ BAC3 3D          >                        dec     a           ; get original value back for later
 141+ BAC4              ;... Note we don't have to check for impact as we already have a loop doing that
 142+ BAC4 FD 6F        .SelectTargetShip:      ld      iyl,a
 143+ BAC6                                      MMUSelectUniverseA
 143+ BAC6 C6 46       >                     add    a,BankUNIVDATA0
 143+ BAC8 ED 92 56    >                     nextreg UniverseMMU,       a
 144+ BACB 3A 37 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)
 145+ BACE E6 20                                and     ShipExploding
 146+ BAD0 20 0A                                jr      nz,.UpdateTargetingShipPos
 147+ BAD2 FD 7D        .ShipIsExploding:       ld      a,iyl                               ; get missile back into memory
 148+ BAD4                                      MMUSelectUniverseA
 148+ BAD4 C6 46       >                     add    a,BankUNIVDATA0
 148+ BAD6 ED 92 56    >                     nextreg UniverseMMU,       a
 149+ BAD9 C3 F2 BA                             jp      .ECMIsActive
 150+ BADC 21 0C C0     .UpdateTargetingShipPos:ld      hl,UBnKxlo                          ; get missile target pos top temp while
 151+ BADF 11 63 9E                             ld      de,CurrentTargetXpos
 152+ BAE2 01 09 00                             ld      bc,3*3
 153+ BAE5 ED B0                                ldir
 154+ BAE7 FD 7D                                ld a,iyl
 155+ BAE9              .CalculateMissileVector:;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 156+ BAE9              ;;TODO                        check range
 157+ BAE9              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 158+ BAE9              ;;TODO                        else
 159+ BAE9              ;;TODO                            normalise teh vector for direction
 160+ BAE9              ;;TODO                            dot product = missile nosev . normalised vector
 161+ BAE9              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 162+ BAE9              ;;TODO                            negate normalised vector so its opposite product
 163+ BAE9              ;;TODO                            invert sign of cnt
 164+ BAE9              ;;TODO                            AK = roovf . XX15
 165+ BAE9              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 166+ BAE9              ;;TODO                            if pitch * 2 < 32 then
 167+ BAE9              ;;TODO                                ax = sidev . xx15
 168+ BAE9              ;;TODO                                    a = x xort current pitch direction
 169+ BAE9              ;;TODO                                    shipts roll = nroll
 170+ BAE9              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 171+ BAE9
 172+ BAE9              ;;TODO
 173+ BAE9              ;;TODO
 174+ BAE9              ;;TODO
 175+ BAE9              ;;TODOget the targetted ship inbto bank
 176+ BAE9              ;;TODO                        check range as per player
 177+ BAE9              ;;TODO                        handle explosion enc
 178+ BAE9
 179+ BAE9              ;                    else see how close it is to target
 180+ BAE9              ;                         if close to target
 181+ BAE9              ;                            then explodes destroy missile
 182+ BAE9              ;                                 if ship is not station
 183+ BAE9              ;                                    then set up signal target ship hit my missile flag
 184+ BAE9              ;                                         set blastcheckcounter to slotlist length  (12)
 185+ BAE9              ;                                 end if
 186+ BAE9              ;                                 if we are in range of missle blast
 187+ BAE9              ;                                    cause blast damage to our ship (this will signal death is needed)
 188+ BAE9              ;                                 end if
 189+ BAE9              ;                                 return
 190+ BAE9              ;                         end if
 191+ BAE9              ;                 end if
 192+ BAE9              ;         end if
 193+ BAE9 3A 8C 9E     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 194+ BAEC                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 194+ BAEC FE 0C       >                        cp    UniverseSlotListSize
 194+ BAEE D0          >                        ret	 nc
 195+ BAEF C3 91 B9     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 196+ BAF2                                      ; DUMMY RET get a free return by using jp
 197+ BAF2 CD 7D CA     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 198+ BAF5                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 198+ BAF5 AF          >                        xor     a
 198+ BAF6 32 2F C0    >                        ld      (UBnKMissleHitToProcess),a
 199+ BAF9 C3 E9 BA                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 200+ BAFC                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 201+ BAFC
 202+ BAFC
 203+ BAFC
 204+ BAFC                          ;            else if ship is angry at us
 205+ BAFC              ;
 206+ BAFC
 207+ BAFC              ; Part 1 - if type is missile and enquing a missile blast and slot free
 208+ BAFC              ;             then enqueue missile blast details
 209+ BAFC              ;                  mark as exploded
 210+ BAFC              ;                  remove missile from universe slot list
 211+ BAFC
 212+ BAFC              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 213+ BAFC              ; also for future ship vs ship combat
 214+ BAFC              ;... Tactics........................................................................
 215+ BAFC              ;.PART 1
 216+ BAFC              ; if shiphitbymissleflag <> false
 217+ BAFC              ;    then dec blast check counter
 218+ BAFC              ;         if blast check counter = 0
 219+ BAFC              ;            then set shiphitbymissileflag to FF
 220+ BAFC              ;    else if SetShipHitByMissileFlag = current ship number
 221+ BAFC              ;            then cause damage to ship
 222+ BAFC              ;         else if ship is in range and ship is not a station
 223+ BAFC              ;                  then cause blast damage to ship
 224+ BAFC              ;         if destroyed
 225+ BAFC              ;            then explode ship
 226+ BAFC              ;                 return
 227+ BAFC              ; end if
 228+ BAFC              ; if ship is a missle (I think we allow missile on missle action)
 229+ BAFC              ;    then if ecm is active
 230+ BAFC              ;            then destroy missile and return
 231+ BAFC              ;            else if ship is angry at us
 232+ BAFC              ;                    then if ship is close to us
 233+ BAFC              ;                            then explodes causing damage to our ship
 234+ BAFC              ;                                 enque missile blast
 235+ BAFC              ;                                 destroy missile
 236+ BAFC              ;                                 set blastcheckcounter to slotlist length
 237+ BAFC              ;                                 set shiphitbymissileflag to FE (general blast)
 238+ BAFC              ;                                 return
 239+ BAFC              ;                            else jump to part 3 to do updates
 240+ BAFC              ;                         end if
 241+ BAFC              ;                    else see how close it is to target
 242+ BAFC              ;                         if close to target
 243+ BAFC              ;                            then
 244+ BAFC              ;                                 enque missile blast
 245+ BAFC              ;                                 destroy missile
 246+ BAFC              ;                                 if ship is not station
 247+ BAFC              ;                                    then set up signal target ship hit my missile flag
 248+ BAFC              ;                                         set blastcheckcounter to slotlist length  (12)
 249+ BAFC              ;                                 end if
 250+ BAFC              ;                                 if we are in range of missle blast
 251+ BAFC              ;                                    cause blast damage to our ship (this will signal death is needed)
 252+ BAFC              ;                                 end if
 253+ BAFC              ;                                 return
 254+ BAFC              ;                         end if
 255+ BAFC              ;                 end if
 256+ BAFC              ;         end if
 257+ BAFC              ;.PART 2A ** adding in a collision logic
 258+ BAFC              ;    else if ship is close to another ship
 259+ BAFC              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 260+ BAFC              ;                    then if aligned correctly
 261+ BAFC              ;                         then remove ship as docked
 262+ BAFC              ;                              return
 263+ BAFC              ;         else
 264+ BAFC              ;            call collision route and determine daamage based on sizes and bounce vectors
 265+ BAFC              ;            return
 266+ BAFC              ;.PART 2 ** Need to check if ship has AI flag
 267+ BAFC              ;    else if not hostile
 268+ BAFC              ;            then if not docking or station not present
 269+ BAFC              ;                    then calculate vector to planet
 270+ BAFC              ;                         jump to part 7
 271+ BAFC              ;                    else calculate verctor to docking slot
 272+ BAFC              ;                         call caluclate vector to docking slot (DOCKIT)
 273+ BAFC              ;                         jump to part 7
 274+ BAFC              ;                 end if
 275+ BAFC              ;            else case ship type
 276+ BAFC              ;                      >>escape pod>> point at planet and jump to step 7
 277+ BAFC              ;                      >>space station>> if hostile
 278+ BAFC              ;                                           then if cop counter < 7 and 6.2% chance
 279+ BAFC              ;                                                   then spawm hostile cop
 280+ BAFC              ;                                                end if
 281+ BAFC              ;                                           else
 282+ BAFC              ;                                                if 0.8% change and transporter count = 0
 283+ BAFC              ;                                                   then if 50% chance
 284+ BAFC              ;                                                           then spawn transporter
 285+ BAFC              ;                                                           else spawn shuttle
 286+ BAFC              ;                                                        end if
 287+ BAFC              ;                                                end if
 288+ BAFC              ;                                        end if
 289+ BAFC              ;                                        return
 290+ BAFC              ;                      >>targoid and no mother ship in slot list>> set random drift
 291+ BAFC              ;                                                                  return
 292+ BAFC              ;                      >>if bounty hunter flag>> if ship not hostile
 293+ BAFC              ;                                                   then if trader flag clear or 20% chance
 294+ BAFC              ;                                                        then if fugitive or offender
 295+ BAFC              ;                                                                then set hosile
 296+ BAFC              ;                                                end if
 297+ BAFC              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 298+ BAFC              ;                                         then spawn agressive hosting one of types carried
 299+ BAFC              ;                                              reduce ships in hanger by 1
 300+ BAFC              ;                                              return
 301+ BAFC              ;                      >>rock hermit>> if 22% chance
 302+ BAFC              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 303+ BAFC              ;                                              return
 304+ BAFC              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 305+ BAFC              ;                 end case
 306+ BAFC              ;         end if
 307+ BAFC              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 308+ BAFC              ; .PART 3
 309+ BAFC              ;         calulcate dot product of ship nose to us
 310+ BAFC              ; .PART 4
 311+ BAFC              ;         2.5% change ship rill roll a noticable amount
 312+ BAFC              ;         if ship has > 50% energy jump to part 6
 313+ BAFC              ;         if ship > 1/8th energy jump to part 5
 314+ BAFC              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 315+ BAFC              ;            then launch escape pod
 316+ BAFC              ;                 set AI to null
 317+ BAFC              ;                 set random pitch and roll
 318+ BAFC              ;                 set accelleation to 0
 319+ BAFC              ;         end if
 320+ BAFC              ; .PART 5
 321+ BAFC              ;         if ship does not have any missilesor ECM is firing to part 6
 322+ BAFC              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 323+ BAFC              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 324+ BAFC              ;                            then launch thargon
 325+ BAFC              ;                            else spawn angry missle under ship
 326+ BAFC              ;                         end if
 327+ BAFC              ;                 end if
 328+ BAFC              ;            else return
 329+ BAFC              ;         end if
 330+ BAFC              ; .PART 6
 331+ BAFC              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 332+ BAFC              ;            then jump to part 7
 333+ BAFC              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 334+ BAFC              ;                    then fire laser at us (which reduces energy)
 335+ BAFC              ;                         cause laser damage to our ship (this will signal death is needed)
 336+ BAFC              ;                         decellerate by half as ship has lock on
 337+ BAFC              ;                         return
 338+ BAFC              ;                    else fire laser into space (which reduces energy)
 339+ BAFC              ;                 end if
 340+ BAFC              ;         end if
 341+ BAFC              ; .PART 7#
 342+ BAFC              ;        if ship is a msile targetting us
 343+ BAFC              ;           then ship turns towards us some more
 344+ BAFC              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 345+ BAFC              ;                    then do random wiht bit 7 set
 346+ BAFC              ;                         if random < AI flag
 347+ BAFC              ;                            then   ship turned towards us
 348+ BAFC              ;                            else   ship turns away from us
 349+ BAFC              ;                         end if
 350+ BAFC              ;                end if
 351+ BAFC              ;           end if
 352+ BAFC              ;           calculate new roll, pitch and accelleration based on new targe vector
 353+ BAFC
 354+ BAFC
 355+ BAFC              ;        determine ship direction based on agression and type
 356+ BAFC              ;        set pitch and roll coutners
 357+ BAFC              ;        adjust speed depleding on relationship to us
 358+ BAFC              ; .PART 8 - new
 359+ BAFC              ;        if ship has ECM, another ECM is not active and missile targeted at it
 360+ BAFC              ;           if ship has enery of ECM energey cost + 1/8th total
 361+ BAFC              ;              if chance 25%
 362+ BAFC              ;                 then fire ECM
 363+ BAFC              ;
# file closed: ./Tactics.asm
1273  BAFC                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ BAFC              M_GETSETDRV             equ $89
   2+ BAFC              F_OPEN                  equ $9a
   3+ BAFC              F_CLOSE                 equ $9b
   4+ BAFC              F_READ                  equ $9d
   5+ BAFC              F_WRITE                 equ $9e
   6+ BAFC              F_SEEK                  equ $9f
   7+ BAFC
   8+ BAFC              FA_READ                 equ $01
   9+ BAFC              FA_APPEND               equ $06
  10+ BAFC              FA_OVERWRITE            equ $0C
  11+ BAFC
  12+ BAFC              ; Success 1 = default drive, carry reset
  13+ BAFC              ; Failure HL = -1 , carry set, errno set
  14+ BAFC F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  14+ BB00 DD E5
  15+ BB02 AF                                   xor	    a	; a = 0 means get default drive into A
  16+ BB03 CF                                   rst	    $08
  17+ BB04 89                                   db	    $89
  18+ BB05 32 0F BB                             ld	    (DefaultDrive),a
  19+ BB08 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  19+ BB0C C1 F1
  20+ BB0E C9                                   ret
  21+ BB0F 00           DefaultDrive:	        db	0
  22+ BB10
  23+ BB10              ; *******************************************************************************************************
  24+ BB10              ;	Function:	Open a file read for reading/writing
  25+ BB10              ;	In:		ix = filename
  26+ BB10              ;			b  = Open filemode
  27+ BB10              ;	ret		a  = handle, 0 on error
  28+ BB10              ; *******************************************************************************************************
  29+ BB10 E5           fOpen:	                push	hl
  30+ BB11 DD E5 E1                             ld      hl,ix
  31+ BB14 3A 0F BB                             ld	    a,(DefaultDrive)
  32+ BB17 CF                                   rst	    $08
  33+ BB18 9A                                   db	    F_OPEN
  34+ BB19 E1                                   pop	    hl
  35+ BB1A C9                                   ret
  36+ BB1B
  37+ BB1B              ; *******************************************************************************************************
  38+ BB1B              ;	Function	Read bytes from the open file
  39+ BB1B              ;	In:		ix  = address to read into
  40+ BB1B              ;			bc  = amount to read
  41+ BB1B              ;	ret:		carry set = error
  42+ BB1B              ; *******************************************************************************************************
  43+ BB1B B7           fRead:                  or   	a             ; is it zero?
  44+ BB1C C8                                   ret  	z             ; if so return
  45+ BB1D E5                                   push    hl
  46+ BB1E DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
  47+ BB21 CF                                   rst	    $08
  48+ BB22 9D                                   db	    F_READ
  49+ BB23 E1                                   pop	    hl
  50+ BB24 C9                                   ret
  51+ BB25
  52+ BB25              ; *******************************************************************************************************
  53+ BB25              ;	Function	Read bytes from the open file
  54+ BB25              ;	In:		ix  = address to read into
  55+ BB25              ;			bc  = amount to read
  56+ BB25              ;	ret:		carry set = error
  57+ BB25              ; *******************************************************************************************************
  58+ BB25 B7           fWrite:                 or   	a             ; is it zero?
  59+ BB26 C8                                   ret  	z             ; if so return
  60+ BB27 E5                                   push	hl
  61+ BB28 DD E5 E1                             ld      hl,ix
  62+ BB2B CF                                   rst	    $08
  63+ BB2C 9E                                   db	    F_WRITE
  64+ BB2D E1                                   pop	    hl
  65+ BB2E C9                                   ret
  66+ BB2F
  67+ BB2F              ; *******************************************************************************************************
  68+ BB2F              ;	Function:	Close open file
  69+ BB2F              ;	In:		a  = handle
  70+ BB2F              ;	ret		a  = handle, 0 on error
  71+ BB2F              ; *******************************************************************************************************
  72+ BB2F B7           fClose:		            or   	a             ; is it zero?
  73+ BB30 C8                                   ret  	z             ; if so return
  74+ BB31 CF                                   rst	    $08
  75+ BB32 9B                                   db	    F_CLOSE
  76+ BB33 C9                                   ret
  77+ BB34
  78+ BB34              ; *******************************************************************************************************
  79+ BB34              ;	Function	Read bytes from the open file
  80+ BB34              ;	In:		a   = file handle
  81+ BB34              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  82+ BB34              ;			BCDE = bytes to seek
  83+ BB34              ;	ret:		BCDE = file pos from start
  84+ BB34              ; *******************************************************************************************************
  85+ BB34 DD E5 E5     fSeek:                  push	ix,,hl
  86+ BB37 CF                                   rst	    $08
  87+ BB38 9F                                   db	    F_SEEK
  88+ BB39 E1 DD E1                             pop	    ix,,hl
  89+ BB3C C9                                   ret
  90+ BB3D
  91+ BB3D              ; *******************************************************************************************************
  92+ BB3D              ; Init the file system
  93+ BB3D              ; *******************************************************************************************************
  94+ BB3D CD FC BA     InitFileSystem:         call    GetDefaultDrive
  95+ BB40 C9                                   ret
  96+ BB41
  97+ BB41              ; *******************************************************************************************************
  98+ BB41              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  99+ BB41              ; In:		hl = file data pointer
 100+ BB41              ;		    ix = address to load to
 101+ BB41              ;           bc = filelength
 102+ BB41              ; *******************************************************************************************************
 103+ BB41 CD FC BA     FileLoad:	            call    GetDefaultDrive
 104+ BB44 C5 D5 F5                             push	bc,,de,,af
 105+ BB47                                      ; get file size
 106+ BB47 C5 DD E5                             push	bc,,ix			; store size, load address,
 107+ BB4A E5 DD E1                             ld      ix,hl
 108+ BB4D 06 01                                ld      b,FA_READ		; mode open for reading
 109+ BB4F CD 10 BB                             call    fOpen
 110+ BB52 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 111+ BB54 FE 00                                cp	    0				; was file handle 0?
 112+ BB56 28 13                                jr	    z,.error_opening; of so there was an error opening.
 113+ BB58 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 114+ BB5B F5                                   push	af				; remember handle
 115+ BB5C CD 1B BB                             call	fRead			; read data from A to address IX of length BC
 116+ BB5F 38 0C                                jr	    c,.error_reading
 117+ BB61 F1                                   pop	    af			    ; get handle back
 118+ BB62 CD 2F BB                             call	fClose			; close file
 119+ BB65 38 07                                jr	    c,.error_closing
 120+ BB67 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 121+ BB6A C9                                   ret
 122+ BB6B              ;
 123+ BB6B              ; On error, display error code an lock up so we can see it
 124+ BB6B              ;
 125+ BB6B DD E1        .error_opening:         pop	ix
 126+ BB6D C1           .error_reading:		    pop	bc	; don't pop a, need error code
 127+ BB6E
 128+ BB6E              .error_closing:
 129+ BB6E C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 130+ BB6F D1                                   pop	de
 131+ BB70 C1                                   pop	bc
 132+ BB71 C9                                   ret
 133+ BB72
 134+ BB72              ; *******************************************************************************************************
 135+ BB72              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 136+ BB72              ; In:		hl = file name
 137+ BB72              ;		    ix = address to save from
 138+ BB72              ;		    bc = size
 139+ BB72              ; *******************************************************************************************************
 140+ BB72 CD FC BA     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 141+ BB75 C5 DD E5                             push	bc,,ix   			; store size& save address
 142+ BB78 E5 DD E1                             ld      ix,hl               ; get name into ix
 143+ BB7B 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 144+ BB7D CD 10 BB                             call    fOpen
 145+ BB80 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 146+ BB82 FE 00                                cp	    0			        ; was file handle 0?
 147+ BB84 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 148+ BB86 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 149+ BB89 F5                                   push	af			        ; remember handle
 150+ BB8A CD 25 BB                             call	fWrite			    ; read data from A to address IX of length BC
 151+ BB8D 38 04                                jr	c,.error
 152+ BB8F F1                                   pop	af			            ; get handle back
 153+ BB90 CD 2F BB                             call	fClose			    ; close file
 154+ BB93 C9           .error:                 ret
 155+ BB94              ;
 156+ BB94              ; On error, display error code an lock up so we can see it
 157+ BB94              ;
 158+ BB94 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 159+ BB97 C9                                   ret
 160+ BB98
# file closed: ./Hardware/drive_access.asm
1274  BB98
1275  BB98                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ BB98 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ BB9C 41 4E 44 45
   1+ BBA0 52 00
   2+ BBA2 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ BBA6 4E 54 4F 52
   2+ BBAA 59 00
   3+ BBAC 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ BBB0 65 6E 74 20
   3+ BBB4 53 79 73 74
   3+ BBB8 65 6D 20 20
   3+ BBBC 20 3A 00
   4+ BBBF 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ BBC3 72 73 70 61
   4+ BBC7 63 65 20 53
   4+ BBCB 79 73 74 65
   4+ BBCF 6D 3A 00
   5+ BBD2 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ BBD6 69 74 69 6F
   5+ BBDA 6E 20 20 20
   5+ BBDE 3A 00
   6+ BBE0 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ BBE4 20 20 20 20
   6+ BBE8 20 20 20 20
   6+ BBEC 3A 00
   7+ BBEE 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ BBF2 20 20 20 20
   7+ BBF6 20 20 20 20
   7+ BBFA 3A 00
   8+ BBFC 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ BC00 6C 20 53 74
   8+ BC04 61 74 75 73
   8+ BC08 3A 00
   9+ BC0A 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ BC0E 6E 67 20 20
   9+ BC12 20 20 20 20
   9+ BC16 3A 00
  10+ BC18 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ BC1C 50 4D 45 4E
  10+ BC20 54 3A 00
  11+ BC23
  12+ BC23 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ BC27 20 4C 69 67
  12+ BC2B 68 74 20 59
  12+ BC2F 65 61 72 73
  12+ BC33 00
  13+ BC34 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ BC38 58 58 58 58
  13+ BC3C 58 58 00
  14+ BC3F 2E           txt_cash_decimal        DB "."
  15+ BC40 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ BC44 00
  16+ BC45
  17+ BC45              txt_status_colour		equ $FF
  18+ BC45
  19+ BC45              print_boiler_text_l2:
  20+ BC45              ; ">print_boilder_text hl = text structure, b = message count"
  21+ BC45              BoilerTextLoop:
  22+ BC45 C5           	push		bc			; Save Message Count loop value
  23+ BC46 4E           	ld			c,(hl)		; Get Row into b
  24+ BC47 23           	inc			hl
  25+ BC48 46           	ld			b,(hl)		; Get Col into b
  26+ BC49 23           	inc			hl
  27+ BC4A 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ BC4B 23           	inc			hl
  29+ BC4C 56           	ld			d,(hl)		; Get text address Hi into E
  30+ BC4D 23           	inc			hl
  31+ BC4E E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ BC4F EB           	ex			de,hl		; now hl = address of text data
  33+ BC50 1E FF        	ld			e,txt_status_colour
  34+ BC52                  MMUSelectLayer2
  34+ BC52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ BC56 CD C8 E0     	call		l1_print_at
  36+ BC59 E1           	pop			hl
  37+ BC5A C1           	pop			bc
  38+ BC5B 10 E8        	djnz		BoilerTextLoop
  39+ BC5D C9           	ret
  40+ BC5E
  41+ BC5E
  42+ BC5E              print_boiler_text:
  43+ BC5E              ; ">print_boilder_text hl = text structure, b = message count"
  44+ BC5E              .BoilerTextLoop:
  45+ BC5E C5           	push		bc			; Save Message Count loop value
  46+ BC5F 4E           	ld			c,(hl)		; Get Row into b
  47+ BC60 23           	inc			hl
  48+ BC61 46           	ld			b,(hl)		; Get Col into b
  49+ BC62 23           	inc			hl
  50+ BC63 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ BC64 23           	inc			hl
  52+ BC65 56           	ld			d,(hl)		; Get text address Hi into E
  53+ BC66 23           	inc			hl
  54+ BC67 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ BC68 EB           	ex			de,hl		; now hl = address of text data
  56+ BC69 1E FF        	ld			e,txt_status_colour
  57+ BC6B C5           	push		bc
  58+ BC6C D1           	pop			de
  59+ BC6D CD C8 E0     	call		l1_print_at
  60+ BC70 E1           	pop			hl
  61+ BC71 C1           	pop			bc
  62+ BC72 10 EA        	djnz		.BoilerTextLoop
  63+ BC74 C9           	ret
  64+ BC75
  65+ BC75              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++BC75
   2++BC75
   3++BC75 3A FE A2     	ld		a,(Fuel)
   4++BC78 11 23 BC     	ld		de,txt_fuel_level
   5++BC7B 0E 9C        	ld	c, -100
   6++BC7D CD 87 BC     	call	.Num1
   7++BC80 0E F6        	ld	c,-10
   8++BC82 CD 87 BC     	call	.Num1
   9++BC85 0E FF        	ld	c,-1
  10++BC87              .Num1:
  11++BC87 06 2F        	ld	b,'0'-1
  12++BC89              .Num2:
  13++BC89 04           	inc		b
  14++BC8A 81           	add		a,c
  15++BC8B 38 FC        	jr		c,.Num2
  16++BC8D 91           	sub 	c
  17++BC8E C5           	push	bc
  18++BC8F F5           	push	af
  19++BC90 79           	ld		a,c
  20++BC91 FE FF        	cp		-1
  21++BC93 CC 9C BC     	call	z,.InsertDot
  22++BC96 78           	ld		a,b
  23++BC97 12           	ld		(de),a
  24++BC98 13           	inc		de
  25++BC99 F1           	pop		af
  26++BC9A C1           	pop		bc
  27++BC9B C9           	ret
  28++BC9C              .InsertDot:
  29++BC9C 3E 2E        	ld		a,'.'
  30++BC9E 12           	ld		(de),a
  31++BC9F 13           	inc		de
  32++BCA0 C9           	ret
  33++BCA1
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ BCA1
  67+ BCA1 2A FA A2     GetCash:                ld      hl,(Cash)
  68+ BCA4 EB                                   ex      de,hl
  69+ BCA5 DD 2A FC A2                          ld      ix,(Cash+2)
  70+ BCA9 FD 21 34 BC                          ld		iy,txt_cash_amount
  71+ BCAD CD 31 B4                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ BCB0 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ BCB3 32 40 BC                             ld		(txt_cash_fraction),a
  74+ BCB6 21 35 BC     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ BCB9 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ BCBA FE 00                                cp		0
  77+ BCBC C8                                   ret		z
  78+ BCBD FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ BCC1 C9                                   ret
  80+ BCC2
# file closed: ./Menus/common_menu.asm
1276  BCC2              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1277  BCC2              ;INCLUDE "./title_page.asm"
1278  BCC2
1279  BCC2              ; Blocks dependent on variables in Universe Banks
1280  BCC2              ; Bank 49
1281  BCC2              ;    SEG RESETUNIVSEG
1282  BCC2              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1283  BCC2              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1284  BCC2
1285  BCC2              ;	ORG ResetUniverseAddr
1286  BCC2              ;INCLUDE "./GameEngine/resetUniverse.asm"
1287  BCC2              ; Bank 50
1288  BCC2
1289  BCC2
1290  BCC2
1291  BCC2                  SLOT    MenuShrChtAddr
1292  BCC2                  PAGE    BankMenuShrCht
1293  BCC2              	ORG     MenuShrChtAddr,BankMenuShrCht
1294  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 CF AA  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B C5 9E                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A FE A2                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 80 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B C7 9E                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B C5 9E                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A B2 9E     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B C7 9E                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 95 AB                             ld		hl,name_expanded
  65+ C127 CD F0 AA                             call	CapitaliseString
  66+ C12A 21 95 AB                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B C7 9E                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B C5 9E                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 8A E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A B2 9E     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B C7 9E                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD F9 E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD F9 E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A B2 9E     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B C5 9E                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B C7 9E                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 4E 9E                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 31 B4                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 55 B2                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 55 B2                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 55 B2                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 97 A3     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A B2 9E                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 95 AB                             ld		hl,name_expanded
 258+ C2C2 CD F0 AA                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 95 AB                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 95 AB                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD F9 E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 83 9D                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 97 A3     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A B2 9E     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 95 AB     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD F0 AA                             call	CapitaliseString
 333+ C34C 21 95 AB     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD F9 E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 C2 9D                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 86 99                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A B2 9E                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 A9 9D                             ld      de,SystemSeed
 359+ C388 CD 6A A3                             call    copy_seed
 360+ C38B 3A AA 9D                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A C6 9E     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A AC 9D     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A C5 9E                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A AA 9D     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 C6 9E                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A AC 9D                             ld		a,(SystemSeed+3)
 390+ C3C5 21 C5 9E                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A AE 9D                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD C4 E9                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A C2 9D                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 C2 9D                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 09 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD F3 E0    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD A4 E4    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 C8 9D                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A C5 9E    >                        ld      hl,(PresentSystemX)
 420+ C421 22 C7 9E    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD 20 E2                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD 8A E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD 10 AB                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 64 A3     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A A9 9E     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D FE 00                                cp      0
 443+ C45F C8                                   ret     z
 444+ C460 17                                   rla
 445+ C461 DC 79 C4                             call   c,src_UpPressed
 446+ C464 17                                   rla
 447+ C465 DC 96 C4                             call   c,src_DownPressed
 448+ C468 17                                   rla
 449+ C469 DC B5 C4                             call   c,src_LeftPressed
 450+ C46C 17                                   rla
 451+ C46D DC D2 C4                             call   c,src_RightPressed
 452+ C470 17                                   rla
 453+ C471 DC F1 C4                             call   c,src_HomePressed
 454+ C474 17                                   rla
 455+ C475 DC FB C4                             call   c,src_RecenterPressed
 456+ C478 C9                                   ret
 457+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 458+ C479 3A C8 9E     src_UpPressed:          ld     a,(TargetSystemY)
 459+ C47C                                      JumpIfAIsZero   src_BoundsLimit
 459+ C47C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 459+ C47D CA 10 C5    >                        jp	    z, src_BoundsLimit
 460+ C480 47                                   ld      b,a                         ; save target as we will need it
 461+ C481 3A C6 9E                             ld      a,(PresentSystemY)
 462+ C484 90                                   sub     b                           ; get the difference between present and target
 463+ C485 FA 8D C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 464+ C488                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 464+ C488 FE 28       >                        cp     40
 464+ C48A D2 10 C5    >                        jp		nc,src_BoundsLimit
 465+ C48D 78           .SkipBoundsTest:        ld      a,b
 466+ C48E 3D                                   dec     a
 467+ C48F 32 C8 9E                             ld      (TargetSystemY),a
 468+ C492 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 469+ C495 C9                                   ret
 470+ C496              ;----------------------------------------------------------------------------------------------------------------------------------
 471+ C496 3A C6 9E     src_DownPressed:        ld     a,(PresentSystemY)
 472+ C499 47                                   ld      b,a
 473+ C49A 3A C8 9E                             ld      a,(TargetSystemY)
 474+ C49D 4F                                   ld      c,a
 475+ C49E                                      JumpIfAEqNusng 128,src_BoundsLimit
 475+ C49E FE 80       >                        cp     128
 475+ C4A0 CA 10 C5    >                        jp      z,src_BoundsLimit
 476+ C4A3 90                                   sub     b
 477+ C4A4 FA AC C4                             jp      m,.SkipBoundsTest
 478+ C4A7                                      JumpIfAGTENusng 40,src_BoundsLimit
 478+ C4A7 FE 28       >                        cp     40
 478+ C4A9 D2 10 C5    >                        jp		nc,src_BoundsLimit
 479+ C4AC 79           .SkipBoundsTest:        ld      a,c
 480+ C4AD 3C                                   inc    a
 481+ C4AE 32 C8 9E                             ld      (TargetSystemY),a
 482+ C4B1 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 483+ C4B4 C9                                   ret
 484+ C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
 485+ C4B5 3A C7 9E     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 486+ C4B8                                      JumpIfAIsZero   src_BoundsLimit
 486+ C4B8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 486+ C4B9 CA 10 C5    >                        jp	    z, src_BoundsLimit
 487+ C4BC 47                                   ld      b,a                         ; save target as we will need it
 488+ C4BD 3A C5 9E                             ld      a,(PresentSystemX)
 489+ C4C0 90                                   sub     b                           ; get the difference between present and target
 490+ C4C1 FA C9 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 491+ C4C4                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 491+ C4C4 FE 14       >                        cp     20
 491+ C4C6 D2 10 C5    >                        jp		nc,src_BoundsLimit
 492+ C4C9 78           .SkipBoundsTest:        ld      a,b
 493+ C4CA 3D                                   dec     a
 494+ C4CB 32 C7 9E                             ld      (TargetSystemX),a
 495+ C4CE CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 496+ C4D1 C9                                   ret
 497+ C4D2              ;----------------------------------------------------------------------------------------------------------------------------------
 498+ C4D2 3A C5 9E     src_RightPressed:       ld      a,(PresentSystemX)
 499+ C4D5 47                                   ld      b,a
 500+ C4D6 3A C7 9E                             ld      a,(TargetSystemX)
 501+ C4D9 4F                                   ld      c,a
 502+ C4DA                                      JumpIfAEqNusng 255,src_BoundsLimit
 502+ C4DA FE FF       >                        cp     255
 502+ C4DC CA 10 C5    >                        jp      z,src_BoundsLimit
 503+ C4DF 90                                   sub     b
 504+ C4E0 FA E8 C4                             jp      m,.SkipBoundsTest
 505+ C4E3                                      JumpIfAGTENusng 20,src_BoundsLimit
 505+ C4E3 FE 14       >                        cp     20
 505+ C4E5 D2 10 C5    >                        jp		nc,src_BoundsLimit
 506+ C4E8 79           .SkipBoundsTest:        ld      a,c
 507+ C4E9 3C                                   inc    a
 508+ C4EA 32 C7 9E                             ld      (TargetSystemX),a
 509+ C4ED CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 510+ C4F0 C9                                   ret
 511+ C4F1              ;----------------------------------------------------------------------------------------------------------------------------------
 512+ C4F1 2A C5 9E     src_HomePressed:        ld      hl,(PresentSystemX)
 513+ C4F4 22 C7 9E                             ld      (TargetSystemX),hl
 514+ C4F7 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 515+ C4FA C9                                   ret
 516+ C4FB              ;----------------------------------------------------------------------------------------------------------------------------------
 517+ C4FB 3A B2 9E     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 518+ C4FE                                      MMUSelectGalaxyA
 518+ C4FE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 519+ C501 ED 4B C7 9E                          ld      bc,(TargetSystemX)
 520+ C505 CD 70 FB                             call    find_nearest_to_bc
 521+ C508 ED 43 C7 9E                          ld      (TargetSystemX),bc
 522+ C50C CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 523+ C50F C9                                   ret
 524+ C510              ;----------------------------------------------------------------------------------------------------------------------------------
 525+ C510 AF           src_BoundsLimit:        xor     a
 526+ C511 C9                                   ret
 527+ C512
# file closed: ./Menus/short_range_chart_menu.asm
1295  C512              ; Bank 51
1296  C512
1297  C512                  SLOT    MenuGalChtAddr
1298  C512                  PAGE    BankMenuGalCht
1299  C512              	ORG     MenuGalChtAddr
1300  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 CF AA  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B C5 9E  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A FE A2     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD 80 E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B C7 9E  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 C2 9D                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A B2 9E     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 A9 9D                             ld      de,SystemSeed
  68+ C0F5 CD 6A A3                             call    copy_seed
  69+ C0F8 3A AC 9D                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A AA 9D                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD 29 E1                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A AD 9D                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD 29 E1                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A C2 9D                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 C2 9D                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 09 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD F3 E0    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD A4 E4    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 C8 9D                                 ld      (MenuIdMax),a
 105+ C16D 2A C5 9E                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4C C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD 20 E2                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD 8A E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD 10 AB                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A B2 9E                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 126+ C1A7 ED 4B C7 9E                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A C5 9E    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 C7 9E    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B C7 9E                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A B2 9E     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A4 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 A8 9E    >                        ld      (TextInputMode),a
 140+ C1D8              ;IFDEF DOUBLEBUFFER
 141+ C1D8              ;    MMUSelectLayer2
 142+ C1D8              ;    call  l2_flip_buffers
 143+ C1D8              ;ENDIF
 144+ C1D8 C9                                       ret
 145+ C1D9
 146+ C1D9              gcDelayVal                  equ $0A
 147+ C1D9              gcBlinkVal                  equ $10
 148+ C1D9
 149+ C1D9
 150+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 151+ C1DA 20           gcCursorChar                DB  " "
 152+ C1DB 00           gcEndOfString               DB  0
 153+ C1DC 00 00 00...  gcInputText                 DS  31
 154+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 154+ C1FF 00
 155+ C200 00 00 00...  gcBlank                     DS  32
 156+ C220
 157+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 159+ C223 21 3C C0                             ld      hl,galactic_find_message
 160+ C226                                      MMUSelectLayer1
 160+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 161+ C22A CD C8 E0                             call	l1_print_at
 162+ C22D C9                                   ret
 163+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 164+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 165+ C231 CD 50 9B                             call    keyboard_copy_input_to_de
 166+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 167+ C237 ED A0                                ldi                             ; Copy cursor to local
 168+ C239 3A 4D 9B                             ld      a,(InputCursor)
 169+ C23C 3C                                   inc     a
 170+ C23D 47                                   ld      b,a
 171+ C23E 3E 14                                ld      a,20
 172+ C240 90                                   sub     b
 173+ C241 47                                   ld      b,a
 174+ C242 3E 20                                ld      a," "
 175+ C244 12           .SpacePad:              ld      (de),a
 176+ C245 13                                   inc     de
 177+ C246 10 FC                                djnz    .SpacePad
 178+ C248 AF                                   xor     a
 179+ C249 12                                   ld      (de),a
 180+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 181+ C24D 21 DC C1                             ld      hl,gcInputText
 182+ C250                                      MMUSelectLayer1
 182+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C254 CD C8 E0                             call	l1_print_at
 184+ C257 C9                                   ret
 185+ C258
 186+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 187+ C25B 3D                                   dec     a
 188+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 189+ C25F C0                                   ret     nz
 190+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 191+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 192+ C265 3A DA C1                             ld      a,(gcCursorChar)
 193+ C268 FE 20                                cp      " "
 194+ C26A 28 06                                jr      z,.ChangeToStar
 195+ C26C 3E 20                                ld      a," "
 196+ C26E 32 DA C1                             ld      (gcCursorChar),a
 197+ C271 C9                                   ret
 198+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 199+ C274 32 DA C1                             ld      (gcCursorChar),a
 200+ C277 C9                                   ret
 201+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C278              ; The main loop handles the find key
 203+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 203+ C278 3A A8 9E    >                        ld      a,(TextInputMode)
 203+ C27B A7          >                        and     a
 203+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 204+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 205+ C281 CD EB 9A                             call    is_key_pressed
 206+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 207+ C285 CD 63 9B                             call    initInputText                           ;Initialise find input
 208+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 208+ C288 AF          >                        xor     a
 208+ C289 32 A8 9E    >                        ld      (TextInputMode),a
 209+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 209+ C28C 3E 10       >                        ld      a,gcBlinkVal
 209+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 210+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 211+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 212+ C295              ;Already in input mode post pressing find
 213+ C295 CD 7B 9B     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 214+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 214+ C298 3A 4F 9B    >                        ld      a,(InputChanged)
 214+ C29B A7          >                        and     a
 214+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 215+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 215+ C29F 3A 4E 9B    >                        ld      a,(EnterPressed)
 215+ C2A2 A7          >                        and     a
 215+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 216+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 217+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 218+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 218+ C2AC 3A D9 C1    >                        ld   a,(gcCursorBlink)
 218+ C2AF FE 10       >                        cp   gcBlinkVal
 218+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 219+ C2B4 C9                                   ret
 220+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 220+ C2B5 3E FF       >                        ld      a,$FF
 220+ C2B7 32 4E 9B    >                        ld      (EnterPressed),a
 221+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 221+ C2BA 3E FF       >                        ld      a,$FF
 221+ C2BC 32 A8 9E    >                        ld      (TextInputMode),a
 222+ C2BF 3A B2 9E                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 223+ C2C2                                      MMUSelectGalaxyA
 223+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 224+ C2C5 21 2E 9B                             ld      hl,InputString
 225+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 226+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 227+ C2CE CD 39 FB                             call    find_system_by_name
 228+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 229+ C2D3 28 1D                                jr      z,.FindNoMatch
 230+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 231+ C2D8 4F                                   ld      c,a
 232+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 233+ C2DC 47                                   ld      b,a
 234+ C2DD ED 43 C7 9E                          ld      (TargetSystemX),bc
 235+ C2E1 CD 85 C3                             call    UpdateGalacticCursor
 236+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 237+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 238+ C2EA                                      MMUSelectLayer1
 238+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 239+ C2EE CD C8 E0                             call	l1_print_at
 240+ C2F1 C9                                   ret
 241+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 242+ C2F2                                      ; move curor if found
 243+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 244+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 245+ C2F8                                      MMUSelectLayer1
 245+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 246+ C2FC CD C8 E0                             call	l1_print_at
 247+ C2FF C9                                   ret; DOSTUFFHERE
 248+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 249+ C300 3A A8 9E    >                        ld      a,(TextInputMode)
 249+ C303 A7          >                        and     a
 249+ C304 C8          >                        ret     z
 250+ C305 3A A9 9E                             ld      a,(CursorKeysPressed)
 251+ C308 FE 00                                cp      0
 252+ C30A C8                                   ret     z
 253+ C30B 17                                   rla
 254+ C30C DC 24 C3                             call   c,gc_UpPressed
 255+ C30F 17                                   rla
 256+ C310 DC 34 C3                             call   c,gc_DownPressed
 257+ C313 17                                   rla
 258+ C314 DC 44 C3                             call   c,gc_LeftPressed
 259+ C317 17                                   rla
 260+ C318 DC 54 C3                             call   c,gc_RightPressed
 261+ C31B 17                                   rla
 262+ C31C DC 64 C3                             call   c,gc_HomePressed
 263+ C31F 17                                   rla
 264+ C320 DC 6E C3                             call   c,gc_RecenterPressed
 265+ C323 C9                                   ret
 266+ C324              ;----------------------------------------------------------------------------------------------------------------------------------
 267+ C324 3A C8 9E     gc_UpPressed:           ld     a,(TargetSystemX+1)
 268+ C327                                      JumpIfAEqNusng 1,gc_BoundsLimit
 268+ C327 FE 01       >                        cp     1
 268+ C329 CA 83 C3    >                        jp      z,gc_BoundsLimit
 269+ C32C 3D                                   dec     a
 270+ C32D 32 C8 9E                             ld      (TargetSystemX+1),a
 271+ C330 CD 85 C3                             call    UpdateGalacticCursor
 272+ C333 C9                                   ret
 273+ C334              ;----------------------------------------------------------------------------------------------------------------------------------
 274+ C334 3A C8 9E     gc_DownPressed:         ld     a,(TargetSystemX+1)
 275+ C337                                      JumpIfAEqNusng 255,gc_BoundsLimit
 275+ C337 FE FF       >                        cp     255
 275+ C339 CA 83 C3    >                        jp      z,gc_BoundsLimit
 276+ C33C 3C                                   inc    a
 277+ C33D 32 C8 9E                             ld      (TargetSystemX+1),a
 278+ C340 CD 85 C3                             call    UpdateGalacticCursor
 279+ C343 C9                                   ret
 280+ C344              ;----------------------------------------------------------------------------------------------------------------------------------
 281+ C344 3A C7 9E     gc_LeftPressed:         ld     a,(TargetSystemX)
 282+ C347                                      JumpIfAEqNusng 2,gc_BoundsLimit
 282+ C347 FE 02       >                        cp     2
 282+ C349 CA 83 C3    >                        jp      z,gc_BoundsLimit
 283+ C34C 3D                                   dec    a
 284+ C34D 32 C7 9E                             ld      (TargetSystemX),a
 285+ C350 CD 85 C3                             call    UpdateGalacticCursor
 286+ C353 C9                                   ret
 287+ C354              ;----------------------------------------------------------------------------------------------------------------------------------
 288+ C354 3A C7 9E     gc_RightPressed:        ld     a,(TargetSystemX)
 289+ C357                                      JumpIfAEqNusng 253,gc_BoundsLimit
 289+ C357 FE FD       >                        cp     253
 289+ C359 CA 83 C3    >                        jp      z,gc_BoundsLimit
 290+ C35C 3C                                   inc    a
 291+ C35D 32 C7 9E                             ld      (TargetSystemX),a
 292+ C360 CD 85 C3                             call    UpdateGalacticCursor
 293+ C363 C9                                   ret
 294+ C364              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C364 2A C5 9E     gc_HomePressed:         ld      hl,(PresentSystemX)
 296+ C367 22 C7 9E                             ld      (TargetSystemX),hl
 297+ C36A CD 85 C3                             call    UpdateGalacticCursor
 298+ C36D C9                                   ret
 299+ C36E              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ C36E 3A B2 9E     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 301+ C371                                      MMUSelectGalaxyA
 301+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C374 ED 4B C7 9E                          ld      bc,(TargetSystemX)
 303+ C378 CD 70 FB                             call    find_nearest_to_bc
 304+ C37B ED 43 C7 9E                          ld      (TargetSystemX),bc
 305+ C37F CD 85 C3                             call    UpdateGalacticCursor
 306+ C382 C9                                   ret
 307+ C383              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ C383 AF           gc_BoundsLimit          xor     a
 309+ C384 C9                                   ret
 310+ C385
 311+ C385              ;----------------------------------------------------------------------------------------------------------------------------------
 312+ C385 ED 4B C7 9E  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 313+ C389              OnGalacticChart:        MMUSelectSpriteBank
 313+ C389 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C38D CD A9 E0                             call	sprite_ghc_move
 315+ C390 3A B2 9E                             ld      a,(Galaxy)
 316+ C393                                      MMUSelectGalaxyA
 316+ C393 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 317+ C396 ED 4B C7 9E                          ld      bc,(TargetSystemX)
 318+ C39A ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 319+ C39E CD 64 FC                             call    galaxy_system_under_cursor
 320+ C3A1 FE 00                                cp      0
 321+ C3A3 C8                                   ret     z
 322+ C3A4              ; just fall into gc_name_if_possible
 323+ C3A4 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 324+ C3A7 CD D2 C3                             call    gc_clear_name_area
 325+ C3AA 21 95 AB                             ld		hl,name_expanded
 326+ C3AD CD F0 AA                             call	CapitaliseString
 327+ C3B0 21 95 AB                             ld		hl, name_expanded
 328+ C3B3 01 0A A0                             ld      bc,$A00A
 329+ C3B6 1E FF                                ld		e,$FF
 330+ C3B8                                      MMUSelectLayer2
 330+ C3B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 331+ C3BC CD F9 E1                             call	l2_print_7at
 332+ C3BF CD EC C3                             call    gc_calc_distance
 333+ C3C2 21 14 C0                             ld      hl,galactic_chart_distance
 334+ C3C5 01 0A A8                             ld      bc,$A80A
 335+ C3C8 1E FF                                ld		e,$FF
 336+ C3CA                                      MMUSelectLayer2
 336+ C3CA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 337+ C3CE CD F9 E1                             call	l2_print_7at
 338+ C3D1 C9                                   ret
 339+ C3D2              ;----------------------------------------------------------------------------------------------------------------------------------
 340+ C3D2 26 08        gc_clear_name_area:     ld      h,8
 341+ C3D4 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 342+ C3D7 01 0A A0                             ld      bc,$A00A
 343+ C3DA E5           .ClearLoop:             push    hl
 344+ C3DB D5                                   push    de
 345+ C3DC C5                                   push    bc
 346+ C3DD                                      MMUSelectLayer2
 346+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C3E1 CD 8A E2                             call	l2_draw_horz_line
 348+ C3E4 C1                                   pop     bc
 349+ C3E5 D1                                   pop     de
 350+ C3E6 E1                                   pop     hl
 351+ C3E7 04                                   inc     b
 352+ C3E8 25                                   dec     h
 353+ C3E9 20 EF                                jr      nz,.ClearLoop
 354+ C3EB C9                                   ret
 355+ C3EC              ;----------------------------------------------------------------------------------------------------------------------------------
 356+ C3EC 3A B2 9E     gc_calc_distance:       ld      a,(Galaxy)
 357+ C3EF                                      MMUSelectGalaxyA
 357+ C3EF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 358+ C3F2 11 1E C0                             ld      de,galactic_chart_dist_amount
 359+ C3F5 21 30 C0                             ld      hl,galactic_default_dist
 360+ C3F8 ED A0                                ldi
 361+ C3FA ED A0                                ldi
 362+ C3FC ED A0                                ldi
 363+ C3FE ED A0                                ldi
 364+ C400 ED A0                                ldi
 365+ C402 ED 4B C5 9E                          ld      bc,(PresentSystemX)
 366+ C406 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 367+ C40A ED 4B C7 9E                          ld      bc,(TargetSystemX)
 368+ C40E ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 369+ C412 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 370+ C415 DD 2A 4E 9E                          ld      ix,(Distance)
 371+ C419 11 00 00                             ld      de,0
 372+ C41C FD 21 36 C0                          ld      iy,galactic_distance
 373+ C420 CD 31 B4                             call    DispDEIXtoIY
 374+ C423 FD E5                                push    iy
 375+ C425 E1                                   pop     hl
 376+ C426 11 36 C0                             ld      de,galactic_distance
 377+ C429 7E                                   ld		a,(hl)				;Push last digit to post decimal
 378+ C42A 32 22 C0                             ld		(galactic_chart_fraction),a
 379+ C42D 2B                                   dec     hl
 380+ C42E CD 55 B2                             call    compare16HLDE
 381+ C431 38 18                                jr      c,.done_number
 382+ C433 7E                                   ld      a,(hl)
 383+ C434 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 384+ C437 2B                                   dec     hl
 385+ C438 CD 55 B2                             call    compare16HLDE
 386+ C43B 38 0E                                jr      c,.done_number
 387+ C43D 7E                                   ld      a,(hl)
 388+ C43E 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 389+ C441 2B                                   dec     hl
 390+ C442 CD 55 B2                             call    compare16HLDE
 391+ C445 38 04                                jr      c,.done_number
 392+ C447 7E                                   ld      a,(hl)
 393+ C448 32 1E C0                             ld      (galactic_chart_dist_amount),a
 394+ C44B C9           .done_number:           ret
 395+ C44C              ;----------------------------------------------------------------------------------------------------------------------------------
 396+ C44C AF           gc_present_system:      xor     a
 397+ C44D 32 C2 9D                             ld		(XSAV),a
 398+ C450 DD 21 16 E0                          ld      ix,galaxy_data
 399+ C454 3A B2 9E     GCCounterLoop:          ld      a,(Galaxy)
 400+ C457                                      MMUSelectGalaxyA
 400+ C457 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 401+ C45A 2A C5 9E                             ld      hl,(PresentSystemX)
 402+ C45D DD E5                                push    ix
 403+ C45F 7D                                   ld      a,l
 404+ C460 DD BE 03                             cp      (ix+3)                          ; seed x
 405+ C463 20 14                                jr      nz,.ItsNotThisX
 406+ C465 7C                                   ld      a,h
 407+ C466 DD BE 01                             cp      (ix+1)                          ; seed x
 408+ C469 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 409+ C46B DD E5                                push    ix
 410+ C46D E1                                   pop     hl
 411+ C46E 11 B9 9E                             ld      de,PresentSystemSeeds
 412+ C471 CD 6A A3                             call    copy_seed
 413+ C474 3E FF                                ld      a,$FF
 414+ C476 DD E1                                pop     ix
 415+ C478 C9                                   ret
 416+ C479 E1           .ItsNotThisX:           pop     hl
 417+ C47A ED 34 08 00                          add     hl,8
 418+ C47E E5                                   push    hl
 419+ C47F DD E1                                pop     ix
 420+ C481 3A C2 9D                             ld		a,(XSAV)
 421+ C484 3D                                   dec		a
 422+ C485 32 C2 9D                             ld      (XSAV),a
 423+ C488 FE 00                                cp		0
 424+ C48A C8                                   ret		z
 425+ C48B 18 C7                                jr		GCCounterLoop
 426+ C48D
# file closed: ./Menus//galactic_chart_menu.asm
1301  C48D              ; Bank 52
1302  C48D
1303  C48D                  SLOT    MenuInventAddr
1304  C48D                  PAGE    BankMenuInvent
1305  C48D              	ORG     MenuInventAddr
1306  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A FE A2     	ld		a,(Fuel)
   4++C136 11 23 BC     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 01 A3                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 48 A6                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 73 A9                             ld		hl, WordIdx
 118+ C17A CD 48 A6                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 48 A6                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 73 A9                             ld		hl,WordIdx
 148+ C1C1 CD 48 A6                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A FC A2     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A FA A2                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 09 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD F3 E0    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD A4 E4    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 C8 9D                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD A4 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD 20 E2                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 8A E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 23 BC                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 99 E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 99 E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1307  C281
1308  C281              ; Bank 53
1309  C281
1310  C281                  SLOT    MenuSystemAddr
1311  C281                  PAGE    BankMenuSystem
1312  C281              	ORG     MenuSystemAddr
1313  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 CF AA  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 95 AB  						DW $0280,name_expanded
   5+ C018 08 0B FF A7  						DW $0B08,WordDistance
   6+ C01C 08 13 08 A8  						DW $1308,WordEconomy
   7+ C020 08 1B 10 A8  						DW $1B08,WordGovernment
   8+ C024 08 23 1B A8  						DW $2308,WordTechLevel
   9+ C028 08 2B 25 A8  						DW $2B08,WordPopulation
  10+ C02C 08 3B 40 A8  						DW $3B08,WordGross
  11+ C030 38 3B 46 A8  						DW $3B38,WordProductivity
  12+ C034 08 43 53 A8  						DW $4308,WordAverage
  13+ C038 48 43 5B A8  						DW $4348,WordRadius
  14+ C03C 60 0B CF AA  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 CF AA  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A B2 9E     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B C5 9E                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 09 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD F3 E0    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD A4 E4    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 C8 9D                             ld		(MenuIdMax),a
 134+ C316 3A B2 9E     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B C7 9E  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B C5 9E  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B C7 9E  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A C5 9E                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 B3 9E     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD 20 E2                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 8A E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 10 AB                             call	expandTokenToString
 170+ C37B 3A B2 9E     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 95 AB                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 95 AB                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 4E 9E  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 22 B4                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 10 AB                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 10 AB                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 02 AB                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 22 B4                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A B2 9E     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 31 B4                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A B2 9E     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 31 B4                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A B2 9E     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1314  C4F7
1315  C4F7              ; Bank 54
1316  C4F7
1317  C4F7                  SLOT    MenuMarketAddr
1318  C4F7                  PAGE    BankMenuMarket
1319  C4F7                  ORG     MenuMarketAddr
1320  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 CF AA  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 95 AB  						DW $0220,name_expanded
   4+ C018 80 0B EF A6  						DW $0B80,WordUnit
   5+ C01C B0 0B 38 A9  						DW $0BB0,WordQuantity
   6+ C020 08 13 16 A9  						DW $1308,WordProduct
   7+ C024 60 13 1E A9  						DW $1360,WordUoM
   8+ C028 80 13 22 A9  						DW $1380,WordPrice
   9+ C02C B0 13 46 A9  						DW $13B0,WordStock
  10+ C030 E0 13 42 A9  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A FC A2     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A FA A2                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 00 A3                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 01 A3                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 73 A9                             ld		hl,WordIdx
 273+ C2C5 CD 48 A6                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 73 A9                             ld		hl,WordIdx
 281+ C2DF CD 48 A6                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 09 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD F3 E0    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD A4 E4    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 C8 9D                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD 20 E2                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 8A E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 8A E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 8A E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 8A E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 8A E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 8A E2                             call	l2_draw_horz_line
 340+ C3AA 3A B2 9E     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 10 AB                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD EB 9A                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD EB 9A                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD EB 9A                             call    is_key_pressed
 384+ C40F CC 48 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD EB 9A                             call    is_key_pressed
 387+ C417 CC 8B C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD C6 9A                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 02                                jr      z,.ItsOK
 404+ C435 DD 01                                break
 405+ C437 3A 74 C0     .ItsOK:                        ld      a,(mkt_selected_row)
 406+ C43A FE 10                                cp      16
 407+ C43C C8                                   ret     z
 408+ C43D CD C3 C0                             call    mkt_lowlight_row
 409+ C440 21 74 C0                             ld      hl,mkt_selected_row
 410+ C443 34                                   inc     (hl)
 411+ C444 CD B3 C0                             call    mkt_highlight_row
 412+ C447 C9                                   ret
 413+ C448              ;----------------------------------------------------------------------------------------------------------------------------------
 414+ C448 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 415+ C44B 21 01 A3                             ld      hl,CargoTonnes
 416+ C44E ED 31                                add     hl,a
 417+ C450 7E                                   ld      a,(hl)
 418+ C451 FE 00                                cp      0
 419+ C453 C8                                   ret     z
 420+ C454 35                                   dec     (hl)
 421+ C455 DD 21 00 E0                          ld      ix,StockFood
 422+ C459 3A 74 C0                             ld      a,(mkt_selected_row)
 423+ C45C 16 08                                ld      d,8
 424+ C45E 5F                                   ld      e,a
 425+ C45F ED 30                                mul
 426+ C461 DD 19                                add     ix,de
 427+ C463                                      MMUSelectStockTable
 427+ C463 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 428+ C467 DD 34 01                             inc     (ix+1)
 429+ C46A DD 7E 07                             ld      a,(ix+7)
 430+ C46D FE 30                                cp      48
 431+ C46F 20 04                                jr      nz,.UnderATonne
 432+ C471 21 00 A3                             ld      hl,CargoRunningLoad
 433+ C474 35                                   dec     (hl)            ; We need to cosider UoM
 434+ C475 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 435+ C478 16 00                                ld      d,0
 436+ C47A 5F                                   ld      e,a
 437+ C47B CD 12 AD                             call    addDEtoCash
 438+ C47E                                      ; DO ADD CASH
 439+ C47E 3A 74 C0                             ld      a,(mkt_selected_row)
 440+ C481 CD 8B C2                             call    PrintMarketItem
 441+ C484 CD 69 C2                             call    MKT_DisplayCargo
 442+ C487 CD 7A C2                             call    MKT_DisplayCash
 443+ C48A C9                                   ret
 444+ C48B              ;----------------------------------------------------------------------------------------------------------------------------------
 445+ C48B              mkt_RightPressed:       MMUSelectStockTable
 445+ C48B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 446+ C48F DD 21 00 E0                          ld      ix,StockFood
 447+ C493 3A 74 C0                             ld      a,(mkt_selected_row)
 448+ C496 16 08                                ld      d,8
 449+ C498 5F                                   ld      e,a
 450+ C499 ED 30                                mul
 451+ C49B DD 19                                add     ix,de
 452+ C49D 4F                                   ld      c,a
 453+ C49E DD 7E 01                             ld      a,(ix+1)
 454+ C4A1 FE 00                                cp      0
 455+ C4A3 C8                                   ret     z
 456+ C4A4 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 457+ C4A7 FE 30                                cp      48
 458+ C4A9 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 459+ C4AB 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 460+ C4AE 21 01 A3                             ld      hl,CargoTonnes
 461+ C4B1 ED 31                                add     hl,a
 462+ C4B3 7E                                   ld      a,(hl)
 463+ C4B4 FE C8                                cp      200
 464+ C4B6 C8                                   ret     z                                   ; else its a 200 UoM limit
 465+ C4B7 C3 C0 C4                             jp      .CheckCash
 466+ C4BA 2A FF A2     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 467+ C4BD 7C                                   ld      a,h
 468+ C4BE BD                                   cp      l
 469+ C4BF C8                                   ret     z                                   ; return if we have already maxed out
 470+ C4C0 2A FC A2     .CheckCash:             ld      hl,(Cash+2)
 471+ C4C3 7C                                   ld      a,h
 472+ C4C4 B5                                   or      l
 473+ C4C5 20 0F                                jr      nz,.MoreThanRequired
 474+ C4C7 2A FA A2                             ld      hl,(Cash)
 475+ C4CA 7C                                   ld      a,h
 476+ C4CB FE 00                                cp      0
 477+ C4CD 20 07                                jr      nz,.MoreThanRequired
 478+ C4CF DD 7E 02                             ld      a,(ix+2)
 479+ C4D2 BD                                   cp      l
 480+ C4D3 30 01                                jr      nc,.MoreThanRequired
 481+ C4D5 C9                                   ret                         ; Insufficient Funds
 482+ C4D6 19           .MoreThanRequired:      add     hl,de
 483+ C4D7 7C                                   ld      a,h
 484+ C4D8 B3                                   or      e
 485+ C4D9                                      ; check cash can we buy, and cargo capacity
 486+ C4D9 DD 35 01                             dec     (ix+1)
 487+ C4DC 3A 74 C0                             ld      a,(mkt_selected_row)
 488+ C4DF 21 01 A3                             ld      hl,CargoTonnes
 489+ C4E2 ED 31                                add     hl,a
 490+ C4E4 34                                   inc     (hl)
 491+ C4E5 DD 7E 07                             ld      a,(ix+7)
 492+ C4E8 47                                   ld      b,a
 493+ C4E9 FE 30                                cp      48
 494+ C4EB 20 05                                jr      nz,.UnderOneTonne
 495+ C4ED 78                                   ld      a,b
 496+ C4EE 21 00 A3                             ld      hl,CargoRunningLoad
 497+ C4F1 34                                   inc     (hl)
 498+ C4F2 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 499+ C4F5 16 00                                ld      d,0
 500+ C4F7 5F                                   ld      e,a
 501+ C4F8 CD 25 AD                             call    subDEfromCash
 502+ C4FB 3A 74 C0                             ld      a,(mkt_selected_row)
 503+ C4FE CD 8B C2                             call    PrintMarketItem
 504+ C501 CD 69 C2                             call    MKT_DisplayCargo
 505+ C504 CD 7A C2                             call    MKT_DisplayCash
 506+ C507 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1321  C508
1322  C508              ; Bank 66
1323  C508
1324  C508                  SLOT    DispMarketAddr
1325  C508                  PAGE    BankDispMarket
1326  C508                  ORG     DispMarketAddr
1327  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 CF AA  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 95 AB  						DW $0220,name_expanded
   4+ C018 80 0B EF A6  						DW $0B80,WordUnit
   5+ C01C B0 0B 38 A9  						DW $0BB0,WordQuantity
   6+ C020 08 13 16 A9  						DW $1308,WordProduct
   7+ C024 60 13 1E A9  						DW $1360,WordUoM
   8+ C028 80 13 22 A9  						DW $1380,WordPrice
   9+ C02C B0 13 46 A9  						DW $13B0,WordStock
  10+ C030 E0 13 42 A9  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A FC A2     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A FA A2                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 00 A3                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 01 A3                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 73 A9                             ld		hl,WordIdx
 256+ C2A5 CD 48 A6                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 73 A9                             ld		hl,WordIdx
 264+ C2BF CD 48 A6                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 09 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD F3 E0    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD A4 E4    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 C8 9D                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD 20 E2                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 8A E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 8A E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 8A E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 8A E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 8A E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 8A E2                             call	l2_draw_horz_line
 323+ C38A 3A B2 9E     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 10 AB                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1328  C3D3
1329  C3D3              ; Bank 55
1330  C3D3
1331  C3D3                  SLOT    StockTableAddr
1332  C3D3                  PAGE    BankStockTable
1333  C3D3                  ORG     StockTableAddr
1334  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 64 A3                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 3B 9E                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 47 9E                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 3B 9E                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 47 9E                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
1335  E113
1336  E113              ; Bank 57
1337  E113
1338  E113                  SLOT    LAYER2Addr
1339  E113                  PAGE    BankLAYER2
1340  E113                  ORG     LAYER2Addr
1341  E000
1342  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002 00           varL2_ACCESS_MODE            DB 0
   5+ E003
   6+ E003 3E 08        asm_l2_double_buffer_on:    ld      a,8
   7+ E005 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   8+ E008 C9                                       ret
   9+ E009
  10+ E009 AF           asm_l2_double_buffer_off:   xor     a
  11+ E00A 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  12+ E00D C9                                       ret
  13+ E00E
  14+ E00E 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  15+ E011 ED 70                                    in      (c)
  16+ E013 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  17+ E016 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  18+ E018 ED 79                                    out     (c),a
  19+ E01A C9                                       ret
  20+ E01B
  21+ E01B 3A 02 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  22+ E01E E6 05                                    and     LAYER2_READ_WRITE_MASK
  23+ E020 57                                       ld      d,a
  24+ E021 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  25+ E024 ED 70                                    in      (c)
  26+ E026 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  27+ E029 A2                                       and     d
  28+ E02A ED 79                                    out     (c),a
  29+ E02C C9                                       ret
  30+ E02D
  31+ E02D 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  32+ E030 ED 70                                    in      (c)
  33+ E032 F6 05                                    or      LAYER2_READ_WRITE_MASK
  34+ E034 ED 79                                    out     (c),a
  35+ E036 C9                                       ret
  36+ E037
  37+ E037              ; "asm_l2_bank_select"
  38+ E037              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  39+ E037 57           asm_l2_bank_select:         ld      d,a
  40+ E038 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  41+ E03B F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  42+ E03D B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  43+ E03E 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  44+ E041 ED 79                                    out 	(c),a
  45+ E043 C9                                       ret
  46+ E044              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  47+ E044 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  48+ E047 FE 00                                    cp		0
  49+ E049 20 04                                    jr 		nz,.nottopbank
  50+ E04B 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  51+ E04D 18 E8                                    jr		asm_l2_bank_select
  52+ E04F FE 01        .nottopbank:                cp		1
  53+ E051 20 04                                    jr 		nz,.notmiddlebank
  54+ E053 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E055 18 E0                                    jr		asm_l2_bank_select
  56+ E057 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  57+ E059 18 DC                                    jr		asm_l2_bank_select
  58+ E05B              		; Note no ret as its handled by above routines
  59+ E05B
  60+ E05B              ; "asm_l2_row_bank_select"
  61+ E05B              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  62+ E05B              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  63+ E05B              ; "destroys BC call de is safe a = adjusted poke pixel row"
  64+ E05B FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  65+ E05D 30 11                                    jr 		nc, .l2rowGTE64
  66+ E05F 08           .l2rowLT64:                 ex		af,af'
  67+ E060                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  68+ E060 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E063 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  70+ E065 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  71+ E068 ED 79                                    out 	(c),a
  72+ E06A AF                                       xor		a						; set a to 0
  73+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  74+ E06E 08                                       ex		af,af'					; return pixel poke unharmed
  75+ E06F C9                                       ret
  76+ E070 FE 80        .l2rowGTE64:                cp 		128
  77+ E072 30 14                                    jr 		nc, .l2rowGTE128
  78+ E074 08           .l2row64to127:              ex		af,af'
  79+ E075                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  80+ E075 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  81+ E078 F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E07A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  83+ E07D ED 79                                    out 	(c),a
  84+ E07F 3E 01                                    ld		a,1						; set a to 1
  85+ E081 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  86+ E084 08                                       ex		af,af'
  87+ E085 D6 40                                    sub		64
  88+ E087 C9                                       ret
  89+ E088 08           .l2rowGTE128:               ex		af,af'
  90+ E089                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  91+ E089 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  92+ E08C F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E08E
  94+ E08E 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  95+ E091 ED 79                                    out 	(c),a
  96+ E093 3E 01                                    ld		a,1						; set a to 2
  97+ E095 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  98+ E098 08                                       ex		af,af'
  99+ E099 D6 80                                    sub		128
 100+ E09B C9                                       ret
 101+ E09C
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1343  E09C                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E09C
   2+ E09C 00           l2_cls_byte	            DB 0
   3+ E09D              ; ">DMA Command BLOCK"
   4+ E09D
   5+ E09D 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E0A1 7D
   6+ E0A2 9C E0        l2_fill_astrt           DW l2_cls_byte
   7+ E0A4 00 40        l2_fill_length          DB $00,$40
   8+ E0A6 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E0A9 00 00        l2_fill_bstrt           DB $00,$00
  10+ E0AB 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E0AF              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E0AF
  13+ E0AF              l2_cls_dma_bank:
  14+ E0AF              ; ">l2_cls_dma_bank"
  15+ E0AF              ; ">sets a bank to"
  16+ E0AF 32 9C E0     .set_colour:            ld (l2_cls_byte),a
  17+ E0B2 21 9D E0     .write_dma:             ld hl, l2_fill
  18+ E0B5 06 12                                ld b, l2_fill_cmd_len
  19+ E0B7 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E0B9 ED B3                                otir
  21+ E0BB C9                                   ret
  22+ E0BC
  23+ E0BC 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E0BE CD 5B E0                             call asm_l2_row_bank_select
  25+ E0C1 3A 9C E0                             ld      a,(l2_cls_byte)
  26+ E0C4 CD AF E0                             call l2_cls_dma_bank
  27+ E0C7 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E0C9 CD 5B E0                             call asm_l2_row_bank_select
  29+ E0CC 3A 9C E0                             ld      a,(l2_cls_byte)
  30+ E0CF CD AF E0                             call l2_cls_dma_bank
  31+ E0D2 C9                                   ret
  32+ E0D3
  33+ E0D3
  34+ E0D3 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0D5 CD 5B E0                             call asm_l2_row_bank_select
  36+ E0D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0DA CD AF E0                             call l2_cls_dma_bank
  38+ E0DD 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0DF CD 5B E0                             call asm_l2_row_bank_select
  40+ E0E2 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0E4 CD AF E0                             call l2_cls_dma_bank
  42+ E0E7 C9                                   ret
  43+ E0E8
  44+ E0E8 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0EA CD 5B E0                             call asm_l2_row_bank_select
  46+ E0ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0EF CD AF E0                             call l2_cls_dma_bank
  48+ E0F2 C9                                   ret
  49+ E0F3
  50+ E0F3 CD D3 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0F6 CD E8 E0                             call l2_cls_lower_third
  52+ E0F9 C9                                   ret
  53+ E0FA
# file closed: ./Layer2Graphics/layer2_cls.asm
1344  E0FA                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0FA
   2+ E0FA ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0FE ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E102 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E106 C9                                   ret
   6+ E107
# file closed: ./Layer2Graphics/layer2_initialise.asm
1345  E107                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E107              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E107 C5          >            push bc
   1+ E108 01 3B 24    >                ld bc,$243B
   1+ E10B 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E10D ED 79       >                    out (c),a
   1+ E10F 04          >                    inc b
   1+ E110 ED 78       >                in a,(c)
   1+ E112 C1          >            pop bc
   2+ E113 57                                   ld      d,a
   3+ E114                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E114 C5          >            push bc
   3+ E115 01 3B 24    >                ld bc,$243B
   3+ E118 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E11A ED 79       >                    out (c),a
   3+ E11C 04          >                    inc b
   3+ E11D ED 78       >                in a,(c)
   3+ E11F C1          >            pop bc
   4+ E120 5F                                   ld      e,a
   5+ E121 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E124 7A                                   ld      a,d
   7+ E125 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E128 C9                                   ret
   9+ E129
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1346  E129                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E129              l2_plot_pixel:
   2+ E129              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E129 F5           	push    af
   4+ E12A 78               ld      a,b
   5+ E12B              l2_pp_row_valid:
   6+ E12B                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E12B FE C0       >                        cp     ScreenHeight
   6+ E12D D2 3B E1    >                        jp		nc,l2_pp_dont_plot
   7+ E130 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E131              ;	ld      a,b
   9+ E131 CD 5B E0     	call    asm_l2_row_bank_select
  10+ E134 C1           	pop     bc
  11+ E135 47           	ld      b,a
  12+ E136 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E137 69           	ld      l,c
  14+ E138 F1           	pop     af								; a = colour to plott
  15+ E139 77           	ld      (hl),a
  16+ E13A C9           	ret
  17+ E13B              l2_pp_dont_plot:
  18+ E13B F1               pop     af
  19+ E13C C9               ret
  20+ E13D
  21+ E13D              l2_plot_pixel_no_bank:
  22+ E13D              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E13D              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E13D E5           	push 	hl
  25+ E13E 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E13F 69           	ld 		l,c
  27+ E140 77           	ld 		(hl),a
  28+ E141 E1           	pop		hl
  29+ E142 C9           	ret
  30+ E143
  31+ E143              l2_plot_pixel_y_test:
  32+ E143 F5           	push	af
  33+ E144 78           	ld		a,b
  34+ E145 FE C0        	cp		192
  35+ E147 30 03        	jr		nc,.clearup
  36+ E149 F1           	pop		af
  37+ E14A 18 DD        	jr		l2_plot_pixel
  38+ E14C              .clearup:
  39+ E14C F1           	pop		af
  40+ E14D C9           	ret
  41+ E14E
  42+ E14E              l2_point_pixel_y_safe:	MACRO
  43+ E14E ~            						push	hl
  44+ E14E ~            						push	bc
  45+ E14E ~            						call	l2_plot_pixel
  46+ E14E ~            						pop		bc
  47+ E14E ~            						pop		hl
  48+ E14E              						ENDM
  49+ E14E
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1347  E14E                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E14E
   2+ E14E              l2_print_chr_at:
   3+ E14E              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E14E              ; "Need a version that also prints absence of character"
   5+ E14E 7A           	ld		a,d
   6+ E14F FE 20        	cp		32
   7+ E151 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E153 FE 7F        	cp		127
   9+ E155 30 3B        	jr		nc,.InvalidCharacter
  10+ E157              .ValidCharater:
  11+ E157 26 00        	ld		h,0
  12+ E159 6A           	ld		l,d
  13+ E15A 29           	add		hl,hl						; * 2
  14+ E15B 29           	add		hl,hl						; * 4
  15+ E15C 29           	add		hl,hl						; * 8 to get byte address
  16+ E15D ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E161 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E162 23           	inc		hl							; skip first byte
  19+ E163 16 07        	ld		d,7
  20+ E165              .PrintCharLoop:
  21+ E165 D5           	push	de
  22+ E166 7E           	ld		a,(hl)
  23+ E167 FE 00        	cp		0
  24+ E169 28 21        	jr		z,.NextRowNoBCPop
  25+ E16B              .PrintARow:
  26+ E16B C5           	push	bc							; save row col
  27+ E16C 16 07        	ld		d,7							; d is loop row number now
  28+ E16E              .PrintPixelLoop:
  29+ E16E 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E16F              .PrintTheRow:
  31+ E16F CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E171 F5           	push	af							; save character byte
  33+ E172 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E174 20 04        	jr		nz,.PixelToPrint
  35+ E176              .NoPixelToPrint:
  36+ E176 3E E3        	ld		a,$E3
  37+ E178 18 01        	jr		.HaveSetPixelColour
  38+ E17A              .PixelToPrint:
  39+ E17A 7B           	ld		a,e							; Get Colour
  40+ E17B              .HaveSetPixelColour
  41+ E17B E5           	push	hl
  42+ E17C              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E17C              .BankOnFirstOnly:
  44+ E17C F5           	push	af
  45+ E17D 7A           	ld		a,d
  46+ E17E FE 07        	cp		7
  47+ E180 28 11        	jr		z,.PlotWithBank
  48+ E182              .PlotNoBank:
  49+ E182 F1           	pop		af
  50+ E183 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E184 69           	ld 		l,c
  52+ E185 77           	ld 		(hl),a
  53+ E186              .IterateLoop:
  54+ E186              ;	pop		bc
  55+ E186 E1           	pop		hl
  56+ E187 F1           	pop		af							; a= current byte shifted
  57+ E188 15           	dec		d						 	; do dec after inc as we amy
  58+ E189 20 E3        	jr		nz,.PrintPixelLoop
  59+ E18B              .NextRow:
  60+ E18B C1           	pop		bc							; Current Col Row
  61+ E18C              .NextRowNoBCPop:
  62+ E18C D1           	pop		de							; d= row loop
  63+ E18D 04           	inc		b							; Down 1 row
  64+ E18E 23           	inc		hl							; Next character byte
  65+ E18F 15           	dec		d							; 1 done now
  66+ E190 20 D3        	jr		nz,.PrintCharLoop
  67+ E192              .InvalidCharacter:
  68+ E192 C9           	ret
  69+ E193              .PlotWithBank:
  70+ E193 F1           	pop		af
  71+ E194 CD 29 E1     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E197 18 ED        	jr		.IterateLoop
  73+ E199
  74+ E199              l2_print_at:
  75+ E199              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E199              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E199 7E           	ld	a,(hl)							; Return if empty string
  78+ E19A FE 00        	cp	0
  79+ E19C C8           	ret	z
  80+ E19D E5           	push	hl
  81+ E19E D5           	push	de
  82+ E19F C5           	push	bc
  83+ E1A0 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E1A1 CD 4E E1     	call 	l2_print_chr_at
  85+ E1A4 C1           	pop		bc
  86+ E1A5 D1           	pop		de
  87+ E1A6 E1           	pop		hl
  88+ E1A7              .Move8Pixlestoright:
  89+ E1A7 08           	ex		af,af'
  90+ E1A8 79           	ld		a,c
  91+ E1A9 C6 08        	add		8
  92+ E1AB 4F           	ld		c,a
  93+ E1AC 08           	ex		af,af'
  94+ E1AD 23           	inc		hl
  95+ E1AE 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E1B0
  97+ E1B0
  98+ E1B0              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E1B0              ; "Need a version that also prints absence of character"
 100+ E1B0              ; removed blank line optimisation as we need spaces printed
 101+ E1B0 7A           l2_print_7chr_at:       ld		a,d
 102+ E1B1 FE 1F                                cp		31
 103+ E1B3 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E1B5 FE 7F                                cp		127
 105+ E1B7 30 39                                jr		nc,.InvalidCharacter
 106+ E1B9 26 00        .ValidCharater:         ld		h,0
 107+ E1BB 6A                                   ld		l,d
 108+ E1BC 29                                   add		hl,hl						; * 2
 109+ E1BD 29                                   add		hl,hl						; * 4
 110+ E1BE 29                                   add		hl,hl						; * 8 to get byte address
 111+ E1BF ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E1C3 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E1C4 23                                   inc		hl							; skip first byte
 114+ E1C5 16 07                                ld		d,7
 115+ E1C7 D5           .PrintCharLoop:         push	de
 116+ E1C8 7E                                   ld		a,(hl)
 117+ E1C9                                      ;cp		0
 118+ E1C9                                      ;jr		z,.NextRowNoBCPop
 119+ E1C9 C5           .PrintARow:             push	bc							; save row col
 120+ E1CA 16 06                                ld		d,6							; d is loop row number now
 121+ E1CC 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1CD 28 1C                                jr		z,.NextRow
 123+ E1CF CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1D1 F5                                   push	af							; save character byte
 125+ E1D2 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1D4 20 04                                jr		nz,.PixelToPrint
 127+ E1D6 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1D8 18 01                                jr		.HaveSetPixelColour
 129+ E1DA 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1DB E5           .HaveSetPixelColour		push	hl
 131+ E1DC                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1DC F5           .BankOnFirstOnly:       push	af
 133+ E1DD 7A                                   ld		a,d
 134+ E1DE FE 06                                cp		6
 135+ E1E0 28 11                                jr		z,.PlotWithBank
 136+ E1E2 F1           .PlotNoBank:            pop		af
 137+ E1E3 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1E4 69                                   ld 		l,c
 139+ E1E5 77                                   ld 		(hl),a
 140+ E1E6              .IterateLoop:	        ;	pop		bc
 141+ E1E6 E1                                   pop		hl
 142+ E1E7 F1                                   pop		af							; a= current byte shifted
 143+ E1E8 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1E9 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1EB C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1EC D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1ED 04                                   inc		b							; Down 1 row
 148+ E1EE 23                                   inc		hl							; Next character byte
 149+ E1EF 15                                   dec		d							; 1 done now
 150+ E1F0 20 D5                                jr		nz,.PrintCharLoop
 151+ E1F2 C9           .InvalidCharacter:      ret
 152+ E1F3 F1           .PlotWithBank:          pop		af
 153+ E1F4 CD 29 E1                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1F7 18 ED                                jr		.IterateLoop
 155+ E1F9
 156+ E1F9              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1F9              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1F9 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1FA FE 00                                cp	0
 160+ E1FC C8                                   ret	z
 161+ E1FD E5                                   push	hl
 162+ E1FE D5                                   push	de
 163+ E1FF C5                                   push	bc
 164+ E200 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E201 CD B0 E1                             call 	l2_print_7chr_at
 166+ E204 C1                                   pop		bc
 167+ E205 D1                                   pop		de
 168+ E206 E1                                   pop		hl
 169+ E207 08           .Move7Pixlestoright:	ex		af,af'
 170+ E208 79                                   ld		a,c
 171+ E209 C6 07                                add		7
 172+ E20B 4F                                   ld		c,a
 173+ E20C 08                                   ex		af,af'
 174+ E20D 23                                   inc		hl
 175+ E20E 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E210
 177+ E210
# file closed: ./Layer2Graphics/layer2_print_character.asm
1348  E210                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E210              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E210              ; TODO DMA Optimise
   3+ E210 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E213 53                                   ld      d,e
   5+ E214 5C                                   ld      e,h
   6+ E215 CD 8A E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E218 E1 D1 C1                             pop     bc,,de,,hl
   8+ E21B 04                                   inc     b
   9+ E21C 15                                   dec     d
  10+ E21D C8                                   ret     z
  11+ E21E 18 F0                                jr      l2_draw_fill_box
  12+ E220
  13+ E220              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E220 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E223 53                                   ld		d,e
  16+ E224 5F                                   ld		e,a
  17+ E225 14                                   inc		d
  18+ E226 CD 8A E2                             call	l2_draw_horz_line
  19+ E229 F1 D1 C1                             pop		bc,,de,,af
  20+ E22C C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E22F 67                                   ld		h,a							;save color whilst b = row + height
  22+ E230 78                                   ld		a,b
  23+ E231 82                                   add		a,d
  24+ E232 47                                   ld		b,a
  25+ E233 53                                   ld		d,e							; d = width
  26+ E234 14                                   inc		d							; Extra pixel for width
  27+ E235 5C                                   ld		e,h							; e = colour
  28+ E236 CD 8A E2                             call	l2_draw_horz_line
  29+ E239 F1 D1 C1                             pop		bc,,de,,af
  30+ E23C C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E23F 04                                   inc		b							; save 2 pixles
  32+ E240 15                                   dec		d
  33+ E241 5F                                   ld		e,a							; e = color
  34+ E242 CD DB E2                             call	l2_draw_vert_line
  35+ E245 F1 D1 C1                             pop		bc,,de,,af
  36+ E248 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E249 15                                   dec		d
  38+ E24A 67                                   ld		h,a							;save color whilst c = col + width
  39+ E24B 79                                   ld		a,c
  40+ E24C 83                                   add		a,e
  41+ E24D 4F                                   ld		c,a
  42+ E24E 5C                                   ld		e,h							; e = color
  43+ E24F CD DB E2                             call	l2_draw_vert_line
  44+ E252 C9                                   ret
  45+ E253
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1349  E253                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E253
   2+ E253              ;; NOTE DMA is little endian
   3+ E253 00           l2_horz_pixel           DB 0
   4+ E254
   5+ E254 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E258 7D
   6+ E259 53 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E25B 00           l2_horz_lenlo           DB 0
   8+ E25C 00           l2_horz_lenhi           DB 0
   9+ E25D 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E260 00 00        l2_horz_target          DB $00, $00
  11+ E262 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E264              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E264
  14+ E264
  15+ E264              ; "l2_draw_horz_dma"
  16+ E264              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E264 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E265 32 53 E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E268 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E269 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E26B ED 53 5B E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E26F                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E26F                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E26F                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E26F ED 43 60 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E273 21 54 E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E276 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E278 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E27A ED B3                                otir                                                      ;
  30+ E27C C9                                   ret
  31+ E27D
  32+ E27D              ; "bc = left side row,col, d = length, e = color"
  33+ E27D D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E27E C5                                   push 	bc							; save row col
  35+ E27F 78                                   ld   	a,b
  36+ E280 CD 5B E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E283 C1                                   pop  	bc
  38+ E284 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E285 D1                                   pop  	de							; get length back
  40+ E286 CD 64 E2                             call    l2_draw_horz_dma
  41+ E289 C9                                   ret
  42+ E28A
  43+ E28A              ; "l2_draw_horz_line"
  44+ E28A              ; "bc = left side row,col, d = length, e = color"
  45+ E28A              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E28A 7A           l2_draw_horz_line:      ld		a,d
  47+ E28B FE 00                                cp 		0							; if its zero length then just return
  48+ E28D C8           .zerolengthexit:        ret		z
  49+ E28E FE 01        .isitlen1:              cp 		1
  50+ E290 CA B2 E2                             jp 		z,.l2_draw_horz_line_1
  51+ E293 FE 0A        .longenoughtfordma:     cp  10
  52+ E295 C3 7D E2                             jp  l2_draw_horz_dma_bank
  53+ E298 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E29A 78                                   ld   	a,b
  55+ E29B CD 5B E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E29E C1                                   pop  	bc
  57+ E29F 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E2A0 69                                   ld   	l,c
  59+ E2A1 D1                                   pop  	de							; get length back
  60+ E2A2 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E2A3 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E2A4 82                                   add  	a,d
  63+ E2A5 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E2A7 3E FF        .clipat255:             ld   	a,$FF
  65+ E2A9 91                                   sub  	c							; a holds clipped length
  66+ E2AA 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E2AB 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E2AD 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E2AE 23                                   inc hl
  70+ E2AF 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E2B1 C9                                   ret
  72+ E2B2 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E2B3 C3 29 E1                             jp		l2_plot_pixel				; hijack return
  74+ E2B6
  75+ E2B6              ; "l2_draw_horz_line_to"
  76+ E2B6              ; "bc = left side row,col, d right pixel, e = color"
  77+ E2B6 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E2B7 B9                                   cp 		c
  79+ E2B8 30 04                                jr		nc, .noswap
  80+ E2BA 28 07                                jr      z, .singlepixel
  81+ E2BC 51           .swap:                  ld		d,c
  82+ E2BD 4F                                   ld		c,a
  83+ E2BE 7A           .noswap:                ld		a,d
  84+ E2BF 91                                   sub		c
  85+ E2C0              ;                        dec		a							; so now its length not offset
  86+ E2C0 57                                   ld		d,a
  87+ E2C1 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E2C3 7B           .singlepixel:           ld		a,e
  89+ E2C4 C3 29 E1                             jp		l2_plot_pixel				; hijack return
  90+ E2C7
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1350  E2C7                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E2C7              ; ">l2_draw_vert_segment"
   2+ E2C7              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E2C7              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E2C7 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2C8 FE 00        .emptylinecheck:	    cp 		0
   6+ E2CA C8                                   ret		z
   7+ E2CB FE 01        .justonepixel	        cp		1
   8+ E2CD 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2CF 73                                   ld		(hl),e
  10+ E2D0 C9                                   ret
  11+ E2D1              .multiplepixelsLoop:
  12+ E2D1 7C           .endofbankcheck:        ld   	a,h
  13+ E2D2 FE 40                                cp   	64
  14+ E2D4 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2D5 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2D6 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2D7 15                                   dec		d
  18+ E2D8 C8                                   ret		z
  19+ E2D9 18 F6                                jr		.multiplepixelsLoop
  20+ E2DB
  21+ E2DB              ; ">l2_draw_vert_line"
  22+ E2DB              ; ">bc = row col d = length, e = color"
  23+ E2DB 78           l2_draw_vert_line:      ld 		a,b
  24+ E2DC FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2DE D0                                   ret 	nc							; can't start off the screen
  26+ E2DF 7A           .emptylinecheck:        ld		a,d
  27+ E2E0 FE 00                                cp		0
  28+ E2E2 C8                                   ret		z
  29+ E2E3 FE 01                                cp		1
  30+ E2E5 20 04                                jr		nz,.multiplepixels
  31+ E2E7 CD 29 E1     .itsonepixel:           call	l2_plot_pixel
  32+ E2EA C9                                   ret
  33+ E2EB              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2EB 7A           .clipto192:             ld		a,d							; get length
  35+ E2EC 80                                   add		a,b							; a= row + length
  36+ E2ED 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2EF FE C0                                cp		SCREEN_HEIGHT
  38+ E2F1 38 08                                jr		c, .noclipneeded
  39+ E2F3 78           .needtoclip             ld		a,b
  40+ E2F4 82                                   add		a,d
  41+ E2F5 D6 C0                                sub		SCREEN_HEIGHT
  42+ E2F7 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2F8 7A                                   ld		a,d
  44+ E2F9 94                                   sub		h
  45+ E2FA 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2FB              ; so now BC = row col, d = length clipped, e = color
  47+ E2FB 78           .noclipneeded:          ld		a,b
  48+ E2FC C5 D5                                push	bc,,de
  49+ E2FE CD 5B E0                             call 	asm_l2_row_bank_select
  49+ E301               	 	; we now have poke address and a variable holding current bank number
  50+ E301 D1 C1                                pop		bc,,de
  51+ E303 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E304 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E305 CD C7 E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E308 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E309 FE 00                                cp		0
  56+ E30B 28 27                                jr		z, .doneplotting
  57+ E30D 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E310 3C                                   inc		a
  59+ E311 06 00                                ld		b,0
  60+ E313 C5 D5                                push	bc,,de
  61+ E315 CD 44 E0                             call 	asm_l2_bank_n_select
  62+ E318 D1 C1                                pop     bc,,de
  63+ E31A 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E31B 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E31C CD C7 E2                             call	l2_draw_vert_segment
  66+ E31F 7A                                   ld		a,d
  67+ E320 FE 00                                cp		0
  68+ E322 28 10                                jr		z,.doneplotting
  69+ E324 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E327 3C                                   inc		a
  71+ E328 06 00                                ld		b,0
  72+ E32A C5 D5                                push	bc,,de
  73+ E32C CD 44 E0                             call 	asm_l2_bank_n_select
  74+ E32F D1                                   pop		de
  75+ E330 E1                                   pop		hl							; hl = bc
  76+ E331 CD C7 E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E334 C9           .doneplotting:	        ret
  78+ E335
  79+ E335              ; ">l2_draw_vert_line_to"
  80+ E335              ; ">bc = row col d = to position, e = color"
  81+ E335 78           l2_draw_vert_line_to:   ld		a,b
  82+ E336 BA                                   cp		d
  83+ E337 38 02                                jr		c, .noyswap
  84+ E339 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E33A 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E33B 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E33C 90                                   sub		b
  88+ E33D 3C                                   inc		a			; so now its length not offset
  89+ E33E 57                                   ld		d,a
  90+ E33F 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E341                                      ; no return needed
  92+ E341
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1351  E341                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E341
   2+ E341              l2_draw_box_to:
   3+ E341              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E341              ; ">NOT IMPLEMENTED YET"
   5+ E341 C9           	ret
   6+ E342
   7+ E342              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E342              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E342              l2decbstep	EQU $05
  10+ E342              l2incbstep	EQU	$04
  11+ E342              l2deccstep	EQU $0D
  12+ E342              l2inccstep	EQU	$0C
  13+ E342              		; l2 deltas are signed
  14+ E342 00 00        l2deltaY	DW	0
  15+ E344 00 00        l2deltaX	DW	0
  16+ E346 00           l2deltaYsq	db	0
  17+ E347 00           l2deltaXsq	db	0
  18+ E348 00           l2deltaYn	db	0
  19+ E349 00           l2deltaXn	db	0
  20+ E34A 00           l2deltaYsqn	db	0
  21+ E34B 00           l2deltaXsqn	db	0
  22+ E34C 00           l2linecolor	db	0
  23+ E34D 00 00        l2fraction	dw	0
  24+ E34F 00 00        l2e2		dw	0
  25+ E351 00           l2way		db	0
  26+ E352 00 00        l2targetPtr	dw	0
  27+ E354              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E354 00 00 00...  l2targetArray1 ds	256
  29+ E454 00 00 00...  l2targetArray2 ds	256
  30+ E554              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E554              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E554              ;;    dx =  abs(x1-x0);
  33+ E554              ;;    sx = x0<x1 ? 1 : -1;
  34+ E554              ;;    dy = -abs(y1-y0);
  35+ E554              ;;    sy = y0<y1 ? 1 : -1;
  36+ E554              ;;    err = dx+dy;  /* error value e_xy */
  37+ E554              ;;    while (true)   /* loop */
  38+ E554              ;;        plot(x0, y0);
  39+ E554              ;;        if (x0==x1 && y0==y1) break;
  40+ E554              ;;        e2 = 2*err;
  41+ E554              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E554              ;;            err += dy;
  43+ E554              ;;            x0 += sx;
  44+ E554              ;;        end if
  45+ E554              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E554              ;;            err += dx;
  47+ E554              ;;            y0 += sy;
  48+ E554              ;;        end if
  49+ E554              ;;    end while
  50+ E554              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E554              ; ">hl will be either l2targetArray1 or 2"
  52+ E554              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E554 FE 01        l2_draw_diagonal_save:  cp		1
  54+ E556 28 06                                jr		z,l2S_ItsArray1
  55+ E558 21 54 E4                             ld		hl,l2targetArray2
  56+ E55B C3 61 E5                             jp		l2S_setTarget
  57+ E55E 21 54 E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E561 22 52 E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E564              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E564 32 4C E3                             ld		(l2linecolor),a					;save colour for later
  61+ E567 21 00 00                             ld		hl,0                            ;
  62+ E56A 22 44 E3                             ld		(l2deltaX),hl                   ;
  63+ E56D 22 42 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E570 78           l2S_preSort:            ld		a,b								;
  65+ E571                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E571 BA          >                        cp      d
  65+ E572 DA 7A E5    >                        jp		c, l2S_noYSort
  66+ E575              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E575 60          >                        ld		h,b
  66+ E576 69          >                        ld		l,c
  67+ E577 EB                                   ex		de,hl                           ;
  68+ E578                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E578 44          >                        ld		b,h
  68+ E579 4D          >                        ld		c,l
  69+ E57A DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E57C DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E57E 79           l2S_setXLen:            ld		a,c                             ;
  72+ E57F                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E57F BB          >                        cp      e
  72+ E580 DA 8C E5    >                        jp		c, l2S_PosXLen
  73+ E583 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E584 93                                   sub     e                               ;
  75+ E585 32 44 E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E588 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E58A 18 07                                jr		l2S_XINCDEC
  78+ E58C 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E58D 91                                   sub		c                               ;
  80+ E58E 32 44 E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E591 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E593              l2S_XINCDEC:
  83+ E593 32 FF E5     	ld		(l2S_adjustCol),a				;
  84+ E596 32 2F E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E599              l2S_setYLen
  86+ E599 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E59A 90           	sub		b
  88+ E59B 32 42 E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E59E              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E59E              ldS_FracDYltDX:								;
  91+ E59E 2A 42 E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E5A1 ED 5B 44 E3  	ld		de,(l2deltaX)
  93+ E5A5              	ClearCarryFlag
  93+ E5A5 B7          >                        or a
  94+ E5A6 ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E5A8 EB           	ex		de,hl
  96+ E5A9 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E5AB FD 6B        	ld		iyl,e
  98+ E5AD F2 D2 E5     	jp		p,l2S_fracIsPositive
  99+ E5B0              l2S_fracIsNegative:
 100+ E5B0              	NegIY
 100+ E5B0 AF          >                    xor a
 100+ E5B1 FD 95       >                    sub iyl
 100+ E5B3 FD 6F       >                    ld iyl,a
 100+ E5B5 9F          >                    sbc a,a
 100+ E5B6 FD 94       >                    sub iyh
 100+ E5B8 FD 67       >                    ld iyh,a
 101+ E5BA              	ShiftIYRight1
 101+ E5BA FD 7C       >			   ld 	a,iyh
 101+ E5BC CB 3F       >			   srl 	a
 101+ E5BE FD 67       >			   ld	iyh,a
 101+ E5C0 FD 7D       >			   ld 	a,iyl
 101+ E5C2 1F          >			   rra
 101+ E5C3 FD 6F       >			   ld	iyl,a
 102+ E5C5              	NegIY
 102+ E5C5 AF          >                    xor a
 102+ E5C6 FD 95       >                    sub iyl
 102+ E5C8 FD 6F       >                    ld iyl,a
 102+ E5CA 9F          >                    sbc a,a
 102+ E5CB FD 94       >                    sub iyh
 102+ E5CD FD 67       >                    ld iyh,a
 103+ E5CF C3 DD E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5D2              l2S_fracIsPositive:
 105+ E5D2              	ShiftIYRight1
 105+ E5D2 FD 7C       >			   ld 	a,iyh
 105+ E5D4 CB 3F       >			   srl 	a
 105+ E5D6 FD 67       >			   ld	iyh,a
 105+ E5D8 FD 7D       >			   ld 	a,iyl
 105+ E5DA 1F          >			   rra
 105+ E5DB FD 6F       >			   ld	iyl,a
 106+ E5DD              l2S_SkipCalcInc:
 107+ E5DD              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5DD 2A 52 E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5E0 78           	ld		a,b
 110+ E5E1 ED 31        	add		hl,a
 111+ E5E3 71           	ld		(hl),c
 112+ E5E4              l2S_CheckIfEnd:
 113+ E5E4 DD 7C        	ld		a,ixh
 114+ E5E6              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5E6 B8          >                        cp     b
 114+ E5E7 D2 ED E5    >                        jp		nc,l2S_CheckXPos
 115+ E5EA C3 F1 E5     	jp		l2S_Continue
 116+ E5ED              l2S_CheckXPos:
 117+ E5ED 79           	ld		a,c
 118+ E5EE              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5EE DD BD       >                        cp    ixl
 118+ E5F0 D0          >                        ret	 nc
 119+ E5F1              l2S_Continue:
 120+ E5F1              l2S_HNegative:
 121+ E5F1 FD 7C        	ld		a,iyh
 122+ E5F3 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5F5 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5F7              l2S_ErrNegative:								; if its a negative error update X
 125+ E5F7 3A 42 E3     	ld		a,(l2deltaY)
 126+ E5FA 16 00        	ld		d,0
 127+ E5FC 5F           	ld		e,a
 128+ E5FD FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5FF              l2S_adjustCol:
 130+ E5FF 00           	nop										; this is our inc/dec of X
 131+ E600 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E602              l2S_ErrNotNegative:
 133+ E602 FD 7C        	ld		a,iyh
 134+ E604 FD B5        	or		iyl
 135+ E606              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E606 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E607 CA 20 E6    >                        jp	    z, l2S_ErrZero
 136+ E60A              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E60A              	lddeiy
 137+ E60A FD 54       >                        ld		d,iyh
 137+ E60C FD 5D       >                        ld		e,iyl
 138+ E60E EB           	ex		de,hl
 139+ E60F 16 00        	ld		d,0
 140+ E611 3A 44 E3     	ld		a,(l2deltaX)
 141+ E614 5F           	ld		e,a
 142+ E615              	ClearCarryFlag
 142+ E615 B7          >                        or a
 143+ E616 ED 52        	sbc		hl,de
 144+ E618 EB           	ex		de,hl
 145+ E619              	ldiyde
 145+ E619 FD 62       >                        ld		iyh,d
 145+ E61B FD 6B       >                        ld		iyl,e
 146+ E61D              l2S_adjustRow:									; move Y down by one
 147+ E61D 04           	inc		b
 148+ E61E 18 BD        	jr		l2S_Loop
 149+ E620              l2S_ErrZero:
 150+ E620 2A 44 E3     	ld		hl,(l2deltaX)
 151+ E623 EB           	ex		de,hl
 152+ E624 2A 42 E3     	ld		hl,(l2deltaY)
 153+ E627              	ClearCarryFlag
 153+ E627 B7          >                        or a
 154+ E628 ED 52        	sbc		hl,de
 155+ E62A EB           	ex		de,hl
 156+ E62B              	ldiyde
 156+ E62B FD 62       >                        ld		iyh,d
 156+ E62D FD 6B       >                        ld		iyl,e
 157+ E62F              l2S_adjustCol2:
 158+ E62F 00           	nop										; update X and Y
 159+ E630 04           	inc		b
 160+ E631 18 AA        	jr		l2S_Loop
 161+ E633
 162+ E633              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E633 32 4C E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E636 21 00 00                             ld		hl,0                            ;
 165+ E639 22 44 E3                             ld		(l2deltaX),hl                   ;
 166+ E63C 22 42 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E63F 78           l2D_preSort:            ld		a,b								;
 168+ E640                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E640 BA          >                        cp      d
 168+ E641 DA 49 E6    >                        jp		c, l2D_noYSort
 169+ E644              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E644 60          >                        ld		h,b
 169+ E645 69          >                        ld		l,c
 170+ E646 EB                                   ex		de,hl                           ;
 171+ E647                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E647 44          >                        ld		b,h
 171+ E648 4D          >                        ld		c,l
 172+ E649 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E64B DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E64D 79           l2D_setXLen:            ld		a,c                             ;
 175+ E64E                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E64E BB          >                        cp      e
 175+ E64F DA 5B E6    >                        jp		c, l2D_PosXLen
 176+ E652 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E653 93                                   sub     e                               ;
 178+ E654 32 44 E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E657 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E659 18 07                                jr		l2D_XINCDEC
 181+ E65B 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E65C 91                                   sub		c                               ;
 183+ E65D 32 44 E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E660 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E662 32 D1 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E665 32 01 E7                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E668 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E669 90                                   sub		b
 189+ E66A 32 42 E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E66D              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E66D 2A 42 E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E670 ED 5B 44 E3                          ld		de,(l2deltaX)
 193+ E674                                      ClearCarryFlag
 193+ E674 B7          >                        or a
 194+ E675 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E677 EB                                   ex		de,hl
 196+ E678 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E67A FD 6B                                ld		iyl,e
 198+ E67C F2 A1 E6                             jp		p,l2D_fracIsPositive
 199+ E67F              l2D_fracIsNegative:     NegIY
 199+ E67F AF          >                    xor a
 199+ E680 FD 95       >                    sub iyl
 199+ E682 FD 6F       >                    ld iyl,a
 199+ E684 9F          >                    sbc a,a
 199+ E685 FD 94       >                    sub iyh
 199+ E687 FD 67       >                    ld iyh,a
 200+ E689                                      ShiftIYRight1
 200+ E689 FD 7C       >			   ld 	a,iyh
 200+ E68B CB 3F       >			   srl 	a
 200+ E68D FD 67       >			   ld	iyh,a
 200+ E68F FD 7D       >			   ld 	a,iyl
 200+ E691 1F          >			   rra
 200+ E692 FD 6F       >			   ld	iyl,a
 201+ E694                                      NegIY
 201+ E694 AF          >                    xor a
 201+ E695 FD 95       >                    sub iyl
 201+ E697 FD 6F       >                    ld iyl,a
 201+ E699 9F          >                    sbc a,a
 201+ E69A FD 94       >                    sub iyh
 201+ E69C FD 67       >                    ld iyh,a
 202+ E69E C3 AC E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E6A1              l2D_fracIsPositive:     ShiftIYRight1
 203+ E6A1 FD 7C       >			   ld 	a,iyh
 203+ E6A3 CB 3F       >			   srl 	a
 203+ E6A5 FD 67       >			   ld	iyh,a
 203+ E6A7 FD 7D       >			   ld 	a,iyl
 203+ E6A9 1F          >			   rra
 203+ E6AA FD 6F       >			   ld	iyl,a
 204+ E6AC              l2D_SkipCalcInc:
 205+ E6AC C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E6AE 3A 4C E3                             ld		a,(l2linecolor)     			;
 207+ E6B1 CD 29 E1                             call	l2_plot_pixel       			; Plot Pixel
 208+ E6B4 D1 C1                                pop     bc,,de
 209+ E6B6 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E6B8                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E6B8 B8          >                        cp     b
 210+ E6B9 D2 BF E6    >                        jp		nc,l2D_CheckXPos
 211+ E6BC C3 C3 E6                             jp		l2D_Continue
 212+ E6BF 79           l2D_CheckXPos:          ld		a,c
 213+ E6C0                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E6C0 DD BD       >                        cp      ixl
 213+ E6C2 C8          >                        ret     z
 214+ E6C3              l2D_Continue:
 215+ E6C3 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E6C5 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6C7 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6C9 3A 42 E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6CC 16 00                                ld		d,0
 220+ E6CE 5F                                   ld		e,a
 221+ E6CF FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6D1 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6D2 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6D4 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6D6 FD B5                                or		iyl
 226+ E6D8                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6D8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6D9 CA F2 E6    >                        jp	    z, l2D_ErrZero
 227+ E6DC              l2D_ErrPositive:		lddeiy
 227+ E6DC FD 54       >                        ld		d,iyh
 227+ E6DE FD 5D       >                        ld		e,iyl
 228+ E6E0 EB                                   ex		de,hl
 229+ E6E1 16 00                                ld		d,0
 230+ E6E3 3A 44 E3                             ld		a,(l2deltaX)
 231+ E6E6 5F                                   ld		e,a
 232+ E6E7                                      ClearCarryFlag
 232+ E6E7 B7          >                        or a
 233+ E6E8 ED 52                                sbc		hl,de
 234+ E6EA EB                                   ex		de,hl
 235+ E6EB                                      ldiyde
 235+ E6EB FD 62       >                        ld		iyh,d
 235+ E6ED FD 6B       >                        ld		iyl,e
 236+ E6EF 04           l2D_adjustRow:			inc		b
 237+ E6F0 18 BA                                jr		l2D_Loop
 238+ E6F2 2A 44 E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6F5 EB                                   ex		de,hl
 240+ E6F6 2A 42 E3                             ld		hl,(l2deltaY)
 241+ E6F9                                      ClearCarryFlag
 241+ E6F9 B7          >                        or a
 242+ E6FA ED 52                                sbc		hl,de
 243+ E6FC EB                                   ex		de,hl
 244+ E6FD                                      ldiyde
 244+ E6FD FD 62       >                        ld		iyh,d
 244+ E6FF FD 6B       >                        ld		iyl,e
 245+ E701 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E702 04                                   inc		b
 247+ E703 18 A7                                jr		l2D_Loop
 248+ E705              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E705
 250+ E705
 251+ E705
 252+ E705
 253+ E705              ;Loin:				; BBC version of line draw
 254+ E705              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E705              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E705              ;	ld		ixh,0							; ixh = s
 257+ E705              ;	ld		iyh,0							; iyh = swap
 258+ E705              ;	ld		l,0								; l will hold delta sign flags
 259+ E705              ;LoinCalcDeltaX:
 260+ E705              ;	ld		a,e
 261+ E705              ;	sub		c								; a = deltaX
 262+ E705              ;	JumpIfPositive LoinPosDx
 263+ E705              ;LoinNegDx:
 264+ E705              ;	neg										; carry flag will indicate deltaX was negative
 265+ E705              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E705              ;LoinPosDx:
 267+ E705              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E705              ;LoinCalcDeltaY:
 269+ E705              ;	ld		a,d
 270+ E705              ;	sub		b								; a= deltaY
 271+ E705              ;	JumpIfPositive LoinPosDy
 272+ E705              ;LoinNegDy:
 273+ E705              ;	neg
 274+ E705              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E705              ;LoinPosDy:
 276+ E705              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E705              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E705              ;LoinSTPx:									; step along X
 279+ E705              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E705              ;LoinSTPxSwapCoords:
 281+ E705              ;	dec		iyh								; swap flag now becomes FF
 282+ E705              ;	ld		a,l								; save l flags
 283+ E705              ;	ex		de,hl							; save de to hl
 284+ E705              ;	lddebc									; Point2 = point1
 285+ E705              ;	ldbchl									; Point1 = point2 that was saved
 286+ E705              ;	ld		l,a								; get back l flags
 287+ E705              ;LoinSTPxCorrectOrder:
 288+ E705              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E705              ;	ld		a,iyl							; get delta Y back
 290+ E705              ;	ld		iy1,$FE							; roll counter
 291+ E705              ;LionSTPxRollQ:
 292+ E705              ;	sla		a								; highest bit of delta-Y
 293+ E705              ;	jp		c,LoinSTPxSteep
 294+ E705              ;	cp		ixl								; compare with DeltaX
 295+ E705              ;	jp		cs,LoinSTPxShallow
 296+ E705              ;LoinSTPxSteep:								;; LI4
 297+ E705              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E705              ;	scf										; force carry flag set
 299+ E705              ;LoinSTPxShallow:							;; LI5
 300+ E705              ;	rl		iyl								; rotate iyl which started as FE
 301+ E705              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E705              ;	inc		ihl								; DeltaX += 1
 303+ E705              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E705              ;	ld		a,d
 305+ E705              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E705              ;	ld		a,iyh							; swap flag
 307+ E705              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E705              ;LoinSTPxX1Dec:
 309+ E705              ;	dec		c								; move left 1 pixel as we sawped
 310+ E705              ;LoinSTPxXCounter:							;; LIL2
 311+ E705              ;	sub		b
 312+ E705              ;	if
 313+ E705              ;
 314+ E705              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E705              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E705              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E705              ;86 81                   STX &81		\ Q
 318+ E705              ;.LIL1	\ roll Q
 319+ E705              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E705              ;B0 04                   BCS LI4		\ steep
 321+ E705              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E705              ;90 03                   BCC LI5		\ shallow
 323+ E705              ;.LI4	\ steep
 324+ E705              ;E5 1B                   SBC &1B		\ P
 325+ E705              ;38                      SEC
 326+ E705              ;.LI5	\ shallow
 327+ E705              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E705              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E705              ;A6 1B                   LDX &1B		\ P
 330+ E705              ;E8                      INX 		\ Xreg is width
 331+ E705              ;A5 37                   LDA &37		\ Y2
 332+ E705              ;E5 35                   SBC &35		\ Y1
 333+ E705              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E705              ;A5 90                   LDA &90		\ SWAP
 335+ E705              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E705              ;CA                      DEX
 337+ E705              ;.LIL2	\ counter X width
 338+ E705              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E705              ;.LI6	\ Xreg correct
 342+ E705              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E705              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E705              ;66 82                   ROR &82		\ R
 345+ E705              ;A5 07                   LDA &07		\ SC
 346+ E705              ;69 08                   ADC #8		\ next column
 347+ E705              ;85 07                   STA &07		\ SC
 348+ E705              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E705              ;A5 83                   LDA &83		\ S
 350+ E705              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E705              ;85 83                   STA &83		\ S
 352+ E705              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E705              ;88                      DEY
 354+ E705              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E705              ;C6 08                   DEC &08		\ SC+1
 356+ E705              ;A0 07                   LDY #7
 357+ E705              ;.LIC2	\ skip Y adjustment
 358+ E705              ;CA                      DEX
 359+ E705              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E705              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E705              ;60                      RTS
 362+ E705              ;
 363+ E705              ;.DOWN	\ Line is going to the right and down
 364+ E705              ;A5 90                   LDA &90		\ SWAP
 365+ E705              ;F0 07                   BEQ LI9		\ no swap
 366+ E705              ;CA                      DEX
 367+ E705              ;.LIL3	\ counter X width
 368+ E705              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E705              ;.LI9	\ no swap
 372+ E705              ;46 82                   LSR &82		\ R
 373+ E705              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E705              ;66 82                   ROR &82		\ R
 375+ E705              ;A5 07                   LDA &07		\ SC
 376+ E705              ;69 08                   ADC #8		\ next column
 377+ E705              ;85 07                   STA &07		\ SC
 378+ E705              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E705              ;A5 83                   LDA &83		\ S
 380+ E705              ;65 81                   ADC &81		\ Q
 381+ E705              ;85 83                   STA &83		\ S
 382+ E705              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E705              ;C8                      INY
 384+ E705              ;C0 08                   CPY #8
 385+ E705              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E705              ;E6 08                   INC &08		\ SC+1
 387+ E705              ;A0 00                   LDY #0
 388+ E705              ;.LIC3	\ skipped Y adjustment
 389+ E705              ;CA                      DEX
 390+ E705              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E705              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E705              ;60                      RTS
 393+ E705              ;
 394+ E705              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E705              ;A4 35                   LDY &35		\ Y1
 396+ E705              ;98                      TYA
 397+ E705              ;A6 34                   LDX &34		\ X1
 398+ E705              ;C4 37                   CPY &37		\ Y2
 399+ E705              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E705              ;C6 90                   DEC &90		\ SWAP
 401+ E705              ;A5 36                   LDA &36		\ X2
 402+ E705              ;85 34                   STA &34		\ X1
 403+ E705              ;86 36                   STX &36		\ X2
 404+ E705              ;AA                      TAX
 405+ E705              ;A5 37                   LDA &37		\ Y2
 406+ E705              ;85 35                   STA &35		\ Y1
 407+ E705              ;84 37                   STY &37		\ Y2
 408+ E705              ;A8                      TAY
 409+ E705              ;.LI15	\ Y1 Y2 order is now correct
 410+ E705              ;4A                      LSR A
 411+ E705              ;4A                      LSR A
 412+ E705              ;4A                      LSR A
 413+ E705              ;09 60                   ORA #&60
 414+ E705              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E705              ;8A                      TXA 		\ X1
 416+ E705              ;29 F8                   AND #&F8
 417+ E705              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E705              ;8A                      TXA
 419+ E705              ;29 07                   AND #7		\ mask index
 420+ E705              ;AA                      TAX
 421+ E705              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E705              ;85 82                   STA &82	    \ R	\ mask
 423+ E705              ;A5 35                   LDA &35		\ Y1
 424+ E705              ;29 07                   AND #7
 425+ E705              ;A8                      TAY
 426+ E705              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E705              ;A2 01                   LDX #1		\ roll counter
 428+ E705              ;86 1B                   STX &1B	    	\ P
 429+ E705              ;.LIL4	\ roll P
 430+ E705              ;0A                      ASL A
 431+ E705              ;B0 04                   BCS LI13	\ do subtraction
 432+ E705              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E705              ;90 03                   BCC LI14	\ less than Q
 434+ E705              ;.LI13	\ do subtraction
 435+ E705              ;E5 81                   SBC &81		\ Q
 436+ E705              ;38                      SEC
 437+ E705              ;.LI14	\ less than Q
 438+ E705              ;26 1B                   ROL &1B		\ P
 439+ E705              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E705              ;A6 81                   LDX &81		\ Q
 441+ E705              ;E8                      INX 		\ adjust height
 442+ E705              ;A5 36                   LDA &36		\ X2
 443+ E705              ;E5 34                   SBC &34		\ X1
 444+ E705              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E705              ;18                      CLC
 446+ E705              ;A5 90                   LDA &90		\ SWAP
 447+ E705              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E705              ;CA                      DEX
 449+ E705              ;.LIL5	\ skipped first point, counter X
 450+ E705              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E705              ;.LI17	\ skipped first point
 454+ E705              ;88                      DEY
 455+ E705              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E705              ;C6 08                   DEC &08		\ SC+1
 457+ E705              ;A0 07                   LDY #7		\ new char
 458+ E705              ;	.LI16	\ skipped hi adjust
 459+ E705              ;A5 83                   LDA &83		\ S
 460+ E705              ;65 1B                   ADC &1B		\ P
 461+ E705              ;85 83                   STA &83		\ S
 462+ E705              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E705              ;46 82                   LSR &82	  \ R	\ mask
 464+ E705              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E705              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E705              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E705              ;69 08                   ADC #8		\ next char below
 468+ E705              ;85 07                   STA &07		\ SC
 469+ E705              ;.LIC5	\ same column
 470+ E705              ;CA                      DEX
 471+ E705              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E705              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E705              ;60                      RTS
 474+ E705              ;
 475+ E705              ;.LFT	\ going left
 476+ E705              ;A5 90                   LDA &90		\ SWAP
 477+ E705              ;F0 07                   BEQ LI18	\ skip first point
 478+ E705              ;CA                      DEX 		\ reduce height
 479+ E705              ;.LIL6	\ counter X height
 480+ E705              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E705              ;.LI18
 484+ E705              ;88                      DEY
 485+ E705              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E705              ;C6 08                   DEC &08		\ SC+1
 487+ E705              ;A0 07                   LDY #7		\ rest char row
 488+ E705              ;.LI19	\ skipped hi adjust
 489+ E705              ;A5 83                   LDA &83		\ S
 490+ E705              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E705              ;85 83                   STA &83		\ S
 492+ E705              ;90 0D                   BCC LIC6	\ no overflow
 493+ E705              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E705              ;90 09                   BCC LIC6	\ no overflow
 495+ E705              ;26 82                   ROL &82		\ R
 496+ E705              ;A5 07                   LDA &07		\ SC
 497+ E705              ;E9 07                   SBC #7		\ down 1 char
 498+ E705              ;85 07                   STA &07		\ SC
 499+ E705              ;18                      CLC
 500+ E705              ;.LIC6	\ no overflow
 501+ E705              ;CA                      DEX 		\ height
 502+ E705              ;D0 DB                   BNE LIL6	\ loop X
 503+ E705              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E705              ;.HL6
 505+ E705              ;60                      RTS 		\ end Line drawing
 506+ E705
 507+ E705
 508+ E705              ;;l2_draw_diagonalopt:
 509+ E705              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E705              ;;	push	af
 511+ E705              ;;	ld		a,b
 512+ E705              ;;	cp		d
 513+ E705              ;;	jr		z,.RegularDiagnonal
 514+ E705              ;;.CheckHorz:
 515+ E705              ;;	ld		a,c
 516+ E705              ;;	cp		e
 517+ E705              ;;	jr		z,.horizontalLine
 518+ E705              ;;.RegularDiagnonal:
 519+ E705              ;;	pop		af
 520+ E705              ;;	call diag
 521+ E705
 522+ E705
 523+ E705              ;;l2_signed_mul2a:
 524+ E705              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E705              ;;	TEST	$80
 526+ E705              ;;	jr		nz, .negativecalc
 527+ E705              ;;.positivecalc:
 528+ E705              ;;	ccf
 529+ E705              ;;	rla
 530+ E705              ;;	ret
 531+ E705              ;;.negativecalc:
 532+ E705              ;;	neg
 533+ E705              ;;	ccf
 534+ E705              ;;	rla
 535+ E705              ;;	neg
 536+ E705              ;;	ret
 537+ E705              ;;
 538+ E705              ;;l2_signed_mul2atohl:
 539+ E705              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E705              ;;	TEST	$80
 541+ E705              ;;	jr		nz, .negativecalc
 542+ E705              ;;.positivecalc:
 543+ E705              ;;	ld		hl,0
 544+ E705              ;;	ld		l,a
 545+ E705              ;;	add		hl,a
 546+ E705              ;;	ret
 547+ E705              ;;.negativecalc:
 548+ E705              ;;	neg
 549+ E705              ;;	ld		hl,0
 550+ E705              ;;	ld		l,a
 551+ E705              ;;	neghl
 552+ E705              ;;	ret
 553+ E705              ;;
 554+ E705              ;;l2_e2fractionby2:
 555+ E705              ;;	ld 		hl,(l2fraction)
 556+ E705              ;;	push	de
 557+ E705              ;;	ld		d,h
 558+ E705              ;;	ld		e,l
 559+ E705              ;;	add		hl,de
 560+ E705              ;;	pop		de
 561+ E705              ;;	ld		(l2e2),hl
 562+ E705              ;;	ret
 563+ E705
 564+ E705
 565+ E705
 566+ E705
 567+ E705
 568+ E705              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E705              ;;//.catchLoop:
 570+ E705              ;;//	jp .catchLoop
 571+ E705              ;;//.continue:
 572+ E705              ;;//    ld      A,D
 573+ E705              ;;//    sub     H
 574+ E705              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E705              ;;//.DXNegative:
 576+ E705              ;;//    neg
 577+ E705              ;;//.DXPositive:
 578+ E705              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E705              ;;//    ld      A,E
 580+ E705              ;;//    sub     L
 581+ E705              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E705              ;;//.DYNegative:
 583+ E705              ;;//    neg
 584+ E705              ;;//.DYPositive:
 585+ E705              ;;//    sub     B               ;|delta_y|
 586+ E705              ;;//	push	af
 587+ E705              ;;//	jr		c,.DeltaX
 588+ E705              ;;//.DeltaY
 589+ E705              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E705              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E705              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E705              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E705              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E705              ;;//    ld      E,A             			;instead of (x,y)
 595+ E705              ;;//.DeltaX:
 596+ E705              ;;//	ld		a,d
 597+ E705              ;;//	sub		h
 598+ E705              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E705              ;;//.TestDX:
 600+ E705              ;;//	ex		de,hl
 601+ E705              ;;//.TestDY:
 602+ E705              ;;//	ld		a,e
 603+ E705              ;;//	sub		l
 604+ E705              ;;//    ld      A,$01
 605+ E705              ;;//    jr      NC,.StoreA
 606+ E705              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E705              ;;//.StoreA:
 608+ E705              ;;//        ld      (l2way),A
 609+ E705              ;;//.InitLine:
 610+ E705              ;;//        ld      B,H
 611+ E705              ;;//        ld      C,L
 612+ E705              ;;//        ld      A,E
 613+ E705              ;;//        sub     L
 614+ E705              ;;//        jr      NC,.EndInit
 615+ E705              ;;//        ld      A,L
 616+ E705              ;;//        ld      L,E
 617+ E705              ;;//        ld      E,A
 618+ E705              ;;//.EndInit:
 619+ E705              ;;//        ld      A,E
 620+ E705              ;;//        sub     L
 621+ E705              ;;//        rla
 622+ E705              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E705              ;;//        add     A,H
 624+ E705              ;;//        sub     D
 625+ E705              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E705              ;;//        add     A,H
 627+ E705              ;;//        sub     D
 628+ E705              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E705              ;;//.Loop:
 630+ E705              ;;//        ld      A,B
 631+ E705              ;;//        sub     D
 632+ E705              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E705              ;;//        pop     AF
 634+ E705              ;;//        bit     7,A
 635+ E705              ;;//        push    AF
 636+ E705              ;;//        push    AF
 637+ E705              ;;//        push    BC
 638+ E705              ;;//        jr      Z,.DrawPoint
 639+ E705              ;;//        ld      A,B
 640+ E705              ;;//        ld      B,C
 641+ E705              ;;//        ld      C,A
 642+ E705              ;;//.DrawPoint:
 643+ E705              ;;//		push	hl
 644+ E705              ;;//		pushbcdeaf
 645+ E705              ;;//		ld		b,e
 646+ E705              ;;//		ld		c,d
 647+ E705              ;;//	ld 		a,(l2linecolor)
 648+ E705              ;;//	call	l2_plot_pixel
 649+ E705              ;;//		popafdebc
 650+ E705              ;;//		pop		hl
 651+ E705              ;;//        pop     BC
 652+ E705              ;;//        pop     AF
 653+ E705              ;;//.TestD:
 654+ E705              ;;//        bit     7,E
 655+ E705              ;;//        jr      NZ,.Case1
 656+ E705              ;;//.Case2:                          ;d >= 0
 657+ E705              ;;//        ld      A,E
 658+ E705              ;;//        add     A,H
 659+ E705              ;;//        ld      E,A
 660+ E705              ;;//        ld      A,(l2way)
 661+ E705              ;;//        add     A,C
 662+ E705              ;;//        ld      C,A
 663+ E705              ;;//        jr      .EndLoop
 664+ E705              ;;//.Case1:                          ;d < 0
 665+ E705              ;;//        ld      A,E
 666+ E705              ;;//        add     A,L
 667+ E705              ;;//        ld      E,A
 668+ E705              ;;//.EndLoop:
 669+ E705              ;;//        inc     B
 670+ E705              ;;//        jr      .Loop
 671+ E705              ;;//.EndLine:
 672+ E705              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E705              ;;//        pop     HL              ;can be removed
 674+ E705              ;;//        pop     DE              ;can be removed
 675+ E705              ;;//        ret
 676+ E705
 677+ E705              ;;	ld		(.l2yadjust),a
 678+ E705              ;;	call	calcdeltax:
 679+ E705              ;;	ld		(.l2xadjust),a
 680+ E705              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E705              ;;	push	hl
 682+ E705              ;;	push	de
 683+ E705              ;;	ld		hl,(l2deltaX)
 684+ E705              ;;	ld		de,(l2deltaY)
 685+ E705              ;;	add		hl,de
 686+ E705              ;;	ld		(l2fraction),hl
 687+ E705              ;;	pop		de
 688+ E705              ;;	pop		hl
 689+ E705              ;;.mainloop:
 690+ E705              ;;	push	bc
 691+ E705              ;;	push	de
 692+ E705              ;;	ld 		a,(l2linecolor)
 693+ E705              ;;	call	l2_plot_pixel
 694+ E705              ;;	pop		de
 695+ E705              ;;	pop		bc
 696+ E705              ;;.arewefinishedtest
 697+ E705              ;;	ld		a,b
 698+ E705              ;;	cp		d
 699+ E705              ;;	jr		nz,.notthereyet
 700+ E705              ;;	ld		a,c
 701+ E705              ;;	cp		e
 702+ E705              ;;	ret		z
 703+ E705              ;;.notthereyet:
 704+ E705              ;;	push	de
 705+ E705              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E705              ;;	pop		de
 707+ E705              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E705              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E705              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E705              ;;	or		a							;
 711+ E705              ;;	sbc		hl,de						;
 712+ E705              ;;	pop		de
 713+ E705              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E705              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E705              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E705              ;;.dodycalc:
 717+ E705              ;;	ld		hl,(l2fraction)
 718+ E705              ;;	push	de
 719+ E705              ;;	ld		de,(l2deltaY)
 720+ E705              ;;	add		hl,de
 721+ E705              ;;	ld		(l2fraction),de
 722+ E705              ;;	pop		de
 723+ E705              ;;.l2yadjust:
 724+ E705              ;;	nop
 725+ E705              ;;.skipdycalc:
 726+ E705              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E705              ;;	ld		hl,(l2e2)
 728+ E705              ;;	push	de							;
 729+ E705              ;;	ld		de,(l2deltaX)				;
 730+ E705              ;;	or		a							; clear carry flag
 731+ E705              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E705              ;;	pop		de
 733+ E705              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E705              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E705              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E705              ;;.dodxcalc:
 737+ E705              ;;	ld		hl,(l2fraction)
 738+ E705              ;;	push	de
 739+ E705              ;;	ld		de,(l2deltaX)
 740+ E705              ;;	add		hl,de
 741+ E705              ;;	ld		(l2fraction),de
 742+ E705              ;;	pop		de
 743+ E705              ;;.l2xadjust:
 744+ E705              ;;	nop
 745+ E705              ;;.skipdxcalc:
 746+ E705              ;;	jr 		.mainloop
 747+ E705
 748+ E705
 749+ E705              ;;/l2_draw_diagonalold:
 750+ E705              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E705              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E705              ;;/.sortycoords:
 753+ E705              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E705              ;;/	cp		d
 755+ E705              ;;/	jr		nc, .nocoordswap
 756+ E705              ;;/.swapcoords:
 757+ E705              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E705              ;;/	lddebc
 759+ E705              ;;/	ldbchl
 760+ E705              ;;/.nocoordswap:
 761+ E705              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E705              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E705              ;;/	ld		(l2deltaY),a
 764+ E705              ;;/	neg									; DEBUG
 765+ E705              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E705              ;;/	neg									; DEBUG
 767+ E705              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E705              ;;/    ld		a,c
 769+ E705              ;;/	cp		e
 770+ E705              ;;/	jr		c, .x1GTx0
 771+ E705              ;;/.x1LTx0
 772+ E705              ;;/	ld		a,c
 773+ E705              ;;/	sub		e
 774+ E705              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E705              ;;/	neg									; DEBUG
 776+ E705              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E705              ;;/	neg									; DEBUG
 778+ E705              ;;/	ld		a,l2incbstep
 779+ E705              ;;/	jr		.setlayershift0
 780+ E705              ;;/.x1GTx0:
 781+ E705              ;;/	ld		a,e
 782+ E705              ;;/	sub		c
 783+ E705              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E705              ;;/	neg									; DEBUG
 785+ E705              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E705              ;;/	neg									; DEBUG
 787+ E705              ;;/	ld		a,l2decbstep
 788+ E705              ;;/.setlayershift0:
 789+ E705              ;;/	ld		a,0
 790+ E705              ;;/	pushbcde
 791+ E705              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E705              ;;/	popdebc
 793+ E705              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E705              ;;/.dymuliplyby2:
 795+ E705              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E705              ;;/	call	l2_signed_mul2a
 797+ E705              ;;/	ld		(l2deltaYsq),a
 798+ E705              ;;/	neg									; DEBUG
 799+ E705              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E705              ;;/	neg									; DEBUG
 801+ E705              ;;/.dxmuliplyby2:
 802+ E705              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E705              ;;/	call	l2_signed_mul2a
 804+ E705              ;;/	ld		(l2deltaXsq),a
 805+ E705              ;;/	neg									; DEBUG
 806+ E705              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E705              ;;/	neg									; DEBUG
 808+ E705              ;;/.plotfirstpixel:
 809+ E705              ;;/	pushbcde
 810+ E705              ;;/	ld a,(l2linecolor)
 811+ E705              ;;/	call	l2_plot_pixel
 812+ E705              ;;/	popdebc
 813+ E705              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E705              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E705              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E705              ;;/	cp		(hl)
 817+ E705              ;;/	jp		m,	.signset
 818+ E705              ;;/.signclear:
 819+ E705              ;;/	jp		pe,	.dxLTEdybranch
 820+ E705              ;;/	jr		.dxGTdybranch
 821+ E705              ;;/.signset:
 822+ E705              ;;/	jp		po,	.dxLTEdybranch
 823+ E705              ;;/.dxGTdybranch:
 824+ E705              ;;/	ld		a,(l2deltaYsq)
 825+ E705              ;;/	ld		hl,l2deltaX
 826+ E705              ;;/	sub		(hl)
 827+ E705              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E705              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E705              ;;/	ld		a,c
 830+ E705              ;;/	cp		e
 831+ E705              ;;/	ret		z							; if x0 = x1 then done
 832+ E705              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E705              ;;/	ld		a,(l2fraction)
 834+ E705              ;;/	TEST	$80
 835+ E705              ;;/	jr		nz,.BranchAskipYstep
 836+ E705              ;;/	inc		b							; 		++l2_vy0;
 837+ E705              ;;/	ld		hl,l2deltaXsq
 838+ E705              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E705              ;;/	ld		(l2fraction),a
 840+ E705              ;;/.BranchAskipYstep:
 841+ E705              ;;/.l2stepx1:
 842+ E705              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E705              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E705              ;;/	ld		hl,l2deltaYsq
 845+ E705              ;;/	add		a,(hl)
 846+ E705              ;;/	ld		(l2fraction),a
 847+ E705              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E705              ;;/	pushbcde
 849+ E705              ;;/	ld a,(l2linecolor)
 850+ E705              ;;/	call	l2_plot_pixel
 851+ E705              ;;/	popdebc
 852+ E705              ;;/.BranchAloop:
 853+ E705              ;;/	jr		.BranchAwhile
 854+ E705              ;;/.dxLTEdybranch:
 855+ E705              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E705              ;;/	ld		hl, l2deltaY
 857+ E705              ;;/	sub		(hl)
 858+ E705              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E705              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E705              ;;/	ld		a,b
 861+ E705              ;;/	cp		d
 862+ E705              ;;/	ret		z							; if x0 = x1 then done
 863+ E705              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E705              ;;/	ld		a,(l2fraction)
 865+ E705              ;;/	TEST	$80
 866+ E705              ;;/	jr		nz,.BranchBskipYstep
 867+ E705              ;;/.l2stepx2
 868+ E705              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E705              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E705              ;;/	ld		hl,l2deltaYsq
 871+ E705              ;;/	sub		(hl)
 872+ E705              ;;/	ld		(l2fraction),a
 873+ E705              ;;/.BranchBskipYstep:
 874+ E705              ;;/	ld		hl, l2deltaYsq
 875+ E705              ;;/	add		a,(hl)
 876+ E705              ;;/	ld		(l2fraction),a
 877+ E705              ;;/	inc		b							; ++l2_vy0;
 878+ E705              ;;/.BranchBplotBCColA:
 879+ E705              ;;/	pushbcde
 880+ E705              ;;/	ld a,(l2linecolor)
 881+ E705              ;;/	call	l2_plot_pixel
 882+ E705              ;;/	popdebc
 883+ E705              ;;/.BranchBloop:
 884+ E705              ;;/	jr		.BranchBwhile
 885+ E705
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1352  E705                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E705
   2+ E705
   3+ E705
   4+ E705 00 00        l2trianglebc	        DW 0
   5+ E707 00 00        l2trianglede	        DW 0
   6+ E709 00 00        l2trianglehl	        DW 0
   7+ E70B
   8+ E70B              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E70B C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E70F CD 33 E6                             call	l2_draw_diagonal		; BC to DE
  11+ E712 F1                                   pop		af
  12+ E713 D1                                   pop		de						; swap DE and HL
  13+ E714 E1                                   pop		hl						; so BC to DE is really to HL
  14+ E715 C1                                   pop		bc
  15+ E716 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E718 F5                                   push	af
  17+ E719 CD 33 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E71C F1                                   pop		af
  19+ E71D C1                                   pop		bc						; Now bc = original de
  20+ E71E D1                                   pop		de						; de = original hl
  21+ E71F CD 33 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E722 C9                                   ret
  23+ E723
  24+ E723
  25+ E723
  26+ E723
  27+ E723
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1353  E723                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E723              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E723              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E723              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E723 DD 01        l2_fillBottomFlatTriangle:break
   5+ E725 7D                                   ld		a,l
   6+ E726 32 4C E3                             ld		(l2linecolor),a
   7+ E729 79                                   ld		a,c
   8+ E72A BB                                   cp		e
   9+ E72B 30 08                                jr		nc, .x2gtex1
  10+ E72D DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E730 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E733 18 06                                jr		.storepoints
  13+ E735 DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E738 DD 2E 01                             ld		ixl,1
  15+ E73B C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E73E DD 7C                                ld		a,ixh
  17+ E740 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E741 54                                   ld		d,h
  19+ E742 CD 54 E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E745 E1 D1 C1                             pop		bc,,de,,hl
  21+ E748 C5 E5                                push	bc,,hl
  22+ E74A 54                                   ld		d,h                             ; now its bc -> he
  23+ E74B DD 7D                                ld		a,ixl
  24+ E74D CD 54 E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E750 E1 C1                                pop		bc,,hl
  26+ E752 50           .SaveForLoop:           ld		d,b
  27+ E753 5C                                   ld		e,h								; save loop counters
  28+ E754 D5                                   push	de								; de = y0ycommon
  29+ E755 21 54 E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E758 78                                   ld		a,b
  31+ E759 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E75B 7E                                   ld		a,(hl)							;
  33+ E75C 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E75D 21 54 E4                             ld      hl,l2targetArray2
  35+ E760 78                                   ld      a,b
  36+ E761 ED 31                                add     hl,a
  37+ E763              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E763 7E                                   ld		a,(hl)
  39+ E764 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E765 3A 4C E3     .SetColour:             ld		a,(l2linecolor)
  41+ E768 5F                                   ld		e,a								; de = to colour
  42+ E769 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E76A 25                                   dec		h
  44+ E76B E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E76C CD B6 E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E76F E1                                   pop		hl
  47+ E770 C1                                   pop		bc
  48+ E771 04                                   inc		b								; down a rowc
  49+ E772 D1                                   pop		de								; de = from to (and b also = current)
  50+ E773 14                                   inc		d
  51+ E774 7B                                   ld		a,e								; while e >= d
  52+ E775 BA                                   cp		d
  53+ E776 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E778 C9                                   ret
  55+ E779
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1354  E779                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E779
   2+ E779 00 00        l2_circle_pos		DW 0
   3+ E77B 00           l2_circle_colour	DB 0
   4+ E77C 00           l2_circle_radius	DB 0
   5+ E77D 00           l2_circle_x			DB 0
   6+ E77E 00           l2_circle_y			DB 0
   7+ E77F 00           l2_circle_d			DB 0
   8+ E780
   9+ E780              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E780 7B           l2_draw_circle:     ld		a,e
  11+ E781 32 27 E8                         ld		(.PlotPixel+1),a
  12+ E784 7A                               ld		a,d								; get radius
  13+ E785 A7                               and		a
  14+ E786 C8                               ret		z
  15+ E787 FE 01                            cp		1
  16+ E789 CA 32 E8                         jp		z,CircleSinglepixel
  17+ E78C ED 43 B6 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E790 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E792 DD 2E 00                         ld		ixl,0
  20+ E795 26 00        .calcd:	            ld		h,0
  21+ E797 6F                               ld		l,a
  22+ E798 29                               add		hl,hl							; hl = r * 2
  23+ E799 EB                               ex		de,hl							; de = r * 2
  24+ E79A 21 03 00                         ld		hl,3
  25+ E79D A7                               and		a
  26+ E79E ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E7A0 44                               ld		b,h
  28+ E7A1 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E7A2 21 01 00     .calcdelta:         ld		hl,1
  30+ E7A5 16 00                            ld		d,0
  31+ E7A7 DD 5D                            ld		e,ixl
  32+ E7A9 A7                               and		a
  33+ E7AA ED 52                            sbc		hl,de
  34+ E7AC 11 01 00     .Setde1:            ld		de,1
  35+ E7AF DD 7C        .CircleLoop:        ld		a,ixh
  36+ E7B1 DD BD                            cp		ixl
  37+ E7B3 D8                               ret		c
  38+ E7B4 D9           .ProcessLoop:	    exx
  39+ E7B5 11 00 00     .Plot1:             ld		de,0
  40+ E7B8 7B                               ld		a,e
  41+ E7B9 DD 85                            add		a,ixl
  42+ E7BB 4F                               ld		c,a
  43+ E7BC 7A                               ld		a,d
  44+ E7BD DD 84                            add		a,ixh
  45+ E7BF 47                               ld		b,a
  46+ E7C0 CD 26 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E7C3 7B           .Plot2:             ld 		a,e
  48+ E7C4 DD 95                            sub 	ixl
  49+ E7C6 4F                               ld 		c,a
  50+ E7C7 7A                               ld 		a,d
  51+ E7C8 DD 84                            add 	a,ixh
  52+ E7CA 47                               ld		b,a
  53+ E7CB CD 26 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7CE 7B           .Plot3:             ld 		a,e
  55+ E7CF DD 85                            add		a,ixl
  56+ E7D1 4F                               ld 		c,a
  57+ E7D2 7A                               ld 		a,d
  58+ E7D3 DD 94                            sub 	ixh
  59+ E7D5 47                               ld 		b,a
  60+ E7D6 CD 26 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7D9 7B           .Plot4:             ld 		a,e
  62+ E7DA DD 95                            sub 	ixl
  63+ E7DC 4F                               ld 		c,a
  64+ E7DD 7A                               ld 		a,d
  65+ E7DE DD 94                            sub 	ixh
  66+ E7E0 47                               ld 		b,a
  67+ E7E1 CD 26 E8                         call	.PlotPixel			;CX-X,CY-Y
  68+ E7E4 7A           .Plot5:	            ld 		a,d
  69+ E7E5 DD 85                            add 	a,ixl
  70+ E7E7 47                               ld 		b,a
  71+ E7E8 7B                               ld 		a,e
  72+ E7E9 DD 84                            add 	a,ixh
  73+ E7EB 4F                               ld 		c,a
  74+ E7EC CD 26 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7EF 7A           .Plot6:	            ld 		a,d
  76+ E7F0 DD 95                            sub 	ixl
  77+ E7F2 47                               ld 		b,a
  78+ E7F3 7B                               ld 		a,e
  79+ E7F4 DD 84                            add 	a,ixh
  80+ E7F6 4F                               ld 		c,a
  81+ E7F7 CD 26 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7FA 7A           .Plot7:	            ld 		a,d
  83+ E7FB DD 85                            add 	a,ixl
  84+ E7FD 47                               ld 		b,a
  85+ E7FE 7B                               ld 		a,e
  86+ E7FF DD 94                            sub 	ixh
  87+ E801 4F                               ld 		c,a
  88+ E802 CD 26 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E805 7A           .Plot8:	            ld 		a,d
  90+ E806 DD 95                            sub 	ixl
  91+ E808 47                               ld		b,a
  92+ E809 7B                               ld 		a,e
  93+ E80A DD 94                            sub 	ixh
  94+ E80C 4F                               ld 		c,a
  95+ E80D CD 26 E8                         call	.PlotPixel			;CY-X,CX-Y
  96+ E810 D9                               exx
  97+ E811 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E813 28 03                            jr z,   .draw_circle_1
  99+ E815 19                               add hl,de			; Delta=Delta+D1
 100+ E816 18 05                            jr      .draw_circle_2		;
 101+ E818 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E819 03                               inc     bc
 103+ E81A 03                               inc     bc				; D2=D2+2
 104+ E81B DD 25                            dec     ixh				; Y=Y-1
 105+ E81D 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E81E 03                               inc bc
 107+ E81F 13                               inc de				; D1=D1+2
 108+ E820 13                               inc de
 109+ E821 DD 2C                            inc ixl				; X=X+1
 110+ E823 C3 AF E7                         jp      .CircleLoop
 111+ E826 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E828 D5 C5 E5                         push	de,,bc,,hl
 113+ E82B CD 43 E1                         call 	l2_plot_pixel_y_test
 114+ E82E E1 C1 D1                         pop		de,,bc,,hl
 115+ E831 C9                               ret
 116+ E832 7B           CircleSinglepixel:  ld		a,e
 117+ E833 CD 43 E1                         call	l2_plot_pixel_y_test
 118+ E836 C9                               ret
 119+ E837
 120+ E837              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 121+ E837 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 122+ E838 32 B0 E9                         ld		(.PlotPixel+1),a
 123+ E83B 79                               ld		a,c								; get radius
 124+ E83C                                  ReturnIfAIsZero
 124+ E83C A7          >                        and     a
 124+ E83D C8          >                        ret     z
 125+ E83E                                  JumpIfAEqNusng  1, .circleSinglepixel
 125+ E83E FE 01       >                        cp     1
 125+ E840 CA BD E9    >                        jp      z,.circleSinglepixel
 126+ E843 ED 53 70 E8                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 127+ E847 22 73 E8                         ld      (.Plot1X+1),hl                  ; .
 128+ E84A DD 67                            ld		ixh,a							; ixh = raidus
 129+ E84C DD 2E 00                         ld		ixl,0						    ; ixl = 0
 130+ E84F 26 00        .calcd:	            ld		h,0                             ; hl = radius
 131+ E851 6F                               ld		l,a                             ; .
 132+ E852 29                               add		hl,hl							; hl = r * 2
 133+ E853 EB                               ex		de,hl							; de = r * 2
 134+ E854 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 135+ E857 A7                               and		a                               ; .
 136+ E858 ED 52                            sbc		hl,de							; .
 137+ E85A 44                               ld		b,h                             ; bc = 3 - (r * 2)
 138+ E85B 4D                               ld		c,l								; .
 139+ E85C 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 140+ E85F 16 00                            ld		d,0                             ; de = ixl
 141+ E861 DD 5D                            ld		e,ixl                           ;
 142+ E863 A7                               and		a                               ;
 143+ E864 ED 52                            sbc		hl,de                           ; hl = 1 - radius
 144+ E866 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 145+ E869              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 145+ E869 DD 7C       >                        ld      a,ixh
 145+ E86B DD BD       >                        cp      ixl
 145+ E86D D8          >                        ret	    c
 146+ E86E D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 147+ E86F 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 148+ E872 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 149+ E875 E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 150+ E878 06 00                            ld      b,0
 151+ E87A DD 4D                            ld      c,ixl
 152+ E87C                                  ClearCarryFlag
 152+ E87C B7          >                        or a
 153+ E87D ED 4A                            adc     hl,bc
 154+ E87F C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 155+ E880                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 155+ E880 7C          >                        ld      a,h
 155+ E881 A7          >                        and     a
 155+ E882 C2 97 E8    >                        jp	    nz,.Plot1Done
 156+ E885 EB                               ex      de,hl                           ; now de = x coord calculated
 157+ E886 C5                               push    bc                              ; + 3
 158+ E887                                  ClearCarryFlag
 158+ E887 B7          >                        or a
 159+ E888 06 00                            ld      b,0
 160+ E88A DD 4D                            ld      c,ixl
 161+ E88C ED 4A                            adc     hl,bc
 162+ E88E C1                               pop     bc                              ; + 2
 163+ E88F                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 163+ E88F 7C          >                        ld      a,h
 163+ E890 A7          >                        and     a
 163+ E891 C2 97 E8    >                        jp	    nz,.Plot1Done
 164+ E894 CD AF E9                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 165+ E897 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 166+ E899 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 167+ E89C 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 168+ E89E DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 169+ E8A0                                  ClearCarryFlag                          ;                              plot6        for cy - x
 169+ E8A0 B7          >                        or a
 170+ E8A1 ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 171+ E8A3 C1                               pop     bc                              ;
 172+ E8A4                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 172+ E8A4 7C          >                        ld      a,h
 172+ E8A5 A7          >                        and     a
 172+ E8A6 C2 BB E8    >                        jp	    nz,.Plot2Done
 173+ E8A9 EB                               ex      de,hl
 174+ E8AA C5                               push    bc
 175+ E8AB 06 00                            ld      b,0
 176+ E8AD DD 4D                            ld      c,ixl
 177+ E8AF                                  ClearCarryFlag
 177+ E8AF B7          >                        or a
 178+ E8B0 ED 4A                            adc     hl,bc
 179+ E8B2 C1                               pop     bc
 180+ E8B3                                  JumpIfRegIsNotZero  h,.Plot2Done
 180+ E8B3 7C          >                        ld      a,h
 180+ E8B4 A7          >                        and     a
 180+ E8B5 C2 BB E8    >                        jp	    nz,.Plot2Done
 181+ E8B8 CD AF E9                         call	.PlotPixel	                    ; CX-X,CY+Y
 182+ E8BB E1 D1        .Plot2Done:         pop     de,,hl
 183+ E8BD E5 D5 C5     .Plot3:             push    hl,,de,,bc
 184+ E8C0 06 00                            ld      b,0
 185+ E8C2 DD 4D                            ld      c,ixl
 186+ E8C4                                  ClearCarryFlag
 186+ E8C4 B7          >                        or a
 187+ E8C5 ED 4A                            adc     hl,bc
 188+ E8C7 C1                               pop     bc
 189+ E8C8                                  JumpIfRegIsNotZero  h,.Plot3Done
 189+ E8C8 7C          >                        ld      a,h
 189+ E8C9 A7          >                        and     a
 189+ E8CA C2 DF E8    >                        jp	    nz,.Plot3Done
 190+ E8CD EB                               ex      de,hl
 191+ E8CE C5                               push    bc
 192+ E8CF 06 00                            ld      b,0
 193+ E8D1 DD 4D                            ld      c,ixl
 194+ E8D3                                  ClearCarryFlag
 194+ E8D3 B7          >                        or a
 195+ E8D4 ED 42                            sbc     hl,bc
 196+ E8D6 C1                               pop     bc
 197+ E8D7                                  JumpIfRegIsNotZero  h,.Plot3Done
 197+ E8D7 7C          >                        ld      a,h
 197+ E8D8 A7          >                        and     a
 197+ E8D9 C2 DF E8    >                        jp	    nz,.Plot3Done
 198+ E8DC CD AF E9                         call	.PlotPixel	                    ; CX+X,CY-Y
 199+ E8DF E1 D1        .Plot3Done:         pop     de,,hl
 200+ E8E1 E5 D5 C5     .Plot4:             push    hl,,de,,bc
 201+ E8E4 06 00                            ld      b,0
 202+ E8E6 DD 4D                            ld      c,ixl
 203+ E8E8                                  ClearCarryFlag
 203+ E8E8 B7          >                        or a
 204+ E8E9 ED 42                            sbc     hl,bc
 205+ E8EB C1                               pop     bc
 206+ E8EC                                  JumpIfRegIsNotZero  h,.Plot4Done
 206+ E8EC 7C          >                        ld      a,h
 206+ E8ED A7          >                        and     a
 206+ E8EE C2 03 E9    >                        jp	    nz,.Plot4Done
 207+ E8F1 EB                               ex      de,hl
 208+ E8F2 C5                               push    bc
 209+ E8F3 06 00                            ld      b,0
 210+ E8F5 DD 4D                            ld      c,ixl
 211+ E8F7                                  ClearCarryFlag
 211+ E8F7 B7          >                        or a
 212+ E8F8 ED 42                            sbc     hl,bc
 213+ E8FA C1                               pop     bc
 214+ E8FB                                  JumpIfRegIsNotZero  h,.Plot4Done
 214+ E8FB 7C          >                        ld      a,h
 214+ E8FC A7          >                        and     a
 214+ E8FD C2 03 E9    >                        jp	    nz,.Plot4Done
 215+ E900 CD AF E9                         call	.PlotPixel	                    ; CX-X,CY-Y
 216+ E903 E1 D1        .Plot4Done:         pop     de,,hl
 217+ E905 EB           .Plot5:             ex      de,hl
 218+ E906 E5 D5 C5                         push    hl,,de,,bc
 219+ E909 06 00                            ld      b,0
 220+ E90B DD 4D                            ld      c,ixl
 221+ E90D                                  ClearCarryFlag
 221+ E90D B7          >                        or a
 222+ E90E ED 4A                            adc     hl,bc
 223+ E910 C1                               pop     bc
 224+ E911                                  JumpIfRegIsNotZero  h,.Plot5Done
 224+ E911 7C          >                        ld      a,h
 224+ E912 A7          >                        and     a
 224+ E913 C2 28 E9    >                        jp	    nz,.Plot5Done
 225+ E916 EB                               ex      de,hl
 226+ E917 C5                               push    bc
 227+ E918 06 00                            ld      b,0
 228+ E91A DD 4D                            ld      c,ixl
 229+ E91C                                  ClearCarryFlag
 229+ E91C B7          >                        or a
 230+ E91D ED 4A                            adc     hl,bc
 231+ E91F C1                               pop     bc
 232+ E920                                  JumpIfRegIsNotZero  h,.Plot5Done
 232+ E920 7C          >                        ld      a,h
 232+ E921 A7          >                        and     a
 232+ E922 C2 28 E9    >                        jp	    nz,.Plot5Done
 233+ E925 CD AF E9                         call	.PlotPixel	                    ;CY+X,CX+Y
 234+ E928 E1 D1        .Plot5Done:         pop     de,,hl
 235+ E92A EB           .Plot6:             ex      de,hl
 236+ E92B E5 D5 C5                         push    hl,,de,,bc
 237+ E92E 06 00                            ld      b,0
 238+ E930 DD 4D                            ld      c,ixl
 239+ E932                                  ClearCarryFlag
 239+ E932 B7          >                        or a
 240+ E933 ED 42                            sbc     hl,bc
 241+ E935 C1                               pop     bc
 242+ E936                                  JumpIfRegIsNotZero  h,.Plot6Done
 242+ E936 7C          >                        ld      a,h
 242+ E937 A7          >                        and     a
 242+ E938 C2 4D E9    >                        jp	    nz,.Plot6Done
 243+ E93B EB                               ex      de,hl
 244+ E93C C5                               push    bc
 245+ E93D 06 00                            ld      b,0
 246+ E93F DD 4D                            ld      c,ixl
 247+ E941                                  ClearCarryFlag
 247+ E941 B7          >                        or a
 248+ E942 ED 4A                            adc     hl,bc
 249+ E944 C1                               pop     bc
 250+ E945                                  JumpIfRegIsNotZero  h,.Plot6Done
 250+ E945 7C          >                        ld      a,h
 250+ E946 A7          >                        and     a
 250+ E947 C2 4D E9    >                        jp	    nz,.Plot6Done
 251+ E94A CD AF E9                         call	.PlotPixel	                    ; CY-X,CX+Y
 252+ E94D E1 D1        .Plot6Done:         pop     de,,hl
 253+ E94F EB           .Plot7:             ex      de,hl
 254+ E950 E5 D5 C5                         push    hl,,de,,bc
 255+ E953 06 00                            ld      b,0
 256+ E955 DD 4D                            ld      c,ixl
 257+ E957                                  ClearCarryFlag
 257+ E957 B7          >                        or a
 258+ E958 ED 4A                            adc     hl,bc
 259+ E95A C1                               pop     bc
 260+ E95B                                  JumpIfRegIsNotZero  h,.Plot7Done
 260+ E95B 7C          >                        ld      a,h
 260+ E95C A7          >                        and     a
 260+ E95D C2 72 E9    >                        jp	    nz,.Plot7Done
 261+ E960 EB                               ex      de,hl
 262+ E961 C5                               push    bc
 263+ E962 06 00                            ld      b,0
 264+ E964 DD 4D                            ld      c,ixl
 265+ E966                                  ClearCarryFlag
 265+ E966 B7          >                        or a
 266+ E967 ED 42                            sbc     hl,bc
 267+ E969 C1                               pop     bc
 268+ E96A                                  JumpIfRegIsNotZero  h,.Plot7Done
 268+ E96A 7C          >                        ld      a,h
 268+ E96B A7          >                        and     a
 268+ E96C C2 72 E9    >                        jp	    nz,.Plot7Done
 269+ E96F CD AF E9                         call	.PlotPixel	                    ; CY+X,CX-Y
 270+ E972 E1 D1        .Plot7Done:         pop     de,,hl
 271+ E974 EB           .Plot8:             ex      de,hl
 272+ E975 E5 D5 C5                         push    hl,,de,,bc
 273+ E978 06 00                            ld      b,0
 274+ E97A DD 4D                            ld      c,ixl
 275+ E97C                                  ClearCarryFlag
 275+ E97C B7          >                        or a
 276+ E97D ED 42                            sbc     hl,bc
 277+ E97F C1                               pop     bc
 278+ E980                                  JumpIfRegIsNotZero  h,.Plot8Done
 278+ E980 7C          >                        ld      a,h
 278+ E981 A7          >                        and     a
 278+ E982 C2 97 E9    >                        jp	    nz,.Plot8Done
 279+ E985 EB                               ex      de,hl
 280+ E986 C5                               push    bc
 281+ E987 06 00                            ld      b,0
 282+ E989 DD 4D                            ld      c,ixl
 283+ E98B                                  ClearCarryFlag
 283+ E98B B7          >                        or a
 284+ E98C ED 42                            sbc     hl,bc
 285+ E98E C1                               pop     bc
 286+ E98F                                  JumpIfRegIsNotZero  h,.Plot8Done
 286+ E98F 7C          >                        ld      a,h
 286+ E990 A7          >                        and     a
 286+ E991 C2 97 E9    >                        jp	    nz,.Plot8Done
 287+ E994 CD AF E9                         call	.PlotPixel	                    ; CY-X,CX-Y
 288+ E997 E1 D1        .Plot8Done:         pop     de,,hl
 289+ E999 D9           .PlotDone:          exx
 290+ E99A CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 291+ E99C 28 03                            jr z,   .draw_circle_1
 292+ E99E 19                               add hl,de			; Delta=Delta+D1
 293+ E99F 18 05                            jr      .draw_circle_2		;
 294+ E9A1 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 295+ E9A2 03                               inc     bc
 296+ E9A3 03                               inc     bc				; D2=D2+2
 297+ E9A4 DD 25                            dec     ixh				; Y=Y-1
 298+ E9A6 03           .draw_circle_2:		inc     bc				; D2=D2+2
 299+ E9A7 03                               inc     bc
 300+ E9A8 13                               inc     de				; D1=D1+2
 301+ E9A9 13                               inc     de
 302+ E9AA DD 2C                            inc     ixl				; X=X+1
 303+ E9AC C3 69 E8                         jp      .CircleLoop
 304+ E9AF 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 305+ E9B1 D5 C5 E5                         push	de,,bc,,hl
 306+ E9B4 45                               ld      b,l                     ; At this point de = x and hl = y
 307+ E9B5 4B                               ld      c,e
 308+ E9B6 CD 43 E1                         call 	l2_plot_pixel_y_test
 309+ E9B9 E1 C1 D1                         pop		de,,bc,,hl
 310+ E9BC C9                               ret
 311+ E9BD 7B           .circleSinglepixel:  ld		a,e
 312+ E9BE CD 43 E1                         call	l2_plot_pixel_y_test
 313+ E9C1 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1355  E9C2                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E9C2
   2+ E9C2 00           l2_circle_dblx		DB 0
   3+ E9C3 00           l2_circle_dbly		DB 0
   4+ E9C4
   5+ E9C4              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E9C4              ; Note this code currently does not process BC
   7+ E9C4 7B           l2_draw_circle_fill:    ld		a,e
   8+ E9C5 32 5B EA                             ld		(.LineColour+1),a
   9+ E9C8 7A                                   ld		a,d								; get radius
  10+ E9C9 A7                                   and		a
  11+ E9CA C8                                   ret		z
  12+ E9CB FE 01                                cp		1
  13+ E9CD CA 32 E8                             jp		z,CircleSinglepixel
  14+ E9D0 ED 43 FA E9                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E9D4 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ E9D6 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ E9D9 26 00        .calcd:	                ld		h,0
  18+ E9DB 6F                                   ld		l,a
  19+ E9DC 29                                   add		hl,hl							; hl = r * 2
  20+ E9DD EB                                   ex		de,hl							; de = r * 2
  21+ E9DE 21 03 00                             ld		hl,3
  22+ E9E1 A7                                   and		a
  23+ E9E2 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ E9E4 44                                   ld		b,h
  25+ E9E5 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ E9E6 21 01 00     .calcdelta              ld		hl,1
  27+ E9E9 16 00                                ld		d,0
  28+ E9EB DD 5D                                ld		e,ixl
  29+ E9ED A7                                   and		a
  30+ E9EE ED 52                                sbc		hl,de
  31+ E9F0 11 01 00     .Setde1	                ld		de,1
  32+ E9F3 DD 7C        .CircleLoop:            ld		a,ixh
  33+ E9F5 DD BD                                cp		ixl
  34+ E9F7 D8                                   ret		c
  35+ E9F8 D9           .ProcessLoop:	        exx
  36+ E9F9 11 00 00     .Line1:                 ld		de,0
  37+ E9FC 7B                                   ld 		a,e
  38+ E9FD DD 95                                sub 	ixl
  39+ E9FF 4F                                   ld 		c,a
  40+ EA00 7A                                   ld 		a,d
  41+ EA01 DD 84                                add 	a,ixh
  42+ EA03 47                                   ld		b,a
  43+ EA04                                      ;; TODO ADD DOUBLE X CALC
  44+ EA04 D5                                   push	de
  45+ EA05 DD 55                                ld		d,ixl
  46+ EA07 CB 22                                sla		d
  47+ EA09 CD 56 EA                             call	.PlotLine			;CX-X,CY+Y
  48+ EA0C D1                                   pop		de
  49+ EA0D 7B           .Line2:                 ld 		a,e
  50+ EA0E DD 95                                sub		ixl
  51+ EA10 4F                                   ld 		c,a
  52+ EA11 7A                                   ld 		a,d
  53+ EA12 DD 94                                sub 	ixh
  54+ EA14 47                                   ld 		b,a
  55+ EA15                                      ;; TODO ADD DOUBLE X CALC
  56+ EA15 D5                                   push	de
  57+ EA16 DD 55                                ld		d,ixl
  58+ EA18 CB 22                                sla		d
  59+ EA1A CD 56 EA                             call	.PlotLine			;CX-X,CY-Y
  60+ EA1D D1                                   pop		de
  61+ EA1E 7B           .Line3:	                ld 		a,e
  62+ EA1F DD 94                                sub		ixh
  63+ EA21 4F                                   ld 		c,a
  64+ EA22 7A                                   ld 		a,d
  65+ EA23 DD 85                                add 	a,ixl
  66+ EA25 47                                   ld 		b,a
  67+ EA26                                      ;; TODO ADD DOUBLE Y CALC
  68+ EA26 D5                                   push	de
  69+ EA27 DD 54                                ld		d,ixh
  70+ EA29 CB 22                                sla		d
  71+ EA2B CD 56 EA                             call	.PlotLine			;CX-Y,CY+x
  72+ EA2E D1                                   pop		de
  73+ EA2F 7B           .Line4:	                ld 		a,e
  74+ EA30 DD 94                                sub		ixh
  75+ EA32 4F                                   ld 		c,a
  76+ EA33 7A                                   ld 		a,d
  77+ EA34 DD 95                                sub 	ixl
  78+ EA36 47                                   ld 		b,a
  79+ EA37                                      ;; TODO ADD DOUBLE Y CALC
  80+ EA37 D5                                   push	de
  81+ EA38 DD 54                                ld		d,ixh
  82+ EA3A CB 22                                sla		d
  83+ EA3C CD 56 EA                             call	.PlotLine			;CX-Y,CY+x
  84+ EA3F D1                                   pop		de
  85+ EA40 D9                                   exx
  86+ EA41 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ EA43 28 03                                jr z,.draw_circle_1
  88+ EA45 19                                   add hl,de			; Delta=Delta+D1
  89+ EA46 18 05                                jr .draw_circle_2		;
  90+ EA48 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ EA49 03                                   inc bc
  92+ EA4A 03                                   inc bc				; D2=D2+2
  93+ EA4B DD 25                                dec ixh				; Y=Y-1
  94+ EA4D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ EA4E 03                                   inc bc
  96+ EA4F 13                                   inc de				; D1=D1+2
  97+ EA50 13                                   inc de
  98+ EA51 DD 2C                                inc ixl				; X=X+1
  99+ EA53 C3 F3 E9                             jp .CircleLoop
 100+ EA56 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ EA5A 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ EA5C 5F                                   ld      e,a
 103+ EA5D CD 8A E2                             call 	l2_draw_horz_line
 104+ EA60 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ EA64 C9                                   ret
 106+ EA65
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1356  EA65                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EA65              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ EA65 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ EA66 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ EA67 BB                                   cp		e
   5+ EA68 28 08                                jr		z,.HorizontalLineCheck
   6+ EA6A 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ EA6B BA                                   cp		d
   8+ EA6C 28 0E                                jr		z,.VerticalLine
   9+ EA6E              ; use jp and get a free ret instruction optimisation
  10+ EA6E 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ EA6F C3 33 E6                             jp		l2_draw_diagonal
  12+ EA72
  13+ EA72 78           .HorizontalLineCheck:   ld      a,b
  14+ EA73 BA                                   cp      d
  15+ EA74 28 0B                                jr      z, .SinglePixel
  16+ EA76 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ EA77 53                                   ld		d,e				    ; set d as target right pixel
  18+ EA78 5F                                   ld		e,a				    ; e holds colour on this call
  19+ EA79 C3 B6 E2                             jp		l2_draw_horz_line_to
  20+ EA7C 08           .VerticalLine:          ex		af,af'
  21+ EA7D 5F                                   ld		e,a				    ; e holds colour on this call
  22+ EA7E C3 35 E3                             jp		l2_draw_vert_line_to
  23+ EA81 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ EA82 C3 29 E1                             jp      l2_plot_pixel
  25+ EA85              ;......................................................
  26+ EA85
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1357  EA85                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ EA85              ; ClearLines (LL155)
   2+ EA85              ;   y = 0
   3+ EA85              ; 	XX20 = UbnkEdgeHeapSize
   4+ EA85              ;   exit if XX20 < 4
   5+ EA85              ;   ++y
   6+ EA85              ;   do
   7+ EA85              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ EA85              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ EA85              ;		++y
  10+ EA85              ;	until Y > XX20
  11+ EA85
  12+ EA85              clearLines:
  13+ EA85              layer2_clearLines:
  14+ EA85 3A 00 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ EA88 47                                   ld		b,a
  16+ EA89 21 0E C2                             ld		hl,UbnkLineArray
  17+ EA8C C5           clearLinesLoop:         push	bc
  18+ EA8D 7E                                   ld		a,(hl)
  19+ EA8E 23                                   inc		hl
  20+ EA8F 4F                                   ld		c,a
  21+ EA90 7E                                   ld		a,(hl)
  22+ EA91 23                                   inc		hl
  23+ EA92 47                                   ld		b,a
  24+ EA93 7E                                   ld		a,(hl)
  25+ EA94 23                                   inc		hl
  26+ EA95 5F                                   ld		e,a
  27+ EA96 7E                                   ld		a,(hl)
  28+ EA97 23                                   inc		hl
  29+ EA98 57                                   ld		d,a
  30+ EA99 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ EA9B E5                                   push	hl
  32+ EA9C CD 65 EA                             call    l2_draw_any_line
  33+ EA9F E1                                   pop		hl
  34+ EAA0 C1                                   pop		bc
  35+ EAA1 10 E9                                djnz	clearLinesLoop
  36+ EAA3 C9                                   ret
  37+ EAA4
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1358  EAA4                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ EAA4              ; ******************************************************************************
   2+ EAA4              ;
   3+ EAA4              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ EAA4              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ EAA4              ;
   6+ EAA4              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ EAA4              ;
   8+ EAA4              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ EAA4              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ EAA4              ;	before using line drawing.
  11+ EAA4              ;
  12+ EAA4              ;	The routine checks the range of specified coordinates which is the
  13+ EAA4              ;	boundaries of the graphics area (256x64	pixels).
  14+ EAA4              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ EAA4              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ EAA4              ;	visible part will be drawn.
  17+ EAA4              ;
  18+ EAA4              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ EAA4              ;
  20+ EAA4              ;	The plot routine is	defined by an address pointer	in IX.
  21+ EAA4              ;
  22+ EAA4              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ EAA4              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ EAA4              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ EAA4              ;
  26+ EAA4              ;	OUT:	None.
  27+ EAA4              ;
  28+ EAA4              ;	Registers	used	by routine:
  29+ EAA4              ;		   N	:	B, loop counter
  30+ EAA4              ;		   i	:	line	balance variable
  31+ EAA4              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ EAA4              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ EAA4              ;	  (x0,y0)	:	(h,l)
  34+ EAA4              ;	  direc_x	:	d, horisontal step increment
  35+ EAA4              ;	  direc_y	:	e, vertical step increment
  36+ EAA4              ;		 ddx	:	b, horisontal step increment
  37+ EAA4              ;		 ddy	:	c, vertical step increment
  38+ EAA4              ;
  39+ EAA4              ;		DE, A work registers.
  40+ EAA4              ;
  41+ EAA4              ; The algorithm in pseudo-code:
  42+ EAA4              ;
  43+ EAA4              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ EAA4              ;	x = ABS x: y =	ABS y
  45+ EAA4              ;
  46+ EAA4              ;	if x	>= y
  47+ EAA4              ;		if x+y=0 then return
  48+ EAA4              ;		H = x
  49+ EAA4              ;		L = y
  50+ EAA4              ;		ddx = direc_x
  51+ EAA4              ;		ddy = 0
  52+ EAA4              ;	else
  53+ EAA4              ;		H = y
  54+ EAA4              ;		L = x
  55+ EAA4              ;		ddx = 0
  56+ EAA4              ;		ddy = direc_y
  57+ EAA4              ;	endif
  58+ EAA4              ;
  59+ EAA4              ;	B = H
  60+ EAA4              ;	i = INT(B/2)
  61+ EAA4              ;	FOR N=B TO 1 STEP -1
  62+ EAA4              ;		i = i + L
  63+ EAA4              ;		if i	< H
  64+ EAA4              ;			ix =	ddx
  65+ EAA4              ;			iy =	ddy
  66+ EAA4              ;		else
  67+ EAA4              ;			i = i - H
  68+ EAA4              ;			ix =	direc_x
  69+ EAA4              ;			iy =	direc_y
  70+ EAA4              ;		endif
  71+ EAA4              ;		x0 =	x0 +	ix
  72+ EAA4              ;		y0 =	y0 +	iy
  73+ EAA4              ;		plot	(x0,y0)
  74+ EAA4              ;	NEXT	N
  75+ EAA4              ;
  76+ EAA4              ;
  77+ EAA4              ;	Registers	changed after return:
  78+ EAA4              ;		..BCDEHL/IXIY/af......	same
  79+ EAA4              ;		AF....../..../..bcdehl	different
  80+ EAA4              ;
  81+ EAA4 DF           line_gfx_colour db $DF
  82+ EAA5 00 00        line_gfx_coords	dw 0
  83+ EAA7              LineHLtoDE:
  84+ EAA7 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ EAA8 FE C0                                cp	192
  86+ EAAA 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ EAAC 7A                                   ld	a,d
  88+ EAAD FE C0                                cp	192
  89+ EAAF 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ EAB1 22 A5 EA                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ EAB4 E5                                   push	hl
  92+ EAB5 D5                                   push	de
  93+ EAB6 6C                                   ld	l,h				; L = x0
  94+ EAB7 62                                   ld	h,d				; H = x1
  95+ EAB8 7C           distanceX:		        ld	a,h
  96+ EAB9 95                                   sub	l
  97+ EABA 6F                                   ld	l,a
  98+ EABB 26 00                                ld	h,0
  99+ EABD 30 02                                jr	nc, distanceXDone
 100+ EABF 26 FF                                ld	h,-1
 101+ EAC1 D1           distanceXDone:          pop	de
 102+ EAC2 E3                                   ex	(sp),hl			; L = y0
 103+ EAC3 63                                   ld	h,e				; H = y1
 104+ EAC4 7C           distanceY:		        ld	a,h
 105+ EAC5 95                                   sub	l
 106+ EAC6 6F                                   ld	l,a
 107+ EAC7 26 00                                ld	h,0
 108+ EAC9 30 02                                jr	nc, distanceYDone
 109+ EACB 26 FF                                ld	h,-1
 110+ EACD D1           distanceYDone:          pop	de
 111+ EACE EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ EACF CD D3 EA                             call	DrawLineRelative			; draw line...
 113+ EAD2 C9           exit_line:              ret
 114+ EAD3
 115+ EAD3              ; ***************************************************************************
 116+ EAD3              ;
 117+ EAD3              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ EAD3              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ EAD3              ;
 120+ EAD3              ; OUT: h - l distance in	HL
 121+ EAD3              ;
 122+ EAD3
 123+ EAD3 D5           DrawLineRelative:       push	de
 124+ EAD4 E5                                   push	hl
 125+ EAD5 D9                                   exx
 126+ EAD6 E1                                   pop	hl					; get relative	horisontal movement
 127+ EAD7 CD 42 EB                             call	sgn
 128+ EADA 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ EADB CD 4F EB                             call	absValue
 130+ EADE 45                                   ld	b,l					; x = ABS(x)
 131+ EADF E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ EAE0 CD 42 EB                             call	sgn
 133+ EAE3 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ EAE4 CD 4F EB                             call	absValue
 135+ EAE7 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ EAE8              ; so by here BC = dx dy HL in increment/decrement x y
 137+ EAE8 C5                                   push	bc
 138+ EAE9 D9                                   exx
 139+ EAEA E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ EAEB 7C                                   ld	a,h
 141+ EAEC BD                                   cp	l
 142+ EAED 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ EAEF B4           areXandYZero:           or	h					;	if x+y = 0
 144+ EAF0 28 4F                                jr	z, exit_draw		;		return
 145+ EAF2 D9           y_lessorequal_x:        exx						;	else
 146+ EAF3 42                                   ld	b,d					;		ddx = direc_x
 147+ EAF4 0E 00                                ld	c,0					;		ddy = 0
 148+ EAF6 D9                                   exx
 149+ EAF7 18 08                                jr	init_drawloop		; else
 150+ EAF9 7C           x_smaller_y:	        ld	a,h
 151+ EAFA 65                                   ld	h,l					;	H = y
 152+ EAFB 6F                                   ld	l,a					;	L = x
 153+ EAFC D9                                   exx
 154+ EAFD 06 00                                ld	b,0					;	ddx = 0
 155+ EAFF 4B                                   ld	c,e					;	ddy = direc_y
 156+ EB00 D9                                   exx
 157+ EB01 44           init_drawloop:	        ld	b,h
 158+ EB02 4C                                   ld	c,h					; B = H
 159+ EB03 CB 39                                srl	c					; i = INT(B/2)
 160+ EB05              										; FOR N=B	TO 1	STEP	-1
 161+ EB05 79           drawloop:		        ld	a,c
 162+ EB06 85                                   add	a,l
 163+ EB07 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ EB09 BC                                   cp	h
 165+ EB0A 30 06                                jr	nc, i_greater		;	if i	< H
 166+ EB0C 4F                                   ld	c,a					;		i = i + L
 167+ EB0D D9                                   exx
 168+ EB0E C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ EB0F D9                                   exx
 170+ EB10 18 05                                jr	check_plot			;	else
 171+ EB12 94           i_greater:		        sub	h					;		i = i - H
 172+ EB13 4F                                   ld	c,a
 173+ EB14 D9                                   exx
 174+ EB15 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ EB16 D9                                   exx						;	endif
 176+ EB17 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ EB18 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ EB19 2A A5 EA                             ld	hl,(line_gfx_coords)
 179+ EB1C 7D                                   ld	a,l
 180+ EB1D 83                                   add	a,e					;
 181+ EB1E 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ EB1F 7A                                   ld	a,d
 183+ EB20 3C                                   inc	a
 184+ EB21 84                                   add	a,h
 185+ EB22 38 04                                jr	c, check_range		;	check out	of range
 186+ EB24 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ EB26 18 02                                jr	plot_point
 188+ EB28 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ EB2A
 190+ EB2A 3D           plot_point:             dec	a
 191+ EB2B C5                                   push	bc
 192+ EB2C F5                                   push	af
 193+ EB2D 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ EB2E 4D                                   ld		c,l
 195+ EB2F 3A A4 EA                             ld		a,(line_gfx_colour)
 196+ EB32 ED 43 A5 EA                          ld      (line_gfx_coords),bc
 197+ EB36 CD 29 E1                             call	l2_plot_pixel
 197+ EB39
 198+ EB39 F1                                   pop		af
 199+ EB3A C1                                   pop		bc
 200+ EB3B E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ EB3C 10 C7                                djnz	drawloop		; NEXT N
 202+ EB3E 18 01                                jr	exit_draw
 203+ EB40
 204+ EB40 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ EB41 C9           exit_draw:		        ret
 206+ EB42
 207+ EB42
 208+ EB42              ; ******************************************************************************
 209+ EB42              ;
 210+ EB42              ;	SGN (Signum value) of 16	bit signed integer.
 211+ EB42              ;
 212+ EB42              ;	IN:		HL =	integer
 213+ EB42              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ EB42              ;
 215+ EB42              ;	Registers	changed after return:
 216+ EB42              ;	..BCDEHL/IXIY	same
 217+ EB42              ;	AF....../....	different
 218+ EB42              ;
 219+ EB42 7C           sgn:				    ld	a,h
 220+ EB43 B5                                   or	l
 221+ EB44 C8                                   ret	z				; integer	is zero, return 0...
 222+ EB45 CB 7C                                bit	7,h
 223+ EB47 20 03                                jr	nz, negative_int
 224+ EB49 3E 01                                ld	a,1
 225+ EB4B C9                                   ret
 226+ EB4C 3E FF        negative_int:		    ld	a,-1
 227+ EB4E C9                                   ret
 228+ EB4F
 229+ EB4F
 230+ EB4F              ; ******************************************************************************
 231+ EB4F              ;
 232+ EB4F              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ EB4F              ;
 234+ EB4F              ;	IN:		HL =	integer
 235+ EB4F              ;	OUT:		HL =	converted	integer
 236+ EB4F              ;
 237+ EB4F              ;	Registers	changed after return:
 238+ EB4F              ;	A.BCDE../IXIY	same
 239+ EB4F              ;	.F....HL/....	different
 240+ EB4F              ;
 241+ EB4F CB 7C        absValue:			    bit	7,h
 242+ EB51 C8                                   ret	z				; integer	is positive...
 243+ EB52 D5                                   push	de
 244+ EB53 EB                                   ex	de,hl
 245+ EB54 21 00 00                             ld	hl,0
 246+ EB57 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ EB58 ED 52                                sbc	hl,de			; convert	negative integer
 248+ EB5A D1                                   pop	de
 249+ EB5B C9                                   ret
 250+ EB5C
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1359  EB5C              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1360  EB5C                  SLOT    CommanderAddr
1361  EB5C                  PAGE    BankCommander
1362  EB5C                  ORG     CommanderAddr, BankCommander
1363  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 BE A0    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 BF 9E    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 2A 9E    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 01 A3    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 19 A3    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 11 A3    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 15 A3    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A C5 9E    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A C7 9E    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 FA A2    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A FE A2    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 29 9E    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 3C 9E    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 84 9E    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 83 9E    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A B8 A0    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A B9 A0    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A BA A0    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A FF A2    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 33 A3    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 BE A0    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 BF 9E    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 2A 9E    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 01 A3    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 19 A3    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 11 A3    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 15 A3    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 C5 9E    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 C7 9E    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 83 9D                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 64 A3                             call	        copy_galaxy_to_system
  70+ E1CA CD 24 A4                             call	        find_present_system
  71+ E1CD CD 87 A3                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 FA A2    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 FE A2    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 29 9E    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 3C 9E    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 84 9E    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 83 9E    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 B8 A0    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 B9 A0    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 BA A0    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 FF A2    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 33 A3    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 72 BB                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 41 BB                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244 C9                                   ret
  99+ E245
 100+ E245               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 101+ E245              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 101+ E245 21 10 E0    >                        ld      hl,defaultName
 101+ E248 11 BE A0    >                        ld      de, CommanderName
 101+ E24B 01 08 00    >                        ld      bc, 8
 101+ E24E ED B0       >                        ldir
 102+ E250                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 102+ E250 21 29 E0    >                        ld      hl,defaultSeeds
 102+ E253 11 BF 9E    >                        ld      de, GalaxySeeds
 102+ E256 01 06 00    >                        ld      bc, 6
 102+ E259 ED B0       >                        ldir
 103+ E25B                                      ldCopy2Byte defaultHomeX, PresentSystemX
 103+ E25B 2A 2F E0    >                        ld       hl,(defaultHomeX)
 103+ E25E 22 C5 9E    >                        ld       (PresentSystemX),hl
 104+ E261                                      ldCopy2Byte defaultHomeX, TargetSystemX
 104+ E261 2A 2F E0    >                        ld       hl,(defaultHomeX)
 104+ E264 22 C7 9E    >                        ld       (TargetSystemX),hl
 105+ E267 21 83 9D                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 106+ E26A CD 64 A3                             call	copy_galaxy_to_system
 107+ E26D CD 24 A4                             call	find_present_system
 108+ E270 CD 87 A3                             call	copy_working_to_galaxy
 109+ E273 01 60 EA                             ld      bc,60000
 110+ E276 ED 43 FA A2                          ld      (Cash),bc
 111+ E27A 01 00 00                             ld		bc,0
 112+ E27D ED 43 FC A2                          ld		(Cash+2), bc                    ; cash no longer big endian
 113+ E281 3E 46                                ld		a,MaxFuelLevel
 114+ E283 32 FE A2                             ld		(Fuel),a
 115+ E286 3E 5B                                ld      a,BankGalaxyData0
 116+ E288 32 B2 9E                             ld		(Galaxy),a
 117+ E28B AF                                   xor		a
 118+ E28C 21 19 A3                             ld      hl,EquipmentFitted
 119+ E28F 06 1A                                ld      b, EQ_ITEM_COUNT
 120+ E291 77           .ClearFittedLooop:      ld      (hl),a
 121+ E292 23                                   inc     hl
 122+ E293 10 FC                                djnz    .ClearFittedLooop
 123+ E295                                      SetAFalse
 123+ E295 3E FF       >                        ld      a,$FF
 124+ E297 32 27 A3                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 125+ E29A 32 D4 9E                             ld		(MissionData),a						;The Plan/Mission
 126+ E29D 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 127+ E29F 32 11 A3                             ld		(LaserType),a
 128+ E2A2 3E FF                                ld      a,$FF                                 ; a = 255
 129+ E2A4 32 12 A3                             ld		(LaserType+1),a
 130+ E2A7 32 13 A3                             ld		(LaserType+2),a
 131+ E2AA 32 14 A3                             ld		(LaserType+3),a
 132+ E2AD AF                                   xor     a                                  ; a= 0
 133+ E2AE 32 15 A3                             ld      (LaserDamagedFlag),a
 134+ E2B1 32 16 A3                             ld      (LaserDamagedFlag+1),a
 135+ E2B4 32 17 A3                             ld      (LaserDamagedFlag+2),a
 136+ E2B7 32 18 A3                             ld      (LaserDamagedFlag+3),a
 137+ E2BA              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 138+ E2BA AF                                   xor     a
 139+ E2BB 32 1C A3                             ld		(ECMPresent),a
 140+ E2BE 32 33 A3                             ld		(FuelScoopsBarrelStatus),a
 141+ E2C1 32 1F A3                             ld		(EnergyBomb),a
 142+ E2C4 32 20 A3                             ld		(ExtraEnergyUnit),a
 143+ E2C7 32 21 A3                             ld		(DockingComputer),a
 144+ E2CA 32 22 A3                             ld		(GalacticHyperDrive),a
 145+ E2CD 32 1E A3                             ld		(EscapePod),a
 146+ E2D0 32 29 9E                             ld      (FugitiveInnocentStatus),a
 147+ E2D3 32 3C 9E                             ld		(KillTally),a
 148+ E2D6 32 84 9E                             ld      (OuterHyperCount),a
 149+ E2D9 32 83 9E                             ld      (InnerHyperCount),a
 150+ E2DC 3D                                   dec		a								; now a = 255
 151+ E2DD 32 B8 A0                             ld		(ForeShield),a
 152+ E2E0 32 B9 A0                             ld		(AftShield),a
 153+ E2E3 32 BA A0                             ld		(PlayerEnergy),a
 154+ E2E6 3E 14                                ld		a,20
 155+ E2E8 32 FF A2                             ld		(CargoBaySize),a
 156+ E2EB CD 5E E3                             call	ZeroCargo						; Clear out cargo
 157+ E2EE 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 158+ E2F0 CD F4 E2                             call    LoadLaserToCurrent
 159+ E2F3 C9                                   ret
 160+ E2F4
 161+ E2F4
 162+ E2F4              ; a = current view number
 163+ E2F4 21 11 A3     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 164+ E2F7 ED 31                                add     hl,a                            ; .
 165+ E2F9 7E                                   ld      a,(hl)                          ; .
 166+ E2FA 47                                   ld      b,a                             ; first off is there a laser present in current view
 167+ E2FB 32 CF A0                             ld      (CurrLaserType),a               ; set type
 168+ E2FE FE FF                                cp      255                             ; .
 169+ E300 C8                                   ret     z                               ; we can then drop out early if nothing fitted
 170+ E301 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 171+ E303 ED 31                                add     hl,a
 172+ E305 7E                                   ld      a,(hl)
 173+ E306 32 D0 A0                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 174+ E309 50                                   ld      d,b                             ; get table index
 175+ E30A 1E 0C                                ld      e,LaserStatsTableWidth          ;
 176+ E30C ED 30                                mul     de                              ;
 177+ E30E 21 17 93                             ld      hl,LaserStatsTable              ;
 178+ E311 19                                   add     hl,de                           ;
 179+ E312 23                                   inc     hl                              ; we already have type
 180+ E313                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 180+ E313 7E          >                        ld      a,(hl)
 180+ E314 32 D1 A0    >                        ld      (CurrLaserPulseRate),a
 181+ E317 23                                   inc     hl                              ; table [2]
 182+ E318                                      ldAtHLtoMem CurrLaserPulseOnTime
 182+ E318 7E          >                        ld      a,(hl)
 182+ E319 32 D2 A0    >                        ld      (CurrLaserPulseOnTime),a
 183+ E31C 23                                   inc     hl                              ; table [3]
 184+ E31D                                      ldAtHLtoMem CurrLaserPulseOffTime
 184+ E31D 7E          >                        ld      a,(hl)
 184+ E31E 32 D3 A0    >                        ld      (CurrLaserPulseOffTime),a
 185+ E321 23                                   inc     hl                              ; table [4]
 186+ E322                                      ldAtHLtoMem CurrLaserPulseRest
 186+ E322 7E          >                        ld      a,(hl)
 186+ E323 32 D4 A0    >                        ld      (CurrLaserPulseRest),a
 187+ E326 23                                   inc     hl                              ; table [5]
 188+ E327                                      ldAtHLtoMem CurrLaserDamageOutput
 188+ E327 7E          >                        ld      a,(hl)
 188+ E328 32 DB A0    >                        ld      (CurrLaserDamageOutput),a
 189+ E32B 23                                   inc     hl                              ; table [6]
 190+ E32C                                      ldAtHLtoMem CurrLaserEnergyDrain
 190+ E32C 7E          >                        ld      a,(hl)
 190+ E32D 32 DC A0    >                        ld      (CurrLaserEnergyDrain),a
 191+ E330 23                                   inc     hl                              ; table [7]
 192+ E331                                      ldAtHLtoMem CurrLaserHeat
 192+ E331 7E          >                        ld      a,(hl)
 192+ E332 32 DD A0    >                        ld      (CurrLaserHeat),a
 193+ E335 23                                   inc     hl                              ; table [8]
 194+ E336                                      ldAtHLtoMem CurrLaserDurability
 194+ E336 7E          >                        ld      a,(hl)
 194+ E337 32 DE A0    >                        ld      (CurrLaserDurability),a
 195+ E33A 23                                   inc     hl                              ; table [9]
 196+ E33B                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 196+ E33B 7E          >                        ld      a,(hl)
 196+ E33C 32 DF A0    >                        ld      (CurrLaserDurabilityAmount),a
 197+ E33F C9                                   ret
 198+ E340
 199+ E340              ; Set a = 2 * (slaves + narcotics) + firearms
 200+ E340 3A 04 A3     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 201+ E343 47                                   ld      b,a                             ; .
 202+ E344 3A 07 A3                             ld      a,(NarcoticsCargoTonnes)        ; .
 203+ E347 80                                   add     b                               ; .
 204+ E348 CB 27                                sla     a                               ; .
 205+ E34A 47                                   ld      b,a                             ;
 206+ E34B 3A 0B A3                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
 207+ E34E 80                                   add     b
 208+ E34F C9                                   ret
 209+ E350
 210+ E350 CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 211+ E353                                      ZeroA                                   ; set current laser to front
 211+ E353 AF          >                        xor a
 212+ E354 CD F4 E2                             call    LoadLaserToCurrent
 213+ E357 CD F7 A1                             call    InitMainLoop
 214+ E35A CD 5C A1                             call    ResetPlayerShip
 215+ E35D C9                                   ret
 216+ E35E                                  ;    clear out all other objects
 217+ E35E                                  ;    create debris
 218+ E35E                                  ;    if cargo presetn then create a cargo
 219+ E35E                                  ;
 220+ E35E                                  ;    enqueve message game over
 221+ E35E                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
1364  E35E                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E35E              ZeroCargo:
   2+ E35E AF           		xor		a							;zero-out cargo, including gems.
   3+ E35F 06 10        		ld		b,16						;all the way up to alien items
   4+ E361 21 01 A3     		ld		hl,CargoTonnes   			; cargo levels
   5+ E364              .ZeroLoop:
   6+ E364 77                   ld      (hl),a
   7+ E365 23           		inc		hl
   8+ E366 10 FC        		djnz	.ZeroLoop
   9+ E368 C9           		ret
  10+ E369
# file closed: ./Commander/zero_player_cargo.asm
1365  E369              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1366  E369                  SLOT    LAYER1Addr
1367  E369                  PAGE    BankLAYER1
1368  E369                  ORG     LAYER1Addr, BankLAYER1
1369  E000
1370  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 86 99                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1371  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 86 99                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 86 99                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 86 99                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 86 99                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 86 99                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 86 99                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 86 99                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 86 99                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1372  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1373  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1374  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1375  E130              ; as the is aligned and data tables are after that
1376  E130              ; need to make the ship index tables same size in each to simplify further
1377  E130                  SLOT    ShipModelsAddr
1378  E130                  PAGE    BankShipModels1
1379  E130              	ORG     ShipModelsAddr, BankShipModels1
1380  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1381  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1382  E00F              GetShipBankId:
1383  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1383  E00F 06 00       >                        ld      b,0
1383  E011 4F          >                        ld      c,a                                 ; c= original ship id
1383  E012 CB 3F       >.ShiftLoop:             srl     a
1383  E014 CB 3F       >                        srl     a
1383  E016 CB 3F       >                        srl     a
1383  E018 CB 3F       >                        srl     a                                   ; divide by 16
1383  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1383  E01B 79          >                        ld      a,c
1383  E01C 50          >                        ld      d,b
1383  E01D 1E 10       >                        ld      e,16
1383  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1383  E021 93          >                        sub     e                                   ; a= actual model id now
1383  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1383  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1383  E024 7A          >                        ld      a,d                                 ; a = bank number
1383  E025             >;.. Now b = bank and a = adjusted ship nbr
1383  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1383  E028 ED 31       >                        add     hl,a
1383  E02A ED 31       >                        add     hl,a
1383  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1383  E02D             >                        ClearCarryFlag
1383  E02D B7          >                        or a
1383  E02E C9          >                        ret
1384  E02F              CopyVertsToUniv:
1385  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1385  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1385  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1385  E035 06 00       >                        ld          b,0
1385  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1385  E03A 4F          >                        ld          c,a
1385  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1385  E03C CD AC 99    >                        call        memcopy_dma
1385  E03F C9          >                        ret
1386  E040              CopyEdgesToUniv:
1387  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1387  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1387  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1387  E046 06 00       >                        ld          b,0
1387  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1387  E04B 4F          >                        ld          c,a
1387  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1387  E04D CD AC 99    >                        call        memcopy_dma
1387  E050 C9          >                        ret
1388  E051              CopyNormsToUniv:
1389  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1389  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1389  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1389  E057 06 00       >                        ld          b,0
1389  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1389  E05C 4F          >                        ld          c,a
1389  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1389  E05E CD AC 99    >                        call        memcopy_dma
1389  E061 C9          >                        ret
1390  E062              ShipBankTable:
1391  E062              ShipBankTable1:         MShipBankTable
1391  E062 3B 00       >                        DW      BankShipModels1
1391  E064 43 00       >                        DW      BankShipModels2
1391  E066 44 00       >                        DW      BankShipModels3
1391  E068 45 00       >                        DW      BankShipModels4
1392  E06A              CopyShipToUniverse:
1393  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1393  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1393  E06D 36 3B       >                        ld          (hl),BankShipModels1
1393  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1393  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1393  E075 ED 31       >                        add         hl,a
1393  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1393  E079 4E          >                        ld          c,(hl)
1393  E07A 23          >                        inc         hl
1393  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1393  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1393  E07F ED 31       >                        add         hl,a
1393  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1393  E083 7E          >                        ld          a,(hl)
1393  E084 23          >                        inc         hl
1393  E085 66          >                        ld          h,(hl)
1393  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1393  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1393  E08A 01 19 00    >                        ld          bc,ShipDataLength
1393  E08D ED B0       >                        ldir
1393  E08F CD 2F E0    >                        call        CopyVertsToUniv
1393  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1393  E095 CD 51 E0    >                        call        CopyNormsToUniv
1393  E098 C9          >                        ret
1394  E099              CopyBodyToUniverse:
1395  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1395  E099 3E 0D       >                        ld          a,13
1395  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1395  E09E C9          >                        ret
1396  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0A1 74 E2                                 DW Anaconda                                ;01 $01
   4+ E0A3 7B E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0A5 A6 E4                                 DW Boa                                     ;03 $03
   6+ E0A7 9D E5                                 DW CargoType5                              ;04 $04
   7+ E0A9 4A E6                                 DW Boulder                                 ;05 $05
   8+ E0AB F1 E6                                 DW Asteroid                                ;06 $06
   9+ E0AD CC E7                                 DW Bushmaster                              ;07 $07
  10+ E0AF 9D E8                                 DW Chameleon                               ;08 $08
  11+ E0B1 CA E9                                 DW CobraMk3                                ;09 $09
  12+ E0B3 57 EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0B5 22 EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0B7 AF ED                                 DW Constrictor                             ;12 $0C
  15+ E0B9 B6 EE                                 DW Coriolis                                ;13 $0D
  16+ E0BB D7 EF                                 DW Cougar                                  ;14 $0E
  17+ E0BD DE F0                                 DW Dodo                                    ;15 $0F
  18+ E0BF              ShipVertexTable:
  19+ E0BF 58 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0C1 8D E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0C3 94 E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0C5 BF E4                                 DW BoaVertices                             ;03 $03
  23+ E0C7 B6 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0C9 63 E6                                 DW BoulderVertices                         ;05 $05
  25+ E0CB 0A E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0CD E5 E7                                 DW BushmasterVertices                      ;07 $07
  27+ E0CF B6 E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0D1 E3 E9                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0D3 70 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0D5 3B EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0D7 C8 ED                                 DW ConstrictorVertices                     ;12 $0C
  32+ E0D9 CF EE                                 DW CoriolisVertices                        ;13 $0D
  33+ E0DB F0 EF                                 DW CougarVertices                          ;14 $0E
  34+ E0DD F7 F0                                 DW DodoVertices                            ;15 $0F
  35+ E0DF              ShipEdgeTable:
  36+ E0DF C4 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E0E1 E7 E2                                 DW AnacondaEdges                           ;01 $01
  38+ E0E3 06 E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E0E5 0D E5                                 DW BoaEdges                                ;03 $03
  40+ E0E7 F2 E5                                 DW CargoType5Edges                         ;04 $04
  41+ E0E9 8D E6                                 DW BoulderEdges                            ;05 $05
  42+ E0EB 40 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E0ED 2D E8                                 DW BushmasterEdges                         ;07 $07
  44+ E0EF 22 E9                                 DW ChameleonEdges                          ;08 $08
  45+ E0F1 8B EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E0F3 B2 EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E0F5 E3 EC                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E0F7 2E EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E0F9 2F EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E0FB 62 F0                                 DW CougarEdges                             ;14 $0E
  51+ E0FD 87 F1                                 DW DodoEdges                               ;15 $0F
  52+ E0FF              ShipNormalTable:
  53+ E0FF 38 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E101 4B E3                                 DW AnacondaNormals                         ;01 $01
  55+ E103 76 E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E105 6D E5                                 DW BoaNormals                              ;03 $03
  57+ E107 2E E6                                 DW CargoType5Normals                       ;04 $04
  58+ E109 C9 E6                                 DW BoulderNormals                          ;05 $05
  59+ E10B 94 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E10D 79 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E10F 96 E9                                 DW ChameleonNormals                        ;08 $08
  62+ E111 23 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E113 FA EB                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E115 7B ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E117 8E EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E119 9F EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E11B C6 F0                                 DW CougarNormals                           ;14 $0E
  68+ E11D 0F F2                                 DW DodoNormals                             ;15 $0F
  69+ E11F              ShipModelSizeTable:
  70+ E11F 35 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E121 07 01                                 DW AnacondaLen                             ;01 $01
  72+ E123 2B 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E125 F7 00                                 DW BoaLen                                  ;03 $03
  74+ E127 AD 00                                 DW CargoType5Len                           ;04 $04
  75+ E129 A7 00                                 DW BoulderLen                              ;05 $05
  76+ E12B DB 00                                 DW AsteroidLen                             ;06 $06
  77+ E12D D1 00                                 DW BushmasterLen                           ;07 $07
  78+ E12F 2D 01                                 DW ChameleonLen                            ;08 $08
  79+ E131 8D 01                                 DW CobraMk3Len                             ;09 $09
  80+ E133 CB 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E135 8D 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E137 07 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E139 21 01                                 DW CoriolisLen                             ;13 $0D
  84+ E13B 07 01                                 DW CougarLen                               ;14 $0E
  85+ E13D 61 01                                 DW DodoLen                                 ;15 $0F
  86+ E13F
  87+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00           Adder:	                DB $00
   2++E140 C4 09                                DW $09C4
   3++E142 C4 E1                                DW AdderEdges
   4++E144 74                                   DB AdderEdgesSize
   5++E145 00 16                                DB $00, $16
   6++E147 6C                                   DB AdderVertSize
   7++E148 1D                                   DB AdderEdgesCnt
   8++E149 00 28                                DB $00, $28
   9++E14B 3C                                   DB AdderNormalsSize
  10++E14C 17 48 18                             DB $17, $48, $18
  11++E14F 38 E2                                DW AdderNormals
  12++E151 02 21                                DB $02, $21
  13++E153 58 E1                                DW AdderVertices
  14++E155 00 00                                DB 0,0                      ; Type and Tactics
  15++E157 01                                   DB ShipCanAnger
  16++E158 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  16++E15C 01 BC
  17++E15E 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  17++E162 01 23
  18++E164 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  18++E168 23 45
  19++E16A 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  19++E16E 45 66
  20++E170 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  20++E174 56 7E
  21++E176 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  21++E17A 78 AE
  22++E17C 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  22++E180 89 AA
  23++E182 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  23++E186 9A BC
  24++E188 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  24++E18C 78 9D
  25++E18E 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  25++E192 46 7D
  26++E194 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  26++E198 09 BD
  27++E19A 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  27++E19E 02 4D
  28++E1A0 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  28++E1A4 1A CE
  29++E1A6 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  29++E1AA 13 5E
  30++E1AC 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  30++E1B0 00 00
  31++E1B2 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  31++E1B6 00 00
  32++E1B8 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  32++E1BC 00 00
  33++E1BE 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  33++E1C2 00 00
  34++E1C4              AdderVertSize:          equ $ - AdderVertices
  35++E1C4 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  36++E1C8 07 23 04 08                          DB $07, $23, $04, $08               ;02
  37++E1CC 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  38++E1D0 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  39++E1D4 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  40++E1D8 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  41++E1DC 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  42++E1E0 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  43++E1E4 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  44++E1E8 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  45++E1EC 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  46++E1F0 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  47++E1F4 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  48++E1F8 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  49++E1FC 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  50++E200 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  51++E204 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  52++E208 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  53++E20C 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  54++E210 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  55++E214 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  56++E218 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  57++E21C 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  58++E220 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  59++E224 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  60++E228 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  61++E22C 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  62++E230 04 00 40 44                          DB $04, $00, $40, $44               ;28
  63++E234 03 00 44 38                          DB $03, $00, $44, $38               ;29
  64++E238              AdderEdgesSize:         equ $ - AdderEdges
  65++E238              AdderEdgesCnt:          equ AdderEdgesSize/4
  66++E238 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  67++E23C 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  68++E240 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  69++E244 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  70++E248 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  71++E24C 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  72++E250 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  73++E254 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  74++E258 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  75++E25C 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  76++E260 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  77++E264 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  78++E268 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  79++E26C 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  80++E270 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  81++E274
  82++E274              AdderNormalsSize:       equ $ - AdderNormals
  83++E274              AdderLen:                equ $ - Adder
  84++E274
  85++E274
  86++E274
  87++E274
  88++E274
  89++E274
  90++E274
  91++E274
  92++E274
  93++E274
  94++E274
# file closed: ./Data/ships/Adder.asm
  88+ E274                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E274 07           Anaconda:	            DB $07
   2++E275 10 27                                DW $2710
   3++E277 E7 E2                                DW AnacondaEdges
   4++E279 64                                   DB AnacondaEdgesSize
   5++E27A 30 2E                                DB $30, $2E
   6++E27C 5A                                   DB AnacondaVertSize
   7++E27D 19                                   DB AnacondaEdgesCnt
   8++E27E 00 00                                DB $00, $00
   9++E280 30                                   DB AnacondaNormalsSize
  10++E281 24 FC 0E                             DB $24, $FC, $0E
  11++E284 4B E3                                DW AnacondaNormals
  12++E286 01 3F                                DB $01, $3F
  13++E288 8D E2                                DW AnacondaVertices
  14++E28A 00 00                                DB 0,0                      ; Type and Tactics
  15++E28C 01                                   DB ShipCanAnger
  16++E28D 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  16++E291 01 55
  17++E293 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  17++E297 01 22
  18++E299 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  18++E29D 02 33
  19++E29F 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  19++E2A3 03 44
  20++E2A5 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  20++E2A9 04 55
  21++E2AB 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  21++E2AF 15 66
  22++E2B1 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  22++E2B5 12 77
  23++E2B7 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  23++E2BB 23 88
  24++E2BD 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  24++E2C1 34 99
  25++E2C3 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  25++E2C7 45 AA
  26++E2C9 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  26++E2CD FF FF
  27++E2CF 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  27++E2D3 27 88
  28++E2D5 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  28++E2D9 FF FF
  29++E2DB 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  29++E2DF 49 AA
  30++E2E1 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  30++E2E5 FF FF
  31++E2E7              AnacondaVertSize:       equ $ - AnacondaVertices
  32++E2E7 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  33++E2EB 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  34++E2EF 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  35++E2F3 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  36++E2F7 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  37++E2FB 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  38++E2FF 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  39++E303 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  40++E307 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  41++E30B 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  42++E30F 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  43++E313 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  44++E317 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  45++E31B 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  46++E31F 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  47++E323 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  48++E327 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  49++E32B 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  50++E32F 1E 5A 24 38                          DB $1E, $5A, $24, $38
  51++E333 1E 56 14 38                          DB $1E, $56, $14, $38
  52++E337 1E 6B 28 38                          DB $1E, $6B, $28, $38
  53++E33B 1F 7B 28 30                          DB $1F, $7B, $28, $30
  54++E33F 1F 78 2C 30                          DB $1F, $78, $2C, $30
  55++E343 1F 9A 30 34                          DB $1F, $9A, $30, $34
  56++E347 1F AB 30 38                          DB $1F, $AB, $30, $38
  57++E34B              AnacondaEdgesSize:      equ $ - AnacondaEdges
  58++E34B              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  59++E34B 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  60++E34F BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  61++E353 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  62++E357 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  63++E35B 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  64++E35F 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  65++E363 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  66++E367 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  67++E36B DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  68++E36F 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  69++E373 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  70++E377 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  71++E37B              AnacondaNormalsSize:    equ $ - AnacondaNormals
  72++E37B              AnacondaLen:            equ $ - Anaconda
  73++E37B
  74++E37B
  75++E37B
  76++E37B
# file closed: ./Data/ships/Anaconda.asm
  89+ E37B                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37B 00           Asp_Mk_2:	            DB $00
   2++E37C 10 0E                                DW $0E10
   3++E37E 06 E4                                DW Asp_Mk_2Edges
   4++E380 70                                   DB Asp_Mk_2EdgesSize
   5++E381 20 1A                                DB $20, $1A
   6++E383 72                                   DB Asp_Mk_2VertSize
   7++E384 1C                                   DB Asp_Mk_2EdgesCnt
   8++E385 00 C8                                DB $00, $C8
   9++E387 30                                   DB Asp_Mk_2NormalsSize
  10++E388 28 96 28                             DB $28, $96, $28
  11++E38B 76 E4                                DW Asp_Mk_2Normals
  12++E38D 01 29                                DB $01, $29
  13++E38F 94 E3                                DW Asp_Mk_2Vertices
  14++E391 00 00                                DB 0,0                      ; Type and Tactics
  15++E393 01                                   DB ShipCanAnger
  16++E394 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  16++E398 01 22
  17++E39A 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  17++E39E 12 BB
  18++E3A0 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  18++E3A4 16 BB
  19++E3A6 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  19++E3AA 16 79
  20++E3AC 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  20++E3B0 01 77
  21++E3B2 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  21++E3B6 25 BB
  22++E3B8 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  22++E3BC 25 8A
  23++E3BE 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  23++E3C2 02 88
  24++E3C4 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  24++E3C8 04 79
  25++E3CA 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  25++E3CE 04 8A
  26++E3D0 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  26++E3D4 34 69
  27++E3D6 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  27++E3DA 34 5A
  28++E3DC 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  28++E3E0 35 6B
  29++E3E2 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  29++E3E6 BB BB
  30++E3E8 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  30++E3EC BB BB
  31++E3EE 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  31++E3F2 BB BB
  32++E3F4 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  32++E3F8 BB BB
  33++E3FA 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  33++E3FE 04 04
  34++E400 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  34++E404 04 04
  35++E406              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  36++E406 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  37++E40A 16 01 00 10                          DB $16, $01, $00, $10           ;02
  38++E40E 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  39++E412 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  40++E416 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  41++E41A 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  42++E41E 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  43++E422 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  44++E426 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  45++E42A 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  46++E42E 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  47++E432 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  48++E436 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  49++E43A 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  50++E43E 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  51++E442 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  52++E446 16 36 28 30                          DB $16, $36, $28, $30           ;17
  53++E44A 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  54++E44E 16 34 28 2C                          DB $16, $34, $28, $2C
  55++E452 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  56++E456 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  57++E45A 1F 69 0C 28                          DB $1F, $69, $0C, $28
  58++E45E 1F 49 20 28                          DB $1F, $49, $20, $28
  59++E462 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  60++E466 09 BB 3C 38                          DB $09, $BB, $3C, $38
  61++E46A 08 BB 38 40                          DB $08, $BB, $38, $40
  62++E46E 08 BB 40 34                          DB $08, $BB, $40, $34
  63++E472 0A 04 48 44                          DB $0A, $04, $48, $44
  64++E476              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  65++E476              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  66++E476 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  67++E47A 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  68++E47E FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  69++E482 36 00 18 01                          DB $36, $00, $18, $01           ;04
  70++E486 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  71++E48A BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  72++E48E 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  73++E492 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  74++E496 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  75++E49A 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  76++E49E 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  77++E4A2 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  78++E4A6              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  79++E4A6              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  80++E4A6
  81++E4A6
  82++E4A6
  83++E4A6
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4A6                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4A6 05           Boa:	                DB $05
   2++E4A7 24 13                                DW $1324
   3++E4A9 0D E5                                DW BoaEdges
   4++E4AB 60                                   DB BoaEdgesSize
   5++E4AC 00 26                                DB $00, $26
   6++E4AE 4E                                   DB BoaVertSize
   7++E4AF 18                                   DB BoaEdgesCnt
   8++E4B0 00 00                                DB $00, $00
   9++E4B2 30                                   DB BoaNormalsSize
  10++E4B3 28 FA 18                             DB $28, $FA, $18
  11++E4B6 6D E5                                DW BoaNormals
  12++E4B8 00 1C                                DB $00, $1C
  13++E4BA BF E4                                DW BoaVertices
  14++E4BC 00 00                                DB 0,0                      ; Type and Tactics
  15++E4BE 01                                   DB ShipCanAnger
  16++E4BF 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  16++E4C3 FF FF
  17++E4C5 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  17++E4C9 02 33
  18++E4CB 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  18++E4CF 01 44
  19++E4D1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  19++E4D5 12 55
  20++E4D7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  20++E4DB 23 69
  21++E4DD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  21++E4E1 03 6B
  22++E4E3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  22++E4E7 04 8B
  23++E4E9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  23++E4ED 14 8A
  24++E4EF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  24++E4F3 15 7A
  25++E4F5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  25++E4F9 25 79
  26++E4FB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  26++E4FF 02 AA
  27++E501 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  27++E505 01 AA
  28++E507 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  28++E50B 12 CC
  29++E50D              BoaVertSize:            equ $ - BoaVertices
  30++E50D 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  31++E511 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  32++E515 1F 79 00 24                          DB $1F, $79, $00, $24
  33++E519 1D 69 00 10                          DB $1D, $69, $00, $10
  34++E51D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  35++E521 1D 7A 00 20                          DB $1D, $7A, $00, $20
  36++E525 1F 36 10 14                          DB $1F, $36, $10, $14
  37++E529 1F 0B 14 18                          DB $1F, $0B, $14, $18
  38++E52D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  39++E531 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  40++E535 1F 57 20 24                          DB $1F, $57, $20, $24
  41++E539 1F 29 10 24                          DB $1F, $29, $10, $24
  42++E53D 18 23 04 10                          DB $18, $23, $04, $10
  43++E541 18 03 04 14                          DB $18, $03, $04, $14
  44++E545 18 25 0C 24                          DB $18, $25, $0C, $24
  45++E549 18 15 0C 20                          DB $18, $15, $0C, $20
  46++E54D 18 04 08 18                          DB $18, $04, $08, $18
  47++E551 18 14 08 1C                          DB $18, $14, $08, $1C
  48++E555 16 02 04 28                          DB $16, $02, $04, $28
  49++E559 16 01 08 2C                          DB $16, $01, $08, $2C
  50++E55D 16 12 0C 30                          DB $16, $12, $0C, $30
  51++E561 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  52++E565 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  53++E569 0E 2C 30 28                          DB $0E, $2C, $30, $28
  54++E56D              BoaEdgesSize:           equ $ - BoaEdges
  55++E56D              BoaEdgesCnt:            equ BoaEdgesSize/4
  56++E56D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  57++E571 7F 00 2D 59                          DB $7F, $00, $2D, $59
  58++E575 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  59++E579 1F 00 28 00                          DB $1F, $00, $28, $00
  60++E57D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  61++E581 FF 3E 20 14                          DB $FF, $3E, $20, $14
  62++E585 1F 00 17 06                          DB $1F, $00, $17, $06
  63++E589 DF 17 0F 09                          DB $DF, $17, $0F, $09
  64++E58D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  65++E591 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  66++E595 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  67++E599 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  68++E59D              BoaNormalsSize:         equ $ - BoaNormals
  69++E59D              BoaLen:                 equ $ - Boa
  70++E59D
# file closed: ./Data/ships/Boa.asm
  91+ E59D
  92+ E59D                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E59D              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E59D              ; Corrected pointers
   3++E59D              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E59D              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E59D              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E59D              ;;;				 Example of cargo
   7++E59D              ;;;
   8++E59D              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E59D              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E59D              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E59D              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E59D              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E59D              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E59D              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E59D              ;;;		Edges
  16++E59D              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E59D              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E59D              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E59D              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E59D              ;;;	  	Normals (Faces)
  21++E59D              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E59D              ;;;		Byte 1 = X Lo
  23++E59D              ;;;		Byte 2 = Y Lo
  24++E59D              ;;;		Byte 3 = Z Lo
  25++E59D
  26++E59D 00           CargoType5              DB $00
  27++E59E 90 01                                DW $0190
  28++E5A0 F2 E5                                DW CargoType5Edges
  29++E5A2 3C                                   DB CargoType5EdgesSize
  30++E5A3 00 12                                DB $00,$12
  31++E5A5 3C                                   DB CargoType5VertSize
  32++E5A6 0F                                   DB CargoType5EdgesCnt
  33++E5A7 00 00                                DB $00,$00
  34++E5A9 1C                                   DB CargoType5NormalsSize
  35++E5AA 0C 11 0F                             DB $0C,$11,$0F
  36++E5AD 2E E6                                DW CargoType5Normals
  37++E5AF 02 00                                DB $02,$00
  38++E5B1 B6 E5                                DW CargoType5Vertices
  39++E5B3 04                                   DB ShipTypeScoopable        ; Type
  40++E5B4 00                                   DB 0                        ; Tactics
  41++E5B5 00                                   DB 0
  42++E5B6              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  43++E5B6 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  43++E5BA 10 55
  44++E5BC 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  44++E5C0 10 22
  45++E5C2 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  45++E5C6 20 33
  46++E5C8 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  46++E5CC 30 44
  47++E5CE 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  47++E5D2 40 55
  48++E5D4 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  48++E5D8 51 66
  49++E5DA 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  49++E5DE 21 66
  50++E5E0 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  50++E5E4 32 66
  51++E5E6 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  51++E5EA 43 66
  52++E5EC 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  52++E5F0 54 66
  53++E5F2              CargoType5VertSize      equ $  - CargoType5Vertices
  54++E5F2 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  54++E5F6 1F 20 04 08
  55++E5FA 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  55++E5FE 1F 40 0C 10
  56++E602 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  56++E606 1F 51 00 14
  57++E60A 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  57++E60E 1F 32 08 1C
  58++E612 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  58++E616 1F 54 10 24
  59++E61A 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  59++E61E 1F 62 18 1C
  60++E622 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  60++E626 1F 64 20 24
  61++E62A 1F 65 24 14                          DB $1F,$65,$24,$14
  62++E62E              CargoType5EdgesSize     equ $  - CargoType5Edges
  63++E62E              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  64++E62E 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  65++E632 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  65++E636 5F 00 12 30
  66++E63A 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  66++E63E 7F 00 12 30
  67++E642 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  67++E646 9F 60 00 00
  68++E64A              CargoType5NormalsSize   equ $  - CargoType5Normals
  69++E64A              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E64A                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E64A 00           Boulder:	            DB $00
   2++E64B 84 03                                DW $0384
   3++E64D 8D E6                                DW BoulderEdges
   4++E64F 3C                                   DB BoulderEdgesSize
   5++E650 00 0E                                DB $00, $0E
   6++E652 2A                                   DB BoulderVertSize
   7++E653 0F                                   DB BoulderEdgesCnt
   8++E654 00 01                                DB $00, $01
   9++E656 28                                   DB BoulderNormalsSize
  10++E657 14 14 1E                             DB $14, $14, $1E
  11++E65A C9 E6                                DW BoulderNormals
  12++E65C 02 00                                DB $02, $00
  13++E65E 63 E6                                DW BoulderVertices
  14++E660 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  15++E662 00                                   DB 0
  16++E663 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  16++E667 01 59
  17++E669 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  17++E66D 12 56
  18++E66F 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  18++E673 23 67
  19++E675 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  19++E679 34 78
  20++E67B 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  20++E67F 04 89
  21++E681 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  21++E685 FF FF
  22++E687 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  22++E68B FF FF
  23++E68D              BoulderVertSize:        equ $ - BoulderVertices
  24++E68D 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  25++E691 1F 26 04 08                          DB $1F, $26, $04, $08
  26++E695 1F 37 08 0C                          DB $1F, $37, $08, $0C
  27++E699 1F 48 0C 10                          DB $1F, $48, $0C, $10
  28++E69D 1F 09 10 00                          DB $1F, $09, $10, $00
  29++E6A1 1F 01 00 14                          DB $1F, $01, $00, $14
  30++E6A5 1F 12 04 14                          DB $1F, $12, $04, $14
  31++E6A9 1F 23 08 14                          DB $1F, $23, $08, $14
  32++E6AD 1F 34 0C 14                          DB $1F, $34, $0C, $14
  33++E6B1 1F 04 10 14                          DB $1F, $04, $10, $14
  34++E6B5 1F 59 00 18                          DB $1F, $59, $00, $18
  35++E6B9 1F 56 04 18                          DB $1F, $56, $04, $18
  36++E6BD 1F 67 08 18                          DB $1F, $67, $08, $18
  37++E6C1 1F 78 0C 18                          DB $1F, $78, $0C, $18
  38++E6C5 1F 89 10 18                          DB $1F, $89, $10, $18
  39++E6C9              BoulderEdgesSize:       equ $ - BoulderEdges
  40++E6C9              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  41++E6C9 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  42++E6CD 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  43++E6D1 5F 20 2F 18                          DB $5F, $20, $2F, $18
  44++E6D5 FF 03 27 07                          DB $FF, $03, $27, $07
  45++E6D9 FF 05 04 01                          DB $FF, $05, $04, $01
  46++E6DD 1F 31 54 08                          DB $1F, $31, $54, $08
  47++E6E1 3F 70 15 15                          DB $3F, $70, $15, $15
  48++E6E5 7F 4C 23 52                          DB $7F, $4C, $23, $52
  49++E6E9 3F 16 38 89                          DB $3F, $16, $38, $89
  50++E6ED 3F 28 6E 26                          DB $3F, $28, $6E, $26
  51++E6F1              BoulderNormalsSize:     equ $ - BoulderNormals
  52++E6F1              BoulderLen:             equ $ - Boulder
  53++E6F1
# file closed: ./Data/ships/Boulder.asm
  94+ E6F1                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6F1 00           Asteroid:	            DB $00
   2++E6F2 00 19                                DW $1900
   3++E6F4 40 E7                                DW AsteroidEdges
   4++E6F6 54                                   DB AsteroidEdgesSize
   5++E6F7 00 22                                DB $00, $22
   6++E6F9 36                                   DB AsteroidVertSize
   7++E6FA 15                                   DB AsteroidEdgesCnt
   8++E6FB 00 05                                DB $00, $05
   9++E6FD 38                                   DB AsteroidNormalsSize
  10++E6FE 32 3C 1E                             DB $32, $3C, $1E
  11++E701 94 E7                                DW AsteroidNormals
  12++E703 01 00                                DB $01, $00
  13++E705 0A E7                                DW AsteroidVertices
  14++E707 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  15++E709 00                                   DB 0
  16++E70A 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  16++E70E FF FF
  17++E710 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  17++E714 FF FF
  18++E716 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  18++E71A FF FF
  19++E71C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  19++E720 FF FF
  20++E722 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  20++E726 65 DC
  21++E728 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  21++E72C FF FF
  22++E72E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  22++E732 10 32
  23++E734 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  23++E738 FF FF
  24++E73A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  24++E73E 98 BA
  25++E740              AsteroidVertSize:       equ $ - AsteroidVertices
  26++E740 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  27++E744 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  28++E748 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  29++E74C 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  30++E750 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  31++E754 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  32++E758 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  33++E75C 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  34++E760 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  35++E764 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  36++E768 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  37++E76C 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  38++E770 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  39++E774 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  40++E778 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  41++E77C 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  42++E780 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  43++E784 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  44++E788 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  45++E78C 1F BA 08 20                          DB $1F, $BA, $08, $20
  46++E790 1F 98 1C 20                          DB $1F, $98, $1C, $20
  47++E794
  48++E794              AsteroidEdgesSize:      equ $ - AsteroidEdges
  49++E794              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  50++E794 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  51++E798 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  52++E79C 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  53++E7A0 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  54++E7A4 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  55++E7A8 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  56++E7AC 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  57++E7B0 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  58++E7B4 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  59++E7B8 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  60++E7BC FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  61++E7C0 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  62++E7C4 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  63++E7C8 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  64++E7CC              AsteroidNormalsSize:    equ $ - AsteroidNormals
  65++E7CC              AsteroidLen:            equ $ - Asteroid
  66++E7CC
  67++E7CC
# file closed: ./Data/ships/Asteroid.asm
  95+ E7CC
  96+ E7CC                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7CC 00           Bushmaster:	            DB $00
   2++E7CD 9A 10                                DW $109A
   3++E7CF 2D E8                                DW BushmasterEdges
   4++E7D1 4C                                   DB BushmasterEdgesSize
   5++E7D2 00 1E                                DB $00, $1E
   6++E7D4 48                                   DB BushmasterVertSize
   7++E7D5 13                                   DB BushmasterEdgesCnt
   8++E7D6 00 96                                DB $00, $96
   9++E7D8 24                                   DB BushmasterNormalsSize
  10++E7D9 14 4A 23                             DB $14, $4A, $23
  11++E7DC 79 E8                                DW BushmasterNormals
  12++E7DE 02 21                                DB $02, $21
  13++E7E0 E5 E7                                DW BushmasterVertices
  14++E7E2 00 00                                DB 0,0                      ; Type and Tactics
  15++E7E4 01                                   DB ShipCanAnger
  16++E7E5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  16++E7E9 23 01
  17++E7EB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  17++E7EF 57 13
  18++E7F1 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  18++E7F5 46 02
  19++E7F7 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  19++E7FB 45 01
  20++E7FD 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  20++E801 FF FF
  21++E803 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  21++E807 88 45
  22++E809 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  22++E80D 88 57
  23++E80F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  23++E813 88 46
  24++E815 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  24++E819 88 88
  25++E81B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  25++E81F 88 88
  26++E821 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  26++E825 88 88
  27++E827 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  27++E82B 88 88
  28++E82D              BushmasterVertSize:     equ $ - BushmasterVertices
  29++E82D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  30++E831 1F 02 00 08                          DB $1F, $02, $00, $08
  31++E835 1F 01 00 0C                          DB $1F, $01, $00, $0C
  32++E839 1F 23 00 10                          DB $1F, $23, $00, $10
  33++E83D 1F 45 0C 14                          DB $1F, $45, $0C, $14
  34++E841 1F 04 08 0C                          DB $1F, $04, $08, $0C
  35++E845 1F 15 04 0C                          DB $1F, $15, $04, $0C
  36++E849 1F 46 08 1C                          DB $1F, $46, $08, $1C
  37++E84D 1F 57 04 18                          DB $1F, $57, $04, $18
  38++E851 1F 26 08 10                          DB $1F, $26, $08, $10
  39++E855 1F 37 04 10                          DB $1F, $37, $04, $10
  40++E859 1F 48 14 1C                          DB $1F, $48, $14, $1C
  41++E85D 1F 58 14 18                          DB $1F, $58, $14, $18
  42++E861 1F 68 10 1C                          DB $1F, $68, $10, $1C
  43++E865 1F 78 10 18                          DB $1F, $78, $10, $18
  44++E869 0A 88 20 24                          DB $0A, $88, $20, $24
  45++E86D 0A 88 24 28                          DB $0A, $88, $24, $28
  46++E871 0A 88 28 2C                          DB $0A, $88, $28, $2C
  47++E875 0A 88 2C 20                          DB $0A, $88, $2C, $20
  48++E879              BushmasterEdgesSize:    equ $ - BushmasterEdges
  49++E879              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  50++E879 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  51++E87D 1F 17 58 1D                          DB $1F, $17, $58, $1D
  52++E881 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  53++E885 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  54++E889 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  55++E88D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  56++E891 FF 2A 55 07                          DB $FF, $2A, $55, $07
  57++E895 7F 2A 55 07                          DB $7F, $2A, $55, $07
  58++E899 3F 00 00 60                          DB $3F, $00, $00, $60
  59++E89D              BushmasterNormalsSize:  equ $ - BushmasterNormals
  60++E89D              BushmasterLen:          equ $ - Bushmaster
  61++E89D
# file closed: ./Data/ships/Bushmaster.asm
  97+ E89D                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E89D 03           Chameleon:	            DB $03
   2++E89E A0 0F                                DW $0FA0
   3++E8A0 22 E9                                DW ChameleonEdges
   4++E8A2 74                                   DB ChameleonEdgesSize
   5++E8A3 00 1A                                DB $00, $1A
   6++E8A5 6C                                   DB ChameleonVertSize
   7++E8A6 1D                                   DB ChameleonEdgesCnt
   8++E8A7 00 C8                                DB $00, $C8
   9++E8A9 34                                   DB ChameleonNormalsSize
  10++E8AA 0A 64 1D                             DB $0A, $64, $1D
  11++E8AD 96 E9                                DW ChameleonNormals
  12++E8AF 01 23                                DB $01, $23
  13++E8B1 B6 E8                                DW ChameleonVertices
  14++E8B3 00 00                                DB 0,0                      ; Type and Tactics
  15++E8B5 01                                   DB ShipCanAnger
  16++E8B6 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  16++E8BA 25 01
  17++E8BC 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  17++E8C0 34 01
  18++E8C2 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  18++E8C6 8B 25
  19++E8C8 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  19++E8CC 68 22
  20++E8CE 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  20++E8D2 69 33
  21++E8D4 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  21++E8D8 9A 34
  22++E8DA 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  22++E8DE 7A 44
  23++E8E0 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  23++E8E4 7B 55
  24++E8E6 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  24++E8EA 36 02
  25++E8EC 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  25++E8F0 57 14
  26++E8F2 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  26++E8F6 BC 88
  27++E8F8 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  27++E8FC 9C 68
  28++E8FE 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  28++E902 AC 99
  29++E904 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  29++E908 BC 7A
  30++E90A 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  30++E90E CC CC
  31++E910 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  31++E914 CC CC
  32++E916 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  32++E91A CC CC
  33++E91C 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  33++E920 CC CC
  34++E922              ChameleonVertSize:      equ $ - ChameleonVertices
  35++E922 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  36++E926 1F 02 00 20                          DB $1F, $02, $00, $20
  37++E92A 1F 15 00 24                          DB $1F, $15, $00, $24
  38++E92E 1F 03 04 20                          DB $1F, $03, $04, $20
  39++E932 1F 14 04 24                          DB $1F, $14, $04, $24
  40++E936 1F 34 04 14                          DB $1F, $34, $04, $14
  41++E93A 1F 25 00 08                          DB $1F, $25, $00, $08
  42++E93E 1F 26 0C 20                          DB $1F, $26, $0C, $20
  43++E942 1F 36 10 20                          DB $1F, $36, $10, $20
  44++E946 1F 75 1C 24                          DB $1F, $75, $1C, $24
  45++E94A 1F 74 18 24                          DB $1F, $74, $18, $24
  46++E94E 1F 39 10 14                          DB $1F, $39, $10, $14
  47++E952 1F 4A 14 18                          DB $1F, $4A, $14, $18
  48++E956 1F 28 08 0C                          DB $1F, $28, $08, $0C
  49++E95A 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  50++E95E 1F 8B 08 28                          DB $1F, $8B, $08, $28
  51++E962 1F 9A 14 30                          DB $1F, $9A, $14, $30
  52++E966 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  53++E96A 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  54++E96E 1F 69 10 2C                          DB $1F, $69, $10, $2C
  55++E972 1F 7A 18 34                          DB $1F, $7A, $18, $34
  56++E976 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  57++E97A 1F BC 28 34                          DB $1F, $BC, $28, $34
  58++E97E 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  59++E982 1F AC 30 34                          DB $1F, $AC, $30, $34
  60++E986 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  61++E98A 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  62++E98E 0A CC 40 44                          DB $0A, $CC, $40, $44
  63++E992 0A CC 44 38                          DB $0A, $CC, $44, $38
  64++E996              ChameleonEdgesSize:     equ $ - ChameleonEdges
  65++E996              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  66++E996 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  67++E99A 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  68++E99E 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  69++E9A2 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  70++E9A6 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  71++E9AA DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  72++E9AE 1F 00 60 00                          DB $1F, $00, $60, $00
  73++E9B2 5F 00 60 00                          DB $5F, $00, $60, $00
  74++E9B6 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  75++E9BA 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  76++E9BE 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  77++E9C2 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  78++E9C6 3F 00 00 60                          DB $3F, $00, $00, $60
  79++E9CA              ChameleonNormalsSize:   equ $ - ChameleonNormals
  80++E9CA              ChameleonLen:           equ $ - Chameleon
  81++E9CA
# file closed: ./Data/ships/Chameleon.asm
  98+ E9CA                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9CA              ; Corrected pointers
   2++E9CA              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9CA              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9CA              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9CA 03           CobraMk3    		    DB $03
   6++E9CB 41 23                                DW $2341
   7++E9CD 8B EA                                DW CobraMk3Edges
   8++E9CF 98                                   DB CobraMkEdgesSize
   9++E9D0 54 2A                                DB $54,$2A
  10++E9D2 A8                                   DB CobraMkVertSize
  11++E9D3 26                                   DB CobraMkEdgesCnt
  12++E9D4 00 00                                DB $00,$00
  13++E9D6 34                                   DB CobraMk3NormalsSize
  14++E9D7 32 96 1C                             DB $32,$96,$1C
  15++E9DA 23 EB                                DW CobraMk3Normals
  16++E9DC 01 13                                DB $01,$13
  17++E9DE E3 E9                                DW CobraMk3Vertices
  18++E9E0 00 00                                DB 0,0                      ; Type and Tactics
  19++E9E2 01                                   DB ShipCanAnger
  20++E9E3                                  ; missiles = 3
  21++E9E3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  21++E9E7 FF FF
  22++E9E9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  22++E9ED FF FF
  23++E9EF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  23++E9F3 FF FF
  24++E9F5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  24++E9F9 73 AA
  25++E9FB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  25++E9FF 84 CC
  26++EA01 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  26++EA05 FF FF
  27++EA07 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  27++EA0B FF FF
  28++EA0D 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  28++EA11 98 CC
  29++EA13 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  29++EA17 97 AA
  30++EA19 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  30++EA1D 65 99
  31++EA1F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  31++EA23 A9 BB
  32++EA25 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  32++EA29 B9 CC
  33++EA2B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  33++EA2F 99 99
  34++EA31 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  34++EA35 99 99
  35++EA37 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  35++EA3B 99 99
  36++EA3D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  36++EA41 99 99
  37++EA43 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  37++EA47 99 99
  38++EA49 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  38++EA4D 99 99
  39++EA4F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  39++EA53 99 99
  40++EA55 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  40++EA59 99 99
  41++EA5B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  41++EA5F B0 BB
  42++EA61 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  42++EA65 B0 BB
  43++EA67 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  43++EA6B 99 99
  44++EA6D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  44++EA71 99 99
  45++EA73 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  45++EA77 99 99
  46++EA79 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  46++EA7D 99 99
  47++EA7F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  47++EA83 99 99
  48++EA85 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  48++EA89 99 99
  49++EA8B              CobraMkVertSize         equ $  - CobraMk3Vertices
  50++EA8B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  50++EA8F 1F C4 00 10
  51++EA93 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  51++EA97 1F A7 0C 20
  52++EA9B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  52++EA9F 1F 98 18 1C
  53++EAA3 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  53++EAA7 1F 95 14 24
  54++EAAB 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  54++EAAF 1F 51 08 14
  55++EAB3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  55++EAB7 1F 73 0C 14
  56++EABB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  56++EABF 1F 10 04 08
  57++EAC3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  57++EAC7 1F A9 20 28
  58++EACB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  58++EACF 1F C9 1C 2C
  59++EAD3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  59++EAD7 1F CB 00 2C
  60++EADB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  60++EADF 1D 42 00 18
  61++EAE3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  61++EAE7 14 99 30 34
  62++EAEB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  62++EAEF 14 99 38 3C
  63++EAF3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  63++EAF7 13 99 3C 40
  64++EAFB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  64++EAFF 13 99 34 48
  65++EB03 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  65++EB07 1E 65 08 24
  66++EB0B 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  66++EB0F 06 99 5C 60
  67++EB13 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  67++EB17 06 99 64 68
  68++EB1B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  68++EB1F 08 99 64 6C
  69++EB23              CobraMkEdgesSize        equ $  - CobraMk3Edges
  70++EB23              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  71++EB23              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  72++EB23 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  73++EB27 9F 12 37 10                          DB $9F,$12,$37,$10
  74++EB2B 1F 12 37 10                          DB $1F,$12,$37,$10
  75++EB2F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  76++EB33 1F 10 34 0E                          DB $1F,$10,$34,$0E
  77++EB37 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  78++EB3B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  79++EB3F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  80++EB43 1F 3D 66 00                          DB $1F,$3D,$66,$00
  81++EB47 3F 00 00 50                          DB $3F,$00,$00,$50
  82++EB4B DF 07 2A 09                          DB $DF,$07,$2A,$09
  83++EB4F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  84++EB53 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  85++EB57              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  86++EB57              CobraMk3Len             equ $  - CobraMk3
  87++EB57
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB57                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB57 03           Cobra_Mk_1:	            DB $03
   2++EB58 49 26                                DW $2649
   3++EB5A B2 EB                                DW Cobra_Mk_1Edges
   4++EB5C 48                                   DB Cobra_Mk_1EdgesSize
   5++EB5D 28 1A                                DB $28, $1A
   6++EB5F 42                                   DB Cobra_Mk_1VertSize
   7++EB60 12                                   DB Cobra_Mk_1EdgesCnt
   8++EB61 00 4B                                DB $00, $4B
   9++EB63 28                                   DB Cobra_Mk_1NormalsSize
  10++EB64 13 51 1A                             DB $13, $51, $1A
  11++EB67 FA EB                                DW Cobra_Mk_1Normals
  12++EB69 02 22                                DB $02, $22
  13++EB6B 70 EB                                DW Cobra_Mk_1Vertices
  14++EB6D 00 00                                DB 0,0                      ; Type and Tactics
  15++EB6F 01                                   DB ShipCanAnger
  16++EB70 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  16++EB74 01 23
  17++EB76 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  17++EB7A 01 45
  18++EB7C 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  18++EB80 23 88
  19++EB82 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  19++EB86 45 99
  20++EB88 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  20++EB8C 26 78
  21++EB8E 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  21++EB92 46 79
  22++EB94 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  22++EB98 13 78
  23++EB9A 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  23++EB9E 15 79
  24++EBA0 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  24++EBA4 02 46
  25++EBA6 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  25++EBAA 01 11
  26++EBAC 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  26++EBB0 01 11
  27++EBB2              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  28++EBB2 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  29++EBB6 1F 23 00 08                          DB $1F, $23, $00, $08
  30++EBBA 1F 38 08 18                          DB $1F, $38, $08, $18
  31++EBBE 1F 17 18 1C                          DB $1F, $17, $18, $1C
  32++EBC2 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  33++EBC6 1F 45 0C 04                          DB $1F, $45, $0C, $04
  34++EBCA 1F 28 08 10                          DB $1F, $28, $08, $10
  35++EBCE 1F 67 10 14                          DB $1F, $67, $10, $14
  36++EBD2 1F 49 14 0C                          DB $1F, $49, $14, $0C
  37++EBD6 14 02 00 20                          DB $14, $02, $00, $20
  38++EBDA 14 04 20 04                          DB $14, $04, $20, $04
  39++EBDE 10 26 10 20                          DB $10, $26, $10, $20
  40++EBE2 10 46 20 14                          DB $10, $46, $20, $14
  41++EBE6 1F 78 10 18                          DB $1F, $78, $10, $18
  42++EBEA 1F 79 14 1C                          DB $1F, $79, $14, $1C
  43++EBEE 14 13 00 18                          DB $14, $13, $00, $18
  44++EBF2 14 15 04 1C                          DB $14, $15, $04, $1C
  45++EBF6 02 01 28 24                          DB $02, $01, $28, $24
  46++EBFA              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  47++EBFA              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  48++EBFA 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  49++EBFE 5F 00 1B 03                          DB $5F, $00, $1B, $03
  50++EC02 9F 08 2E 08                          DB $9F, $08, $2E, $08
  51++EC06 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  52++EC0A 1F 08 2E 08                          DB $1F, $08, $2E, $08
  53++EC0E 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  54++EC12 1F 00 31 00                          DB $1F, $00, $31, $00
  55++EC16 3F 00 00 9A                          DB $3F, $00, $00, $9A
  56++EC1A BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  57++EC1E 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  58++EC22              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  59++EC22              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  60++EC22
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC22                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC22 01           Cobra_Mk_3_P:	        DB $01
   2++EC23 41 23                                DW $2341
   3++EC25 E3 EC                                DW Cobra_Mk_3_PEdges
   4++EC27 98                                   DB Cobra_Mk_3_PEdgesSize
   5++EC28 54 2A                                DB $54, $2A
   6++EC2A A8                                   DB Cobra_Mk_3_PVertSize
   7++EC2B 26                                   DB Cobra_Mk_3_PEdgesCnt
   8++EC2C 00 AF                                DB $00, $AF
   9++EC2E 34                                   DB Cobra_Mk_3_PNormalsSize
  10++EC2F 32 96 1C                             DB $32, $96, $1C
  11++EC32 7B ED                                DW Cobra_Mk_3_PNormals
  12++EC34 01 12                                DB $01, $12
  13++EC36 3B EC                                DW Cobra_Mk_3_PVertices
  14++EC38 00 00                                DB 0,0                      ; Type and Tactics
  15++EC3A 01                                   DB ShipCanAnger
  16++EC3B 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  16++EC3F FF FF
  17++EC41 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  17++EC45 FF FF
  18++EC47 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  18++EC4B FF FF
  19++EC4D 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  19++EC51 73 AA
  20++EC53 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  20++EC57 84 CC
  21++EC59 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  21++EC5D FF FF
  22++EC5F 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  22++EC63 FF FF
  23++EC65 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  23++EC69 98 CC
  24++EC6B 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  24++EC6F 97 AA
  25++EC71 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  25++EC75 65 99
  26++EC77 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  26++EC7B A9 BB
  27++EC7D 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  27++EC81 B9 CC
  28++EC83 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  28++EC87 99 99
  29++EC89 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  29++EC8D 99 99
  30++EC8F 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  30++EC93 99 99
  31++EC95 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  31++EC99 99 99
  32++EC9B 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  32++EC9F 99 99
  33++ECA1 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  33++ECA5 99 99
  34++ECA7 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  34++ECAB 99 99
  35++ECAD 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  35++ECB1 99 99
  36++ECB3 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  36++ECB7 B0 BB
  37++ECB9 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  37++ECBD B0 BB
  38++ECBF 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  38++ECC3 99 99
  39++ECC5 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  39++ECC9 99 99
  40++ECCB 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  40++ECCF 99 99
  41++ECD1 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  41++ECD5 99 99
  42++ECD7 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  42++ECDB 99 99
  43++ECDD 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  43++ECE1 99 99
  44++ECE3              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  45++ECE3 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  46++ECE7 1F C4 00 10                          DB $1F, $C4, $00, $10
  47++ECEB 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  48++ECEF 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  49++ECF3 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  50++ECF7 1F 98 18 1C                          DB $1F, $98, $18, $1C
  51++ECFB 1F 96 18 24                          DB $1F, $96, $18, $24
  52++ECFF 1F 95 14 24                          DB $1F, $95, $14, $24
  53++ED03 1F 97 14 20                          DB $1F, $97, $14, $20
  54++ED07 1F 51 08 14                          DB $1F, $51, $08, $14
  55++ED0B 1F 62 08 18                          DB $1F, $62, $08, $18
  56++ED0F 1F 73 0C 14                          DB $1F, $73, $0C, $14
  57++ED13 1F 84 10 18                          DB $1F, $84, $10, $18
  58++ED17 1F 10 04 08                          DB $1F, $10, $04, $08
  59++ED1B 1F 20 00 08                          DB $1F, $20, $00, $08
  60++ED1F 1F A9 20 28                          DB $1F, $A9, $20, $28
  61++ED23 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  62++ED27 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  63++ED2B 1F BA 04 28                          DB $1F, $BA, $04, $28
  64++ED2F 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  65++ED33 1D 31 04 14                          DB $1D, $31, $04, $14
  66++ED37 1D 42 00 18                          DB $1D, $42, $00, $18
  67++ED3B 06 B0 50 54                          DB $06, $B0, $50, $54
  68++ED3F 14 99 30 34                          DB $14, $99, $30, $34
  69++ED43 14 99 48 4C                          DB $14, $99, $48, $4C
  70++ED47 14 99 38 3C                          DB $14, $99, $38, $3C
  71++ED4B 14 99 40 44                          DB $14, $99, $40, $44
  72++ED4F 13 99 3C 40                          DB $13, $99, $3C, $40
  73++ED53 11 99 38 44                          DB $11, $99, $38, $44
  74++ED57 13 99 34 48                          DB $13, $99, $34, $48
  75++ED5B 13 99 30 4C                          DB $13, $99, $30, $4C
  76++ED5F 1E 65 08 24                          DB $1E, $65, $08, $24
  77++ED63 06 99 58 60                          DB $06, $99, $58, $60
  78++ED67 06 99 5C 60                          DB $06, $99, $5C, $60
  79++ED6B 08 99 58 5C                          DB $08, $99, $58, $5C
  80++ED6F 06 99 64 68                          DB $06, $99, $64, $68
  81++ED73 06 99 68 6C                          DB $06, $99, $68, $6C
  82++ED77 08 99 64 6C                          DB $08, $99, $64, $6C
  83++ED7B              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  84++ED7B              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  85++ED7B 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  86++ED7F 9F 12 37 10                          DB $9F, $12, $37, $10
  87++ED83 1F 12 37 10                          DB $1F, $12, $37, $10
  88++ED87 9F 10 34 0E                          DB $9F, $10, $34, $0E
  89++ED8B 1F 10 34 0E                          DB $1F, $10, $34, $0E
  90++ED8F 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  91++ED93 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  92++ED97 9F 3D 66 00                          DB $9F, $3D, $66, $00
  93++ED9B 1F 3D 66 00                          DB $1F, $3D, $66, $00
  94++ED9F 3F 00 00 50                          DB $3F, $00, $00, $50
  95++EDA3 DF 07 2A 09                          DB $DF, $07, $2A, $09
  96++EDA7 5F 00 1E 06                          DB $5F, $00, $1E, $06
  97++EDAB 5F 07 2A 09                          DB $5F, $07, $2A, $09
  98++EDAF              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  99++EDAF              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 100++EDAF
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDAF                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDAF              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDAF              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDAF              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDAF F3           Constrictor:    	    DB $F3
   5++EDB0 49 26                                DW $2649
   6++EDB2 2E EE                                DW ConstrictorEdges
   7++EDB4 60                                   DB ConstrictorEdgesSize
   8++EDB5 00 2E                                DB $00,$2E
   9++EDB7 66                                   DB ConstrictorVertSize
  10++EDB8 18                                   DB ConstrictorEdgesCnt
  11++EDB9 18 00                                DB $18,$00
  12++EDBB 28                                   DB ConstrictorNormalsSize
  13++EDBC 2D C8 37                             DB $2D,$C8,$37
  14++EDBF 8E EE                                DW ConstrictorNormals
  15++EDC1 02 2F                                DB $02,$2F
  16++EDC3 C8 ED                                DW ConstrictorVertices
  17++EDC5 00 00                                DB 0,0                      ; Type and Tactics
  18++EDC7                                  ; missiles = 3
  19++EDC7 01                                   DB ShipCanAnger
  20++EDC8 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  20++EDCC 02 99
  21++EDCE 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  21++EDD2 01 99
  22++EDD4 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  22++EDD8 14 99
  23++EDDA 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  23++EDDE 45 89
  24++EDE0 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  24++EDE4 56 88
  25++EDE6 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  25++EDEA 67 88
  26++EDEC 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  26++EDF0 37 89
  27++EDF2 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  27++EDF6 23 99
  28++EDF8 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  28++EDFC FF FF
  29++EDFE 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  29++EE02 FF FF
  30++EE04 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  30++EE08 99 99
  31++EE0A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  31++EE0E 99 99
  32++EE10 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  32++EE14 99 99
  33++EE16 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  33++EE1A 99 99
  34++EE1C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  34++EE20 99 99
  35++EE22 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  35++EE26 99 99
  36++EE28 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  36++EE2C 9F 01
  37++EE2E              ConstrictorVertSize     equ $  - ConstrictorVertices
  38++EE2E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  38++EE32 1F 19 04 08
  39++EE36 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  39++EE3A 1F 02 00 20
  40++EE3E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  40++EE42 1F 23 1C 20
  41++EE46 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  41++EE4A 1F 49 08 0C
  42++EE4E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  42++EE52 1F 37 18 20
  43++EE56 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  43++EE5A 1F 56 10 24
  44++EE5E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  44++EE62 1F 58 0C 10
  45++EE66 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  45++EE6A 1F 78 14 18
  46++EE6E 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  46++EE72 1F 06 20 24
  47++EE76 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  47++EE7A 05 99 30 38
  48++EE7E 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  48++EE82 0A 99 2C 3C
  49++EE86 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  49++EE8A 12 99 2C 34
  50++EE8E              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  51++EE8E              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  52++EE8E 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  52++EE92 9F 18 4B 14
  53++EE96 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  53++EE9A 1F 2C 4B 00
  54++EE9E 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  54++EEA2 9F 2C 4B 00
  55++EEA6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  55++EEAA 1F 2C 4B 00
  56++EEAE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  56++EEB2 5F 00 1B 00
  57++EEB6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  58++EEB6              ConstrictorLen          equ $  - Constrictor
  59++EEB6
# file closed: ./Data/ships/Constrictor.asm
 102+ EEB6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEB6 00           Coriolis:	            DB $00
   2++EEB7 00 64                                DW $6400
   3++EEB9 2F EF                                DW CoriolisEdges
   4++EEBB 70                                   DB CoriolisEdgesSize
   5++EEBC 00 36                                DB $00, $36
   6++EEBE 60                                   DB CoriolisVertSize
   7++EEBF 1C                                   DB CoriolisEdgesCnt
   8++EEC0 00 00                                DB $00, $00
   9++EEC2 38                                   DB CoriolisNormalsSize
  10++EEC3 78 F0 00                             DB $78, $F0, $00
  11++EEC6 9F EF                                DW CoriolisNormals
  12++EEC8 00 06                                DB $00, $06
  13++EECA CF EE                                DW CoriolisVertices
  14++EECC 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  15++EECE 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  16++EECF A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  16++EED3 10 62
  17++EED5 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  17++EED9 20 83
  18++EEDB A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  18++EEDF 30 74
  19++EEE1 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  19++EEE5 10 54
  20++EEE7 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  20++EEEB 51 A6
  21++EEED A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  21++EEF1 62 B8
  22++EEF3 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  22++EEF7 73 C8
  23++EEF9 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  23++EEFD 54 97
  24++EEFF A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  24++EF03 A6 DB
  25++EF05 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  25++EF09 B8 DC
  26++EF0B A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  26++EF0F 97 DC
  27++EF11 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  27++EF15 95 DA
  28++EF17 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  28++EF1B 00 00
  29++EF1D 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  29++EF21 00 00
  30++EF23 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  30++EF27 00 00
  31++EF29 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  31++EF2D 00 00
  32++EF2F              CoriolisVertSize:       equ $ - CoriolisVertices
  33++EF2F 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  34++EF33 1F 20 00 04                          DB $1F, $20, $00, $04
  35++EF37 1F 30 04 08                          DB $1F, $30, $04, $08
  36++EF3B 1F 40 08 0C                          DB $1F, $40, $08, $0C
  37++EF3F 1F 51 0C 10                          DB $1F, $51, $0C, $10
  38++EF43 1F 61 00 10                          DB $1F, $61, $00, $10
  39++EF47 1F 62 00 14                          DB $1F, $62, $00, $14
  40++EF4B 1F 82 14 04                          DB $1F, $82, $14, $04
  41++EF4F 1F 83 04 18                          DB $1F, $83, $04, $18
  42++EF53 1F 73 08 18                          DB $1F, $73, $08, $18
  43++EF57 1F 74 08 1C                          DB $1F, $74, $08, $1C
  44++EF5B 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  45++EF5F 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  46++EF63 1F DB 20 24                          DB $1F, $DB, $20, $24
  47++EF67 1F DC 24 28                          DB $1F, $DC, $24, $28
  48++EF6B 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  49++EF6F 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  50++EF73 1F A6 10 20                          DB $1F, $A6, $10, $20
  51++EF77 1F B6 14 20                          DB $1F, $B6, $14, $20
  52++EF7B 1F B8 14 24                          DB $1F, $B8, $14, $24
  53++EF7F 1F C8 18 24                          DB $1F, $C8, $18, $24
  54++EF83 1F C7 18 28                          DB $1F, $C7, $18, $28
  55++EF87 1F 97 1C 28                          DB $1F, $97, $1C, $28
  56++EF8B 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  57++EF8F 1E 00 30 34                          DB $1E, $00, $30, $34
  58++EF93 1E 00 34 38                          DB $1E, $00, $34, $38
  59++EF97 1E 00 38 3C                          DB $1E, $00, $38, $3C
  60++EF9B 1E 00 3C 30                          DB $1E, $00, $3C, $30
  61++EF9F              CoriolisEdgesSize:      equ $ - CoriolisEdges
  62++EF9F              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  63++EF9F 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  64++EFA3 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  65++EFA7 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  66++EFAB 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  67++EFAF DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  68++EFB3 5F 00 A0 00                          DB $5F, $00, $A0, $00
  69++EFB7 1F A0 00 00                          DB $1F, $A0, $00, $00
  70++EFBB 9F A0 00 00                          DB $9F, $A0, $00, $00
  71++EFBF 1F 00 A0 00                          DB $1F, $00, $A0, $00
  72++EFC3 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  73++EFC7 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  74++EFCB 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  75++EFCF BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  76++EFD3 3F 00 00 A0                          DB $3F, $00, $00, $A0
  77++EFD7              CoriolisNormalsSize:    equ $ - CoriolisNormals
  78++EFD7              CoriolisLen:            equ $ - Coriolis
  79++EFD7
# file closed: ./Data/ships/Coriolis.asm
 103+ EFD7                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFD7 03           Cougar:	                DB $03
   2++EFD8 24 13                                DW $1324
   3++EFDA 62 F0                                DW CougarEdges
   4++EFDC 64                                   DB CougarEdgesSize
   5++EFDD 00 2A                                DB $00, $2A
   6++EFDF 72                                   DB CougarVertSize
   7++EFE0 19                                   DB CougarEdgesCnt
   8++EFE1 00 00                                DB $00, $00
   9++EFE3 18                                   DB CougarNormalsSize
  10++EFE4 22 FC 28                             DB $22, $FC, $28
  11++EFE7 C6 F0                                DW CougarNormals
  12++EFE9 02 34                                DB $02, $34
  13++EFEB F0 EF                                DW CougarVertices
  14++EFED 00 00                                DB 0,0                      ; Type and Tactics
  15++EFEF 01                                   DB ShipCanAnger
  16++EFF0 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  16++EFF4 02 44
  17++EFF6 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  17++EFFA 01 22
  18++EFFC 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  18++F000 01 55
  19++F002 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  19++F006 04 55
  20++F008 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  20++F00C 12 35
  21++F00E 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  21++F012 23 44
  22++F014 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  22++F018 34 55
  23++F01A 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  23++F01E 01 11
  24++F020 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  24++F024 01 11
  25++F026 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  25++F02A 34 44
  26++F02C 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  26++F030 34 44
  27++F032 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  27++F036 00 44
  28++F038 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  28++F03C 00 44
  29++F03E 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  29++F042 00 00
  30++F044 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  30++F048 44 44
  31++F04A 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  31++F04E 55 55
  32++F050 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  32++F054 55 55
  33++F056 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  33++F05A 55 55
  34++F05C 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  34++F060 55 55
  35++F062              CougarVertSize:         equ $ - CougarVertices
  36++F062 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  37++F066 1F 01 04 1C                          DB $1F, $01, $04, $1C
  38++F06A 1F 01 1C 20                          DB $1F, $01, $1C, $20
  39++F06E 1F 01 20 08                          DB $1F, $01, $20, $08
  40++F072 1E 05 08 0C                          DB $1E, $05, $08, $0C
  41++F076 1E 45 0C 18                          DB $1E, $45, $0C, $18
  42++F07A 1E 15 08 10                          DB $1E, $15, $08, $10
  43++F07E 1E 35 10 18                          DB $1E, $35, $10, $18
  44++F082 1F 34 18 28                          DB $1F, $34, $18, $28
  45++F086 1F 34 28 24                          DB $1F, $34, $28, $24
  46++F08A 1F 34 24 14                          DB $1F, $34, $24, $14
  47++F08E 1F 24 14 00                          DB $1F, $24, $14, $00
  48++F092 1B 04 00 0C                          DB $1B, $04, $00, $0C
  49++F096 1B 12 04 10                          DB $1B, $12, $04, $10
  50++F09A 1B 23 14 10                          DB $1B, $23, $14, $10
  51++F09E 1A 01 04 08                          DB $1A, $01, $04, $08
  52++F0A2 1A 34 14 18                          DB $1A, $34, $14, $18
  53++F0A6 14 00 30 34                          DB $14, $00, $30, $34
  54++F0AA 12 00 34 2C                          DB $12, $00, $34, $2C
  55++F0AE 12 44 2C 38                          DB $12, $44, $2C, $38
  56++F0B2 14 44 38 30                          DB $14, $44, $38, $30
  57++F0B6 12 55 3C 40                          DB $12, $55, $3C, $40
  58++F0BA 14 55 40 48                          DB $14, $55, $40, $48
  59++F0BE 12 55 48 44                          DB $12, $55, $48, $44
  60++F0C2 14 55 44 3C                          DB $14, $55, $44, $3C
  61++F0C6              CougarEdgesSize:        equ $ - CougarEdges
  62++F0C6              CougarEdgesCnt:         equ CougarEdgesSize/4
  63++F0C6 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  64++F0CA DF 10 2E 04                          DB $DF, $10, $2E, $04
  65++F0CE 5F 00 1B 05                          DB $5F, $00, $1B, $05
  66++F0D2 5F 10 2E 04                          DB $5F, $10, $2E, $04
  67++F0D6 1F 10 2E 04                          DB $1F, $10, $2E, $04
  68++F0DA 3E 00 00 A0                          DB $3E, $00, $00, $A0
  69++F0DE              CougarNormalsSize:      equ $ - CougarNormals
  70++F0DE              CougarLen:              equ $ - Cougar
  71++F0DE
# file closed: ./Data/ships/Cougar.asm
 104+ F0DE                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0DE 00           Dodo:	                DB $00
   2++F0DF 90 7E                                DW $7E90
   3++F0E1 87 F1                                DW DodoEdges
   4++F0E3 88                                   DB DodoEdgesSize
   5++F0E4 00 36                                DB $00, $36
   6++F0E6 90                                   DB DodoVertSize
   7++F0E7 22                                   DB DodoEdgesCnt
   8++F0E8 00 00                                DB $00, $00
   9++F0EA 30                                   DB DodoNormalsSize
  10++F0EB 7D F0 00                             DB $7D, $F0, $00
  11++F0EE 0F F2                                DW DodoNormals
  12++F0F0 00 00                                DB $00, $00
  13++F0F2 F7 F0                                DW DodoVertices
  14++F0F4 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  15++F0F6 00                                   DB 0
  16++F0F7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  16++F0FB 01 55
  17++F0FD 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  17++F101 01 22
  18++F103 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  18++F107 02 33
  19++F109 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  19++F10D 03 44
  20++F10F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  20++F113 04 55
  21++F115 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  21++F119 15 66
  22++F11B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  22++F11F 12 77
  23++F121 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  23++F125 23 88
  24++F127 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  24++F12B 34 99
  25++F12D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  25++F131 45 AA
  26++F133 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  26++F137 16 77
  27++F139 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  27++F13D 27 88
  28++F13F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  28++F143 38 99
  29++F145 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  29++F149 49 AA
  30++F14B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  30++F14F 56 AA
  31++F151 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  31++F155 67 BB
  32++F157 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  32++F15B 78 BB
  33++F15D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  33++F161 89 BB
  34++F163 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  34++F167 9A BB
  35++F169 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  35++F16D 6A BB
  36++F16F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  36++F173 00 00
  37++F175 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  37++F179 00 00
  38++F17B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  38++F17F 00 00
  39++F181 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  39++F185 00 00
  40++F187              DodoVertSize:           equ $ - DodoVertices
  41++F187 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  42++F18B 1F 02 04 08                          DB $1F, $02, $04, $08
  43++F18F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  44++F193 1F 04 0C 10                          DB $1F, $04, $0C, $10
  45++F197 1F 05 10 00                          DB $1F, $05, $10, $00
  46++F19B 1F 16 14 28                          DB $1F, $16, $14, $28
  47++F19F 1F 17 28 18                          DB $1F, $17, $28, $18
  48++F1A3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  49++F1A7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  50++F1AB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  51++F1AF 1F 39 30 20                          DB $1F, $39, $30, $20
  52++F1B3 1F 49 20 34                          DB $1F, $49, $20, $34
  53++F1B7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  54++F1BB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  55++F1BF 1F 56 38 14                          DB $1F, $56, $38, $14
  56++F1C3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  57++F1C7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  58++F1CB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  59++F1CF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  60++F1D3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  61++F1D7 1F 15 00 14                          DB $1F, $15, $00, $14
  62++F1DB 1F 12 04 18                          DB $1F, $12, $04, $18
  63++F1DF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  64++F1E3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  65++F1E7 1F 45 10 24                          DB $1F, $45, $10, $24
  66++F1EB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  67++F1EF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  68++F1F3 1F 89 30 44                          DB $1F, $89, $30, $44
  69++F1F7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  70++F1FB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  71++F1FF 1E 00 50 54                          DB $1E, $00, $50, $54
  72++F203 14 00 54 5C                          DB $14, $00, $54, $5C
  73++F207 17 00 5C 58                          DB $17, $00, $5C, $58
  74++F20B 14 00 58 50                          DB $14, $00, $58, $50
  75++F20F              DodoEdgesSize:          equ $ - DodoEdges
  76++F20F              DodoEdgesCnt:           equ DodoEdgesSize/4
  77++F20F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  78++F213 1F 67 8E 58                          DB $1F, $67, $8E, $58
  79++F217 5F A9 37 59                          DB $5F, $A9, $37, $59
  80++F21B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  81++F21F DF A9 37 59                          DB $DF, $A9, $37, $59
  82++F223 9F 67 8E 58                          DB $9F, $67, $8E, $58
  83++F227 3F 00 B0 58                          DB $3F, $00, $B0, $58
  84++F22B 3F A9 37 59                          DB $3F, $A9, $37, $59
  85++F22F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  86++F233 FF 67 8E 58                          DB $FF, $67, $8E, $58
  87++F237 BF A9 37 59                          DB $BF, $A9, $37, $59
  88++F23B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  89++F23F              DodoNormalsSize:        equ $ - DodoNormals
  90++F23F              DodoLen:                equ $ - Dodo
  91++F23F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1397  F23F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1398  F23F                  SLOT    ShipModelsAddr
1399  F23F                  PAGE    BankShipModels2
1400  F23F              	ORG     ShipModelsAddr, BankShipModels2
1401  E000
1402  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1403  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1403  E00F 06 00       >                        ld      b,0
1403  E011 4F          >                        ld      c,a                                 ; c= original ship id
1403  E012 CB 3F       >.ShiftLoop:             srl     a
1403  E014 CB 3F       >                        srl     a
1403  E016 CB 3F       >                        srl     a
1403  E018 CB 3F       >                        srl     a                                   ; divide by 16
1403  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1403  E01B 79          >                        ld      a,c
1403  E01C 50          >                        ld      d,b
1403  E01D 1E 10       >                        ld      e,16
1403  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1403  E021 93          >                        sub     e                                   ; a= actual model id now
1403  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1403  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1403  E024 7A          >                        ld      a,d                                 ; a = bank number
1403  E025             >;.. Now b = bank and a = adjusted ship nbr
1403  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1403  E028 ED 31       >                        add     hl,a
1403  E02A ED 31       >                        add     hl,a
1403  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1403  E02D             >                        ClearCarryFlag
1403  E02D B7          >                        or a
1403  E02E C9          >                        ret
1404  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1404  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1404  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1404  E035 06 00       >                        ld          b,0
1404  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1404  E03A 4F          >                        ld          c,a
1404  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1404  E03C CD AC 99    >                        call        memcopy_dma
1404  E03F C9          >                        ret
1405  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1405  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1405  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1405  E046 06 00       >                        ld          b,0
1405  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1405  E04B 4F          >                        ld          c,a
1405  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1405  E04D CD AC 99    >                        call        memcopy_dma
1405  E050 C9          >                        ret
1406  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1406  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1406  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1406  E057 06 00       >                        ld          b,0
1406  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1406  E05C 4F          >                        ld          c,a
1406  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1406  E05E CD AC 99    >                        call        memcopy_dma
1406  E061 C9          >                        ret
1407  E062              ShipBankTable2:         MShipBankTable
1407  E062 3B 00       >                        DW      BankShipModels1
1407  E064 43 00       >                        DW      BankShipModels2
1407  E066 44 00       >                        DW      BankShipModels3
1407  E068 45 00       >                        DW      BankShipModels4
1408  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1408  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1408  E06D 36 43       >                        ld          (hl),BankShipModels2
1408  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1408  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1408  E075 ED 31       >                        add         hl,a
1408  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1408  E079 4E          >                        ld          c,(hl)
1408  E07A 23          >                        inc         hl
1408  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1408  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1408  E07F ED 31       >                        add         hl,a
1408  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1408  E083 7E          >                        ld          a,(hl)
1408  E084 23          >                        inc         hl
1408  E085 66          >                        ld          h,(hl)
1408  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1408  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1408  E08A 01 19 00    >                        ld          bc,ShipDataLength
1408  E08D ED B0       >                        ldir
1408  E08F CD 2F E0    >                        call        CopyVertsToUniv
1408  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1408  E095 CD 51 E0    >                        call        CopyNormsToUniv
1408  E098 C9          >                        ret
1409  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1409  E099 3E 0D       >                        ld          a,13
1409  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1409  E09E C9          >                        ret
1410  E09F
1411  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0A1 1A E2                                 DW Escape_Pod                              ;17  $11
   3+ E0A3 73 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0A5 92 E3                                 DW Gecko                                   ;19  $13
   5+ E0A7 5B E4                                 DW Ghavial                                 ;20  $14
   6+ E0A9 44 E5                                 DW Iguana                                  ;21  $15
   7+ E0AB 3B E6                                 DW Krait                                   ;22  $16
   8+ E0AD 26 E7                                 DW Logo                                    ;23  $17
   9+ E0AF E3 E8                                 DW Mamba                                   ;24  $18
  10+ E0B1 16 EA                                 DW Missile                                 ;25  $19
  11+ E0B3 19 EB                                 DW Monitor                                 ;26  $1A
  12+ E0B5 20 EC                                 DW Moray                                   ;27  $1B
  13+ E0B7 FD EC                                 DW Ophidian                                ;28  $1C
  14+ E0B9 36 EE                                 DW Plate                                   ;29  $1D
  15+ E0BB 75 EE                                 DW Python                                  ;30  $1E
  16+ E0BD 6C EF                                 DW Python_P                                ;31  $1F
  17+ E0BF 58 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0C1 33 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0C3 8C E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0C5 AB E3                                 DW GeckoVertices                           ;19  $13
  21+ E0C7 74 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0C9 5D E5                                 DW IguanaVertices                          ;21  $15
  23+ E0CB 54 E6                                 DW KraitVertices                           ;22  $16
  24+ E0CD 3F E7                                 DW LogoVertices                            ;23  $17
  25+ E0CF FC E8                                 DW MambaVertices                           ;24  $18
  26+ E0D1 2F EA                                 DW MissileVertices                         ;25  $19
  27+ E0D3 32 EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0D5 39 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0D7 16 ED                                 DW OphidianVertices                        ;28  $1C
  30+ E0D9 4F EE                                 DW PlateVertices                           ;29  $1D
  31+ E0DB 8E EE                                 DW PythonVertices                          ;30  $1E
  32+ E0DD 85 EF                                 DW Python_PVertices                        ;31  $1F
  33+ E0DF 8E E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E0E1 4B E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E0E3 FE E2                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E0E5 F3 E3                                 DW GeckoEdges                              ;19  $13
  37+ E0E7 BC E4                                 DW GhavialEdges                            ;20  $14
  38+ E0E9 B7 E5                                 DW IguanaEdges                             ;21  $15
  39+ E0EB BA E6                                 DW KraitEdges                              ;22  $16
  40+ E0ED 3B E8                                 DW LogoEdges                               ;23  $17
  41+ E0EF 92 E9                                 DW MambaEdges                              ;24  $18
  42+ E0F1 95 EA                                 DW MissileEdges                            ;25  $19
  43+ E0F3 98 EB                                 DW MonitorEdges                            ;26  $1A
  44+ E0F5 8D EC                                 DW MorayEdges                              ;27  $1B
  45+ E0F7 8E ED                                 DW OphidianEdges                           ;28  $1C
  46+ E0F9 61 EE                                 DW PlateEdges                              ;29  $1D
  47+ E0FB D0 EE                                 DW PythonEdges                             ;30  $1E
  48+ E0FD C7 EF                                 DW Python_PEdges                           ;31  $1F
  49+ E0FF E2 E1        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E101 63 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E103 6A E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E105 37 E4                                 DW GeckoNormals                            ;19  $13
  53+ E107 14 E5                                 DW GhavialNormals                          ;20  $14
  54+ E109 13 E6                                 DW IguanaNormals                           ;21  $15
  55+ E10B 0E E7                                 DW KraitNormals                            ;22  $16
  56+ E10D CF E8                                 DW LogoNormals                             ;23  $17
  57+ E10F 02 EA                                 DW MambaNormals                            ;24  $18
  58+ E111 F5 EA                                 DW MissileNormals                          ;25  $19
  59+ E113 F4 EB                                 DW MonitorNormals                          ;26  $1A
  60+ E115 D9 EC                                 DW MorayNormals                            ;27  $1B
  61+ E117 06 EE                                 DW OphidianNormals                         ;28  $1C
  62+ E119 71 EE                                 DW PlateNormals                            ;29  $1D
  63+ E11B 38 EF                                 DW PythonNormals                           ;30  $1E
  64+ E11D 2F F0                                 DW Python_PNormals                         ;31  $1F
  65+ E11F DB 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E121 59 00                                 DW Escape_PodLen                           ;17  $11
  67+ E123 1F 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E125 C9 00                                 DW GeckoLen                                ;19  $13
  69+ E127 E9 00                                 DW GhavialLen                              ;20  $14
  70+ E129 F7 00                                 DW IguanaLen                               ;21  $15
  71+ E12B EB 00                                 DW KraitLen                                ;22  $16
  72+ E12D BD 01                                 DW LogoLen                                 ;23  $17
  73+ E12F 33 01                                 DW MambaLen                                ;24  $18
  74+ E131 03 01                                 DW MissileLen                              ;25  $19
  75+ E133 07 01                                 DW MonitorLen                              ;26  $1A
  76+ E135 DD 00                                 DW MorayLen                                ;27  $1B
  77+ E137 39 01                                 DW OphidianLen                             ;28  $1C
  78+ E139 3F 00                                 DW PlateLen                                ;29  $1D
  79+ E13B F7 00                                 DW PythonLen                               ;30  $1E
  80+ E13D F7 00                                 DW Python_PLen                             ;31  $1F
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00           Dragon:	                DB $00
   2++E140 66 50                                DW $5066
   3++E142 8E E1                                DW DragonEdges
   4++E144 54                                   DB DragonEdgesSize
   5++E145 00 3C                                DB $00, $3C
   6++E147 36                                   DB DragonVertSize
   7++E148 15                                   DB DragonEdgesCnt
   8++E149 00 00                                DB $00, $00
   9++E14B 38                                   DB DragonNormalsSize
  10++E14C 20 F7 14                             DB $20, $F7, $14
  11++E14F E2 E1                                DW DragonNormals
  12++E151 00 47                                DB $00, $47
  13++E153 58 E1                                DW DragonVertices
  14++E155 00 00                                DB 0,0                      ; Type and Tactics
  15++E157 01                                   DB ShipCanAnger
  16++E158 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  16++E15C 6B 05
  17++E15E D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  17++E162 67 01
  18++E164 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  18++E168 78 12
  19++E16A 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  19++E16E CD 23
  20++E170 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  20++E174 CD 89
  21++E176 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  21++E17A 9A 34
  22++E17C D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  22++E180 AB 45
  23++E182 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  23++E186 FF FF
  24++E188 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  24++E18C FF FF
  25++E18E              DragonVertSize:         equ $ - DragonVertices
  26++E18E 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  27++E192 1F 12 08 1C                          DB $1F, $12, $08, $1C
  28++E196 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  29++E19A 1F 34 14 1C                          DB $1F, $34, $14, $1C
  30++E19E 1F 45 18 1C                          DB $1F, $45, $18, $1C
  31++E1A2 1F 50 00 1C                          DB $1F, $50, $00, $1C
  32++E1A6 1F 67 04 20                          DB $1F, $67, $04, $20
  33++E1AA 1F 78 08 20                          DB $1F, $78, $08, $20
  34++E1AE 1F 89 10 20                          DB $1F, $89, $10, $20
  35++E1B2 1F 9A 14 20                          DB $1F, $9A, $14, $20
  36++E1B6 1F AB 18 20                          DB $1F, $AB, $18, $20
  37++E1BA 1F B6 00 20                          DB $1F, $B6, $00, $20
  38++E1BE 1F 06 00 04                          DB $1F, $06, $00, $04
  39++E1C2 1F 17 04 08                          DB $1F, $17, $04, $08
  40++E1C6 1F 4A 14 18                          DB $1F, $4A, $14, $18
  41++E1CA 1F 5B 00 18                          DB $1F, $5B, $00, $18
  42++E1CE 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  43++E1D2 1F 8C 08 10                          DB $1F, $8C, $08, $10
  44++E1D6 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  45++E1DA 1F 9D 10 14                          DB $1F, $9D, $10, $14
  46++E1DE 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  47++E1E2              DragonEdgesSize:        equ $ - DragonEdges
  48++E1E2              DragonEdgesCnt:         equ DragonEdgesSize/4
  49++E1E2 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  50++E1E6 1F 21 5A 00                          DB $1F, $21, $5A, $00
  51++E1EA 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  52++E1EE BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  53++E1F2 9F 21 5A 00                          DB $9F, $21, $5A, $00
  54++E1F6 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  55++E1FA 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  56++E1FE 5F 21 5A 00                          DB $5F, $21, $5A, $00
  57++E202 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  58++E206 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  59++E20A DF 21 5A 00                          DB $DF, $21, $5A, $00
  60++E20E DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  61++E212 3F 30 00 52                          DB $3F, $30, $00, $52
  62++E216 BF 30 00 52                          DB $BF, $30, $00, $52
  63++E21A              DragonNormalsSize:      equ $ - DragonNormals
  64++E21A              DragonLen:              equ $ - Dragon
  65++E21A
# file closed: ./Data/ships/Dragon.asm
  83+ E21A                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21A 20           Escape_Pod:             DB $20
   2++E21B 00 01                                DW $0100
   3++E21D 4B E2                                DW Escape_PodEdges
   4++E21F 18                                   DB Escape_PodEdgesSize
   5++E220 00 16                                DB $00, $16
   6++E222 18                                   DB Escape_PodVertSize
   7++E223 06                                   DB Escape_PodEdgesCnt
   8++E224 00 00                                DB $00, $00
   9++E226 10                                   DB Escape_PodNormalsSize
  10++E227 08 11 08                             DB $08, $11, $08
  11++E22A 63 E2                                DW Escape_PodNormals
  12++E22C 04 00                                DB $04, $00
  13++E22E 33 E2                                DW Escape_PodVertices
  14++E230 00 00                                DB 0,0                      ; Type and Tactics
  15++E232 00                                   DB 0
  16++E233 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  16++E237 12 33
  17++E239 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  17++E23D 02 33
  18++E23F 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  18++E243 01 33
  19++E245 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  19++E249 01 22
  20++E24B              Escape_PodVertSize:     equ $ - Escape_PodVertices
  21++E24B 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  22++E24F 1F 03 04 08                          DB $1F, $03, $04, $08
  23++E253 1F 01 08 0C                          DB $1F, $01, $08, $0C
  24++E257 1F 12 0C 00                          DB $1F, $12, $0C, $00
  25++E25B 1F 13 00 08                          DB $1F, $13, $00, $08
  26++E25F 1F 02 0C 04                          DB $1F, $02, $0C, $04
  27++E263              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  28++E263              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  29++E263 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  30++E267 1F 27 67 1E                          DB $1F, $27, $67, $1E
  31++E26B 5F 27 67 1E                          DB $5F, $27, $67, $1E
  32++E26F 9F 70 00 00                          DB $9F, $70, $00, $00
  33++E273              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  34++E273              Escape_PodLen:          equ $ - Escape_Pod
  35++E273
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E273                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E273 00           Fer_De_Lance:	        DB $00
   2++E274 40 06                                DW $0640
   3++E276 FE E2                                DW Fer_De_LanceEdges
   4++E278 6C                                   DB Fer_De_LanceEdgesSize
   5++E279 00 1A                                DB $00, $1A
   6++E27B 72                                   DB Fer_De_LanceVertSize
   7++E27C 1B                                   DB Fer_De_LanceEdgesCnt
   8++E27D 00 00                                DB $00, $00
   9++E27F 28                                   DB Fer_De_LanceNormalsSize
  10++E280 28 A0 1E                             DB $28, $A0, $1E
  11++E283 6A E3                                DW Fer_De_LanceNormals
  12++E285 01 12                                DB $01, $12
  13++E287 8C E2                                DW Fer_De_LanceVertices
  14++E289 00 00                                DB 0,0                      ; Type and Tactics
  15++E28B 01                                   DB ShipCanAnger
  16++E28C 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  16++E290 01 59
  17++E292 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  17++E296 12 99
  18++E298 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  18++E29C 23 99
  19++E29E 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  19++E2A2 34 99
  20++E2A4 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  20++E2A8 45 99
  21++E2AA 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  21++E2AE 01 26
  22++E2B0 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  22++E2B4 23 67
  23++E2B6 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  23++E2BA 34 78
  24++E2BC 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  24++E2C0 04 58
  25++E2C2 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  25++E2C6 06 78
  26++E2C8 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  26++E2CC 00 00
  27++E2CE 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  27++E2D2 00 00
  28++E2D4 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  28++E2D8 00 00
  29++E2DA 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  29++E2DE 00 00
  30++E2E0 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  30++E2E4 00 00
  31++E2E6 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  31++E2EA 00 00
  32++E2EC 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  32++E2F0 99 99
  33++E2F2 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  33++E2F6 99 99
  34++E2F8 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  34++E2FC 99 99
  35++E2FE              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  36++E2FE 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  37++E302 1F 29 04 08                          DB $1F, $29, $04, $08
  38++E306 1F 39 08 0C                          DB $1F, $39, $08, $0C
  39++E30A 1F 49 0C 10                          DB $1F, $49, $0C, $10
  40++E30E 1F 59 00 10                          DB $1F, $59, $00, $10
  41++E312 1C 01 00 14                          DB $1C, $01, $00, $14
  42++E316 1C 26 14 18                          DB $1C, $26, $14, $18
  43++E31A 1C 37 18 1C                          DB $1C, $37, $18, $1C
  44++E31E 1C 48 1C 20                          DB $1C, $48, $1C, $20
  45++E322 1C 05 00 20                          DB $1C, $05, $00, $20
  46++E326 0F 06 14 24                          DB $0F, $06, $14, $24
  47++E32A 0B 67 18 24                          DB $0B, $67, $18, $24
  48++E32E 0B 78 1C 24                          DB $0B, $78, $1C, $24
  49++E332 0F 08 20 24                          DB $0F, $08, $20, $24
  50++E336 0E 12 04 14                          DB $0E, $12, $04, $14
  51++E33A 0E 23 08 18                          DB $0E, $23, $08, $18
  52++E33E 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  53++E342 0E 45 10 20                          DB $0E, $45, $10, $20
  54++E346 08 00 28 2C                          DB $08, $00, $28, $2C
  55++E34A 09 00 2C 30                          DB $09, $00, $2C, $30
  56++E34E 0B 00 28 30                          DB $0B, $00, $28, $30
  57++E352 08 00 34 38                          DB $08, $00, $34, $38
  58++E356 09 00 38 3C                          DB $09, $00, $38, $3C
  59++E35A 0B 00 34 3C                          DB $0B, $00, $34, $3C
  60++E35E 0C 99 40 44                          DB $0C, $99, $40, $44
  61++E362 0C 99 40 48                          DB $0C, $99, $40, $48
  62++E366 08 99 44 48                          DB $08, $99, $44, $48
  63++E36A              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  64++E36A              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  65++E36A 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  66++E36E 9F 44 00 18                          DB $9F, $44, $00, $18
  67++E372 BF 3F 00 25                          DB $BF, $3F, $00, $25
  68++E376 3F 00 00 68                          DB $3F, $00, $00, $68
  69++E37A 3F 3F 00 25                          DB $3F, $3F, $00, $25
  70++E37E 1F 44 00 18                          DB $1F, $44, $00, $18
  71++E382 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  72++E386 3C 00 2D 16                          DB $3C, $00, $2D, $16
  73++E38A 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  74++E38E 5F 00 1C 00                          DB $5F, $00, $1C, $00
  75++E392              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  76++E392              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  77++E392
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E392                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E392 00           Gecko:	                DB $00
   2++E393 49 26                                DW $2649
   3++E395 F3 E3                                DW GeckoEdges
   4++E397 44                                   DB GeckoEdgesSize
   5++E398 00 1A                                DB $00, $1A
   6++E39A 48                                   DB GeckoVertSize
   7++E39B 11                                   DB GeckoEdgesCnt
   8++E39C 00 37                                DB $00, $37
   9++E39E 24                                   DB GeckoNormalsSize
  10++E39F 12 46 1E                             DB $12, $46, $1E
  11++E3A2 37 E4                                DW GeckoNormals
  12++E3A4 03 10                                DB $03, $10
  13++E3A6 AB E3                                DW GeckoVertices
  14++E3A8 00 00                                DB 0,0                      ; Type and Tactics
  15++E3AA 01                                   DB ShipCanAnger
  16++E3AB 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  16++E3AF 03 45
  17++E3B1 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  17++E3B5 01 23
  18++E3B7 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  18++E3BB 05 67
  19++E3BD 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  19++E3C1 01 78
  20++E3C3 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  20++E3C7 45 66
  21++E3C9 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  21++E3CD 12 88
  22++E3CF 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  22++E3D3 34 67
  23++E3D5 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  23++E3D9 23 78
  24++E3DB 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  24++E3DF 33 33
  25++E3E1 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  25++E3E5 33 33
  26++E3E7 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  26++E3EB 33 33
  27++E3ED 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  27++E3F1 33 33
  28++E3F3              GeckoVertSize:          equ $ - GeckoVertices
  29++E3F3 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  30++E3F7 1F 12 04 14                          DB $1F, $12, $04, $14
  31++E3FB 1F 18 14 0C                          DB $1F, $18, $14, $0C
  32++E3FF 1F 07 0C 08                          DB $1F, $07, $0C, $08
  33++E403 1F 56 08 10                          DB $1F, $56, $08, $10
  34++E407 1F 45 10 00                          DB $1F, $45, $10, $00
  35++E40B 1F 28 14 1C                          DB $1F, $28, $14, $1C
  36++E40F 1F 37 1C 18                          DB $1F, $37, $1C, $18
  37++E413 1F 46 18 10                          DB $1F, $46, $18, $10
  38++E417 1D 05 00 08                          DB $1D, $05, $00, $08
  39++E41B 1E 01 04 0C                          DB $1E, $01, $04, $0C
  40++E41F 1D 34 00 18                          DB $1D, $34, $00, $18
  41++E423 1E 23 04 1C                          DB $1E, $23, $04, $1C
  42++E427 14 67 08 18                          DB $14, $67, $08, $18
  43++E42B 14 78 0C 1C                          DB $14, $78, $0C, $1C
  44++E42F 10 33 20 28                          DB $10, $33, $20, $28
  45++E433 11 33 24 2C                          DB $11, $33, $24, $2C
  46++E437              GeckoEdgesSize:             equ $ - GeckoEdges
  47++E437              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  48++E437 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  49++E43B 1F 04 2D 08                          DB $1F, $04, $2D, $08
  50++E43F 5F 19 6C 13                          DB $5F, $19, $6C, $13
  51++E443 5F 00 54 0C                          DB $5F, $00, $54, $0C
  52++E447 DF 19 6C 13                          DB $DF, $19, $6C, $13
  53++E44B 9F 04 2D 08                          DB $9F, $04, $2D, $08
  54++E44F BF 58 10 D6                          DB $BF, $58, $10, $D6
  55++E453 3F 00 00 BB                          DB $3F, $00, $00, $BB
  56++E457 3F 58 10 D6                          DB $3F, $58, $10, $D6
  57++E45B              GeckoNormalsSize:       equ $ - GeckoNormals
  58++E45B              GeckoLen:               equ $ - Gecko
  59++E45B
# file closed: ./Data/ships/Gecko.asm
  86+ E45B                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E45B 03           Ghavial:	            DB $03
   2++E45C 00 26                                DW $2600
   3++E45E BC E4                                DW GhavialEdges
   4++E460 58                                   DB GhavialEdgesSize
   5++E461 00 22                                DB $00, $22
   6++E463 48                                   DB GhavialVertSize
   7++E464 16                                   DB GhavialEdgesCnt
   8++E465 00 64                                DB $00, $64
   9++E467 30                                   DB GhavialNormalsSize
  10++E468 0A 72 10                             DB $0A, $72, $10
  11++E46B 14 E5                                DW GhavialNormals
  12++E46D 00 27                                DB $00, $27
  13++E46F 74 E4                                DW GhavialVertices
  14++E471 00 00                                DB 0,0                      ; Type and Tactics
  15++E473 01                                   DB ShipCanAnger
  16++E474
  17++E474 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  17++E478 67 01
  18++E47A 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  18++E47E 6B 05
  19++E480 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  19++E484 23 01
  20++E486 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  20++E48A 45 03
  21++E48C 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  21++E490 78 12
  22++E492 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  22++E496 89 23
  23++E498 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  23++E49C AB 45
  24++E49E 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  24++E4A2 9A 34
  25++E4A4 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  25++E4A8 FF FF
  26++E4AA 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  26++E4AE 00 00
  27++E4B0 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  27++E4B4 00 00
  28++E4B6 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  28++E4BA 00 00
  29++E4BC
  30++E4BC              GhavialVertSize: equ $ - GhavialVertices
  31++E4BC
  32++E4BC
  33++E4BC 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  34++E4C0 1F 12 10 08  	DB $1F, $12, $10, $08
  35++E4C4 1F 23 14 08  	DB $1F, $23, $14, $08
  36++E4C8 1F 30 0C 08  	DB $1F, $30, $0C, $08
  37++E4CC 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  38++E4D0 1F 45 18 0C  	DB $1F, $45, $18, $0C
  39++E4D4 1F 50 0C 04  	DB $1F, $50, $0C, $04
  40++E4D8 1F 67 00 20  	DB $1F, $67, $00, $20
  41++E4DC 1F 78 10 20  	DB $1F, $78, $10, $20
  42++E4E0 1F 89 14 20  	DB $1F, $89, $14, $20
  43++E4E4 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  44++E4E8 1F AB 18 20  	DB $1F, $AB, $18, $20
  45++E4EC 1F B6 04 20  	DB $1F, $B6, $04, $20
  46++E4F0 1F 06 04 00  	DB $1F, $06, $04, $00
  47++E4F4 1F 17 00 10  	DB $1F, $17, $00, $10
  48++E4F8 1F 28 10 14  	DB $1F, $28, $10, $14
  49++E4FC 1F 39 14 1C  	DB $1F, $39, $14, $1C
  50++E500 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  51++E504 1F 5B 18 04  	DB $1F, $5B, $18, $04
  52++E508 09 00 24 28  	DB $09, $00, $24, $28
  53++E50C 09 00 28 2C  	DB $09, $00, $28, $2C
  54++E510 09 00 2C 24  	DB $09, $00, $2C, $24
  55++E514
  56++E514              GhavialEdgesSize: equ $ - GhavialEdges
  57++E514
  58++E514
  59++E514              GhavialEdgesCnt: equ GhavialEdgesSize/4
  60++E514
  61++E514
  62++E514 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  63++E518 1F 33 24 0C  	DB $1F, $33, $24, $0C
  64++E51C 3F 33 1C 19  	DB $3F, $33, $1C, $19
  65++E520 3F 00 30 2A  	DB $3F, $00, $30, $2A
  66++E524 BF 33 1C 19  	DB $BF, $33, $1C, $19
  67++E528 9F 33 24 0C  	DB $9F, $33, $24, $0C
  68++E52C 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  69++E530 5F 1C 38 07  	DB $5F, $1C, $38, $07
  70++E534 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  71++E538 7F 00 33 26  	DB $7F, $00, $33, $26
  72++E53C FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  73++E540 DF 1C 38 07  	DB $DF, $1C, $38, $07
  74++E544
  75++E544              GhavialNormalsSize: equ $ - GhavialNormals
  76++E544              GhavialLen: equ $ - Ghavial
  77++E544
# file closed: ./Data/ships/Ghavial.asm
  87+ E544                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E544 01           Iguana:	                DB $01
   2++E545 AC 0D                                DW $0DAC
   3++E547 B7 E5                                DW IguanaEdges
   4++E549 5C                                   DB IguanaEdgesSize
   5++E54A 00 1A                                DB $00, $1A
   6++E54C 5A                                   DB IguanaVertSize
   7++E54D 17                                   DB IguanaEdgesCnt
   8++E54E 00 96                                DB $00, $96
   9++E550 28                                   DB IguanaNormalsSize
  10++E551 0A 5A 21                             DB $0A, $5A, $21
  11++E554 13 E6                                DW IguanaNormals
  12++E556 01 23                                DB $01, $23
  13++E558 5D E5                                DW IguanaVertices
  14++E55A 00 00                                DB 0,0                      ; Type and Tactics
  15++E55C 01                                   DB ShipCanAnger
  16++E55D
  17++E55D
  18++E55D 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  18++E561 23 01
  19++E563 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  19++E567 46 02
  20++E569 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  20++E56D 45 01
  21++E56F 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  21++E573 57 13
  22++E575 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  22++E579 67 23
  23++E57B 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  23++E57F 89 46
  24++E581 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  24++E585 88 45
  25++E587 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  25++E58B 89 57
  26++E58D 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  26++E591 99 67
  27++E593 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  27++E597 11 00
  28++E599 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  28++E59D 33 22
  29++E59F 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  29++E5A3 99 88
  30++E5A5 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  30++E5A9 88 88
  31++E5AB 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  31++E5AF 99 88
  32++E5B1 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  32++E5B5 99 99
  33++E5B7
  34++E5B7              IguanaVertSize: equ $ - IguanaVertices
  35++E5B7
  36++E5B7
  37++E5B7
  38++E5B7 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  39++E5BB 1F 01 00 08  	DB $1F, $01, $00, $08
  40++E5BF 1F 13 00 0C  	DB $1F, $13, $00, $0C
  41++E5C3 1F 23 00 10  	DB $1F, $23, $00, $10
  42++E5C7 1F 46 04 14  	DB $1F, $46, $04, $14
  43++E5CB 1F 45 08 18  	DB $1F, $45, $08, $18
  44++E5CF 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  45++E5D3 1F 67 10 20  	DB $1F, $67, $10, $20
  46++E5D7 1F 48 14 18  	DB $1F, $48, $14, $18
  47++E5DB 1F 58 18 1C  	DB $1F, $58, $18, $1C
  48++E5DF 1F 69 14 20  	DB $1F, $69, $14, $20
  49++E5E3 1F 79 1C 20  	DB $1F, $79, $1C, $20
  50++E5E7 1F 04 04 08  	DB $1F, $04, $04, $08
  51++E5EB 1F 15 08 0C  	DB $1F, $15, $08, $0C
  52++E5EF 1F 26 04 10  	DB $1F, $26, $04, $10
  53++E5F3 1F 37 0C 10  	DB $1F, $37, $0C, $10
  54++E5F7 1F 89 14 1C  	DB $1F, $89, $14, $1C
  55++E5FB 1E 01 08 24  	DB $1E, $01, $08, $24
  56++E5FF 1E 23 10 28  	DB $1E, $23, $10, $28
  57++E603 0A 88 2C 30  	DB $0A, $88, $2C, $30
  58++E607 0A 88 34 30  	DB $0A, $88, $34, $30
  59++E60B 0A 99 2C 38  	DB $0A, $99, $2C, $38
  60++E60F 0A 99 34 38  	DB $0A, $99, $34, $38
  61++E613
  62++E613              IguanaEdgesSize: equ $ - IguanaEdges
  63++E613
  64++E613
  65++E613              IguanaEdgesCnt: equ IguanaEdgesSize/4
  66++E613
  67++E613
  68++E613 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  69++E617 DF 33 4D 19  	DB $DF, $33, $4D, $19
  70++E61B 1F 33 4D 19  	DB $1F, $33, $4D, $19
  71++E61F 5F 33 4D 19  	DB $5F, $33, $4D, $19
  72++E623 9F 2A 55 00  	DB $9F, $2A, $55, $00
  73++E627 DF 2A 55 00  	DB $DF, $2A, $55, $00
  74++E62B 1F 2A 55 00  	DB $1F, $2A, $55, $00
  75++E62F 5F 2A 55 00  	DB $5F, $2A, $55, $00
  76++E633 BF 17 00 5D  	DB $BF, $17, $00, $5D
  77++E637 3F 17 00 5D  	DB $3F, $17, $00, $5D
  78++E63B
  79++E63B
  80++E63B              IguanaNormalsSize: equ $ - IguanaNormals
  81++E63B              IguanaLen: equ $ - Iguana
  82++E63B
# file closed: ./Data/ships/Iguana.asm
  88+ E63B                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E63B
   2++E63B 01           Krait:                  DB $01
   3++E63C 0E 10                                DW $100E
   4++E63E BA E6                                DW KraitEdges
   5++E640 54                                   DB KraitEdgesSize
   6++E641 00 12                                DB $00, $12
   7++E643 66                                   DB KraitVertSize
   8++E644 15                                   DB KraitEdgesCnt
   9++E645 64 00                                DB $64,$00
  10++E647 18                                   DB KraitNormalsSize
  11++E648 14 50 1E                             DB $14, $50, $1E
  12++E64B 0E E7                                DW KraitNormals
  13++E64D 02 10                                DB $02, $10
  14++E64F 54 E6                                DW KraitVertices
  15++E651 00 00                                DB 0,0                      ; Type and Tactics
  16++E653 01                                   DB ShipCanAnger
  17++E654 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  17++E658 01 23
  18++E65A 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  18++E65E 03 45
  19++E660 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  19++E664 12 45
  20++E666 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  20++E66A 01 44
  21++E66C 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  21++E670 23 55
  22++E672 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  22++E676 01 11
  23++E678 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  23++E67C 23 33
  24++E67E 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  24++E682 00 33
  25++E684 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  25++E688 00 33
  26++E68A 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  26++E68E 33 33
  27++E690 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  27++E694 00 00
  28++E696 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  28++E69A 44 44
  29++E69C 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  29++E6A0 44 44
  30++E6A2 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  30++E6A6 44 44
  31++E6A8 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  31++E6AC 55 55
  32++E6AE 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  32++E6B2 55 55
  33++E6B4 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  33++E6B8 55 55
  34++E6BA              KraitVertSize           equ $  - KraitVertices
  35++E6BA 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  35++E6BE 1F 12 00 08
  36++E6C2 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  36++E6C6 1F 23 00 10
  37++E6CA 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  37++E6CE 1F 25 10 08
  38++E6D2 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  38++E6D6 1F 04 0C 04
  39++E6DA 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  39++E6DE 1C 23 10 18
  40++E6E2 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  40++E6E6 09 00 1C 28
  41++E6EA 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  41++E6EE 09 33 1C 24
  42++E6F2 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  42++E6F6 08 44 2C 34
  43++E6FA 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  43++E6FE 07 44 30 2C
  44++E702 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  44++E706 08 55 3C 40
  45++E70A 08 55 40 38                          DB $08, $55, $40, $38
  46++E70E              KraitEdgesSize          equ $  - KraitEdges
  47++E70E              KraitEdgesCnt           equ KraitEdgesSize/4
  48++E70E 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  49++E712 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  49++E716 DF 07 30 06
  50++E71A 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  50++E71E 3F 4D 00 9A
  51++E722 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  52++E726              KraitNormalsSize        equ $  - KraitNormals
  53++E726              KraitLen                equ $  - Krait
  54++E726
# file closed: ./Data/ships/Krait.asm
  89+ E726                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E726 00           Logo:	                DB $00
   2++E727 49 26                                DW $2649
   3++E729 3B E8                                DW LogoEdges
   4++E72B 94                                   DB LogoEdgesSize
   5++E72C 00 36                                DB $00, $36
   6++E72E FC                                   DB LogoVertSize
   7++E72F 25                                   DB LogoEdgesCnt
   8++E730 00 00                                DB $00, $00
   9++E732 14                                   DB LogoNormalsSize
  10++E733 63 FC 24                             DB $63, $FC, $24
  11++E736 CF E8                                DW LogoNormals
  12++E738 01 00                                DB $01, $00
  13++E73A 3F E7                                DW LogoVertices
  14++E73C FD 00                                DB ShipTypeText,0                      ; Type and Tactics
  15++E73E 00                                   DB 0
  16++E73F
  17++E73F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  17++E743 00 00
  18++E745 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  18++E749 00 00
  19++E74B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  19++E74F 00 00
  20++E751 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  20++E755 00 00
  21++E757 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  21++E75B 00 00
  22++E75D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  22++E761 00 00
  23++E763 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  23++E767 00 00
  24++E769 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  24++E76D 00 00
  25++E76F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  25++E773 00 00
  26++E775 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  26++E779 00 00
  27++E77B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  27++E77F 00 00
  28++E781 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  28++E785 00 00
  29++E787 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  29++E78B 02 33
  30++E78D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  30++E791 02 44
  31++E793 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  31++E797 01 33
  32++E799 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  32++E79D 02 33
  33++E79F 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  33++E7A3 02 44
  34++E7A5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  34++E7A9 01 44
  35++E7AB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7AF 00 00
  36++E7B1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  36++E7B5 00 00
  37++E7B7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  37++E7BB 00 00
  38++E7BD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  38++E7C1 00 00
  39++E7C3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  39++E7C7 00 00
  40++E7C9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  40++E7CD 00 00
  41++E7CF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  41++E7D3 00 00
  42++E7D5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  42++E7D9 00 00
  43++E7DB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  43++E7DF 00 00
  44++E7E1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  44++E7E5 00 00
  45++E7E7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  45++E7EB 00 00
  46++E7ED 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  46++E7F1 00 00
  47++E7F3 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  47++E7F7 00 00
  48++E7F9 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  48++E7FD 00 00
  49++E7FF 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  49++E803 00 00
  50++E805 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  50++E809 00 00
  51++E80B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  51++E80F 00 00
  52++E811 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  52++E815 00 00
  53++E817 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  53++E81B 00 00
  54++E81D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  54++E821 00 00
  55++E823 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  55++E827 00 00
  56++E829 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  56++E82D 00 00
  57++E82F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  57++E833 00 00
  58++E835 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  58++E839 00 00
  59++E83B
  60++E83B              LogoVertSize: equ $ - LogoVertices
  61++E83B
  62++E83B
  63++E83B
  64++E83B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  65++E83F 1F 00 04 08  	DB $1F, $00, $04, $08
  66++E843 1F 00 08 0C  	DB $1F, $00, $08, $0C
  67++E847 1F 00 0C 10  	DB $1F, $00, $0C, $10
  68++E84B 1F 00 10 14  	DB $1F, $00, $10, $14
  69++E84F 1F 00 14 18  	DB $1F, $00, $14, $18
  70++E853 1F 00 18 1C  	DB $1F, $00, $18, $1C
  71++E857 1F 00 1C 20  	DB $1F, $00, $1C, $20
  72++E85B 1F 00 20 24  	DB $1F, $00, $20, $24
  73++E85F 1F 00 24 28  	DB $1F, $00, $24, $28
  74++E863 1F 00 28 2C  	DB $1F, $00, $28, $2C
  75++E867 1F 00 2C 00  	DB $1F, $00, $2C, $00
  76++E86B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  77++E86F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  78++E873 1E 04 40 44  	DB $1E, $04, $40, $44
  79++E877 1E 01 44 38  	DB $1E, $01, $44, $38
  80++E87B 1E 03 10 30  	DB $1E, $03, $10, $30
  81++E87F 1E 22 30 34  	DB $1E, $22, $30, $34
  82++E883 1E 04 34 20  	DB $1E, $04, $34, $20
  83++E887 1E 11 20 10  	DB $1E, $11, $20, $10
  84++E88B 1E 13 10 38  	DB $1E, $13, $10, $38
  85++E88F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  86++E893 1E 24 34 40  	DB $1E, $24, $34, $40
  87++E897 1E 14 20 44  	DB $1E, $14, $20, $44
  88++E89B 1E 00 54 58  	DB $1E, $00, $54, $58
  89++E89F 1E 00 58 60  	DB $1E, $00, $58, $60
  90++E8A3 1E 00 60 64  	DB $1E, $00, $60, $64
  91++E8A7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  92++E8AB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  93++E8AF 1E 00 70 74  	DB $1E, $00, $70, $74
  94++E8B3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  95++E8B7 1E 00 80 84  	DB $1E, $00, $80, $84
  96++E8BB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  97++E8BF 1E 00 90 94  	DB $1E, $00, $90, $94
  98++E8C3 1E 00 94 9C  	DB $1E, $00, $94, $9C
  99++E8C7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 100++E8CB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 101++E8CF
 102++E8CF              LogoEdgesSize: equ $ - LogoEdges
 103++E8CF
 104++E8CF
 105++E8CF              LogoEdgesCnt: equ LogoEdgesSize/4
 106++E8CF
 107++E8CF
 108++E8CF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 109++E8D3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 110++E8D7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 111++E8DB 9F 51 51 00  	DB $9F, $51, $51, $00
 112++E8DF 1F 51 51 00  	DB $1F, $51, $51, $00
 113++E8E3
 114++E8E3
 115++E8E3              LogoNormalsSize: equ $ - LogoNormals
 116++E8E3              LogoLen: equ $ - Logo
 117++E8E3
# file closed: ./Data/ships/Logo.asm
  90+ E8E3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8E3 01           Mamba:	                DB $01
   2++E8E4 24 13                                DW $1324
   3++E8E6 92 E9                                DW MambaEdges
   4++E8E8 70                                   DB MambaEdgesSize
   5++E8E9 00 22                                DB $00, $22
   6++E8EB 96                                   DB MambaVertSize
   7++E8EC 1C                                   DB MambaEdgesCnt
   8++E8ED 00 96                                DB $00, $96
   9++E8EF 14                                   DB MambaNormalsSize
  10++E8F0 19 5A 1E                             DB $19, $5A, $1E
  11++E8F3 02 EA                                DW MambaNormals
  12++E8F5 02 12                                DB $02, $12
  13++E8F7 FC E8                                DW MambaVertices
  14++E8F9 00 00                                DB 0,0                      ; Type and Tactics
  15++E8FB 01                                   DB ShipCanAnger
  16++E8FC
  17++E8FC 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  17++E900 10 32
  18++E902 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  18++E906 20 44
  19++E908 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  19++E90C 21 44
  20++E90E 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  20++E912 31 44
  21++E914 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  21++E918 30 44
  22++E91A 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  22++E91E 11 11
  23++E920 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  23++E924 11 11
  24++E926 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  24++E92A 11 11
  25++E92C 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  25++E930 11 11
  26++E932 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  26++E936 00 00
  27++E938 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  27++E93C 00 00
  28++E93E 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  28++E942 00 00
  29++E944 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  29++E948 00 00
  30++E94A 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  30++E94E 00 00
  31++E950 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  31++E954 00 00
  32++E956 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  32++E95A 44 44
  33++E95C 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  33++E960 44 44
  34++E962 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  34++E966 44 44
  35++E968 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  35++E96C 44 44
  36++E96E 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  36++E972 44 44
  37++E974 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  37++E978 44 44
  38++E97A 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  38++E97E 44 44
  39++E980 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  39++E984 44 44
  40++E986 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  40++E98A 44 44
  41++E98C 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  41++E990 44 44
  42++E992
  43++E992              MambaVertSize: equ $ - MambaVertices
  44++E992
  45++E992
  46++E992
  47++E992 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  48++E996 1F 30 00 10  	DB $1F, $30, $00, $10
  49++E99A 1F 40 04 10  	DB $1F, $40, $04, $10
  50++E99E 1E 42 04 08  	DB $1E, $42, $04, $08
  51++E9A2 1E 41 08 0C  	DB $1E, $41, $08, $0C
  52++E9A6 1E 43 0C 10  	DB $1E, $43, $0C, $10
  53++E9AA 0E 11 14 18  	DB $0E, $11, $14, $18
  54++E9AE 0C 11 18 1C  	DB $0C, $11, $18, $1C
  55++E9B2 0D 11 1C 20  	DB $0D, $11, $1C, $20
  56++E9B6 0C 11 14 20  	DB $0C, $11, $14, $20
  57++E9BA 14 00 24 2C  	DB $14, $00, $24, $2C
  58++E9BE 10 00 24 30  	DB $10, $00, $24, $30
  59++E9C2 10 00 28 34  	DB $10, $00, $28, $34
  60++E9C6 14 00 28 38  	DB $14, $00, $28, $38
  61++E9CA 0E 00 34 38  	DB $0E, $00, $34, $38
  62++E9CE 0E 00 2C 30  	DB $0E, $00, $2C, $30
  63++E9D2 0D 44 3C 40  	DB $0D, $44, $3C, $40
  64++E9D6 0E 44 44 48  	DB $0E, $44, $44, $48
  65++E9DA 0C 44 3C 48  	DB $0C, $44, $3C, $48
  66++E9DE 0C 44 40 44  	DB $0C, $44, $40, $44
  67++E9E2 07 44 50 54  	DB $07, $44, $50, $54
  68++E9E6 05 44 50 60  	DB $05, $44, $50, $60
  69++E9EA 05 44 54 60  	DB $05, $44, $54, $60
  70++E9EE 07 44 4C 58  	DB $07, $44, $4C, $58
  71++E9F2 05 44 4C 5C  	DB $05, $44, $4C, $5C
  72++E9F6 05 44 58 5C  	DB $05, $44, $58, $5C
  73++E9FA 1E 21 00 08  	DB $1E, $21, $00, $08
  74++E9FE 1E 31 00 0C  	DB $1E, $31, $00, $0C
  75++EA02
  76++EA02              MambaEdgesSize: equ $ - MambaEdges
  77++EA02
  78++EA02
  79++EA02              MambaEdgesCnt: equ MambaEdgesSize/4
  80++EA02
  81++EA02
  82++EA02 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  83++EA06 1E 00 18 02  	DB $1E, $00, $18, $02
  84++EA0A 9E 20 40 10  	DB $9E, $20, $40, $10
  85++EA0E 1E 20 40 10  	DB $1E, $20, $40, $10
  86++EA12 3E 00 00 7F  	DB $3E, $00, $00, $7F
  87++EA16
  88++EA16              MambaNormalsSize: equ $ - MambaNormals
  89++EA16              MambaLen: equ $ - Mamba
  90++EA16
# file closed: ./Data/ships/Mamba.asm
  91+ EA16                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA16 00           Missile:	            DB $00
   2++EA17 40 06                                DW $0640
   3++EA19 95 EA                                DW MissileEdges
   4++EA1B 60                                   DB MissileEdgesSize
   5++EA1C 00 0A                                DB $00, $0A
   6++EA1E 66                                   DB MissileVertSize
   7++EA1F 18                                   DB MissileEdgesCnt
   8++EA20 00 00                                DB $00, $00
   9++EA22 24                                   DB MissileNormalsSize
  10++EA23 0E 02 2C                             DB $0E, $02, $2C
  11++EA26 F5 EA                                DW MissileNormals
  12++EA28 02 00                                DB $02, $00
  13++EA2A 2F EA                                DW MissileVertices
  14++EA2C 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  15++EA2E 00                                   DB 0
  16++EA2F
  17++EA2F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  17++EA33 10 32
  18++EA35 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  18++EA39 21 54
  19++EA3B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  19++EA3F 32 74
  20++EA41 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  20++EA45 30 76
  21++EA47 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  21++EA4B 10 65
  22++EA4D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  22++EA51 74 88
  23++EA53 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  23++EA57 54 88
  24++EA59 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  24++EA5D 65 88
  25++EA5F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  25++EA63 76 88
  26++EA65 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  26++EA69 74 88
  27++EA6B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  27++EA6F 54 88
  28++EA71 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  28++EA75 65 88
  29++EA77 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  29++EA7B 76 88
  30++EA7D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  30++EA81 76 77
  31++EA83 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  31++EA87 65 66
  32++EA89 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  32++EA8D 74 77
  33++EA8F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  33++EA93 54 55
  34++EA95
  35++EA95              MissileVertSize: equ $ - MissileVertices
  36++EA95
  37++EA95
  38++EA95
  39++EA95 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  40++EA99 1F 32 00 08  	DB $1F, $32, $00, $08
  41++EA9D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  42++EAA1 1F 10 00 10  	DB $1F, $10, $00, $10
  43++EAA5 1F 24 04 08  	DB $1F, $24, $04, $08
  44++EAA9 1F 51 04 10  	DB $1F, $51, $04, $10
  45++EAAD 1F 60 0C 10  	DB $1F, $60, $0C, $10
  46++EAB1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  47++EAB5 1F 74 08 14  	DB $1F, $74, $08, $14
  48++EAB9 1F 54 04 18  	DB $1F, $54, $04, $18
  49++EABD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  50++EAC1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  51++EAC5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  52++EAC9 1F 87 14 20  	DB $1F, $87, $14, $20
  53++EACD 1F 84 14 18  	DB $1F, $84, $14, $18
  54++EAD1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  55++EAD5 08 85 18 28  	DB $08, $85, $18, $28
  56++EAD9 08 87 14 24  	DB $08, $87, $14, $24
  57++EADD 08 87 20 30  	DB $08, $87, $20, $30
  58++EAE1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  59++EAE5 08 74 24 3C  	DB $08, $74, $24, $3C
  60++EAE9 08 54 28 40  	DB $08, $54, $28, $40
  61++EAED 08 76 30 34  	DB $08, $76, $30, $34
  62++EAF1 08 65 2C 38  	DB $08, $65, $2C, $38
  63++EAF5
  64++EAF5              MissileEdgesSize: equ $ - MissileEdges
  65++EAF5
  66++EAF5
  67++EAF5              MissileEdgesCnt: equ MissileEdgesSize/4
  68++EAF5
  69++EAF5
  70++EAF5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  71++EAF9 5F 00 40 10  	DB $5F, $00, $40, $10
  72++EAFD 1F 40 00 10  	DB $1F, $40, $00, $10
  73++EB01 1F 00 40 10  	DB $1F, $00, $40, $10
  74++EB05 1F 20 00 00  	DB $1F, $20, $00, $00
  75++EB09 5F 00 20 00  	DB $5F, $00, $20, $00
  76++EB0D 9F 20 00 00  	DB $9F, $20, $00, $00
  77++EB11 1F 00 20 00  	DB $1F, $00, $20, $00
  78++EB15 3F 00 00 B0  	DB $3F, $00, $00, $B0
  79++EB19
  80++EB19
  81++EB19              MissileNormalsSize: equ $ - MissileNormals
  82++EB19              MissileLen: equ $ - Missile
  83++EB19
# file closed: ./Data/ships/Missile.asm
  92+ EB19                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB19 04           Monitor:	            DB $04
   2++EB1A 00 36                                DW $3600
   3++EB1C 98 EB                                DW MonitorEdges
   4++EB1E 5C                                   DB MonitorEdgesSize
   5++EB1F 00 2A                                DB $00, $2A
   6++EB21 66                                   DB MonitorVertSize
   7++EB22 17                                   DB MonitorEdgesCnt
   8++EB23 01 90                                DB $01, $90
   9++EB25 2C                                   DB MonitorNormalsSize
  10++EB26 28 84 10                             DB $28, $84, $10
  11++EB29 F4 EB                                DW MonitorNormals
  12++EB2B 00 37                                DB $00, $37
  13++EB2D 32 EB                                DW MonitorVertices
  14++EB2F 00 00                                DB 0,0                      ; Type and Tactics
  15++EB31 01                                   DB ShipCanAnger
  16++EB32
  17++EB32 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  17++EB36 FF FF
  18++EB38 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  18++EB3C 23 01
  19++EB3E 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  19++EB42 50 34
  20++EB44 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  20++EB48 78 12
  21++EB4A 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  21++EB4E 96 45
  22++EB50 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  22++EB54 AA 28
  23++EB56 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  23++EB5A AA 49
  24++EB5C 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  24++EB60 AA 23
  25++EB62 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  25++EB66 AA 34
  26++EB68 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  26++EB6C AA 89
  27++EB6E 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  27++EB72 89 67
  28++EB74 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  28++EB78 00 00
  29++EB7A 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  29++EB7E 00 00
  30++EB80 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  30++EB84 77 77
  31++EB86 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  31++EB8A 77 77
  32++EB8C 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  32++EB90 66 66
  33++EB92 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  33++EB96 66 66
  34++EB98              MonitorVertSize:        equ $ - MonitorVertices
  35++EB98 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  36++EB9C 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  37++EBA0 1F 23 04 1C                          DB $1F, $23, $04, $1C
  38++EBA4 1F 34 08 20                          DB $1F, $34, $08, $20
  39++EBA8 1F 45 08 10                          DB $1F, $45, $08, $10
  40++EBAC 1F 50 00 08                          DB $1F, $50, $00, $08
  41++EBB0 1F 03 04 08                          DB $1F, $03, $04, $08
  42++EBB4 1F 67 00 28                          DB $1F, $67, $00, $28
  43++EBB8 1F 78 0C 28                          DB $1F, $78, $0C, $28
  44++EBBC 1F 89 24 28                          DB $1F, $89, $24, $28
  45++EBC0 1F 96 10 28                          DB $1F, $96, $10, $28
  46++EBC4 1F 17 00 0C                          DB $1F, $17, $00, $0C
  47++EBC8 1F 28 0C 14                          DB $1F, $28, $0C, $14
  48++EBCC 1F 49 18 10                          DB $1F, $49, $18, $10
  49++EBD0 1F 56 10 00                          DB $1F, $56, $10, $00
  50++EBD4 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  51++EBD8 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  52++EBDC 1F 4A 20 18                          DB $1F, $4A, $20, $18
  53++EBE0 1F 8A 14 24                          DB $1F, $8A, $14, $24
  54++EBE4 1F 9A 18 24                          DB $1F, $9A, $18, $24
  55++EBE8 0A 00 2C 30                          DB $0A, $00, $2C, $30
  56++EBEC 0A 77 34 38                          DB $0A, $77, $34, $38
  57++EBF0 0A 66 3C 40                          DB $0A, $66, $3C, $40
  58++EBF4              MonitorEdgesSize:       equ $ - MonitorEdges
  59++EBF4              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  60++EBF4 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  61++EBF8 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  62++EBFC 3F 36 1C 10                          DB $3F, $36, $1C, $10
  63++EC00 3F 00 39 1C                          DB $3F, $00, $39, $1C
  64++EC04 BF 36 1C 10                          DB $BF, $36, $1C, $10
  65++EC08 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  66++EC0C DF 26 2F 12                          DB $DF, $26, $2F, $12
  67++EC10 5F 26 2F 12                          DB $5F, $26, $2F, $12
  68++EC14 7F 27 30 0D                          DB $7F, $27, $30, $0D
  69++EC18 FF 27 30 0D                          DB $FF, $27, $30, $0D
  70++EC1C 3F 00 00 40                          DB $3F, $00, $00, $40
  71++EC20              MonitorNormalsSize:     equ $ - MonitorNormals
  72++EC20              MonitorLen:             equ $ - Monitor
  73++EC20
# file closed: ./Data/ships/Monitor.asm
  93+ EC20                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC20 01           Moray:	                DB $01
   2++EC21 84 03                                DW $0384
   3++EC23 8D EC                                DW MorayEdges
   4++EC25 4C                                   DB MorayEdgesSize
   5++EC26 00 1A                                DB $00, $1A
   6++EC28 54                                   DB MorayVertSize
   7++EC29 13                                   DB MorayEdgesCnt
   8++EC2A 00 32                                DB $00, $32
   9++EC2C 24                                   DB MorayNormalsSize
  10++EC2D 28 59 19                             DB $28, $59, $19
  11++EC30 D9 EC                                DW MorayNormals
  12++EC32 02 2A                                DB $02, $2A
  13++EC34 39 EC                                DW MorayVertices
  14++EC36 00 00                                DB 0,0                      ; Type and Tactics
  15++EC38 01                                   DB ShipCanAnger
  16++EC39
  17++EC39 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  17++EC3D 02 78
  18++EC3F 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  18++EC43 01 67
  19++EC45 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  19++EC49 FF FF
  20++EC4B 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  20++EC4F 13 66
  21++EC51 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  21++EC55 25 88
  22++EC57 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  22++EC5B 45 78
  23++EC5D 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  23++EC61 34 67
  24++EC63 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  24++EC67 44 44
  25++EC69 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  25++EC6D 44 44
  26++EC6F 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  26++EC73 44 44
  27++EC75 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  27++EC79 00 00
  28++EC7B 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  28++EC7F 00 00
  29++EC81 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  29++EC85 00 00
  30++EC87 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  30++EC8B 00 00
  31++EC8D              MorayVertSize:          equ $ - MorayVertices
  32++EC8D 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  33++EC91 1F 16 04 0C                          DB $1F, $16, $04, $0C
  34++EC95 18 36 0C 18                          DB $18, $36, $0C, $18
  35++EC99 18 47 14 18                          DB $18, $47, $14, $18
  36++EC9D 18 58 10 14                          DB $18, $58, $10, $14
  37++ECA1 1F 28 00 10                          DB $1F, $28, $00, $10
  38++ECA5 0F 67 04 18                          DB $0F, $67, $04, $18
  39++ECA9 0F 78 00 14                          DB $0F, $78, $00, $14
  40++ECAD 0F 02 00 08                          DB $0F, $02, $00, $08
  41++ECB1 0F 01 04 08                          DB $0F, $01, $04, $08
  42++ECB5 11 13 08 0C                          DB $11, $13, $08, $0C
  43++ECB9 11 25 08 10                          DB $11, $25, $08, $10
  44++ECBD 0D 45 08 14                          DB $0D, $45, $08, $14
  45++ECC1 0D 34 08 18                          DB $0D, $34, $08, $18
  46++ECC5 05 44 1C 20                          DB $05, $44, $1C, $20
  47++ECC9 07 44 1C 24                          DB $07, $44, $1C, $24
  48++ECCD 07 44 20 24                          DB $07, $44, $20, $24
  49++ECD1 05 00 28 2C                          DB $05, $00, $28, $2C
  50++ECD5 05 00 30 34                          DB $05, $00, $30, $34
  51++ECD9              MorayEdgesSize:         equ $ - MorayEdges
  52++ECD9              MorayEdgesCnt:          equ MorayEdgesSize/4
  53++ECD9 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  54++ECDD 9F 0A 31 07                          DB $9F, $0A, $31, $07
  55++ECE1 1F 0A 31 07                          DB $1F, $0A, $31, $07
  56++ECE5 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  57++ECE9 78 00 34 4E                          DB $78, $00, $34, $4E
  58++ECED 78 3B 1C 65                          DB $78, $3B, $1C, $65
  59++ECF1 DF 48 63 32                          DB $DF, $48, $63, $32
  60++ECF5 5F 00 53 1E                          DB $5F, $00, $53, $1E
  61++ECF9 5F 48 63 32                          DB $5F, $48, $63, $32
  62++ECFD
  63++ECFD              MorayNormalsSize:       equ $ - MorayNormals
  64++ECFD              MorayLen:               equ $ - Moray
  65++ECFD
# file closed: ./Data/ships/Moray.asm
  94+ ECFD                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECFD 02           Ophidian:	            DB $02
   2++ECFE 88 0E                                DW $0E88
   3++ED00 8E ED                                DW OphidianEdges
   4++ED02 78                                   DB OphidianEdgesSize
   5++ED03 00 3C                                DB $00, $3C
   6++ED05 78                                   DB OphidianVertSize
   7++ED06 1E                                   DB OphidianEdgesCnt
   8++ED07 00 32                                DB $00, $32
   9++ED09 30                                   DB OphidianNormalsSize
  10++ED0A 14 40 22                             DB $14, $40, $22
  11++ED0D 06 EE                                DW OphidianNormals
  12++ED0F 01 1A                                DB $01, $1A
  13++ED11 16 ED                                DW OphidianVertices
  14++ED13 00 00                                DB 0,0                      ; Type and Tactics
  15++ED15 01                                   DB ShipCanAnger
  16++ED16
  17++ED16 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  17++ED1A 68 02
  18++ED1C 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  18++ED20 67 01
  19++ED22 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  19++ED26 22 01
  20++ED28 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  20++ED2C 8A 24
  21++ED2E 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  21++ED32 79 13
  22++ED34 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  22++ED38 FF FF
  23++ED3A 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  23++ED3E 9B 35
  24++ED40 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  24++ED44 AB 45
  25++ED46 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  25++ED4A BB 4A
  26++ED4C 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  26++ED50 FF FF
  27++ED52 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  27++ED56 FF FF
  28++ED58 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  28++ED5C BB 39
  29++ED5E 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  29++ED62 FF FF
  30++ED64 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  30++ED68 FF FF
  31++ED6A 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  31++ED6E BB 9A
  32++ED70 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  32++ED74 FF FF
  33++ED76 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  33++ED7A BB BB
  34++ED7C 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  34++ED80 BB BB
  35++ED82 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  35++ED86 BB BB
  36++ED88 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  36++ED8C BB BB
  37++ED8E
  38++ED8E              OphidianVertSize:       equ $ - OphidianVertices
  39++ED8E 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  40++ED92 1F 01 04 08                          DB $1F, $01, $04, $08
  41++ED96 1F 02 00 08                          DB $1F, $02, $00, $08
  42++ED9A 1F 12 08 14                          DB $1F, $12, $08, $14
  43++ED9E 1F 13 10 14                          DB $1F, $13, $10, $14
  44++EDA2 1F 24 0C 14                          DB $1F, $24, $0C, $14
  45++EDA6 1F 35 14 18                          DB $1F, $35, $14, $18
  46++EDAA 1F 45 14 1C                          DB $1F, $45, $14, $1C
  47++EDAE 1F 28 00 0C                          DB $1F, $28, $00, $0C
  48++EDB2 1F 17 04 10                          DB $1F, $17, $04, $10
  49++EDB6 1F 39 10 2C                          DB $1F, $39, $10, $2C
  50++EDBA 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  51++EDBE 1F 67 04 3C                          DB $1F, $67, $04, $3C
  52++EDC2 1F 68 00 3C                          DB $1F, $68, $00, $3C
  53++EDC6 1F 79 10 3C                          DB $1F, $79, $10, $3C
  54++EDCA 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  55++EDCE 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  56++EDD2 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  57++EDD6 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  58++EDDA 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  59++EDDE 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  60++EDE2 1F AB 20 38                          DB $1F, $AB, $20, $38
  61++EDE6 10 BB 40 44                          DB $10, $BB, $40, $44
  62++EDEA 10 BB 44 48                          DB $10, $BB, $44, $48
  63++EDEE 10 BB 48 4C                          DB $10, $BB, $48, $4C
  64++EDF2 10 BB 4C 40                          DB $10, $BB, $4C, $40
  65++EDF6 10 39 30 34                          DB $10, $39, $30, $34
  66++EDFA 10 39 2C 30                          DB $10, $39, $2C, $30
  67++EDFE 10 4A 28 24                          DB $10, $4A, $28, $24
  68++EE02 10 4A 24 20                          DB $10, $4A, $24, $20
  69++EE06              OphidianEdgesSize:      equ $ - OphidianEdges
  70++EE06              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  71++EE06
  72++EE06 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  73++EE0A 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  74++EE0E 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  75++EE12 1F 10 22 02                          DB $1F, $10, $22, $02
  76++EE16 9F 10 22 02                          DB $9F, $10, $22, $02
  77++EE1A 3F 00 25 03                          DB $3F, $00, $25, $03
  78++EE1E 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  79++EE22 5F 0A 14 02                          DB $5F, $0A, $14, $02
  80++EE26 DF 0A 14 02                          DB $DF, $0A, $14, $02
  81++EE2A 7F 12 20 02                          DB $7F, $12, $20, $02
  82++EE2E FF 12 20 02                          DB $FF, $12, $20, $02
  83++EE32 3F 00 00 25                          DB $3F, $00, $00, $25
  84++EE36
  85++EE36              OphidianNormalsSize:    equ $ - OphidianNormals
  86++EE36              OphidianLen:            equ $ - Ophidian
  87++EE36
# file closed: ./Data/ships/Ophidian.asm
  95+ EE36                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE36 80           Plate:	                DB $80
   2++EE37 64 00                                DW $0064
   3++EE39 61 EE                                DW PlateEdges
   4++EE3B 10                                   DB PlateEdgesSize
   5++EE3C 00 0A                                DB $00, $0A
   6++EE3E 12                                   DB PlateVertSize
   7++EE3F 04                                   DB PlateEdgesCnt
   8++EE40 00 00                                DB $00, $00
   9++EE42 04                                   DB PlateNormalsSize
  10++EE43 05 10 10                             DB $05, $10, $10
  11++EE46 71 EE                                DW PlateNormals
  12++EE48 03 00                                DB $03, $00
  13++EE4A 4F EE                                DW PlateVertices
  14++EE4C 00 00                                DB 0,0                      ; Type and Tactics
  15++EE4E 01                                   DB ShipCanAnger
  16++EE4F
  17++EE4F
  18++EE4F 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  18++EE53 FF FF
  19++EE55 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  19++EE59 FF FF
  20++EE5B 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  20++EE5F FF FF
  21++EE61
  22++EE61              PlateVertSize: equ $ - PlateVertices
  23++EE61
  24++EE61
  25++EE61
  26++EE61 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  27++EE65 10 FF 04 08  	DB $10, $FF, $04, $08
  28++EE69 14 FF 08 0C  	DB $14, $FF, $08, $0C
  29++EE6D 10 FF 0C 00  	DB $10, $FF, $0C, $00
  30++EE71
  31++EE71              PlateEdgesSize: equ $ - PlateEdges
  32++EE71
  33++EE71
  34++EE71              PlateEdgesCnt: equ PlateEdgesSize/4
  35++EE71
  36++EE71
  37++EE71 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  38++EE75
  39++EE75
  40++EE75              PlateNormalsSize: equ $ - PlateNormals
  41++EE75              PlateLen: equ $ - Plate
  42++EE75
# file closed: ./Data/ships/Plate.asm
  96+ EE75                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE75              ;\ -> &5BA1 \ Python = Type 12
   2++EE75 05           Python:                 DB $05
   3++EE76 00 19                                DW $1900
   4++EE78 D0 EE                                DW PythonEdges
   5++EE7A 68                                   DB PythonEdgesSize
   6++EE7B 00 2A                                DB $00,$2A
   7++EE7D 42                                   DB PythonVertSize
   8++EE7E 1A                                   DB PythonEdgesCnt
   9++EE7F 00 00                                DB $00,$00
  10++EE81 34                                   DB PythonNormalsSize
  11++EE82 28 FA 14                             DB $28,$FA,$14
  12++EE85 38 EF                                DW PythonNormals
  13++EE87 00 1B                                DB $00, $1B
  14++EE89 8E EE                                DW PythonVertices
  15++EE8B 00 00                                DB 0,0                      ; Type and Tactics
  16++EE8D 01                                   DB ShipCanAnger
  17++EE8E
  18++EE8E 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  18++EE92 10 32
  19++EE94 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  19++EE98 10 54
  20++EE9A 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  20++EE9E FF FF
  21++EEA0 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  21++EEA4 FF FF
  22++EEA6 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  22++EEAA 54 98
  23++EEAC 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  23++EEB0 89 CC
  24++EEB2 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  24++EEB6 B8 CC
  25++EEB8 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  25++EEBC A9 CC
  26++EEBE 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  26++EEC2 32 76
  27++EEC4 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  27++EEC8 76 BA
  28++EECA 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  28++EECE BA CC
  29++EED0              PythonVertSize          equ $  - PythonVertices
  30++EED0 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  30++EED4 1F 20 00 0C
  31++EED8 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  31++EEDC 1E 10 00 04
  32++EEE0 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  32++EEE4 1D 51 04 08
  33++EEE8 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  33++EEEC 1D 40 04 0C
  34++EEF0 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  34++EEF4 1D A7 08 24
  35++EEF8 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  35++EEFC 1D B6 0C 24
  36++EF00 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  36++EF04 05 BB 0C 28
  37++EF08 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  37++EF0C 05 AA 08 28
  38++EF10 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  38++EF14 1F B8 0C 18
  39++EF18 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  39++EF1C 1F C9 14 1C
  40++EF20 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  40++EF24 1D CB 18 28
  41++EF28 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  41++EF2C 1D BA 24 28
  42++EF30 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  42++EF34 1D 76 20 24
  43++EF38              PythonEdgesSize         equ $  - PythonEdges
  44++EF38              PythonEdgesCnt          equ PythonEdgesSize/4
  45++EF38 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  45++EF3C 1E 1B 28 0B
  46++EF40 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  46++EF44 5E 1B 28 0B
  47++EF48 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  47++EF4C 1E 13 26 00
  48++EF50 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  48++EF54 5E 13 26 00
  49++EF58 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  49++EF5C 3E 19 25 0B
  50++EF60 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  50++EF64 FE 19 25 0B
  51++EF68 3E 00 00 70                          DB $3E, $00, $00, $70
  52++EF6C              PythonNormalsSize       equ $  - PythonNormals
  53++EF6C              PythonLen               equ $  - Python
  54++EF6C
# file closed: ./Data/ships/Python.asm
  97+ EF6C                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF6C 02           Python_P:	            DB $02
   2++EF6D 00 19                                DW $1900
   3++EF6F C7 EF                                DW Python_PEdges
   4++EF71 68                                   DB Python_PEdgesSize
   5++EF72 00 2A                                DB $00, $2A
   6++EF74 42                                   DB Python_PVertSize
   7++EF75 1A                                   DB Python_PEdgesCnt
   8++EF76 00 C8                                DB $00, $C8
   9++EF78 34                                   DB Python_PNormalsSize
  10++EF79 28 FA 14                             DB $28, $FA, $14
  11++EF7C 2F F0                                DW Python_PNormals
  12++EF7E 00 1B                                DB $00, $1B
  13++EF80 85 EF                                DW Python_PVertices
  14++EF82 00 00                                DB 0,0                      ; Type and Tactics
  15++EF84 01                                   DB ShipCanAnger
  16++EF85
  17++EF85 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  17++EF89 10 32
  18++EF8B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  18++EF8F 10 54
  19++EF91 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  19++EF95 FF FF
  20++EF97 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  20++EF9B FF FF
  21++EF9D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  21++EFA1 54 98
  22++EFA3 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  22++EFA7 89 CC
  23++EFA9 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  23++EFAD B8 CC
  24++EFAF 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  24++EFB3 A9 CC
  25++EFB5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  25++EFB9 32 76
  26++EFBB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  26++EFBF 76 BA
  27++EFC1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  27++EFC5 BA CC
  28++EFC7
  29++EFC7              Python_PVertSize: equ $ - Python_PVertices
  30++EFC7
  31++EFC7
  32++EFC7
  33++EFC7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  34++EFCB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  35++EFCF 1F 31 00 08  	DB $1F, $31, $00, $08
  36++EFD3 1F 10 00 04  	DB $1F, $10, $00, $04
  37++EFD7 1F 59 08 10  	DB $1F, $59, $08, $10
  38++EFDB 1F 51 04 08  	DB $1F, $51, $04, $08
  39++EFDF 1F 37 08 20  	DB $1F, $37, $08, $20
  40++EFE3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  41++EFE7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  42++EFEB 1F A7 08 24  	DB $1F, $A7, $08, $24
  43++EFEF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  44++EFF3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  45++EFF7 07 88 0C 14  	DB $07, $88, $0C, $14
  46++EFFB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  47++EFFF 07 99 08 14  	DB $07, $99, $08, $14
  48++F003 07 AA 08 28  	DB $07, $AA, $08, $28
  49++F007 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  50++F00B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  51++F00F 1F C8 14 18  	DB $1F, $C8, $14, $18
  52++F013 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  53++F017 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  54++F01B 1F CB 18 28  	DB $1F, $CB, $18, $28
  55++F01F 1F 98 10 14  	DB $1F, $98, $10, $14
  56++F023 1F BA 24 28  	DB $1F, $BA, $24, $28
  57++F027 1F 54 04 10  	DB $1F, $54, $04, $10
  58++F02B 1F 76 20 24  	DB $1F, $76, $20, $24
  59++F02F
  60++F02F              Python_PEdgesSize: equ $ - Python_PEdges
  61++F02F
  62++F02F
  63++F02F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  64++F02F
  65++F02F
  66++F02F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  67++F033 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  68++F037 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  69++F03B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  70++F03F 9F 13 26 00  	DB $9F, $13, $26, $00
  71++F043 1F 13 26 00  	DB $1F, $13, $26, $00
  72++F047 DF 13 26 00  	DB $DF, $13, $26, $00
  73++F04B 5F 13 26 00  	DB $5F, $13, $26, $00
  74++F04F BF 19 25 0B  	DB $BF, $19, $25, $0B
  75++F053 3F 19 25 0B  	DB $3F, $19, $25, $0B
  76++F057 7F 19 25 0B  	DB $7F, $19, $25, $0B
  77++F05B FF 19 25 0B  	DB $FF, $19, $25, $0B
  78++F05F 3F 00 00 70  	DB $3F, $00, $00, $70
  79++F063
  80++F063
  81++F063              Python_PNormalsSize: equ $ - Python_PNormals
  82++F063              Python_PLen: equ $ - Python_P
  83++F063
# file closed: ./Data/ships/Python_P.asm
  98+ F063
# file closed: ./Data/ShipModelMetaData2.asm
1412  F063              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1413  F063                  SLOT    ShipModelsAddr
1414  F063                  PAGE    BankShipModels3
1415  F063              	ORG     ShipModelsAddr, BankShipModels3
1416  E000
1417  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1418  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1418  E00F 06 00       >                        ld      b,0
1418  E011 4F          >                        ld      c,a                                 ; c= original ship id
1418  E012 CB 3F       >.ShiftLoop:             srl     a
1418  E014 CB 3F       >                        srl     a
1418  E016 CB 3F       >                        srl     a
1418  E018 CB 3F       >                        srl     a                                   ; divide by 16
1418  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1418  E01B 79          >                        ld      a,c
1418  E01C 50          >                        ld      d,b
1418  E01D 1E 10       >                        ld      e,16
1418  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1418  E021 93          >                        sub     e                                   ; a= actual model id now
1418  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1418  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1418  E024 7A          >                        ld      a,d                                 ; a = bank number
1418  E025             >;.. Now b = bank and a = adjusted ship nbr
1418  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1418  E028 ED 31       >                        add     hl,a
1418  E02A ED 31       >                        add     hl,a
1418  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1418  E02D             >                        ClearCarryFlag
1418  E02D B7          >                        or a
1418  E02E C9          >                        ret
1419  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1419  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1419  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1419  E035 06 00       >                        ld          b,0
1419  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1419  E03A 4F          >                        ld          c,a
1419  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1419  E03C CD AC 99    >                        call        memcopy_dma
1419  E03F C9          >                        ret
1420  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1420  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1420  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1420  E046 06 00       >                        ld          b,0
1420  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1420  E04B 4F          >                        ld          c,a
1420  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1420  E04D CD AC 99    >                        call        memcopy_dma
1420  E050 C9          >                        ret
1421  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1421  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1421  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1421  E057 06 00       >                        ld          b,0
1421  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1421  E05C 4F          >                        ld          c,a
1421  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1421  E05E CD AC 99    >                        call        memcopy_dma
1421  E061 C9          >                        ret
1422  E062              ShipBankTable3:         MShipBankTable
1422  E062 3B 00       >                        DW      BankShipModels1
1422  E064 43 00       >                        DW      BankShipModels2
1422  E066 44 00       >                        DW      BankShipModels3
1422  E068 45 00       >                        DW      BankShipModels4
1423  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1423  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1423  E06D 36 44       >                        ld          (hl),BankShipModels3
1423  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1423  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1423  E075 ED 31       >                        add         hl,a
1423  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1423  E079 4E          >                        ld          c,(hl)
1423  E07A 23          >                        inc         hl
1423  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1423  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1423  E07F ED 31       >                        add         hl,a
1423  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1423  E083 7E          >                        ld          a,(hl)
1423  E084 23          >                        inc         hl
1423  E085 66          >                        ld          h,(hl)
1423  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1423  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1423  E08A 01 19 00    >                        ld          bc,ShipDataLength
1423  E08D ED B0       >                        ldir
1423  E08F CD 2F E0    >                        call        CopyVertsToUniv
1423  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1423  E095 CD 51 E0    >                        call        CopyNormsToUniv
1423  E098 C9          >                        ret
1424  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1424  E099 3E 0D       >                        ld          a,13
1424  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1424  E09E C9          >                        ret
1425  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 3F E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0A1 1A E2                                 DW ShuttleType9                            ;33  $31
   3+ E0A3 51 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0A5 74 E4                                 DW Sidewinder                              ;35  $33
   5+ E0A7 21 E5                                 DW Splinter                                ;36  $34
   6+ E0A9 7A E5                                 DW TestVector                              ;37  $35
   7+ E0AB DD E5                                 DW Thargoid                                ;38  $36
   8+ E0AD FE E6                                 DW Thargon                                 ;39  $37
   9+ E0AF AB E7                                 DW TransportType10                         ;40  $38
  10+ E0B1 92 E9                                 DW Viper                                   ;41  $39
  11+ E0B3 71 EA                                 DW Worm                                    ;42  $3A
  12+ E0B5 26 EB                                 DW Rattler                                 ;43  $3B
  13+ E0B7 00 00                                 DW 0                                       ;44  $3C
  14+ E0B9 00 00                                 DW 0                                       ;45  $3D
  15+ E0BB 00 00                                 DW 0                                       ;46  $3E
  16+ E0BD 00 00                                 DW 0                                       ;47  $3F
  17+ E0BF 58 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0C1 33 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0C3 6A E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0C5 8D E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0C7 3A E5                                 DW SplinterVertices                        ;36  $34
  22+ E0C9 93 E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0CB F6 E5                                 DW ThargoidVertices                        ;38  $36
  24+ E0CD 17 E7                                 DW ThargonVertices                         ;39  $37
  25+ E0CF C4 E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0D1 AB E9                                 DW ViperVertices                           ;41  $39
  27+ E0D3 8A EA                                 DW WormVertices                            ;42  $3A
  28+ E0D5 3F EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0D7 00 00                                 DW 0                                       ;44  $3C
  30+ E0D9 00 00                                 DW 0                                       ;45  $3D
  31+ E0DB 00 00                                 DW 0                                       ;46  $3E
  32+ E0DD 00 00                                 DW 0                                       ;47  $3F
  33+ E0DF
  34+ E0DF 8E E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E0E1 A5 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E0E3 D0 E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E0E5 C9 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E0E7 52 E5                                 DW SplinterEdges                           ;36  $34
  39+ E0E9 BD E5                                 DW TestVectorEdges                         ;37  $35
  40+ E0EB 6E E6                                 DW ThargoidEdges                           ;38  $36
  41+ E0ED 53 E7                                 DW ThargonEdges                            ;39  $37
  42+ E0EF A2 E8                                 DW TransportType10Edges                    ;40  $38
  43+ E0F1 05 EA                                 DW ViperEdges                              ;41  $39
  44+ E0F3 C6 EA                                 DW WormEdges                               ;42  $3A
  45+ E0F5 99 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E0F7 00 00                                 DW 0                                       ;44  $3C
  47+ E0F9 00 00                                 DW 0                                       ;45  $3D
  48+ E0FB 00 00                                 DW 0                                       ;46  $3E
  49+ E0FD 00 00                                 DW 0                                       ;47  $3F
  50+ E0FF
  51+ E0FF E2 E1        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E101 1D E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E103 40 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E105 05 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E107 6A E5                                 DW SplinterNormals                         ;36  $34
  56+ E109 CD E5                                 DW TestVectorNormals                       ;37  $35
  57+ E10B D6 E6                                 DW ThargoidNormals                         ;38  $36
  58+ E10D 8F E7                                 DW ThargonNormals                          ;39  $37
  59+ E10F 5A E9                                 DW TransportType10Normals                  ;40  $38
  60+ E111 55 EA                                 DW ViperNormals                            ;41  $39
  61+ E113 06 EB                                 DW WormNormals                             ;42  $3A
  62+ E115 99 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E117 00 00                                 DW 0                                       ;44  $3C
  64+ E119 00 00                                 DW 0                                       ;45  $3D
  65+ E11B 00 00                                 DW 0                                       ;46  $3E
  66+ E11D 00 00                                 DW 0                                       ;47  $3F
  67+ E11F
  68+ E11F DB 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E121 37 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E123 23 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E125 AD 00                                 DW SidewinderLen                           ;35  $33
  72+ E127 59 00                                 DW SplinterLen                             ;36  $34
  73+ E129 63 00                                 DW TestVectorLen                           ;37  $35
  74+ E12B 21 01                                 DW ThargoidLen                             ;38  $36
  75+ E12D AD 00                                 DW ThargonLen                              ;39  $37
  76+ E12F E7 01                                 DW TransportType10Len                      ;40  $38
  77+ E131 DF 00                                 DW ViperLen                                ;41  $39
  78+ E133 B5 00                                 DW WormLen                                 ;42  $3A
  79+ E135 0F 01                                 DW RattlerLen                              ;43  $3B
  80+ E137 00 00                                 DW 0                                       ;44  $3C
  81+ E139 00 00                                 DW 0                                       ;45  $3D
  82+ E13B 00 00                                 DW 0                                       ;46  $3E
  83+ E13D 00 00                                 DW 0                                       ;47  $3F
  84+ E13F
  85+ E13F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E13F 07           Rock_Hermit:	        DB $07
   2++E140 00 19                                DW $1900
   3++E142 8E E1                                DW Rock_HermitEdges
   4++E144 54                                   DB Rock_HermitEdgesSize
   5++E145 00 32                                DB $00, $32
   6++E147 36                                   DB Rock_HermitVertSize
   7++E148 15                                   DB Rock_HermitEdgesCnt
   8++E149 00 00                                DB $00, $00
   9++E14B 38                                   DB Rock_HermitNormalsSize
  10++E14C 32 B4 1E                             DB $32, $B4, $1E
  11++E14F E2 E1                                DW Rock_HermitNormals
  12++E151 01 02                                DB $01, $02
  13++E153 58 E1                                DW Rock_HermitVertices
  14++E155 00 00                                DB 0,0                      ; Type and Tactics
  15++E157 01                                   DB ShipCanAnger
  16++E158
  17++E158
  18++E158 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  18++E15C FF FF
  19++E15E 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  19++E162 FF FF
  20++E164 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  20++E168 FF FF
  21++E16A 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  21++E16E FF FF
  22++E170 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  22++E174 65 DC
  23++E176 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  23++E17A FF FF
  24++E17C 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  24++E180 10 32
  25++E182 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  25++E186 FF FF
  26++E188 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  26++E18C 98 BA
  27++E18E
  28++E18E
  29++E18E              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  30++E18E
  31++E18E
  32++E18E
  33++E18E 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  34++E192 1F D6 00 10  	DB $1F, $D6, $00, $10
  35++E196 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  36++E19A 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  37++E19E 1F A3 04 08  	DB $1F, $A3, $04, $08
  38++E1A2 1F 32 04 18  	DB $1F, $32, $04, $18
  39++E1A6 1F 31 08 18  	DB $1F, $31, $08, $18
  40++E1AA 1F 41 08 14  	DB $1F, $41, $08, $14
  41++E1AE 1F 10 14 18  	DB $1F, $10, $14, $18
  42++E1B2 1F 60 00 14  	DB $1F, $60, $00, $14
  43++E1B6 1F 54 0C 14  	DB $1F, $54, $0C, $14
  44++E1BA 1F 20 00 18  	DB $1F, $20, $00, $18
  45++E1BE 1F 65 10 14  	DB $1F, $65, $10, $14
  46++E1C2 1F A8 04 20  	DB $1F, $A8, $04, $20
  47++E1C6 1F 87 04 1C  	DB $1F, $87, $04, $1C
  48++E1CA 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  49++E1CE 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  50++E1D2 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  51++E1D6 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  52++E1DA 1F BA 08 20  	DB $1F, $BA, $08, $20
  53++E1DE 1F 98 1C 20  	DB $1F, $98, $1C, $20
  54++E1E2
  55++E1E2              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  56++E1E2
  57++E1E2
  58++E1E2              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  59++E1E2
  60++E1E2
  61++E1E2 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  62++E1E6 5F 09 42 51  	DB $5F, $09, $42, $51
  63++E1EA 9F 48 40 1F  	DB $9F, $48, $40, $1F
  64++E1EE DF 40 49 2F  	DB $DF, $40, $49, $2F
  65++E1F2 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  66++E1F6 1F 87 0F 23  	DB $1F, $87, $0F, $23
  67++E1FA 1F 26 4C 46  	DB $1F, $26, $4C, $46
  68++E1FE BF 42 3B 27  	DB $BF, $42, $3B, $27
  69++E202 FF 43 0F 50  	DB $FF, $43, $0F, $50
  70++E206 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  71++E20A FF 46 50 28  	DB $FF, $46, $50, $28
  72++E20E 7F 3A 66 33  	DB $7F, $3A, $66, $33
  73++E212 3F 51 09 43  	DB $3F, $51, $09, $43
  74++E216 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  75++E21A
  76++E21A
  77++E21A              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  78++E21A              Rock_HermitLen: equ $ - Rock_Hermit
  79++E21A
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E21A                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E21A 0F           ShuttleType9:	            DB $0F
   2++E21B C4 09                                    DW $09C4
   3++E21D A5 E2                                    DW ShuttleType9Edges
   4++E21F 78                                       DB ShuttleType9EdgesSize
   5++E220 00 26                                    DB $00, $26
   6++E222 72                                       DB ShuttleType9VertSize
   7++E223 1E                                       DB ShuttleType9EdgesCnt
   8++E224 00 00                                    DB $00, $00
   9++E226 34                                       DB ShuttleType9NormalsSize
  10++E227 16 20 08                                 DB $16, $20, $08
  11++E22A 1D E3                                    DW ShuttleType9Normals
  12++E22C 02 00                                    DB $02, $00
  13++E22E 33 E2                                    DW ShuttleType9Vertices
  14++E230 00 00        	                        DB 0,0                      ; Type and Tactics
  15++E232 00                                       DB 0
  16++E233
  17++E233
  18++E233 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  18++E237 FF FF
  19++E239 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  19++E23D FF FF
  20++E23F 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  20++E243 FF FF
  21++E245 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  21++E249 FF FF
  22++E24B 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  22++E24F 12 39
  23++E251 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  23++E255 34 59
  24++E257 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  24++E25B 56 79
  25++E25D 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  25++E261 17 89
  26++E263 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  26++E267 99 99
  27++E269 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  27++E26D 99 99
  28++E26F 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  28++E273 99 99
  29++E275 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  29++E279 99 99
  30++E27B 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  30++E27F 0A BC
  31++E281 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  31++E285 FF 02
  32++E287 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  32++E28B 01 F4
  33++E28D 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  33++E291 A1 3F
  34++E293 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  34++E297 6B 23
  35++E299 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  35++E29D F8 C0
  36++E29F 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  36++E2A3 4F 18
  37++E2A5
  38++E2A5              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  39++E2A5
  40++E2A5
  41++E2A5
  42++E2A5 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  43++E2A9 1F 4A 04 08  	DB $1F, $4A, $04, $08
  44++E2AD 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  45++E2B1 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  46++E2B5 1F 18 00 1C  	DB $1F, $18, $00, $1C
  47++E2B9 18 12 00 10  	DB $18, $12, $00, $10
  48++E2BD 1F 23 04 10  	DB $1F, $23, $04, $10
  49++E2C1 18 34 04 14  	DB $18, $34, $04, $14
  50++E2C5 1F 45 08 14  	DB $1F, $45, $08, $14
  51++E2C9 0C 56 08 18  	DB $0C, $56, $08, $18
  52++E2CD 1F 67 0C 18  	DB $1F, $67, $0C, $18
  53++E2D1 18 78 0C 1C  	DB $18, $78, $0C, $1C
  54++E2D5 1F 39 10 14  	DB $1F, $39, $10, $14
  55++E2D9 1F 59 14 18  	DB $1F, $59, $14, $18
  56++E2DD 1F 79 18 1C  	DB $1F, $79, $18, $1C
  57++E2E1 1F 19 10 1C  	DB $1F, $19, $10, $1C
  58++E2E5 10 0C 00 30  	DB $10, $0C, $00, $30
  59++E2E9 10 0A 04 30  	DB $10, $0A, $04, $30
  60++E2ED 10 AB 08 30  	DB $10, $AB, $08, $30
  61++E2F1 10 BC 0C 30  	DB $10, $BC, $0C, $30
  62++E2F5 10 99 20 24  	DB $10, $99, $20, $24
  63++E2F9 07 99 24 28  	DB $07, $99, $24, $28
  64++E2FD 09 99 28 2C  	DB $09, $99, $28, $2C
  65++E301 07 99 20 2C  	DB $07, $99, $20, $2C
  66++E305 05 BB 34 38  	DB $05, $BB, $34, $38
  67++E309 08 BB 38 3C  	DB $08, $BB, $38, $3C
  68++E30D 07 BB 34 3C  	DB $07, $BB, $34, $3C
  69++E311 05 AA 40 44  	DB $05, $AA, $40, $44
  70++E315 08 AA 44 48  	DB $08, $AA, $44, $48
  71++E319 07 AA 40 48  	DB $07, $AA, $40, $48
  72++E31D              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  73++E31D              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  74++E31D
  75++E31D DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  76++E321 5F 00 4A 04  	DB $5F, $00, $4A, $04
  77++E325 DF 33 33 17  	DB $DF, $33, $33, $17
  78++E329 9F 4A 00 04  	DB $9F, $4A, $00, $04
  79++E32D 9F 33 33 17  	DB $9F, $33, $33, $17
  80++E331 1F 00 4A 04  	DB $1F, $00, $4A, $04
  81++E335 1F 33 33 17  	DB $1F, $33, $33, $17
  82++E339 1F 4A 00 04  	DB $1F, $4A, $00, $04
  83++E33D 5F 33 33 17  	DB $5F, $33, $33, $17
  84++E341 3F 00 00 6B  	DB $3F, $00, $00, $6B
  85++E345 9F 29 29 5A  	DB $9F, $29, $29, $5A
  86++E349 1F 29 29 5A  	DB $1F, $29, $29, $5A
  87++E34D 5F 37 37 28  	DB $5F, $37, $37, $28
  88++E351
  89++E351
  90++E351              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  91++E351              ShuttleType9Len: equ $ - ShuttleType9
  92++E351
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E351                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E351 0F           Shuttle_Mk_2:	        DB $0F
   2++E352 C4 09                                DW $09C4
   3++E354 D0 E3                                DW Shuttle_Mk_2Edges
   4++E356 70                                   DB Shuttle_Mk_2EdgesSize
   5++E357 00 26                                DB $00, $26
   6++E359 66                                   DB Shuttle_Mk_2VertSize
   7++E35A 1C                                   DB Shuttle_Mk_2EdgesCnt
   8++E35B 00 00                                DB $00, $00
   9++E35D 34                                   DB Shuttle_Mk_2NormalsSize
  10++E35E 0A 20 09                             DB $0A, $20, $09
  11++E361 40 E4                                DW Shuttle_Mk_2Normals
  12++E363 02 00                                DB $02, $00
  13++E365 6A E3                                DW Shuttle_Mk_2Vertices
  14++E367 00 00                                DB 0,0                      ; Type and Tactics
  15++E369 00                                   DB 0
  16++E36A
  17++E36A
  18++E36A 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  18++E36E 23 01
  19++E370 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  19++E374 34 00
  20++E376 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  20++E37A 15 00
  21++E37C 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  21++E380 26 11
  22++E382 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  22++E386 37 22
  23++E388 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  23++E38C 58 04
  24++E38E 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  24++E392 69 15
  25++E394 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  25++E398 7A 26
  26++E39A 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  26++E39E 7B 34
  27++E3A0 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  27++E3A4 BC 48
  28++E3A6 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  28++E3AA 9C 58
  29++E3AC 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  29++E3B0 AC 69
  30++E3B2 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  30++E3B6 BC 7A
  31++E3B8 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  31++E3BC CC CC
  32++E3BE 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  32++E3C2 CC CC
  33++E3C4 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  33++E3C8 CC CC
  34++E3CA 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  34++E3CE CC CC
  35++E3D0
  36++E3D0              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  37++E3D0
  38++E3D0
  39++E3D0
  40++E3D0 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  41++E3D4 1F 12 00 0C  	DB $1F, $12, $00, $0C
  42++E3D8 1F 23 00 10  	DB $1F, $23, $00, $10
  43++E3DC 1F 30 00 04  	DB $1F, $30, $00, $04
  44++E3E0 1F 04 04 14  	DB $1F, $04, $04, $14
  45++E3E4 1F 05 08 14  	DB $1F, $05, $08, $14
  46++E3E8 1F 15 08 18  	DB $1F, $15, $08, $18
  47++E3EC 1F 16 0C 18  	DB $1F, $16, $0C, $18
  48++E3F0 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  49++E3F4 1F 27 10 1C  	DB $1F, $27, $10, $1C
  50++E3F8 1F 37 10 20  	DB $1F, $37, $10, $20
  51++E3FC 1F 34 04 20  	DB $1F, $34, $04, $20
  52++E400 1F 48 14 24  	DB $1F, $48, $14, $24
  53++E404 1F 58 14 28  	DB $1F, $58, $14, $28
  54++E408 1F 59 18 28  	DB $1F, $59, $18, $28
  55++E40C 1F 69 18 2C  	DB $1F, $69, $18, $2C
  56++E410 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  57++E414 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  58++E418 1F 7B 20 30  	DB $1F, $7B, $20, $30
  59++E41C 1F 4B 20 24  	DB $1F, $4B, $20, $24
  60++E420 1F 8C 24 28  	DB $1F, $8C, $24, $28
  61++E424 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  62++E428 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  63++E42C 1F BC 30 24  	DB $1F, $BC, $30, $24
  64++E430 0A CC 34 38  	DB $0A, $CC, $34, $38
  65++E434 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  66++E438 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  67++E43C 0A CC 40 34  	DB $0A, $CC, $40, $34
  68++E440
  69++E440              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  70++E440
  71++E440
  72++E440              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  73++E440
  74++E440
  75++E440 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  76++E444 DF 27 27 4E  	DB $DF, $27, $27, $4E
  77++E448 5F 27 27 4E  	DB $5F, $27, $27, $4E
  78++E44C 1F 27 27 4E  	DB $1F, $27, $27, $4E
  79++E450 1F 00 60 00  	DB $1F, $00, $60, $00
  80++E454 9F 60 00 00  	DB $9F, $60, $00, $00
  81++E458 5F 00 60 00  	DB $5F, $00, $60, $00
  82++E45C 1F 60 00 00  	DB $1F, $60, $00, $00
  83++E460 BF 42 42 16  	DB $BF, $42, $42, $16
  84++E464 FF 42 42 16  	DB $FF, $42, $42, $16
  85++E468 7F 42 42 16  	DB $7F, $42, $42, $16
  86++E46C 3F 42 42 16  	DB $3F, $42, $42, $16
  87++E470 3F 00 00 60  	DB $3F, $00, $00, $60
  88++E474
  89++E474
  90++E474              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  91++E474              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  92++E474
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E474                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E474 00           Sidewinder:	            DB $00
   2++E475 81 10                                DW $1081
   3++E477 C9 E4                                DW SidewinderEdges
   4++E479 3C                                   DB SidewinderEdgesSize
   5++E47A 00 1E                                DB $00, $1E
   6++E47C 3C                                   DB SidewinderVertSize
   7++E47D 0F                                   DB SidewinderEdgesCnt
   8++E47E 00 32                                DB $00, $32
   9++E480 1C                                   DB SidewinderNormalsSize
  10++E481 14 46 25                             DB $14, $46, $25
  11++E484 05 E5                                DW SidewinderNormals
  12++E486 02 10                                DB $02, $10
  13++E488 8D E4                                DW SidewinderVertices
  14++E48A 00 00                                DB 0,0                      ; Type and Tactics
  15++E48C 01                                   DB ShipCanAnger
  16++E48D
  17++E48D 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  17++E491 10 54
  18++E493 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  18++E497 20 65
  19++E499 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  19++E49D 32 66
  20++E49F 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  20++E4A3 31 44
  21++E4A5 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  21++E4A9 10 32
  22++E4AB 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  22++E4AF 43 65
  23++E4B1 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  23++E4B5 33 33
  24++E4B7 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  24++E4BB 33 33
  25++E4BD 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  25++E4C1 33 33
  26++E4C3 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  26++E4C7 33 33
  27++E4C9
  28++E4C9
  29++E4C9              SidewinderVertSize: equ $ - SidewinderVertices
  30++E4C9
  31++E4C9
  32++E4C9
  33++E4C9 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  34++E4CD 1F 62 04 08  	DB $1F, $62, $04, $08
  35++E4D1 1F 20 04 10  	DB $1F, $20, $04, $10
  36++E4D5 1F 10 00 10  	DB $1F, $10, $00, $10
  37++E4D9 1F 41 00 0C  	DB $1F, $41, $00, $0C
  38++E4DD 1F 31 0C 10  	DB $1F, $31, $0C, $10
  39++E4E1 1F 32 08 10  	DB $1F, $32, $08, $10
  40++E4E5 1F 43 0C 14  	DB $1F, $43, $0C, $14
  41++E4E9 1F 63 08 14  	DB $1F, $63, $08, $14
  42++E4ED 1F 65 04 14  	DB $1F, $65, $04, $14
  43++E4F1 1F 54 00 14  	DB $1F, $54, $00, $14
  44++E4F5 0F 33 18 1C  	DB $0F, $33, $18, $1C
  45++E4F9 0C 33 1C 20  	DB $0C, $33, $1C, $20
  46++E4FD 0C 33 18 24  	DB $0C, $33, $18, $24
  47++E501 0C 33 20 24  	DB $0C, $33, $20, $24
  48++E505
  49++E505              SidewinderEdgesSize: equ $ - SidewinderEdges
  50++E505
  51++E505
  52++E505              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  53++E505
  54++E505
  55++E505 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  56++E509 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  57++E50D 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  58++E511 3F 00 00 70  	DB $3F, $00, $00, $70
  59++E515 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  60++E519 5F 00 20 08  	DB $5F, $00, $20, $08
  61++E51D 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  62++E521
  63++E521
  64++E521              SidewinderNormalsSize: equ $ - SidewinderNormals
  65++E521              SidewinderLen: equ $ - Sidewinder
  66++E521
# file closed: ./Data/ships/Sidewinder.asm
  89+ E521                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E521 B0           Splinter:	            DB $B0
   2++E522 00 01                                DW $0100
   3++E524 52 E5                                DW SplinterEdges
   4++E526 18                                   DB SplinterEdgesSize
   5++E527 00 16                                DB $00, $16
   6++E529 18                                   DB SplinterVertSize
   7++E52A 06                                   DB SplinterEdgesCnt
   8++E52B 00 00                                DB $00, $00
   9++E52D 10                                   DB SplinterNormalsSize
  10++E52E 08 14 0A                             DB $08, $14, $0A
  11++E531 6A E5                                DW SplinterNormals
  12++E533 05 00                                DB $05, $00
  13++E535 3A E5                                DW SplinterVertices
  14++E537 00 00                                DB 0,0                      ; Type and Tactics
  15++E539 00                                   DB 0
  16++E53A
  17++E53A 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  17++E53E 12 33
  18++E540 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  18++E544 02 33
  19++E546 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  19++E54A 01 33
  20++E54C 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  20++E550 01 22
  21++E552              SplinterVertSize:       equ $ - SplinterVertices
  22++E552 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  23++E556 1F 03 04 08                          DB $1F, $03, $04, $08
  24++E55A 1F 01 08 0C                          DB $1F, $01, $08, $0C
  25++E55E 1F 12 0C 00                          DB $1F, $12, $0C, $00
  26++E562 1F 13 00 08                          DB $1F, $13, $00, $08
  27++E566 1F 02 0C 04                          DB $1F, $02, $0C, $04
  28++E56A              SplinterEdgesSize:      equ $ - SplinterEdges
  29++E56A              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  30++E56A 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  31++E56E 1F 03 04 08                          DB $1F, $03, $04, $08
  32++E572 1F 01 08 0C                          DB $1F, $01, $08, $0C
  33++E576 1F 12 0C 00                          DB $1F, $12, $0C, $00
  34++E57A              SplinterNormalsSize:    equ $ - SplinterNormals
  35++E57A              SplinterLen:            equ $ - Splinter
  36++E57A
# file closed: ./Data/ships/Splinter.asm
  90+ E57A                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E57A 03           TestVector:             DB $03
   2++E57B 23 41                                DW $4123
   3++E57D BD E5                                DW TestVectorEdges
   4++E57F 10                                   DB TestVectorEdgesSize
   5++E580 54 2A                                DB $54,$2A
   6++E582 2A                                   DB TestVectorVertSize
   7++E583 04                                   DB TestVectorEdgesCnt
   8++E584 00 00                                DB $00,$00
   9++E586 10                                   DB TestVectorNormalsSize
  10++E587 32 96 1C                             DB $32,$96,$1C
  11++E58A CD E5                                DW TestVectorNormals
  12++E58C 04 01                                DB $04,$01
  13++E58E 93 E5                                DW TestVectorVertices
  14++E590 FE 00                                DB ShipTypeDebug,0                      ; Type and Tactics
  15++E592 00                                   DB 0
  16++E593
  17++E593 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  17++E597 00 00
  18++E599 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  18++E59D 00 00
  19++E59F 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  19++E5A3 01 01
  20++E5A5 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  20++E5A9 01 01
  21++E5AB 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  21++E5AF 02 02
  22++E5B1 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  22++E5B5 02 02
  23++E5B7 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  23++E5BB 03 03
  24++E5BD              TestVectorVertSize      equ $  - TestVectorVertices
  25++E5BD 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  26++E5C1 1F 00 08 0C                          DB $1F,$00,$08,$0C
  27++E5C5 1F 00 10 14                          DB $1F,$00,$10,$14
  28++E5C9 1F 00 18 18                          DB $1F,$00,$18,$18
  29++E5CD              TestVectorEdgesSize     equ $  - TestVectorEdges
  30++E5CD              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  31++E5CD              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  32++E5CD 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  33++E5D1 1F 10 00 00                          DB $1F,$10,$00,$00
  34++E5D5 1F 00 00 10                          DB $1F,$00,$00,$10
  35++E5D9 1F 00 00 10                          DB $1F,$00,$00,$10
  36++E5DD              TestVectorNormalsSize   equ $  - TestVectorNormals
  37++E5DD              TestVectorLen           equ $  - TestVector
  38++E5DD
# file closed: ./Data/ships/TestVector.asm
  91+ E5DD                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5DD 00           Thargoid:	            DB $00
   2++E5DE 49 26                                DW $2649
   3++E5E0 6E E6                                DW ThargoidEdges
   4++E5E2 68                                   DB ThargoidEdgesSize
   5++E5E3 3C 26                                DB $3C, $26
   6++E5E5 78                                   DB ThargoidVertSize
   7++E5E6 1A                                   DB ThargoidEdgesCnt
   8++E5E7 01 F4                                DB $01, $F4
   9++E5E9 28                                   DB ThargoidNormalsSize
  10++E5EA 37 F0 27                             DB $37, $F0, $27
  11++E5ED D6 E6                                DW ThargoidNormals
  12++E5EF 02 16                                DB $02, $16
  13++E5F1 F6 E5                                DW ThargoidVertices
  14++E5F3 00 00                                DB 0,0                      ; Type and Tactics
  15++E5F5 01                                   DB ShipCanAnger
  16++E5F6
  17++E5F6 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88
  17++E5FA 40 88
  18++E5FC 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44
  18++E600 10 44
  19++E602 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44
  19++E606 21 44
  20++E608 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44
  20++E60C 32 44
  21++E60E 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55
  21++E612 43 55
  22++E614 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66
  22++E618 54 66
  23++E61A 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77
  23++E61E 64 77
  24++E620 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88
  24++E624 74 88
  25++E626 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99
  25++E62A 80 99
  26++E62C 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99
  26++E630 10 99
  27++E632 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99
  27++E636 21 99
  28++E638 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99
  28++E63C 32 99
  29++E63E 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99
  29++E642 53 99
  30++E644 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99
  30++E648 65 99
  31++E64A 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99
  31++E64E 76 99
  32++E650 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99
  32++E654 87 99
  33++E656 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99
  33++E65A 99 99
  34++E65C 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99
  34++E660 99 99
  35++E662 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99
  35++E666 99 99
  36++E668 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99
  36++E66C 99 99
  37++E66E
  38++E66E              ThargoidVertSize: equ $ - ThargoidVertices
  39++E66E
  40++E66E
  41++E66E
  42++E66E 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  43++E672 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  44++E676 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  45++E67A 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  46++E67E 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  47++E682 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  48++E686 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  49++E68A 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  50++E68E 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  51++E692 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  52++E696 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  53++E69A 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  54++E69E 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  55++E6A2 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  56++E6A6 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  57++E6AA 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  58++E6AE 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  59++E6B2 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  60++E6B6 1F 91 24 28                  DB $1F, $91, $24, $28
  61++E6BA 1F 92 28 2C                  DB $1F, $92, $28, $2C
  62++E6BE 1F 93 2C 30                  DB $1F, $93, $2C, $30
  63++E6C2 1F 95 30 34                  DB $1F, $95, $30, $34
  64++E6C6 1F 96 34 38                  DB $1F, $96, $34, $38
  65++E6CA 1F 97 38 3C                  DB $1F, $97, $38, $3C
  66++E6CE 1E 99 40 44                  DB $1E, $99, $40, $44
  67++E6D2 1E 99 48 4C                  DB $1E, $99, $48, $4C
  68++E6D6
  69++E6D6              ThargoidEdgesSize: equ $ - ThargoidEdges
  70++E6D6
  71++E6D6              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  72++E6D6
  73++E6D6 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  74++E6DA 7F 67 3C 19  	DB $7F, $67, $3C, $19
  75++E6DE 7F 67 19 3C  	DB $7F, $67, $19, $3C
  76++E6E2 3F 67 19 3C  	DB $3F, $67, $19, $3C
  77++E6E6 1F 40 00 00  	DB $1F, $40, $00, $00
  78++E6EA 3F 67 3C 19  	DB $3F, $67, $3C, $19
  79++E6EE 1F 67 3C 19  	DB $1F, $67, $3C, $19
  80++E6F2 1F 67 19 3C  	DB $1F, $67, $19, $3C
  81++E6F6 5F 67 19 3C  	DB $5F, $67, $19, $3C
  82++E6FA 9F 30 00 00  	DB $9F, $30, $00, $00
  83++E6FE
  84++E6FE
  85++E6FE              ThargoidNormalsSize: equ $ - ThargoidNormals
  86++E6FE              ThargoidLen: equ $ - Thargoid
  87++E6FE
# file closed: ./Data/ships/Thargoid.asm
  92+ E6FE                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E6FE F0           Thargon:	            DB $F0
   2++E6FF 40 06                                DW $0640
   3++E701 53 E7                                DW ThargonEdges
   4++E703 3C                                   DB ThargonEdgesSize
   5++E704 00 12                                DB $00, $12
   6++E706 3C                                   DB ThargonVertSize
   7++E707 0F                                   DB ThargonEdgesCnt
   8++E708 00 32                                DB $00, $32
   9++E70A 1C                                   DB ThargonNormalsSize
  10++E70B 14 14 1E                             DB $14, $14, $1E
  11++E70E 8F E7                                DW ThargonNormals
  12++E710 02 10                                DB $02, $10
  13++E712 17 E7                                DW ThargonVertices
  14++E714 00 00                                DB 0,0                      ; Type and Tactics
  15++E716 01                                   DB ShipCanAnger
  16++E717
  17++E717
  18++E717 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  18++E71B 01 55
  19++E71D 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  19++E721 01 22
  20++E723 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  20++E727 02 33
  21++E729 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  21++E72D 03 44
  22++E72F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  22++E733 04 55
  23++E735 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  23++E739 15 66
  24++E73B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  24++E73F 12 66
  25++E741 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  25++E745 23 66
  26++E747 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  26++E74B 34 66
  27++E74D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  27++E751 45 66
  28++E753
  29++E753              ThargonVertSize:        equ $ - ThargonVertices
  30++E753
  31++E753
  32++E753 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  33++E757 1F 20 04 08                          DB $1F, $20, $04, $08
  34++E75B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  35++E75F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  36++E763 1F 50 00 10                          DB $1F, $50, $00, $10
  37++E767 1F 51 00 14                          DB $1F, $51, $00, $14
  38++E76B 1F 21 04 18                          DB $1F, $21, $04, $18
  39++E76F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  40++E773 1F 43 0C 20                          DB $1F, $43, $0C, $20
  41++E777 1F 54 10 24                          DB $1F, $54, $10, $24
  42++E77B 1F 61 14 18                          DB $1F, $61, $14, $18
  43++E77F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  44++E783 1F 63 1C 20                          DB $1F, $63, $1C, $20
  45++E787 1F 64 20 24                          DB $1F, $64, $20, $24
  46++E78B 1F 65 24 14                          DB $1F, $65, $24, $14
  47++E78F
  48++E78F              ThargonEdgesSize:       equ $ - ThargonEdges
  49++E78F
  50++E78F
  51++E78F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  52++E78F
  53++E78F
  54++E78F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  55++E793 5F 14 05 07                          DB $5F, $14, $05, $07
  56++E797 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  57++E79B 3F 24 00 68                          DB $3F, $24, $00, $68
  58++E79F 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  59++E7A3 1F 14 05 07                          DB $1F, $14, $05, $07
  60++E7A7 1F 24 00 00                          DB $1F, $24, $00, $00
  61++E7AB
  62++E7AB
  63++E7AB              ThargonNormalsSize:     equ $ - ThargonNormals
  64++E7AB              ThargonLen:             equ $ - Thargon
  65++E7AB
# file closed: ./Data/ships/Thargon.asm
  93+ E7AB                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7AB 00           TransportType10:	    DB $00
   2++E7AC C4 09                                DW $09C4
   3++E7AE A2 E8                                DW TransportType10Edges
   4++E7B0 B8                                   DB TransportType10EdgesSize
   5++E7B1 30 1A                                DB $30, $1A
   6++E7B3 DE                                   DB TransportType10VertSize
   7++E7B4 2E                                   DB TransportType10EdgesCnt
   8++E7B5 00 00                                DB $00, $00
   9++E7B7 38                                   DB TransportType10NormalsSize
  10++E7B8 10 20 0A                             DB $10, $20, $0A
  11++E7BB 5A E9                                DW TransportType10Normals
  12++E7BD 02 00                                DB $02, $00
  13++E7BF C4 E7                                DW TransportType10Vertices
  14++E7C1 00 00                                DB 0,0                      ; Type and Tactics
  15++E7C3 00                                   DB 0
  16++E7C4
  17++E7C4 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  17++E7C8 06 77
  18++E7CA 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  18++E7CE 01 77
  19++E7D0 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  19++E7D4 01 22
  20++E7D6 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  20++E7DA 02 33
  21++E7DC 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  21++E7E0 03 44
  22++E7E2 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  22++E7E6 04 55
  23++E7E8 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  23++E7EC 05 66
  24++E7EE 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  24++E7F2 FF FF
  25++E7F4 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  25++E7F8 17 89
  26++E7FA 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  26++E7FE 12 39
  27++E800 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  27++E804 34 5A
  28++E806 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  28++E80A 56 AB
  29++E80C 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  29++E810 89 CD
  30++E812 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  30++E816 39 DD
  31++E818 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  31++E81C 3A DD
  32++E81E 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  32++E822 AB CD
  33++E824 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  33++E828 77 77
  34++E82A 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  34++E82E 77 77
  35++E830 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  35++E834 77 77
  36++E836 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  36++E83A 77 77
  37++E83C 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  37++E840 77 77
  38++E842 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  38++E846 77 77
  39++E848 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  39++E84C 66 66
  40++E84E 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  40++E852 66 66
  41++E854 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  41++E858 66 66
  42++E85A 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  42++E85E 66 66
  43++E860 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  43++E864 66 66
  44++E866 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  44++E86A 66 66
  45++E86C 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  45++E870 66 66
  46++E872 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  46++E876 33 33
  47++E878 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  47++E87C 33 33
  48++E87E 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  48++E882 33 33
  49++E884 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  49++E888 33 33
  50++E88A 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  50++E88E 00 00
  51++E890 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  51++E894 00 00
  52++E896 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  52++E89A 00 00
  53++E89C 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  53++E8A0 00 00
  54++E8A2
  55++E8A2              TransportType10VertSize: equ $ - TransportType10Vertices
  56++E8A2
  57++E8A2
  58++E8A2
  59++E8A2 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  60++E8A6 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  61++E8AA 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  62++E8AE 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  63++E8B2 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  64++E8B6 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  65++E8BA 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  66++E8BE 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  67++E8C2 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  68++E8C6 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  69++E8CA 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  70++E8CE 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  71++E8D2 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  72++E8D6 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  73++E8DA 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  74++E8DE 11 19 20 24                          DB $11, $19, $20, $24               ;16
  75++E8E2 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  76++E8E6 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  77++E8EA 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  78++E8EE 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  79++E8F2 10 89 20 30                          DB $10, $89, $20, $30               ;21
  80++E8F6 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  81++E8FA 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  82++E8FE 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  83++E902 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  84++E906 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  85++E90A 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  86++E90E 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  87++E912 07 77 40 44                          DB $07, $77, $40, $44               ;29
  88++E916 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  89++E91A 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  90++E91E 07 77 48 50                          DB $07, $77, $48, $50               ;32
  91++E922 07 77 50 54                          DB $07, $77, $50, $54               ;33
  92++E926 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  93++E92A 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  94++E92E 07 66 60 58                          DB $07, $66, $60, $58               ;36
  95++E932 07 66 64 68                          DB $07, $66, $64, $68               ;37
  96++E936 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  97++E93A 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
  98++E93E 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
  99++E942 06 33 74 78                          DB $06, $33, $74, $78               ;41
 100++E946 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 101++E94A 08 00 84 88                          DB $08, $00, $84, $88               ;43
 102++E94E 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 103++E952 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 104++E956 05 00 90 84                          DB $05, $00, $90, $84               ;46
 105++E95A
 106++E95A              TransportType10EdgesSize: equ $ - TransportType10Edges
 107++E95A
 108++E95A
 109++E95A              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 110++E95A
 111++E95A
 112++E95A 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 113++E95E BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 114++E962 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 115++E966 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 116++E96A 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 117++E96E 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 118++E972 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 119++E976 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 120++E97A 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 121++E97E 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 122++E982 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 123++E986 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 124++E98A 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 125++E98E 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 126++E992
 127++E992
 128++E992              TransportType10NormalsSize: equ $ - TransportType10Normals
 129++E992              TransportType10Len: equ $ - TransportType10
 130++E992
# file closed: ./Data/ships/TransportType10.asm
  94+ E992                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E992              ; Mapping Orginal to new
   2++E992              ; 0    => 0
   3++E992              ; 1-2  => 1-2
   4++E992              ; 3    => EQU Edges
   5++E992              ; 4    => EQU Normals
   6++E992              ; 5    => EQU EdgesCnt
   7++E992              ; 6    => 6
   8++E992              ; 7    => 7
   9++E992              ; 8    => EQU VertSize
  10++E992              ; 9    => EQU EdgesCnt
  11++E992              ; 10-11=> 10-11
  12++E992              ; 12   => EQU  NormalsSize
  13++E992              ; 13   => 13
  14++E992              ; 14   => 14
  15++E992              ; 15   => 15
  16++E992              ; 16   => EQU Edges
  17++E992              ; 17   => EQU Normals
  18++E992              ; 18   => 18
  19++E992              ; 19   => 19
  20++E992              ;\ -> &5C93  \ Viper = Type 16
  21++E992 00           Viper:                  DB $00
  22++E993 F9 15                                DW $15F9
  23++E995 05 EA                                DW ViperEdges
  24++E997 50                                   DB ViperEdgesSize
  25++E998 00 2A                                DB $00,$2A
  26++E99A 5A                                   DB ViperVertSize
  27++E99B 14                                   DB ViperEdgesCnt
  28++E99C 00 00                                DB $00,$00
  29++E99E 1C                                   DB ViperNormalsSize
  30++E99F 17 64 20                             DB $17, $64, $20
  31++E9A2 55 EA                                DW ViperNormals
  32++E9A4 01 11                                DB $01, $11
  33++E9A6 AB E9                                DW ViperVertices
  34++E9A8 00 00                                DB 0,0                      ; Type and Tactics
  35++E9AA 01                                   DB ShipCanAnger
  36++E9AB
  37++E9AB 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  37++E9AF 21 43
  38++E9B1 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  38++E9B5 10 22
  39++E9B7 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  39++E9BB 43 55
  40++E9BD 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  40++E9C1 42 66
  41++E9C3 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  41++E9C7 31 66
  42++E9C9 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  42++E9CD 54 66
  43++E9CF 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  43++E9D3 35 66
  44++E9D5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  44++E9D9 20 66
  45++E9DB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  45++E9DF 10 66
  46++E9E1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  46++E9E5 66 66
  47++E9E7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  47++E9EB 66 66
  48++E9ED 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  48++E9F1 66 66
  49++E9F3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  49++E9F7 66 66
  50++E9F9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  50++E9FD 66 66
  51++E9FF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  51++EA03 66 66
  52++EA05              ViperVertSize           equ $  - ViperVertices
  53++EA05 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  53++EA09 1E 21 00 04
  54++EA0D 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  54++EA11 1F 31 00 10
  55++EA15 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  55++EA19 1E 10 04 20
  56++EA1D 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  56++EA21 1E 53 08 18
  57++EA25 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  57++EA29 1E 65 14 18
  58++EA2D 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  58++EA31 1E 63 10 18
  59++EA35 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  59++EA39 1E 46 0C 14
  60++EA3D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  60++EA41 12 66 24 34
  61++EA45 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  61++EA49 12 66 28 38
  62++EA4D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  62++EA51 10 66 30 34
  63++EA55              ViperEdgesSize          equ $  - ViperEdges
  64++EA55              ViperEdgesCnt           equ ViperEdgesSize/4
  65++EA55 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  65++EA59 9F 16 21 0B
  66++EA5D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  66++EA61 DF 16 21 0B
  67++EA65 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  67++EA69 5F 00 20 00
  68++EA6D 3F 00 00 30                          DB $3F, $00, $00, $30
  69++EA71              ViperNormalsSize        equ $  - ViperNormals
  70++EA71              ViperLen                equ $  - Viper
  71++EA71
# file closed: ./Data/ships/Viper.asm
  95+ EA71                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA71 00           Worm:	                DB $00
   2++EA72 49 26                                DW $2649
   3++EA74 C6 EA                                DW WormEdges
   4++EA76 40                                   DB WormEdgesSize
   5++EA77 00 12                                DB $00, $12
   6++EA79 3C                                   DB WormVertSize
   7++EA7A 10                                   DB WormEdgesCnt
   8++EA7B 00 00                                DB $00, $00
   9++EA7D 20                                   DB WormNormalsSize
  10++EA7E 13 1E 17                             DB $13, $1E, $17
  11++EA81 06 EB                                DW WormNormals
  12++EA83 03 08                                DB $03, $08
  13++EA85 8A EA                                DW WormVertices
  14++EA87 00 00                                DB 0,0                      ; Type and Tactics
  15++EA89 01                                   DB ShipCanAnger
  16++EA8A 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  16++EA8E 02 77
  17++EA90 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  17++EA94 03 77
  18++EA96 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  18++EA9A 01 24
  19++EA9C 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  19++EAA0 01 35
  20++EAA2 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  20++EAA6 24 77
  21++EAA8 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  21++EAAC 35 77
  22++EAAE 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  22++EAB2 46 77
  23++EAB4 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  23++EAB8 56 77
  24++EABA 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  24++EABE 14 66
  25++EAC0 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  25++EAC4 15 66
  26++EAC6
  27++EAC6              WormVertSize: equ $ - WormVertices
  28++EAC6
  29++EAC6
  30++EAC6 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  31++EACA 1F 37 04 14                          DB $1F, $37, $04, $14
  32++EACE 1F 57 14 1C                          DB $1F, $57, $14, $1C
  33++EAD2 1F 67 1C 18                          DB $1F, $67, $1C, $18
  34++EAD6 1F 47 18 10                          DB $1F, $47, $18, $10
  35++EADA 1F 27 10 00                          DB $1F, $27, $10, $00
  36++EADE 1F 02 00 08                          DB $1F, $02, $00, $08
  37++EAE2 1F 03 04 0C                          DB $1F, $03, $04, $0C
  38++EAE6 1F 24 10 08                          DB $1F, $24, $10, $08
  39++EAEA 1F 35 14 0C                          DB $1F, $35, $14, $0C
  40++EAEE 1F 14 08 20                          DB $1F, $14, $08, $20
  41++EAF2 1F 46 20 18                          DB $1F, $46, $20, $18
  42++EAF6 1F 15 0C 24                          DB $1F, $15, $0C, $24
  43++EAFA 1F 56 24 1C                          DB $1F, $56, $24, $1C
  44++EAFE 1F 01 08 0C                          DB $1F, $01, $08, $0C
  45++EB02 1F 16 20 24                          DB $1F, $16, $20, $24
  46++EB06
  47++EB06              WormEdgesSize: equ $ - WormEdges
  48++EB06
  49++EB06
  50++EB06              WormEdgesCnt: equ WormEdgesSize/4
  51++EB06
  52++EB06
  53++EB06 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  54++EB0A 1F 00 45 0E                          DB $1F, $00, $45, $0E
  55++EB0E 1F 46 42 23                          DB $1F, $46, $42, $23
  56++EB12 9F 46 42 23                          DB $9F, $46, $42, $23
  57++EB16 1F 40 31 0E                          DB $1F, $40, $31, $0E
  58++EB1A 9F 40 31 0E                          DB $9F, $40, $31, $0E
  59++EB1E 3F 00 00 C8                          DB $3F, $00, $00, $C8
  60++EB22 5F 00 50 00                          DB $5F, $00, $50, $00
  61++EB26
  62++EB26
  63++EB26              WormNormalsSize: equ $ - WormNormals
  64++EB26              WormLen: equ $ - Worm
  65++EB26
# file closed: ./Data/ships/Worm.asm
  96+ EB26                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB26 02           Rattler:	            DB $02
   2++EB27 70 17                                DW $1770
   3++EB29 99 EB                                DW RattlerEdges
   4++EB2B 68                                   DB RattlerEdgesSize
   5++EB2C 00 2A                                DB $00, $2A
   6++EB2E 5A                                   DB RattlerVertSize
   7++EB2F 1A                                   DB RattlerEdgesCnt
   8++EB30 00 96                                DB $00, $96
   9++EB32 34                                   DB RattlerNormalsSize
  10++EB33 0A 71 1F                             DB $0A, $71, $1F
  11++EB36 01 EC                                DW RattlerNormals
  12++EB38 01 22                                DB $01, $22
  13++EB3A 3F EB                                DW RattlerVertices
  14++EB3C 00 00                                DB 0,0                      ; Type and Tactics
  15++EB3E 01                                   DB ShipCanAnger
  16++EB3F
  17++EB3F
  18++EB3F 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  18++EB43 89 23
  19++EB45 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  19++EB49 9A 34
  20++EB4B 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  20++EB4F 78 12
  21++EB51 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  21++EB55 AB 45
  22++EB57 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  22++EB5B 67 01
  23++EB5D 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  23++EB61 CC 5B
  24++EB63 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  24++EB67 CC 06
  25++EB69 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  25++EB6D FF FF
  26++EB6F 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  26++EB73 FF FF
  27++EB75 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  27++EB79 CC CC
  28++EB7B 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  28++EB7F CC CC
  29++EB81 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  29++EB85 CC CC
  30++EB87 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  30++EB8B CC CC
  31++EB8D 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  31++EB91 CC CC
  32++EB93 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  32++EB97 CC CC
  33++EB99
  34++EB99              RattlerVertSize: equ $ - RattlerVertices
  35++EB99
  36++EB99
  37++EB99 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  38++EB9D 1F 17 08 10  	DB $1F, $17, $08, $10
  39++EBA1 1F 28 00 08  	DB $1F, $28, $00, $08
  40++EBA5 1F 39 00 04  	DB $1F, $39, $00, $04
  41++EBA9 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  42++EBAD 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  43++EBB1 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  44++EBB5 1F 6C 18 20  	DB $1F, $6C, $18, $20
  45++EBB9 1F 01 10 1C  	DB $1F, $01, $10, $1C
  46++EBBD 1F 67 10 20  	DB $1F, $67, $10, $20
  47++EBC1 1F 12 08 1C  	DB $1F, $12, $08, $1C
  48++EBC5 1F 78 08 20  	DB $1F, $78, $08, $20
  49++EBC9 1F 23 00 1C  	DB $1F, $23, $00, $1C
  50++EBCD 1F 89 00 20  	DB $1F, $89, $00, $20
  51++EBD1 1F 34 04 1C  	DB $1F, $34, $04, $1C
  52++EBD5 1F 9A 04 20  	DB $1F, $9A, $04, $20
  53++EBD9 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  54++EBDD 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  55++EBE1 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  56++EBE5 1F BC 14 20  	DB $1F, $BC, $14, $20
  57++EBE9 0A CC 24 28  	DB $0A, $CC, $24, $28
  58++EBED 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  59++EBF1 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  60++EBF5 0A CC 30 34  	DB $0A, $CC, $30, $34
  61++EBF9 0A CC 34 38  	DB $0A, $CC, $34, $38
  62++EBFD 0A CC 38 30  	DB $0A, $CC, $38, $30
  63++EC01
  64++EC01              RattlerEdgesSize: equ $ - RattlerEdges
  65++EC01
  66++EC01
  67++EC01              RattlerEdgesCnt: equ RattlerEdgesSize/4
  68++EC01
  69++EC01
  70++EC01 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  71++EC05 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  72++EC09 9F 09 5D 12  	DB $9F, $09, $5D, $12
  73++EC0D 1F 09 5D 12  	DB $1F, $09, $5D, $12
  74++EC11 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  75++EC15 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  76++EC19 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  77++EC1D DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  78++EC21 DF 09 5D 12  	DB $DF, $09, $5D, $12
  79++EC25 5F 09 5D 12  	DB $5F, $09, $5D, $12
  80++EC29 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  81++EC2D 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  82++EC31 3F 00 00 60  	DB $3F, $00, $00, $60
  83++EC35
  84++EC35              RattlerNormalsSize: equ $ - RattlerNormals
  85++EC35              RattlerLen: equ $ - Rattler
  86++EC35
# file closed: ./Data/ships/Rattler.asm
  97+ EC35
# file closed: ./Data/ShipModelMetaData3.asm
1426  EC35              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1427  EC35              ;;Privisioned for more models     SLOT    ShipModelsAddr
1428  EC35              ;;Privisioned for more models     PAGE    BankShipModels4
1429  EC35              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1430  EC35
1431  EC35              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1432  EC35                  SLOT    SpritemembankAddr
1433  EC35                  PAGE    BankSPRITE
1434  EC35              	ORG     SpritemembankAddr, BankSPRITE
1435  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000              compass_sun                         equ laser_sprite16   +1
  40+ E000              compass_station                     equ compass_sun      +1
  41+ E000              targetting_sprite1                  equ compass_station  +1
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1
  43+ E000
  44+ E000              glactic_pattern_1					equ 0
  45+ E000              glactic_hyper_pattern_1             equ 2
  46+ E000              local_present_cursor                equ 4
  47+ E000              local_hyper_pattern                 equ 7
  48+ E000              reticule_pattern_1                  equ 10
  49+ E000              reticule_pattern_2                  equ 11
  50+ E000              laser_pattern_1                     equ 12
  51+ E000              laser_pattern_2                     equ 13
  52+ E000              laser_pattern_3                     equ 14
  53+ E000              laser_pattern_4                     equ 15
  54+ E000              laser_pattern_5                     equ 16
  55+ E000              targetting_pattern                  equ 23
  56+ E000              lock_pattern                        equ 24
  57+ E000
  58+ E000              compass_sun_infront                 equ 17
  59+ E000              compass_sun_behind                  equ 18
  60+ E000              compass_station_infront             equ 19
  61+ E000              compass_station_behind              equ 20
  62+ E000              spritecursoroffset					equ 17
  63+ E000              spriteborderoffset                  equ 32
  64+ E000
  65+ E000              HideSprite:                 MACRO   spritenbr
  66+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  67+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  68+ E000                                          ENDM
  69+ E000
  70+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  71+ E000              sprite_big:
  72+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  73+ E001 F5                                       push	af									; save id for next few
  74+ E002 D5                                       push	de
  75+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  76+ E006              ; write out X position bits 1 to 8
  77+ E006 79                                       ld		a,c
  78+ E007 21 11 00                                 ld      hl,spritecursoroffset
  79+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  80+ E00C 7D                                       ld		a,l
  81+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  82+ E010              ; write out Y position bits 1 to 8
  83+ E010 EB                                       ex		de,hl								; de = full x position
  84+ E011 78                                       ld		a,b
  85+ E012 21 11 00                                 ld      hl,spritecursoroffset
  86+ E015 ED 31                                    add		hl,a
  87+ E017 7D                                       ld		a,l                                 ; hl = full y position
  88+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  89+ E01B              ; write out MSB of X as its an anchor
  90+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
  91+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  92+ E01F              ; write out sprite pattern
  93+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
  94+ E020 7B                                       ld		a,e
  95+ E021 F6 C0                                    or		%11000000							;
  96+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  97+ E026              ; write out msb of y in h must be bit 0 only
  98+ E026 3E 00                                    ld		a,%00000000							; big unified composite
  99+ E028 B4                                       or		h									; MSB Y
 100+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 101+ E02C F1           .BigSprite1:                pop		af
 102+ E02D 3C                                       inc		a
 103+ E02E F5                                       push	af
 104+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 105+ E032 3E 10                                    ld		a,16
 106+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 107+ E037 AF                                       xor 	a
 108+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 109+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 110+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 111+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 112+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 113+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 114+ E048 F1           .BigSprite2:                pop		af
 115+ E049 3C                                       inc		a
 116+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 117+ E04D AF                                       xor		a
 118+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 119+ E051 3E 10                                    ld		a,16
 120+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 121+ E056 AF                                       xor		a
 122+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 123+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 124+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 125+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 126+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 127+ E064 C9                                       ret
 128+ E065
 129+ E065              ; for a sinle sprite within 256x192 area
 130+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 131+ E066 D5                                   push    de
 132+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 133+ E06A              ; write out X position bits 1 to 8
 134+ E06A 79                                   ld		a,c                                 ; a = column (c)
 135+ E06B 21 20 00                             ld      hl,spriteborderoffset
 136+ E06E ED 31                                add		hl,a                                ; hl = full x position
 137+ E070 EB                                   ex		de,hl								; de = full x position
 138+ E071 7B                                   ld		a,e
 139+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 140+ E075              ; write out Y position bits 1 to 8
 141+ E075 78                                   ld		a,b                                 ; a = row
 142+ E076 21 20 00                             ld      hl,spriteborderoffset
 143+ E079 ED 31                                add		hl,a
 144+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 145+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 146+ E07F              ; write out MSB of X as its an anchor
 147+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 148+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 149+ E083              ; write out sprite pattern
 150+ E083 D1                                   pop     de
 151+ E084 7B                                   ld		a,e
 152+ E085 F6 80                                or		%10000000							;
 153+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 154+ E08A              ; write out extended attribute
 155+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 156+ E08C B4                                   or      h
 157+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 158+ E090 C9                                   ret
 159+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 160+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 161+ E093 1E 00                                    ld		e,0
 162+ E095 78                                       ld		a,b
 163+ E096 C6 18                                    add		a,galactic_chart_y_offset
 164+ E098 47                                       ld		b,a
 165+ E099 CD 00 E0                                 call	sprite_big
 166+ E09C C9                                       ret
 167+ E09D
 168+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 169+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 170+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 171+ E0A0 47                                       ld		b,a
 172+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 173+ E0A3 1E 03                                    ld		e,3
 174+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 175+ E0A8 C9                                       ret
 176+ E0A9              ; moves hyperspace cursor to target system x position
 177+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 178+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 179+ E0AE              ; write out X position bits 1 to 8
 180+ E0AE 79                                       ld		a,c
 181+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 182+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 183+ E0B4 7D                                       ld		a,l
 184+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 185+ E0B8              ; write out Y position bits 1 to 8
 186+ E0B8 EB                                       ex		de,hl								; de = full x position
 187+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 188+ E0BB 78                                       ld      a,b
 189+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 190+ E0BF ED 31                                    add		hl,a
 191+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 192+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 193+ E0C5              ; write out MSB of X as its an anchor
 194+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 195+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 196+ E0C9              ; write out msb of y in h must be bit 0 only
 197+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 198+ E0CB B2                                       or		d									; MSB Y
 199+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 200+ E0CF C9                                       ret
 201+ E0D0
 202+ E0D0
 203+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 204+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 205+ E0D5              ; write out X position bits 1 to 8
 206+ E0D5 79                                       ld		a,c
 207+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 208+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 209+ E0DB 7D                                       ld		a,l
 210+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 211+ E0DF              ; write out Y position bits 1 to 8
 212+ E0DF EB                                       ex		de,hl								; de = full x position
 213+ E0E0 78                                       ld		a,b
 214+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 215+ E0E4 ED 31                                    add		hl,a
 216+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 217+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 218+ E0EA              ; write out MSB of X as its an anchor
 219+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 220+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 221+ E0EE              ; write out msb of y in h must be bit 0 only
 222+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 223+ E0F0 B2                                       or		d									; MSB Y
 224+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 225+ E0F4 C9                                       ret
 226+ E0F5
 227+ E0F5              ; "sprite_local_cursor BC = rowcol"
 228+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 229+ E0F7 1E 04                                    ld		e,local_present_cursor
 230+ E0F9 CD 00 E0                                 call	sprite_big
 231+ E0FC C9                                       ret
 232+ E0FD
 233+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 234+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 235+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 236+ E101 CD 00 E0                                 call	sprite_big
 237+ E104 C9                                       ret
 238+ E105
 239+ E105              compass_offset              equ 2
 240+ E105              ScannerX                    equ 128
 241+ E105              ScannerY                    equ 171
 242+ E105              SunScanCenterX              equ 92
 243+ E105              SunScanCenterY              equ 171
 244+ E105              PlanetScanCenterX           equ 164
 245+ E105              PlanetScanCenterY           equ 171
 246+ E105
 247+ E105
 248+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 249+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 250+ E10A              ; write out X position bits 1 to 8
 251+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 252+ E10C 81                                   add     a,c
 253+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 254+ E110              ; write out Y position bits 1 to 8
 255+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 256+ E112 90                                   sub     b
 257+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 258+ E116 C9                                   ret
 259+ E117
 260+ E117 3E 21        compass_station_move:   ld		a,compass_station
 261+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 262+ E11C              ; write out X position bits 1 to 8
 263+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 264+ E11E 81                                   add     a,c
 265+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 266+ E122              ; write out Y position bits 1 to 8
 267+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 268+ E124 90                                   sub     b
 269+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 270+ E128 C9                                   ret
 271+ E129
 272+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 273+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 274+ E129              ReticuleOffset          EQU 8
 275+ E129
 276+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 277+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 278+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 279+ E129
 280+ E129 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 281+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 282+ E12E 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 283+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 284+ E133 3E 7F                                ld		a,ReticuleCentreY
 285+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 286+ E138 AF                                   xor     a
 287+ E139 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 288+ E13C 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 289+ E13E ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 290+ E141 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 291+ E143 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 292+ E146 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 293+ E148 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 294+ E14B 3E 7F                                ld		a,ReticuleCentreY
 295+ E14D ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 296+ E150 3E 08                                ld      a,%00001000
 297+ E152 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 298+ E155 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 299+ E157 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 300+ E15A 3E 0E        .topReticule            ld      a,reticlule_sprite3
 301+ E15C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 302+ E15F 3E 9F                                ld      a,ReticuleCentreX
 303+ E161 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 304+ E164 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 305+ E166 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 306+ E169 AF                                   xor     a
 307+ E16A ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 308+ E16D 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 309+ E16F ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 310+ E172 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 311+ E174 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 312+ E177 3E 9F                                ld      a,ReticuleCentreX
 313+ E179 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 314+ E17C 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 315+ E17E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 316+ E181 3E 04                                ld      a,%00000100
 317+ E183 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 318+ E186 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 319+ E188 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 320+ E18B C9                                   ret
 321+ E18C
 322+ E18C              laserbasex              equ 6
 323+ E18C              laserbasey              equ 14
 324+ E18C
 325+ E18C              ShowSprite              MACRO   spritenbr, patternnbr
 326+ E18C ~                                    ld      a, spritenbr
 327+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 328+ E18C ~                                    ld      a,patternnbr | %10000000
 329+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 330+ E18C                                      ENDM
 331+ E18C
 332+ E18C              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 333+ E18C ~                                    ld      a, spriteL
 334+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 335+ E18C ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 336+ E18C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 337+ E18C ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 338+ E18C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 339+ E18C ~                                    xor     a
 340+ E18C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 341+ E18C ~                                    ld      a, patternL | %00000000             ; hidden by default
 342+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 343+ E18C                                      ENDM
 344+ E18C
 345+ E18C              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 346+ E18C ~                                    ld      a, spriteL
 347+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E18C ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 349+ E18C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E18C ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 351+ E18C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E18C ~                                    ld      a,%00001000
 353+ E18C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 354+ E18C ~                                    ld      a, patternL | %00000000             ; hidden by default
 355+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 356+ E18C                                      ENDM
 357+ E18C
 358+ E18C
 359+ E18C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 359+ E18C 3E 20       >                        ld      a, compass_sun
 359+ E18E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 359+ E191 3E 91       >                        ld      a,compass_sun_infront | %10000000
 359+ E193 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 360+ E196 C9                                    ret
 361+ E197
 362+ E197              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 362+ E197 3E 20       >                        ld      a, compass_sun
 362+ E199 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 362+ E19C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 362+ E19E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 363+ E1A1 C9                                    ret
 364+ E1A2
 365+ E1A2              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 365+ E1A2 3E 21       >                        ld      a, compass_station
 365+ E1A4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 365+ E1A7 3E 93       >                        ld      a,compass_station_infront | %10000000
 365+ E1A9 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 366+ E1AC C9                                    ret
 367+ E1AD
 368+ E1AD              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 368+ E1AD 3E 21       >                        ld      a, compass_station
 368+ E1AF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 368+ E1B2 3E 94       >                        ld      a,compass_station_behind | %10000000
 368+ E1B4 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 369+ E1B7 C9                                    ret
 370+ E1B8
 371+ E1B8              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 371+ E1B8 3E 10       >                        ld      a, laser_sprite1
 371+ E1BA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 371+ E1BD 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 371+ E1BF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 371+ E1C2 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 371+ E1C4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 371+ E1C7 AF          >                        xor     a
 371+ E1C8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 371+ E1CB 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 371+ E1CD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 372+ E1D0                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 372+ E1D0 3E 11       >                        ld      a, laser_sprite2
 372+ E1D2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1D5 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 372+ E1D7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1DA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 372+ E1DC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1DF AF          >                        xor     a
 372+ E1E0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E1E3 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 372+ E1E5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E1E8                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 373+ E1E8 3E 12       >                        ld      a, laser_sprite3
 373+ E1EA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E1ED 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 373+ E1EF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E1F2 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 373+ E1F4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E1F7 AF          >                        xor     a
 373+ E1F8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E1FB 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 373+ E1FD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E200                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 374+ E200 3E 13       >                        ld      a, laser_sprite4
 374+ E202 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E205 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 374+ E207 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E20A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 374+ E20C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E20F AF          >                        xor     a
 374+ E210 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E213 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 374+ E215 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E218                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 375+ E218 3E 14       >                        ld      a, laser_sprite5
 375+ E21A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E21D 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 375+ E21F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E222 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 375+ E224 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E227 AF          >                        xor     a
 375+ E228 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E22B 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 375+ E22D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E230                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 376+ E230 3E 18       >                        ld      a, laser_sprite9
 376+ E232 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E235 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 376+ E237 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E23A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 376+ E23C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E23F 3E 08       >                        ld      a,%00001000
 376+ E241 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E244 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 376+ E246 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E249                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 377+ E249 3E 19       >                        ld      a, laser_sprite10
 377+ E24B ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E24E 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 377+ E250 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E253 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 377+ E255 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E258 3E 08       >                        ld      a,%00001000
 377+ E25A ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E25D 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 377+ E25F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E262                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 378+ E262 3E 1A       >                        ld      a, laser_sprite11
 378+ E264 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E267 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 378+ E269 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E26C 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 378+ E26E ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E271 3E 08       >                        ld      a,%00001000
 378+ E273 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E276 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 378+ E278 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E27B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 379+ E27B 3E 1B       >                        ld      a, laser_sprite12
 379+ E27D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E280 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 379+ E282 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E285 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 379+ E287 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E28A 3E 08       >                        ld      a,%00001000
 379+ E28C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E28F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 379+ E291 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E294                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 380+ E294 3E 1C       >                        ld      a, laser_sprite13
 380+ E296 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 380+ E299 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 380+ E29B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 380+ E29E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 380+ E2A0 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 380+ E2A3 3E 08       >                        ld      a,%00001000
 380+ E2A5 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 380+ E2A8 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 380+ E2AA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 381+ E2AD C9                                   ret
 382+ E2AE                                      ; Need simple show updates just to update the show attribute
 383+ E2AE
 384+ E2AE              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 384+ E2AE 3E 10       >                        ld      a, laser_sprite1
 384+ E2B0 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E2B3 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 384+ E2B5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 385+ E2B8                                      ShowSprite laser_sprite2 ,laser_pattern_2
 385+ E2B8 3E 11       >                        ld      a, laser_sprite2
 385+ E2BA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 385+ E2BD 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 385+ E2BF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E2C2                                      ShowSprite laser_sprite3 ,laser_pattern_3
 386+ E2C2 3E 12       >                        ld      a, laser_sprite3
 386+ E2C4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 386+ E2C7 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 386+ E2C9 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 387+ E2CC                                      ShowSprite laser_sprite4 ,laser_pattern_4
 387+ E2CC 3E 13       >                        ld      a, laser_sprite4
 387+ E2CE ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2D1 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 387+ E2D3 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2D6                                      ShowSprite laser_sprite5 ,laser_pattern_5
 388+ E2D6 3E 14       >                        ld      a, laser_sprite5
 388+ E2D8 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2DB 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 388+ E2DD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2E0                                      ShowSprite laser_sprite9 ,laser_pattern_1
 389+ E2E0 3E 18       >                        ld      a, laser_sprite9
 389+ E2E2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2E5 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 389+ E2E7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E2EA                                      ShowSprite laser_sprite10,laser_pattern_2
 390+ E2EA 3E 19       >                        ld      a, laser_sprite10
 390+ E2EC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E2EF 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 390+ E2F1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E2F4                                      ShowSprite laser_sprite11,laser_pattern_3
 391+ E2F4 3E 1A       >                        ld      a, laser_sprite11
 391+ E2F6 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E2F9 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 391+ E2FB ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E2FE                                      ShowSprite laser_sprite12,laser_pattern_4
 392+ E2FE 3E 1B       >                        ld      a, laser_sprite12
 392+ E300 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 392+ E303 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 392+ E305 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 393+ E308                                      ShowSprite laser_sprite13,laser_pattern_5
 393+ E308 3E 1C       >                        ld      a, laser_sprite13
 393+ E30A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 393+ E30D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 393+ E30F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 394+ E312 C9                                   ret
 395+ E313
 396+ E313              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 396+ E313 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 396+ E317 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 397+ E31B                                      HideSprite galactic_cursor_sprite1
 397+ E31B ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 397+ E31F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 398+ E323                                      HideSprite galactic_cursor_sprite2
 398+ E323 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 398+ E327 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 399+ E32B C9                                   ret
 400+ E32C
 401+ E32C              sprite_galactic_hyper_hide:
 402+ E32C                                      HideSprite galactic_hyper_sprite
 402+ E32C ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 402+ E330 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 403+ E334                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 404+ E334              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 405+ E334              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 406+ E334              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 407+ E334 C9                                   ret
 408+ E335
 409+ E335              sprite_local_hide:      HideSprite local_cursor_sprite
 409+ E335 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 409+ E339 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E33D                                      HideSprite local_cursor_sprite1
 410+ E33D ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 410+ E341 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 411+ E345                                      HideSprite local_cursor_sprite2
 411+ E345 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 411+ E349 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 412+ E34D C9                                   ret
 413+ E34E
 414+ E34E              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 414+ E34E ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 414+ E352 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E356                                      HideSprite local_hyper_sprite1
 415+ E356 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 415+ E35A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 416+ E35E                                      HideSprite local_hyper_sprite2
 416+ E35E ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 416+ E362 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 417+ E366 C9                                   ret
 418+ E367
 419+ E367              sprite_reticule_hide:   HideSprite reticlule_sprite1
 419+ E367 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 419+ E36B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 420+ E36F                                      HideSprite reticlule_sprite2
 420+ E36F ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 420+ E373 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 421+ E377                                      HideSprite reticlule_sprite3
 421+ E377 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 421+ E37B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 422+ E37F                                      HideSprite reticlule_sprite4
 422+ E37F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 422+ E383 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 423+ E387 C9                                   ret
 424+ E388
 425+ E388
 426+ E388 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 427+ E38A ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 428+ E38D 3E 7F                                ld      a,TargetetingCentreX1
 429+ E38F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 430+ E392 3E 78                                ld		a,TargetetingCentreY
 431+ E394 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 432+ E397 AF                                   xor     a
 433+ E398 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 434+ E39B 3E 97                                ld      a,targetting_pattern | %10000000
 435+ E39D ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 436+ E3A0 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 437+ E3A2 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 438+ E3A5 3E AF                                ld      a,TargetetingCentreX2
 439+ E3A7 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 440+ E3AA 3E 78                                ld		a,TargetetingCentreY
 441+ E3AC ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 442+ E3AF 3E 08                                ld      a,%00001000
 443+ E3B1 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 444+ E3B4 3E 97                                ld      a,targetting_pattern | %10000000
 445+ E3B6 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 446+ E3B9 C9                                   ret
 447+ E3BA
 448+ E3BA 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 449+ E3BC ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E3BF 3E 7F                                ld      a,TargetetingCentreX1
 451+ E3C1 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E3C4 3E 78                                ld		a,TargetetingCentreY
 453+ E3C6 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E3C9 AF                                   xor     a
 455+ E3CA ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 456+ E3CD 3E 98                                ld      a,lock_pattern | %10000000
 457+ E3CF ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 458+ E3D2 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 459+ E3D4 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 460+ E3D7 3E AF                                ld      a,TargetetingCentreX2
 461+ E3D9 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 462+ E3DC 3E 78                                ld		a,TargetetingCentreY
 463+ E3DE ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 464+ E3E1 3E 08                                ld      a,%00001000
 465+ E3E3 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 466+ E3E6 3E 98                                ld      a,lock_pattern | %10000000
 467+ E3E8 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 468+ E3EB C9                                   ret
 469+ E3EC
 470+ E3EC              sprite_targetting_hide: HideSprite targetting_sprite1
 470+ E3EC ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 470+ E3F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 471+ E3F4                                      HideSprite targetting_sprite2
 471+ E3F4 ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 471+ E3F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3FC C9                                   ret
 473+ E3FD
 474+ E3FD              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 474+ E3FD 3E 22       >                        ld      a, targetting_sprite1
 474+ E3FF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 474+ E402 3E 97       >                        ld      a,targetting_pattern | %10000000
 474+ E404 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 475+ E407                                      ShowSprite targetting_sprite2, targetting_pattern
 475+ E407 3E 23       >                        ld      a, targetting_sprite2
 475+ E409 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 475+ E40C 3E 97       >                        ld      a,targetting_pattern | %10000000
 475+ E40E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 476+ E411 C9                                   ret
 477+ E412
 478+ E412              sprite_laser_hide:      HideSprite laser_sprite1
 478+ E412 ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 478+ E416 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 479+ E41A                                      HideSprite laser_sprite2
 479+ E41A ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 479+ E41E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E422                                      HideSprite laser_sprite3
 480+ E422 ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 480+ E426 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 481+ E42A                                      HideSprite laser_sprite4
 481+ E42A ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 481+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E432                                      HideSprite laser_sprite5
 482+ E432 ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 482+ E436 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 483+ E43A                                      HideSprite laser_sprite6
 483+ E43A ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 483+ E43E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E442                                      HideSprite laser_sprite7
 484+ E442 ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 484+ E446 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E44A                                      HideSprite laser_sprite8
 485+ E44A ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 485+ E44E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E452                                      HideSprite laser_sprite9
 486+ E452 ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 486+ E456 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E45A                                      HideSprite laser_sprite10
 487+ E45A ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 487+ E45E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 488+ E462                                      HideSprite laser_sprite11
 488+ E462 ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 488+ E466 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E46A                                      HideSprite laser_sprite12
 489+ E46A ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 489+ E46E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E472                                      HideSprite laser_sprite13
 490+ E472 ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 490+ E476 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E47A                                      HideSprite laser_sprite14
 491+ E47A ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 491+ E47E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E482                                      HideSprite laser_sprite15
 492+ E482 ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 492+ E486 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 493+ E48A                                      HideSprite laser_sprite16
 493+ E48A ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 493+ E48E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 494+ E492 C9                                   ret
 495+ E493
 496+ E493              sprite_compass_hide:    HideSprite compass_sun
 496+ E493 ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 496+ E497 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E49B                                      HideSprite compass_station
 497+ E49B ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 497+ E49F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E4A3 C9                                   ret
 499+ E4A4
 500+ E4A4 CD 13 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 501+ E4A7 CD 2C E3                             call	sprite_galactic_hyper_hide
 502+ E4AA CD 35 E3                             call	sprite_local_hide
 503+ E4AD CD 4E E3                             call	sprite_local_hyper_hide
 504+ E4B0 CD 67 E3                             call    sprite_reticule_hide
 505+ E4B3 CD 12 E4                             call    sprite_laser_hide
 506+ E4B6 CD 93 E4                             call    sprite_compass_hide
 507+ E4B9 CD EC E3                             call    sprite_targetting_hide
 508+ E4BC C9                                   ret
 509+ E4BD
 510+ E4BD CD A4 E4     init_sprites:           call		sprite_cls_cursors
 511+ E4C0 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 512+ E4C4 C9                                   ret
 513+ E4C5
# file closed: ./Layer3Sprites/sprite_routines.asm
1436  E4C5                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E4C5 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E4C8 AF                                   xor			a
   3+ E4C9 ED 79                                out			(c),a							; Prime slot upload
   4+ E4CB 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E4CE 21 DC E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E4D1 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E4D4 ED 90                                outinb											; do final 256th sprite
   8+ E4D6 1B                                   dec			de
   9+ E4D7 7A                                   ld			a,d
  10+ E4D8 B3                                   or			e
  11+ E4D9 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E4DB C9                                   ret
  13+ E4DC
# file closed: ./Layer3Sprites/sprite_load.asm
1437  E4DC                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E4DC              Sprite1:
   2+ E4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E4E0 E3 E3 E3 E3
   2+ E4E4 E3 E3 E3 E3
   2+ E4E8 E3 E3 E3 E3
   3+ E4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E4F0 E3 E3 E3 E3
   3+ E4F4 E3 E3 E3 E3
   3+ E4F8 E3 E3 E3 E3
   4+ E4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E500 E3 E3 E3 E3
   4+ E504 E3 E3 E3 E3
   4+ E508 E3 E3 E3 E3
   5+ E50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E510 E3 E3 E3 E3
   5+ E514 E3 E3 E3 E3
   5+ E518 E3 E3 E3 E3
   6+ E51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E520 E3 E3 E3 E3
   6+ E524 E3 E3 E3 E3
   6+ E528 E3 E3 E3 E3
   7+ E52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E530 E3 E3 E3 E3
   7+ E534 E3 E3 E3 E3
   7+ E538 E3 E3 E3 E3
   8+ E53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E540 E3 E3 E3 E3
   8+ E544 E3 E3 E3 E3
   8+ E548 E3 E3 E3 E3
   9+ E54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E550 E3 E3 E3 E3
   9+ E554 E3 E3 E3 E3
   9+ E558 E3 E3 E3 E3
  10+ E55C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E560 E3 E3 E3 E3
  10+ E564 E3 E3 E3 E3
  10+ E568 E3 E3 E3 90
  11+ E56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E570 E3 E3 E3 E3
  11+ E574 E3 E3 E3 E3
  11+ E578 E3 E3 E3 B4
  12+ E57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E580 E3 E3 E3 E3
  12+ E584 E3 E3 E3 E3
  12+ E588 E3 E3 E3 B4
  13+ E58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E590 E3 E3 E3 E3
  13+ E594 E3 E3 E3 E3
  13+ E598 E3 E3 E3 D8
  14+ E59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E5A0 E3 E3 E3 E3
  14+ E5A4 E3 E3 E3 E3
  14+ E5A8 E3 E3 E3 D8
  15+ E5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E5B0 E3 E3 E3 E3
  15+ E5B4 E3 E3 E3 E3
  15+ E5B8 E3 E3 E3 FC
  16+ E5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E5C0 E3 E3 E3 E3
  16+ E5C4 E3 E3 E3 E3
  16+ E5C8 E3 E3 E3 FC
  17+ E5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E5D0 E3 E3 E3 E3
  17+ E5D4 90 B4 B4 D8
  17+ E5D8 D8 FC FC E3
  18+ E5DC
  19+ E5DC
  20+ E5DC
  21+ E5DC              Sprite2:
  22+ E5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E5E0 E3 E3 E3 E3
  22+ E5E4 E3 E3 E3 E3
  22+ E5E8 E3 E3 E3 E3
  23+ E5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E5F0 E3 E3 E3 E3
  23+ E5F4 E3 E3 E3 E3
  23+ E5F8 E3 E3 E3 E3
  24+ E5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E600 E3 E3 E3 E3
  24+ E604 E3 E3 E3 E3
  24+ E608 E3 E3 E3 E3
  25+ E60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E610 E3 E3 E3 E3
  25+ E614 E3 E3 E3 E3
  25+ E618 E3 E3 E3 E3
  26+ E61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E620 E3 E3 E3 E3
  26+ E624 E3 E3 E3 E3
  26+ E628 E3 E3 E3 E3
  27+ E62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E630 E3 E3 E3 E3
  27+ E634 E3 E3 E3 E3
  27+ E638 E3 E3 E3 E3
  28+ E63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E640 E3 E3 E3 E3
  28+ E644 E3 E3 E3 E3
  28+ E648 E3 E3 E3 E3
  29+ E64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E650 E3 E3 E3 E3
  29+ E654 E3 E3 E3 E3
  29+ E658 E3 E3 E3 E3
  30+ E65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E660 E3 E3 E3 E3
  30+ E664 E3 E3 E3 E3
  30+ E668 E3 E3 E3 E3
  31+ E66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E670 E3 E3 E3 E3
  31+ E674 E3 E3 E3 E3
  31+ E678 E3 E3 E3 E3
  32+ E67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E680 E3 E3 E3 E3
  32+ E684 E3 E3 E3 E3
  32+ E688 E3 E3 E3 E3
  33+ E68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E690 E3 E3 E3 E3
  33+ E694 E3 E3 E3 E3
  33+ E698 E3 E3 E3 E3
  34+ E69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E6A0 E3 E3 E3 E3
  34+ E6A4 E3 E3 E3 E3
  34+ E6A8 E3 E3 E3 E3
  35+ E6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E6B0 E3 E3 E3 E3
  35+ E6B4 E3 E3 E3 E3
  35+ E6B8 E3 E3 E3 E3
  36+ E6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E6C0 E3 E3 E3 E3
  36+ E6C4 E3 E3 E3 E3
  36+ E6C8 E3 E3 E3 E3
  37+ E6CC FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E6D0 B4 B4 90 E3
  37+ E6D4 E3 E3 E3 E3
  37+ E6D8 E3 E3 E3 E3
  38+ E6DC
  39+ E6DC
  40+ E6DC
  41+ E6DC              Sprite3:
  42+ E6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E6E0 E3 E3 E3 E3
  42+ E6E4 E3 E3 E3 E3
  42+ E6E8 E3 E3 E3 FC
  43+ E6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E6F0 E3 E3 E3 E3
  43+ E6F4 E3 E3 E3 E3
  43+ E6F8 E3 E3 E3 FC
  44+ E6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E700 E3 E3 E3 E3
  44+ E704 E3 E3 E3 E3
  44+ E708 E3 E3 E3 D8
  45+ E70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E710 E3 E3 E3 E3
  45+ E714 E3 E3 E3 E3
  45+ E718 E3 E3 E3 D8
  46+ E71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E720 E3 E3 E3 E3
  46+ E724 E3 E3 E3 E3
  46+ E728 E3 E3 E3 B4
  47+ E72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E730 E3 E3 E3 E3
  47+ E734 E3 E3 E3 E3
  47+ E738 E3 E3 E3 B4
  48+ E73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E740 E3 E3 E3 E3
  48+ E744 E3 E3 E3 E3
  48+ E748 E3 E3 E3 90
  49+ E74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E750 E3 E3 E3 E3
  49+ E754 E3 E3 E3 E3
  49+ E758 E3 E3 E3 E3
  50+ E75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E760 E3 E3 E3 E3
  50+ E764 E3 E3 E3 E3
  50+ E768 E3 E3 E3 E3
  51+ E76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E770 E3 E3 E3 E3
  51+ E774 E3 E3 E3 E3
  51+ E778 E3 E3 E3 E3
  52+ E77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E780 E3 E3 E3 E3
  52+ E784 E3 E3 E3 E3
  52+ E788 E3 E3 E3 E3
  53+ E78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E790 E3 E3 E3 E3
  53+ E794 E3 E3 E3 E3
  53+ E798 E3 E3 E3 E3
  54+ E79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E7A0 E3 E3 E3 E3
  54+ E7A4 E3 E3 E3 E3
  54+ E7A8 E3 E3 E3 E3
  55+ E7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E7B0 E3 E3 E3 E3
  55+ E7B4 E3 E3 E3 E3
  55+ E7B8 E3 E3 E3 E3
  56+ E7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E7C0 E3 E3 E3 E3
  56+ E7C4 E3 E3 E3 E3
  56+ E7C8 E3 E3 E3 E3
  57+ E7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E7D0 E3 E3 E3 E3
  57+ E7D4 E3 E3 E3 E3
  57+ E7D8 E3 E3 E3 E3
  58+ E7DC
  59+ E7DC
  60+ E7DC
  61+ E7DC              Sprite4:
  62+ E7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E7E0 12 E3 E3 E3
  62+ E7E4 E3 E3 E3 E3
  62+ E7E8 E3 E3 E3 E3
  63+ E7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E7F0 16 E3 E3 E3
  63+ E7F4 E3 E3 E3 E3
  63+ E7F8 E3 E3 E3 E3
  64+ E7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E800 1A E3 E3 E3
  64+ E804 E3 E3 E3 E3
  64+ E808 E3 E3 E3 E3
  65+ E80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E810 1F E3 E3 E3
  65+ E814 E3 E3 E3 E3
  65+ E818 E3 E3 E3 E3
  66+ E81C 12 16 1A 1F  	db  $12, $16, $1A, $1F, $E3, $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E820 E3 1F 1A 16
  66+ E824 12 E3 E3 E3
  66+ E828 E3 E3 E3 E3
  67+ E82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E830 1F E3 E3 E3
  67+ E834 E3 E3 E3 E3
  67+ E838 E3 E3 E3 E3
  68+ E83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E840 1A E3 E3 E3
  68+ E844 E3 E3 E3 E3
  68+ E848 E3 E3 E3 E3
  69+ E84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E850 16 E3 E3 E3
  69+ E854 E3 E3 E3 E3
  69+ E858 E3 E3 E3 E3
  70+ E85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E860 12 E3 E3 E3
  70+ E864 E3 E3 E3 E3
  70+ E868 E3 E3 E3 E3
  71+ E86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E870 E3 E3 E3 E3
  71+ E874 E3 E3 E3 E3
  71+ E878 E3 E3 E3 E3
  72+ E87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E880 E3 E3 E3 E3
  72+ E884 E3 E3 E3 E3
  72+ E888 E3 E3 E3 E3
  73+ E88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  73+ E890 E3 E3 E3 E3
  73+ E894 E3 E3 E3 E3
  73+ E898 E3 E3 E3 E3
  74+ E89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  74+ E8A0 E3 E3 E3 E3
  74+ E8A4 E3 E3 E3 E3
  74+ E8A8 E3 E3 E3 E3
  75+ E8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  75+ E8B0 E3 E3 E3 E3
  75+ E8B4 E3 E3 E3 E3
  75+ E8B8 E3 E3 E3 E3
  76+ E8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  76+ E8C0 E3 E3 E3 E3
  76+ E8C4 E3 E3 E3 E3
  76+ E8C8 E3 E3 E3 E3
  77+ E8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  77+ E8D0 E3 E3 E3 E3
  77+ E8D4 E3 E3 E3 E3
  77+ E8D8 E3 E3 E3 E3
  78+ E8DC
  79+ E8DC
  80+ E8DC
  81+ E8DC              Sprite5:
  82+ E8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E8E0 E3 E3 E3 E3
  82+ E8E4 E3 E3 E3 E3
  82+ E8E8 E3 E3 E3 E3
  83+ E8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  83+ E8F0 E3 E3 E3 E3
  83+ E8F4 E3 E3 E3 E3
  83+ E8F8 E3 E3 E3 09
  84+ E8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  84+ E900 E3 E3 E3 E3
  84+ E904 E3 E3 E3 E3
  84+ E908 E3 E3 E3 09
  85+ E90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  85+ E910 E3 E3 E3 E3
  85+ E914 E3 E3 E3 E3
  85+ E918 E3 E3 E3 2C
  86+ E91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  86+ E920 E3 E3 E3 E3
  86+ E924 E3 E3 E3 E3
  86+ E928 E3 E3 E3 2C
  87+ E92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  87+ E930 E3 E3 E3 E3
  87+ E934 E3 E3 E3 E3
  87+ E938 E3 E3 E3 50
  88+ E93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  88+ E940 E3 E3 E3 E3
  88+ E944 E3 E3 E3 E3
  88+ E948 E3 E3 E3 50
  89+ E94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  89+ E950 E3 E3 E3 E3
  89+ E954 E3 E3 E3 E3
  89+ E958 E3 E3 E3 50
  90+ E95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  90+ E960 E3 E3 E3 E3
  90+ E964 E3 E3 E3 E3
  90+ E968 E3 E3 E3 15
  91+ E96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  91+ E970 E3 E3 E3 E3
  91+ E974 E3 E3 E3 E3
  91+ E978 E3 E3 E3 15
  92+ E97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  92+ E980 E3 E3 E3 E3
  92+ E984 E3 E3 E3 E3
  92+ E988 E3 E3 E3 15
  93+ E98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  93+ E990 E3 E3 E3 E3
  93+ E994 E3 E3 E3 E3
  93+ E998 E3 E3 E3 7C
  94+ E99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  94+ E9A0 E3 E3 E3 E3
  94+ E9A4 E3 E3 E3 E3
  94+ E9A8 E3 E3 E3 7C
  95+ E9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  95+ E9B0 E3 E3 E3 E3
  95+ E9B4 E3 E3 E3 E3
  95+ E9B8 E3 E3 E3 7C
  96+ E9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  96+ E9C0 E3 E3 E3 E3
  96+ E9C4 E3 E3 E3 E3
  96+ E9C8 E3 E3 E3 7C
  97+ E9CC E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
  97+ E9D0 2C 50 50 50
  97+ E9D4 15 15 15 7C
  97+ E9D8 7C 7C 7C E3
  98+ E9DC
  99+ E9DC
 100+ E9DC
 101+ E9DC              Sprite6:
 102+ E9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 102+ E9E0 E3 E3 E3 E3
 102+ E9E4 E3 E3 E3 E3
 102+ E9E8 E3 E3 E3 E3
 103+ E9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 103+ E9F0 E3 E3 E3 E3
 103+ E9F4 E3 E3 E3 E3
 103+ E9F8 E3 E3 E3 E3
 104+ E9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 104+ EA00 E3 E3 E3 E3
 104+ EA04 E3 E3 E3 E3
 104+ EA08 E3 E3 E3 E3
 105+ EA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 105+ EA10 E3 E3 E3 E3
 105+ EA14 E3 E3 E3 E3
 105+ EA18 E3 E3 E3 E3
 106+ EA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ EA20 E3 E3 E3 E3
 106+ EA24 E3 E3 E3 E3
 106+ EA28 E3 E3 E3 E3
 107+ EA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ EA30 E3 E3 E3 E3
 107+ EA34 E3 E3 E3 E3
 107+ EA38 E3 E3 E3 E3
 108+ EA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ EA40 E3 E3 E3 E3
 108+ EA44 E3 E3 E3 E3
 108+ EA48 E3 E3 E3 E3
 109+ EA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ EA50 E3 E3 E3 E3
 109+ EA54 E3 E3 E3 E3
 109+ EA58 E3 E3 E3 E3
 110+ EA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ EA60 E3 E3 E3 E3
 110+ EA64 E3 E3 E3 E3
 110+ EA68 E3 E3 E3 E3
 111+ EA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ EA70 E3 E3 E3 E3
 111+ EA74 E3 E3 E3 E3
 111+ EA78 E3 E3 E3 E3
 112+ EA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA80 E3 E3 E3 E3
 112+ EA84 E3 E3 E3 E3
 112+ EA88 E3 E3 E3 E3
 113+ EA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA90 E3 E3 E3 E3
 113+ EA94 E3 E3 E3 E3
 113+ EA98 E3 E3 E3 E3
 114+ EA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EAA0 E3 E3 E3 E3
 114+ EAA4 E3 E3 E3 E3
 114+ EAA8 E3 E3 E3 E3
 115+ EAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EAB0 E3 E3 E3 E3
 115+ EAB4 E3 E3 E3 E3
 115+ EAB8 E3 E3 E3 E3
 116+ EABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EAC0 E3 E3 E3 E3
 116+ EAC4 E3 E3 E3 E3
 116+ EAC8 E3 E3 E3 E3
 117+ EACC 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 117+ EAD0 15 15 15 50
 117+ EAD4 50 50 2C 2C
 117+ EAD8 09 09 E3 E3
 118+ EADC
 119+ EADC
 120+ EADC
 121+ EADC              Sprite7:
 122+ EADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 122+ EAE0 E3 E3 E3 E3
 122+ EAE4 E3 E3 E3 E3
 122+ EAE8 E3 E3 E3 7C
 123+ EAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 123+ EAF0 E3 E3 E3 E3
 123+ EAF4 E3 E3 E3 E3
 123+ EAF8 E3 E3 E3 7C
 124+ EAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 124+ EB00 E3 E3 E3 E3
 124+ EB04 E3 E3 E3 E3
 124+ EB08 E3 E3 E3 7C
 125+ EB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 125+ EB10 E3 E3 E3 E3
 125+ EB14 E3 E3 E3 E3
 125+ EB18 E3 E3 E3 7C
 126+ EB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 126+ EB20 E3 E3 E3 E3
 126+ EB24 E3 E3 E3 E3
 126+ EB28 E3 E3 E3 15
 127+ EB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 127+ EB30 E3 E3 E3 E3
 127+ EB34 E3 E3 E3 E3
 127+ EB38 E3 E3 E3 15
 128+ EB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 128+ EB40 E3 E3 E3 E3
 128+ EB44 E3 E3 E3 E3
 128+ EB48 E3 E3 E3 15
 129+ EB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EB50 E3 E3 E3 E3
 129+ EB54 E3 E3 E3 E3
 129+ EB58 E3 E3 E3 50
 130+ EB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 130+ EB60 E3 E3 E3 E3
 130+ EB64 E3 E3 E3 E3
 130+ EB68 E3 E3 E3 50
 131+ EB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 131+ EB70 E3 E3 E3 E3
 131+ EB74 E3 E3 E3 E3
 131+ EB78 E3 E3 E3 50
 132+ EB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 132+ EB80 E3 E3 E3 E3
 132+ EB84 E3 E3 E3 E3
 132+ EB88 E3 E3 E3 2C
 133+ EB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 133+ EB90 E3 E3 E3 E3
 133+ EB94 E3 E3 E3 E3
 133+ EB98 E3 E3 E3 2C
 134+ EB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 134+ EBA0 E3 E3 E3 E3
 134+ EBA4 E3 E3 E3 E3
 134+ EBA8 E3 E3 E3 09
 135+ EBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 135+ EBB0 E3 E3 E3 E3
 135+ EBB4 E3 E3 E3 E3
 135+ EBB8 E3 E3 E3 09
 136+ EBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 136+ EBC0 E3 E3 E3 E3
 136+ EBC4 E3 E3 E3 E3
 136+ EBC8 E3 E3 E3 E3
 137+ EBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 137+ EBD0 E3 E3 E3 E3
 137+ EBD4 E3 E3 E3 E3
 137+ EBD8 E3 E3 E3 E3
 138+ EBDC
 139+ EBDC
 140+ EBDC
 141+ EBDC              Sprite8:
 142+ EBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EBE0 E3 E3 E3 E3
 142+ EBE4 E3 E3 E3 E3
 142+ EBE8 E3 E3 E3 E3
 143+ EBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 143+ EBF0 E3 E3 E3 E3
 143+ EBF4 E3 E3 E3 E3
 143+ EBF8 E3 E3 E3 44
 144+ EBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 144+ EC00 E3 E3 E3 E3
 144+ EC04 E3 E3 E3 E3
 144+ EC08 E3 E3 E3 64
 145+ EC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 145+ EC10 E3 E3 E3 E3
 145+ EC14 E3 E3 E3 E3
 145+ EC18 E3 E3 E3 64
 146+ EC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 146+ EC20 E3 E3 E3 E3
 146+ EC24 E3 E3 E3 E3
 146+ EC28 E3 E3 E3 64
 147+ EC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 147+ EC30 E3 E3 E3 E3
 147+ EC34 E3 E3 E3 E3
 147+ EC38 E3 E3 E3 A8
 148+ EC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 148+ EC40 E3 E3 E3 E3
 148+ EC44 E3 E3 E3 E3
 148+ EC48 E3 E3 E3 A8
 149+ EC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 149+ EC50 E3 E3 E3 E3
 149+ EC54 E3 E3 E3 E3
 149+ EC58 E3 E3 E3 A8
 150+ EC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 150+ EC60 E3 E3 E3 E3
 150+ EC64 E3 E3 E3 E3
 150+ EC68 E3 E3 E3 CC
 151+ EC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 151+ EC70 E3 E3 E3 E3
 151+ EC74 E3 E3 E3 E3
 151+ EC78 E3 E3 E3 CC
 152+ EC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 152+ EC80 E3 E3 E3 E3
 152+ EC84 E3 E3 E3 E3
 152+ EC88 E3 E3 E3 CC
 153+ EC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 153+ EC90 E3 E3 E3 E3
 153+ EC94 E3 E3 E3 E3
 153+ EC98 E3 E3 E3 EC
 154+ EC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 154+ ECA0 E3 E3 E3 E3
 154+ ECA4 E3 E3 E3 E3
 154+ ECA8 E3 E3 E3 EC
 155+ ECAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 155+ ECB0 E3 E3 E3 E3
 155+ ECB4 E3 E3 E3 E3
 155+ ECB8 E3 E3 E3 EC
 156+ ECBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 156+ ECC0 E3 E3 E3 E3
 156+ ECC4 E3 E3 E3 E3
 156+ ECC8 E3 E3 E3 EC
 157+ ECCC E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 157+ ECD0 64 A8 A8 A8
 157+ ECD4 CC CC CC EC
 157+ ECD8 EC EC EC E3
 158+ ECDC
 159+ ECDC
 160+ ECDC
 161+ ECDC              Sprite9:
 162+ ECDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 162+ ECE0 E3 E3 E3 E3
 162+ ECE4 E3 E3 E3 E3
 162+ ECE8 E3 E3 E3 E3
 163+ ECEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 163+ ECF0 E3 E3 E3 E3
 163+ ECF4 E3 E3 E3 E3
 163+ ECF8 E3 E3 E3 E3
 164+ ECFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 164+ ED00 E3 E3 E3 E3
 164+ ED04 E3 E3 E3 E3
 164+ ED08 E3 E3 E3 E3
 165+ ED0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 165+ ED10 E3 E3 E3 E3
 165+ ED14 E3 E3 E3 E3
 165+ ED18 E3 E3 E3 E3
 166+ ED1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 166+ ED20 E3 E3 E3 E3
 166+ ED24 E3 E3 E3 E3
 166+ ED28 E3 E3 E3 E3
 167+ ED2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 167+ ED30 E3 E3 E3 E3
 167+ ED34 E3 E3 E3 E3
 167+ ED38 E3 E3 E3 E3
 168+ ED3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 168+ ED40 E3 E3 E3 E3
 168+ ED44 E3 E3 E3 E3
 168+ ED48 E3 E3 E3 E3
 169+ ED4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 169+ ED50 E3 E3 E3 E3
 169+ ED54 E3 E3 E3 E3
 169+ ED58 E3 E3 E3 E3
 170+ ED5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 170+ ED60 E3 E3 E3 E3
 170+ ED64 E3 E3 E3 E3
 170+ ED68 E3 E3 E3 E3
 171+ ED6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 171+ ED70 E3 E3 E3 E3
 171+ ED74 E3 E3 E3 E3
 171+ ED78 E3 E3 E3 E3
 172+ ED7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 172+ ED80 E3 E3 E3 E3
 172+ ED84 E3 E3 E3 E3
 172+ ED88 E3 E3 E3 E3
 173+ ED8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 173+ ED90 E3 E3 E3 E3
 173+ ED94 E3 E3 E3 E3
 173+ ED98 E3 E3 E3 E3
 174+ ED9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 174+ EDA0 E3 E3 E3 E3
 174+ EDA4 E3 E3 E3 E3
 174+ EDA8 E3 E3 E3 E3
 175+ EDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 175+ EDB0 E3 E3 E3 E3
 175+ EDB4 E3 E3 E3 E3
 175+ EDB8 E3 E3 E3 E3
 176+ EDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EDC0 E3 E3 E3 E3
 176+ EDC4 E3 E3 E3 E3
 176+ EDC8 E3 E3 E3 E3
 177+ EDCC EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 177+ EDD0 CC CC CC A8
 177+ EDD4 A8 A8 64 64
 177+ EDD8 64 44 E3 E3
 178+ EDDC
 179+ EDDC
 180+ EDDC
 181+ EDDC              Sprite10:
 182+ EDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 182+ EDE0 E3 E3 E3 E3
 182+ EDE4 E3 E3 E3 E3
 182+ EDE8 E3 E3 E3 EC
 183+ EDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 183+ EDF0 E3 E3 E3 E3
 183+ EDF4 E3 E3 E3 E3
 183+ EDF8 E3 E3 E3 EC
 184+ EDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 184+ EE00 E3 E3 E3 E3
 184+ EE04 E3 E3 E3 E3
 184+ EE08 E3 E3 E3 EC
 185+ EE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 185+ EE10 E3 E3 E3 E3
 185+ EE14 E3 E3 E3 E3
 185+ EE18 E3 E3 E3 EC
 186+ EE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 186+ EE20 E3 E3 E3 E3
 186+ EE24 E3 E3 E3 E3
 186+ EE28 E3 E3 E3 CC
 187+ EE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 187+ EE30 E3 E3 E3 E3
 187+ EE34 E3 E3 E3 E3
 187+ EE38 E3 E3 E3 CC
 188+ EE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 188+ EE40 E3 E3 E3 E3
 188+ EE44 E3 E3 E3 E3
 188+ EE48 E3 E3 E3 CC
 189+ EE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EE50 E3 E3 E3 E3
 189+ EE54 E3 E3 E3 E3
 189+ EE58 E3 E3 E3 A8
 190+ EE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 190+ EE60 E3 E3 E3 E3
 190+ EE64 E3 E3 E3 E3
 190+ EE68 E3 E3 E3 A8
 191+ EE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 191+ EE70 E3 E3 E3 E3
 191+ EE74 E3 E3 E3 E3
 191+ EE78 E3 E3 E3 A8
 192+ EE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 192+ EE80 E3 E3 E3 E3
 192+ EE84 E3 E3 E3 E3
 192+ EE88 E3 E3 E3 64
 193+ EE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 193+ EE90 E3 E3 E3 E3
 193+ EE94 E3 E3 E3 E3
 193+ EE98 E3 E3 E3 64
 194+ EE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 194+ EEA0 E3 E3 E3 E3
 194+ EEA4 E3 E3 E3 E3
 194+ EEA8 E3 E3 E3 64
 195+ EEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 195+ EEB0 E3 E3 E3 E3
 195+ EEB4 E3 E3 E3 E3
 195+ EEB8 E3 E3 E3 44
 196+ EEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 196+ EEC0 E3 E3 E3 E3
 196+ EEC4 E3 E3 E3 E3
 196+ EEC8 E3 E3 E3 E3
 197+ EECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 197+ EED0 E3 E3 E3 E3
 197+ EED4 E3 E3 E3 E3
 197+ EED8 E3 E3 E3 E3
 198+ EEDC
 199+ EEDC
 200+ EEDC
 201+ EEDC              Sprite11:
 202+ EEDC 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EEE0 E3 E3 E3 E3
 202+ EEE4 E3 E3 E3 E3
 202+ EEE8 E3 E3 E3 E3
 203+ EEEC 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EEF0 E3 E3 E3 E3
 203+ EEF4 E3 E3 E3 E3
 203+ EEF8 E3 E3 E3 E3
 204+ EEFC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EF00 E3 E3 E3 E3
 204+ EF04 E3 E3 E3 E3
 204+ EF08 E3 E3 E3 E3
 205+ EF0C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EF10 E3 E3 E3 E3
 205+ EF14 E3 E3 E3 E3
 205+ EF18 E3 E3 E3 E3
 206+ EF1C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EF20 E3 E3 E3 E3
 206+ EF24 E3 E3 E3 E3
 206+ EF28 E3 E3 E3 E3
 207+ EF2C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EF30 E3 E3 E3 E3
 207+ EF34 E3 E3 E3 E3
 207+ EF38 E3 E3 E3 E3
 208+ EF3C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EF40 E3 E3 E3 E3
 208+ EF44 E3 E3 E3 E3
 208+ EF48 E3 E3 E3 E3
 209+ EF4C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EF50 E3 E3 E3 E3
 209+ EF54 E3 E3 E3 E3
 209+ EF58 E3 E3 E3 E3
 210+ EF5C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EF60 E3 E3 E3 E3
 210+ EF64 E3 E3 E3 E3
 210+ EF68 E3 E3 E3 E3
 211+ EF6C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EF70 E3 E3 E3 E3
 211+ EF74 E3 E3 E3 E3
 211+ EF78 E3 E3 E3 E3
 212+ EF7C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF80 E3 E3 E3 E3
 212+ EF84 E3 E3 E3 E3
 212+ EF88 E3 E3 E3 E3
 213+ EF8C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF90 E3 E3 E3 E3
 213+ EF94 E3 E3 E3 E3
 213+ EF98 E3 E3 E3 E3
 214+ EF9C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EFA0 E3 E3 E3 E3
 214+ EFA4 E3 E3 E3 E3
 214+ EFA8 E3 E3 E3 E3
 215+ EFAC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EFB0 E3 E3 E3 E3
 215+ EFB4 E3 E3 E3 E3
 215+ EFB8 E3 E3 E3 E3
 216+ EFBC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EFC0 E3 E3 E3 E3
 216+ EFC4 E3 E3 E3 E3
 216+ EFC8 E3 E3 E3 E3
 217+ EFCC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 217+ EFD0 E3 E3 E3 E3
 217+ EFD4 E3 E3 E3 E3
 217+ EFD8 E3 E3 E3 E3
 218+ EFDC
 219+ EFDC
 220+ EFDC
 221+ EFDC              Sprite12:
 222+ EFDC 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 222+ EFE0 FF FF FF FF
 222+ EFE4 FF FF FF FF
 222+ EFE8 FF FF FF FF
 223+ EFEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 223+ EFF0 E3 E3 E3 E3
 223+ EFF4 E3 E3 E3 E3
 223+ EFF8 E3 E3 E3 E3
 224+ EFFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 224+ F000 E3 E3 E3 E3
 224+ F004 E3 E3 E3 E3
 224+ F008 E3 E3 E3 E3
 225+ F00C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 225+ F010 E3 E3 E3 E3
 225+ F014 E3 E3 E3 E3
 225+ F018 E3 E3 E3 E3
 226+ F01C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 226+ F020 E3 E3 E3 E3
 226+ F024 E3 E3 E3 E3
 226+ F028 E3 E3 E3 E3
 227+ F02C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 227+ F030 E3 E3 E3 E3
 227+ F034 E3 E3 E3 E3
 227+ F038 E3 E3 E3 E3
 228+ F03C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 228+ F040 E3 E3 E3 E3
 228+ F044 E3 E3 E3 E3
 228+ F048 E3 E3 E3 E3
 229+ F04C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 229+ F050 E3 E3 E3 E3
 229+ F054 E3 E3 E3 E3
 229+ F058 E3 E3 E3 E3
 230+ F05C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 230+ F060 E3 E3 E3 E3
 230+ F064 E3 E3 E3 E3
 230+ F068 E3 E3 E3 E3
 231+ F06C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 231+ F070 E3 E3 E3 E3
 231+ F074 E3 E3 E3 E3
 231+ F078 E3 E3 E3 E3
 232+ F07C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 232+ F080 E3 E3 E3 E3
 232+ F084 E3 E3 E3 E3
 232+ F088 E3 E3 E3 E3
 233+ F08C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 233+ F090 E3 E3 E3 E3
 233+ F094 E3 E3 E3 E3
 233+ F098 E3 E3 E3 E3
 234+ F09C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 234+ F0A0 E3 E3 E3 E3
 234+ F0A4 E3 E3 E3 E3
 234+ F0A8 E3 E3 E3 E3
 235+ F0AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 235+ F0B0 E3 E3 E3 E3
 235+ F0B4 E3 E3 E3 E3
 235+ F0B8 E3 E3 E3 E3
 236+ F0BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F0C0 E3 E3 E3 E3
 236+ F0C4 E3 E3 E3 E3
 236+ F0C8 E3 E3 E3 E3
 237+ F0CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F0D0 E3 E3 E3 E3
 237+ F0D4 E3 E3 E3 E3
 237+ F0D8 E3 E3 E3 E3
 238+ F0DC
 239+ F0DC
 240+ F0DC
 241+ F0DC              Sprite13:
 242+ F0DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F0E0 E3 E3 E3 E3
 242+ F0E4 E3 E3 E3 E3
 242+ F0E8 E3 E3 E3 E3
 243+ F0EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F0F0 E3 E3 E3 E3
 243+ F0F4 E3 E3 E3 E3
 243+ F0F8 E3 E3 E3 E3
 244+ F0FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F100 E3 E3 E3 E3
 244+ F104 E3 E3 E3 E3
 244+ F108 E3 E3 E3 E3
 245+ F10C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F110 E3 E3 E3 E3
 245+ F114 E3 E3 E3 E3
 245+ F118 E3 E3 E3 E3
 246+ F11C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F120 E3 E3 E3 E3
 246+ F124 E3 E3 E3 E3
 246+ F128 E3 E3 E3 E3
 247+ F12C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F130 E3 E3 E3 E3
 247+ F134 E3 E3 E3 E3
 247+ F138 E3 E3 E3 E3
 248+ F13C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F140 E3 E3 E3 E3
 248+ F144 E3 E3 E3 E3
 248+ F148 E3 E3 E3 E3
 249+ F14C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F150 E3 E3 E3 E3
 249+ F154 E3 E3 E3 E3
 249+ F158 E3 E3 E3 E3
 250+ F15C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F160 E3 E3 E3 E3
 250+ F164 E3 E3 E3 E3
 250+ F168 E3 E3 E3 E3
 251+ F16C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F170 E3 E3 E3 E3
 251+ F174 E3 E3 E3 E3
 251+ F178 E3 E3 E3 E3
 252+ F17C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F180 E3 E3 E3 E3
 252+ F184 E3 E3 E3 E3
 252+ F188 E3 E3 E3 E3
 253+ F18C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 253+ F190 E3 E3 E3 E3
 253+ F194 E3 E3 E3 E3
 253+ F198 E3 E3 18 18
 254+ F19C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C;
 254+ F1A0 E3 E3 E3 E3
 254+ F1A4 E3 E3 E3 18
 254+ F1A8 18 1C 1C 1C
 255+ F1AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C;
 255+ F1B0 E3 E3 E3 E3
 255+ F1B4 18 18 18 1C
 255+ F1B8 1C 1C 1C 1C
 256+ F1BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 256+ F1C0 18 18 18 18
 256+ F1C4 18 1C 1C 1C
 256+ F1C8 1C 1C 1C 1C
 257+ F1CC E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 257+ F1D0 1C 1C 1C 1C
 257+ F1D4 1C 1C 1C 1C
 257+ F1D8 1C 1C 1C 1C
 258+ F1DC
 259+ F1DC
 260+ F1DC
 261+ F1DC              Sprite14:
 262+ F1DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 262+ F1E0 E3 E3 E3 E3
 262+ F1E4 E3 E3 E3 E3
 262+ F1E8 E3 E3 E3 E3
 263+ F1EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F1F0 E3 E3 E3 E3
 263+ F1F4 E3 E3 E3 E3
 263+ F1F8 E3 E3 E3 E3
 264+ F1FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F200 E3 E3 E3 E3
 264+ F204 E3 E3 E3 E3
 264+ F208 E3 E3 E3 E3
 265+ F20C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F210 E3 E3 E3 E3
 265+ F214 E3 E3 E3 E3
 265+ F218 E3 E3 E3 E3
 266+ F21C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F220 E3 E3 E3 E3
 266+ F224 E3 E3 E3 E3
 266+ F228 E3 E3 E3 E3
 267+ F22C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 267+ F230 E3 E3 E3 E3
 267+ F234 E3 E3 E3 E3
 267+ F238 E3 E3 18 18
 268+ F23C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C;
 268+ F240 E3 E3 E3 E3
 268+ F244 E3 E3 E3 18
 268+ F248 18 18 1C 1C
 269+ F24C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C;
 269+ F250 E3 E3 E3 E3
 269+ F254 E3 18 18 1C
 269+ F258 1C 1C 1C 1C
 270+ F25C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 270+ F260 E3 E3 E3 18
 270+ F264 18 1C 1C 1C
 270+ F268 1C 1C 1C 18
 271+ F26C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3;
 271+ F270 18 18 18 1C
 271+ F274 1C 1C 1C 1C
 271+ F278 18 18 18 E3
 272+ F27C E3 18 18 18  	db  $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 272+ F280 1C 1C 1C 1C
 272+ F284 1C 1C 18 18
 272+ F288 E3 E3 E3 E3
 273+ F28C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F290 1C 1C 1C 18
 273+ F294 18 18 E3 E3
 273+ F298 E3 E3 E3 E3
 274+ F29C 1C 1C 1C 1C  	db  $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F2A0 1C 1C 18 18
 274+ F2A4 E3 E3 E3 E3
 274+ F2A8 E3 E3 E3 E3
 275+ F2AC 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F2B0 18 18 E3 E3
 275+ F2B4 E3 E3 E3 E3
 275+ F2B8 E3 E3 E3 E3
 276+ F2BC 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F2C0 E3 E3 E3 E3
 276+ F2C4 E3 E3 E3 E3
 276+ F2C8 E3 E3 E3 E3
 277+ F2CC 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F2D0 E3 E3 E3 E3
 277+ F2D4 E3 E3 E3 E3
 277+ F2D8 E3 E3 E3 E3
 278+ F2DC
 279+ F2DC
 280+ F2DC
 281+ F2DC              Sprite15:
 282+ F2DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F2E0 E3 E3 E3 E3
 282+ F2E4 E3 E3 E3 E3
 282+ F2E8 E3 E3 E3 E3
 283+ F2EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F2F0 E3 E3 E3 E3
 283+ F2F4 E3 E3 E3 E3
 283+ F2F8 E3 E3 E3 E3
 284+ F2FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F300 E3 E3 E3 E3
 284+ F304 E3 E3 E3 E3
 284+ F308 E3 E3 E3 E3
 285+ F30C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F310 E3 E3 E3 E3
 285+ F314 E3 E3 E3 E3
 285+ F318 E3 E3 E3 E3
 286+ F31C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F320 E3 E3 E3 E3
 286+ F324 E3 E3 E3 E3
 286+ F328 E3 E3 E3 E3
 287+ F32C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F330 E3 E3 E3 E3
 287+ F334 E3 E3 E3 E3
 287+ F338 E3 E3 E3 E3
 288+ F33C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 288+ F340 E3 E3 E3 E3
 288+ F344 E3 E3 E3 E3
 288+ F348 E3 E3 E3 18
 289+ F34C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 289+ F350 E3 E3 E3 E3
 289+ F354 E3 E3 E3 E3
 289+ F358 E3 18 18 1C
 290+ F35C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 290+ F360 E3 E3 E3 E3
 290+ F364 E3 E3 E3 18
 290+ F368 18 1C 1C 18
 291+ F36C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18;
 291+ F370 E3 E3 E3 E3
 291+ F374 18 18 18 18
 291+ F378 1C 1C 18 18
 292+ F37C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3;
 292+ F380 E3 E3 18 18
 292+ F384 18 1C 1C 1C
 292+ F388 18 18 E3 E3
 293+ F38C E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 293+ F390 18 18 1C 1C
 293+ F394 1C 1C 18 18
 293+ F398 E3 E3 E3 E3
 294+ F39C E3 18 18 1C  	db  $E3, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 294+ F3A0 1C 1C 1C 18
 294+ F3A4 18 18 E3 E3
 294+ F3A8 E3 E3 E3 E3
 295+ F3AC 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 295+ F3B0 1C 18 18 E3
 295+ F3B4 E3 E3 E3 E3
 295+ F3B8 E3 E3 E3 E3
 296+ F3BC 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 296+ F3C0 18 E3 E3 E3
 296+ F3C4 E3 E3 E3 E3
 296+ F3C8 E3 E3 E3 E3
 297+ F3CC 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 297+ F3D0 E3 E3 E3 E3
 297+ F3D4 E3 E3 E3 E3
 297+ F3D8 E3 E3 E3 E3
 298+ F3DC
 299+ F3DC
 300+ F3DC
 301+ F3DC              Sprite16:
 302+ F3DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 302+ F3E0 E3 E3 E3 E3
 302+ F3E4 E3 E3 E3 E3
 302+ F3E8 E3 E3 18 18
 303+ F3EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $1C;
 303+ F3F0 E3 E3 E3 E3
 303+ F3F4 E3 E3 E3 E3
 303+ F3F8 18 1C 1C 1C
 304+ F3FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $E3, $E3;
 304+ F400 E3 E3 E3 E3
 304+ F404 E3 18 18 1C
 304+ F408 1C 18 E3 E3
 305+ F40C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 305+ F410 E3 E3 18 18
 305+ F414 18 1C 1C 18
 305+ F418 E3 E3 E3 E3
 306+ F41C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 306+ F420 18 18 1C 1C
 306+ F424 18 18 E3 E3
 306+ F428 E3 E3 E3 E3
 307+ F42C E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 307+ F430 1C 1C 18 18
 307+ F434 E3 E3 E3 E3
 307+ F438 E3 E3 E3 E3
 308+ F43C 18 18 1C 1C  	db  $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 308+ F440 18 18 E3 E3
 308+ F444 E3 E3 E3 E3
 308+ F448 E3 E3 E3 E3
 309+ F44C 1C 1C 18 18  	db  $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 309+ F450 E3 E3 E3 E3
 309+ F454 E3 E3 E3 E3
 309+ F458 E3 E3 E3 E3
 310+ F45C 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 310+ F460 E3 E3 E3 E3
 310+ F464 E3 E3 E3 E3
 310+ F468 E3 E3 E3 E3
 311+ F46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 311+ F470 E3 E3 E3 E3
 311+ F474 E3 E3 E3 E3
 311+ F478 E3 E3 E3 E3
 312+ F47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 312+ F480 E3 E3 E3 E3
 312+ F484 E3 E3 E3 E3
 312+ F488 E3 E3 E3 E3
 313+ F48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F490 E3 E3 E3 E3
 313+ F494 E3 E3 E3 E3
 313+ F498 E3 E3 E3 E3
 314+ F49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F4A0 E3 E3 E3 E3
 314+ F4A4 E3 E3 E3 E3
 314+ F4A8 E3 E3 E3 E3
 315+ F4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F4B0 E3 E3 E3 E3
 315+ F4B4 E3 E3 E3 E3
 315+ F4B8 E3 E3 E3 E3
 316+ F4BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F4C0 E3 E3 E3 E3
 316+ F4C4 E3 E3 E3 E3
 316+ F4C8 E3 E3 E3 E3
 317+ F4CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F4D0 E3 E3 E3 E3
 317+ F4D4 E3 E3 E3 E3
 317+ F4D8 E3 E3 E3 E3
 318+ F4DC
 319+ F4DC
 320+ F4DC
 321+ F4DC              Sprite17:
 322+ F4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F4E0 E3 E3 E3 E3
 322+ F4E4 E3 E3 E3 E3
 322+ F4E8 E3 E3 E3 E3
 323+ F4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3;
 323+ F4F0 E3 E3 E3 E3
 323+ F4F4 E3 E3 E3 E3
 323+ F4F8 E3 1C E3 E3
 324+ F4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3;
 324+ F500 E3 E3 E3 E3
 324+ F504 E3 E3 18 1C
 324+ F508 1C E3 E3 E3
 325+ F50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3, $E3, $E3;
 325+ F510 E3 E3 E3 E3
 325+ F514 18 1C 1C E3
 325+ F518 E3 E3 E3 E3
 326+ F51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F520 E3 E3 18 1C
 326+ F524 1C 18 E3 E3
 326+ F528 E3 E3 E3 E3
 327+ F52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 327+ F530 18 1C 1C 18
 327+ F534 E3 E3 E3 E3
 327+ F538 E3 E3 E3 E3
 328+ F53C E3 E3 18 1C  	db  $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 328+ F540 1C 18 E3 E3
 328+ F544 E3 E3 E3 E3
 328+ F548 E3 E3 E3 E3
 329+ F54C 18 1C 1C 18  	db  $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 329+ F550 E3 E3 E3 E3
 329+ F554 E3 E3 E3 E3
 329+ F558 E3 E3 E3 E3
 330+ F55C 1C 18 E3 E3  	db  $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 330+ F560 E3 E3 E3 E3
 330+ F564 E3 E3 E3 E3
 330+ F568 E3 E3 E3 E3
 331+ F56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 331+ F570 E3 E3 E3 E3
 331+ F574 E3 E3 E3 E3
 331+ F578 E3 E3 E3 E3
 332+ F57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 332+ F580 E3 E3 E3 E3
 332+ F584 E3 E3 E3 E3
 332+ F588 E3 E3 E3 E3
 333+ F58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F590 E3 E3 E3 E3
 333+ F594 E3 E3 E3 E3
 333+ F598 E3 E3 E3 E3
 334+ F59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F5A0 E3 E3 E3 E3
 334+ F5A4 E3 E3 E3 E3
 334+ F5A8 E3 E3 E3 E3
 335+ F5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F5B0 E3 E3 E3 E3
 335+ F5B4 E3 E3 E3 E3
 335+ F5B8 E3 E3 E3 E3
 336+ F5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F5C0 E3 E3 E3 E3
 336+ F5C4 E3 E3 E3 E3
 336+ F5C8 E3 E3 E3 E3
 337+ F5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F5D0 E3 E3 E3 E3
 337+ F5D4 E3 E3 E3 E3
 337+ F5D8 E3 E3 E3 E3
 338+ F5DC
 339+ F5DC
 340+ F5DC
 341+ F5DC              Sprite18:
 342+ F5DC E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F5E0 E3 E3 E3 E3
 342+ F5E4 E3 E3 E3 E3
 342+ F5E8 E3 E3 E3 E3
 343+ F5EC B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F5F0 E3 E3 E3 E3
 343+ F5F4 E3 E3 E3 E3
 343+ F5F8 E3 E3 E3 E3
 344+ F5FC D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F600 E3 E3 E3 E3
 344+ F604 E3 E3 E3 E3
 344+ F608 E3 E3 E3 E3
 345+ F60C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F610 E3 E3 E3 E3
 345+ F614 E3 E3 E3 E3
 345+ F618 E3 E3 E3 E3
 346+ F61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F620 E3 E3 E3 E3
 346+ F624 E3 E3 E3 E3
 346+ F628 E3 E3 E3 E3
 347+ F62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F630 E3 E3 E3 E3
 347+ F634 E3 E3 E3 E3
 347+ F638 E3 E3 E3 E3
 348+ F63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 348+ F640 E3 E3 E3 E3
 348+ F644 E3 E3 E3 E3
 348+ F648 E3 E3 E3 E3
 349+ F64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 349+ F650 E3 E3 E3 E3
 349+ F654 E3 E3 E3 E3
 349+ F658 E3 E3 E3 E3
 350+ F65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 350+ F660 E3 E3 E3 E3
 350+ F664 E3 E3 E3 E3
 350+ F668 E3 E3 E3 E3
 351+ F66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 351+ F670 E3 E3 E3 E3
 351+ F674 E3 E3 E3 E3
 351+ F678 E3 E3 E3 E3
 352+ F67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 352+ F680 E3 E3 E3 E3
 352+ F684 E3 E3 E3 E3
 352+ F688 E3 E3 E3 E3
 353+ F68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F690 E3 E3 E3 E3
 353+ F694 E3 E3 E3 E3
 353+ F698 E3 E3 E3 E3
 354+ F69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F6A0 E3 E3 E3 E3
 354+ F6A4 E3 E3 E3 E3
 354+ F6A8 E3 E3 E3 E3
 355+ F6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F6B0 E3 E3 E3 E3
 355+ F6B4 E3 E3 E3 E3
 355+ F6B8 E3 E3 E3 E3
 356+ F6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F6C0 E3 E3 E3 E3
 356+ F6C4 E3 E3 E3 E3
 356+ F6C8 E3 E3 E3 E3
 357+ F6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F6D0 E3 E3 E3 E3
 357+ F6D4 E3 E3 E3 E3
 357+ F6D8 E3 E3 E3 E3
 358+ F6DC
 359+ F6DC
 360+ F6DC
 361+ F6DC              Sprite19:
 362+ F6DC E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 362+ F6E0 E3 E3 E3 E3
 362+ F6E4 E3 E3 E3 E3
 362+ F6E8 E3 E3 E3 E3
 363+ F6EC B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 363+ F6F0 E3 E3 E3 E3
 363+ F6F4 E3 E3 E3 E3
 363+ F6F8 E3 E3 E3 E3
 364+ F6FC D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 364+ F700 E3 E3 E3 E3
 364+ F704 E3 E3 E3 E3
 364+ F708 E3 E3 E3 E3
 365+ F70C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 365+ F710 E3 E3 E3 E3
 365+ F714 E3 E3 E3 E3
 365+ F718 E3 E3 E3 E3
 366+ F71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F720 E3 E3 E3 E3
 366+ F724 E3 E3 E3 E3
 366+ F728 E3 E3 E3 E3
 367+ F72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F730 E3 E3 E3 E3
 367+ F734 E3 E3 E3 E3
 367+ F738 E3 E3 E3 E3
 368+ F73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F740 E3 E3 E3 E3
 368+ F744 E3 E3 E3 E3
 368+ F748 E3 E3 E3 E3
 369+ F74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F750 E3 E3 E3 E3
 369+ F754 E3 E3 E3 E3
 369+ F758 E3 E3 E3 E3
 370+ F75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F760 E3 E3 E3 E3
 370+ F764 E3 E3 E3 E3
 370+ F768 E3 E3 E3 E3
 371+ F76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F770 E3 E3 E3 E3
 371+ F774 E3 E3 E3 E3
 371+ F778 E3 E3 E3 E3
 372+ F77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F780 E3 E3 E3 E3
 372+ F784 E3 E3 E3 E3
 372+ F788 E3 E3 E3 E3
 373+ F78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F790 E3 E3 E3 E3
 373+ F794 E3 E3 E3 E3
 373+ F798 E3 E3 E3 E3
 374+ F79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F7A0 E3 E3 E3 E3
 374+ F7A4 E3 E3 E3 E3
 374+ F7A8 E3 E3 E3 E3
 375+ F7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F7B0 E3 E3 E3 E3
 375+ F7B4 E3 E3 E3 E3
 375+ F7B8 E3 E3 E3 E3
 376+ F7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F7C0 E3 E3 E3 E3
 376+ F7C4 E3 E3 E3 E3
 376+ F7C8 E3 E3 E3 E3
 377+ F7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F7D0 E3 E3 E3 E3
 377+ F7D4 E3 E3 E3 E3
 377+ F7D8 E3 E3 E3 E3
 378+ F7DC
 379+ F7DC
 380+ F7DC
 381+ F7DC
 382+ F7DC              Sprite20:
 383+ F7DC E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F7E0 E3 E3 E3 E3
 383+ F7E4 E3 E3 E3 E3
 383+ F7E8 E3 E3 E3 E3
 384+ F7EC 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F7F0 E3 E3 E3 E3
 384+ F7F4 E3 E3 E3 E3
 384+ F7F8 E3 E3 E3 E3
 385+ F7FC 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F800 E3 E3 E3 E3
 385+ F804 E3 E3 E3 E3
 385+ F808 E3 E3 E3 E3
 386+ F80C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F810 E3 E3 E3 E3
 386+ F814 E3 E3 E3 E3
 386+ F818 E3 E3 E3 E3
 387+ F81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F820 E3 E3 E3 E3
 387+ F824 E3 E3 E3 E3
 387+ F828 E3 E3 E3 E3
 388+ F82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F830 E3 E3 E3 E3
 388+ F834 E3 E3 E3 E3
 388+ F838 E3 E3 E3 E3
 389+ F83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F840 E3 E3 E3 E3
 389+ F844 E3 E3 E3 E3
 389+ F848 E3 E3 E3 E3
 390+ F84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F850 E3 E3 E3 E3
 390+ F854 E3 E3 E3 E3
 390+ F858 E3 E3 E3 E3
 391+ F85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F860 E3 E3 E3 E3
 391+ F864 E3 E3 E3 E3
 391+ F868 E3 E3 E3 E3
 392+ F86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F870 E3 E3 E3 E3
 392+ F874 E3 E3 E3 E3
 392+ F878 E3 E3 E3 E3
 393+ F87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F880 E3 E3 E3 E3
 393+ F884 E3 E3 E3 E3
 393+ F888 E3 E3 E3 E3
 394+ F88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F890 E3 E3 E3 E3
 394+ F894 E3 E3 E3 E3
 394+ F898 E3 E3 E3 E3
 395+ F89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F8A0 E3 E3 E3 E3
 395+ F8A4 E3 E3 E3 E3
 395+ F8A8 E3 E3 E3 E3
 396+ F8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F8B0 E3 E3 E3 E3
 396+ F8B4 E3 E3 E3 E3
 396+ F8B8 E3 E3 E3 E3
 397+ F8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F8C0 E3 E3 E3 E3
 397+ F8C4 E3 E3 E3 E3
 397+ F8C8 E3 E3 E3 E3
 398+ F8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 398+ F8D0 E3 E3 E3 E3
 398+ F8D4 E3 E3 E3 E3
 398+ F8D8 E3 E3 E3 E3
 399+ F8DC
 400+ F8DC
 401+ F8DC
 402+ F8DC              Sprite21:
 403+ F8DC E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F8E0 E3 E3 E3 E3
 403+ F8E4 E3 E3 E3 E3
 403+ F8E8 E3 E3 E3 E3
 404+ F8EC 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F8F0 E3 E3 E3 E3
 404+ F8F4 E3 E3 E3 E3
 404+ F8F8 E3 E3 E3 E3
 405+ F8FC 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F900 E3 E3 E3 E3
 405+ F904 E3 E3 E3 E3
 405+ F908 E3 E3 E3 E3
 406+ F90C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F910 E3 E3 E3 E3
 406+ F914 E3 E3 E3 E3
 406+ F918 E3 E3 E3 E3
 407+ F91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F920 E3 E3 E3 E3
 407+ F924 E3 E3 E3 E3
 407+ F928 E3 E3 E3 E3
 408+ F92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F930 E3 E3 E3 E3
 408+ F934 E3 E3 E3 E3
 408+ F938 E3 E3 E3 E3
 409+ F93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F940 E3 E3 E3 E3
 409+ F944 E3 E3 E3 E3
 409+ F948 E3 E3 E3 E3
 410+ F94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F950 E3 E3 E3 E3
 410+ F954 E3 E3 E3 E3
 410+ F958 E3 E3 E3 E3
 411+ F95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F960 E3 E3 E3 E3
 411+ F964 E3 E3 E3 E3
 411+ F968 E3 E3 E3 E3
 412+ F96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F970 E3 E3 E3 E3
 412+ F974 E3 E3 E3 E3
 412+ F978 E3 E3 E3 E3
 413+ F97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F980 E3 E3 E3 E3
 413+ F984 E3 E3 E3 E3
 413+ F988 E3 E3 E3 E3
 414+ F98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F990 E3 E3 E3 E3
 414+ F994 E3 E3 E3 E3
 414+ F998 E3 E3 E3 E3
 415+ F99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F9A0 E3 E3 E3 E3
 415+ F9A4 E3 E3 E3 E3
 415+ F9A8 E3 E3 E3 E3
 416+ F9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F9B0 E3 E3 E3 E3
 416+ F9B4 E3 E3 E3 E3
 416+ F9B8 E3 E3 E3 E3
 417+ F9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F9C0 E3 E3 E3 E3
 417+ F9C4 E3 E3 E3 E3
 417+ F9C8 E3 E3 E3 E3
 418+ F9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 418+ F9D0 E3 E3 E3 E3
 418+ F9D4 E3 E3 E3 E3
 418+ F9D8 E3 E3 E3 E3
 419+ F9DC
 420+ F9DC
 421+ F9DC
 422+ F9DC              Sprite22:
 423+ F9DC E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F9E0 E3 E3 E3 E3
 423+ F9E4 E3 E3 E3 E3
 423+ F9E8 E3 E3 E3 E3
 424+ F9EC 92 FF FF 92  	db  $92, $FF, $FF, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F9F0 E3 E3 E3 E3
 424+ F9F4 E3 E3 E3 E3
 424+ F9F8 E3 E3 E3 E3
 425+ F9FC 92 FF FF 92  	db  $92, $FF, $FF, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ FA00 E3 E3 E3 E3
 425+ FA04 E3 E3 E3 E3
 425+ FA08 E3 E3 E3 E3
 426+ FA0C E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ FA10 E3 E3 E3 E3
 426+ FA14 E3 E3 E3 E3
 426+ FA18 E3 E3 E3 E3
 427+ FA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ FA20 E3 E3 E3 E3
 427+ FA24 E3 E3 E3 E3
 427+ FA28 E3 E3 E3 E3
 428+ FA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ FA30 E3 E3 E3 E3
 428+ FA34 E3 E3 E3 E3
 428+ FA38 E3 E3 E3 E3
 429+ FA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ FA40 E3 E3 E3 E3
 429+ FA44 E3 E3 E3 E3
 429+ FA48 E3 E3 E3 E3
 430+ FA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ FA50 E3 E3 E3 E3
 430+ FA54 E3 E3 E3 E3
 430+ FA58 E3 E3 E3 E3
 431+ FA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ FA60 E3 E3 E3 E3
 431+ FA64 E3 E3 E3 E3
 431+ FA68 E3 E3 E3 E3
 432+ FA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA70 E3 E3 E3 E3
 432+ FA74 E3 E3 E3 E3
 432+ FA78 E3 E3 E3 E3
 433+ FA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA80 E3 E3 E3 E3
 433+ FA84 E3 E3 E3 E3
 433+ FA88 E3 E3 E3 E3
 434+ FA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA90 E3 E3 E3 E3
 434+ FA94 E3 E3 E3 E3
 434+ FA98 E3 E3 E3 E3
 435+ FA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FAA0 E3 E3 E3 E3
 435+ FAA4 E3 E3 E3 E3
 435+ FAA8 E3 E3 E3 E3
 436+ FAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FAB0 E3 E3 E3 E3
 436+ FAB4 E3 E3 E3 E3
 436+ FAB8 E3 E3 E3 E3
 437+ FABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FAC0 E3 E3 E3 E3
 437+ FAC4 E3 E3 E3 E3
 437+ FAC8 E3 E3 E3 E3
 438+ FACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 438+ FAD0 E3 E3 E3 E3
 438+ FAD4 E3 E3 E3 E3
 438+ FAD8 E3 E3 E3 E3
 439+ FADC
 440+ FADC
 441+ FADC
 442+ FADC              Sprite23:
 443+ FADC E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FAE0 E3 E3 E3 E3
 443+ FAE4 E3 E3 E3 E3
 443+ FAE8 E3 E3 E3 E3
 444+ FAEC 92 E3 E3 92  	db  $92, $E3, $E3, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FAF0 E3 E3 E3 E3
 444+ FAF4 E3 E3 E3 E3
 444+ FAF8 E3 E3 E3 E3
 445+ FAFC 92 E3 E3 92  	db  $92, $E3, $E3, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FB00 E3 E3 E3 E3
 445+ FB04 E3 E3 E3 E3
 445+ FB08 E3 E3 E3 E3
 446+ FB0C E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FB10 E3 E3 E3 E3
 446+ FB14 E3 E3 E3 E3
 446+ FB18 E3 E3 E3 E3
 447+ FB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FB20 E3 E3 E3 E3
 447+ FB24 E3 E3 E3 E3
 447+ FB28 E3 E3 E3 E3
 448+ FB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FB30 E3 E3 E3 E3
 448+ FB34 E3 E3 E3 E3
 448+ FB38 E3 E3 E3 E3
 449+ FB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FB40 E3 E3 E3 E3
 449+ FB44 E3 E3 E3 E3
 449+ FB48 E3 E3 E3 E3
 450+ FB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FB50 E3 E3 E3 E3
 450+ FB54 E3 E3 E3 E3
 450+ FB58 E3 E3 E3 E3
 451+ FB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FB60 E3 E3 E3 E3
 451+ FB64 E3 E3 E3 E3
 451+ FB68 E3 E3 E3 E3
 452+ FB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB70 E3 E3 E3 E3
 452+ FB74 E3 E3 E3 E3
 452+ FB78 E3 E3 E3 E3
 453+ FB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB80 E3 E3 E3 E3
 453+ FB84 E3 E3 E3 E3
 453+ FB88 E3 E3 E3 E3
 454+ FB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB90 E3 E3 E3 E3
 454+ FB94 E3 E3 E3 E3
 454+ FB98 E3 E3 E3 E3
 455+ FB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FBA0 E3 E3 E3 E3
 455+ FBA4 E3 E3 E3 E3
 455+ FBA8 E3 E3 E3 E3
 456+ FBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FBB0 E3 E3 E3 E3
 456+ FBB4 E3 E3 E3 E3
 456+ FBB8 E3 E3 E3 E3
 457+ FBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FBC0 E3 E3 E3 E3
 457+ FBC4 E3 E3 E3 E3
 457+ FBC8 E3 E3 E3 E3
 458+ FBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 458+ FBD0 E3 E3 E3 E3
 458+ FBD4 E3 E3 E3 E3
 458+ FBD8 E3 E3 E3 E3
 459+ FBDC
 460+ FBDC
 461+ FBDC
 462+ FBDC              Sprite24:
 463+ FBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FBE0 E3 E3 E3 E3
 463+ FBE4 E3 E3 E3 E3
 463+ FBE8 E3 E3 E3 E3
 464+ FBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FBF0 E3 E3 E3 E3
 464+ FBF4 E3 E3 E3 E3
 464+ FBF8 E3 E3 E3 E3
 465+ FBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FC00 E3 E3 E3 E3
 465+ FC04 E3 E3 E3 E3
 465+ FC08 E3 E3 E3 E3
 466+ FC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FC10 E3 E3 E3 E3
 466+ FC14 E3 E3 E3 E3
 466+ FC18 E3 E3 E3 E3
 467+ FC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FC20 E3 E3 E3 E3
 467+ FC24 E3 E3 E3 E3
 467+ FC28 E3 E3 E3 E3
 468+ FC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FC30 E3 7C 7C E3
 468+ FC34 E3 E3 E3 E3
 468+ FC38 E3 E3 E3 E3
 469+ FC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FC40 E3 10 10 7C
 469+ FC44 7C E3 E3 E3
 469+ FC48 E3 E3 E3 E3
 470+ FC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3;
 470+ FC50 E3 E3 E3 10
 470+ FC54 10 7C 7C E3
 470+ FC58 E3 E3 E3 E3
 471+ FC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FC60 E3 10 10 7C
 471+ FC64 7C E3 E3 E3
 471+ FC68 E3 E3 E3 E3
 472+ FC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC70 E3 7C 7C E3
 472+ FC74 E3 E3 E3 E3
 472+ FC78 E3 E3 E3 E3
 473+ FC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC80 E3 E3 E3 E3
 473+ FC84 E3 E3 E3 E3
 473+ FC88 E3 E3 E3 E3
 474+ FC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC90 E3 E3 E3 E3
 474+ FC94 E3 E3 E3 E3
 474+ FC98 E3 E3 E3 E3
 475+ FC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FCA0 E3 E3 E3 E3
 475+ FCA4 E3 E3 E3 E3
 475+ FCA8 E3 E3 E3 E3
 476+ FCAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FCB0 E3 E3 E3 E3
 476+ FCB4 E3 E3 E3 E3
 476+ FCB8 E3 E3 E3 E3
 477+ FCBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FCC0 E3 E3 E3 E3
 477+ FCC4 E3 E3 E3 E3
 477+ FCC8 E3 E3 E3 E3
 478+ FCCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 478+ FCD0 E3 E3 E3 E3
 478+ FCD4 E3 E3 E3 E3
 478+ FCD8 E3 E3 E3 E3
 479+ FCDC
 480+ FCDC
 481+ FCDC
 482+ FCDC              Sprite25:
 483+ FCDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FCE0 E3 E3 E3 E3
 483+ FCE4 E3 E3 E3 E3
 483+ FCE8 E3 E3 E3 E3
 484+ FCEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FCF0 E3 E3 E3 E3
 484+ FCF4 E3 E3 E3 E3
 484+ FCF8 E3 E3 E3 E3
 485+ FCFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FD00 E3 E3 E3 E3
 485+ FD04 E3 E3 E3 E3
 485+ FD08 E3 E3 E3 E3
 486+ FD0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FD10 E3 E3 E3 E3
 486+ FD14 E3 E3 E3 E3
 486+ FD18 E3 E3 E3 E3
 487+ FD1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FD20 E3 E3 E3 E3
 487+ FD24 E3 E3 E3 E3
 487+ FD28 E3 E3 E3 E3
 488+ FD2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FD30 E3 E3 E3 E3
 488+ FD34 E3 E3 E3 E3
 488+ FD38 E3 E3 E3 E3
 489+ FD3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E0, $E3, $EC, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FD40 E3 E3 E0 E3
 489+ FD44 EC E3 E3 E3
 489+ FD48 E3 E3 E3 E3
 490+ FD4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $A0, $A0, $E0, $E0, $EC, $EC, $E3, $E3, $E3, $E3, $E3;
 490+ FD50 E3 A0 A0 E0
 490+ FD54 E0 EC EC E3
 490+ FD58 E3 E3 E3 E3
 491+ FD5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E0, $E3, $EC, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FD60 E3 E3 E0 E3
 491+ FD64 EC E3 E3 E3
 491+ FD68 E3 E3 E3 E3
 492+ FD6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD70 E3 E3 E3 E3
 492+ FD74 E3 E3 E3 E3
 492+ FD78 E3 E3 E3 E3
 493+ FD7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD80 E3 E3 E3 E3
 493+ FD84 E3 E3 E3 E3
 493+ FD88 E3 E3 E3 E3
 494+ FD8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD90 E3 E3 E3 E3
 494+ FD94 E3 E3 E3 E3
 494+ FD98 E3 E3 E3 E3
 495+ FD9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FDA0 E3 E3 E3 E3
 495+ FDA4 E3 E3 E3 E3
 495+ FDA8 E3 E3 E3 E3
 496+ FDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FDB0 E3 E3 E3 E3
 496+ FDB4 E3 E3 E3 E3
 496+ FDB8 E3 E3 E3 E3
 497+ FDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FDC0 E3 E3 E3 E3
 497+ FDC4 E3 E3 E3 E3
 497+ FDC8 E3 E3 E3 E3
 498+ FDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 498+ FDD0 E3 E3 E3 E3
 498+ FDD4 E3 E3 E3 E3
 498+ FDD8 E3 E3 E3 E3
 499+ FDDC
 500+ FDDC
 501+ FDDC
 502+ FDDC              Sprite26:
 503+ FDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FDE0 E3 E3 E3 E3
 503+ FDE4 E3 E3 E3 E3
 503+ FDE8 E3 E3 E3 E3
 504+ FDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FDF0 E3 E3 E3 E3
 504+ FDF4 E3 E3 E3 E3
 504+ FDF8 E3 E3 E3 E3
 505+ FDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FE00 E3 E3 E3 E3
 505+ FE04 E3 E3 E3 E3
 505+ FE08 E3 E3 E3 E3
 506+ FE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FE10 E3 E3 E3 E3
 506+ FE14 E3 E3 E3 E3
 506+ FE18 E3 E3 E3 E3
 507+ FE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FE20 E3 E3 E3 E3
 507+ FE24 E3 E3 E3 E3
 507+ FE28 E3 E3 E3 E3
 508+ FE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FE30 E3 E3 E3 E3
 508+ FE34 E3 E3 E3 E3
 508+ FE38 E3 E3 E3 E3
 509+ FE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FE40 E3 E3 E3 E3
 509+ FE44 E3 E3 E3 E3
 509+ FE48 E3 E3 E3 E3
 510+ FE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FE50 E3 E3 E3 E3
 510+ FE54 E3 E3 E3 E3
 510+ FE58 E3 E3 E3 E3
 511+ FE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FE60 E3 E3 E3 E3
 511+ FE64 E3 E3 E3 E3
 511+ FE68 E3 E3 E3 E3
 512+ FE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE70 E3 E3 E3 E3
 512+ FE74 E3 E3 E3 E3
 512+ FE78 E3 E3 E3 E3
 513+ FE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE80 E3 E3 E3 E3
 513+ FE84 E3 E3 E3 E3
 513+ FE88 E3 E3 E3 E3
 514+ FE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE90 E3 E3 E3 E3
 514+ FE94 E3 E3 E3 E3
 514+ FE98 E3 E3 E3 E3
 515+ FE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FEA0 E3 E3 E3 E3
 515+ FEA4 E3 E3 E3 E3
 515+ FEA8 E3 E3 E3 E3
 516+ FEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FEB0 E3 E3 E3 E3
 516+ FEB4 E3 E3 E3 E3
 516+ FEB8 E3 E3 E3 E3
 517+ FEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FEC0 E3 E3 E3 E3
 517+ FEC4 E3 E3 E3 E3
 517+ FEC8 E3 E3 E3 E3
 518+ FECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 518+ FED0 E3 E3 E3 E3
 518+ FED4 E3 E3 E3 E3
 518+ FED8 E3 E3 E3 E3
 519+ FEDC
 520+ FEDC
 521+ FEDC
 522+ FEDC              Sprite27:
 523+ FEDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FEE0 E3 E3 E3 E3
 523+ FEE4 E3 E3 E3 E3
 523+ FEE8 E3 E3 E3 E3
 524+ FEEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FEF0 E3 E3 E3 E3
 524+ FEF4 E3 E3 E3 E3
 524+ FEF8 E3 E3 E3 E3
 525+ FEFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FF00 E3 E3 E3 E3
 525+ FF04 E3 E3 E3 E3
 525+ FF08 E3 E3 E3 E3
 526+ FF0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FF10 E3 E3 E3 E3
 526+ FF14 E3 E3 E3 E3
 526+ FF18 E3 E3 E3 E3
 527+ FF1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FF20 E3 E3 E3 E3
 527+ FF24 E3 E3 E3 E3
 527+ FF28 E3 E3 E3 E3
 528+ FF2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FF30 E3 E3 E3 E3
 528+ FF34 E3 E3 E3 E3
 528+ FF38 E3 E3 E3 E3
 529+ FF3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FF40 E3 E3 E3 E3
 529+ FF44 E3 E3 E3 E3
 529+ FF48 E3 E3 E3 E3
 530+ FF4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FF50 E3 E3 E3 E3
 530+ FF54 E3 E3 E3 E3
 530+ FF58 E3 E3 E3 E3
 531+ FF5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FF60 E3 E3 E3 E3
 531+ FF64 E3 E3 E3 E3
 531+ FF68 E3 E3 E3 E3
 532+ FF6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF70 E3 E3 E3 E3
 532+ FF74 E3 E3 E3 E3
 532+ FF78 E3 E3 E3 E3
 533+ FF7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF80 E3 E3 E3 E3
 533+ FF84 E3 E3 E3 E3
 533+ FF88 E3 E3 E3 E3
 534+ FF8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF90 E3 E3 E3 E3
 534+ FF94 E3 E3 E3 E3
 534+ FF98 E3 E3 E3 E3
 535+ FF9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FFA0 E3 E3 E3 E3
 535+ FFA4 E3 E3 E3 E3
 535+ FFA8 E3 E3 E3 E3
 536+ FFAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FFB0 E3 E3 E3 E3
 536+ FFB4 E3 E3 E3 E3
 536+ FFB8 E3 E3 E3 E3
 537+ FFBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FFC0 E3 E3 E3 E3
 537+ FFC4 E3 E3 E3 E3
 537+ FFC8 E3 E3 E3 E3
 538+ FFCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 538+ FFD0 E3 E3 E3 E3
 538+ FFD4 E3 E3 E3 E3
 538+ FFD8 E3 E3 E3 E3
 539+ FFDC
 540+ FFDC
# file closed: ./Layer3Sprites/SpriteSheet.asm
1438  FFDC              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1439  FFDC                  SLOT    ConsoleImageAddr
1440  FFDC                  PAGE    BankConsole
1441  FFDC              	ORG     ConsoleImageAddr, BankConsole
1442  E000
1443  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1444  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1445  E900                  SLOT    ViewFrontAddr
1446  E900                  PAGE    BankFrontView
1447  E900                  ORG     ViewFrontAddr
1448  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 D5 9C                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 D6 9C                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A D1 9C                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 D4 9C     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 D3 9C                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 DC C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 C8 9C                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 C9 9C                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A C6 9C                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 C7 9C     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 C5 9C                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 DD C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 03 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD A4 E4                             call    sprite_cls_cursors
  55+ C082 CD 29 E1                             call    sprite_reticule
  56+ C085 CD B8 E1                             call    sprite_laser
  57+ C088 CD 88 E3                             call    sprite_targetting
  58+ C08B CD BA E3                             call    sprite_lock
  59+ C08E CD EC E3                             call    sprite_targetting_hide      ; do not show targeting initially
  60+ C091                                     ; call    sprite_laser_show
  61+ C091                                      MMUSelectConsoleBank
  61+ C091 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  62+ C095 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  63+ C098 11 00 E0                             ld          de,ConsoleImageData
  64+ C09B 01 00 08                             ld          bc, ScreenL1BottomLen
  65+ C09E CD AC 99                             call        memcopy_dma
  66+ C0A1 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  67+ C0A4 11 00 E8                             ld          de,ConsoleAttributes
  68+ C0A7 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  69+ C0AA CD AC 99                             call        memcopy_dma
  70+ C0AD CD 7B 97                             call        InitialiseStars
  71+ C0B0 AF                                   xor         a
  72+ C0B1 32 CC 9D                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  73+ C0B4 32 BB C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  74+ C0B7 32 BC C0                             ld          (ShowingLock),a
  75+ C0BA C9                                   ret
  76+ C0BB
  77+ C0BB 00           CurrentLock             DB      0
  78+ C0BC 00           ShowingLock             DB      0
  79+ C0BD 3A BD A0     update_front_view:      ld      a,(MissileTargettingFlag)
  80+ C0C0                                      JumpIfANEquNusng StageMissileNoTarget,  .NoTarget
  80+ C0C0 FE FF       >                        cp     StageMissileNoTarget
  80+ C0C2 CA D2 C0    >                        jp     z,.NoTarget
  81+ C0C5                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  81+ C0C5 FE FE       >                        cp     StageMissileTargeting
  81+ C0C7 CA DF C0    >                        jp     z,.Targetting
  82+ C0CA CB 7F                                bit     7,a
  83+ C0CC 20 26                                jr      nz, .Locked
  84+ C0CE CD EC E3                             call    sprite_targetting_hide
  85+ C0D1 C9                                   ret
  86+ C0D2 3A BC C0     .NoTarget:              ld      a,(ShowingLock)
  87+ C0D5                                      ReturnIfAIsZero
  87+ C0D5 A7          >                        and     a
  87+ C0D6 C8          >                        ret     z
  88+ C0D7                                      MMUSelectSpriteBank
  88+ C0D7 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  89+ C0DB CD EC E3                             call        sprite_targetting_hide
  90+ C0DE C9                                   ret
  91+ C0DF              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
  91+ C0DF 3A BB C0    >                        ld      a,(CurrentLock)
  91+ C0E2 A7          >                        and     a
  91+ C0E3 CC 88 E3    >                        call    z, sprite_targetting
  92+ C0E6                                      CallIfMemZero ShowingLock, sprite_targetting_show
  92+ C0E6 3A BC C0    >                        ld      a,(ShowingLock)
  92+ C0E9 A7          >                        and     a
  92+ C0EA CC FD E3    >                        call    z, sprite_targetting_show
  93+ C0ED 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
  94+ C0F0 22 BB C0                             ld      (CurrentLock),hl
  95+ C0F3 C9                                   ret
  96+ C0F4              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
  96+ C0F4 3A BB C0    >                        ld      a,(CurrentLock)
  96+ C0F7 A7          >                        and     a
  96+ C0F8 C4 BA E3    >                        call    nz, sprite_lock
  97+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
  97+ C0FB 3A BC C0    >                        ld      a,(ShowingLock)
  97+ C0FE A7          >                        and     a
  97+ C0FF CC FD E3    >                        call    z, sprite_targetting_show
  98+ C102 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
  99+ C105 22 BB C0                             ld      (CurrentLock),hl
 100+ C108 C9                                   ret
 101+ C109
 102+ C109 3A BC C0                             ld      a,(ShowingLock)
 103+ C10C
 104+ C10C                                      MMUSelectSpriteBank
 104+ C10C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 105+ C110 CD FD E3                             call        sprite_targetting_show
 106+ C113 3A BB C0                             ld      a,(CurrentLock)
 107+ C116                                      ReturnIfAIsZero
 107+ C116 A7          >                        and     a
 107+ C117 C8          >                        ret     z
 108+ C118
 109+ C118
 110+ C118                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 111+ C118                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 112+ C118 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 112+ C11C FF 61 2A 4C
 112+ C120 23 1F 52 27
 112+ C124 4F 14 1A 4F
 112+ C128 1A 3A 12 16
 112+ C12C 40 15 20 1A
 112+ C130 12 26 19 1E
 112+ C134 09 1A 23 14
 112+ C138 05 10 12 25
 112+ C13C 15 00 00 12
 113+ C140 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 113+ C144 FF 89 2D A0
 113+ C148 23 1F 96 28
 113+ C14C 9D 38 1A A0
 113+ C150 24 AF 0A 16
 113+ C154 9C 25 C4 28
 113+ C158 12 C5 29 DF
 113+ C15C 21 1A DF 21
 113+ C160 F5 1E 12 DF
 113+ C164 20 FE 2F 12
 114+ C168 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 114+ C16C FF 59 59 40
 114+ C170 62 1F 4F 5C
 114+ C174 40 48 19 41
 114+ C178 4B 1E 46 16
 114+ C17C 23 47 26 40
 114+ C180 12 43 5F 15
 114+ C184 63 1A 1F 61
 114+ C188 00 50 12 1F
 114+ C18C 61 15 6E 12
 115+ C190 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 115+ C194 FF 62 6E 40
 115+ C198 73 1F 46 73
 115+ C19C 49 7F 19 47
 115+ C1A0 72 3C 70 16
 115+ C1A4 1E 78 14 7E
 115+ C1A8 12 46 72 32
 115+ C1AC 78 1A 32 78
 115+ C1B0 1B 77 12 14
 115+ C1B4 7D 0A 78 12
 116+ C1B8 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 116+ C1BC FF 83 51 91
 116+ C1C0 62 1F 91 61
 116+ C1C4 85 67 19 91
 116+ C1C8 62 96 6E 16
 116+ C1CC 96 6D 9A 69
 116+ C1D0 12 96 6E 92
 116+ C1D4 78 1A 91 78
 116+ C1D8 8C 7E 12 93
 116+ C1DC 78 9F 7E 12
 117+ C1E0 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 117+ C1E4 FF A1 66 AB
 117+ C1E8 6C 1F A0 66
 117+ C1EC AF 7F 19 AF
 117+ C1F0 7C C8 7A 16
 117+ C1F4 C8 79 DF 78
 117+ C1F8 12 E0 78 E1
 117+ C1FC 7F 1A E0 77
 117+ C200 F5 74 12 F6
 117+ C204 75 FE 7B 12
 118+ C208 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 118+ C20C FF 91 49 9E
 118+ C210 48 1F 9F 48
 118+ C214 B3 40 19 9F
 118+ C218 49 B9 55 16
 118+ C21C B6 54 C5 4C
 118+ C220 12 C3 4B CF
 118+ C224 4F 1A CE 4F
 118+ C228 F5 3F 12 CE
 118+ C22C 50 F5 69 12
 119+ C230
 120+ C230              ; Draw line at hl for b lines
 121+ C230 E5 C5        DrawLighningLine:       push    hl,,bc
 122+ C232 4E                                   ld      c,(hl)
 123+ C233 23                                   inc     hl
 124+ C234 46                                   ld      b,(hl)
 125+ C235 23                                   inc     hl
 126+ C236 5E                                   ld      e,(hl)
 127+ C237 23                                   inc     hl
 128+ C238 56                                   ld      d,(hl)
 129+ C239 23                                   inc     hl
 130+ C23A 7E                                   ld      a,(hl)          ; colour
 131+ C23B CD 33 E6                             call    l2_draw_diagonal
 132+ C23E C1 E1                                pop     hl,,bc
 133+ C240 3E 05                                ld      a,5
 134+ C242 ED 31                                add     hl,a
 135+ C244 10 EA                                djnz    DrawLighningLine
 136+ C246 C9                                   ret
 137+ C247
 138+ C247              ;Loop though all lines
 139+ C247              ;   60$% chance of drawing a line, call draw line
 140+ C247              ;   go to next line
 141+ C247              ;repeat
 142+ C247 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 143+ C249 21 18 C1                             ld      hl,LightningLines
 144+ C24C                                      MMUSelectLayer2
 144+ C24C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 145+ C250                                      ;break
 146+ C250              ; above here select which lines table we will use
 147+ C250 C5 E5        .LineLoop:              push    bc,,hl
 148+ C252 CD 35 A3                             call    doRandom
 149+ C255 FE 1E                                cp      30
 150+ C257 30 0C                                jr      nc,.NextLine
 151+ C259 CD 35 A3                             call    doRandom
 152+ C25C E6 07                                and     $07
 153+ C25E 3C                                   inc     a
 154+ C25F 47                                   ld      b,a
 155+ C260 E1                                   pop     hl
 156+ C261 E5                                   push    hl
 157+ C262 CD 30 C2                             call    DrawLighningLine
 158+ C265 E1 C1        .NextLine:              pop     bc,,hl
 159+ C267 16 08                                ld      d,8
 160+ C269 1E 05                                ld      e,5
 161+ C26B ED 30                                mul
 162+ C26D 19                                   add     hl,de
 163+ C26E 10 E0                                djnz    .LineLoop
 164+ C270 3A 86 9E                             ld      a,(HyperCircle)
 165+ C273 57                                   ld      d,a
 166+ C274 01 80 40                             ld      bc, $4080
 167+ C277                                      ;break
 168+ C277 1E 00                                ld      e,$00
 169+ C279 CD C4 E9                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 170+ C27C 01 80 40                             ld      bc, $4080
 171+ C27F 3A 86 9E                             ld      a,(HyperCircle)
 172+ C282 3C                                   inc     a
 173+ C283 57                                   ld      d,a
 174+ C284 1E FF                                ld      e,$FF
 175+ C286 CD 80 E7                             call    l2_draw_circle
 176+ C289 3A 86 9E                             ld      a,(HyperCircle)
 177+ C28C 3C                                   inc     a
 178+ C28D 3C                                   inc     a
 179+ C28E FE 40                                cp      64
 180+ C290 D0                                   ret     nc
 181+ C291 32 86 9E                             ld      (HyperCircle),a
 182+ C294                                      SetCarryFlag
 182+ C294 37          >                        scf
 183+ C295 C9                                   ret
 184+ C296
 185+ C296
 186+ C296              draw_hyperspace:        MMUSelectLayer1
 186+ C296 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 187+ C29A CD 80 E0                             call    l1_cls
 188+ C29D CD 9A E0                             call    l1_attr_cls
 189+ C2A0                                      MMUSelectLayer2
 189+ C2A0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 190+ C2A4 CD 03 E0                             call     asm_l2_double_buffer_on
 191+ C2A7                                      MMUSelectSpriteBank
 191+ C2A7 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 192+ C2AB CD A4 E4                             call    sprite_cls_cursors
 193+ C2AE                                      MMUSelectConsoleBank
 193+ C2AE ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 194+ C2B2 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 195+ C2B5 11 00 E0                             ld          de,ConsoleImageData
 196+ C2B8 01 00 08                             ld          bc, ScreenL1BottomLen
 197+ C2BB CD AC 99                             call        memcopy_dma
 198+ C2BE 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 199+ C2C1 11 00 E8                             ld          de,ConsoleAttributes
 200+ C2C4 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 201+ C2C7 CD AC 99                             call        memcopy_dma
 202+ C2CA CD 86 97                             call        InitialiseHyperStars
 203+ C2CD AF                                   xor         a
 204+ C2CE 32 CC 9D                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 205+ C2D1 3E 02                                ld          a,2
 206+ C2D3 32 86 9E                             ld          (HyperCircle),a
 207+ C2D6 3E FC                                ld          a,$FC
 208+ C2D8 32 CC 9D                             ld          (DockedFlag),a
 209+ C2DB C9                                   ret
 210+ C2DC
 211+ C2DC
 212+ C2DC              loop_hyperspace
 213+ C2DC
 214+ C2DC              dampenRate:             equ     $04
 215+ C2DC 04           dampenRcounter:         DB      dampenRate
 216+ C2DD 04           dampenPcounter:         DB      dampenRate
 217+ C2DE AF           input_front_view:       xor         a
 218+ C2DF 2A 18 9A                             ld      hl,(addr_Pressed_Accellerate)
 219+ C2E2 7E                                   ld      a,(hl)
 220+ C2E3                                      JumpIfAIsZero     .TestDecellerate
 220+ C2E3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 220+ C2E4 CA 00 C3    >                        jp	    z, .TestDecellerate
 221+ C2E7 3A B8 9D                             ld      a,(SHIPMAXSPEED)
 222+ C2EA 57                                   ld      d,a
 223+ C2EB 3A B9 9D                             ld      a,(DELTA)
 224+ C2EE                                      JumpIfAGTENusng d,.TestDecellerate
 224+ C2EE BA          >                        cp     d
 224+ C2EF D2 00 C3    >                        jp		nc,.TestDecellerate
 225+ C2F2 3C                                   inc     a
 226+ C2F3 32 B9 9D                             ld      (DELTA),a
 227+ C2F6 2A BA 9D                             ld      hl,(DELT4Lo)
 228+ C2F9 ED 34 04 00                          add     hl,4
 229+ C2FD 22 BA 9D                             ld      (DELT4Lo),hl
 230+ C300 2A 1A 9A     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 231+ C303 7E                                   ld      a,(hl)
 232+ C304                                      JumpIfAIsZero   .TestLeftPressed
 232+ C304 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 232+ C305 CA 1D C3    >                        jp	    z, .TestLeftPressed
 233+ C308 3A B9 9D                             ld      a,(DELTA)
 234+ C30B                                      JumpIfAIsZero   .TestLeftPressed
 234+ C30B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C30C CA 1D C3    >                        jp	    z, .TestLeftPressed
 235+ C30F 3D                                   dec     a
 236+ C310 32 B9 9D                             ld      (DELTA),a
 237+ C313 2A BA 9D                             ld      hl,(DELT4Lo)
 238+ C316 2B                                   dec     hl
 239+ C317 2B                                   dec     hl
 240+ C318 2B                                   dec     hl
 241+ C319 2B                                   dec     hl
 242+ C31A 22 BA 9D                             ld      (DELT4Lo),hl
 243+ C31D 2A 10 9A     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 244+ C320 7E                                   ld      a,(hl)
 245+ C321                                      JumpIfAIsZero   .TestRightPressed
 245+ C321 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 245+ C322 CA 38 C3    >                        jp	    z, .TestRightPressed
 246+ C325 3A D1 9C                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 247+ C328 21 D8 9C                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 248+ C32B BE                                   cp      (hl)
 249+ C32C 28 0A                                jr      z,.TestRightPressed
 250+ C32E                                      ;break
 251+ C32E 3D                                   dec     a                                   ; increase joystick roll
 252+ C32F 32 D1 9C                             ld      (JSTX),a
 253+ C332 CD 10 C0                             call    draw_front_calc_alpha
 254+ C335 C3 6D C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 255+ C338 2A 12 9A     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 256+ C33B 7E                                   ld      a,(hl)
 257+ C33C                                      JumpIfAIsZero   .DampenRoll
 257+ C33C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 257+ C33D CA 53 C3    >                        jp	    z, .DampenRoll
 258+ C340 3A D1 9C                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 259+ C343 21 D7 9C                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 260+ C346 BE                                   cp      (hl)
 261+ C347 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 262+ C349                                      ;break
 263+ C349 3C                                   inc     a                                   ; increase joystick roll
 264+ C34A 32 D1 9C     .UpdateAlphRoll:        ld      (JSTX),a
 265+ C34D CD 10 C0                             call    draw_front_calc_alpha
 266+ C350 C3 6D C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 267+ C353 21 DC C2     .DampenRoll:            ld      hl,dampenRcounter
 268+ C356 35                                   dec     (hl)
 269+ C357 20 14                                jr      nz,.TestDivePressed
 270+ C359 3E 04                                ld      a,dampenRate
 271+ C35B 77                                   ld      (hl),a
 272+ C35C 3A D1 9C                             ld      a,(JSTX)
 273+ C35F FE 00                                cp      0
 274+ C361 28 0A                                jr      z, .TestDivePressed
 275+ C363 CB 7F                                bit     7,a
 276+ C365 28 03                                jr      z,.PosRollDampen
 277+ C367 3C           .NegRollDampen:         inc     a
 278+ C368 18 01                                jr      .ApplyRollDampen
 279+ C36A 3D           .PosRollDampen:         dec     a
 280+ C36B 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 281+ C36D              ; Dive and Climb input
 282+ C36D 2A 14 9A     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 283+ C370 7E                                   ld      a,(hl)
 284+ C371                                      JumpIfAIsZero   .TestClimbPressed
 284+ C371 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 284+ C372 CA 88 C3    >                        jp	    z, .TestClimbPressed
 285+ C375 3A C6 9C                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 286+ C378 21 CB 9C                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 287+ C37B BE                                   cp      (hl)
 288+ C37C 28 0A                                jr      z,.TestClimbPressed
 289+ C37E                                      ;break
 290+ C37E 3D                                   dec     a                                   ; increase joystick roll
 291+ C37F 32 C6 9C                             ld      (JSTY),a
 292+ C382 CD 3D C0                             call    draw_front_calc_beta
 293+ C385 C3 BD C3                             jp      .ForwardCursorKeysDone
 294+ C388 2A 16 9A     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 295+ C38B 7E                                   ld      a,(hl)
 296+ C38C                                      JumpIfAIsZero   .DampenPitch
 296+ C38C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 296+ C38D CA A3 C3    >                        jp	    z, .DampenPitch
 297+ C390 3A C6 9C                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 298+ C393 21 CA 9C                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 299+ C396 BE                                   cp      (hl)
 300+ C397 28 24                                jr      z,.ForwardCursorKeysDone
 301+ C399 3C                                   inc     a                                   ; increase joystick roll
 302+ C39A 32 C6 9C     .UpdateBetaPitch:       ld      (JSTY),a
 303+ C39D CD 3D C0                             call    draw_front_calc_beta
 304+ C3A0 C3 BD C3                             jp      .ForwardCursorKeysDone
 305+ C3A3 21 DD C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 306+ C3A6 35                                   dec     (hl)
 307+ C3A7 20 14                                jr      nz,.ForwardCursorKeysDone
 308+ C3A9 3E 04                                ld      a,dampenRate
 309+ C3AB 77                                   ld      (hl),a
 310+ C3AC 3A C6 9C                             ld      a,(JSTY)
 311+ C3AF FE 00                                cp      0
 312+ C3B1 28 0A                                jr      z,.ForwardCursorKeysDone
 313+ C3B3 CB 7F                                bit     7,a
 314+ C3B5 28 03                                jr      z,.PosPitchDampen
 315+ C3B7 3C           .NegPitchDampen:        inc     a
 316+ C3B8 18 01                                jr      .ApplyPitchDampen
 317+ C3BA 3D           .PosPitchDampen:        dec     a
 318+ C3BB 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 319+ C3BD              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 320+ C3BD              ; be in flight and they have to force a forward view when hyperspace is pressed
 321+ C3BD              ; We won't do galatic here, but for other views force to forward view
 322+ C3BD 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 323+ C3BF CD EB 9A                             call    is_key_pressed
 324+ C3C2 20 48                                jr      nz,.NotHyperspace
 325+ C3C4              ; If we are in hyperspace countdown then test for hyperspace
 326+ C3C4 2A 83 9E                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 327+ C3C7 7C                                   ld      a,h                                 ; hyperspace
 328+ C3C8 B5                                   or      l                                   ; .
 329+ C3C9 20 41                                jr      nz,.CancelHyperspace                ; .
 330+ C3CB              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 331+ C3CB ED 5B C5 9E                          ld      de,(PresentSystemX)
 332+ C3CF 2A C7 9E                             ld      hl,(TargetSystemX)
 333+ C3D2 CD 55 B2                             call    compare16HLDE
 334+ C3D5 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 335+ C3D7 3A B2 9E                             ld      a,(Galaxy)
 336+ C3DA                                      MMUSelectGalaxyA
 336+ C3DA ED 92 57    >                     nextreg GalaxyDataMMU,       a
 337+ C3DD ED 4B C7 9E                          ld      bc,(TargetSystemX)
 338+ C3E1 CD BB FA                             call    galaxy_name_at_bc
 339+ C3E4 FE 00                                cp      0
 340+ C3E6 28 24                                jr      z,.NotHyperspace
 341+ C3E8              ; check fuel is sufficient
 342+ C3E8 ED 4B C5 9E                          ld      bc,(PresentSystemX)
 343+ C3EC ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 344+ C3F0 ED 4B C7 9E                          ld      bc,(TargetSystemX)
 345+ C3F4 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 346+ C3F8 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 347+ C3FB 7C                                   ld      a,h
 348+ C3FC A7                                   and     a
 349+ C3FD 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 350+ C3FF 3A FE A2                             ld      a,(Fuel)
 351+ C402                                      JumpIfALTNusng    l, .InsufficientFuel
 351+ C402 BD          >                        cp      l
 351+ C403 DA 0C C4    >                        jp		c, .InsufficientFuel
 352+ C406              ; set up timer countdown
 353+ C406 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 354+ C409 22 83 9E                             ld      (InnerHyperCount),hl                ; .
 355+ C40C              .CancelHyperspace
 356+ C40C              .NoTargetSelected
 357+ C40C              .InsufficientFuel
 358+ C40C              .NotHyperspace:
 359+ C40C CD EB A1     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 360+ C40F 28 44                                jr      z,.CheckTargetting
 361+ C411              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 361+ C411 3E FF       >                        ld      a,$FF
 361+ C413 32 AA 9E    >                        ld      (FireLaserPressed),a
 362+ C416 3A D1 A0                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 363+ C419                                      JumpIfAIsZero .BeamType                     ; .
 363+ C419 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 363+ C41A CA 47 C4    >                        jp	    z, .BeamType
 364+ C41D 47                                   ld      b,a                                 ; and not run out of pulses
 365+ C41E 3A D8 A0                             ld      a,(CurrLaserPulseRateCount)         ;
 366+ C421 3A D5 A0                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 367+ C424                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 367+ C424 B8          >                        cp     b
 367+ C425 CA 55 C4    >                        jp      z,.PulseLimitReached
 368+ C428 21 D6 A0                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 369+ C42B B6                                   or      (hl)                                ;
 370+ C42C 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 371+ C42D B6                                   or      (hl)                                ;    .
 372+ C42E 20 25                                jr      nz, .CheckTargetting                ;    .
 373+ C430 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 374+ C432 CD DE 9A                             call    is_key_up_state                     ;       .
 375+ C435 28 1E                                jr      z,.CheckTargetting                  ;       .
 376+ C437 3A D8 A0     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 377+ C43A 3C                                   inc     a                                   ;            .
 378+ C43B 32 D8 A0     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 379+ C43E                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 379+ C43E 3A D2 A0    >                        ld       a,(CurrLaserPulseOnTime)
 379+ C441 32 D5 A0    >                        ld       (CurrLaserPulseOnCount),a
 380+ C444                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 381+ C444                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 382+ C444 C3 55 C4                             jp      .CheckTargetting
 383+ C447 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 384+ C449 CD DE 9A                             call    is_key_up_state                     ;                   .
 385+ C44C 28 07                                jr      z,.CheckTargetting                  ;                   .
 386+ C44E                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 386+ C44E AF          >                        xor     a
 386+ C44F 32 AA 9E    >                        ld      (FireLaserPressed),a
 387+ C452 C3 55 C4                             jp      .CheckTargetting
 388+ C455              .PulseLimitReached:     ;ZeroA                                       ;
 389+ C455                                      ;ld      (CurrLaserPulseRateCount),a         ;
 390+ C455                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 391+ C455              ; . Here we check to see if the target lock has been pressed
 392+ C455 CD E6 9B     .CheckTargetting:       call    TargetMissileTest
 393+ C458 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 394+ C45A CD EB 9A                             call    is_key_pressed
 395+ C45D 20 13                                jr      nz,.NotMissileLaunch
 396+ C45F                                      AnyMissilesLeft
 396+ C45F 3A 28 9E    >                        ld      a,(NbrMissiles)
 396+ C462 A7          >                        and     a
 397+ C463 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 398+ C465 CD 43 A2                             call    IsMissileLockedOn
 399+ C468 28 08                                jr      z,.MissileNotLocked
 400+ C46A              .MissileLaunch:         SetMissileLaunch
 400+ C46A 3A BD A0    >                        ld      a,(MissileTargettingFlag)
 400+ C46D E6 0F       >                        and     $0F
 400+ C46F 32 BD A0    >                        ld      (MissileTargettingFlag),a
 401+ C472              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 402+ C472              .NotMissileLaunch:
 403+ C472 C9                                   ret
 404+ C473
 405+ C473
 406+ C473
 407+ C473
 408+ C473
 409+ C473
 410+ C473
# file closed: ./Views/Front_View.asm
1449  C473              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1450  C473                  SLOT    MenuStatusAddr
1451  C473                  PAGE    BankMenuStatus
1452  C473                  ORG     MenuStatusAddr
1453  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 98 BB  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 BE A0  						DW $0290,CommanderName
   5+ C018 08 0B AC BB  						DW $0B08,txt_present_system
   6+ C01C 08 13 BF BB  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B D2 BB  						DW $1B08,txt_condition
   8+ C024 08 23 E0 BB  						DW $2308,txt_fuel
   9+ C028 08 2B EE BB  						DW $2B08,txt_cash
  10+ C02C 08 33 FC BB  						DW $3308,txt_legal_status
  11+ C030 08 3B 0A BC  						DW $3B08,txt_rating
  12+ C034 08 4B 18 BC  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A FC A2     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A FA A2                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A B2 9E     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD 86 99                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 164+ CDB0 AF                                   xor     a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 169+ CDB7 DD 21 1B A3                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 170+ CDBB FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6 FE 00                                cp      0
 175+ CDC8 28 21                                jr      z,.DoneFittedCheck
 176+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 176+ CDCE E5 C5
 177+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 178+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 179+ CDD5 ED 30                                mul
 180+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 181+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 182+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 183+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 183+ CDE3 E1
 184+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 185+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 186+ CDE9 D1                                   pop     de
 187+ CDEA 0C                                   inc     c
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ CDF5              draw_STAT_maintext:    	InitNoDoubleBuffer
 195+ CDF5             >                            MMUSelectLayer1
 195+ CDF5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 195+ CDF9 CD 80 E0    >                            call	l1_cls
 195+ CDFC 3E 07       >                            ld		a,7
 195+ CDFE CD 9B E0    >                            call	l1_attr_cls_to_a
 195+ CE01             >                            MMUSelectLayer2
 195+ CE01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ CE05 CD 09 E0    >                            call    asm_l2_double_buffer_off
 195+ CE08 CD F3 E0    >                            call	l2_cls	; Get some space
 195+ CE0B             >                            MMUSelectSpriteBank
 195+ CE0B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 195+ CE0F CD A4 E4    >                            call    sprite_cls_cursors
 196+ CE12 01 01 01     .Drawbox:               ld		bc,$0101
 197+ CE15 11 FD BE                             ld		de,$BEFD
 198+ CE18 3E C0                                ld		a,$C0
 199+ CE1A                                      MMUSelectLayer2
 199+ CE1A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 200+ CE1E CD 20 E2                             call	l2_draw_box
 201+ CE21 06 0A                                ld		b,10
 202+ CE23 21 10 C0                             ld		hl,status_boiler_text
 203+ CE26 CD 92 CC                             call	STAT_print_boiler_text
 204+ CE29 3A B2 9E     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 205+ CE2C                                      MMUSelectGalaxyA
 205+ CE2C ED 92 57    >                     nextreg GalaxyDataMMU,       a
 206+ CE2F ED 4B C5 9E                          ld      bc, (PresentSystemX)
 207+ CE33 CD BB FA                             call    galaxy_name_at_bc
 208+ CE36 11 4B CC                             ld      de,stat_present_name
 209+ CE39 CD 89 CC                             call    stat_copy_to_name
 209+ CE3C
 210+ CE3C 01 98 0B                             ld      bc,present_position
 211+ CE3F 21 4B CC                             ld      hl,stat_present_name
 212+ CE42                                      MMUSelectLayer2
 212+ CE42 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 213+ CE46 1E FF                                ld      e,txt_status_colour
 214+ CE48 CD 99 E1                             call    l2_print_at
 215+ CE4B 3A B2 9E     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 216+ CE4E                                      MMUSelectGalaxyA
 216+ CE4E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 217+ CE51 ED 4B C7 9E                          ld      bc, (TargetSystemX)
 218+ CE55 CD BB FA                             call    galaxy_name_at_bc
 219+ CE58 11 6A CC                             ld      de,stat_target_name
 220+ CE5B CD 89 CC                             call    stat_copy_to_name
 220+ CE5E
 221+ CE5E 01 98 13                             ld      bc,hyperspace_position
 222+ CE61 21 6A CC                             ld      hl,stat_target_name
 223+ CE64                                      MMUSelectLayer2
 223+ CE64 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ CE68 1E FF                                ld      e,txt_status_colour
 225+ CE6A CD 99 E1                             call    l2_print_at
 226+ CE6D CD 26 CF     .StatusText:	        call	get_cmdr_condition
 227+ CE70 21 46 A5                             ld		hl, ConditionNameIdx
 228+ CE73 CD 48 A6                             call	getTableText
 229+ CE76 01 70 1B                             ld		bc,condition_position
 230+ CE79                                      MMUSelectLayer2
 230+ CE79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 231+ CE7D 1E FF                                ld      e,txt_status_colour
 232+ CE7F CD 99 E1                             call    l2_print_at
 233+ CE82 CD 75 BC     .DisplayFuel:           call	GetFuelLevel
 234+ CE85 21 23 BC                             ld		hl, txt_fuel_level
 235+ CE88 7E                                   ld		a,(hl)
 236+ CE89 FE 30                                cp		'0'
 237+ CE8B 20 01                                jr		nz,.PrintFuel
 238+ CE8D 23           .SkipLeadingZero:	    inc		hl
 239+ CE8E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 240+ CE91                                      MMUSelectLayer2
 240+ CE91 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 241+ CE95 1E FF                                ld      e,txt_status_colour
 242+ CE97 CD 99 E1                             call    l2_print_at
 243+ CE9A CD 55 CD     .DisplayCash:           call	STAT_GetCash
 244+ CE9D 01 70 2B                             ld		bc,cash_position
 245+ CEA0 21 3D CC                             ld		hl,STAT_cash_amount
 246+ CEA3                                      MMUSelectLayer2
 246+ CEA3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 247+ CEA7 1E FF                                ld      e,txt_status_colour
 248+ CEA9 CD 99 E1                             call    l2_print_at
 249+ CEAC 3A 29 9E     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 250+ CEAF FE 00                                cp		0
 251+ CEB1 20 05                                jr		nz,.Naughty
 252+ CEB3 21 27 A7                             ld		hl,WordClean
 253+ CEB6 18 0C                                jr		.DisplayLegalStatus
 254+ CEB8 FE 32        .Naughty:               cp		50
 255+ CEBA 38 05                                jr		c,.JustOffender
 256+ CEBC 21 36 A7     .VeryNaughty:           ld		hl,WordFugitive
 257+ CEBF 18 03                                jr		.DisplayLegalStatus
 258+ CEC1 21 2D A7     .JustOffender:          ld		hl,WordOffender
 259+ CEC4 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 260+ CEC7                                      MMUSelectLayer2
 260+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 261+ CECB 1E FF                                ld      e,txt_status_colour
 262+ CECD CD 99 E1                             call    l2_print_at
 263+ CED0 ED 5B 3C 9E  .DisplayRating:         ld		de,(KillTally)
 264+ CED4 CD 53 A6                             call	getRankIndex
 265+ CED7 21 32 A6                             ld		hl, RankingNameIdx
 266+ CEDA CD 48 A6                             call	getTableText
 267+ CEDD 01 70 3B                             ld		bc,rank_position
 268+ CEE0                                      MMUSelectLayer2
 268+ CEE0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 269+ CEE4 1E FF                                ld      e,txt_status_colour
 270+ CEE6 CD 99 E1                             call    l2_print_at
 271+ CEE9 C9                                   ret
 272+ CEEA
 273+ CEEA
 274+ CEEA              draw_STAT_items:        MMUSelectLayer1
 274+ CEEA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 275+ CEEE CD 80 E0                             call    l1_cls
 276+ CEF1                                      ; add in all the status stuff later
 277+ CEF1 3A 3B C0                             ld      a,(STAT_current_topItem)
 278+ CEF4 16 18                                ld      d,STAT_buffer_row_len
 279+ CEF6 5F                                   ld      e,a
 280+ CEF7 ED 30                                mul
 281+ CEF9 21 3D C0                             ld      hl,STAT_display_buffer
 282+ CEFC 19                                   add     hl,de
 283+ CEFD 3A 3B C0                             ld      a,(STAT_current_topItem)
 284+ CF00 47                                   ld      b,a
 285+ CF01 3A 3C C0                             ld      a,(STAT_current_end)
 286+ CF04 90                                   sub     b
 287+ CF05                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 287+ CF05 FE 0A       >                        cp      STAT_eqip_window_len
 287+ CF07 DA 0E CF    >                        jp		c, .FillScreen
 288+ CF0A 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 289+ CF0C 18 01                                jr      .ReadyToPrint
 290+ CF0E 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 291+ CF0F 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 292+ CF12 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 293+ CF15 CD C8 E0                             call    l1_print_at
 293+ CF18
 294+ CF18 C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 295+ CF1A 11 18 00                             ld      de,STAT_buffer_row_len
 296+ CF1D 19                                   add     hl,de
 297+ CF1E D1                                   pop     de                          ; get output row back
 298+ CF1F 3E 08                                ld      a,8
 299+ CF21 82                                   add     a,d
 300+ CF22 57                                   ld      d,a
 301+ CF23 10 ED                                djnz    .DrawARow
 302+ CF25 C9                                   ret
 303+ CF26
 304+ CF26              ;----------------------------------------------------------------------------------------------------------------------------------
 305+ CF26
 306+ CF26 3A CC 9D     get_cmdr_condition:     ld			a,(DockedFlag)
 307+ CF29 FE FF                                cp			StatePlayerDocked
 308+ CF2B 28 17                                jr			z,.PlayerIsDocked
 309+ CF2D              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 309+ CF2D 3A AB 9E    >                        ld      a,(SpaceStationSafeZone)
 309+ CF30 A7          >                        and     a
 309+ CF31 C8          >                        ret     z
 310+ CF32 CD B7 A2                             call        AreShipsPresent
 311+ CF35 38 03                                jr          c,.NoShipsAround
 312+ CF37 3E 01                                ld          a,1
 313+ CF39 C9                                   ret
 314+ CF3A 3A BA A0     .NoShipsAround:         ld			a,(PlayerEnergy)
 315+ CF3D FE 80                                cp			$80
 316+ CF3F 3E 01                                ld          a,1
 317+ CF41 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 318+ CF43 C9                                   ret
 319+ CF44 AF           .PlayerIsDocked:        xor			a
 320+ CF45 C9                                   ret
 321+ CF46
 322+ CF46              ;;;PrintEquipment:         ld		a,(hl)
 323+ CF46              ;;;                        cp		0
 324+ CF46              ;;;                        ret		z
 325+ CF46              ;;;                        ld		a,b
 326+ CF46              ;;;PrintEquipmentDirect:	call	expandTokenToString
 327+ CF46              ;;;                        ld		hl,TextBuffer
 328+ CF46              ;;;                        ld		de,(equipment_cursor)
 329+ CF46              ;;;                        call	l1_print_at
 330+ CF46              ;;;                        ld		bc,(equipment_cursor)
 331+ CF46              ;;;                        ld		a,b
 332+ CF46              ;;;                        add		a,8
 333+ CF46              ;;;                        ld		b,a
 334+ CF46              ;;;                        ld		(equipment_cursor),bc
 335+ CF46              ;;;                        cp		equipmax_row
 336+ CF46              ;;;                        jr		c,.SkipColUpdate
 337+ CF46              ;;;.ColUpdate:             ld		hl,equipment_position2
 338+ CF46              ;;;                        ld		(equipment_cursor),hl
 339+ CF46              ;;;                        ret
 340+ CF46              ;;;.SkipColUpdate:	        ld		a,b
 341+ CF46              ;;;                        ld		(equipment_cursor+1), a
 342+ CF46              ;;;                        ret
 343+ CF46
 344+ CF46              draw_status_menu:       InitNoDoubleBuffer
 344+ CF46             >                            MMUSelectLayer1
 344+ CF46 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ CF4A CD 80 E0    >                            call	l1_cls
 344+ CF4D 3E 07       >                            ld		a,7
 344+ CF4F CD 9B E0    >                            call	l1_attr_cls_to_a
 344+ CF52             >                            MMUSelectLayer2
 344+ CF52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 344+ CF56 CD 09 E0    >                            call    asm_l2_double_buffer_off
 344+ CF59 CD F3 E0    >                            call	l2_cls	; Get some space
 344+ CF5C             >                            MMUSelectSpriteBank
 344+ CF5C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ CF60 CD A4 E4    >                            call    sprite_cls_cursors
 345+ CF63 3E 08                                ld		a,8
 346+ CF65 32 C8 9D                             ld		(MenuIdMax),a
 347+ CF68 01 01 01     .Drawbox:               ld		bc,$0101
 348+ CF6B 11 FD BE                             ld		de,$BEFD
 349+ CF6E 3E C0                                ld		a,$C0
 350+ CF70                                      MMUSelectLayer2
 350+ CF70 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 351+ CF74 CD 20 E2                             call	l2_draw_box
 352+ CF77 01 01 0A                             ld		bc,$0A01
 353+ CF7A 11 C0 FE                             ld		de,$FEC0
 354+ CF7D CD 8A E2                             call	l2_draw_horz_line
 355+ CF80 CD 97 CD     .equipment              call    STAT_buffer_list
 356+ CF83 CD EA CE                             call    draw_STAT_items
 357+ CF86 CD F5 CD                             call    draw_STAT_maintext
 358+ CF89 C9                                   ret
 359+ CF8A
 360+ CF8A              ;----------------------------------------------------------------------------------------------------------------------------------
 361+ CF8A              ; Handles all the input whilst in the market menu
 362+ CF8A 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 363+ CF8C CD EB 9A                             call    is_key_pressed
 364+ CF8F CC 9B CF                             call    z,STAT_UpPressed
 365+ CF92 3E 4C                                ld      a,c_Pressed_CursorDown
 366+ CF94 CD EB 9A                             call    is_key_pressed
 367+ CF97 CC AD CF                             call    z,STAT_DownPressed
 368+ CF9A C9                                   ret
 369+ CF9B
 370+ CF9B              ;----------------------------------------------------------------------------------------------------------------------------------
 371+ CF9B AF           STAT_UpPressed:         xor     a
 372+ CF9C 32 3A C0                             ld      (STAT_selected_row),a
 373+ CF9F 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 374+ CFA2 FE 00                                cp      0
 375+ CFA4 C8                                   ret     z
 376+ CFA5 3D                                   dec     a           ; chjange later to buffering step back 1
 377+ CFA6 32 3B C0                             ld      (STAT_current_topItem),a
 378+ CFA9 CD EA CE                             call    draw_STAT_items
 379+ CFAC C9                                   ret
 380+ CFAD              ;----------------------------------------------------------------------------------------------------------------------------------
 381+ CFAD 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 382+ CFAF 32 3A C0                             ld      (STAT_selected_row),a
 383+ CFB2 3A 3C C0                             ld      a,(STAT_current_end)
 384+ CFB5 47                                   ld      b,a                             ; This check is if the current list is < one screen
 385+ CFB6 05                                   dec     b
 386+ CFB7 3A 3A C0                             ld      a,(STAT_selected_row)
 387+ CFBA B8                                   cp      b
 388+ CFBB C8                                   ret     z
 389+ CFBC FE 09                                cp      STAT_eqip_window_len-1
 390+ CFBE 28 05                                jr      z, .check_scroll_down
 391+ CFC0 21 3A C0                             ld      hl,STAT_selected_row
 392+ CFC3 34                                   inc     (hl)
 393+ CFC4 C9                                   ret
 394+ CFC5 47           .check_scroll_down:     ld      b,a
 395+ CFC6 3A 3B C0                             ld      a,(STAT_current_topItem)
 396+ CFC9 80                                   add     b
 397+ CFCA 3C                                   inc     a
 398+ CFCB 21 3C C0                             ld      hl,STAT_current_end
 399+ CFCE                                      ReturnIfAGTEusng      (hl)
 399+ CFCE BE          >                        cp    (hl)
 399+ CFCF D0          >                        ret	 nc
 400+ CFD0 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 401+ CFD3 34                                   inc     (hl)
 402+ CFD4 CD EA CE                             call    draw_STAT_items
 403+ CFD7 C9                                   ret
 404+ CFD8
# file closed: ./Menus/status_menu.asm
1454  CFD8
1455  CFD8              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1456  CFD8
1457  CFD8                  SLOT    MenuEquipSAddr
1458  CFD8                  PAGE    BankMenuEquipS
1459  CFD8                  ORG     MenuEquipSAddr
1460  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 95 AB  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A FC A2     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A FA A2                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 86 99                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 09 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD F3 E0    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD A4 E4    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 C8 9D                             ld      (MenuIdMax),a
 380+ D40C 3A B2 9E     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B C5 9E                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD 20 E2                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 8A E2                             call	l2_draw_horz_line
 398+ D441 3A B2 9E     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 10 AB                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD EB 9A                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD EB 9A                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD EB 9A                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD EB 9A                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A B2 9E     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 12 AD                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 19 A3                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 11 A3     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD 12 AD                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A B2 9E     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 28 9E     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1 2A FC A2     .CheckCash:             ld      hl,(Cash+2)
 580+ D5B4 7C                                   ld      a,h
 581+ D5B5 B5                                   or      l
 582+ D5B6 20 0F                                jr      nz,.MoreThanRequired
 583+ D5B8 2A FA A2                             ld      hl,(Cash)
 584+ D5BB 7C                                   ld      a,h
 585+ D5BC FE 00                                cp      0
 586+ D5BE 20 07                                jr      nz,.MoreThanRequired
 587+ D5C0 DD 7E 02                             ld      a,(ix+2)
 588+ D5C3 BD                                   cp      l
 589+ D5C4 30 01                                jr      nc,.MoreThanRequired
 590+ D5C6 C9                                   ret                         ; Insufficient Funds
 591+ D5C7 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 592+ D5CA FE 00                                cp      0
 593+ D5CC 28 15                                jr      z,.MaxFuelOut
 594+ D5CE FE 01                                cp      1
 595+ D5D0 28 1B                                jr      z,.AddMissle
 596+ D5D2                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 596+ D5D2 FE 0A       >                        cp     EQ_FRONT_PULSE
 596+ D5D4 D2 F7 D5    >                        jp		nc,.AddLaser
 597+ D5D7 21 19 A3     .AddNormalItem:         ld      hl,EquipmentFitted
 598+ D5DA ED 31                                add     hl,a
 599+ D5DC 36 FF                                ld      (hl),EquipmentItemFitted
 600+ D5DE 3E 2A                                ld      a,"*"
 601+ D5E0 C3 3F D6                             jp      .AddedItem
 602+ D5E3              .MaxFuelOut:            MaxFuelMacro
 602+ D5E3 3E 46       >						ld		a,MaxFuelLevel
 602+ D5E5 32 FE A2    >						ld		(Fuel),a
 603+ D5E8 3E 2A                                ld      a,"*"
 604+ D5EA C3 3F D6                             jp      .AddedItem
 605+ D5ED 21 28 9E     .AddMissle:             ld      hl,NbrMissiles
 606+ D5F0 34                                   inc     (hl)
 607+ D5F1 7E                                   ld      a,(hl)
 608+ D5F2 C6 30                                add     "0"
 609+ D5F4 C3 3F D6                             jp      .AddedItem
 610+ D5F7 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 611+ D5FA FE FF                                cp      $FF
 612+ D5FC 20 29                                jr      nz,.BuyLaser
 613+ D5FE              .LargeCargoBay: ;TODO
 614+ D5FE 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 615+ D5FF 21 D6 F4                             ld      hl,ShipEquipmentList
 616+ D602 16 10                                ld      d,ShipEquipTableRowLen
 617+ D604 5F                                   ld      e,a
 618+ D605 ED 30                                mul
 619+ D607 19                                   add     hl,de               ; now we have the row for the current laser
 620+ D608 3E 04                                ld      a,4
 621+ D60A ED 31                                add     hl,a
 622+ D60C 7E                                   ld      a,(hl)
 623+ D60D 5F                                   ld      e,a
 624+ D60E 23                                   inc     hl
 625+ D60F 7E                                   ld      a,(hl)
 626+ D610 57                                   ld      d,a
 627+ D611 E5 C5                                push    hl,,bc
 628+ D613 CD 12 AD                             call    addDEtoCash         ; refund laser value
 629+ D616 C1 E1                                pop     hl,,bc
 630+ D618 3E 02                                ld      a,2
 631+ D61A ED 31                                add     hl,a
 632+ D61C 3E 2D                                ld      a,"-"
 633+ D61E 77                                   ld      (hl),a              ; clear on ship equipment
 634+ D61F 21 19 A3                             ld      hl,EquipmentFitted
 635+ D622 79                                   ld      a,c                 ; get back current laser ref
 636+ D623 ED 31                                add     hl,a
 637+ D625 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 638+ D627 21 19 A3     .BuyLaser:              ld      hl,EquipmentFitted
 639+ D62A DD 7E 06                             ld      a,(ix+6)
 640+ D62D ED 31                                add     hl,a
 641+ D62F 36 FF                                ld      (hl),EquipmentItemFitted
 642+ D631 DD 7E 09                             ld      a,(ix+9)            ; get laser position
 643+ D634 21 11 A3                             ld      hl,LaserType
 644+ D637 ED 31                                add     hl,a
 645+ D639 DD 7E 08                             ld      a,(ix+8)            ; get type
 646+ D63C 77                                   ld      (hl),a
 647+ D63D 3E 2A                                ld      a,"*"
 648+ D63F DD 77 07     .AddedItem              ld      (ix+7),a
 649+ D642 DD 5E 04                             ld      e,(ix+4)
 650+ D645 DD 56 05                             ld      d,(ix+5)
 651+ D648 CD 25 AD                             call    subDEfromCash
 652+ D64B CD 5D D4                             call    eqip_refesh_buffer
 653+ D64E C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1461  D64F
1462  D64F
1463  D64F                  SLOT    LaunchShipAddr
1464  D64F                  PAGE    BankLaunchShip
1465  D64F                  ORG     LaunchShipAddr
1466  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 7D E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 7D E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 33 E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 33 E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD AC 99                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD AC 99                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD A4 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 03 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 9C E0                             ld      (l2_cls_byte),a
 136+ C196 CD BC E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 9C E0                             ld      (l2_cls_byte),a
 139+ C19E CD E8 E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 07 E1                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 9C E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD BC E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 9C E0                             ld      (l2_cls_byte),a
 149+ C1BB CD E8 E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A B8 9D    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 B9 9D    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 BA 9D >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 B9 9D    >                        ld      (DELTA),a
 160+ C1E9 32 BA 9D    >                        ld      (DELT4Lo),a
 160+ C1EC 32 BB 9D    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 CC 9D                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD A4 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 03 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 9C E0                             ld      (l2_cls_byte),a
 176+ C212 CD BC E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 9C E0                             ld      (l2_cls_byte),a
 179+ C21A CD E8 E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 07 E1                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 9C E0                             ld      (l2_cls_byte),a
 186+ C22F CD BC E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 9C E0                             ld      (l2_cls_byte),a
 189+ C237 CD E8 E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 B9 9D    >                        ld      (DELTA),a
 200+ C257 32 BA 9D    >                        ld      (DELT4Lo),a
 200+ C25A 32 BB 9D    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 CC 9D                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD 10 E2                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD 20 E2                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 CC 9D                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD 10 E2                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD 20 E2                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 7A 88    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1467  C2CD
1468  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1469  C2CD                  SLOT    UniverseBankAddr
1470  C2CD                  PAGE    BankUNIVDATA0
1471  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1472  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  12++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  13++C015              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  14++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  15++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
  16++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  17++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  18++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  19++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  20++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  21++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  22++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  23++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  24++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  25++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  26++C027              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  27++C027              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  28++C027 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  29++C028 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  30++C029 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  31++C02A 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  32++C02B              ; -- Metadata for ship to help with bank managment
  33++C02B 00           UBnKShipType                DB  0                       ; Ship id, use blue print for type class
  34++C02C 00           UbnKShipBankNbr             DB  0                       ; Present ship universe bank number
  35++C02D 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  36++C02E 00           UBnkShipModelNbr            DB  0                       ; Ship Id from ships table
  37++C02F              ; -- Ship AI data
  38++C02F 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  39++C030 00           UBnKMissileTarget           DB  0                       ; This is the bank number for the target from 0 to n if the missile is not hostile to us
  40++C031 00           UBnKspeed                   DB  0                       ; INWK +27
  41++C032 00           UBnKAccel                   DB  0                       ; INWK +28
  42++C033 00           UBnKRotXCounter             DB  0                       ; INWK +29
  43++C034 00           UBnKRotZCounter             DB  0                       ; INWK +30
  44++C035 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  45++C036              ; Flags work as follows:
  46++C036              ; 7 - Flag ship to be killed with debris
  47++C036              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  48++C036              ; 5 - Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  49++C036              ;     linger can be done by not erasing ship unit missile equeue handled
  50++C036              ; 4 -
  51++C036              ; 3 - Display state - Plot as a Dot
  52++C036              ; 2 - Nbr of Missiles bit 2
  53++C036              ; 1 - Nbr of Missiles bit 1
  54++C036              ; 0 - Nbr of Missiles bit 0
  55++C036 00           UBnkDrawAllFaces            DB  0
  56++C037 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57++C038 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  58++C039 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  59++C03A 00           UBnKEnergy                  DB  0                       ; INWK +35
  60++C03B              UBnKRuntimeSize             EQU $-UBnKShipType
  61++C03B              ; Flags work as follows:
  62++C03B              ;Bit	Description
  63++C03B              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  64++C03B              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  65++C03B              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  66++C03B              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  67++C03B              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  68++C03B              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  69++C03B              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  70++C03B              ;                       Hostile ships will attack us on sight; there are quite a few of them
  71++C03B              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  72++C03B              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  73++C03B              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  74++C03B              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  75++C03B              ;#4	Docking flag        * 0 = not docking * 1 = docking
  76++C03B              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  77++C03B              ;                       This flag is randomly set for traders when they are spawned
  78++C03B              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  79++C03B              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  80++C03B              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  81++C03B              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  82++C03B              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  83++C03B              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  84++C03B              ;                       Ships that are cops: Viper, Transporter
  85++C03B              ;#7	Scooped, docked, escape pod flag
  86++C03B              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  87++C03B              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  88++C03B              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  89++C03B
# file closed: ././Universe/Ships/AIRuntimeData.asm
  20+ C03B              ; moved to runtime asm
  21+ C03B              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  22+ C03B              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  23+ C03B
  24+ C03B              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  25+ C03B              ;                    [roofv x y z ] roof vector (up)
  26+ C03B              ;                    [sidev x y z ] side vector (right)
  27+ C03B              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C03B              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C03B 00           univRAT      DB  0               ; 99
  30+ C03C 00           univRAT2     DB  0               ; 9A
  31+ C03D 00           univRAT2Val  DB  0               ; 9A
  32+ C03E
  33+ C03E                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C03E              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C03E 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C040              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C040 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C042 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C044 00 00        UBnkTransmatRoofvX          DW 0
   7++C046              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C046 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C048 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C04A 00 00        UBnkTransmatNosevX          DW 0
  11++C04C              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C04C 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C04E 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C050 00 00        UbnkTransmatTransX          DW 0
  15++C052 00 00        UbnkTransmatTransY          DW 0
  16++C054 00 00        UbnkTransmatTransZ          DW 0
  17++C056              XX16                        equ UBnkTransmatSidev
  18++C056              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C056 00 00        UbnkTransInvRow0x0          DW 0
  20++C058 00 00        UbnkTransInvRow0x1          DW 0
  21++C05A 00 00        UbnkTransInvRow0x2          DW 0
  22++C05C 00 00        UbnkTransInvRow0x3          DW 0
  23++C05E 00 00        UbnkTransInvRow1y0          DW 0
  24++C060 00 00        UbnkTransInvRow1y1          DW 0
  25++C062 00 00        UbnkTransInvRow1y2          DW 0
  26++C064 00 00        UbnkTransInvRow1y3          DW 0
  27++C066 00 00        UbnkTransInvRow2z0          DW 0
  28++C068 00 00        UbnkTransInvRow2z1          DW 0
  29++C06A 00 00        UbnkTransInvRow2z2          DW 0
  30++C06C 00 00        UbnkTransInvRow2z3          DW 0
  31++C06E
  32++C06E              XX16Inv             equ UbnkTransInvRow0x0
  33++C06E
# file closed: ././Universe/Ships/XX16Vars.asm
  34+ C06E                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C06E              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C06E 00           UbnkProjxLo                 DB  0
   3++C06F 00           UbnkProjxHi                 DB  0
   4++C070 00           UbnkProjxSgn                DB  0
   5++C071              UbnkProjx                   EQU UbnkProjxLo
   6++C071 00           UbnkProjyLo                 DB  0
   7++C072 00           UbnkProjyHi                 DB  0
   8++C073 00           UbnkProjySgn                DB  0
   9++C074              UbnkProjy                   EQU UbnkProjyLo
  10++C074 00           UbnkProjzLo                 DB  0
  11++C075 00           UbnkProjzHi                 DB  0
  12++C076 00           UbnkProjzSgn                DB  0
  13++C077              UbnkProjz                   EQU UbnkProjzLo
  14++C077              XX25                        EQU UbnkProjxLo
  15++C077
# file closed: ././Universe/Ships/XX25Vars.asm
  35+ C077                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C077              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C077 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C078 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C079 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C07A              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C07A 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C07B 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C07C 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C07D              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C07D 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C07E 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C07F 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C080              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C080              XX18                        equ UBnkDrawCam0xLo
  15++C080
# file closed: ././Universe/Ships/XX18Vars.asm
  36+ C080
  37+ C080              ; Used to make 16 bit reads a little cleaner in source code
  38+ C080 00 00 00     UbnkZPoint                  DS  3
  39+ C083              UbnkZPointLo                equ UbnkZPoint
  40+ C083              UbnkZPointHi                equ UbnkZPoint+1
  41+ C083              UbnkZPointSign              equ UbnkZPoint+2
  42+ C083                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C083              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C083 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C084 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C085 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C086 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C087 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C088 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C089
   9++C089              XX15                        equ UBnkXScaled
  10++C089              XX15VecX                    equ XX15
  11++C089              XX15VecY                    equ XX15+1
  12++C089              XX15VecZ                    equ XX15+2
  13++C089              UbnkXPoint                  equ XX15
  14++C089              UbnkXPointLo                equ XX15+0
  15++C089              UbnkXPointHi                equ XX15+1
  16++C089              UbnkXPointSign              equ XX15+2
  17++C089              UbnkYPoint                  equ XX15+3
  18++C089              UbnkYPointLo                equ XX15+3
  19++C089              UbnkYPointHi                equ XX15+4
  20++C089              UbnkYPointSign              equ XX15+5
  21++C089              ; Repurposed XX15 pre clip plines
  22++C089              UbnkPreClipX1               equ XX15+0
  23++C089              UbnkPreClipY1               equ XX15+2
  24++C089              UbnkPreClipX2               equ XX15+4
  25++C089              UbnkPreClipY2               equ XX15+6
  26++C089              ; Repurposed XX15 post clip lines
  27++C089              UBnkNewX1                   equ XX15+0
  28++C089              UBnkNewY1                   equ XX15+1
  29++C089              UBnkNewX2                   equ XX15+2
  30++C089              UBnkNewY2                   equ XX15+3
  31++C089              ; Repurposed XX15
  32++C089              regXX15fx                   equ UBnkXScaled
  33++C089              regXX15fxSgn                equ UBnkXScaledSign
  34++C089              regXX15fy                   equ UBnkYScaled
  35++C089              regXX15fySgn                equ UBnkYScaledSign
  36++C089              regXX15fz                   equ UBnkZScaled
  37++C089              regXX15fzSgn                equ UBnkZScaledSign
  38++C089              ; Repurposed XX15
  39++C089              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C089              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C089              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C089              ; After clipping the coords are two 8 bit pairs
  43++C089              UBnkPoint1Clipped           equ UBnkXScaled
  44++C089              UBnkPoint2Clipped           equ UBnkYScaled
  45++C089              ; Repurposed XX15 when plotting lines
  46++C089              ; Repurposed XX15 before calling clip routine
  47++C089              UBnkX1                      equ XX15
  48++C089              UBnKx1Lo                    equ XX15
  49++C089              UBnKx1Hi                    equ XX15+1
  50++C089              UBnkY1                      equ XX15+2
  51++C089              UbnKy1Lo                    equ XX15+2
  52++C089              UBnkY1Hi                    equ XX15+3
  53++C089              UBnkX2                      equ XX15+4
  54++C089              UBnkX2Lo                    equ XX15+4
  55++C089              UBnkX2Hi                    equ XX15+5
  56++C089
# file closed: ././Universe/Ships/XX15Vars.asm
  43+ C089                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C089              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C089              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C089 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C08A 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C08B 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C08C 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C08D 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C08E 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C08F 00 00 00...  XX12Save                    DS  6
  10++C095 00 00 00...  XX12Save2                   DS  6
  11++C09B              XX12                        equ UBnkXX12xLo
  12++C09B              varXX12                     equ UBnkXX12xLo
  13++C09B              ; Repurposed XX12 when plotting lines
  14++C09B              UBnkY2                      equ XX12+0
  15++C09B              UbnKy2Lo                    equ XX12+0
  16++C09B              UBnkY2Hi                    equ XX12+1
  17++C09B              UBnkDeltaXLo                equ XX12+2
  18++C09B              UBnkDeltaXHi                equ XX12+3
  19++C09B              UBnkDeltaYLo                equ XX12+4
  20++C09B              UBnkDeltaYHi                equ XX12+5
  21++C09B              UbnkGradient                equ XX12+2
  22++C09B              UBnkTemp1                   equ XX12+2
  23++C09B              UBnkTemp1Lo                 equ XX12+2
  24++C09B              UBnkTemp1Hi                 equ XX12+3
  25++C09B              UBnkTemp2                   equ XX12+3
  26++C09B              UBnkTemp2Lo                 equ XX12+3
  27++C09B              UBnkTemp2Hi                 equ XX12+4
  28++C09B
# file closed: ././Universe/Ships/XX12Vars.asm
  44+ C09B
  45+ C09B
  46+ C09B              ; Post clipping the results are now 8 bit
  47+ C09B 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  48+ C09C 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  49+ C09D 00           UBnkProjectedY              DB  0
  50+ C09E 00           UBnkProjectedX              DB  0
  51+ C09F              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  52+ C09F 00 00 00...  XX15Save                    DS  8
  53+ C0A7 00 00 00...  XX15Save2                   DS  8
  54+ C0AF 00           VarBackface                 DB 0
  55+ C0B0              ; Heap (or array) information for lines and normals
  56+ C0B0              ; Coords are stored XY,XY,XY,XY
  57+ C0B0              ; Normals
  58+ C0B0              ; This needs re-oprganising now.
  59+ C0B0              ; Runtime Calculation Store
  60+ C0B0
  61+ C0B0              FaceArraySize               equ 30
  62+ C0B0              EdgeHeapSize                equ 40
  63+ C0B0              NodeArraySize               equ 40
  64+ C0B0              LineArraySize               equ 50
  65+ C0B0              ; Storage arrays for data
  66+ C0B0              ; Structure of arrays
  67+ C0B0              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  68+ C0B0              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  69+ C0B0              ; NodeArray         -  4 bytes per element      0           1            2          3
  70+ C0B0              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  71+ C0B0              ; Line Array        -  4 bytes per eleement     0           1            2          3
  72+ C0B0              ;                                               X1          Y1           X2         Y2
  73+ C0B0 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  74+ C0CE 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C16E 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  76+ C20E 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  77+ C2D6              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  78+ C2D6 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  79+ C2FE              ; Array current Lengths
  80+ C2FE 00           UbnkFaceVisArrayLen         DS 1
  81+ C2FF 00           UBnkNodeArrayLen            DS 1
  82+ C300 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  83+ C301 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  84+ C302              XX20                        equ UbnkLineArrayLen
  85+ C302              varXX20                     equ UbnkLineArrayLen
  86+ C302
  87+ C302 00           UbnkEdgeHeapSize            DS 1
  88+ C303 00           UbnkEdgeHeapBytes           DS 1
  89+ C304 00           UBnkLinesHeapLen            DS 1
  90+ C305 00           UbnKEdgeHeapCounter         DS 1
  91+ C306 00           UbnKEdgeRadius              DS 1
  92+ C307 00           UbnKEdgeShipType            DS 1
  93+ C308 00           UbnKEdgeExplosionType       DS 1
  94+ C309
  95+ C309              ; Node heap is used to write out transformed Vertexs
  96+ C309
  97+ C309              ; Lines
  98+ C309 00 00 00     UBnkXX19                    DS  3
  99+ C30C
 100+ C30C 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 101+ C325              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 102+ C325              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 103+ C325              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 104+ C325              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 105+ C325              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 106+ C325              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 107+ C325              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 108+ C325              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 109+ C325              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 110+ C325              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 111+ C325              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 112+ C325              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 113+ C325              DotAddr                     equ UBnkHullCopy + DotOffset
 114+ C325              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 115+ C325              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 116+ C325              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 117+ C325              QAddr                       equ UBnkHullCopy + QOffset
 118+ C325              LaserAddr                   equ UBnkHullCopy + LaserOffset
 119+ C325              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 120+ C325              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 121+ C325              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 122+ C325              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 123+ C325              ; Static Ship Data. This is copied in when creating the universe object
 124+ C325              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 125+ C325              ;UBnkHullVerticies           DS  40 * 6              ; Type 10 is 37 verts so 40 to be safe
 126+ C325              ;UBnkHullEdges               DS  50 * 4              ; Type 10 is 46 edges sp 200 to be safe
 127+ C325              ;UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C325
 129+ C325 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 130+ C451 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 131+ C901 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 132+ CA2D
 133+ CA2D
 134+ CA2D 0C           OrthagCountdown             DB  12
 135+ CA2E
 136+ CA2E              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 137+ CA2E              UBnk_Data_len               EQU $ - StartOfUniv
 138+ CA2E
 139+ CA2E              ZeroUnivPitchAndRoll:   MACRO
 140+ CA2E ~                                    xor     a
 141+ CA2E ~                                    ld      (UBnKRotXCounter),a
 142+ CA2E ~                                    ld      (UBnKRotZCounter),a
 143+ CA2E                                      ENDM
 144+ CA2E
 145+ CA2E              MaxUnivPitchAndRoll:    MACRO
 146+ CA2E ~                                    ld      a,127
 147+ CA2E ~                                    ld      (UBnKRotXCounter),a
 148+ CA2E ~                                    ld      (UBnKRotZCounter),a
 149+ CA2E                                      ENDM
 150+ CA2E
 151+ CA2E              RandomUnivPitchAndRoll: MACRO
 152+ CA2E ~                                    call    doRandom
 153+ CA2E ~                                    or      %01101111
 154+ CA2E ~                                    ld      (UBnKRotXCounter),a
 155+ CA2E ~                                    call    doRandom
 156+ CA2E ~                                    or      %01101111
 157+ CA2E ~                                    ld      (UBnKRotZCounter),a
 158+ CA2E                                      ENDM
 159+ CA2E
 160+ CA2E              RandomUnivSpeed:        MACRO
 161+ CA2E ~                                    call    doRandom
 162+ CA2E ~                                    and     31
 163+ CA2E ~                                    ld      (UBnKspeed),a
 164+ CA2E                                      ENDM
 165+ CA2E
 166+ CA2E              MaxUnivSpeed:           MACRO
 167+ CA2E ~                                    ld      a,31
 168+ CA2E ~                                    ld      (UBnKspeed),a
 169+ CA2E                                      ENDM
 170+ CA2E
 171+ CA2E              ZeroUnivAccelleration:  MACRO
 172+ CA2E ~                                    xor     a
 173+ CA2E ~                                    ld      (UBnKAccel),a
 174+ CA2E                                      ENDM
 175+ CA2E
 176+ CA2E 3A 23 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 177+ CA31 F6 04                                or      ShipIsHostile
 178+ CA33 32 23 C3                             ld      (ShipNewBitsAddr),a
 179+ CA36 C9                                   ret
 180+ CA37
 181+ CA37 3A 23 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 182+ CA3A E6 FB                                and     ShipNotHostile
 183+ CA3C 32 23 C3                             ld      (ShipNewBitsAddr),a
 184+ CA3F C9                                   ret
 185+ CA40
 186+ CA40              AequN1xorN2:            MACRO  param1,param2
 187+ CA40 ~                                    ld      a,(param1)
 188+ CA40 ~                                    xor     param2
 189+ CA40                                      ENDM
 190+ CA40
 191+ CA40              N0equN1byN2div256:      MACRO param1,param2,param3
 192+ CA40 ~                                    ld      a,param3                        ;
 193+ CA40 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 194+ CA40 ~                                    ld      a,param2                        ; A = XX16 element
 195+ CA40 ~                                    ld      d,a
 196+ CA40 ~                                    mul
 197+ CA40 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 198+ CA40 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 199+ CA40                                      ENDM
 200+ CA40
 201+ CA40              ; --------------------------------------------------------------
 202+ CA40 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 203+ CA43 11 2E 0A                             ld      de,UBnk_Data_len
 204+ CA46 AF                                   xor     a
 205+ CA47 CD 86 99                             call    memfill_dma
 206+ CA4A C9                                   ret
 207+ CA4B              ; --------------------------------------------------------------
 208+ CA4B 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 209+ CA4E 06 09                                ld      b, 3*3
 210+ CA50 AF                                   xor     a
 211+ CA51 77           .zeroLoop:              ld      (hl),a
 212+ CA52 23                                   inc     hl
 213+ CA53 10 FC                                djnz    .zeroLoop
 214+ CA55 C9                                   ret
 215+ CA56
 216+ CA56              ; --------------------------------------------------------------
 217+ CA56              ; This sets the position of the current ship if its a player launched missile
 218+ CA56 CD ED CC     UnivSetPlayerMissile:   call    InitialiseOrientation           ; Player  facing
 219+ CA59 CD 4B CA                             call    ResetUbnkPosition               ; home position
 220+ CA5C 3E 05                                ld      a,MissileDropHeight
 221+ CA5E 32 0F C0                             ld      (UBnKylo),a
 222+ CA61 3E 80                                ld      a,$80
 223+ CA63 32 11 C0                             ld      (UBnKysgn),a
 224+ CA66                                      MaxUnivSpeed
 224+ CA66 3E 1F       >                        ld      a,31
 224+ CA68 32 31 C0    >                        ld      (UBnKspeed),a
 225+ CA6B C9                                   ret
 226+ CA6C              ; --------------------------------------------------------------
 227+ CA6C              ; this applies blast damage to ship
 228+ CA6C 3A 7C 9E     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 229+ CA6F 47                                   ld      b,a
 230+ CA70 3A 3A C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 231+ CA73 90                                   sub     b
 232+ CA74 C3 7D CA                             jp      UnivExplodeShip
 233+ CA77 18 04                                jr      UnivExplodeShip
 234+ CA79 32 3A C0                             ld      (UBnKEnergy),a
 235+ CA7C C9                                   ret
 236+ CA7D              ; --------------------------------------------------------------
 237+ CA7D              ; This sets the ship as a shower of explosiondwd
 238+ CA7D 3A 37 C0     UnivExplodeShip:        ld      a,(UBnkaiatkecm)
 239+ CA80 F6 20                                or      ShipExploding
 240+ CA82 E6 7F                                and     Bit7Clear
 241+ CA84 32 37 C0                             ld      (UBnkaiatkecm),a
 242+ CA87 AF                                   xor     a
 243+ CA88 32 3A C0                             ld      (UBnKEnergy),a
 244+ CA8B                                      ;TODO
 245+ CA8B C9                                   ret
 246+ CA8C
 247+ CA8C CD C5 CA     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 248+ CA8F 3E 81                                ld  a,%10000001
 249+ CA91 32 37 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 250+ CA94 32 23 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 251+ CA97 3E FF                                ld      a,$FF
 252+ CA99 32 34 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 253+ CA9C 32 33 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 254+ CA9F                                      ZeroA
 254+ CA9F AF          >                        xor a
 255+ CAA0 32 0E C0                             ld      (UBnKxsgn),a
 256+ CAA3 32 11 C0                             ld      (UBnKysgn),a
 257+ CAA6 32 14 C0                             ld      (UBnKzsgn),a
 258+ CAA9 21 00 00                             ld      hl,0
 259+ CAAC 22 0C C0                             ld      (UBnKxlo),hl
 260+ CAAF 22 0F C0                             ld      (UBnKylo),hl
 261+ CAB2 3A 22 C3                             ld      a,(ShipTypeAddr)
 262+ CAB5 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 263+ CAB8                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 263+ CAB8 FE 02       >                        cp     ShipTypeStation
 263+ CABA C2 C1 CA    >                        jp      nz,.SkipFurther
 264+ CABD 3E 05                                ld      a,5
 265+ CABF 84                                   add     h
 266+ CAC0 67                                   ld      h,a
 267+ CAC1 22 12 C0     .SkipFurther            ld      (UBnKzlo),hl
 268+ CAC4 C9                                   ret
 269+ CAC5              ; --------------------------------------------------------------
 270+ CAC5              ; This sets the position of the current ship randomly, called after spawing
 271+ CAC5 CD ED CC     UnivSetSpawnPosition:   call    InitialiseOrientation
 272+ CAC8                                      RandomUnivPitchAndRoll
 272+ CAC8 CD 35 A3    >                        call    doRandom
 272+ CACB F6 6F       >                        or      %01101111
 272+ CACD 32 33 C0    >                        ld      (UBnKRotXCounter),a
 272+ CAD0 CD 35 A3    >                        call    doRandom
 272+ CAD3 F6 6F       >                        or      %01101111
 272+ CAD5 32 34 C0    >                        ld      (UBnKRotZCounter),a
 273+ CAD8 CD 35 A3                             call    doRandom                        ; set x lo and y lo to random
 274+ CADB 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 275+ CADE 32 0F C0     .setYlo:                ld      (UBnKylo),a
 276+ CAE1 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 277+ CAE2 47                                   ld      b,a
 278+ CAE3 E6 80                                and     SignOnly8Bit
 279+ CAE5 32 0E C0                             ld      (UBnKxsgn),a
 280+ CAE8 78           .setYSign:              ld      a,b                             ; get random back again
 281+ CAE9 0F                                   rrca                                    ; rotate by 1 bit right
 282+ CAEA 47                                   ld      b,a
 283+ CAEB E6 80                                and     SignOnly8Bit                    ; and set y sign
 284+ CAED 32 11 C0                             ld      (UBnKysgn),a
 285+ CAF0 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 286+ CAF2 78                                   ld      a,b                             ;
 287+ CAF3 E6 1F                                and     31                              ; set y hi to random 0 to 31
 288+ CAF5 32 10 C0                             ld      (UBnKyhi),a                     ;
 289+ CAF8 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 290+ CAFA 78                                   ld      a,b
 291+ CAFB E6 1F                                and     31                              ; set x hi to random 0 to 31
 292+ CAFD 4F                                   ld      c,a                             ; save shifted into c as well
 293+ CAFE 32 0D C0                             ld      (UBnKxhi),a
 294+ CB01 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 295+ CB03 98                                   sbc     b
 296+ CB04 99                                   sbc     c
 297+ CB05 32 13 C0                             ld      (UBnKzhi),a
 298+ CB08 3A 22 C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 299+ CB0B                                      ReturnIfAEqNusng ShipTypeJunk
 299+ CB0B FE 03       >                        cp      ShipTypeJunk
 299+ CB0D C8          >                        ret     z
 300+ CB0E                                      ReturnIfAEqNusng ShipTypeScoopable
 300+ CB0E FE 04       >                        cp      ShipTypeScoopable
 300+ CB10 C8          >                        ret     z
 301+ CB11 78                                   ld      a,b                             ; its not junk to set z sign
 302+ CB12 0F                                   rrca                                    ; as it can jump in
 303+ CB13 E6 80                                and     SignOnly8Bit
 304+ CB15 32 14 C0                             ld      (UBnKzsgn),a
 305+ CB18 C9                                   ret
 306+ CB19
 307+ CB19              ; --------------------------------------------------------------
 308+ CB19              ; This sets the cargo type or carryflag set for not cargo
 309+ CB19              ; Later this will be done via a loadable lookup table
 310+ CB19 3A 2B C0     ShipCargoType:          ld      a,(UBnKShipType)
 311+ CB1C                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 311+ CB1C FE 04       >                        cp     ShipID_CargoType5
 311+ CB1E CA 35 CB    >                        jp      z,.CargoCanister
 312+ CB21              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 312+ CB21 FE 27       >                        cp     ShipID_Thargon
 312+ CB23 CA 3B CB    >                        jp      z,.Thargon
 313+ CB26              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 313+ CB26 FE 1D       >                        cp     ShipID_Plate
 313+ CB28 CA 3E CB    >                        jp      z,.Plate
 314+ CB2B              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 314+ CB2B FE 24       >                        cp     ShipID_Splinter
 314+ CB2D CA 41 CB    >                        jp      z,.Splinter
 315+ CB30              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 315+ CB30 FE 11       >                        cp     ShipID_Escape_Pod
 315+ CB32 CA 44 CB    >                        jp      z,.EscapePod
 316+ CB35 CD 35 A3     .CargoCanister:         call    doRandom
 317+ CB38 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 318+ CB3A C9                                   ret
 319+ CB3B 3E 11        .Thargon:               ld      a,AlienItemsIndex
 320+ CB3D C9                                   ret
 321+ CB3E 3E 0A        .Plate:                 ld      a,AlloysIndex
 322+ CB40 C9                                   ret
 323+ CB41 3E 0D        .Splinter:              ld      a,MineralsIndex
 324+ CB43 C9                                   ret
 325+ CB44 3E 04        .EscapePod:             ld      a,SlavesIndex
 326+ CB46 C9                                   ret
 327+ CB47
 328+ CB47              ; --------------------------------------------------------------
 329+ CB47              ; This sets current univrse object to space station
 330+ CB47 3E 81        ResetStationLaunch:     ld  a,%10000001
 331+ CB49 32 37 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 332+ CB4C AF                                   xor a
 333+ CB4D 32 34 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 334+ CB50 32 23 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 335+ CB53 3E FF                                ld      a,$FF
 336+ CB55 32 33 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 337+ CB58 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 338+ CB5B 22 0C C0                             ld      (UBnKxlo),hl
 339+ CB5E 21 00 00                             ld      hl,$0000
 340+ CB61 22 0F C0                             ld      (UBnKylo),hl
 341+ CB64 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 342+ CB67 22 12 C0                             ld      (UBnKzlo),hl
 343+ CB6A AF                                   xor     a
 344+ CB6B 32 0E C0                             ld      (UBnKxsgn),a
 345+ CB6E 32 11 C0                             ld      (UBnKysgn),a
 346+ CB71 3E 80                                ld      a,$80
 347+ CB73 32 14 C0                             ld      (UBnKzsgn),a
 348+ CB76 CD 12 CD     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 349+ CB79 C9                                   ret
 350+ CB7A                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 351+ CB7A              ;Output: BC = Quotient, HL = Remainder
 352+ CB7A
 353+ CB7A              ; Initialiase data, iyh must equal slot number
 354+ CB7A              ;                   iyl must be ship type
 355+ CB7A 32 2C C0     UnivInitRuntime:        ld      (UbnKShipBankNbr),a
 356+ CB7D 01 10 00                             ld      bc,UBnKRuntimeSize
 357+ CB80 21 2B C0                             ld      hl,UBnKShipType
 358+ CB83                                      ZeroA
 358+ CB83 AF          >                        xor a
 359+ CB84 77           .InitLoop:              ld      (hl),a
 360+ CB85 23                                   inc     hl
 361+ CB86 10 FC                                djnz    .InitLoop
 362+ CB88 FD 7C        .SetBankData:           ld      a,iyh
 363+ CB8A 32 2C C0                             ld      (UbnKShipBankNbr),a
 364+ CB8D FD 7D                                ld      a,iyl
 365+ CB8F 32 2B C0                             ld      (UBnKShipType),a
 366+ CB92 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 367+ CB95 32 2D C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 368+ CB98 78                                   ld      a,b                          ; this will mostly be debugging info
 369+ CB99 32 2E C0                             ld      (UBnkShipModelNbr),a         ; this will mostly be debugging info
 370+ CB9C C9                                   ret
 371+ CB9D
 372+ CB9D
 373+ CB9D 7C           ADDHLDESignedv3:        ld      a,h
 374+ CB9E E6 80                                and     SignOnly8Bit
 375+ CBA0 47                                   ld      b,a                         ;save sign bit in b
 376+ CBA1 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 377+ CBA2                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 377+ CBA2 FA BA CB    >                        jp		m, ADDHLDEOppSGN
 378+ CBA5 78           ADDHLDESameSigns:       ld      a,b
 379+ CBA6 B2                                   or      d
 380+ CBA7                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 380+ CBA7 FA AC CB    >                        jp		m, ADDHLDESameNeg
 381+ CBAA 19                                   add     hl,de
 382+ CBAB C9                                   ret
 383+ CBAC 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 384+ CBAD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 385+ CBAF 67                                   ld      h,a
 386+ CBB0 7A                                   ld      a,d
 387+ CBB1 E6 7F                                and     SignMask8Bit
 388+ CBB3 57                                   ld      d,a
 389+ CBB4 19                                   add     hl,de
 390+ CBB5 3E 80                                ld      a,SignOnly8Bit
 391+ CBB7 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 392+ CBB8 67                                   ld      h,a
 393+ CBB9 C9                                   ret
 394+ CBBA 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 395+ CBBB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 396+ CBBD 67                                   ld      h,a
 397+ CBBE 7A                                   ld      a,d
 398+ CBBF E6 7F                                and     SignMask8Bit
 399+ CBC1 57                                   ld      d,a
 400+ CBC2 B7                                   or      a
 401+ CBC3 ED 52                                sbc     hl,de
 402+ CBC5 38 04                                jr      c,ADDHLDEOppInvert
 403+ CBC7 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 404+ CBC8 B4                                   or      h
 405+ CBC9 67                                   ld      h,a                         ; set the previou sign value
 406+ CBCA C9                                   ret
 407+ CBCB              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 407+ CBCB AF          >                    xor a
 407+ CBCC 95          >                    sub l
 407+ CBCD 6F          >                    ld l,a
 407+ CBCE 9F          >                    sbc a,a
 407+ CBCF 94          >                    sub h
 407+ CBD0 67          >                    ld h,a
 408+ CBD1 78                                   ld      a,b
 409+ CBD2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 410+ CBD4 B4                                   or      h
 411+ CBD5 67                                   ld      h,a                         ; recover sign
 412+ CBD6 C9                                   ret
 413+ CBD7
 414+ CBD7              ; we could cheat, flip the sign of DE and just add but its not very optimised
 415+ CBD7 7C           SUBHLDESignedv3:        ld      a,h
 416+ CBD8 E6 80                                and     SignOnly8Bit
 417+ CBDA 47                                   ld      b,a                         ;save sign bit in b
 418+ CBDB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 419+ CBDC                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 419+ CBDC FA 0A CC    >                        jp		m, SUBHLDEOppSGN
 420+ CBDF 78           SUBHLDESameSigns:       ld      a,b
 421+ CBE0 B2                                   or      d
 422+ CBE1                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 422+ CBE1 FA EB CB    >                        jp		m, SUBHLDESameNeg
 423+ CBE4 B7                                   or      a
 424+ CBE5 ED 52                                sbc     hl,de
 425+ CBE7                                      JumpIfNegative SUBHLDESameOvrFlw
 425+ CBE7 FA FE CB    >                        jp		m, SUBHLDESameOvrFlw
 426+ CBEA C9                                   ret
 427+ CBEB 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 428+ CBEC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 429+ CBEE 67                                   ld      h,a
 430+ CBEF 7A                                   ld      a,d
 431+ CBF0 E6 7F                                and     SignMask8Bit
 432+ CBF2 57                                   ld      d,a
 433+ CBF3 B7                                   or      a
 434+ CBF4 ED 52                                sbc     hl,de
 435+ CBF6                                      JumpIfNegative SUBHLDESameOvrFlw
 435+ CBF6 FA FE CB    >                        jp		m, SUBHLDESameOvrFlw
 436+ CBF9 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 437+ CBFA F6 80                                or      SignOnly8Bit
 438+ CBFC 67                                   ld      h,a
 439+ CBFD C9                                   ret
 440+ CBFE              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 440+ CBFE AF          >                    xor a
 440+ CBFF 95          >                    sub l
 440+ CC00 6F          >                    ld l,a
 440+ CC01 9F          >                    sbc a,a
 440+ CC02 94          >                    sub h
 440+ CC03 67          >                    ld h,a
 441+ CC04 78                                   ld      a,b
 442+ CC05 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 443+ CC07 B4                                   or      h
 444+ CC08 67                                   ld      h,a                         ; recover sign
 445+ CC09 C9                                   ret
 446+ CC0A B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 447+ CC0B 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 448+ CC0C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 449+ CC0E 67                                   ld      h,a
 450+ CC0F 7A                                   ld      a,d
 451+ CC10 E6 7F                                and     SignMask8Bit
 452+ CC12 57                                   ld      d,a
 453+ CC13 19                                   add     hl,de
 454+ CC14 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 455+ CC15 B4                                   or      h
 456+ CC16 67                                   ld      h,a                         ; set the previou sign value
 457+ CC17 C9                                   ret
 458+ CC18
 459+ CC18
 460+ CC18              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 460+ CC18 CB 7C       >                        bit 	7,h
 460+ CC1A C2 2B CC    >                        jp      nz,SBCHLDEhlNeg
 461+ CC1D              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 461+ CC1D CB 7C       >                        bit 	7,h
 461+ CC1F C2 2B CC    >                        jp      nz,SBCHLDEhlNeg
 462+ CC22 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 463+ CC24 C9                                   ret
 464+ CC25 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 465+ CC27 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 466+ CC28 CB FA                                set     7,d
 467+ CC2A C9                                   ret
 468+ CC2B CB BC        SBCHLDEhlNeg:           res     7,h
 469+ CC2D                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 469+ CC2D CB 7A       >                        bit 	7,d
 469+ CC2F C2 37 CC    >                        jp      nz,SBCHLDEhlNegdeNeg
 470+ CC32 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 471+ CC34 CB FC                                set     7,h
 472+ CC36 C9                                   ret
 473+ CC37 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 474+ CC39 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 475+ CC3A CB FA                                set     7,d
 476+ CC3C CB FC                                set     7,h
 477+ CC3E C9                                   ret
 478+ CC3F
 479+ CC3F              ; Roate around axis
 480+ CC3F              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 481+ CC3F              ; so the axis x1 points to roofv  x , y or z
 482+ CC3F              ;             x2           nosev or sidev  x, y or z
 483+ CC3F              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 484+ CC3F              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 485+ CC3F              ; var RAT2 gives direction
 486+ CC3F              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 487+ CC3F              ;-Set up S R -----------------------------------------
 488+ CC3F              ; optimised we don't deal with sign here just the value of roof axis / 512
 489+ CC3F 2A A3 9C     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 490+ CC42 5E                                   ld      e,(hl)
 491+ CC43 23                                   inc     hl
 492+ CC44 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 493+ CC45 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 494+ CC46 7C                                   ld      a,h
 495+ CC47 E6 80                                and     SignOnly8Bit
 496+ CC49 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 497+ CC4B 7C                                   ld      a,h
 498+ CC4C E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 499+ CC4E CB 3F                                srl     a               ; a = Axis1/2
 500+ CC50 5F                                   ld      e,a             ;
 501+ CC51 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 502+ CC53 57                                   ld      d,a             ; de = signed Axis1 / 512
 503+ CC54 B7                                   or      a               ; clear carry
 504+ CC55 CD D7 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 505+ CC58              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 506+ CC58 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 507+ CC59 7D                                   ld      a,l
 508+ CC5A 32 BE 9D                             ld      (varR),a
 509+ CC5D 7C                                   ld      a,h
 510+ CC5E 32 BF 9D                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 511+ CC61              ;-calculate roofv latter half of calc
 512+ CC61 2A A5 9C                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 513+ CC64 5E                                   ld      e,(hl)
 514+ CC65 23                                   inc     hl
 515+ CC66 56                                   ld      d,(hl)          ; de = value of roof axis
 516+ CC67 7A                                   ld      a,d
 517+ CC68 E6 80                                and     SignOnly8Bit
 518+ CC6A FD 67                                ld      iyh,a           ; save sign
 519+ CC6C 7A                                   ld      a,d
 520+ CC6D E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 521+ CC6F 57                                   ld      d,a             ; de = abs (nosev)
 522+ CC70                                      ShiftDERight1
 522+ CC70 CB 3A       >			   srl d
 522+ CC72 CB 1B       >			   rr  e
 523+ CC74                                      ShiftDERight1
 523+ CC74 CB 3A       >			   srl d
 523+ CC76 CB 1B       >			   rr  e
 524+ CC78                                      ShiftDERight1
 524+ CC78 CB 3A       >			   srl d
 524+ CC7A CB 1B       >			   rr  e
 525+ CC7C                                      ShiftDERight1           ; de = nosev /16 unsigned
 525+ CC7C CB 3A       >			   srl d
 525+ CC7E CB 1B       >			   rr  e
 526+ CC80 3A 3C C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 527+ CC83 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 528+ CC85 E6 80                                and     SignOnly8Bit
 529+ CC87 B2                                   or      d
 530+ CC88 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 531+ CC89              ;;; ld      a,e
 532+ CC89              ;;;     or      iyh
 533+ CC89              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 534+ CC89              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 535+ CC89 E1                                   pop     hl              ; get back RS POP ID 1
 536+ CC8A                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 537+ CC8A              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 538+ CC8A CD 9D CB                             call    ADDHLDESignedv3 ; do add using hl and de
 539+ CC8D E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 540+ CC8E              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 541+ CC8E              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 542+ CC8E 2A A5 9C                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 543+ CC91 5E                               ld      e,(hl)
 544+ CC92 23                               inc     hl
 545+ CC93 56                               ld      d,(hl)
 546+ CC94 EB                               ex      de,hl
 547+ CC95 7C                               ld      a,h
 548+ CC96 E6 80                            and     $80
 549+ CC98 FD 67                            ld      iyh,a
 550+ CC9A 7C                               ld      a,h
 551+ CC9B E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 552+ CC9D CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 553+ CC9F 5F                               ld      e,a
 554+ CCA0 FD 7C                            ld      a,iyh
 555+ CCA2 57                               ld      d,a
 556+ CCA3 B7                               or      a               ; clear carry
 557+ CCA4 CD D7 CB                         call    SUBHLDESignedv3
 558+ CCA7              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 559+ CCA7 E5                               push    hl              ; save hl on stack  PUSH ID 3
 560+ CCA8 7D                               ld      a,l
 561+ CCA9 32 BA 9C                         ld      (varP),a        ; p = low of resuilt
 562+ CCAC 7C                               ld      a,h
 563+ CCAD E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 564+ CCAF 32 D9 9D                         ld      (varT),a        ; t = high of result
 565+ CCB2              ;-- Set up TQ
 566+ CCB2 2A A3 9C                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 567+ CCB5              ;   ld      hl,(varAxis2)   ; work on nosev again
 568+ CCB5 5E                               ld      e,(hl)
 569+ CCB6 23                               inc     hl
 570+ CCB7 56                               ld      d,(hl)
 571+ CCB8 7A                               ld      a,d
 572+ CCB9 E6 80                            and     $80
 573+ CCBB FD 67                            ld      iyh,a           ; save sign
 574+ CCBD 7A                               ld      a,d
 575+ CCBE E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 576+ CCC0 57                               ld      d,a             ; de = abs (nosev)
 577+ CCC1                                  ShiftDERight1
 577+ CCC1 CB 3A       >			   srl d
 577+ CCC3 CB 1B       >			   rr  e
 578+ CCC5                                  ShiftDERight1
 578+ CCC5 CB 3A       >			   srl d
 578+ CCC7 CB 1B       >			   rr  e
 579+ CCC9                                  ShiftDERight1
 579+ CCC9 CB 3A       >			   srl d
 579+ CCCB CB 1B       >			   rr  e
 580+ CCCD                                  ShiftDERight1           ; de = nosev /16 unsigned
 580+ CCCD CB 3A       >			   srl d
 580+ CCCF CB 1B       >			   rr  e
 581+ CCD1 3A 3C C0                         ld      a,(univRAT2)
 582+ CCD4 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 583+ CCD6 E6 80                            and     $80
 584+ CCD8 B2                               or      d
 585+ CCD9 57                               ld      d,a
 586+ CCDA              ;;; ld      a,e
 587+ CCDA              ;;;     or      iyh
 588+ CCDA              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 589+ CCDA E1                               pop     hl              ; get back RS   POP ID 3
 590+ CCDB              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 591+ CCDB CD D7 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 592+ CCDE              ;-- Update nosev ---------------------------------------
 593+ CCDE EB                               ex      de,hl           ; save hl to de
 594+ CCDF 2A A5 9C                         ld      hl,(varAxis2)
 595+ CCE2 73                               ld      (hl),e
 596+ CCE3 23                               inc     hl
 597+ CCE4 72                               ld      (hl),d          ; copy result into nosev
 598+ CCE5              ;-- Update roofv ---------------------------------------
 599+ CCE5 D1                               pop     de              ; get calc saved on stack POP ID 2
 600+ CCE6 2A A3 9C                         ld      hl,(varAxis1)
 601+ CCE9 73                               ld      (hl),e
 602+ CCEA 23                               inc     hl
 603+ CCEB 72                               ld      (hl),d          ; copy result into nosev
 604+ CCEC C9                               ret
 605+ CCED
 606+ CCED                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CCED              InitialiseOrientation:
   2++CCED              ZI1:
   3++CCED              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CCED              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCED              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CCED 21 00 00         ld      hl, 0
   7++CCF0 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCF3 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCF6 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCF9 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCFC 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCFF 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CD02 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CD05                  ;ld      hl,1
  15++CD05 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CD08 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CD0B 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CD0E 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CD11 C9               ret
  20++CD12
  21++CD12              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CD12              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CD12              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CD12
  25++CD12              LaunchedOrientation:
  26++CD12 CD ED CC         call    InitialiseOrientation
  27++CD15                  FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CD15 3A 22 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++CD18 EE 80       >                        xor SignOnly8Bit
  27++CD1A 32 22 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++CD1D                  FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CD1D 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++CD20 EE 80       >                        xor SignOnly8Bit
  28++CD22 32 24 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++CD25                  FlipSignMem UBnkrotmatNosevZ+1
  29++CD25 3A 26 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++CD28 EE 80       >                        xor SignOnly8Bit
  29++CD2A 32 26 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++CD2D C9               ret
  31++CD2E
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 607+ CD2E
 608+ CD2E              ;----------------------------------------------------------------------------------------------------------------------------------
 609+ CD2E              OrientateVertex:
 610+ CD2E
 611+ CD2E              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 612+ CD2E              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 613+ CD2E              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 614+ CD2E              ;
 615+ CD2E
 616+ CD2E              ;----------------------------------------------------------------------------------------------------------------------------------
 617+ CD2E              TransposeVertex:
 618+ CD2E              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 619+ CD2E              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 620+ CD2E              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 621+ CD2E              VectorToVertex:
 622+ CD2E              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 623+ CD2E              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 624+ CD2E              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 625+ CD2E              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 626+ CD2E              ;OUTPUTS:   cahl = quotient cde = divisor
 627+ CD2E 32 BC 9C     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 628+ CD31                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 628+ CD31 2A 12 C0    >                        ld       hl,(UBnKzlo)
 628+ CD34 22 BD 9D    >                        ld       (varQ),hl
 629+ CD37 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
 630+ CD3A 32 BF 9D                             ld      (varS),a                        ; S = inkw z sign
 631+ CD3D ED 5B BA 9C  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 632+ CD41 7B                                   ld      a,e                             ; num lo
 633+ CD42 F6 01                                or      1                               ; must be at least 1
 634+ CD44 32 BA 9C                             ld      (varP),a                        ; store
 635+ CD47 5F                                   ld      e,a                             ; update DE too
 636+ CD48 3A BC 9C                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 637+ CD4B 21 BF 9D                             ld      hl,varS                         ; hl = address of VarS
 638+ CD4E AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 639+ CD4F E6 80                                and     $80                             ;
 640+ CD51 32 D9 9D                             ld      (varT),a                        ; T = Sign bit of A
 641+ CD54 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 642+ CD57 3A BC 9C                             ld      a,(varPhi2)                     ;
 643+ CD5A E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 644+ CD5C              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 644+ CD5C FE 40       >                        cp     $40
 644+ CD5E D2 6C CD    >                        jp		nc,DV14
 645+ CD61                                      ShiftDELeft1                            ; de (or P,P1) > 1
 645+ CD61 CB 23       >			   sla e
 645+ CD63 CB 12       >			   rl  d
 646+ CD65 CB 17                                rl      a                               ; and accumulator as 3rd byte
 647+ CD67 FD 2C                                inc     iyl
 648+ CD69 C2 5C CD                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 649+ CD6C 32 BC 9C     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 650+ CD6F ED 53 BA 9C                          ld      (varP),de                       ; store off the value so far
 651+ CD73 3A BF 9D                             ld      a,(varS)                        ; zsign
 652+ CD76 E6 7F                                and     $7F                             ; denom sg7
 653+ CD78                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 654+ CD78 2A BD 9D                             ld      hl,(varQ)                       ; demon lo
 655+ CD7B FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 656+ CD7D                                      ShiftHLLeft1
 656+ CD7D CB 25       >			   sla l
 656+ CD7F CB 14       >			   rl  h
 657+ CD81 CB 17                                rl      a                               ; mulitply QRS by 2
 658+ CD83 F2 7B CD                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 659+ CD86 22 BD 9D     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 660+ CD89 32 BD 9D                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 661+ CD8C 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 662+ CD8E 32 BE 9D                             ld      (varR),a                        ;  R
 663+ CD91 3A BC 9C                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 664+ CD94 CD AC AD                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 665+ CD97 3E 00                                ld      a,0
 666+ CD99 32 D1 9D                             ld      (varKp1),a
 667+ CD9C 32 D2 9D                             ld      (varKp2),a
 668+ CD9F 32 D3 9D                             ld      (varKp3),a                      ; clear out K+1 to K+3
 669+ CDA2 FD 7D                                ld      a,iyl                           ; Y counter for scale
 670+ CDA4                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 670+ CDA4 CB 7F       >                        bit 	7,a
 670+ CDA6 CA D1 CD    >                        jp      z,DV12
 671+ CDA9 3A BE 9D                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 672+ CDAC ED 5B D0 9D                          ld      de,(varK)                       ; d= k1
 673+ CDB0 2A D4 9D                             ld      hl,(varK2)                      ; h = k3, l = k2
 674+ CDB3 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 675+ CDB4 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 676+ CDB6 CB 12                                rl      d                               ; k1
 677+ CDB8 CB 15                                rl      l                               ; k2
 678+ CDBA CB 14                                rl      h                               ; k3
 679+ CDBC FD 2C                                inc     iyl
 680+ CDBE 20 F4                                jr      nz,DVL8                         ;
 681+ CDC0 ED 53 D0 9D  DVL8Save:               ld      (varK),de
 682+ CDC4 22 D4 9D                             ld      (varK2),hl                      ; save back K0 to k3
 683+ CDC7 3A D9 9D                             ld      a,(varT)
 684+ CDCA 4F                                   ld      c,a                             ; get varT into c reg
 685+ CDCB 7C                                   ld      a,h                             ; a= k3 (sign)
 686+ CDCC B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 687+ CDCD 32 E3 9D                             ld      (varK3),a                       ; load sign bit back into K3
 688+ CDD0 C9                                   ret
 689+ CDD1              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 689+ CDD1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 689+ CDD2 CA E9 CD    >                        jp	    z, DV13
 690+ CDD5 3A BE 9D                             ld      a,(varR)                        ; Reduce Remainder
 691+ CDD8 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 692+ CDDA FD 2D                                dec     iyl
 693+ CDDC C2 D8 CD                             jp      nz,DVL10                        ; loop y reduce until y is zero
 694+ CDDF 32 D0 9D                             ld      (varK),a                        ; k Lo
 695+ CDE2                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 695+ CDE2 3A D9 9D    >                        ld       a,(varT)
 695+ CDE5 32 D3 9D    >                        ld       (varKp3),a
 696+ CDE8 C9                                   ret
 697+ CDE9              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 697+ CDE9 3A BE 9D    >                        ld       a,(varR)
 697+ CDEC 32 D0 9D    >                        ld       (varK),a
 698+ CDEF                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 698+ CDEF 3A D9 9D    >                        ld       a,(varT)
 698+ CDF2 32 D3 9D    >                        ld       (varKp3),a
 699+ CDF5 C9                                   ret
 700+ CDF6
 701+ CDF6 CD 2E CD     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 702+ CDF9 3A D3 9D                             ld      a,(varKp3)
 703+ CDFC E6 7F                                and     $7F
 704+ CDFE 21 D2 9D                             ld      hl,varKp2
 705+ CE01 B6                                   or      (hl)
 706+ CE02 C2 17 CE                             jp      nz,PL44TooBig
 707+ CE05 3A D1 9D                             ld      a,(varKp1)
 708+ CE08 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 709+ CE0A 30 0B                                jr      nc,PL44TooBig
 710+ CE0C                                      ClearCarryFlag                          ; we have a good result regardless
 710+ CE0C B7          >                        or a
 711+ CE0D 2A D0 9D                             ld      hl,(varK)                       ; get K (0 1)
 712+ CE10 3A D3 9D                             ld      a,(varKp3)                      ; if sign bit high?
 713+ CE13 CB 7F                                bit     7,a
 714+ CE15 C8                                   ret     z                               ; no so we can just return
 715+ CE16 C9           PL44:                   ret
 716+ CE17 37           PL44TooBig:             scf
 717+ CE18 C9                                   ret
 718+ CE19              Project:
 719+ CE19 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 720+ CE1C 22 BA 9C                             ld      (varP),hl
 721+ CE1F 3A 0E C0                             ld      a,(UBnKxsgn)
 722+ CE22 CD F6 CD                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 723+ CE25 D8                                   ret     c                               ; carry means don't print
 724+ CE26 2A D0 9D                             ld      hl,(varK)                       ; hl = k (0 1)
 725+ CE29                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 726+ CE29 3E 80                                ld      a,ViewCenterX
 727+ CE2B ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 728+ CE2D 22 E3 9D                             ld      (varK3),hl                      ; K3 = X position on screen
 729+ CE30 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 730+ CE33 22 BA 9C                             ld      (varP),hl
 731+ CE36 3A 11 C0                             ld      a,(UBnKysgn)
 732+ CE39 CD F6 CD                             call    PLS6
 733+ CE3C D8                                   ret     c
 734+ CE3D 2A D0 9D                             ld      hl,(varK)                       ; hl = k (0 1)
 735+ CE40 3E 40                                ld      a,ViewCenterY
 736+ CE42 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 737+ CE44 22 E9 9D                             ld      (varK4),hl                      ; K3 = X position on screen
 738+ CE47 C9                                   ret
 739+ CE48              ;--------------------------------------------------------------------------------------------------------
 740+ CE48                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CE48              ;
   2++CE48              ; EraseOldLines:
   3++CE48              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CE48              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CE48              ;	 	loop + 4
   6++CE48              ; Return
   7++CE48
   8++CE48              EraseOldLines:
   9++CE48              EE51:										; if bit3 set draw lines in XX19 heap
  10++CE48              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CE48 3A 35 C0    >                        ld     a,(UBnKexplDsp)
  10++CE4B CB 5F       >                        bit 	3,a
  10++CE4D C8          >                        ret		z
  11++CE4E CB DF        	set		3,a
  12++CE50 32 35 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CE53 C3 85 EA     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CE56              ; We use the ret from the clearLines so not needed here
  15++CE56
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 741+ CE56                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CE56              ;TrimToScreenGrad:
   2++CE56              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CE56              ;ret
   4++CE56              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CE56              ;TODO        bit     7,a
   6++CE56              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CE56              ;TODO        ld      a,h
   8++CE56              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CE56              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CE56              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CE56
  12++CE56              ;18                      CLC
  13++CE56              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CE56              ;85 36                   STA &36			 \ XX15+2
  15++CE56              ;98                      TYA 			 \ step Y1 hi
  16++CE56              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CE56              ;85 37                   STA &37			 \ XX15+3
  18++CE56              ;A9 00                   LDA #0			 \ xleft min
  19++CE56              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CE56              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CE56              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CE56              ;	.LL119	\ x1 hi +ve from LL118
  23++CE56              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CE56              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CE56              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CE56              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CE56              ;8A                      TXA 			 \ step Y1 lo
  28++CE56              ;18                      CLC
  29++CE56              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CE56              ;85 36                   STA &36			 \ XX15+2
  31++CE56              ;98                      TYA 			 \ step Y1 hi
  32++CE56              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CE56              ;85 37                   STA &37			 \ XX15+3
  34++CE56              ;A2 FF                   LDX #&FF		 \ xright max
  35++CE56              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CE56              ;E8                      INX 			 \ X = 0
  37++CE56              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CE56              ;	.LL134	\ Ytrim
  39++CE56              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CE56              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CE56              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CE56              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CE56              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CE56              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CE56              ;8A                      TXA 			 \ step X1 lo
  46++CE56              ;18                      CLC
  47++CE56              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CE56              ;85 34                   STA &34			 \ XX15+0
  49++CE56              ;98                      TYA 			 \ step X1 hi
  50++CE56              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CE56              ;85 35                   STA &35			 \ XX15+1
  52++CE56              ;A9 00                   LDA #0			 \ Y bottom min
  53++CE56              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CE56              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CE56              ;	.LL135	\ y1 hi +ve from LL134
  56++CE56              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CE56              ;38                      SEC
  58++CE56              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CE56              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CE56              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CE56              ;E9 00                   SBC #0			 \ any hi
  62++CE56              ;85 83                   STA &83			 \ S
  63++CE56              ;90 16                   BCC LL136		 \ failed, rts
  64++CE56              ;	.LL139
  65++CE56              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CE56              ;8A                      TXA 			 \ step X1 lo
  67++CE56              ;18                      CLC
  68++CE56              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CE56              ;85 34                   STA &34			 \ XX15+0
  70++CE56              ;98                      TYA 			 \ step X1 hi
  71++CE56              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CE56              ;85 35                   STA &35			 \ XX15+1
  73++CE56              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CE56              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CE56              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CE56              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CE56              ;	.LL136	\ rts
  78++CE56              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CE56              ;
  80++CE56
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 742+ CE56                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CE56              ;--------------------------------------------------------------------------------------------------------------------
   2++CE56
   3++CE56 00           clipDx                  DB      0           ; also XX12+2
   4++CE57 00           clipDxHigh              DB      0           ; also XX12+3
   5++CE58 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CE59 00           clipDy                  DB      0           ; also XX12+4
   7++CE5A 00           clipDyHigh              DB      0           ; also XX12+5
   8++CE5B 00           clipGradient            DB      0
   9++CE5C 00           clipDxySign             DB      0
  10++CE5D              varX12p3                equ     clipDxySign
  11++CE5D 00           clipXGTY                DB      0
  12++CE5E 00           clipFlags               DB      0
  13++CE5F 00           SWAP                    DB      0
  14++CE60 00 00        varYX                   DW      0
  15++CE62              ;varRegX                 DB      0
  16++CE62              ;varXX12p2               DB      0
  17++CE62 00           clipXX13                 DB      0
  18++CE63
  19++CE63
  20++CE63              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CE63              ;ClipXX15XX12Line:
  22++CE63 ED 4B 85 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CE67 DD 2A 89 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CE6B 2A 83 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CE6E ED 5B 87 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CE72 AF                                   xor     a
  27++CE73 32 5F CE                             ld      (SWAP),a                    ; SWAP = 0
  28++CE76 7A                                   ld      a,d                         ; A = X2Hi
  29++CE77 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CE7A                                      ;       push    af
  31++CE7A                                      ;       ld      a,iyh
  32++CE7A                                      ;       ld      (regX),a
  33++CE7A                                      ;       pop     af
  34++CE7A DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CE7C 20 0A                                jr      nz, .LL107
  36++CE7E DD 7D                                ld      a,ixl
  37++CE80 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CE83 20 03                                jr      nz,.LL107
  39++CE85 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CE88                                      ;        push    af
  41++CE88                                      ;        ld      a,iyh
  42++CE88                                      ;        ld      (regX),a
  43++CE88                                      ;        pop     af
  44++CE88              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CE88              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CE88 FD 7C        .LL107                  ld      a,iyh
  47++CE8A 32 62 CE                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CE8D 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CE8E B0                                   or      b                           ;
  50++CE8F 20 27                                jr      nz,.LL83                    ;
  51++CE91 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CE92 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CE95 20 21                                jr      nz,.LL83
  54++CE97              ; If we get here, (x1, y1) is on-screen
  55++CE97 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CE99 FE 00                                cp      0
  57++CE9B 20 15                                jr      nz, .LL108
  58++CE9D              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CE9D 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CE9E 32 84 C0                             ld      (UBnkNewY1),a
  61++CEA1 DD 7D                                ld      a,ixl
  62++CEA3 32 86 C0                             ld      (UBnkNewY2),a
  63++CEA6 7D                                   ld      a,l
  64++CEA7 32 83 C0                             ld      (UBnkNewX1),a
  65++CEAA 7B                                   ld      a,e
  66++CEAB 32 85 C0                             ld      (UBnkNewX2),a
  67++CEAE                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CEAE B7          >                        or a
  68++CEAF C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CEB0              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CEB0 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CEB1 C9                                   ret
  72++CEB2 FD 7C        .LL108:                 ld      a,iyh
  73++CEB4 B7                                   or      a
  74++CEB5 1F                                   rra
  75++CEB6 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CEB8                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CEB8                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CEB8                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CEB8                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CEB8 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CEBA ED 27 80                             test    $80                         ;
  82++CEBD 28 28                                jr      z, .LL115                   ;
  83++CEBF 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CEC0 A2                                   and     d
  85++CEC1                                      JumpIfNegative  .PointsOutofBounds
  85++CEC1 FA B0 CE    >                        jp		m, .PointsOutofBounds
  86++CEC4 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CEC5 DD A4                                and     ixh
  88++CEC7                                      JumpIfNegative  .PointsOutofBounds
  88++CEC7 FA B0 CE    >                        jp		m, .PointsOutofBounds
  89++CECA 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CECB 3D                                   dec     a
  91++CECC FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CECE                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CECE                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CECE                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CECE                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CECE 7A                                   ld      a,d                         ; a = x2 hi
  97++CECF 3D                                   dec     a
  98++CED0 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CED2                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CED2 F2 B0 CE    >                        jp		p, .PointsOutofBounds
 100++CED5              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CED5 DD 7C                                ld      a,ixh
 102++CED7 3D                                   dec     a
 103++CED8 FD 6F                                ld      iyl,a
 104++CEDA 78                                   ld      a,b
 105++CEDB 3D                                   dec     a
 106++CEDC FD B5                                or      iyl
 107++CEDE                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CEDE F2 B0 CE    >                        jp		p, .PointsOutofBounds
 108++CEE1 79                                   ld      a,c
 109++CEE2 DD A5                                and     ixl
 110++CEE4                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CEE4 FA B0 CE    >                        jp		m, .PointsOutofBounds
 111++CEE7              ; Clip line: calulate the line's gradient
 112++CEE7              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CEE7              .LL115:                 ClearCarryFlag
 113++CEE7 B7          >                        or a
 114++CEE8 E5 D5        .CalcDX:                push    hl,,de
 115++CEEA EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CEEB ED 52                                sbc     hl,de
 117++CEED                                     ; pop     de                          ; we need de back
 118++CEED 22 56 CE                             ld      (clipDx),hl
 119++CEF0 7C                                   ld      a,h
 120++CEF1 32 58 CE                             ld      (clipDxHighNonABS),a
 121++CEF4                                     ; ld      a,e                         ;a = x2 lo
 122++CEF4                                     ; sbc     a,l                         ;a= a - x1
 123++CEF4                                     ; ld      (clipDx),a
 124++CEF4                                     ; ld      a,d
 125++CEF4                                     ; sbc     a,h
 126++CEF4                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CEF4                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CEF4              .CalcDy:                ClearCarryFlag
 128++CEF4 B7          >                        or a
 129++CEF5 DD E5 E1                             ld      hl,ix
 130++CEF8 ED 42                                sbc     hl,bc
 131++CEFA 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CEFC 22 59 CE                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CEFF 7C           .CalcQuadrant:          ld      a,h
 134++CF00                                     ; ld      a,ixl
 135++CF00                                     ; sbc     c
 136++CF00                                     ; ld      (clipDy),a
 137++CF00                                     ; ld      a,ixh
 138++CF00                                     ; sbc     a,b
 139++CF00                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CF00                                     ; pop     hl
 141++CF00
 142++CF00              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CF00                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CF00 21 57 CE                             ld      hl,clipDxHigh
 145++CF03 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CF04 32 BF 9D                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CF07 32 5C CE                             ld      (clipDxySign),a
 148++CF0A 3A 5A CE     .AbsDy:                 ld      a,(clipDyHigh)
 149++CF0D ED 27 80                             test    $80
 150++CF10 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CF12 2A 59 CE                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CF15                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CF15 AF          >					xor 	a
 152++CF16 93          >                    sub 	e
 152++CF17 5F          >                    ld 		e,a
 152++CF18 9F          >                    sbc 	a,a
 152++CF19 92          >                    sub 	d
 152++CF1A 57          >                    ld 		d,a
 153++CF1B 22 59 CE                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CF1E 2A 56 CE     .LL110:                 ld      hl,(clipDx)
 155++CF21 3A 57 CE                             ld      a,(clipDxHigh)
 156++CF24 ED 27 80                             test    $80                         ; is it a negative X
 157++CF27 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CF29                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CF29                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CF29 AF          >					xor 	a
 159++CF2A 95          >					sub 	l
 159++CF2B 6F          >					ld 		l,a
 159++CF2C 9F          >					sbc 	a,a
 159++CF2D 94          >					sub 	h
 159++CF2E 67          >					ld 		h,a
 160++CF2F                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CF2F              .LL111:               ;  push    de
 162++CF2F                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CF2F                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CF2F 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CF30 B2                                   or      d
 166++CF31 28 0A                                jr      z,.CalculateDelta
 166++CF33
 167++CF33                                      ShiftDERight1
 167++CF33 CB 3A       >			   srl d
 167++CF35 CB 1B       >			   rr  e
 168++CF37                                      ShiftHLRight1
 168++CF37 CB 3C       >			   srl h
 168++CF39 CB 1D       >			   rr  l
 169++CF3B 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CF3D              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CF3D                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CF3D              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CF3D AF           .LL113:                 xor     a
 174++CF3E 32 D9 9D                             ld      (varT),a                    ; t = 0
 175++CF41 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CF42                                      JumpIfALTNusng  e, .LL114           ;
 176++CF42 BB          >                        cp      e
 176++CF43 DA 53 CF    >                        jp		c, .LL114
 177++CF46              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CF46 32 BD 9D     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CF49 57                                   ld      d,a                         ; d = also Q for calc
 180++CF4A 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CF4B CD B1 AF                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CF4E 32 BE 9D                             ld      (varR),a                    ;
 183++CF51 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CF53              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CF53 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CF54 57                                   ld      d,a
 187++CF55 32 BD 9D                             ld      (varQ),a
 188++CF58 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CF59 CD B1 AF                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CF5C 32 BE 9D                             ld      (varR),a                    ;
 191++CF5F 21 D9 9D                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CF62 35                                   dec     (hl)
 193++CF63 D1           .LL116:                 pop     de                          ; get back X2
 194++CF64 E1                                   pop     hl                          ; get back X1 into hl,
 195++CF65 3A BE 9D                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CF68 32 5B CE                             ld      (clipGradient),a
 197++CF6B FD 6F                                ld      iyl,a
 198++CF6D                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CF6D                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CF6D                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CF6D                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CF6D 3A BF 9D                             ld      a,(varS)
 203++CF70 32 5C CE                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CF73                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CF73 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CF75 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CF77 28 05                                jr      z,.LL138                    ;
 208++CF79 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CF7C 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CF7E              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CF7E CD A5 CF     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CF81 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CF83 ED 27 80                             test    $80
 214++CF86 28 1A                                jr      z,.LL124
 215++CF88              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CF88 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CF89 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CF8A C2 B0 CE                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CF8D B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CF8E FA B0 CE                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CF91              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CF91              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CF91 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CF92 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CF94 C5                                   push    bc
 226++CF95 DD E1                                pop     ix
 227++CF97 C1                                   pop     bc
 228++CF98 CD A5 CF                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CF9B 3A 5F CE                             ld      a,(SWAP)
 230++CF9E 3D                                   dec     a
 231++CF9F 32 5F CE                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CFA2 C3 9D CE     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CFA5
 234++CFA5              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CFA5              ; iyh still holds XX13 iyl still holds gradient
 236++CFA5 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CFA6 ED 27 80                             test    $80
 238++CFA9 28 17                                jr      z,.LL119
 239++CFAB 32 BF 9D     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CFAE E5 D5 C5                             push    hl,,de,,bc
 241++CFB1 CD 27 D0                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CFB4                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CFB4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CFB4 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CFB7 2A 60 CE                             ld      hl,(varYX)
 246++CFBA              ;                        ex      hl,de
 247++CFBA                                  ;    ld      hl,bc
 248++CFBA 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CFBB 44 4D                                ld      bc,hl
 250++CFBD 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CFC0               ;                       pop     de
 252++CFC0 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CFC2 FE 00        .LL119:                 cp      0
 254++CFC4 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CFC6 3D                                   dec     a
 256++CFC7 32 BF 9D                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CFCA E5 D5 C5                             push    hl,,de,,bc
 258++CFCD CD 27 D0                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CFD0                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CFD0                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CFD0 C1 D1 E1                             pop     hl,,de,,bc
 262++CFD3                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CFD3 2A 60 CE                             ld      hl,(varYX)
 264++CFD6                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CFD6 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CFD7 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CFD9                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CFD9                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CFD9                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CFD9 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CFDC                                    ;  pop     de
 272++CFDC              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CFDC 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CFDD ED 27 80                             test    $80                         ;
 275++CFE0 28 1A                                jr      z,.LL135                    ;
 276++CFE2 32 BF 9D                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CFE5 79                                   ld      a,c                         ; Set R = y1_lo
 278++CFE6 32 BE 9D                             ld      (varR),a                    ;
 279++CFE9 E5 D5 C5                             push    hl,,de,,bc
 280++CFEC CD 4E D0                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CFEF                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CFEF                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CFEF C1 D1 E1                             pop     hl,,de,,bc
 284++CFF2 D5                                   push    de
 285++CFF3 EB                                   ex      hl,de                       ; de = x1
 286++CFF4 2A 60 CE                             ld      hl,(varYX)                  ; hl = varYX
 287++CFF7 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CFF8 D1                                   pop     de                          ; de = x2 again
 289++CFF9 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CFFC 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CFFD E6 80                                and     $80
 292++CFFF B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++D000 C8                                   ret     z
 294++D001 E5                                   push    hl
 295++D002 60 69                                ld      hl,bc
 296++D004 01 80 00                             ld      bc,128
 297++D007 B7                                   or      a
 298++D008 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++D00A 22 BE 9D                             ld      (varRS), hl                 ; and now RS (or SR)
 300++D00D 7C                                   ld      a,h
 301++D00E E1                                   pop     hl
 302++D00F ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++D012 C0                                   ret     nz
 304++D013              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++D013 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++D016 CD 4E D0                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++D019                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++D019                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++D019 C1 D1 E1                             pop     hl,,de,,bc
 310++D01C D5                                   push    de
 311++D01D EB                                   ex      hl,de
 312++D01E 2A 60 CE                             ld      hl,(varYX)
 313++D021 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++D022 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++D025 D1                                   pop     de
 316++D026 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++D027
 318++D027
 319++D027              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++D027              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++D027              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++D027              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++D027 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++D028 32 BE 9D                             ld      (varR),a
 325++D02B CD 96 D0                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++D02E F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++D02F C5                                   push    bc
 328++D030 47                                   ld      b,a
 329++D031 3A D9 9D                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++D034 FE 00                                cp      0
 331++D036 78                                   ld      a,b
 332++D037 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++D038 20 23                                jr      nz, LL121
 334++D03A              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++D03A 3A 5B CE     LL122:                  ld      a,(clipGradient)
 336++D03D 32 BD 9D                             ld      (varQ),a; optimise
 337++D040 CD CD AD                             call    HLequSRmulQdiv256
 338++D043 22 60 CE                             ld      (varYX),hl
 339++D046 F1                                   pop     af
 340++D047 ED 27 80                             test    $80
 341++D04A CA 89 D0                             jp      z,LL133
 342++D04D C9                                   ret
 343++D04E              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++D04E              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++D04E              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++D04E              ;
 347++D04E              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++D04E              ;                          LL133                Negate (Y X) and return from the subroutine
 349++D04E              ;                          LL128                Contains an RTS
 350++D04E CD 96 D0     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++D051 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++D052 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++D053 47                                   ld      b,a
 354++D054 3A D9 9D                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++D057 FE 00                                cp      0
 356++D059 78                                   ld      a,b
 357++D05A C1                                   pop     bc
 358++D05B 20 DD                                jr      nz, LL122
 359++D05D              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++D05D 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++D060 2A BE 9D                             ld      hl,(varRS)                  ; hl = RS
 362++D063 3A BD 9D                             ld      a,(varQ)
 363++D066 47                                   ld      b,a                         ; b = q
 364++D067              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++D067 CB 25       >			   sla l
 364++D069 CB 14       >			   rl  h
 365++D06B 7C                                   ld      a,h
 366++D06C 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++D06E                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++D06E B8          >                        cp      b
 367++D06F DA 7A D0    >                        jp		c, .LL132
 368++D072 3F           .LL131:                 ccf                                 ; compliment carry
 369++D073 98                                   sbc     a,b                         ; q
 370++D074 67                                   ld      h,a                         ; h (s)
 371++D075 7D                                   ld      a,l                         ; r
 372++D076 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++D078 37                                   scf                                 ; set carry for next rolls
 374++D079 3F                                   ccf
 375++D07A              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++D07A CB 13       >               rl  e
 375++D07C CB 12       >               rl  d
 376++D07E 38 E7                                jr      c,.LL130                    ;
 377++D080 ED 53 60 CE                          ld      (varYX),de
 378++D084 F1                                   pop     af              ; get back sign
 379++D085 ED 27 80                             test    $80
 380++D088 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++D089 2A 60 CE     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++D08C                                      NegHL
 382++D08C AF          >                    xor a
 382++D08D 95          >                    sub l
 382++D08E 6F          >                    ld l,a
 382++D08F 9F          >                    sbc a,a
 382++D090 94          >                    sub h
 382++D091 67          >                    ld h,a
 383++D092 22 60 CE                             ld      (varYX),hl
 384++D095 C9           LL128:                  ret
 385++D096              ; Do the following, in this order:  Q = XX12+2
 386++D096              ;                                   A = S EOR XX12+3
 387++D096              ;                                   (S R) = |S R|
 388++D096              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++D096 3A 5B CE     LL129:                  ld      a,(clipGradient)
 390++D099 32 BD 9D                             ld      (varQ),a                    ;Set Q = XX12+2
 391++D09C 3A BF 9D                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++D09F E5 F5                                push    hl,,af
 393++D0A1 ED 27 80                             test    $80
 394++D0A4 28 0C                                jr      z,.LL127
 395++D0A6 2A BE 9D                             ld      hl,(varRS)                  ; else SR = | SR|
 396++D0A9                                      NegHL
 396++D0A9 AF          >                    xor a
 396++D0AA 95          >                    sub l
 396++D0AB 6F          >                    ld l,a
 396++D0AC 9F          >                    sbc a,a
 396++D0AD 94          >                    sub h
 396++D0AE 67          >                    ld h,a
 397++D0AF 22 BE 9D                             ld      (varRS),hl
 398++D0B2 21 5C CE     .LL127:                 ld      hl,clipDxySign
 399++D0B5 F1                                   pop     af
 400++D0B6 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++D0B7 E1                                   pop     hl
 402++D0B8 C9                                   ret
 403++D0B9
# file closed: ././ModelRender/CLIP-LL145.asm
 743+ D0B9              ;--------------------------------------------------------------------------------------------------------
 744+ D0B9                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++D0B9              ; Set TransMatTo
   2++D0B9              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++D0B9              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++D0B9              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++D0B9              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++D0B9              CopyRotmatToTransMat:                       ; Tested
   7++D0B9 21 15 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++D0BC
   9++D0BC 11 3E C0                             ld      de,UBnkTransmatSidevX
  10++D0BF                                      SixLDIInstrunctions
  10++D0BF ED A0       >                        ldi
  10++D0C1 ED A0       >                        ldi
  10++D0C3 ED A0       >                        ldi
  10++D0C5 ED A0       >                        ldi
  10++D0C7 ED A0       >                        ldi
  10++D0C9 ED A0       >                        ldi
  11++D0CB 21 1B C0                             ld      hl,UBnkrotmatRoofvX
  12++D0CE 11 44 C0                             ld      de, UBnkTransmatRoofvX
  13++D0D1                                      SixLDIInstrunctions
  13++D0D1 ED A0       >                        ldi
  13++D0D3 ED A0       >                        ldi
  13++D0D5 ED A0       >                        ldi
  13++D0D7 ED A0       >                        ldi
  13++D0D9 ED A0       >                        ldi
  13++D0DB ED A0       >                        ldi
  14++D0DD 21 21 C0                             ld      hl,UBnkrotmatNosevX
  15++D0E0 11 4A C0                             ld      de, UBnkTransmatNosevX
  16++D0E3                                      SixLDIInstrunctions
  16++D0E3 ED A0       >                        ldi
  16++D0E5 ED A0       >                        ldi
  16++D0E7 ED A0       >                        ldi
  16++D0E9 ED A0       >                        ldi
  16++D0EB ED A0       >                        ldi
  16++D0ED ED A0       >                        ldi
  17++D0EF C9                                   ret
  18++D0F0
  19++D0F0              CopyRotToTransMacro:    MACRO
  20++D0F0 ~                                    ld      hl,UBnkrotmatSidevX
  21++D0F0 ~                                    ld      de,UBnkTransmatSidevX
  22++D0F0 ~                                    SixLDIInstrunctions
  23++D0F0 ~                                    SixLDIInstrunctions
  24++D0F0 ~                                    SixLDIInstrunctions
  25++D0F0                                      ENDM
  26++D0F0
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 745+ D0F0                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++D0F0              TransposeXX12ByShipToXX15:
   2++D0F0 2A 89 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++D0F3 7C           		ld		a,h			                        ; get XX12 Sign
   4++D0F4 E6 80        		and		$80									; check sign bit on high byte
   5++D0F6 47           		ld		b,a									; and put it in of 12xlo in b
   6++D0F7                      ;110921 debugld      h,0
   7++D0F7 7C                   ld      a,h
   8++D0F8 E6 7F                and     $7F
   9++D0FA 67                   ld      h,a
  10++D0FB                      ;110921 debugld      h,0
  11++D0FB ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++D0FF 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++D102 E6 80        		and		$80									; make sure we only have bit 7
  14++D104 4F           		ld		c,a									; and put sign of unkxsgn c
  15++D105 CD 9E B4     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++D108 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++D109 67           		ld		h,a
  18++D10A 22 83 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++D10D              ; ..................................
  20++D10D 2A 8B C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++D110 7C           		ld		a,h
  22++D111 E6 80        		and		$80
  23++D113 47           		ld		b,a
  24++D114                      ;110921 debugld      h,0
  25++D114 7C                   ld      a,h
  26++D115 E6 7F                and     $7F
  27++D117 67                   ld      h,a
  28++D118                      ;110921 debugld      h,0
  29++D118 ED 5B 0F C0  		ld		de,(UBnKylo)
  30++D11C 3A 11 C0     		ld		a,(UBnKysgn)
  31++D11F E6 80        		and		$80									; make sure we only have bit 7
  32++D121 4F           		ld		c,a
  33++D122 CD 9E B4     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++D125 B4           		or		h									; combine sign in A with H
  35++D126 67           		ld		h,a
  36++D127 22 85 C0     		ld		(UBnkYScaled),hl
  37++D12A              ; ..................................
  38++D12A 2A 8D C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++D12D 7C           		ld		a,h
  40++D12E E6 80        		and		$80
  41++D130 47           		ld		b,a
  42++D131                      ;110921 debugld      h,0
  43++D131 7C                   ld      a,h
  44++D132 E6 7F                and     $7F
  45++D134 67                   ld      h,a
  46++D135                      ;110921 debugld      h,0
  47++D135 ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++D139 3A 14 C0     		ld		a,(UBnKzsgn)
  49++D13C E6 80        		and		$80									; make sure we only have bit 7
  50++D13E 4F           		ld		c,a
  51++D13F CD 9E B4     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++D142 B4           		or		h									; combine sign in A with H
  53++D143 67           		ld		h,a
  54++D144 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++D146 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++D148 E6 7F                and     $7F                                 ; a = value unsigned
  57++D14A 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++D14C 7D                   ld      a,l                                 ; get low byte now
  59++D14D              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++D14D FE 04       >                        cp      4
  59++D14F DA 5E D1    >                        jp		c, ClampZto4
  60++D152              NoClampZto4:
  61++D152 22 87 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++D155 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++D156 32 D9 9D             ld      (varT),a
  64++D159 7C           		ld		a,h
  65++D15A 32 BC 9D             ld      (varU),a
  66++D15D C9           		ret
  67++D15E              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++D15E 21 04 00     		ld		hl,4
  69++D161 22 87 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++D164 7D           		ld		a,l
  71++D165 32 D9 9D             ld      (varT),a                            ;                                                                           ;;;
  72++D168 7C           		ld		a,h
  73++D169 32 BC 9D             ld      (varU),a 						; compatibility for now
  74++D16C C9           		ret
  75++D16D
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 746+ D16D                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++D16D              ScaleNodeTo8Bit:								; TODO make signed
   2++D16D ED 4B 87 C0  	ld			bc,(UBnkZScaled)
   3++D171 2A 83 C0     	ld			hl,(UBnkXScaled)
   4++D174 ED 5B 85 C0  	ld			de,(UBnkYScaled)
   5++D178              SetABSbc:
   6++D178 78           	ld			a,b
   7++D179 DD 67        	ld			ixh,a
   8++D17B E6 7F        	and			SignMask8Bit
   9++D17D 47           	ld			b,a									; bc = ABS bc
  10++D17E              SetABShl:
  11++D17E 7C           	ld			a,h
  12++D17F DD 6F        	ld			ixl,a
  13++D181 E6 7F        	and			SignMask8Bit
  14++D183 67           	ld			h,a									; hl = ABS hl
  15++D184              SetABSde:
  16++D184 7A           	ld			a,d
  17++D185 FD 67        	ld			iyh,a
  18++D187 E6 7F        	and			SignMask8Bit
  19++D189 57           	ld			d,a									; de = ABS de
  20++D18A              ScaleNodeTo8BitLoop:
  21++D18A 78               ld          a,b		                            ; U	\ z hi
  22++D18B B4           	or			h                                   ; XX15+1	\ x hi
  23++D18C B2           	or			d                                   ; XX15+4	\ y hi
  24++D18D 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++D18F                  ShiftHLRight1
  25++D18F CB 3C       >			   srl h
  25++D191 CB 1D       >			   rr  l
  26++D193                  ShiftDERight1
  26++D193 CB 3A       >			   srl d
  26++D195 CB 1B       >			   rr  e
  27++D197              	ShiftBCRight1
  27++D197 CB 38       >			   srl b
  27++D199 CB 19       >			   rr  c
  28++D19B C3 8A D1         jp          ScaleNodeTo8BitLoop
  29++D19E              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++D19E DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++D1A0 E6 80        	and			SignOnly8Bit
  32++D1A2 B0           	or			b
  33++D1A3 47           	ld			b,a
  34++D1A4              SignforHL:
  35++D1A4 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++D1A6 E6 80        	and			SignOnly8Bit
  37++D1A8 B4           	or			h
  38++D1A9 67           	ld			h,a
  39++D1AA              SignforDE:
  40++D1AA FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++D1AC E6 80        	and			SignOnly8Bit
  42++D1AE B2           	or			d
  43++D1AF 57           	ld			d,a
  44++D1B0              SignsDoneSaveResult:
  45++D1B0 ED 43 87 C0  	ld			(UBnkZScaled),bc
  46++D1B4 22 83 C0     	ld			(UBnkXScaled),hl
  47++D1B7 ED 53 85 C0  	ld			(UBnkYScaled),de
  48++D1BB 78           	ld			a,b
  49++D1BC 32 BC 9D     	ld			(varU),a
  50++D1BF 79           	ld			a,c
  51++D1C0 32 D9 9D     	ld			(varT),a
  52++D1C3 C9           	ret
  53++D1C4
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 747+ D1C4
 748+ D1C4              ;--------------------------------------------------------------------------------------------------------
 749+ D1C4 21 B0 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 750+ D1C7 ED 31                                add     hl,a
 751+ D1C9 3E FF                                ld      a,$FF
 752+ D1CB 77                                   ld      (hl),a
 753+ D1CC C9                                   ret
 754+ D1CD              ;--------------------------------------------------------------------------------------------------------
 755+ D1CD 21 B0 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 756+ D1D0 ED 31                                add     hl,a
 757+ D1D2 AF                                   xor     a
 758+ D1D3 77                                   ld      (hl),a
 759+ D1D4 C9                                   ret
 760+ D1D5              ;--------------------------------------------------------------------------------------------------------
 761+ D1D5 3A 18 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 762+ D1D8 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 763+ D1DA CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 764+ D1DC 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 765+ D1DD 21 B0 C0                             ld      hl,UbnkFaceVisArray
 766+ D1E0 3E FF                                ld      a,$FF
 767+ D1E2              SetAllFacesVisibleLoop:
 768+ D1E2 77           EE30:                   ld      (hl),a
 769+ D1E3 23                                   inc     hl
 770+ D1E4 10 FC                                djnz    SetAllFacesVisibleLoop
 771+ D1E6 C9                                   ret
 772+ D1E7              ;--------------------------------------------------------------------------------------------------------
 773+ D1E7 3A 18 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 774+ D1EA CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 775+ D1EC CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 776+ D1EE 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 777+ D1EF 06 10                                ld      b,16
 778+ D1F1 21 B0 C0                             ld      hl,UbnkFaceVisArray
 779+ D1F4 3E 00                                ld      a,$00
 780+ D1F6 77           SetAllFacesHiddenLoop:  ld      (hl),a
 781+ D1F7 23                                   inc     hl
 782+ D1F8 10 FC                                djnz    SetAllFacesHiddenLoop
 783+ D1FA C9                                   ret
 784+ D1FB
 785+ D1FB              ;;;;X = normal scale
 786+ D1FB              ;;;;ZtempHi = zhi
 787+ D1FB              ;;;;......................................................
 788+ D1FB              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 789+ D1FB              ;;;;  Loop                                              ::LL90
 790+ D1FB              ;;;;     inc X
 791+ D1FB              ;;;;     divide X, Y & ZtempHiLo by 2
 792+ D1FB              ;;;;  Until ZtempHi = 0
 793+ D1FB              ;;;;......................................................
 794+ D1FB              ;-LL21---------------------------------------------------------------------------------------------------
 795+ D1FB                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++D1FB              ;divdide by 16 using undocumented instrunctions
   2++D1FB              Norm256mulAdivQ:
   3++D1FB 47               ld      b,a
   4++D1FC 0E 00            ld      c,0
   5++D1FE 16 00            ld      d,0
   6++D200 3A BD 9D         ld      a,(varQ)
   7++D203 5F               ld      e,a
   8++D204              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D204              ;Output: BC = Quotient, HL = Remainder
  10++D204              NormDIV16UNDOC:
  11++D204 21 00 00         ld      hl,0
  12++D207 78               ld      a,b
  13++D208 06 10            ld      b,16
  14++D20A              NormDIV16UNDOCLOOP:
  15++D20A CB 31        	sll	    c		; unroll 16 times
  16++D20C 17           	rla	    		; ...
  17++D20D ED 6A        	adc	    hl,hl		; ...
  18++D20F ED 52        	sbc	    hl,de		; ...
  19++D211 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D213 19           	add	    hl,de		; ...
  21++D214 0D           	dec	    c		; ...
  22++D215              NormDIV16UNDOCSKIP:
  23++D215 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D217 79               ld      a,c
  25++D218 32 BE 9D         ld      (varR),a
  26++D21B C9               ret
  27++D21C
  28++D21C              ; Tested OK
  29++D21C              NormaliseTransMat:
  30++D21C              ;LL21
  31++D21C 21 4F C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D21F 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D221 79                   ld      a,c
  34++D222 32 BD 9D             ld      (varQ),a                    ; set up varQ
  35++D225 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D227              LL21Loop:
  37++D227 56                   ld      d,(hl)
  38++D228 2B                   dec     hl
  39++D229 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D22A                      ShiftDELeft1                        ; De = DE * 2
  40++D22A CB 23       >			   sla e
  40++D22C CB 12       >			   rl  d
  41++D22E 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D22F E5           		push	hl
  43++D230 C5           		push	bc
  44++D231 CD FB D1             call    Norm256mulAdivQ
  45++D234              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D234 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D235 C1           		pop		bc
  48++D236 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D237 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D238 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D239 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D23B C9                   ret
  53++D23C
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 796+ D23C              ;-LL91---------------------------------------------------------------------------------------------------
 797+ D23C
 798+ D23C              ; Now we have
 799+ D23C              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 800+ D23C              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 801+ D23C              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 802+ D23C              ;
 803+ D23C              ;--------------------------------------------------------------------------------------------------------
 804+ D23C                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++D23C              ; TESTEDOK
   2++D23C
   3++D23C              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D23C              ;        ld      a,(XX17)
   5++D23C              ;        ld      ixl,a
   6++D23C              ;        ld      ixh,9
   7++D23C              ;        ld      hl,UBnkTransInv0x
   8++D23C              ;        ld      a,(hl)
   9++D23C              ;ScaleNode:
  10++D23C              ;        ld      b,ixl
  11++D23C              ;ScaleNodeLoop:
  12++D23C              ;        sla      a
  13++D23C              ;        djnz    ScaleNodeLoop
  14++D23C              ;        ld      (hl),a
  15++D23C              ;        inc     hl
  16++D23C              ;        inc     hl
  17++D23C              ;        dec     ixh
  18++D23C              ;        jr      nz,ScaleNode
  19++D23C              ;        ret
  20++D23C
  21++D23C
  22++D23C              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D23C              ; we coudl combine this with move to transmat later as an optimisation
  24++D23C              ; INPUT - All Scaled
  25++D23C              ;  They transmat has already been put into side, roof nose order
  26++D23C              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D23C              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D23C              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D23C              ; OUTPUT
  30++D23C              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D23C              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D23C              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D23C              ; First all side values become compoment 0 of each vector
  34++D23C 2A 3E C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D23F ED 5B 44 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D243 ED 4B 4A C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D247 22 56 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D24A ED 53 58 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D24E ED 43 5A C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D252 2A 40 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D255 ED 5B 46 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D259 ED 4B 4C C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D25D 22 5E C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D260 ED 53 60 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D264 ED 43 62 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D268 2A 42 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D26B ED 5B 48 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D26F ED 4B 4E C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D273 22 66 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D276 ED 53 68 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D27A ED 43 6A C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D27E C9                   ret
  53++D27F
  54++D27F
# file closed: ./Universe/Ships/InverseXX16.asm
 805+ D27F              ;--------------------------------------------------------------------------------------------------------
 806+ D27F              ;--------------------------------------------------------------------------------------------------------
 807+ D27F              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 808+ D27F              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 809+ D27F              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 810+ D27F              ; Returns
 811+ D27F              ;
 812+ D27F              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 813+ D27F              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 814+ D27F              ;
 815+ D27F              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 816+ D27F              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 817+ D27F              ;
 818+ D27F              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 819+ D27F              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 820+ D27F              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 821+ D27F ~                                    ld      c,0
 822+ D27F ~                                    ld      a,param3                      ;
 823+ D27F ~                                    bit     7,a
 824+ D27F ~                                    jr      z,.val2Pos
 825+ D27F ~            ;HandleSignebits
 826+ D27F ~                                    neg
 827+ D27F ~                                    ld      c,$80
 828+ D27F ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 829+ D27F ~                                    ld      a,param2                        ; A = XX16 element
 830+ D27F ~                                    bit     7,a
 831+ D27F ~                                    jr      z,.val1Pos
 832+ D27F ~            ;HandleSignebits
 833+ D27F ~                                    neg
 834+ D27F ~                                    ld      b,a
 835+ D27F ~                                    ld      a,c
 836+ D27F ~                                    xor     $80
 837+ D27F ~                                    ld      c,a
 838+ D27F ~                                    ld      a,b
 839+ D27F ~            .val1Pos:               ld      d,a
 840+ D27F ~            ;AequAmulQdiv256:
 841+ D27F ~                                    mul
 842+ D27F ~                                    ld      a,c
 843+ D27F ~                                    bit     7,a
 844+ D27F ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 845+ D27F ~                                    jr      z,.resultPos
 846+ D27F ~                                    neg
 847+ D27F ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 848+ D27F                                      ENDM
 849+ D27F
 850+ D27F
 851+ D27F               ; TESTEDOK
 852+ D27F              XX12DotOneRow:
 853+ D27F              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 853+ D27F 3A 83 C0    >                        ld      a,(UBnkXScaled)                        ;
 853+ D282 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 853+ D283 7E          >                        ld      a,(hl)                        ; A = XX16 element
 853+ D284 57          >                        ld      d,a
 853+ D285 ED 30       >                        mul
 853+ D287 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 853+ D288 32 D9 9D    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 854+ D28B 23                                   inc     hl                                  ; move to sign byte
 855+ D28C              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 855+ D28C 3A 84 C0    >                        ld      a,(UBnkXScaledSign)
 855+ D28F AE          >                        xor     (hl)
 856+ D290 32 BF 9D                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 857+ D293 23                                   inc     hl
 858+ D294              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 858+ D294 3A 85 C0    >                        ld      a,(UBnkYScaled)                        ;
 858+ D297 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 858+ D298 7E          >                        ld      a,(hl)                        ; A = XX16 element
 858+ D299 57          >                        ld      d,a
 858+ D29A ED 30       >                        mul
 858+ D29C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 858+ D29D 32 BD 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 859+ D2A0                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 859+ D2A0 3A D9 9D    >                        ld       a,(varT)
 859+ D2A3 32 BE 9D    >                        ld       (varR),a
 860+ D2A6 23                                   inc     hl
 861+ D2A7                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 861+ D2A7 3A 86 C0    >                        ld      a,(UBnkYScaledSign)
 861+ D2AA AE          >                        xor     (hl)
 862+ D2AB              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 863+ D2AB E5           STequSRplusAQ           push    hl
 864+ D2AC CD BC B5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 865+ D2AF E1                                   pop     hl
 866+ D2B0 32 D9 9D                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 867+ D2B3 23                                   inc     hl
 868+ D2B4              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 868+ D2B4 3A 87 C0    >                        ld      a,(UBnkZScaled)                        ;
 868+ D2B7 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 868+ D2B8 7E          >                        ld      a,(hl)                        ; A = XX16 element
 868+ D2B9 57          >                        ld      d,a
 868+ D2BA ED 30       >                        mul
 868+ D2BC 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 868+ D2BD 32 BD 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 869+ D2C0                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 869+ D2C0 3A D9 9D    >                        ld       a,(varT)
 869+ D2C3 32 BE 9D    >                        ld       (varR),a
 870+ D2C6 23                                   inc     hl
 871+ D2C7                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 871+ D2C7 3A 88 C0    >                        ld      a,(UBnkZScaledSign)
 871+ D2CA AE          >                        xor     (hl)
 872+ D2CB              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 873+ D2CB CD BC B5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 874+ D2CE              ; Now we exit with A = result S = Sign
 875+ D2CE C9                                   ret
 876+ D2CF
 877+ D2CF
 878+ D2CF              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 879+ D2CF              ;TESTED OK
 880+ D2CF              XX12EquXX15DotProductXX16:
 881+ D2CF              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 882+ D2CF 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 883+ D2D2 21 3E C0                             ld      hl,UBnkTransmatSidevX
 884+ D2D5 CD 7F D2                             call    XX12DotOneRow
 885+ D2D8 32 89 C0                             ld      (UBnkXX12xLo),a
 886+ D2DB 3A BF 9D                             ld      a,(varS)
 887+ D2DE 32 8A C0                             ld      (UBnkXX12xSign),a
 888+ D2E1 21 44 C0                             ld      hl,UBnkTransmatRoofvX
 889+ D2E4 CD 7F D2                             call    XX12DotOneRow
 890+ D2E7 32 8B C0                             ld      (UBnkXX12yLo),a
 891+ D2EA 3A BF 9D                             ld      a,(varS)
 892+ D2ED 32 8C C0                             ld      (UBnkXX12ySign),a
 893+ D2F0 21 4A C0                             ld      hl,UBnkTransmatNosevX
 894+ D2F3 CD 7F D2                             call    XX12DotOneRow
 895+ D2F6 32 8D C0                             ld      (UBnkXX12zLo),a
 896+ D2F9 3A BF 9D                             ld      a,(varS)
 897+ D2FC 32 8E C0                             ld      (UBnkXX12zSign),a
 898+ D2FF C9                                   ret
 899+ D300              ;--------------------------------------------------------------------------------------------------------
 900+ D300                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D300              CopyXX12ScaledToXX18:
   2++D300              CopyResultToDrawCam:
   3++D300                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D300 3A 89 C0    >                        ld       a,(XX12)
   3++D303 32 77 C0    >                        ld       (XX18),a
   4++D306                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D306 3A 8A C0    >                        ld       a,(XX12+1)
   4++D309 32 79 C0    >                        ld       (XX18+2),a
   5++D30C                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D30C 3A 8B C0    >                        ld       a,(XX12+2)
   5++D30F 32 7A C0    >                        ld       (XX18+3),a
   6++D312                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D312 3A 8C C0    >                        ld       a,(XX12+3)
   6++D315 32 7C C0    >                        ld       (XX18+5),a
   7++D318                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D318 3A 8D C0    >                        ld       a,(XX12+4)
   7++D31B 32 7D C0    >                        ld       (XX18+6),a
   8++D31E                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D31E 3A 8E C0    >                        ld       a,(XX12+5)
   8++D321 32 7F C0    >                        ld       (XX18+8),a
   9++D324 C9                   ret
  10++D325
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 901+ D325                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D325              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D325 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
   1++D328 32 83 C0    >                        ld       (UBnkXScaled),a
   2++D32B                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D32B 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
   2++D32E 32 84 C0    >                        ld       (UBnkXScaledSign),a
   3++D331                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D331 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
   3++D334 32 85 C0    >                        ld       (UBnkYScaled),a
   4++D337                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D337 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
   4++D33A 32 86 C0    >                        ld       (UBnkYScaledSign),a
   5++D33D                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D33D 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
   5++D340 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D343                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D343 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
   6++D346 32 88 C0    >                        ld       (UBnkZScaledSign),a
   7++D349 C9                                   ret
   8++D34A
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 902+ D34A                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D34A              CopyXX18toXX15:
   2++D34A              CopyDrawCamToScaled:
   3++D34A                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D34A 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D34D 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D350                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D350 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D353 32 84 C0    >                        ld       (UBnkXScaledSign),a
   5++D356                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D356 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D359 32 85 C0    >                        ld       (UBnkYScaled),a
   6++D35C                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D35C 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D35F 32 86 C0    >                        ld       (UBnkYScaledSign),a
   7++D362                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D362 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D365 32 87 C0    >                        ld       (UBnkZScaled),a
   8++D368                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D368 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D36B 32 88 C0    >                        ld       (UBnkZScaledSign),a
   9++D36E C9                   ret
  10++D36F
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 903+ D36F                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D36F 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D372 11 77 C0                             ld      de,UBnkDrawCam0xLo
   3++D375                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D375 ED A0       >		                ldi
   3++D377 ED A0       >		                ldi
   3++D379 ED A0       >		                ldi
   3++D37B ED A0       >		                ldi
   3++D37D ED A0       >		                ldi
   3++D37F ED A0       >		                ldi
   3++D381 ED A0       >		                ldi
   3++D383 ED A0       >		                ldi
   3++D385 ED A0       >		                ldi
   4++D387 C9                                   ret
   5++D388
   6++D388              CopyCameraToXX15Signed:
   7++D388 2A 77 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D38B 3A 79 C0             ld  a,(UBnkDrawCam0xSgn)
   9++D38E B4                   or  h
  10++D38F 67                   ld  h,a
  11++D390 22 83 C0             ld  (UBnkXScaled),hl
  12++D393 2A 7A C0             ld  hl,(UBnkDrawCam0yLo)
  13++D396 3A 7C C0             ld  a,(UBnkDrawCam0ySgn)
  14++D399 B4                   or  h
  15++D39A 67                   ld  h,a
  16++D39B 22 85 C0             ld  (UBnkYScaled),hl
  17++D39E 2A 7D C0             ld  hl,(UBnkDrawCam0zLo)
  18++D3A1 3A 7F C0             ld  a,(UBnkDrawCam0zSgn)
  19++D3A4 B4                   or  h
  20++D3A5 67                   ld  h,a
  21++D3A6 22 87 C0             ld  (UBnkZScaled),hl
  22++D3A9 C9                   ret
  23++D3AA
  24++D3AA              CopyXX18ScaledToXX15:
  25++D3AA              CopyDrawCamToScaledMatrix:
  26++D3AA                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D3AA 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++D3AD 32 88 C0    >                        ld       (UBnkZScaledSign),a
  27++D3B0                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D3B0 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++D3B3 32 83 C0    >                        ld       (UBnkXScaled),a
  28++D3B6                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D3B6 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++D3B9 32 84 C0    >                        ld       (UBnkXScaledSign),a
  29++D3BC                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D3BC 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++D3BF 32 85 C0    >                        ld       (UBnkYScaled),a
  30++D3C2                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D3C2 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++D3C5 32 86 C0    >                        ld       (UBnkYScaledSign),a
  31++D3C8                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D3C8 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++D3CB 32 87 C0    >                        ld       (UBnkZScaled),a
  32++D3CE C9                   ret
  33++D3CF
  34++D3CF              CopyXX15ToXX18Scaled:
  35++D3CF              CopyScaledMatrixToDrawCam:
  36++D3CF                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D3CF 3A 88 C0    >                        ld       a,(UBnkZScaledSign)
  36++D3D2 32 7F C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++D3D5                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D3D5 3A 83 C0    >                        ld       a,(UBnkXScaled)
  37++D3D8 32 77 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++D3DB                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D3DB 3A 84 C0    >                        ld       a,(UBnkXScaledSign)
  38++D3DE 32 79 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++D3E1                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D3E1 3A 85 C0    >                        ld       a,(UBnkYScaled)
  39++D3E4 32 7A C0    >                        ld       (UBnkDrawCam0yLo),a
  40++D3E7                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D3E7 3A 86 C0    >                        ld       a,(UBnkYScaledSign)
  40++D3EA 32 7C C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++D3ED                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D3ED 3A 87 C0    >                        ld       a,(UBnkZScaled)
  41++D3F0 32 7D C0    >                        ld       (UBnkDrawCam0zLo),a
  42++D3F3 C9                   ret
  43++D3F4
  44++D3F4
  45++D3F4              XX15EquXX15AddXX18:
  46++D3F4              LL94Z:
  47++D3F4 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D3F6 16 00                ld      d,0                                                     ;
  49++D3F8 3A 87 C0             ld      a,(UBnkZScaled)                                         ;
  50++D3FB 6F                   ld      l,a                                                     ;
  51++D3FC 3A 88 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D3FF 47                   ld      b,a                                                     ;
  53++D400 3A 7D C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D403 5F                   ld      e,a                                                     ;
  55++D404 3A 7F C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D407 4F                   ld      c,a                                                     ;
  57++D408 CD 9E B4             call    ADDHLDESignBC                                           ;
  58++D40B 47                   ld      b,a                                                     ;
  59++D40C 7C                   ld      a,h                                                     ;
  60++D40D 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D40E 32 88 C0             ld      (UBnkZScaledSign),a                                     ;
  62++D411 7D                   ld      a,l                                                     ;
  63++D412 32 87 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D415              LL94X:
  65++D415 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D417 16 00                ld      d,0                                                     ;
  67++D419 3A 83 C0             ld      a,(UBnkXScaled)                                         ;
  68++D41C 6F                   ld      l,a                                                     ;
  69++D41D 3A 84 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D420 47                   ld      b,a                                                     ;
  71++D421 3A 77 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D424 5F                   ld      e,a                                                     ;
  73++D425 3A 79 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D428 4F                   ld      c,a                                                     ;
  75++D429 CD 9E B4             call    ADDHLDESignBC                                           ;
  76++D42C 47                   ld      b,a                                                     ;
  77++D42D 7C                   ld      a,h                                                     ;
  78++D42E 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D42F 32 84 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D432 7D                   ld      a,l                                                     ;
  81++D433 32 83 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D436              LL94Y:
  83++D436 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D438 16 00                ld      d,0                                                     ;
  85++D43A 3A 85 C0             ld      a,(UBnkYScaled)                                         ;
  86++D43D 6F                   ld      l,a                                                     ;
  87++D43E 3A 86 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D441 47                   ld      b,a                                                     ;
  89++D442 3A 7A C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D445 5F                   ld      e,a                                                     ;
  91++D446 3A 7C C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D449 4F                   ld      c,a                                                     ;
  93++D44A CD 9E B4             call    ADDHLDESignBC                                           ;
  94++D44D 47                   ld      b,a                                                     ;
  95++D44E 7C                   ld      a,h                                                     ;
  96++D44F 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D450 32 86 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D453 7D                   ld      a,l                                                     ;
  99++D454 32 85 C0             ld      (UBnkYScaled),a                                         ;
 100++D457 C9                   ret
 101++D458
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 904+ D458                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D458              CopyXX12ToScaled:
   2++D458              CopyResultToScaled:
   3++D458                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D458 3A 89 C0    >                        ld       a,(XX12+0)
   3++D45B 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D45E                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D45E 3A 8B C0    >                        ld       a,(XX12+2)
   4++D461 32 85 C0    >                        ld       (UBnkYScaled),a
   5++D464                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D464 3A 8D C0    >                        ld       a,(XX12+4)
   5++D467 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D46A C9                   ret
   7++D46B
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 905+ D46B              ;--------------------------------------------------------------------------------------------------------
 906+ D46B                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D46B              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D46B              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D46B              ;;; S = XX12 XSign Xor XX15 XSign
   4++D46B              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D46B              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D46B              ;;; R = T
   7++D46B              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D46B              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D46B              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D46B              ;;; Q = A * Q /256 usigned (zdot)
  11++D46B              ;;; R = T
  12++D46B              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D46B
  14++D46B
  15++D46B
  16++D46B
  17++D46B
  18++D46B              MacroAequDxEdiv256usgn:	MACRO
  19++D46B ~            						mul
  20++D46B ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D46B              						ENDM
  22++D46B              DotProductXX12XX15:
  23++D46B 3A 89 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D46E                      JumpIfAIsZero dotxskipzero
  24++D46E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D46F CA 8C D4    >                        jp	    z, dotxskipzero
  25++D472 5F                   ld          e,a
  26++D473 3A 83 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D476 57                   ld          d,a                     ; de = xx12 x signed
  28++D477                      JumpIfAIsZero dotxskipzero
  28++D477 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D478 CA 8C D4    >                        jp	    z, dotxskipzero
  29++D47B ED 30        		mul
  30++D47D 42                   ld          b,d                     ; b = result
  31++D47E 3A 8A C0             ld          a,(UBnkXX12xSign)
  32++D481 21 84 C0             ld          hl,UBnkXScaledSign
  33++D484 AE                   xor         (hl)
  34++D485 E6 80                and         $80                     ; so sign bit only
  35++D487 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D489 C3 90 D4             jp          dotmuly
  37++D48C              dotxskipzero:
  38++D48C AF                   xor         a
  39++D48D 47                   ld          b,a
  40++D48E FD 67                ld          iyh,a
  41++D490              dotmuly:
  42++D490              ; now we have b = XX12 x &d  norm x signed
  43++D490 3A 8B C0             ld          a,(UBnkXX12yLo)
  44++D493                      JumpIfAIsZero dotyskipzero
  44++D493 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D494 CA B3 D4    >                        jp	    z, dotyskipzero
  45++D497 5F                   ld          e,a
  46++D498 3A 85 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D49B                      JumpIfAIsZero dotyskipzero
  47++D49B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D49C CA B3 D4    >                        jp	    z, dotyskipzero
  48++D49F 57                   ld          d,a                     ; de = xx12 x signed
  49++D4A0 ED 30                mul
  50++D4A2 4A                   ld          c,d                     ; c = result
  51++D4A3 DD 69                ld          ixl,c
  52++D4A5 3A 8C C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D4A8 21 86 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D4AB AE                   xor         (hl)                    ; XX15+3
  55++D4AC E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D4AE DD 67                ld          ixh,a
  57++D4B0 C3 B7 D4             jp          dotaddxy
  58++D4B3              dotyskipzero:
  59++D4B3 AF                   xor         a
  60++D4B4 4F                   ld          c,a
  61++D4B5 DD 67                ld          ixh,a
  62++D4B7              dotaddxy:
  63++D4B7              ; Optimise later as this is 16 bit
  64++D4B7 26 00                ld          h,0                     ;
  65++D4B9 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D4BA 16 00                ld          d,0                     ;
  67++D4BC 59                   ld          e,c                     ; de = ylo + yscaled
  68++D4BD FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D4BF 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D4C0 CD 9E B4             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D4C3 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D4C4 3A 8D C0             ld          a,(UBnkXX12zLo)         ;
  73++D4C7                      JumpIfAIsZero dotzskipzero
  73++D4C7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D4C8 CA ED D4    >                        jp	    z, dotzskipzero
  74++D4CB 5F                   ld          e,a                     ;
  75++D4CC 3A 87 C0             ld          a,(UBnkZScaled)         ;
  76++D4CF                      JumpIfAIsZero dotzskipzero
  76++D4CF A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D4D0 CA ED D4    >                        jp	    z, dotzskipzero
  77++D4D3 57                   ld          d,a
  78++D4D4 ED 30                mul
  79++D4D6 E5                   push        hl                      ; save prev result
  80++D4D7 3A 88 C0             ld          a,(UBnkZScaledSign)
  81++D4DA 21 8E C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D4DD AE                   xor         (hl)                    ; hi sign
  83++D4DE E6 80                and         $80                     ; a = sign of multiply
  84++D4E0 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D4E1 E1                   pop         hl
  86++D4E2 5A                   ld          e,d
  87++D4E3 16 00                ld          d,0
  88++D4E5 CD 9E B4             call ADDHLDESignBC
  89++D4E8 32 BF 9D             ld          (varS),a
  90++D4EB 7D                   ld          a,l
  91++D4EC C9                   ret                                 ; returns with A = value, varS = sign
  92++D4ED              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D4ED 78                   ld          a,b
  94++D4EE 32 BF 9D             ld          (varS),a
  95++D4F1 7D                   ld          a,l
  96++D4F2 C9                   ret
  97++D4F3              ;;;;       DotProductXX12XX15:
  98++D4F3              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D4F3              ;;;;       ld          e,a
 100++D4F3              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D4F3              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D4F3              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D4F3              ;;;;		mul
 104++D4F3              ;;;;       ld          b,d                     ; b as var T
 105++D4F3              ;;;;       ld          a,(UBnkXX12xSign)
 106++D4F3              ;;;;       ld          hl,UBnkXScaledSign
 107++D4F3              ;;;;       xor         (hl)
 108++D4F3              ;;;;       and         $80                     ; so sign bit only
 109++D4F3              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D4F3              ;;;; now we have b = XX12 x & norm x signed
 111++D4F3              ;;;; by here B = xlo & xscaled C = result sign
 112++D4F3              ;;;;       ld          a,(UBnkXX12yLo)
 113++D4F3              ;;;;       ld          e,a
 114++D4F3              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D4F3              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D4F3              ;;;;       mul
 117++D4F3              ;;;;       ld          a,d
 118++D4F3              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D4F3              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D4F3              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D4F3              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D4F3              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D4F3              ;;;;       xor         (hl)                    ; XX15+3
 124++D4F3              ;;;;       and         $80
 125++D4F3              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D4F3              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D4F3              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D4F3              ;;;;       ld          e,a                     ; use e as var Q
 129++D4F3              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D4F3              ;;;;       ld          d,a
 131++D4F3              ;;;;       mul
 132++D4F3              ;;;;       ld          a,d
 133++D4F3              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D4F3              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D4F3              ;;;;       ld          a,(UBnkZScaledSign)
 136++D4F3              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D4F3              ;;;;       xor         (hl)                    ; hi sign
 138++D4F3              ;;;;       and         $80
 139++D4F3              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D4F3              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D4F3
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 907+ D4F3              ;--------------------------------------------------------------------------------------------------------
 908+ D4F3              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 909+ D4F3                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++D4F3              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D4F3              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D4F3              ScaleNormal:
   4++D4F3              LL93:
   5++D4F3 3A C4 9D             ld      a,(XX17)                    ; scale--
   6++D4F6 DD 6F        		ld		ixl,a
   7++D4F8 3A 87 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D4FB DD 2D        		dec		ixl
   9++D4FD F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D4FE              ScaleLoop:
  11++D4FE              LL933:
  12++D4FE 21 83 C0             ld      hl,XX15
  13++D501 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D503 23                   inc     hl							; looking at XX15 x sign now
  15++D504 23                   inc     hl							; looking at XX15 y Lo now
  16++D505 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D507 23           		inc		hl							; looking at XX15 y sign now
  18++D508 23           		inc		hl							; looking at XX15 z Lo now
  19++D509 CB 3E        		srl		(hl)
  20++D50B 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D50C DD 2D                dec     ixl                         ; reduce scale
  22++D50E F2 FE D4             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D511 C9                   ret
  24++D512
# file closed: ./Universe/Ships/ScaleNormal.asm
 910+ D512              ;--------------------------------------------------------------------------------------------------------
 911+ D512                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D512              ScaleObjectDistance:
   2++D512              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D512 3A 1E C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D515 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D516              LL90:                                       ; scaling object distance
   6++D516 3A 7E C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D519 47                   ld      b,a                         ; z_hi (yReg)
   8++D51A                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D51A A7          >                        and     a
   8++D51B C8          >                        ret     z
   9++D51C              LL90Loop:
  10++D51C              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D51C 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D51D                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D51D 2A 7A C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D520 CB 3C       >                    srl   h
  12++D522 CB 1D       >                    rr    l
  12++D524 22 7A C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D527                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D527 2A 77 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D52A CB 3C       >                    srl   h
  13++D52C CB 1D       >                    rr    l
  13++D52E 22 77 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D531                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D531 2A 7D C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D534 CB 3C       >                    srl   h
  14++D536 CB 1D       >                    rr    l
  14++D538 22 7D C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D53B 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D53C                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D53C A7          >                        and     a
  16++D53D C2 1C D5    >                        jp	    nz,LL90Loop
  17++D540 C9                   ret
  18++D541
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 912+ D541              ;--------------------------------------------------------------------------------------------------------
 913+ D541
 914+ D541              ; Backface cull
 915+ D541              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 916+ D541              ; normal vector = cross product of ship ccordinates
 917+ D541              ;
 918+ D541
 919+ D541                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D541 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D542 47                                   ld      b,a                                                    ;;;
   3++D543 E6 80                                and     $80
   4++D545 32 84 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D548 78                                   ld      a,b
   6++D549 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D54B 47                                   ld      b,a
   8++D54C E6 80                                and     $80
   9++D54E 32 86 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D551 78                                   ld      a,b
  11++D552 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D554 E6 80                                and     $80
  13++D556 32 88 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D559 23                                   inc     hl                          ; move to X ccord
  15++D55A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D55B 32 83 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D55E 23                                   inc     hl                                                                                                                 ;;;
  18++D55F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D560 32 85 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D563 23                                   inc     hl                                                                                                                 ;;;
  21++D564 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D565 32 87 C0                             ld      (UBnkZScaled),a
  23++D568 C9                                   ret
  24++D569
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 920+ D569                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D569 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D56A 47                                   ld      b,a                         ; save sign bits to b
   3++D56B E6 80                                and     $80
   4++D56D 32 8A C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D570 78                                   ld      a,b
   6++D571 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D573 47                                   ld      b,a
   8++D574 E6 80                                and     $80
   9++D576 32 8C C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D579 78                                   ld      a,b
  11++D57A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D57C E6 80                                and     $80
  13++D57E 32 8E C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D581 23                                   inc     hl                          ; move to X ccord
  15++D582 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D583 32 89 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D586 23                                   inc     hl                                                                                                                 ;;;
  18++D587 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D588 32 8B C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D58B 23                                   inc     hl                                                                                                                 ;;;
  21++D58C 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D58D 32 8D C0                             ld      (UBnkXX12zLo),a
  23++D590 C9                                   ret
  24++D591
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 921+ D591              ;--------------------------------------------------------------
 922+ D591              ; Original loginc in EE29 (LL9 4 of 12)
 923+ D591              ; Enters with XX4 = z distnace scaled to 1 .. 31
 924+ D591              ; get number of faces * 4      FaceCntX4
 925+ D591              ; return if no faces
 926+ D591              ; get Face Normal scale factor FaceScale (XX17)
 927+ D591              ; get ship pos z hi     (XX18)
 928+ D591              ; While Z hi <> 0
 929+ D591              ;    FaceScale = FaceScale + 1           (XX17)
 930+ D591              ;    Ship pos y = ship pos y / 2         (XX18)
 931+ D591              ;    ship pos x = ship pos x / 2         (XX18)
 932+ D591              ;    ship pos z = ship pos z / 2         (XX18)
 933+ D591              ; Loop
 934+ D591              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 935+ D591              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 936+ D591              ; Copy XX12 into XX18
 937+ D591              ; For each face
 938+ D591              ;     Get Face sign and visibility distance byte
 939+ D591              ;     if normal visibility range  < XX4
 940+ D591              ;        Get Face data into XX12
 941+ D591              ;        if FaceScale (XX17) >= 4
 942+ D591              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 943+ D591              ;        else
 944+ D591              ;           Copy FaceScale scaled to X  (XX17)
 945+ D591              ;LabelOverflowLoop:
 946+ D591              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 947+ D591              ;           While X >= 0
 948+ D591              ;              X--                                                                                                  ::LL93
 949+ D591              ;              if  x >= 0
 950+ D591              ;                  XX15x = XX15x / 2
 951+ D591              ;                  XX15y = XX15y / 2
 952+ D591              ;                  XX15y = XX15y / 2
 953+ D591              ;           loop
 954+ D591              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 955+ D591              ;           if A > 256 (i.e. was overflow)
 956+ D591              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 957+ D591              ;               X = 1
 958+ D591              ;               Goto LabelOverflowLoop
 959+ D591              ;           else
 960+ D591              ;              Scaled (XX15) Z = AddZ
 961+ D591              ;           endif
 962+ D591              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 963+ D591              ;           if A > 256 (i.e. was overflow)
 964+ D591              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 965+ D591              ;               X = 1
 966+ D591              ;               Goto LabelOverflowLoop
 967+ D591              ;           else
 968+ D591              ;              Scaled (XX15) X = AddX
 969+ D591              ;           endif
 970+ D591              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 971+ D591              ;           if A > 256 (i.e. was overflow)
 972+ D591              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 973+ D591              ;               X = 1
 974+ D591              ;               Goto LabelOverflowLoop
 975+ D591              ;           else
 976+ D591              ;              Scaled (XX15) Y = AddY
 977+ D591              ;           endif
 978+ D591              ;        endif
 979+ D591              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 980+ D591              ;        if dot product < 0
 981+ D591              ;           set face visible
 982+ D591              ;        else
 983+ D591              ;           set face invisible
 984+ D591              ;        end if
 985+ D591              ;     else
 986+ D591              ;       Set FaceVisibility to true
 987+ D591              ;     end if
 988+ D591              ; Next Face
 989+ D591
 990+ D591 DD 25        ScaleDownXX15byIXH:     dec     ixh
 991+ D593 F8                                   ret     m
 992+ D594 21 83 C0                             ld      hl,UBnkXScaled
 993+ D597 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 994+ D599 23                                   inc     hl                          ; looking at XX15 x sign now
 995+ D59A 23                                   inc     hl                          ; looking at XX15 y Lo now
 996+ D59B CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 997+ D59D 23                                   inc     hl                          ; looking at XX15 y sign now
 998+ D59E 23                                   inc     hl                          ; looking at XX15 z Lo now
 999+ D59F CB 3E                                srl     (hl)
1000+ D5A1 C3 91 D5                             jp      ScaleDownXX15byIXH
1001+ D5A4 C9                                   ret
1002+ D5A5
1003+ D5A5 21 77 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
1004+ D5A8 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
1005+ D5AA 23                                   inc     hl                          ; looking at XX18 x sign now
1006+ D5AB 23                                   inc     hl                          ; looking at XX18 y Lo now
1007+ D5AC CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
1008+ D5AE 23                                   inc     hl                          ; looking at XX18 y sign now
1009+ D5AF 23                                   inc     hl                          ; looking at XX18 z Lo now
1010+ D5B0 CB 3E                                srl     (hl)
1011+ D5B2 C9                                   ret
1012+ D5B3
1013+ D5B3              ;line of sight vector = [x y z] + face normal vector
1014+ D5B3
1015+ D5B3              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1016+ D5B3              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1017+ D5B3              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1018+ D5B3              ;
1019+ D5B3              ;--------------------------------------------------------------
1020+ D5B3              ; line of sight (eye outwards dot face normal vector < 0
1021+ D5B3              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1022+ D5B3              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1023+ D5B3              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1024+ D5B3
1025+ D5B3              RotateXX15ByTransMatXX16:
1026+ D5B3 21 3E C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1027+ D5B6 CD C2 94                             call    XX12ProcessOneRow
1028+ D5B9 47                                   ld      b,a                                 ; get
1029+ D5BA 7D                                   ld      a,l
1030+ D5BB B0                                   or      b
1031+ D5BC 32 8A C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1032+ D5BF 7D                                   ld      a,l
1033+ D5C0 32 89 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1034+ D5C3
1035+ D5C3 21 44 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1036+ D5C6 CD C2 94                             call    XX12ProcessOneRow
1037+ D5C9 47                                   ld      b,a                                 ; get
1038+ D5CA 7D                                   ld      a,l
1039+ D5CB B0                                   or      b
1040+ D5CC 32 8C C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1041+ D5CF 7D                                   ld      a,l
1042+ D5D0 32 8B C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1043+ D5D3
1044+ D5D3 21 4A C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1045+ D5D6 CD C2 94                             call    XX12ProcessOneRow
1046+ D5D9 47                                   ld      b,a                                 ; get
1047+ D5DA 7D                                   ld      a,l
1048+ D5DB B0                                   or      b
1049+ D5DC 32 8E C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1050+ D5DF 7D                                   ld      a,l
1051+ D5E0 32 8D C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1052+ D5E3 C9                                   ret
1053+ D5E4
1054+ D5E4                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D5E4 00           CurrentNormIdx  DB 0
   2++D5E5              ; SomeFacesVisible:
   3++D5E5              ; EE29:
   4++D5E5
   5++D5E5              ;   Backface cull logic  line of sight vector . face normal vector
   6++D5E5              ;       line of sight vector . face normal vector
   7++D5E5              ;       => line of sight vector = [x y z] + face normal vector
   8++D5E5              ;       Where [x y z] =
   9++D5E5              ;                                               [ [x y z] . sidev ]
  10++D5E5              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D5E5              ;                                               [ [x y z] . nosev ]
  12++D5E5              ;
  13++D5E5              ;   so project the [x y z] vector into the face's normal space
  14++D5E5              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D5E5              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D5E5              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D5E5              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D5E5              ;
  19++D5E5              ;                         [ [x y z] . sidev + normal_x ]
  20++D5E5              ;                       = [ [x y z] . roofv + normal_y ]
  21++D5E5              ;                         [ [x y z] . nosev + normal_z ]
  22++D5E5              ;
  23++D5E5              ; so
  24++D5E5              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D5E5              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D5E5              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D5E5              ;
  28++D5E5              ; where face is visible if visibility < 0
  29++D5E5              ;
  30++D5E5              ;   so we set XX15 to [x y z] . sidev
  31++D5E5              ;                     [x y z] . roofv
  32++D5E5              ;                     [x y z] . nosev
  33++D5E5              ;
  34++D5E5
  35++D5E5
  36++D5E5
  37++D5E5 3A 7E C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D5E8                                      JumpIfAIsZero .ScaleDone            ;
  38++D5E8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D5E9 CA 15 D6    >                        jp	    z, .ScaleDone
  39++D5EC 2A 77 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D5EF ED 5B 7A C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D5F3 ED 4B 7D C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D5F7 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D5F9                                      ShiftHLRight1                       ; divide cam position by 2
  43++D5F9 CB 3C       >			   srl h
  43++D5FB CB 1D       >			   rr  l
  44++D5FD                                      ShiftDERight1                       ;
  44++D5FD CB 3A       >			   srl d
  44++D5FF CB 1B       >			   rr  e
  45++D601                                      ShiftBCRight1                       ;
  45++D601 CB 38       >			   srl b
  45++D603 CB 19       >			   rr  c
  46++D605 78                                   ld      a,b                         ; loop if not scaled down
  47++D606                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++D606 A7          >                        and     a
  47++D607 C2 F7 D5    >                        jp	    nz,.ScaleNormalLoop
  48++D60A 22 77 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D60D ED 53 7A C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D611 ED 43 7D C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D615 FD 7D        .ScaleDone:             ld      a,iyl
  52++D617 32 C4 9D                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D61A C9                                   ret
  54++D61B
  55++D61B              ;;--BackFaceCull:
  56++D61B              ;;--;debug:jp debug
  57++D61B              ;;--; DEBUG  force for now
  58++D61B              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D61B              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D61B              ;;--;
  61++D61B              ;;--; DEBUG
  62++D61B              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D61B              ;;--                       ; break
  64++D61B              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D61B              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D61B              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D61B              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D61B              ;;--
  69++D61B              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D61B              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D61B              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D61B              ;;--                        call    ScaleDrawcam
  73++D61B              ;;--                        call    CopyDrawCamToScaled
  74++D61B              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D61B              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D61B              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D61B              ;;--                        ld      (varV),hl
  78++D61B              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D61B              ;;--                        srl     a                                                       ;
  80++D61B              ;;--                        srl     a                                                       ;
  81++D61B              ;;--                        ld      b,a                                                     ;
  82++D61B              ;;--                        xor     a
  83++D61B              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D61B              ;;--ProcessNormalsLoop:     push    hl
  85++D61B              ;;--                        push    bc
  86++D61B              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D61B              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D61B              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D61B              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D61B              ;;--                        jp      .FaceVisible
  91++D61B              ;;--; This bit needs to be added to force face visible
  92++D61B              ;;--.LL87:                  call    CopyFaceToXX12
  93++D61B              ;;--                        ld      a,(XX17)
  94++D61B              ;;--                        JumpIfALTNusng 4,.LL92
  95++D61B              ;;--.LL143:                 call    CopyXX18toXX15
  96++D61B              ;;--                        jp      .LL89
  97++D61B              ;;--.Ovflw:                 ld      a,(XX18)
  98++D61B              ;;--                        srl     a
  99++D61B              ;;--                        ld      (XX18),a
 100++D61B              ;;--                        ld      a,(XX18+6)
 101++D61B              ;;--                        srl     a
 102++D61B              ;;--                        ld      (XX18+6),a
 103++D61B              ;;--                        ld      a,(XX18+3)
 104++D61B              ;;--                        srl     a
 105++D61B              ;;--                        ld      (XX18+3),a
 106++D61B              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D61B              ;;--.LL92:                   ld      b,a
 108++D61B              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D61B              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D61B              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D61B              ;;--.LL93                   dec     b
 112++D61B              ;;--                        jp      m, .LL94
 113++D61B              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D61B              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D61B              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D61B              ;;--                        dec     b
 117++D61B              ;;--                        jp      p,.LL93Loop
 118++D61B              ;;--; Add normal to XX15
 119++D61B              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D61B              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D61B              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D61B              ;;--                        ld      a,(XX18+8)
 123++D61B              ;;--                        call    SAEquSRPlusAQ
 124++D61B              ;;--                        jp      c,.Ovflw
 125++D61B              ;;--                        ld      (UBnkZScaled),a
 126++D61B              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D61B              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D61B              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D61B              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D61B              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D61B              ;;--                        call    SAEquSRPlusAQ
 132++D61B              ;;--                        jp      c,.Ovflw
 133++D61B              ;;--                        ld      (UBnkXScaled),a
 134++D61B              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D61B              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D61B              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D61B              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D61B              ;;--                        call    SAEquSRPlusAQ
 139++D61B              ;;--                        jp      c,.Ovflw
 140++D61B              ;;--                        ld      (UBnkYScaled),a
 141++D61B              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D61B              ;;--; calculate dot product:
 143++D61B              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D61B              ;;--                        ld      a,(UBnkXScaled)
 145++D61B              ;;--                        call    AequAmulQdiv256
 146++D61B              ;;--                        ld      (varT),a
 147++D61B              ;;--                        ld      a,(UBnkXX12xSign)
 148++D61B              ;;--                        ld      hl,UBnkXScaledSign
 149++D61B              ;;--                        xor     (hl)
 150++D61B              ;;--                        ld      (varS),a
 151++D61B              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D61B              ;;--                        ld      a,(UBnkYScaled)
 153++D61B              ;;--                        call    AequAmulQdiv256
 154++D61B              ;;--                        ld      (varQ),a
 155++D61B              ;;--                        ldCopyByte  varT,varR
 156++D61B              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D61B              ;;--                        ld      hl, UBnkYScaledSign
 158++D61B              ;;--                        xor     (hl)
 159++D61B              ;;--                        call    SAEquSRPlusAQ
 160++D61B              ;;--                        ld      (varT),a
 161++D61B              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D61B              ;;--                        ld      a,  (UBnkZScaled)
 163++D61B              ;;--                        call    AequAmulQdiv256
 164++D61B              ;;--                        ld      (varQ),a
 165++D61B              ;;--                        ldCopyByte  varT, varR
 166++D61B              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D61B              ;;--                        ld      hl, UBnkXX12zSign
 168++D61B              ;;--                        xor     (hl)
 169++D61B              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D61B              ;;--                        test    $80
 171++D61B              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D61B              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D61B              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D61B              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D61B              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D61B              ;;--                        call        SetFaceAVisible
 177++D61B              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D61B              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D61B              ;;--                        pop         bc
 180++D61B              ;;--                        pop         hl                      ; get normal data pointer back
 181++D61B              ;;--                        ld          a,4
 182++D61B              ;;--                        add         hl,a                    ; move to next normal entry
 183++D61B              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D61B              ;;--                        dec         b
 185++D61B              ;;--                        jp          nz,ProcessNormalsLoop
 186++D61B              ;;--                        ret
 187++D61B
 188++D61B
 189++D61B
 190++D61B
 191++D61B              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D61B              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D61B              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D61B              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D61B              ;;;;;                        test    $80
 196++D61B              ;;;;;                        jp      nz, FaceVisible
 197++D61B              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D61B              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D61B              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D61B              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++D61B              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D61B              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D61B              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D61B              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D61B              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D61B              ;;;;;                        ShiftDERight1                       ;
 207++D61B              ;;;;;                        ShiftBCRight1                       ;
 208++D61B              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D61B              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++D61B              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D61B              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D61B              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D61B              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D61B              ;;;;;.ScaleDone:             ld      a,iyl
 215++D61B              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D61B              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D61B              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D61B              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D61B              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D61B              ;;;;;
 221++D61B              ;;;;;
 222++D61B              ;;;;;
 223++D61B              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D61B              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D61B              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D61B              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D61B              ;;;;;                        ld      (varV),hl
 228++D61B              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D61B              ;;;;;                        srl     a                                                       ;
 230++D61B              ;;;;;                        srl     a                                                       ;
 231++D61B              ;;;;;                        ld      b,a                                                     ;
 232++D61B              ;;;;;                        xor     a
 233++D61B              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D61B              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D61B              ;;;;;                        push    bc
 236++D61B              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D61B              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D61B              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D61B              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D61B              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D61B              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D61B              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D61B              ;;;;;                        jp      .LL89
 244++D61B              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D61B              ;;;;;                        srl     a
 246++D61B              ;;;;;                        ld      (XX18),a
 247++D61B              ;;;;;                        ld      a,(XX18+6)
 248++D61B              ;;;;;                        srl     a
 249++D61B              ;;;;;                        ld      (XX18+6),a
 250++D61B              ;;;;;                        ld      a,(XX18+3)
 251++D61B              ;;;;;                        srl     a
 252++D61B              ;;;;;                        ld      (XX18+3),a
 253++D61B              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D61B              ;;;;;.LL92:                  ld      b,a
 255++D61B              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D61B              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D61B              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D61B              ;;;;;.LL93                   dec     b
 259++D61B              ;;;;;                        jp      m, .LL94
 260++D61B              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D61B              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D61B              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D61B              ;;;;;                        dec     b
 264++D61B              ;;;;;                        jp      p,.LL93Loop
 265++D61B              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D61B              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D61B              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D61B              ;;;;;                        ld      a,(XX18+8)
 269++D61B              ;;;;;                        call    SAEquSRPlusAQ
 270++D61B              ;;;;;                        jp      c,.Ovflw
 271++D61B              ;;;;;                        ld      (UBnkZScaled),a
 272++D61B              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D61B              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D61B              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D61B              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D61B              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D61B              ;;;;;                        call    SAEquSRPlusAQ
 278++D61B              ;;;;;                        jp      c,.Ovflw
 279++D61B              ;;;;;                        ld      (UBnkXScaled),a
 280++D61B              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D61B              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D61B              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D61B              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D61B              ;;;;;                        call    SAEquSRPlusAQ
 285++D61B              ;;;;;                        jp      c,.Ovflw
 286++D61B              ;;;;;                        ld      (UBnkYScaled),a
 287++D61B              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D61B              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D61B              ;;;;;                        ld      a,(UBnkXScaled)
 290++D61B              ;;;;;                        call    AequAmulQdiv256
 291++D61B              ;;;;;                        ld      (varT),a
 292++D61B              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D61B              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D61B              ;;;;;                        xor     (hl)
 295++D61B              ;;;;;                        ld      (varS),a
 296++D61B              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D61B              ;;;;;                        ld      a,(UBnkYScaled)
 298++D61B              ;;;;;                        call    AequAmulQdiv256
 299++D61B              ;;;;;                        ld      (varQ),a
 300++D61B              ;;;;;                        ldCopyByte  varT,varR
 301++D61B              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D61B              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D61B              ;;;;;                        xor     (hl)
 304++D61B              ;;;;;                        call    SAEquSRPlusAQ
 305++D61B              ;;;;;                        ld      (varT),a
 306++D61B              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D61B              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D61B              ;;;;;                        call    AequAmulQdiv256
 309++D61B              ;;;;;                        ld      (varQ),a
 310++D61B              ;;;;;                        ldCopyByte  varT, varR
 311++D61B              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D61B              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D61B              ;;;;;                        xor     (hl)
 314++D61B              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D61B              ;;;;;                        test    $80
 316++D61B              ;;;;;                        jr      nz,.FaceVisible
 317++D61B              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D61B              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D61B              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D61B              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D61B              ;;;;;                        call    SetFaceAVisible
 322++D61B              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D61B              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D61B              ;;;;;                        pop         bc
 325++D61B              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D61B              ;;;;;                        ld          a,4
 327++D61B              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D61B              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D61B              ;;;;;                        dec         b
 330++D61B              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D61B              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D61B              ;;;;;
 333++D61B
 334++D61B
 335++D61B
 336++D61B 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 337++D61E E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 338++D620 20 3E                                jr      nz,.ShipNoDraw               ; .
 339++D622 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 340++D625 7C                                   ld      a,h
 341++D626                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 341++D626 FE C0       >                        cp     ShipMaxDistance
 341++D628 D2 60 D6    >                        jp		nc,.ShipNoDraw
 342++D62B ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 343++D62F CD 55 B2                             call    compare16HLDE
 344++D632 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 345++D634 ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 346++D638 CD 55 B2                             call    compare16HLDE
 347++D63B 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 348++D63D              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 348++D63D CB 3C       >			   srl h
 348++D63F CB 1D       >			   rr  l
 349++D641                                      ShiftHLRight1                       ; .
 349++D641 CB 3C       >			   srl h
 349++D643 CB 1D       >			   rr  l
 350++D645                                      ShiftHLRight1                       ; .
 350++D645 CB 3C       >			   srl h
 350++D647 CB 1D       >			   rr  l
 351++D649 7C                                   ld      a,h
 352++D64A CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 353++D64C              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 353++D64C C2 62 D6    >                        jp	nz,.ShipIsADot
 354++D64F                                      ; Check visbility distance
 355++D64F              .SetXX4Dist:            ;break
 356++D64F 7D                                   ld      a,l
 357++D650 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D651 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D653 CB 3F                                srl     a
 360++D655 CB 3F                                srl     a
 361++D657 32 36 C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
 362++D65A                                      SetATrue
 362++D65A AF          >                        xor     a
 363++D65B 32 9C C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 364++D65E                                      ClearCarryFlag
 364++D65E B7          >                        or a
 365++D65F C9                                   ret
 366++D660              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 366++D660 37          >                        scf
 367++D661 C9                                   ret
 368++D662              .ShipIsADot:            SetMemFalse UBnKDrawAsDot           ; use the same logic as process nodes to do 1 point
 368++D662 3E FF       >                        ld      a,$FF
 368++D664 32 9C C0    >                        ld      (UBnKDrawAsDot),a
 369++D667                                      ClearCarryFlag
 369++D667 B7          >                        or a
 370++D668 C9                                   ret
 371++D669
 372++D669
 373++D669              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 374++D669              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 374++D669 3A 18 C3    >                        ld   a,(FaceCtX4Addr)
 374++D66C A7          >                        and a
 374++D66D C8          >                        ret    z
 375++D66E                                     ; break
 376++D66E CD B9 D0                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 377++D671 CD 56 96                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 378++D674 CD 6F D3                             call    LoadCraftToCamera           ; XX18 = camera
 379++D677                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 380++D677 3A 1E C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 381++D67A FD 6F                                ld      iyl,a                       ; iyl = scale factor
 382++D67C              ; By this point XX18 = scaled draw cam and iyl = scale factor
 383++D67C CD E5 D5                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 384++D67F CD 88 D3                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 385++D682 CD AD 95     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 386++D685 CD 00 D3                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 387++D688 21 01 C9     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 388++D68B 22 BF 9C                             ld      (varV),hl
 389++D68E 3A 18 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 390++D691 CB 3F                                srl     a                                              ;
 391++D693 CB 3F                                srl     a                                              ;
 392++D695 47                                   ld      b,a                                            ;
 393++D696 AF                                   xor     a
 394++D697 32 E4 D5                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 395++D69A E5           .ProcessNormalsLoop:    push    hl
 396++D69B C5                                   push    bc
 397++D69C 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 398++D69D E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 399++D69F E5                                   push    hl
 400++D6A0 21 36 C0                             ld      hl,UBnkDrawAllFaces
 401++D6A3 BE                                   cp      (hl)
 402++D6A4 E1                                   pop     hl
 403++D6A5 DA EA D7                             jp      c,.FaceVisible              ; then we always draw
 404++D6A8              ; This bit needs to be added to force face visible
 405++D6A8 CD 69 D5     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 406++D6AB 3A C4 9D                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 407++D6AE 47                                   ld      b,a
 408++D6AF                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 408++D6AF FE 04       >                        cp      4
 408++D6B1 DA EC D6    >                        jp		c, .ScaleNormByXX17
 409++D6B4 CD 4A D3     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 410++D6B7 C3 7B D7                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 411++D6BA 3A 77 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 412++D6BD CB 3F                                srl     a                           ; which is held in XX18
 413++D6BF 32 77 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 414++D6C2 3A 7D C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 415++D6C5 CB 3F                                srl     a                           ; .
 416++D6C7 32 7D C0                             ld      (UBnkDrawCam0zLo),a         ; .
 417++D6CA 3A 7A C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 418++D6CD CB 3F                                srl     a                           ; .
 419++D6CF 32 7A C0                             ld      (UBnkDrawCam0yLo),a        ; .
 420++D6D2 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 421++D6D4                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 421++D6D4 3A 83 C0    >                    ld      a,(UBnkXScaled)
 421++D6D7 CB 3F       >                    srl     a
 421++D6D9 32 83 C0    >                    ld      (UBnkXScaled),a
 422++D6DC                                      ShiftMem8Right1 UBnkYScaled         ;
 422++D6DC 3A 85 C0    >                    ld      a,(UBnkYScaled)
 422++D6DF CB 3F       >                    srl     a
 422++D6E1 32 85 C0    >                    ld      (UBnkYScaled),a
 423++D6E4                                      ShiftMem8Right1 UBnkZScaled         ;
 423++D6E4 3A 87 C0    >                    ld      a,(UBnkZScaled)
 423++D6E7 CB 3F       >                    srl     a
 423++D6E9 32 87 C0    >                    ld      (UBnkZScaled),a
 424++D6EC              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 425++D6EC              .ScaleNormByXX17:       ;ld      b,a
 426++D6EC CD 25 D3                             call    CopyXX12toXX15
 427++D6EF 05           .LL93                   dec     b
 428++D6F0 FA 0F D7                             jp      m, .ScaledNorm
 429++D6F3              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 429++D6F3 3A 83 C0    >                    ld      a,(UBnkXScaled)
 429++D6F6 CB 3F       >                    srl     a
 429++D6F8 32 83 C0    >                    ld      (UBnkXScaled),a
 430++D6FB                                      ShiftMem8Right1 UBnkYScaled        ;
 430++D6FB 3A 85 C0    >                    ld      a,(UBnkYScaled)
 430++D6FE CB 3F       >                    srl     a
 430++D700 32 85 C0    >                    ld      (UBnkYScaled),a
 431++D703                                      ShiftMem8Right1 UBnkZScaled        ;
 431++D703 3A 87 C0    >                    ld      a,(UBnkZScaled)
 431++D706 CB 3F       >                    srl     a
 431++D708 32 87 C0    >                    ld      (UBnkZScaled),a
 432++D70B 05                                   dec     b                          ;
 433++D70C F2 F3 D6                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 434++D70F              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 435++D70F              ; Add normal to XX15
 436++D70F              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 437++D70F              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 438++D70F              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 439++D70F              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 440++D70F              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 440++D70F 3A 87 C0    >                        ld       a,(UBnkZScaled)
 440++D712 32 BE 9D    >                        ld       (varR),a
 441++D715                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 441++D715 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
 441++D718 32 BF 9D    >                        ld       (varS),a
 442++D71B                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 442++D71B 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
 442++D71E 32 BD 9D    >                        ld       (varQ),a
 443++D721 3A 7F C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 444++D724 CD BC B5                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 445++D727 DA BA D6                             jp      c,.Ovflw
 446++D72A 32 87 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 447++D72D                                      ldCopyByte  varS, UBnkZScaledSign   ;
 447++D72D 3A BF 9D    >                        ld       a,(varS)
 447++D730 32 88 C0    >                        ld       (UBnkZScaledSign),a
 448++D733                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 448++D733 3A 83 C0    >                        ld       a,(UBnkXScaled)
 448++D736 32 BE 9D    >                        ld       (varR),a
 449++D739                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 449++D739 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
 449++D73C 32 BF 9D    >                        ld       (varS),a
 450++D73F                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 450++D73F 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
 450++D742 32 BD 9D    >                        ld       (varQ),a
 451++D745 3A 79 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 452++D748 CD BC B5                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 453++D74B DA BA D6                             jp      c,.Ovflw
 454++D74E 32 83 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 455++D751                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 455++D751 3A BF 9D    >                        ld       a,(varS)
 455++D754 32 84 C0    >                        ld       (UBnkXScaledSign),a
 456++D757                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 456++D757 3A 85 C0    >                        ld       a,(UBnkYScaled)
 456++D75A 32 BE 9D    >                        ld       (varR),a
 457++D75D                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 457++D75D 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
 457++D760 32 BF 9D    >                        ld       (varS),a
 458++D763                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 458++D763 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
 458++D766 32 BD 9D    >                        ld       (varQ),a
 459++D769 3A 7C C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 460++D76C CD BC B5                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 461++D76F DA BA D6                             jp      c,.Ovflw                    ; .
 462++D772 32 85 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 463++D775                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 463++D775 3A BF 9D    >                        ld       a,(varS)
 463++D778 32 86 C0    >                        ld       (UBnkYScaledSign),a
 464++D77B              ; calculate dot product LL89
 465++D77B              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 465++D77B 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
 465++D77E 32 BD 9D    >                        ld       (varQ),a
 466++D781 3A 83 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 467++D784 CD 28 B5                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 468++D787 32 D9 9D                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 469++D78A 3A 8A C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 470++D78D 21 84 C0                             ld      hl,UBnkXScaledSign          ; .
 471++D790 AE                                   xor     (hl)                        ; .
 472++D791 32 BF 9D                             ld      (varS),a                    ; .
 473++D794                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 473++D794 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
 473++D797 32 BD 9D    >                        ld       (varQ),a
 474++D79A 3A 85 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 475++D79D CD 28 B5                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 476++D7A0 32 BD 9D                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 477++D7A3                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 477++D7A3 3A D9 9D    >                        ld       a,(varT)
 477++D7A6 32 BE 9D    >                        ld       (varR),a
 478++D7A9 3A 8C C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 479++D7AC 21 86 C0                             ld      hl, UBnkYScaledSign         ; .
 480++D7AF AE                                   xor     (hl)                        ; .
 481++D7B0 CD BC B5                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 482++D7B3 32 D9 9D                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 483++D7B6                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 483++D7B6 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
 483++D7B9 32 BD 9D    >                        ld       (varQ),a
 484++D7BC 3A 87 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 485++D7BF CD 28 B5                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 486++D7C2 32 BD 9D                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 487++D7C5                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 487++D7C5 3A D9 9D    >                        ld       a,(varT)
 487++D7C8 32 BE 9D    >                        ld       (varR),a
 488++D7CB 3A 88 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 489++D7CE 21 8E C0                             ld      hl, UBnkXX12zSign           ; .
 490++D7D1 AE                                   xor     (hl)                        ; .
 491++D7D2 CD BC B5                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 492++D7D5 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 493++D7D7 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 494++D7D9 3A BF 9D                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 495++D7DC ED 27 80                             test    $80                         ; this should test S not A
 496++D7DF 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 497++D7E1 3A E4 D5     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 498++D7E4 CD CD D1                             call        SetFaceAHidden                                      ;           set face invisible
 499++D7E7 C3 F0 D7                             jp          .ProcessNormalLoopEnd                                ;        end if
 500++D7EA 3A E4 D5     .FaceVisible:            ld          a,(CurrentNormIdx)
 501++D7ED CD C4 D1                             call        SetFaceAVisible
 502++D7F0 21 E4 D5     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 503++D7F3 34                                   inc         (hl)                    ; move index pointer up by one
 504++D7F4 C1                                   pop         bc
 505++D7F5 E1                                   pop         hl                      ; get normal data pointer back
 506++D7F6 3E 04                                ld          a,4
 507++D7F8 ED 31                                add         hl,a                    ; move to next normal entry
 508++D7FA 22 BF 9C                             ld          (varV),hl               ; save as we need it again
 509++D7FD 05                                   dec         b
 510++D7FE C2 9A D6                             jp          nz,.ProcessNormalsLoop
 511++D801 C9                                   ret
 512++D802
# file closed: ././ModelRender/BackfaceCull.asm
1055+ D802              ;--------------------------------------------------------------------------------------------------------
1056+ D802              ; Process edges
1057+ D802              ; .....................................................
1058+ D802              TransposeNodeVal:   MACRO arg0?
1059+ D802 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1060+ D802 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1061+ D802 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1062+ D802 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1063+ D802 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1064+ D802 ~            NodeXPositive\1
1064+ D802 ~
1065+ D802 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1066+ D802 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1067+ D802 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1068+ D802 ~                    ld          h,0                                 ; but we don;t want the sign
1069+ D802 ~                    add         hl,bc                               ; its a 16 bit add
1070+ D802 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1071+ D802 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1072+ D802 ~                    ld          (UbnkXPointSign),a
1073+ D802 ~                    jp          FinishedThisNode\1
1074+ D802 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1075+ D802 ~            NodeNegative\1
1075+ D802 ~
1076+ D802 ~            LL52\1
1076+ D802 ~                                                              ;
1077+ D802 ~                    ld          hl,(UBnK\0lo)                       ; Coord
1078+ D802 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1079+ D802 ~                    ld          b,0                                 ; XX12 lo byte only
1080+ D802 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1081+ D802 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1082+ D802 ~            NodeXNegSignChange\1
1082+ D802 ~
1083+ D802 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1084+ D802 ~                    call        negate16hl                          ; Convert back to positive and flip sign
1085+ D802 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1086+ D802 ~                    xor         $80                                 ; Flip bit 7
1087+ D802 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1088+ D802 ~            SetAndMop\1
1088+ D802 ~
1089+ D802 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1090+ D802 ~            FinishedThisNode\1
1091+ D802                                  ENDM
1092+ D802
1093+ D802              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1094+ D802
1095+ D802              TransposeXX12NodeToXX15:
1096+ D802                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1096+ D802 3A 0E C0    >                        ld       a,(UBnKxsgn)
1096+ D805 32 85 C0    >                        ld       (UbnkXPointSign),a
1097+ D808 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1098+ D80C A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1099+ D80D FA 23 D8             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1100+ D810              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1101+ D810              NodeXPositiveX:
1102+ D810 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1103+ D811 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1104+ D813 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1105+ D816 26 00                ld          h,0                                 ; but we don;t want the sign
1106+ D818 09                   add         hl,bc                               ; its a 16 bit add
1107+ D819 22 83 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1108+ D81C AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1109+ D81D 32 85 C0             ld          (UbnkXPointSign),a
1110+ D820 C3 3F D8             jp          FinishedThisNodeX
1111+ D823              ; If we get here then _sign and vertv_ have different signs so do subtract
1112+ D823              NodeNegativeX:
1113+ D823              LL52X:                                                 ;
1114+ D823 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
1115+ D826 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1116+ D82A 06 00                ld          b,0                                 ; XX12 lo byte only
1117+ D82C ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1118+ D82E F2 3C D8             jp          p,SetAndMopX                       ; if result is positive skip to write back
1119+ D831              NodeXNegSignChangeX:
1120+ D831              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1121+ D831 CD 6B B2             call        negate16hl                          ; Convert back to positive and flip sign
1122+ D834 3A 85 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1123+ D837 EE 80                xor         $80                                 ; Flip bit 7
1124+ D839 32 85 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1125+ D83C              SetAndMopX:
1126+ D83C 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
1127+ D83F              FinishedThisNodeX:
1128+ D83F
1129+ D83F              LL53:
1130+ D83F
1131+ D83F                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1131+ D83F 3A 11 C0    >                        ld       a,(UBnKysgn)
1131+ D842 32 88 C0    >                        ld       (UbnkYPointSign),a
1132+ D845 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1133+ D849 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1134+ D84A FA 60 D8             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1135+ D84D              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1136+ D84D              NodeXPositiveY:
1137+ D84D 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1138+ D84E 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1139+ D850 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1140+ D853 26 00                ld          h,0                                 ; but we don;t want the sign
1141+ D855 09                   add         hl,bc                               ; its a 16 bit add
1142+ D856 22 86 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1143+ D859 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1144+ D85A 32 85 C0             ld          (UbnkXPointSign),a
1145+ D85D C3 7C D8             jp          FinishedThisNodeY
1146+ D860              ; If we get here then _sign and vertv_ have different signs so do subtract
1147+ D860              NodeNegativeY:
1148+ D860              LL52Y:                                                 ;
1149+ D860 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1150+ D863 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1151+ D867 06 00                ld          b,0                                 ; XX12 lo byte only
1152+ D869 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1153+ D86B F2 79 D8             jp          p,SetAndMopY                       ; if result is positive skip to write back
1154+ D86E              NodeXNegSignChangeY:
1155+ D86E              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1156+ D86E CD 6B B2             call        negate16hl                          ; Convert back to positive and flip sign
1157+ D871 3A 88 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1158+ D874 EE 80                xor         $80                                 ; Flip bit 7
1159+ D876 32 88 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1160+ D879              SetAndMopY:
1161+ D879 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1162+ D87C              FinishedThisNodeY:
1163+ D87C
1164+ D87C
1165+ D87C              TransposeZ:
1166+ D87C              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1167+ D87C 3A 8E C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1168+ D87F                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1168+ D87F CB 7F       >                        bit 	7,a
1168+ D881 C2 95 D8    >                        jp      nz,NegativeNodeZ
1169+ D884 3A 8D C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1170+ D887 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1171+ D88A ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1172+ D88C 7D                   ld          a,l
1173+ D88D 32 D9 9D             ld          (varT),a                            ;                                                                           ;;;
1174+ D890 7C                   ld          a,h
1175+ D891 32 BC 9D             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1176+ D894 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1177+ D895              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1178+ D895              NegativeNodeZ:
1179+ D895              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1180+ D895 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1181+ D898 ED 4B 8D C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1182+ D89C 06 00                ld          b,0                                 ; upper byte will be garbage
1183+ D89E                      ClearCarryFlag
1183+ D89E B7          >                        or a
1184+ D89F ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1185+ D8A1 7D                   ld          a,l
1186+ D8A2 32 D9 9D             ld          (varT),a                            ; t = result low
1187+ D8A5 7C                   ld          a,h
1188+ D8A6 32 BC 9D             ld          (varU),a                            ; u = result high
1189+ D8A9 E2 B6 D8             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1190+ D8AC              LL56Overflow:
1191+ D8AC FE 00                cp          0                                   ; is varU 0?
1192+ D8AE 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1193+ D8B0 3A D9 9D             ld          a,(varT)                            ; T \ restore z lo
1194+ D8B3                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1194+ D8B3 FE 04       >                        cp    4
1194+ D8B5 D0          >                        ret	 nc
1195+ D8B6              MakeNodeClose:
1196+ D8B6              LL140:                                                  ; else make node close
1197+ D8B6 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1198+ D8B7 32 BC 9D             ld          (varU),a                            ; U
1199+ D8BA 3E 04                ld          a,4                                 ; lo
1200+ D8BC 32 D9 9D             ld          (varT),a                            ; T
1201+ D8BF C9                   ret
1202+ D8C0              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1203+ D8C0              ProcessVisibleNode:
1204+ D8C0              RotateNode:                                                                                                                         ;;;
1205+ D8C0 CD CF D2             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1206+ D8C3              LL52LL53LL54LL55
1207+ D8C3              TransposeNode:
1208+ D8C3 CD 02 D8             call        TransposeXX12NodeToXX15
1209+ D8C6
1210+ D8C6              ; ......................................................                                                         ;;;
1211+ D8C6              NodeAdditionsDone:
1212+ D8C6              Scale16BitTo8Bit:
1213+ D8C6              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1214+ D8C6 3A BC 9D             ld          a,(varU)                            ; U \ z hi
1215+ D8C9 21 84 C0             ld          hl,UbnkXPointHi
1216+ D8CC B6                   or          (hl)                                ; XX15+1    \ x hi
1217+ D8CD 21 87 C0             ld          hl,UbnkYPointHi
1218+ D8D0 B6                   or          (hl)                                ; XX15+4    \ y hi
1219+ D8D1              AreXYZHiAllZero:
1220+ D8D1 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1221+ D8D3              DivideXYZBy2:
1222+ D8D3                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1222+ D8D3 2A 83 C0    >                    ld    hl,(UbnkXPoint)
1222+ D8D6 CB 3C       >                    srl   h
1222+ D8D8 CB 1D       >                    rr    l
1222+ D8DA 22 83 C0    >                    ld    (UbnkXPoint),hl
1223+ D8DD                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1223+ D8DD 2A 86 C0    >                    ld    hl,(UbnkYPoint)
1223+ D8E0 CB 3C       >                    srl   h
1223+ D8E2 CB 1D       >                    rr    l
1223+ D8E4 22 86 C0    >                    ld    (UbnkYPoint),hl
1224+ D8E7 3A BC 9D             ld          a,(varU)                            ; U \ z hi
1225+ D8EA 67                   ld          h,a
1226+ D8EB 3A D9 9D             ld          a,(varT)                            ; T \ z lo
1227+ D8EE 6F                   ld          l,a
1228+ D8EF                      ShiftHLRight1
1228+ D8EF CB 3C       >			   srl h
1228+ D8F1 CB 1D       >			   rr  l
1229+ D8F3 7C                   ld          a,h
1230+ D8F4 32 BC 9D             ld          (varU),a
1231+ D8F7 7D                   ld          a,l
1232+ D8F8 32 D9 9D             ld          (varT),a                            ; T \ z lo
1233+ D8FB C3 C6 D8             jp          Scale16BitTo8Bit                    ; loop U
1234+ D8FE              NodeScalingDone:
1235+ D8FE              LL60:                                                   ; hi U rolled to 0, exited loop above.
1236+ D8FE              ProjectNodeToScreen:
1237+ D8FE                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1237+ D8FE 3A D9 9D    >                        ld       a,(varT)
1237+ D901 32 BD 9D    >                        ld       (varQ),a
1238+ D904 3A 83 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1239+ D907 21 BD 9D             ld          hl,varQ
1240+ D90A BE                   cp          (hl)                                ; Q
1241+ D90B                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1241+ D90B DA 14 D9    >                        jp		c,DoSmallAngle
1242+ D90E CD C3 B6             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1243+ D911 C3 1C D9             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1244+ D914              DoSmallAngle:                                           ; small x angle
1245+ D914              LL69:
1246+ D914              ; TODO check if we need to retain BC as this trashes it
1247+ D914              ;Input: BC = Dividend, DE = Divisor, HL = 0
1248+ D914              ;Output: BC = Quotient, HL = Remainder
1249+ D914 47                   ld      b,a
1250+ D915 CD 76 B0             call    DIV16UNDOC
1251+ D918 79                   ld      a,c
1252+ D919 32 BE 9D             ld      (varR),a
1253+ D91C               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1254+ D91C              SkipSmallAngle:
1255+ D91C              ScaleX:
1256+ D91C              LL65:                                                   ; both continue for scaling based on z
1257+ D91C 3A 85 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1258+ D91F                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1258+ D91F CB 7F       >                        bit 	7,a
1258+ D921 C2 34 D9    >                        jp      nz,NegativeXPoint
1259+ D924              ; ......................................................
1260+ D924              PositiveXPoint:
1261+ D924 3A BE 9D             ld          a,(varR)
1262+ D927 6F                   ld          l,a
1263+ D928 3A BC 9D             ld          a,(varU)
1264+ D92B 67                   ld          h,a
1265+ D92C 3E 80                ld          a,ScreenCenterX
1266+ D92E ED 31                add         hl,a
1267+ D930 EB                   ex          de,hl
1268+ D931 C3 44 D9             jp          StoreXPoint
1269+ D934              NegativeXPoint:
1270+ D934              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1271+ D934 3A BE 9D             ld          a,(varR)
1272+ D937 6F                   ld          l,a
1273+ D938 3A BC 9D             ld          a,(varU)
1274+ D93B 67                   ld          h,a
1275+ D93C 0E 80                ld          c,ScreenCenterX
1276+ D93E 06 00                ld          b,0
1277+ D940                      ClearCarryFlag
1277+ D940 B7          >                        or a
1278+ D941 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1279+ D943 EB                   ex          de,hl
1280+ D944              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1281+ D944 FD 73 00             ld          (iy+0),e                            ; Update X Point
1282+ D947 FD 72 01             ld          (iy+1),d                            ; Update X Point
1283+ D94A FD 23                inc         iy
1284+ D94C FD 23                inc         iy
1285+ D94E              ; ......................................................
1286+ D94E              LL66:
1287+ D94E              ProcessYPoint:
1288+ D94E AF                   xor         a                                   ; y hi = 0
1289+ D94F 32 BC 9D             ld          (varU),a                            ; U
1290+ D952                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1290+ D952 3A D9 9D    >                        ld       a,(varT)
1290+ D955 32 BD 9D    >                        ld       (varQ),a
1291+ D958 3A 86 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1292+ D95B 21 BD 9D             ld          hl,varQ
1293+ D95E BE                   cp          (hl)                                ; Q
1294+ D95F                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1294+ D95F DA 68 D9    >                        jp		c,SmallYHop
1295+ D962              SmallYPoint:
1296+ D962 CD C3 B6             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1297+ D965 C3 6B D9             jp          SkipYScale                          ; LL68 hop over small y yangle
1298+ D968              SmallYHop:
1299+ D968              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1300+ D968 CD A0 B6             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1301+ D96B              SkipYScale:
1302+ D96B              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1303+ D96B 3A 88 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1304+ D96E CB 7F                bit         7,a
1305+ D970 C2 83 D9             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1306+ D973              PositiveYPoint:
1307+ D973 3A BE 9D             ld          a,(varR)
1308+ D976 6F                   ld          l,a
1309+ D977 3A BC 9D             ld          a,(varU)
1310+ D97A 67                   ld          h,a
1311+ D97B 3E 60                ld          a,ScreenHeightHalf
1312+ D97D ED 31                add         hl,a
1313+ D97F EB                   ex          de,hl
1314+ D980 C3 93 D9             jp          LL50
1315+ D983              NegativeYPoint:
1316+ D983              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1317+ D983 3A BE 9D             ld          a,(varR)
1318+ D986 6F                   ld          l,a
1319+ D987 3A BC 9D             ld          a,(varU)
1320+ D98A 67                   ld          h,a
1321+ D98B 0E 60                ld          c,ScreenHeightHalf
1322+ D98D 06 00                ld          b,0
1323+ D98F                      ClearCarryFlag
1323+ D98F B7          >                        or a
1324+ D990 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1325+ D992 EB                   ex          de,hl
1326+ D993              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1327+ D993 FD 73 00             ld          (iy+0),e                            ; Update X Point
1328+ D996 FD 72 01             ld          (iy+1),d                            ; Update X Point
1329+ D999 FD 23                inc         iy
1330+ D99B FD 23                inc         iy
1331+ D99D C9                   ret
1332+ D99E              ;--------------------------------------------------------------------------------------------------------
1333+ D99E              ;;;     Byte 0 = X magnitide with origin at middle of ship
1334+ D99E              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1335+ D99E              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1336+ D99E              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1337+ D99E              CopyNodeToXX15:
1338+ D99E                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1338+ D99E 7E          >                        ld       a,(hl)
1338+ D99F 32 83 C0    >                        ld       (UBnkXScaled),a
1339+ D9A2 23                   inc         hl
1340+ D9A3                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1340+ D9A3 7E          >                        ld       a,(hl)
1340+ D9A4 32 85 C0    >                        ld       (UBnkYScaled),a
1341+ D9A7 23                   inc         hl
1342+ D9A8                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1342+ D9A8 7E          >                        ld       a,(hl)
1342+ D9A9 32 87 C0    >                        ld       (UBnkZScaled),a
1343+ D9AC 23                   inc         hl
1344+ D9AD              PopulateXX15SignBits:
1345+ D9AD              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1346+ D9AD 7E                   ld          a,(hl)
1347+ D9AE 4F                   ld          c,a                                 ; copy sign and visibility to c
1348+ D9AF 47                   ld          b,a
1349+ D9B0 E6 80                and         $80                                 ; keep high 3 bits
1350+ D9B2 32 84 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1351+ D9B5 78                   ld          a,b
1352+ D9B6 E6 40                and         $40
1353+ D9B8 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1354+ D9BA 32 86 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1355+ D9BD 78                   ld          a,b
1356+ D9BE E6 20                and         $20
1357+ D9C0 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1358+ D9C2 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1359+ D9C4 32 88 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1360+ D9C7 79                   ld          a,c                                 ; returns a with visibility sign byte
1361+ D9C8 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1362+ D9CA 32 D9 9D             ld          (varT),a                            ; and store in varT as its needed later
1363+ D9CD C9                   ret
1364+ D9CE
1365+ D9CE              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1366+ D9CE              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1367+ D9CE              ;..............................................................................................................................
1368+ D9CE              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1369+ D9CE              LL48GetScale:
1370+ D9CE 3A AF 9C             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1371+ D9D1 5F                   ld          e,a
1372+ D9D2 CD 9E D9             call        CopyNodeToXX15
1373+ D9D5              LL48GetVertices:
1374+ D9D5              LL48GetVertSignAndVisDist:
1375+ D9D5                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1375+ D9D5 BB          >                        cp      e
1375+ D9D6 DA 13 DA    >                        jp		c, NodeIsNotVisible
1376+ D9D9              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1377+ D9D9                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1377+ D9D9 23          >                    inc         hl                                  ; vertex byte#1
1377+ D9DA 7E          >                    ld          a,(hl)                              ;
1377+ D9DB 32 BA 9C    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1378+ D9DE 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1379+ D9DF E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1380+ D9E1 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1381+ D9E2                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1381+ D9E2 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1381+ D9E5 ED 31       >                    add         hl,a
1381+ D9E7 7E          >                    ld          a,(hl)
1382+ D9E8 E1                   pop         hl                                  ;                                                                           ;;;
1383+ D9E9                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1383+ D9E9 A7          >                        and     a
1383+ D9EA C2 19 DA    >                        jp	    nz,NodeIsVisible
1384+ D9ED              CheckFace2:                                                                                                                         ;;;
1385+ D9ED 7A                   ld          a,d                                                                                                             ;;;
1386+ D9EE ED 23                swapnib                                                                                                                     ;;;
1387+ D9F0 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1388+ D9F2                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1388+ D9F2 A7          >                        and     a
1388+ D9F3 C2 19 DA    >                        jp	    nz,NodeIsVisible
1389+ D9F6              CheckFace3:                                                                                                                         ;;;
1390+ D9F6                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1390+ D9F6 23          >                    inc         hl                                  ; vertex byte#1
1390+ D9F7 7E          >                    ld          a,(hl)                              ;
1390+ D9F8 32 BA 9C    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1391+ D9FB 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1392+ D9FC E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1393+ D9FE E5                   push        hl                                  ; we need to save HL                                                        ;;;
1394+ D9FF                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1394+ D9FF 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1394+ DA02 ED 31       >                    add         hl,a
1394+ DA04 7E          >                    ld          a,(hl)
1395+ DA05 E1                   pop         hl                                  ;                                                                           ;;;
1396+ DA06                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1396+ DA06 A7          >                        and     a
1396+ DA07 C2 19 DA    >                        jp	    nz,NodeIsVisible
1397+ DA0A              CheckFace4:                                                                                                                         ;;;
1398+ DA0A 7A                   ld          a,d                                                                                                             ;;;
1399+ DA0B ED 23                swapnib                                                                                                                     ;;;
1400+ DA0D E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1401+ DA0F                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1401+ DA0F A7          >                        and     a
1401+ DA10 C2 19 DA    >                        jp	    nz,NodeIsVisible
1402+ DA13              NodeIsNotVisible:                                                                                                                   ;;;
1403+ DA13 01 04 00             ld          bc,4
1404+ DA16 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1405+ DA18                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1406+ DA18 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1407+ DA19              NodeIsVisible:
1408+ DA19              LL49:
1409+ DA19 CD C0 D8             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1410+ DA1C C9                   ret
1411+ DA1D
1412+ DA1D
1413+ DA1D              ProjectNodeToEye:
1414+ DA1D ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1415+ DA21 79           	ld			a,c                                 ;  so no need for a negative check
1416+ DA22 32 BD 9D     	ld			(varQ),a		                    ; VarQ = z
1417+ DA25 3A 83 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1418+ DA28 CD 5F B0     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1419+ DA2B 3A 84 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1420+ DA2E                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1420+ DA2E CB 7F       >                        bit 	7,a
1420+ DA30 C2 3B DA    >                        jp      nz,EyeNegativeXPoint
1421+ DA33              EyePositiveXPoint:									; x was positive result
1422+ DA33 2E 80            ld          l,ScreenCenterX						;
1423+ DA35 26 00            ld          h,0
1424+ DA37 09               add         hl,bc								; hl = Screen Centre + X
1425+ DA38 C3 42 DA         jp          EyeStoreXPoint
1426+ DA3B              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1427+ DA3B 2E 80            ld          l,ScreenCenterX
1428+ DA3D 26 00            ld          h,0
1429+ DA3F                  ClearCarryFlag
1429+ DA3F B7          >                        or a
1430+ DA40 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1431+ DA42              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1432+ DA42 EB               ex          de,hl
1433+ DA43 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1434+ DA46 FD 72 01         ld          (iy+1),d                            ; Update X Point
1435+ DA49              EyeProcessYPoint:
1436+ DA49 ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1437+ DA4D 79           	ld			a,c
1438+ DA4E 32 BD 9D     	ld			(varQ),a
1439+ DA51 3A 85 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1440+ DA54 CD 5F B0     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1441+ DA57 3A 86 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1442+ DA5A                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1442+ DA5A CB 7F       >                        bit 	7,a
1442+ DA5C C2 67 DA    >                        jp      nz,EyeNegativeYPoint
1443+ DA5F              EyePositiveYPoint:									; Y is positive so above the centre line
1444+ DA5F 2E 60            ld          l,ScreenCenterY
1445+ DA61                  ClearCarryFlag
1445+ DA61 B7          >                        or a
1446+ DA62 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1447+ DA64 C3 6C DA         jp          EyeStoreYPoint
1448+ DA67              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1449+ DA67 2E 60            ld          l,ScreenCenterY
1450+ DA69 26 00            ld          h,0
1451+ DA6B 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1452+ DA6C              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1453+ DA6C EB               ex          de,hl
1454+ DA6D FD 73 02         ld          (iy+2),e                            ; Update Y Point
1455+ DA70 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1456+ DA73 C9               ret
1457+ DA74
1458+ DA74
1459+ DA74
1460+ DA74              ; Pitch and roll are 2 phases
1461+ DA74              ; 1 - we apply our pitch and roll to the ship position
1462+ DA74              ;       x -> x + alpha * (y - alpha * x)
1463+ DA74              ;       y -> y - alpha * x - beta * z
1464+ DA74              ;       z -> z + beta * (y - alpha * x - beta * z)
1465+ DA74              ; which can be simplified as:
1466+ DA74              ;       1. K2 = y - alpha * x
1467+ DA74              ;       2. z = z + beta * K2
1468+ DA74              ;       3. y = K2 - beta * z
1469+ DA74              ;       4. x = x + alpha * y
1470+ DA74              ; 2 - we apply our patch and roll to the ship orientation
1471+ DA74              ;      Roll calculations:
1472+ DA74              ;
1473+ DA74              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1474+ DA74              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1475+ DA74              ;      Pitch calculations:
1476+ DA74              ;
1477+ DA74              ;        nosev_y = nosev_y - beta * nosev_z_hi
1478+ DA74              ;        nosev_z = nosev_z + beta * nosev_y_hi
1479+ DA74
1480+ DA74
1481+ DA74              ; ---------------------------------------------------------------------------------------------------------------------------------
1482+ DA74                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++DA74
   2++DA74              ; Full version
   3++DA74              ; 1. K2 = y - alpha * x
   4++DA74              ; 2. z = z + beta * K2
   5++DA74              ; 3. y = K2 - beta * z
   6++DA74              ; 4. x = x + alpha * y
   7++DA74
   8++DA74
   9++DA74              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++DA74             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++DA74 3A D3 9C    >                        ld       a,(ALPHA)
   9++DA77 32 BD 9D    >                        ld       (varQ),a
   9++DA7A             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++DA7A 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++DA7D 22 BE 9D    >                        ld       (varR),hl
   9++DA80             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++DA80 3A 21 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++DA83 32 BA 9C    >                        ld       (varP),a
   9++DA86 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++DA89 EE 80       >                        xor $80                             ;
   9++DA8B CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++DA8E ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++DA92             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++DA92 2A 21 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++DA95 22 BE 9D    >                        ld       (varR),hl
   9++DA98 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++DA9B CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++DA9E ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++DAA2 C9                                   ret
  11++DAA3              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++DAA3             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++DAA3 3A D3 9C    >                        ld       a,(ALPHA)
  11++DAA6 32 BD 9D    >                        ld       (varQ),a
  11++DAA9             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++DAA9 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++DAAC 22 BE 9D    >                        ld       (varR),hl
  11++DAAF             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++DAAF 3A 15 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++DAB2 32 BA 9C    >                        ld       (varP),a
  11++DAB5 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++DAB8 EE 80       >                        xor $80                             ;
  11++DABA CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++DABD ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++DAC1             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++DAC1 2A 15 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++DAC4 22 BE 9D    >                        ld       (varR),hl
  11++DAC7 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++DACA CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++DACD ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++DAD1 C9                                   ret
  13++DAD2              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++DAD2             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++DAD2 3A D3 9C    >                        ld       a,(ALPHA)
  13++DAD5 32 BD 9D    >                        ld       (varQ),a
  13++DAD8             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++DAD8 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++DADB 22 BE 9D    >                        ld       (varR),hl
  13++DADE             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++DADE 3A 1B C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++DAE1 32 BA 9C    >                        ld       (varP),a
  13++DAE4 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++DAE7 EE 80       >                        xor $80                             ;
  13++DAE9 CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++DAEC ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++DAF0             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++DAF0 2A 1B C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++DAF3 22 BE 9D    >                        ld       (varR),hl
  13++DAF6 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++DAF9 CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++DAFC ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++DB00 C9                                   ret
  15++DB01
  16++DB01              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++DB01             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++DB01 3A C5 9C    >                        ld       a,(BETA)
  16++DB04 32 BD 9D    >                        ld       (varQ),a
  16++DB07             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++DB07 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++DB0A 22 BE 9D    >                        ld       (varR),hl
  16++DB0D             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++DB0D 3A 25 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++DB10 32 BA 9C    >                        ld       (varP),a
  16++DB13 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++DB16 EE 80       >                        xor $80                             ;
  16++DB18 CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++DB1B ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++DB1F             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++DB1F 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++DB22 22 BE 9D    >                        ld       (varR),hl
  16++DB25 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++DB28 CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++DB2B ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++DB2F C9                                   ret
  18++DB30              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++DB30             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++DB30 3A C5 9C    >                        ld       a,(BETA)
  18++DB33 32 BD 9D    >                        ld       (varQ),a
  18++DB36             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++DB36 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++DB39 22 BE 9D    >                        ld       (varR),hl
  18++DB3C             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++DB3C 3A 19 C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++DB3F 32 BA 9C    >                        ld       (varP),a
  18++DB42 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++DB45 EE 80       >                        xor $80                             ;
  18++DB47 CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++DB4A ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++DB4E             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++DB4E 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++DB51 22 BE 9D    >                        ld       (varR),hl
  18++DB54 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++DB57 CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++DB5A ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++DB5E C9                                   ret
  20++DB5F              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++DB5F             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++DB5F 3A C5 9C    >                        ld       a,(BETA)
  20++DB62 32 BD 9D    >                        ld       (varQ),a
  20++DB65             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++DB65 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++DB68 22 BE 9D    >                        ld       (varR),hl
  20++DB6B             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++DB6B 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++DB6E 32 BA 9C    >                        ld       (varP),a
  20++DB71 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++DB74 EE 80       >                        xor $80                             ;
  20++DB76 CD F2 AD    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++DB79 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++DB7D             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++DB7D 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++DB80 22 BE 9D    >                        ld       (varR),hl
  20++DB83 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++DB86 CD F2 AD    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++DB89 ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++DB8D C9                                   ret
  22++DB8E
  23++DB8E
  24++DB8E              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++DB8E ~                                    push    bc
  26++DB8E ~                                    ld      c,a                         ; save original value of a into c
  27++DB8E ~                                    ld      a,(PositionSign)
  28++DB8E ~                                    ld      b,a
  29++DB8E ~                                    ld      a,c
  30++DB8E ~                                    xor     b                           ; a = a xor x postition sign
  31++DB8E ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++DB8E ~            ; Signs are the same to we just add and take which ever sign
  33++DB8E ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++DB8E ~                                    ld      hl,(Position)
  35++DB8E ~                                    add     hl,de
  36++DB8E ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++DB8E ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++DB8E ~                                    pop     bc
  39++DB8E ~                                    ret
  40++DB8E ~            ; Signs are opposite so we subtract
  41++DB8E ~            .MV50:                  ld      de,(varPp1)
  42++DB8E ~                                    ld      hl,(Position)
  43++DB8E ~                                    or      a
  44++DB8E ~                                    sbc     hl,de
  45++DB8E ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++DB8E ~                                    ld      a,c                         ; get back the original sign
  47++DB8E ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++DB8E ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++DB8E ~                                    pop     bc
  50++DB8E ~                                    ret
  51++DB8E ~            .MV51:                  NegHL
  52++DB8E ~                                    ld      (varPp1),hl
  53++DB8E ~                                    ld      a,c                         ; the original sign will still be good
  54++DB8E ~                                    pop     bc
  55++DB8E ~                                    ret
  56++DB8E                                      ENDM
  57++DB8E
  58++DB8E
  59++DB8E              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++DB8E C5          >                        push    bc
  59++DB8F 4F          >                        ld      c,a                         ; save original value of a into c
  59++DB90 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++DB93 47          >                        ld      b,a
  59++DB94 79          >                        ld      a,c
  59++DB95 A8          >                        xor     b                           ; a = a xor x postition sign
  59++DB96 FA A7 DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++DB99             >; Signs are the same to we just add and take which ever sign
  59++DB99 ED 5B BB 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++DB9D 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DBA0 19          >                        add     hl,de
  59++DBA1 22 BB 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++DBA4 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++DBA5 C1          >                        pop     bc
  59++DBA6 C9          >                        ret
  59++DBA7             >; Signs are opposite so we subtract
  59++DBA7 ED 5B BB 9C >.MV50:                  ld      de,(varPp1)
  59++DBAB 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DBAE B7          >                        or      a
  59++DBAF ED 52       >                        sbc     hl,de
  59++DBB1 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++DBB3 79          >                        ld      a,c                         ; get back the original sign
  59++DBB4 22 BB 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++DBB7 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++DBB9 C1          >                        pop     bc
  59++DBBA C9          >                        ret
  59++DBBB             >.MV51:                  NegHL
  59++DBBB AF          >                    xor a
  59++DBBC 95          >                    sub l
  59++DBBD 6F          >                    ld l,a
  59++DBBE 9F          >                    sbc a,a
  59++DBBF 94          >                    sub h
  59++DBC0 67          >                    ld h,a
  59++DBC1 22 BB 9C    >                        ld      (varPp1),hl
  59++DBC4 79          >                        ld      a,c                         ; the original sign will still be good
  59++DBC5 C1          >                        pop     bc
  59++DBC6 C9          >                        ret
  60++DBC7
  61++DBC7              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++DBC7 C5          >                        push    bc
  61++DBC8 4F          >                        ld      c,a                         ; save original value of a into c
  61++DBC9 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++DBCC 47          >                        ld      b,a
  61++DBCD 79          >                        ld      a,c
  61++DBCE A8          >                        xor     b                           ; a = a xor x postition sign
  61++DBCF FA E0 DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++DBD2             >; Signs are the same to we just add and take which ever sign
  61++DBD2 ED 5B BB 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++DBD6 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DBD9 19          >                        add     hl,de
  61++DBDA 22 BB 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++DBDD 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++DBDE C1          >                        pop     bc
  61++DBDF C9          >                        ret
  61++DBE0             >; Signs are opposite so we subtract
  61++DBE0 ED 5B BB 9C >.MV50:                  ld      de,(varPp1)
  61++DBE4 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DBE7 B7          >                        or      a
  61++DBE8 ED 52       >                        sbc     hl,de
  61++DBEA 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++DBEC 79          >                        ld      a,c                         ; get back the original sign
  61++DBED 22 BB 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++DBF0 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++DBF2 C1          >                        pop     bc
  61++DBF3 C9          >                        ret
  61++DBF4             >.MV51:                  NegHL
  61++DBF4 AF          >                    xor a
  61++DBF5 95          >                    sub l
  61++DBF6 6F          >                    ld l,a
  61++DBF7 9F          >                    sbc a,a
  61++DBF8 94          >                    sub h
  61++DBF9 67          >                    ld h,a
  61++DBFA 22 BB 9C    >                        ld      (varPp1),hl
  61++DBFD 79          >                        ld      a,c                         ; the original sign will still be good
  61++DBFE C1          >                        pop     bc
  61++DBFF C9          >                        ret
  62++DC00
  63++DC00              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++DC00 C5          >                        push    bc
  63++DC01 4F          >                        ld      c,a                         ; save original value of a into c
  63++DC02 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++DC05 47          >                        ld      b,a
  63++DC06 79          >                        ld      a,c
  63++DC07 A8          >                        xor     b                           ; a = a xor x postition sign
  63++DC08 FA 19 DC    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++DC0B             >; Signs are the same to we just add and take which ever sign
  63++DC0B ED 5B BB 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++DC0F 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DC12 19          >                        add     hl,de
  63++DC13 22 BB 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++DC16 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++DC17 C1          >                        pop     bc
  63++DC18 C9          >                        ret
  63++DC19             >; Signs are opposite so we subtract
  63++DC19 ED 5B BB 9C >.MV50:                  ld      de,(varPp1)
  63++DC1D 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DC20 B7          >                        or      a
  63++DC21 ED 52       >                        sbc     hl,de
  63++DC23 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++DC25 79          >                        ld      a,c                         ; get back the original sign
  63++DC26 22 BB 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++DC29 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DC2B C1          >                        pop     bc
  63++DC2C C9          >                        ret
  63++DC2D             >.MV51:                  NegHL
  63++DC2D AF          >                    xor a
  63++DC2E 95          >                    sub l
  63++DC2F 6F          >                    ld l,a
  63++DC30 9F          >                    sbc a,a
  63++DC31 94          >                    sub h
  63++DC32 67          >                    ld h,a
  63++DC33 22 BB 9C    >                        ld      (varPp1),hl
  63++DC36 79          >                        ld      a,c                         ; the original sign will still be good
  63++DC37 C1          >                        pop     bc
  63++DC38 C9          >                        ret
  64++DC39
  65++DC39              ; rollWork holds Alpha intermidate results
  66++DC39 00 00 00     rollWork      DS 3
  67++DC3C              rollWorkp1    equ rollWork
  68++DC3C              rollWorkp2    equ rollWork+1
  69++DC3C              rollWorkp3    equ rollWork+2
  70++DC3C
  71++DC3C              ;----------------------------------------------------------------------------------------------------------------------------------
  72++DC3C              ; based on MVEIT part 4 of 9
  73++DC3C 3A D4 9C     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++DC3F 21 C7 9C                             ld      hl,BET1                     ; and pitch
  75++DC42 B6                                   or      (hl)
  76++DC43 CA FD DC                             jp      z,.NoRotation               ; if both zero then don't compute
  77++DC46                                      ;break
  78++DC46              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++DC46 5F                                   ld      e,a                         ; e = roll magnitude
  80++DC47 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++DC4A CD 4E AE                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++DC4D 32 BC 9C                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++DC50 22 BA 9C                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++DC53              ; A = Flip sign
  85++DC53 3A D6 9C                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++DC56 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++DC59 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++DC5A              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++DC5A CD C7 DB                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++DC5D              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++DC5D 32 3B DC                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++DC60 22 39 DC                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++DC63              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++DC63 3A C7 9C                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++DC66 5F                                   ld      e,a
  96++DC67 CD 4E AE                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++DC6A 32 BC 9C                             ld      (varPp2),a                   ; save highest byte in P2
  98++DC6D 22 BA 9C                             ld      (varP),hl
  99++DC70              ; Fetch sign of previosu cal and xor with BETA inverted
 100++DC70 3A 3B DC                             ld      a,(rollWorkp3)
 101++DC73 5F                                   ld      e,a
 102++DC74 3A C8 9C                             ld      a,(BET2)
 103++DC77 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++DC78              ; Z = P[210] =Z + APP
 105++DC78 CD 00 DC                             call    APPequZPosPlusAPP           ; MVT6
 106++DC7B 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++DC7E 22 12 C0                             ld      (UBnKzlo),hl
 108++DC81              ; A[P1]P[0] = z * Beta
 109++DC81 3A C7 9C                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++DC84 5F                                   ld      e,a
 111++DC85 CD 4E AE                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++DC88 32 BC 9C                             ld      (varPp2),a                  ; P2 = high byte of result
 113++DC8B 22 BA 9C                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++DC8E              ; A xor BET2,Zsign
 115++DC8E 3A 3B DC                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++DC91 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++DC94 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++DC95 3A C8 9C                             ld      a,(BET2)                    ;
 119++DC98 AB                                   xor     e                           ;
 120++DC99 5F                                   ld      e,a                         ; now xor it with z sign too
 121++DC9A 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++DC9D AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++DC9E F2 AD DC                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++DCA1 2A BB 9C                             ld      hl,(varPp1)
 125++DCA4 ED 5B 39 DC                          ld      de,(rollWorkp1)
 126++DCA8 B7                                   or      a
 127++DCA9 19                                   add     hl,de
 128++DCAA C3 C7 DC                             jp      .MV44
 129++DCAD 2A 39 DC     .MV43:                  ld      hl,(rollWorkp1)
 130++DCB0 ED 5B BB 9C                          ld      de,(varPp1)
 131++DCB4 B7                                   or      a
 132++DCB5 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++DCB7 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++DCB9                                      NegHL
 134++DCB9 AF          >                    xor a
 134++DCBA 95          >                    sub l
 134++DCBB 6F          >                    ld l,a
 134++DCBC 9F          >                    sbc a,a
 134++DCBD 94          >                    sub h
 134++DCBE 67          >                    ld h,a
 135++DCBF 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++DCC2 EE 80                                xor     SignOnly8Bit
 137++DCC4 32 11 C0                             ld      (UBnKysgn),a
 138++DCC7              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++DCC7 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++DCCA 3A D4 9C                             ld      a,(ALP1)                    ; get roll magnitude
 141++DCCD 5F                                   ld      e,a
 142++DCCE 2A 0F C0                             ld      hl,(UBnKylo)
 143++DCD1 CD 4E AE                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++DCD4 32 BC 9C                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++DCD7 22 BA 9C                             ld      (varP),hl
 146++DCDA 3A D5 9C                             ld      a,(ALP2)
 147++DCDD 5F                                   ld      e,a
 148++DCDE 3A 11 C0                             ld      a,(UBnKysgn)
 149++DCE1 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++DCE2 CD 8E DB                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++DCE5 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++DCE8 22 0C C0                             ld      (UBnKxlo),hl
 153++DCEB                                      ;break
 154++DCEB                                      ; if its not a sun then apply to local orientation
 155++DCEB
 156++DCEB CD 74 DA                             call    ApplyMyRollToNosev
 157++DCEE CD A3 DA                             call    ApplyMyRollToSidev
 158++DCF1 CD D2 DA                             call    ApplyMyRollToRoofv
 159++DCF4 CD 01 DB                             call    ApplyMyPitchToNosev
 160++DCF7 CD 30 DB                             call    ApplyMyPitchToSidev
 161++DCFA CD 5F DB                             call    ApplyMyPitchToRoofv
 162++DCFD 3A B9 9D     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++DD00 16 00                                ld      d,0
 164++DD02 5F                                   ld      e,a                         ; de = speed in low byte
 165++DD03 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++DD06 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++DD09 47                                   ld      b,a                         ;
 168++DD0A 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++DD0C CD 9E B4                             call    ADDHLDESignBC               ; update speed
 170++DD0F 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++DD12 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++DD15 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1483+ DD16                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++DD16              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DD16              ; based on MVEIT part 4 of 9
   3++DD16 3A 34 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DD19 47                                   ld      b,a
   5++DD1A E6 80                                and     SignOnly8Bit
   6++DD1C 4F                                   ld      c,a
   7++DD1D 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DD20 78                                   ld      a,b
   9++DD21 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DD23 28 3A                                jr      z,.ProcessRoll
  11++DD25 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DD27 28 01                                jr      z,.NoPitchDamping
  13++DD29 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DD2A 32 3D C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DD2D 47                                   ld      b,a
  16++DD2E B1                                   or      c                           ; bring sign back in
  17++DD2F 32 34 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++DD32 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DD35 22 A3 9C                             ld	    (varAxis1),hl
  20++DD38 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DD3B 22 A5 9C                             ld	    (varAxis2),hl
  22++DD3E CD 3F CC                             call    MVS5RotateAxis
  23++DD41 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DD44 22 A3 9C                             ld	    (varAxis1),hl
  25++DD47 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DD4A 22 A5 9C                             ld	    (varAxis2),hl
  27++DD4D CD 3F CC                             call    MVS5RotateAxis
  28++DD50 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DD53 22 A3 9C                             ld	    (varAxis1),hl
  30++DD56 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DD59 22 A5 9C                             ld	    (varAxis2),hl
  32++DD5C CD 3F CC                             call    MVS5RotateAxis
  33++DD5F 3A 33 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++DD62 47                                   ld      b,a
  35++DD63 E6 80                                and     SignOnly8Bit
  36++DD65 4F                                   ld      c,a
  37++DD66 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DD69 78                                   ld      a,b
  39++DD6A E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DD6C C8                                   ret     z                           ; if no work to do then exit
  41++DD6D FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DD6F 28 01                                jr      z,.NoRollDamping
  43++DD71 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DD72 32 3D C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DD75 47                                   ld      b,a
  46++DD76 B1                                   or      c                           ; bring sign back in
  47++DD77 32 33 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++DD7A 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DD7D 22 A3 9C                             ld	    (varAxis1),hl
  50++DD80 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DD83 22 A5 9C                             ld	    (varAxis2),hl
  52++DD86 CD 3F CC                             call    MVS5RotateAxis
  53++DD89 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DD8C 22 A3 9C                             ld	    (varAxis1),hl
  55++DD8F 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DD92 22 A5 9C                             ld	    (varAxis2),hl
  57++DD95 CD 3F CC                             call    MVS5RotateAxis
  58++DD98 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DD9B 22 A3 9C                             ld	    (varAxis1),hl
  60++DD9E 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DDA1 22 A5 9C                             ld	    (varAxis2),hl
  62++DDA4 CD 3F CC                             call    MVS5RotateAxis
  63++DDA7 C9                                   ret
  64++DDA8
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1484+ DDA8                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DDA8
   2++DDA8              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DDA8 00           DrawLinesCounter		db	0
   4++DDA9              ; Initial tests look OK
   5++DDA9              LL155:;
   6++DDA9              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DDA9                    ;break                                                                             ; ObjectInFront:
   8++DDA9 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DDAB FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DDAD 3A 00 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DDB0                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DDB0 A7          >                        and     a
  11++DDB1 C8          >                        ret     z
  12++DDB2 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DDB4 21 0E C2                             ld		hl,UbnkLineArray
  14++DDB7              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DDB7 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DDB8 23                                   inc     hl
  17++DDB9 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DDBA 23                                   inc     hl
  19++DDBB              ;;DEBUGTEST        push bc
  20++DDBB              ;;DEBUGTEST        push hl
  21++DDBB              ;;DEBUGTEST        push de
  22++DDBB              ;;DEBUGTEST        ld  a,$3F
  23++DDBB              ;;DEBUGTEST        MMUSelectLayer2
  24++DDBB              ;;DEBUGTEST        call    l2_plot_pixel
  25++DDBB              ;;DEBUGTEST        pop de
  26++DDBB              ;;DEBUGTEST        pop hl
  27++DDBB              ;;DEBUGTEST        pop bc
  28++DDBB 5E                                   ld      e,(hl)                          ; c = varX1
  29++DDBC 23                                   inc     hl
  30++DDBD 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++DDBE              ;;DEBUGTEST       push bc
  32++DDBE              ;;DEBUGTEST       push hl
  33++DDBE              ;;DEBUGTEST       push de
  34++DDBE              ;;DEBUGTEST       push de
  35++DDBE              ;;DEBUGTEST       pop  bc
  36++DDBE              ;;DEBUGTEST       ld  a,$3F
  37++DDBE              ;;DEBUGTEST       MMUSelectLayer2
  38++DDBE              ;;DEBUGTEST       call    l2_plot_pixel
  39++DDBE              ;;DEBUGTEST       pop de
  40++DDBE              ;;DEBUGTEST       pop hl
  41++DDBE              ;;DEBUGTEST       pop bc
  42++DDBE 23                                   inc     hl
  43++DDBF E5                                   push	hl
  44++DDC0 FD E5                                push    iy
  45++DDC2 60                                   ld      h,b
  46++DDC3 69                                   ld      l,c
  47++DDC4                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++DDC4 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++DDC6                                      MMUSelectLayer2
  49++DDC6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++DDCA CD A7 EA                             call    LineHLtoDE
  51++DDCD FD E1                                pop     iy
  52++DDCF E1                                   pop	    hl
  53++DDD0 FD 25                                dec     iyh
  54++DDD2 20 E3                                jr		nz,DrawXX19ClippedLines
  55++DDD4 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++DDD5
# file closed: ././ModelRender/DrawLines.asm
1485+ DDD5              ; ---------------------------------------------------------------------------------------------------------------------------------
1486+ DDD5
1487+ DDD5              ; DIot seem to lawyas have Y = 0???
1488+ DDD5              ProcessDot:            ; break
1489+ DDD5 CD B9 D0                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1490+ DDD8 CD 56 96                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1491+ DDDB CD 6F D3                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1492+ DDDE CD 3C D2                             call    InverseXX16                      ;#11; Invert rotation matrix
1493+ DDE1 21 00 00                             ld      hl,0
1494+ DDE4 32 83 C0                             ld      (UBnkXScaled),a
1495+ DDE7 32 85 C0                             ld      (UBnkYScaled),a
1496+ DDEA 32 87 C0                             ld      (UBnkZScaled),a
1497+ DDED AF                                   xor     a
1498+ DDEE CD 7C 95                             call    XX12EquNodeDotOrientation
1499+ DDF1 CD F0 D0                             call    TransposeXX12ByShipToXX15
1500+ DDF4 CD 6D D1                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1501+ DDF7 FD 21 CE C0                          ld      iy,UBnkNodeArray
1502+ DDFB CD 1D DA                             call    ProjectNodeToEye
1503+ DDFE C9                                   ret
1504+ DDFF
1505+ DDFF              ; .....................................................
1506+ DDFF              ; Process Nodes does the following:
1507+ DDFF              ; for each node:
1508+ DDFF              ;     see if node >
1509+ DDFF 00           PNXX20DIV6          DB      0
1510+ DE00 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1511+ DE02 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1512+ DE04 00           PNLASTNORM          DB      0
1513+ DE05              ProcessNodes:           ZeroA
1513+ DE05 AF          >                        xor a
1514+ DE06 32 00 C3                             ld      (UbnkLineArrayLen),a
1515+ DE09 CD B9 D0                             call CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1516+ DE0C CD 56 96                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1517+ DE0F CD 6F D3                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1518+ DE12 CD 3C D2                             call    InverseXX16                      ;#11; Invert rotation matrix
1519+ DE15 21 25 C3                             ld      hl,UBnkHullVerticies
1520+ DE18 3A 14 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1521+ DE1B 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1522+ DE1C 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1523+ DE1D 16 06                                ld      d,6
1524+ DE1F CD 8F B0                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1525+ DE22 41                                   ld      b,c                              ; c = number of vertices
1526+ DE23 FD 21 CE C0                          ld      iy,UBnkNodeArray
1527+ DE27              LL48:
1528+ DE27 C5           PointLoop:	            push	bc                                  ; save counters
1529+ DE28 E5                                   push	hl                                  ; save verticies list pointer
1530+ DE29 FD E5                                push	iy                                  ; save Screen plot array pointer
1531+ DE2B 78                                   ld      a,b
1532+ DE2C                                      ;break
1533+ DE2C CD 9E D9                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1534+ DE2F 3A 84 C0                             ld		a,(UBnkXScaledSign)
1535+ DE32 CD 7C 95                             call    XX12EquNodeDotOrientation
1536+ DE35 CD F0 D0                             call    TransposeXX12ByShipToXX15
1537+ DE38 CD 6D D1                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1538+ DE3B FD E1                                pop		iy                                  ; get back screen plot array pointer
1539+ DE3D CD 1D DA                             call    ProjectNodeToEye                     ; set up screen plot list entry
1540+ DE40                 ; ld      hl,UbnkLineArrayLen
1541+ DE40                ;  inc     (hl)                                ; another node done
1542+ DE40 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1543+ DE42 E1                                   pop		hl
1544+ DE43 3E 04                                ld		a,4
1545+ DE45 ED 31                                add		hl,a
1546+ DE47 E5                                   push	hl                                  ; write it back at iy + 4
1547+ DE48 FD E1                                pop		iy								    ; and put it in iy again
1548+ DE4A E1                                   pop		hl                                  ; get hl back as vertex list
1549+ DE4B 3E 06                                ld		a,6
1550+ DE4D ED 31                                add 	hl,a                                ; and move to next vertex
1551+ DE4F C1                                   pop		bc                                  ; get counter back
1552+ DE50 10 D5                                djnz	PointLoop
1553+ DE52              ; ......................................................
1554+ DE52                                      ClearCarryFlag
1554+ DE52 B7          >                        or a
1555+ DE53 C9                                   ret
1556+ DE54
1557+ DE54              ; ......................................................
1558+ DE54 CD 1B D6     ProcessShip:            call    CheckDistance               ; checks for z -ve and outside view frustrum
1559+ DE57 D8                                   ret     c                           ; carry flag means drop out
1560+ DE58 3A 9C C0     .IsItADot:              ld      a,(UBnKDrawAsDot)           ; if its just a dot then don't draw
1561+ DE5B                                      JumpIfATrue .CarryOnWithDraw
1561+ DE5B A7          >                        and     a
1561+ DE5C CA 7F DE    >                        jp      z, .CarryOnWithDraw
1562+ DE5F CD D5 DD     .itsJustADot:           call    ProcessDot
1563+ DE62 ED 4B CE C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1564+ DE66 ED 5B D0 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1565+ DE6A 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1566+ DE6B B2                                   or      d                           ;
1567+ DE6C C0                                   ret     nz                          ;
1568+ DE6D 7B                                   ld      a,e
1569+ DE6E E6 80                                and     %10000000                   ; check to see if Y > 128
1570+ DE70 C0                                   ret     nz
1571+ DE71 43                                   ld      b,e                         ; now b = y and c = x
1572+ DE72 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1573+ DE74 3E E0                                ld      a,224
1574+ DE76                                      MMUSelectLayer2                     ; then go to update radar
1574+ DE76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1575+ DE7A CD 29 E1                             call    l2_plot_pixel               ;
1576+ DE7D                                      ClearCarryFlag
1576+ DE7D B7          >                        or a
1577+ DE7E C9                                   ret
1578+ DE7F              .CarryOnWithDraw:       ;break
1579+ DE7F              ;DEBUG                        ld      a,(UBnkaiatkecm)            ; if its exploding then we just draw
1580+ DE7F              ;DEBUG                        and     ShipExploding               ; clouds of pixels
1581+ DE7F              ;DEBUG                        jr      nz,.ExplodingCloud          ; .
1582+ DE7F CD 05 DE                             call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1583+ DE82 CD 69 D6                             call    CullV2
1584+ DE85 CD 3E DF                             call    PrepLines
1585+ DE88 CD A9 DD                             call    DrawLines
1586+ DE8B                                      ClearCarryFlag
1586+ DE8B B7          >                        or a
1587+ DE8C C9                                   ret
1588+ DE8D DD 01        .ExplodingCloud:        break
1589+ DE8F C9                                   ret
1590+ DE90              ; ......................................................
1591+ DE90 3A 22 C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1592+ DE93 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1593+ DE95 C8                                   ret     z
1594+ DE96 3A 35 C0                             ld      a,(UBnKexplDsp)             ; set killed flag
1595+ DE99 F6 80                                or      $80                         ; .
1596+ DE9B 32 35 C0                             ld      (UBnKexplDsp),a             ; .
1597+ DE9E                                      ldWriteZero UBnKEnergy
1597+ DE9E AF          >                        xor      a
1597+ DE9F 32 3A C0    >                        ld       (UBnKEnergy),a
1598+ DEA2 C9                                   ret
1599+ DEA3
1600+ DEA3 47           DamageShip:             ld      b,a
1601+ DEA4 3A 22 C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1602+ DEA7 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1603+ DEA9 C8                                   ret     z
1604+ DEAA 3A 3A C0                             ld      a,(UBnKEnergy)
1605+ DEAD                                      ClearCarryFlag
1605+ DEAD B7          >                        or a
1606+ DEAE 98                                   sbc     a,b
1607+ DEAF FA B6 DE     .Overkilled:            jp      m,.DoneDamage
1608+ DEB2 CD 90 DE                             call    KillShip
1609+ DEB5 C9                                   ret
1610+ DEB6 32 3A C0     .DoneDamage:            ld      (UBnKEnergy),a
1611+ DEB9 C9                                   ret
1612+ DEBA              ; need recovery for energy too
1613+ DEBA              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1614+ DEBA
1615+ DEBA              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1616+ DEBA              ;  Entering Here we have the following:
1617+ DEBA              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1618+ DEBA              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1619+ DEBA              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1620+ DEBA              ;
1621+ DEBA              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1622+ DEBA              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1623+ DEBA              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1624+ DEBA              ;--------------------------------------------------------------------------------------------------------
1625+ DEBA              AddLaserBeamLine:
1626+ DEBA              ; this code is a bag of shit and needs re-writing
1627+ DEBA              GetGunVertexNode:
1628+ DEBA 3A 12 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1629+ DEBD 21 CE C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1630+ DEC0 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1631+ DEC2 FD 2E 00             ld          iyl,0
1632+ DEC5              MoveX1PointToXX15:
1633+ DEC5 4E                   ld          c,(hl)                              ;
1634+ DEC6 23                   inc         hl
1635+ DEC7 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1636+ DEC8 23                   inc         hl
1637+ DEC9 ED 43 83 C0          ld          (UBnkX1),bc
1638+ DECD 0C                   inc         c
1639+ DECE C8                   ret         z                                   ; was c 255?
1640+ DECF 04                   inc         b
1641+ DED0 C8                   ret         z                                   ; was c 255?
1642+ DED1              MoveY1PointToXX15:
1643+ DED1 4E                   ld          c,(hl)                              ;
1644+ DED2 23                   inc         hl
1645+ DED3 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1646+ DED4 23                   inc         hl
1647+ DED5 ED 43 85 C0          ld          (UBnkY1),bc
1648+ DED9              SetX2PointToXX15:
1649+ DED9 01 00 00             ld          bc,0                                ; set X2 to 0
1650+ DEDC ED 43 87 C0          ld          (UBnkX2),bc
1651+ DEE0 3A 12 C0             ld          a,(UBnKzlo)
1652+ DEE3 4F                   ld          c,a
1653+ DEE4              SetY2PointToXX15:
1654+ DEE4 ED 43 89 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1655+ DEE8 3A 0E C0             ld          a,(UBnKxsgn)
1656+ DEEB                      JumpOnBitClear a,7,LL74SkipDec
1656+ DEEB CB 7F       >                        bit 	7,a
1656+ DEED CA F5 DE    >                        jp      z,LL74SkipDec
1657+ DEF0              LL74DecX2:
1658+ DEF0 3E FF                ld          a,$FF
1659+ DEF2 32 87 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1660+ DEF5              LL74SkipDec:
1661+ DEF5 CD 63 CE             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1662+ DEF8 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1663+ DEFA              ; Here we are usign hl to replace VarU as index
1664+ DEFA 2A C0 9D             ld          hl,(varU16)
1665+ DEFD 3A 83 C0             ld          a,(UBnKx1Lo)
1666+ DF00 77                   ld          (hl),a
1667+ DF01 23                   inc         hl
1668+ DF02 3A 85 C0             ld          a,(UbnKy1Lo)
1669+ DF05 77                   ld          (hl),a
1670+ DF06 23                   inc         hl
1671+ DF07 3A 87 C0             ld          a,(UBnkX2Lo)
1672+ DF0A 77                   ld          (hl),a
1673+ DF0B 23                   inc         hl
1674+ DF0C 3A 89 C0             ld          a,(UbnKy2Lo)
1675+ DF0F 77                   ld          (hl),a
1676+ DF10 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1677+ DF12 23                   inc         hl
1678+ DF13 FD 2C                inc         iyl                                 ; ready for next byte
1679+ DF15 22 C0 9D             ld          (varU16),hl
1680+ DF18 C9                   ret
1681+ DF19
1682+ DF19                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DF19              ;--------------------------------------------------------------------------------------------------------
   2++DF19                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DF19              ;--------------------------------------------------------------------------------------------------------
   2++DF19              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DF19 21 CE C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DF1C ED 31                                add         hl,a                                ; hl = address of Node
   5++DF1E 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DF1F 11 83 C0                             ld          de,UBnkX1
   7++DF22 ED A0                                ldi                                             ; x1 lo
   8++DF24 ED A0                                ldi                                             ; x1 hi
   9++DF26 ED A0                                ldi                                             ; y1 lo
  10++DF28 ED A0                                ldi                                             ; y1 hi
  11++DF2A C9                                   ret
  12++DF2B
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DF2B                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DF2B              ;--------------------------------------------------------------------------------------------------------
   2++DF2B              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DF2B 21 CE C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DF2E ED 31                                add         hl,a                                ; hl = address of Node
   5++DF30 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DF31 11 87 C0                             ld          de,UBnkX2
   7++DF34 ED A0                                ldi                                             ; x1 lo
   8++DF36 ED A0                                ldi                                             ; x1 hi
   9++DF38 ED A0                                ldi                                             ; y1 lo
  10++DF3A ED A0                                ldi                                             ; y1 hi
  11++DF3C C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DF3D                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DF3D              ;--------------------------------------------------------------------------------------------------------
   2++DF3D              GetFaceAtA:         MACRO
   3++DF3D ~                                ld          hl,UbnkFaceVisArray
   4++DF3D ~                                add         hl,a
   5++DF3D ~                                ld          a,(hl)                              ; get face visibility
   6++DF3D                                  ENDM
   7++DF3D
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DF3D              ;--------------------------------------------------------------------------------------------------------
   6++DF3D              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DF3D               ;   DEFINE NOBACKFACECULL 1
   8++DF3D 00           PLEDGECTR           DB          0
   9++DF3E
  10++DF3E              PrepLines:
  11++DF3E              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DF3E
  13++DF3E              ; TODO add in onced DOEXP is finished
  14++DF3E              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DF3E              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DF3E              ;        or          8
  17++DF3E              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DF3E              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DF3E              ;EE31:                                                   ; no explosion
  20++DF3E              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DF3E              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DF3E              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DF3E              ;
  24++DF3E              ;--------------------------------------------------------------------------------------------------------
  25++DF3E              InitialiseLineRead:
  26++DF3E                      ;break
  27++DF3E                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DF3E AF          >                        xor      a
  27++DF3F 32 00 C3    >                        ld       (UbnkLineArrayLen),a
  28++DF42                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DF42 AF          >                        xor      a
  28++DF43 32 01 C3    >                        ld       (UbnkLineArrayBytes),a
  29++DF46                      ldWriteZero PLEDGECTR
  29++DF46 AF          >                        xor      a
  29++DF47 32 3D DF    >                        ld       (PLEDGECTR),a
  30++DF4A 3A 15 C3             ld          a,(EdgeCountAddr)
  31++DF4D DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DF4F FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DF52 21 0E C2             ld          hl,UbnkLineArray                    ; head of array
  34++DF55 22 C0 9D             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DF58                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DF58 3A 15 C3    >                        ld       a,(EdgeCountAddr)
  35++DF5B 32 C4 9D    >                        ld       (XX17),a
  36++DF5E 3A 35 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DF61                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DF61 CB 77       >                        bit 	6,a
  37++DF63 CA 6B DF    >                        jp      z,CalculateNewLines
  38++DF66 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DF68 32 35 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DF6B              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DF6B              ; NOw we can calculate hull after including laser line
  42++DF6B              CalculateNewLines:
  43++DF6B              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DF6B              CheckEdgesForVisibility:
  45++DF6B 21 51 C4             ld          hl,UBnkHullEdges
  46++DF6E                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DF6E 22 BF 9C             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DF71 3A 11 C3             ld          a,(LineX4Addr)
  49++DF74 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DF75              LL75Loop:                                               ; count Visible edges
  51++DF75              IsEdgeInVisibilityRange:
  52++DF75 2A BF 9C             ld          hl,(varV)
  53++DF78 E5                   push        hl
  54++DF79 FD E1                pop         iy
  55++DF7B                      IFDEF NOBACKFACECULL
  56++DF7B ~                        jp          VisibileEdge; DEBUGTODO
  57++DF7B                      ENDIF
  58++DF7B 3A AF 9C             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DF7E 57                   ld          d,a                                 ; d holds copy of XX4
  60++DF7F              ; Get Edge Byte 0
  61++DF7F FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DF82                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DF82 BA          >                        cp      d
  62++DF83 DA D5 DF    >                        jp		c, LL78EdgeNotVisible
  63++DF86              EdgeMayBeVisibile:
  64++DF86              ; Get Edge Byte 1
  65++DF86              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DF86 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DF89 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DF8A E6 0F                and         $0F                                 ;
  69++DF8C                      GetFaceAtA
  69++DF8C 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  69++DF8F ED 31       >                    add         hl,a
  69++DF91 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DF92              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DF92                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DF92 A7          >                        and     a
  71++DF93 C2 A7 DF    >                        jp	    nz,VisibileEdge
  72++DF96              IsFace2Visibile:
  73++DF96 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DF97 ED 23                swapnib                                         ;
  75++DF99 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DF9B E5                   push        hl
  77++DF9C                      GetFaceAtA
  77++DF9C 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  77++DF9F ED 31       >                    add         hl,a
  77++DFA1 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DFA2 E1                   pop         hl
  79++DFA3                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DFA3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DFA4 CA D5 DF    >                        jp	    z, LL78EdgeNotVisible
  80++DFA7              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DFA7              ;LL79--Visible edge--------------------------------------
  82++DFA7              ; Get Edge Byte 2
  83++DFA7 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DFAA CD 19 DF             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DFAD FD 7E 03             ld          a,(IY+3)
  86++DFB0 CD 2B DF             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DFB3 CD 63 CE             call        ClipLine
  88++DFB6 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DFB8              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DFB8 ED 5B C0 9D          ld          de,(varU16)                         ; clipped edges heap address
  91++DFBC 21 83 C0             ld          hl,UBnkNewX1
  92++DFBF                      FourLDIInstrunctions
  92++DFBF ED A0       >                        ldi
  92++DFC1 ED A0       >                        ldi
  92++DFC3 ED A0       >                        ldi
  92++DFC5 ED A0       >                        ldi
  93++DFC7 ED 53 C0 9D          ld          (varU16),de                         ; update U16 with current address
  94++DFCB 21 00 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DFCE 34                   inc         (hl)
  96++DFCF 7E                   ld          a,(hl)
  97++DFD0                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DFD0 FE 32       >                        cp     LineArraySize
  97++DFD2 D2 EB DF    >                        jp		nc,CompletedLineGeneration
  98++DFD5              ; If we hit here we skip the write of line arryay u16
  99++DFD5              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DFD5              LL78:
 101++DFD5 2A BF 9C             ld          hl,(varV)                           ; varV is current edge address
 102++DFD8 3E 04                ld          a,4
 103++DFDA ED 31                add         hl,a
 104++DFDC 22 BF 9C             ld          (varV),hl
 105++DFDF 21 3D DF             ld          hl,PLEDGECTR                        ;
 106++DFE2 34                   inc         (hl)                                ;
 107++DFE3 7E                   ld          a,(hl)                              ; current edge index ++
 108++DFE4                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DFE4 21 C4 9D    >                        ld    hl,XX17
 108++DFE7 BE          >                        cp    (hl)
 108++DFE8 C2 75 DF    >                        jp      nz,LL75Loop
 109++DFEB              CompletedLineGeneration:
 110++DFEB              LL81:
 111++DFEB              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DFEB 3A 00 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DFEE CB 27                sla         a
 114++DFF0 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DFF2 32 01 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DFF5              ExitEdgeDataLoop:
 117++DFF5 C9                   ret
 118++DFF6
# file closed: ./Universe/Ships/PrepLines.asm
1683+ DFF6
1684+ DFF6              UnivBankSize  EQU $ - StartOfUniv
1685+ DFF6
# file closed: ./Universe/Ships/univ_ship_data.asm
1473  DFF6                  DISPLAY "Universe Data - Bytes free ",/D, $2000 - (UnivBankSize)
1474  DFF6                  SLOT    UniverseBankAddr
1475  DFF6                  PAGE    BankUNIVDATA1
1476  DFF6              	ORG	UniverseBankAddr,BankUNIVDATA1
1477  C000 FF           UNIVDATABlock1      DB $FF
1478  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1479  E000
1480  E000                  SLOT    UniverseBankAddr
1481  E000                  PAGE    BankUNIVDATA2
1482  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1483  C000 FF           UNIVDATABlock2      DB $FF
1484  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1485  E000
1486  E000                  SLOT    UniverseBankAddr
1487  E000                  PAGE    BankUNIVDATA3
1488  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1489  C000 FF           UNIVDATABlock3      DB $FF
1490  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1491  E000
1492  E000                  SLOT    UniverseBankAddr
1493  E000                  PAGE    BankUNIVDATA4
1494  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1495  C000 FF           UNIVDATABlock4      DB $FF
1496  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1497  E000
1498  E000                  SLOT    UniverseBankAddr
1499  E000                  PAGE    BankUNIVDATA5
1500  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1501  C000 FF           UNIVDATABlock5      DB $FF
1502  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1503  E000
1504  E000                  SLOT    UniverseBankAddr
1505  E000                  PAGE    BankUNIVDATA6
1506  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1507  C000 FF           UNIVDATABlock6      DB $FF
1508  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1509  E000
1510  E000                  SLOT    UniverseBankAddr
1511  E000                  PAGE    BankUNIVDATA7
1512  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1513  C000 FF           UNIVDATABlock7      DB $FF
1514  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1515  E000
1516  E000                  SLOT    UniverseBankAddr
1517  E000                  PAGE    BankUNIVDATA8
1518  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1519  C000 FF           UNIVDATABlock8      DB $FF
1520  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1521  E000
1522  E000                  SLOT    UniverseBankAddr
1523  E000                  PAGE    BankUNIVDATA9
1524  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1525  C000 FF           UNIVDATABlock9      DB $FF
1526  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1527  E000
1528  E000                  SLOT    UniverseBankAddr
1529  E000                  PAGE    BankUNIVDATA10
1530  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1531  C000 FF           UNIVDATABlock10     DB $FF
1532  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1533  E000
1534  E000                  SLOT    UniverseBankAddr
1535  E000                  PAGE    BankUNIVDATA11
1536  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1537  C000 FF           UNIVDATABlock11     DB $FF
1538  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1539  E000
1540  E000                  SLOT    UniverseBankAddr
1541  E000                  PAGE    BankUNIVDATA12
1542  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1543  C000 FF           UNIVDATABlock12     DB $FF
1544  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1545  E000
1546  E000                  SLOT    GalaxyDataAddr
1547  E000                  PAGE    BankGalaxyData0
1548  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1549  E000                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 A2 A6 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 57 A9 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 87 A6 98 A6                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 9E A6 00 00
 317+ F41E AE A6 B5 A6                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 A2 A6 A7 A6                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 8D A6 94 A6                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 BC A6 C3 A6                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 21 A7 BC A6                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 EF A6 00 00
 322+ F446 FB A6 03 A7                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 18 A7 5F A9                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 71 A6 CE A6                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A C8 A6 00 00
 325+ F45E 82 A6 CE A6                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 C8 A6 00 00
 326+ F466 7D A6 CE A6                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A C8 A6 00 00
 327+ F46E 77 A6 CE A6                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 C8 A6 00 00
 328+ F476 71 A6 D4 A6                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A C8 A6 00 00
 329+ F47E 82 A6 D4 A6                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 C8 A6 00 00
 330+ F486 7D A6 D4 A6                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A C8 A6 00 00
 331+ F48E 77 A6 D4 A6                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 C8 A6 00 00
 332+ F496 71 A6 E1 A6                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A C8 A6 00 00
 333+ F49E 82 A6 E1 A6                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 C8 A6 00 00
 334+ F4A6 7D A6 E1 A6                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA C8 A6 00 00
 335+ F4AE 77 A6 E1 A6                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 C8 A6 00 00
 336+ F4B6 71 A6 6A A9                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA C8 A6 00 00
 337+ F4BE 82 A6 6A A9                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 C8 A6 00 00
 338+ F4C6 7D A6 6A A9                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA C8 A6 00 00
 339+ F4CE 77 A6 6A A9                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 C8 A6 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 7F A3     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 97 A3     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 95 AB     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A B3 9E                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD B6 AB     .LargeSizeName:         call	NamingLoop
 402+ F691 CD B6 AB     .SmallSizeName:         call	NamingLoop
 403+ F694 CD B6 AB                             call	NamingLoop
 404+ F697 CD B6 AB                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A B5 9E     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A B6 9E                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A B7 9E                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A B8 9E                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 19 A3     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A FE A2     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 28 9E     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 7D AE                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 A9 9D     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 B3 9E             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 B3 9E             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 A9 9D     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 A9 9D     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 A9 9D     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 C2 9D                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A C2 9D     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 C2 9D     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 5C AF                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 4E 9E                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 4E 9E                             ld      (Distance),a
1231+ FC60 32 4F 9E                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 C2 9D                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 B3 9E                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 6A A3                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A C2 9D                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 C2 9D                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 A9 9D     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 C2 9D                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 A9 9D                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 6A A3                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 9F A3                             call    next_system_seed                ; .
1286+ FCCF 3A C2 9D                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 C2 9D                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1550  FCDC
1551  FCDC                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1552  FCDC
1553  FCDC              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1554  FCDC                  SLOT    SunBankAddr
1555  FCDC                  PAGE    BankSunData
1556  FCDC              	ORG	    SunBankAddr,BankSunData
1557  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 86 99                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB              ; This uses UBNKNodeArray as the list
  94+ C1BB              ; the array is 256 * 2 bytes
  95+ C1BB              ; counter is current row y pos
  96+ C1BB              ; byte 1 is start x pos
  97+ C1BB              ; byte 2 is end x pos
  98+ C1BB              ; if they are both 0 then skip
  99+ C1BB              ; its always horizontal, yellow
 100+ C1BB
 101+ C1BB              ; PLANET
 102+ C1BB
 103+ C1BB
 104+ C1BB              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 104+ C1BB 37          >                        scf
 105+ C1BC C9                                   ret
 106+ C1BD
 107+ C1BD
 108+ C1BD
 109+ C1BD              SunBankDraw:            MACRO
 110+ C1BD ~            .drawLoop               ld      a,(hl)
 111+ C1BD ~                                    ld      c,a                     ; c = left column
 112+ C1BD ~                                    inc     hl
 113+ C1BD ~                                    ld      d,(hl)                  ; d = right col
 114+ C1BD ~                                    inc     hl                      ; now ready for next linel
 115+ C1BD ~                                    push    hl,,bc
 116+ C1BD ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 117+ C1BD ~                                    IfResultZeroGoto .NoLineDraw
 118+ C1BD ~                                    ld      a,d                     ; get right col back
 119+ C1BD ~                                    sub     c                       ; subtract left so a = length
 120+ C1BD ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 121+ C1BD ~                                    call    z, .FixWidth
 122+ C1BD ~                                    ld      d,a                     ; de = length (e - d)
 123+ C1BD ~                                    ld      e,216                   ; yellow
 124+ C1BD ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 125+ C1BD ~            .NoLineDraw:            pop     hl,,bc
 126+ C1BD ~                                    inc     b
 127+ C1BD ~                                    dec     iyh
 128+ C1BD ~                                    IfResultNotZeroGoto  .drawLoop
 129+ C1BD                                      ENDM
 130+ C1BD
 131+ C1BD
 132+ C1BD
 133+ C1BD              SunDraw:                MMUSelectLayer2
 133+ C1BD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 134+ C1C1 3A A1 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 135+ C1C4                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 135+ C1C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ C1C5 CA D5 C1    >                        jp	    z, .OffsetIsZero
 136+ C1C8                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 136+ C1C8 FE 40       >                        cp      64
 136+ C1CA DA E2 C1    >                        jp		c, .OffsetLT64
 137+ C1CD D6 40        .OffsetGTE64:           sub     64
 138+ C1CF 32 A1 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 139+ C1D2 C3 1A C2                             jp      .StartBank2
 140+ C1D5 06 00        .OffsetIsZero:          ld      b,0                     ; row
 141+ C1D7 FD 26 40                             ld      iyh,64                  ; counter
 142+ C1DA 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 143+ C1DD C3 F4 C1                             jp      .StartBank1
 144+ C1E0              ;-- Snuck routine in here so that the macro will be happier
 145+ C1E0 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 146+ C1E1 C9                                   ret
 147+ C1E2 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 148+ C1E5 ED 31                                add     hl,a                    ; .
 149+ C1E7 ED 31                                add     hl,a                    ; .
 150+ C1E9 47                                   ld      b,a                     ; set b row to the actual offset
 151+ C1EA 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 152+ C1EB 3E 40                                ld      a,64                    ; .
 153+ C1ED 91                                   sub     c                       ; .
 154+ C1EE FD 67                                ld      iyh,a
 155+ C1F0 AF                                   xor     a                       ; Ready bank 2 with no offset
 156+ C1F1 32 A1 C5                             ld      (MinYOffset),a          ; .
 157+ C1F4 D9           .StartBank1:            exx
 158+ C1F5 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 159+ C1F7 CD 37 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 160+ C1FA D9                                   exx
 161+ C1FB                                      SunBankDraw
 161+ C1FB 7E          >.drawLoop               ld      a,(hl)
 161+ C1FC 4F          >                        ld      c,a                     ; c = left column
 161+ C1FD 23          >                        inc     hl
 161+ C1FE 56          >                        ld      d,(hl)                  ; d = right col
 161+ C1FF 23          >                        inc     hl                      ; now ready for next linel
 161+ C200 E5 C5       >                        push    hl,,bc
 161+ C202 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 161+ C203             >                        IfResultZeroGoto .NoLineDraw
 161+ C203 CA 12 C2    >                        jp	z,.NoLineDraw
 161+ C206 7A          >                        ld      a,d                     ; get right col back
 161+ C207 91          >                        sub     c                       ; subtract left so a = length
 161+ C208 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 161+ C209 CC E0 C1    >                        call    z, .FixWidth
 161+ C20C 57          >                        ld      d,a                     ; de = length (e - d)
 161+ C20D 1E D8       >                        ld      e,216                   ; yellow
 161+ C20F CD 64 E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 161+ C212 C1 E1       >.NoLineDraw:            pop     hl,,bc
 161+ C214 04          >                        inc     b
 161+ C215 FD 25       >                        dec     iyh
 161+ C217             >                        IfResultNotZeroGoto  .drawLoop
 161+ C217 C2 FB C1    >                        jp	nz,.drawLoop
 162+ C21A 3A A1 C5     .StartBank2:            ld      a,(MinYOffset)
 163+ C21D                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 163+ C21D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 163+ C21E CA 32 C2    >                        jp	    z, .OffsetBank2IsZero
 164+ C221 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 165+ C224 ED 31                                add     hl,a
 166+ C226 ED 31                                add     hl,a
 167+ C228 4F                                   ld      c,a                     ; iyh = 64 - offset
 168+ C229 3E 40                                ld      a,64                    ; .
 169+ C22B 91                                   sub     c                       ; .
 170+ C22C FD 67                                ld      iyh,a                   ; .
 171+ C22E 41                                   ld      b,c                     ; b = offset row
 172+ C22F C3 3A C2                             jp      .drawLineBank2
 173+ C232 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 174+ C235 06 00                                ld      b,0
 175+ C237 FD 26 40                             ld      iyh,64
 176+ C23A D9           .drawLineBank2:         exx
 177+ C23B 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 178+ C23D CD 37 E0                             call    asm_l2_bank_select      ; now do the lower bank
 179+ C240 D9                                   exx
 180+ C241              ; Could make this a sub routine but unwrapping saves a call
 181+ C241                                      SunBankDraw
 181+ C241 7E          >.drawLoop               ld      a,(hl)
 181+ C242 4F          >                        ld      c,a                     ; c = left column
 181+ C243 23          >                        inc     hl
 181+ C244 56          >                        ld      d,(hl)                  ; d = right col
 181+ C245 23          >                        inc     hl                      ; now ready for next linel
 181+ C246 E5 C5       >                        push    hl,,bc
 181+ C248 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 181+ C249             >                        IfResultZeroGoto .NoLineDraw
 181+ C249 CA 58 C2    >                        jp	z,.NoLineDraw
 181+ C24C 7A          >                        ld      a,d                     ; get right col back
 181+ C24D 91          >                        sub     c                       ; subtract left so a = length
 181+ C24E 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 181+ C24F CC E0 C1    >                        call    z, .FixWidth
 181+ C252 57          >                        ld      d,a                     ; de = length (e - d)
 181+ C253 1E D8       >                        ld      e,216                   ; yellow
 181+ C255 CD 64 E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 181+ C258 C1 E1       >.NoLineDraw:            pop     hl,,bc
 181+ C25A 04          >                        inc     b
 181+ C25B FD 25       >                        dec     iyh
 181+ C25D             >                        IfResultNotZeroGoto  .drawLoop
 181+ C25D C2 41 C2    >                        jp	nz,.drawLoop
 182+ C260 C9                                   ret
 183+ C261
 184+ C261              ; --------------------------------------------------------------
 185+ C261              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 186+ C261 CD A5 C1     CreateSun:              call    ResetSBnKData
 187+ C264 3A B6 9E                             ld      a,(WorkingSeeds+3)
 188+ C267 E6 07                                and     %00000111
 189+ C269 F6 81                                or      %10000001
 190+ C26B 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26E 3A B8 9E                             ld      a,(WorkingSeeds+5)
 192+ C271 E6 03                                and     %00000011
 193+ C273 32 12 C0                             ld      (SBnKxsgn),a
 194+ C276 32 15 C0                             ld      (SBnKysgn),a
 195+ C279 21 00 00                             ld      hl, $0000
 196+ C27C 22 17 C0                             ld      (SBnKzhi),hl
 197+ C27F 3E E3                                ld      a, $E3
 198+ C281 32 16 C0                             ld      (SBnKzlo),a
 199+ C284 C9                                   ret
 200+ C285              ; --------------------------------------------------------------
 201+ C285              ; This creates a sun relative to space station on launch
 202+ C285 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 203+ C288 21 00 00                             ld      hl,0
 204+ C28B 3E 00                                ld      a,0
 205+ C28D 22 10 C0                             ld      (SBnKxlo),hl
 206+ C290 22 13 C0                             ld      (SBnKylo),hl
 207+ C293 21 00 E0                             ld      hl,$E000
 208+ C296 22 16 C0                             ld      (SBnKzlo),hl
 209+ C299 32 12 C0                             ld      (SBnKxsgn),a
 210+ C29C 32 18 C0                             ld      (SBnKzsgn),a
 211+ C29F 3E 06                                ld      a,$06
 212+ C2A1 32 15 C0                             ld      (SBnKysgn),a
 213+ C2A4 C9                                   ret
 214+ C2A5              ; --------------------------------------------------------------
 215+ C2A5              ; This sets current universe object to a planet,they use sign + 23 bit positions
 216+ C2A5              ;;TODOCreatePlanet:           call    ResetSBnKData
 217+ C2A5              ;;TODO                        ld      a,(DisplayTekLevel)
 218+ C2A5              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 219+ C2A5              ;;TODO                        or      $10000000
 220+ C2A5              ;;TODO                        ld      (SBnKShipType),a
 221+ C2A5              ;;TODO                        xor     a
 222+ C2A5              ;;TODO                        ld      (SBnKaiatkecm),a
 223+ C2A5              ;;TODO                        MaxUnivPitchAndRoll
 224+ C2A5              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 225+ C2A5              ;;TODO                        and     %00000011               ; .
 226+ C2A5              ;;TODO                        adc     3                       ; .
 227+ C2A5              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 228+ C2A5              ;;TODO                        rr      a
 229+ C2A5              ;;TODO                        ld      (PlanetXsgn),a
 230+ C2A5              ;;TODO                        ld      (PlanetYsgn),a
 231+ C2A5              ;;TODO                        ret
 232+ C2A5
 233+ C2A5
 234+ C2A5                                 ;     include "./Maths/ADDHLDESignBC.asm"
 235+ C2A5
 236+ C2A5 7C           SunADDHLDESignedv3:     ld      a,h
 237+ C2A6 E6 80                                and     SignOnly8Bit
 238+ C2A8 47                                   ld      b,a                         ;save sign bit in b
 239+ C2A9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 240+ C2AA                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 240+ C2AA FA C5 C2    >                        jp		m, .SunADDHLDEOppSGN
 241+ C2AD 78           .SunADDHLDESameSigns:   ld      a,b
 242+ C2AE B2                                   or      d
 243+ C2AF                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 243+ C2AF FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 244+ C2B2                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 244+ C2B2 FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 245+ C2B5 19                                   add     hl,de
 246+ C2B6 C9                                   ret
 247+ C2B7 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 248+ C2B8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 249+ C2BA 67                                   ld      h,a
 250+ C2BB 7A                                   ld      a,d
 251+ C2BC E6 7F                                and     SignMask8Bit
 252+ C2BE 57                                   ld      d,a
 253+ C2BF 19                                   add     hl,de
 254+ C2C0 3E 80                                ld      a,SignOnly8Bit
 255+ C2C2 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 256+ C2C3 67                                   ld      h,a
 257+ C2C4 C9                                   ret
 258+ C2C5 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 259+ C2C6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 260+ C2C8 67                                   ld      h,a
 261+ C2C9 7A                                   ld      a,d
 262+ C2CA E6 7F                                and     SignMask8Bit
 263+ C2CC 57                                   ld      d,a
 264+ C2CD B7                                   or      a
 265+ C2CE ED 52                                sbc     hl,de
 266+ C2D0 38 04                                jr      c,.SunADDHLDEOppInvert
 267+ C2D2 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 268+ C2D3 B4                                   or      h
 269+ C2D4 67                                   ld      h,a                         ; set the previou sign value
 270+ C2D5 C9                                   ret
 271+ C2D6              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 271+ C2D6 AF          >                    xor a
 271+ C2D7 95          >                    sub l
 271+ C2D8 6F          >                    ld l,a
 271+ C2D9 9F          >                    sbc a,a
 271+ C2DA 94          >                    sub h
 271+ C2DB 67          >                    ld h,a
 272+ C2DC 78                                   ld      a,b
 273+ C2DD EE 80                                xor     SignOnly8Bit                ; flip sign bit
 274+ C2DF B4                                   or      h
 275+ C2E0 67                                   ld      h,a                         ; recover sign
 276+ C2E1 C9                                   ret
 277+ C2E2
 278+ C2E2              ; we could cheat, flip the sign of DE and just add but its not very optimised
 279+ C2E2 7C           .SunSUBHLDESignedv3:        ld      a,h
 280+ C2E3 E6 80                                and     SignOnly8Bit
 281+ C2E5 47                                   ld      b,a                         ;save sign bit in b
 282+ C2E6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 283+ C2E7                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 283+ C2E7 FA 15 C3    >                        jp		m, .SunSUBHLDEOppSGN
 284+ C2EA 78           .SunSUBHLDESameSigns:       ld      a,b
 285+ C2EB B2                                   or      d
 286+ C2EC                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 286+ C2EC FA F6 C2    >                        jp		m, .SunSUBHLDESameNeg
 287+ C2EF B7                                   or      a
 288+ C2F0 ED 52                                sbc     hl,de
 289+ C2F2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 289+ C2F2 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 290+ C2F5 C9                                   ret
 291+ C2F6 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 292+ C2F7 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 293+ C2F9 67                                   ld      h,a
 294+ C2FA 7A                                   ld      a,d
 295+ C2FB E6 7F                                and     SignMask8Bit
 296+ C2FD 57                                   ld      d,a
 297+ C2FE B7                                   or      a
 298+ C2FF ED 52                                sbc     hl,de
 299+ C301                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 299+ C301 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 300+ C304 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 301+ C305 F6 80                                or      SignOnly8Bit
 302+ C307 67                                   ld      h,a
 303+ C308 C9                                   ret
 304+ C309              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 304+ C309 AF          >                    xor a
 304+ C30A 95          >                    sub l
 304+ C30B 6F          >                    ld l,a
 304+ C30C 9F          >                    sbc a,a
 304+ C30D 94          >                    sub h
 304+ C30E 67          >                    ld h,a
 305+ C30F 78                                   ld      a,b
 306+ C310 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 307+ C312 B4                                   or      h
 308+ C313 67                                   ld      h,a                         ; recover sign
 309+ C314 C9                                   ret
 310+ C315 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 311+ C316 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 312+ C317 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 313+ C319 67                                   ld      h,a
 314+ C31A 7A                                   ld      a,d
 315+ C31B E6 7F                                and     SignMask8Bit
 316+ C31D 57                                   ld      d,a
 317+ C31E 19                                   add     hl,de
 318+ C31F 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 319+ C320 B4                                   or      h
 320+ C321 67                                   ld      h,a                         ; set the previou sign value
 321+ C322 C9                                   ret
 322+ C323
 323+ C323
 324+ C323              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 324+ C323 CB 7C       >                        bit 	7,h
 324+ C325 C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 325+ C328              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 325+ C328 CB 7C       >                        bit 	7,h
 325+ C32A C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 326+ C32D ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 327+ C32F C9                                   ret
 328+ C330 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 329+ C332 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 330+ C333 CB FA                                set     7,d
 331+ C335 C9                                   ret
 332+ C336 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 333+ C338                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 333+ C338 CB 7A       >                        bit 	7,d
 333+ C33A C2 42 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 334+ C33D ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 335+ C33F CB FC                                set     7,h
 336+ C341 C9                                   ret
 337+ C342 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 338+ C344 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 339+ C345 CB FA                                set     7,d
 340+ C347 CB FC                                set     7,h
 341+ C349 C9                                   ret
 342+ C34A
 343+ C34A
 344+ C34A                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C34A              TransposeSXX12BySunToSXX15:
   2++C34A 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C34D 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C34E E6 80                                and		$80									; check sign bit on high byte
   5++C350 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C351                                      ;110921 debugld      h,0
   7++C351 7C                                   ld      a,h
   8++C352 E6 7F                                and     $7F
   9++C354 67                                   ld      h,a
  10++C355                                      ;110921 debugld      h,0
  11++C355 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C359 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C35C E6 80                                and		$80									; make sure we only have bit 7
  14++C35E 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C35F CD 9E B4                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C362 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C363 67                                   ld		h,a
  18++C364 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C367              ; ..................................
  20++C367 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C36A 7C                                   ld		a,h
  22++C36B E6 80                                and		$80
  23++C36D 47                                   ld		b,a
  24++C36E                                      ;110921 debugld      h,0
  25++C36E 7C                                   ld      a,h
  26++C36F E6 7F                                and     $7F
  27++C371 67                                   ld      h,a
  28++C372                                      ;110921 debugld      h,0
  29++C372 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C376 3A 15 C0                             ld		a,(SBnKysgn)
  31++C379 E6 80                                and		$80									; make sure we only have bit 7
  32++C37B 4F                                   ld		c,a
  33++C37C CD 9E B4                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C37F B4                                   or		h									; combine sign in A with H
  35++C380 67                                   ld		h,a
  36++C381 22 7A C0                             ld		(SBnKYScaled),hl
  37++C384              ; ..................................
  38++C384 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C387 7C                                   ld		a,h
  40++C388 E6 80                                and		$80
  41++C38A 47                                   ld		b,a
  42++C38B                                      ;110921 debugld      h,0
  43++C38B 7C                                   ld      a,h
  44++C38C E6 7F                                and     $7F
  45++C38E 67                                   ld      h,a
  46++C38F                                      ;110921 debugld      h,0
  47++C38F ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C393 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C396 E6 80                                and		$80									; make sure we only have bit 7
  50++C398 4F                                   ld		c,a
  51++C399 CD 9E B4                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C39C B4                                   or		h									; combine sign in A with H
  53++C39D 67                                   ld		h,a
  54++C39E CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3A0 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3A2 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3A4 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3A6 7D                                   ld      a,l                                 ; get low byte now
  59++C3A7                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3A7 FE 04       >                        cp      4
  59++C3A9 DA B8 C3    >                        jp		c, .ClampZto4
  60++C3AC 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3AF 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3B0 32 D9 9D                             ld      (varT),a
  63++C3B3 7C                                   ld		a,h
  64++C3B4 32 BC 9D                             ld      (varU),a
  65++C3B7 C9                                   ret
  66++C3B8              ; This is where we limit 4 to a minimum of 4
  67++C3B8 21 04 00     .ClampZto4:             ld		hl,4
  68++C3BB 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3BE 7D                                   ld		a,l
  70++C3BF 32 D9 9D                             ld      (varT),a                            ;                                                                           ;;;
  71++C3C2 7C                                   ld		a,h
  72++C3C3 32 BC 9D                             ld      (varU),a 						; compatibility for now
  73++C3C6 C9                                   ret
  74++C3C7
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 345+ C3C7
 346+ C3C7
 347+ C3C7 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 348+ C3CB 2A 78 C0                             ld			hl,(SBnKXScaled)
 349+ C3CE ED 5B 7A C0                          ld			de,(SBnKYScaled)
 350+ C3D2 78           .SetABSbc:              ld			a,b
 351+ C3D3 DD 67                                ld			ixh,a
 352+ C3D5 E6 7F                                and			SignMask8Bit
 353+ C3D7 47                                   ld			b,a									; bc = ABS bc
 354+ C3D8 7C           .SetABShl:              ld			a,h
 355+ C3D9 DD 6F                                ld			ixl,a
 356+ C3DB E6 7F                                and			SignMask8Bit
 357+ C3DD 67                                   ld			h,a									; hl = ABS hl
 358+ C3DE 7A           .SetABSde:              ld			a,d
 359+ C3DF FD 67                                ld			iyh,a
 360+ C3E1 E6 7F                                and			SignMask8Bit
 361+ C3E3 57                                   ld			d,a									; de = ABS de
 362+ C3E4 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 363+ C3E5 B4                                   or			h                                   ; XX15+1	\ x hi
 364+ C3E6 B2                                   or			d                                   ; XX15+4	\ y hi
 365+ C3E7 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 366+ C3E9                                      ShiftHLRight1
 366+ C3E9 CB 3C       >			   srl h
 366+ C3EB CB 1D       >			   rr  l
 367+ C3ED                                      ShiftDERight1
 367+ C3ED CB 3A       >			   srl d
 367+ C3EF CB 1B       >			   rr  e
 368+ C3F1                                      ShiftBCRight1
 368+ C3F1 CB 38       >			   srl b
 368+ C3F3 CB 19       >			   rr  c
 369+ C3F5 C3 E4 C3                             jp          .ScaleNodeTo8BitLoop
 370+ C3F8              ; now we have scaled values we have to deal with sign
 371+ C3F8 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 372+ C3FA E6 80                                and			SignOnly8Bit
 373+ C3FC B0                                   or			b
 374+ C3FD 47                                   ld			b,a
 375+ C3FE DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 376+ C400 E6 80                                and			SignOnly8Bit
 377+ C402 B4                                   or			h
 378+ C403 67                                   ld			h,a
 379+ C404 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 380+ C406 E6 80                                and			SignOnly8Bit
 381+ C408 B2                                   or			d
 382+ C409 57                                   ld			d,a
 383+ C40A ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 384+ C40E 22 78 C0                             ld			(SBnKXScaled),hl
 385+ C411 ED 53 7A C0                          ld			(SBnKYScaled),de
 386+ C415 78                                   ld			a,b
 387+ C416 32 BC 9D                             ld			(varU),a
 388+ C419 79                                   ld			a,c
 389+ C41A 32 D9 9D                             ld			(varT),a
 390+ C41D C9                                   ret
 391+ C41E
 392+ C41E              ;--------------------------------------------------------------------------------------------------------
 393+ C41E              ;;;;X = normal scale
 394+ C41E              ;;;;ZtempHi = zhi
 395+ C41E              ;;;;......................................................
 396+ C41E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 397+ C41E              ;;;;  Loop                                              ::LL90
 398+ C41E              ;;;;     inc X
 399+ C41E              ;;;;     divide X, Y & ZtempHiLo by 2
 400+ C41E              ;;;;  Until ZtempHi = 0
 401+ C41E              ;;;;......................................................
 402+ C41E              ;-LL21---------------------------------------------------------------------------------------------------
 403+ C41E              ;                        include "./Universe/NormaliseTransMat.asm"
 404+ C41E              ;-LL91---------------------------------------------------------------------------------------------------
 405+ C41E
 406+ C41E              ; Now we have
 407+ C41E              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 408+ C41E              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 409+ C41E              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 410+ C41E              ;
 411+ C41E              ;--------------------------------------------------------------------------------------------------------
 412+ C41E              ;--------------------------------------------------------------------------------------------------------
 413+ C41E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 414+ C41E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 415+ C41E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 416+ C41E              ; Returns
 417+ C41E              ;
 418+ C41E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 419+ C41E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 420+ C41E              ;
 421+ C41E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 422+ C41E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 423+ C41E              ;
 424+ C41E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 425+ C41E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 426+ C41E
 427+ C41E
 428+ C41E               ; TESTEDOK
 429+ C41E              SXX12DotOneRow:
 430+ C41E              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 430+ C41E 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 430+ C421 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 430+ C422 7E          >                        ld      a,(hl)                        ; A = XX16 element
 430+ C423 57          >                        ld      d,a
 430+ C424 ED 30       >                        mul
 430+ C426 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 430+ C427 32 D9 9D    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 431+ C42A 23                                   inc     hl                                  ; move to sign byte
 432+ C42B              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 432+ C42B 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 432+ C42E AE          >                        xor     (hl)
 433+ C42F 32 BF 9D                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 434+ C432 23                                   inc     hl
 435+ C433              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 435+ C433 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 435+ C436 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 435+ C437 7E          >                        ld      a,(hl)                        ; A = XX16 element
 435+ C438 57          >                        ld      d,a
 435+ C439 ED 30       >                        mul
 435+ C43B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 435+ C43C 32 BD 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 436+ C43F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 436+ C43F 3A D9 9D    >                        ld       a,(varT)
 436+ C442 32 BE 9D    >                        ld       (varR),a
 437+ C445 23                                   inc     hl
 438+ C446                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 438+ C446 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 438+ C449 AE          >                        xor     (hl)
 439+ C44A              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 440+ C44A E5           SSTequSRplusAQ           push    hl
 441+ C44B CD BC B5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 442+ C44E E1                                   pop     hl
 443+ C44F 32 D9 9D                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 444+ C452 23                                   inc     hl
 445+ C453              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 445+ C453 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 445+ C456 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 445+ C457 7E          >                        ld      a,(hl)                        ; A = XX16 element
 445+ C458 57          >                        ld      d,a
 445+ C459 ED 30       >                        mul
 445+ C45B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 445+ C45C 32 BD 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 446+ C45F                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 446+ C45F 3A D9 9D    >                        ld       a,(varT)
 446+ C462 32 BE 9D    >                        ld       (varR),a
 447+ C465 23                                   inc     hl
 448+ C466                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 448+ C466 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 448+ C469 AE          >                        xor     (hl)
 449+ C46A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 450+ C46A CD BC B5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 451+ C46D              ; Now we exit with A = result S = Sign
 452+ C46D C9                                   ret
 453+ C46E
 454+ C46E
 455+ C46E
 456+ C46E              ;--------------------------------------------------------------------------------------------------------
 457+ C46E                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C46E              CopySXX12ScaledToSXX18:
   2++C46E              CopyResultToSDrawCam:
   3++C46E                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C46E 3A 7E C0    >                        ld       a,(SXX12)
   3++C471 32 6C C0    >                        ld       (SXX18),a
   4++C474                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C474 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C477 32 6E C0    >                        ld       (SXX18+2),a
   5++C47A                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C47A 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C47D 32 6F C0    >                        ld       (SXX18+3),a
   6++C480                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C480 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C483 32 71 C0    >                        ld       (SXX18+5),a
   7++C486                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C486 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C489 32 72 C0    >                        ld       (SXX18+6),a
   8++C48C                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C48C 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C48F 32 74 C0    >                        ld       (SXX18+8),a
   9++C492 C9                   ret
  10++C493
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 458+ C493              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 459+ C493              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 460+ C493              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 461+ C493              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 462+ C493              ;--------------------------------------------------------------------------------------------------------
 463+ C493              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 464+ C493              ;--------------------------------------------------------------------------------------------------------
 465+ C493
 466+ C493 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 467+ C495 F8                                   ret     m
 468+ C496 21 78 C0                             ld      hl,SBnKXScaled
 469+ C499 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 470+ C49B 23                                   inc     hl                          ; looking at SunXX15 x sign now
 471+ C49C 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 472+ C49D CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 473+ C49F 23                                   inc     hl                          ; looking at SunXX15 y sign now
 474+ C4A0 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 475+ C4A1 CB 3E                                srl     (hl)
 476+ C4A3 C3 93 C4                             jp      ScaleDownSXX15byIXH
 477+ C4A6 C9                                   ret
 478+ C4A7
 479+ C4A7 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 480+ C4AA CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 481+ C4AC 23                                   inc     hl                          ; looking at XX18 x sign now
 482+ C4AD 23                                   inc     hl                          ; looking at XX18 y Lo now
 483+ C4AE CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 484+ C4B0 23                                   inc     hl                          ; looking at XX18 y sign now
 485+ C4B1 23                                   inc     hl                          ; looking at XX18 z Lo now
 486+ C4B2 CB 3E                                srl     (hl)
 487+ C4B4 C9                                   ret
 488+ C4B5
 489+ C4B5              ; ......................................................                                                         ;;;
 490+ C4B5
 491+ C4B5
 492+ C4B5
 493+ C4B5
 494+ C4B5              ; Pitch and roll are 2 phases
 495+ C4B5              ; 1 - we apply our pitch and roll to the ship position
 496+ C4B5              ;       x -> x + alpha * (y - alpha * x)
 497+ C4B5              ;       y -> y - alpha * x - beta * z
 498+ C4B5              ;       z -> z + beta * (y - alpha * x - beta * z)
 499+ C4B5              ; which can be simplified as:
 500+ C4B5              ;       1. K2 = y - alpha * x
 501+ C4B5              ;       2. z = z + beta * K2
 502+ C4B5              ;       3. y = K2 - beta * z
 503+ C4B5              ;       4. x = x + alpha * y
 504+ C4B5              ; 2 - we apply our patch and roll to the ship orientation
 505+ C4B5              ;      Roll calculations:
 506+ C4B5              ;
 507+ C4B5              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 508+ C4B5              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 509+ C4B5              ;      Pitch calculations:
 510+ C4B5              ;
 511+ C4B5              ;        nosev_y = nosev_y - beta * nosev_z_hi
 512+ C4B5              ;        nosev_z = nosev_z + beta * nosev_y_hi
 513+ C4B5
 514+ C4B5
 515+ C4B5                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4B5
   2++C4B5              ; Full version
   3++C4B5              ; 1. K2 = y - alpha * x
   4++C4B5              ; 2. z = z + beta * K2
   5++C4B5              ; 3. y = K2 - beta * z
   6++C4B5              ; 4. x = x + alpha * y
   7++C4B5
   8++C4B5
   9++C4B5
  10++C4B5              ; SunrollWork holds Alpha intermidate results
  11++C4B5              ;  1. K2 = y - alpha * x
  12++C4B5              ;  2. z = z + beta * K2
  13++C4B5              ;  3. y = K2 - beta * z
  14++C4B5              ;  4. x = x + alpha * y
  15++C4B5              ;.... or
  16++C4B5              ;  2. z = z + (beta * (y - alpha * x))
  17++C4B5              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4B5              ;  4. x = x + (alpha * y)
  19++C4B5
  20++C4B5
  21++C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4B5              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4B5              ; Need to write a test routine for roll and pitchs
  24++C4B5 00 00 00 00  SunAlphaMulX            DS 4
  25++C4B9 00 00 00 00  SunAlphaMulY            DS 4
  26++C4BD 00 00 00 00  SunBetaMulZ             DS 4
  27++C4C1 00 00 00     SunK2                   DS 3
  28++C4C4
  29++C4C4 3A D3 9C     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4C7 21 C5 9C                             ld      hl,BETA
  31++C4CA B6                                   or      (hl)
  32++C4CB E6 7F                                and     SignMask8Bit
  33++C4CD CA 7E C5                             jp      z,.NoRotation
  34++C4D0 3A D3 9C     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4D3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4D5 57                                   ld      d,a                         ; .
  37++C4D6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4D9 5F                                   ld      e,a                         ; .
  39++C4DA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4DD CD BC AE                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4E0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4E0                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4E0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4E1 32 B6 C4                             ld      (SunAlphaMulX+1),a
  45++C4E4 7B                                   ld      a,e
  46++C4E5 32 B7 C4                             ld      (SunAlphaMulX+2),a
  47++C4E8 7A                                   ld      a,d
  48++C4E9 32 B8 C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4EC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C4F0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C4F3 6F                                   ld      l,a                         ; .
  52++C4F4 ED 4B B7 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C4F8 3A B6 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C4FB 67                                   ld      h,a                         ; .
  55++C4FC CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C4FF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C500 32 C1 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C503 ED 53 C2 C4                          ld      (SunK2+1),de                ;
  59++C507 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C508 5F                                   ld      e,a                         ; .
  61++C509 3A C5 9C                             ld      a,(BETA)                    ; D = BETA
  62++C50C 57                                   ld      d,a                         ; .
  63++C50D CD BC AE                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C510 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C514 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C517 67                                   ld      h,a                         ;
  67++C518 CD 4C AC                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C51B ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C51F 7D                                   ld      a,l                         ; .
  70++C520 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C523 3A C5 9C     .CalcBetaZ:             ld      a,(BETA)
  72++C526 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C528 57                                   ld      d,a                         ; .
  74++C529 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C52C 5F                                   ld      e,a                         ; .
  76++C52D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C530 CD BC AE                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C533              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C533                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C533                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C533                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C533                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C533                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C533                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C533                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C533 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C535 65                                   ld      h,l
  88++C536 ED 5B C2 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C53A 3A C1 C4                             ld      a,(SunK2)
  90++C53D 6F                                   ld      l,a
  91++C53E CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C541 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C545 7D                                   ld      a,l                         ; .
  94++C546 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C549 3A D3 9C     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C54C 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C54D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C550 5F                                   ld      e,a                         ; .
  99++C551 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C554 CD BC AE                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C557 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C558 32 B9 C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C55B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C55C 32 BA C4                             ld      (SunAlphaMulY+1),a
 105++C55F 7B                                   ld      a,e
 106++C560 32 BB C4                             ld      (SunAlphaMulY+2),a
 107++C563 7A                                   ld      a,d
 108++C564 32 BC C4                             ld      (SunAlphaMulY+3),a
 109++C567 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C569 65                                   ld      h,l                         ; .
 111++C56A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C56E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C571 6F                                   ld      l,a                         ; .
 114++C572 CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C575 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C576 63                                   ld      h,e                         ;
 117++C577 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C57A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C57D C9                                   ret
 120++C57E 3A B9 9D     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C581                                      ReturnIfAIsZero
 121++C581 A7          >                        and     a
 121++C582 C8          >                        ret     z
 122++C583 0E 00                                ld      c,0                         ;
 123++C585 67                                   ld      h,a                         ;
 124++C586 06 80                                ld      b,$80                       ;
 125++C588 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C58C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C58F 6F                                   ld      l,a                         ; .
 128++C590 CD 4C AC                             call    AddBCHtoDELsigned           ; update speed
 129++C593 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C597 7D                                   ld      a,l
 131++C598 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C59B C9                                   ret
 133++C59C              ;
 134++C59C              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C59C              ;                        ld      hl,BETA
 136++C59C              ;                        or      (hl)
 137++C59C              ;                        and     SignMask8Bit
 138++C59C              ;                        ret     z
 139++C59C              ;.CalcZ:                 ;break
 140++C59C              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C59C              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C59C              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C59C              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C59C              ;                        ld      e,a                         ;
 145++C59C              ;                        ld      hl,(SBnKxhi)                ;
 146++C59C              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C59C              ;                        ld      a,d
 148++C59C              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C59C              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C59C              ;                        ld      h,a
 151++C59C              ;                        ld      bc,(SBnKyhi)
 152++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C59C              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C59C              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C59C              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C59C              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C59C              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C59C              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C59C              ;                        ld      a,(SunRollResult)           ; .
 160++C59C              ;                        ;ld      (SunRollResult2),a          ; .
 161++C59C              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C59C              ;                        ld      a,(BETA)                    ; get pitch
 163++C59C              ;                        ld      d,a                         ; now D = BETA
 164++C59C              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C59C              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C59C              ;                        ld      a,(SBnKzlo)                 ;
 167++C59C              ;                        ld      h,a                         ;
 168++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C59C              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C59C              ;                        ld      (SBnKzhi),de                ; .
 171++C59C              ;                        ld      a,l                         ; .
 172++C59C              ;                        ld      (SunZResult),a              ; .
 173++C59C              ;                        ld      (SBnKzlo),a                 ; .
 174++C59C              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C59C              ;                        ld      e,l                         ;
 176++C59C              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C59C              ;                        ld      d,a                         ;
 178++C59C              ;                        xor     SignOnly8Bit                ;
 179++C59C              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C59C              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C59C              ;                        ld      a,(SunRollResult)           ;
 182++C59C              ;                        ld      h,a                         ;
 183++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C59C              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C59C              ;                        ld      a,l                         ;
 186++C59C              ;                        ld      (SBnKylo),a                 ;
 187++C59C              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C59C              ;                        ld      e,l                         ;
 189++C59C              ;                        ld      a,(ALPHA)
 190++C59C              ;                        ld      d,a                         ; D = alpha
 191++C59C              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C59C              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C59C              ;                        ld      a,(SBnKxlo)                 ;
 194++C59C              ;                        ld      h,a                         ;
 195++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C59C              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C59C              ;                        ld      a,h                         ;
 198++C59C              ;                        ld      (SBnKxlo),a                 ;
 199++C59C              ;                        ret
 200++C59C              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 516+ C59C              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 517+ C59C
 518+ C59C 00           SunOnScreen             DB 0
 519+ C59D 00 00        cLineArrayPtr            DW 0
 520+ C59F 00           LineCount               DB 0
 521+ C5A0 00           RaggedSize              DB 0
 522+ C5A1 00           MinYOffset              DB 0
 523+ C5A2 00           MaxYOffSet              DB 0
 524+ C5A3 00 00        SunScrnX                DW  0       ; signed
 525+ C5A5 00 00        SunScrnY                DW  0       ; signed
 526+ C5A7 00           SunRadius               DB  0       ; unsigned
 527+ C5A8              ; draw circle
 528+ C5A8
 529+ C5A8              ;
 530+ C5A8              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 531+ C5A8
 532+ C5A8 00 00 00 00  SunVarK                 DS 4
 533+ C5AC 00 00 00     SunVarP                 DS 3
 534+ C5AF 00           SunVarQ                 DS 1
 535+ C5B0 00           SunVarR                 DS 1
 536+ C5B1 00           SunVarS                 DS 1
 537+ C5B2 00           SunVarT                 DS 1
 538+ C5B3
 539+ C5B3              ; Optimisation
 540+ C5B3              ; if a <> 0
 541+ C5B3              ;       divide AH by CD
 542+ C5B3              ; if h <> 0
 543+ C5B3              ;      if c <> 0 return 0
 544+ C5B3              ;      else
 545+ C5B3              ;        divide HL by DE
 546+ C5B3              ; if l <>0
 547+ C5B3              ;      if c or d <> 0 return 0
 548+ C5B3              ;      else
 549+ C5B3              ;        divide l by e
 550+ C5B3              ;
 551+ C5B3 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 552+ C5B4 79                                   ld      a,c                         ; check for divide by zero
 553+ C5B5 B2                                   or      d                           ; .
 554+ C5B6 B3                                   or      e                           ; .
 555+ C5B7                                      JumpIfZero      .divideByZero       ; .
 555+ C5B7 CA D0 C5    >                        jp	z,.divideByZero
 556+ C5BA 78                                   ld      a,b                         ; get a back
 557+ C5BB                                      JumpIfAIsNotZero    .divideAHLbyCDE
 557+ C5BB A7          >                        and     a
 557+ C5BC C2 D7 C5    >                        jp	    nz,.divideAHLbyCDE
 558+ C5BF 7C           .AIsZero:               ld      a,h
 559+ C5C0                                      JumpIfAIsNotZero    .divideHLbyDE
 559+ C5C0 A7          >                        and     a
 559+ C5C1 C2 DE C5    >                        jp	    nz,.divideHLbyDE
 560+ C5C4 7D           .HIsZero:               ld      a,l
 561+ C5C5                                      JumpIfAIsNotZero    .divideLbyE
 561+ C5C5 A7          >                        and     a
 561+ C5C6 C2 ED C5    >                        jp	    nz,.divideLbyE
 562+ C5C9              .resultIsZero:          ZeroA
 562+ C5C9 AF          >                        xor a
 563+ C5CA 67                                   ld      h,a                        ; result is zero so set hlde
 564+ C5CB 6F                                   ld      l,a                        ; result is zero so set hlde
 565+ C5CC 54 5D                                ld      de,hl
 566+ C5CE                                      ClearCarryFlag
 566+ C5CE B7          >                        or a
 567+ C5CF C9                                   ret
 568+ C5D0 3E FF        .divideByZero:          ld      a,$FF
 569+ C5D2 67                                   ld      h,a
 570+ C5D3 6F                                   ld      l,a
 571+ C5D4 54 5D                                ld      de,hl
 572+ C5D6                                      SetCarryFlag
 572+ C5D6 37          >                        scf
 573+ C5D7              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 574+ C5D7              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 575+ C5D7 CD 54 AD     .divideAHLbyCDE:        call    Div24by24
 576+ C5DA EB                                   ex      hl,de                         ; ahl is result
 577+ C5DB 79                                   ld      a,c                           ; ahl is result
 578+ C5DC                                      ClearCarryFlag
 578+ C5DC B7          >                        or a
 579+ C5DD              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 580+ C5DD              ;                        ld      e,d                         ; and DE to CD
 581+ C5DD              ;                        ld      d,c                         ; but make sure we do it in the right
 582+ C5DD              ;                        ld      c,h                         ; order so we don't trash values
 583+ C5DD              ;                        call    BC_Div_DE                   ; bc = result
 584+ C5DD              ;                        ld      a,b
 585+ C5DD              ;                        ld      h,c
 586+ C5DD              ;                        ld      l,0
 587+ C5DD C9                                   ret
 588+ C5DE              ; AHL = 0hl/0de as A is zero
 589+ C5DE 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 590+ C5DF                                      JumpIfAIsNotZero   .resultIsZero
 590+ C5DF A7          >                        and     a
 590+ C5E0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 591+ C5E3 44 4D                                ld      bc,hl
 592+ C5E5 CD 11 B1                             call    BC_Div_DE                   ; BC = HL/DE
 593+ C5E8 60 69                                ld      hl,bc
 594+ C5EA                                      ZeroA                               ; so we can set A to Zero
 594+ C5EA AF          >                        xor a
 595+ C5EB                                      ClearCarryFlag
 595+ C5EB B7          >                        or a
 596+ C5EC C9                                   ret
 597+ C5ED              ; AHL = 00l/00e as A and H are zero
 598+ C5ED 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 599+ C5EE B2                                   or      d
 600+ C5EF                                      JumpIfAIsNotZero   .resultIsZero
 600+ C5EF A7          >                        and     a
 600+ C5F0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 601+ C5F3 4B                                   ld      c,e
 602+ C5F4 5D                                   ld      e,l
 603+ C5F5 CD D3 B0                             call    E_Div_C
 604+ C5F8 6F                                   ld      l,a
 605+ C5F9                                      ZeroA
 605+ C5F9 AF          >                        xor a
 606+ C5FA 67                                   ld      h,a
 607+ C5FB                                      ClearCarryFlag
 607+ C5FB B7          >                        or a
 608+ C5FC C9                                   ret
 609+ C5FD
 610+ C5FD
 611+ C5FD              ; Needs tuning for registers vs memroy
 612+ C5FD 22 AC C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 613+ C600 32 AE C5                             ld      (SunVarP+2),a
 614+ C603 ED 53 AF C5                          ld      (SunVarQ),de
 615+ C607 79                                   ld      a,c
 616+ C608 32 B1 C5                             ld      (SunVarS),a
 617+ C60B 3A AC C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 618+ C60E F6 01                                or      1
 619+ C610 32 AC C5                             ld      (SunVarP),a
 620+ C613 3A AE C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 621+ C616 21 B1 C5                             ld      hl,SunVarS
 622+ C619 AE                                   xor     (hl)
 623+ C61A E6 80                                and     SignOnly8Bit
 624+ C61C 32 B2 C5                             ld      (SunVarT),a
 625+ C61F 06 00                                ld      b,0                         ; b = y counter
 626+ C621 3A AE C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 627+ C624 E6 7F                                and     SignMask8Bit                ; .
 628+ C626 2A AC C5                             ld      hl,(SunVarP)                ; shift P left
 629+ C629              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 629+ C629 FE 40       >                        cp     64
 629+ C62B D2 38 C6    >                        jp		nc,.SunDV14
 630+ C62E                                      ShiftHLLeft1                        ;
 630+ C62E CB 25       >			   sla l
 630+ C630 CB 14       >			   rl  h
 631+ C632 CB 17                                rl      a                           ;
 632+ C634 04                                   inc     b                           ; increase shift count
 633+ C635 C3 29 C6                             jp      .SunDVL9
 634+ C638 22 AC C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 635+ C63B 32 AE C5                             ld      (SunVarP+2),a
 636+ C63E 3A B1 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 637+ C641 E6 7F                                and     SignMask8Bit
 638+ C643 2A AF C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 639+ C646 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 640+ C647                                      ShiftHLLeft1                        ; varQRA  shift left
 640+ C647 CB 25       >			   sla l
 640+ C649 CB 14       >			   rl  h
 641+ C64B CB 17                                rl      a                           ;
 642+ C64D F2 46 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 643+ C650 22 AF C5                             ld      (SunVarQ),hl                ; save QR
 644+ C653 32 B1 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 645+ C656                                      ;ld      a,h
 646+ C656                                      ;ld      (varQ),a
 647+ C656 4F                                   ld      c,a
 648+ C657 3A AE C5                             ld      a,(SunVarP+2)
 649+ C65A C5                                   push    bc                          ; save shift counter in b
 650+ C65B CD 5F B0                             call    DIV16Amul256dCUNDOC
 651+ C65E                                      ;call    RequAmul256divQ
 652+ C65E 79                                   ld      a, c
 653+ C65F 32 BE 9D                             ld      (varR),a
 654+ C662 C1                                   pop     bc                          ; retrieve shift counter
 655+ C663 21 00 00                             ld      hl,0                        ; set K to 0
 656+ C666 22 A8 C5                             ld      (SunVarK),hl                ; .
 657+ C669 22 AA C5                             ld      (SunVarK+2),hl              ; .
 658+ C66C CB 78                                bit     7,b                         ; is counter positive
 659+ C66E 28 32                                jr      z,.SunDV12                  ; .
 660+ C670 3A BE 9D                             ld      a,(varR)                    ;
 661+ C673 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 662+ C675 21 A9 C5                             ld      hl,SunVarK+1                ; .
 663+ C678 CB 16                                rl      (hl)                        ; .
 664+ C67A 23                                   inc     hl                          ; .
 665+ C67B CB 16                                rl      (hl)                        ; .
 666+ C67D 23                                   inc     hl                          ; .
 667+ C67E CB 16                                rl      (hl)                        ; .
 668+ C680 04                                   inc     b
 669+ C681 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 670+ C683 32 A8 C5                             ld      (SunVarK),a
 671+ C686 3A AB C5                             ld      a,(SunVarK+3)
 672+ C689 21 B2 C5                             ld      hl,SunVarT
 673+ C68C B6                                   or      (hl)
 674+ C68D 32 AB C5                             ld      (SunVarK+3),a
 675+ C690 C9                                   ret
 676+ C691 3A BE 9D     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 677+ C694 32 A8 C5                             ld      (SunVarK),a
 678+ C697 3A AB C5                             ld      a,(SunVarK+3)
 679+ C69A 21 B2 C5                             ld      hl,SunVarT
 680+ C69D B6                                   or      (hl)
 681+ C69E 32 AB C5                             ld      (SunVarK+3),a
 682+ C6A1 C9                                   ret
 683+ C6A2 78           .SunDV12:               ld      a,b
 684+ C6A3 A7                                   and     a
 685+ C6A4 28 EB                                jr      z,.SunDV13
 686+ C6A6 3A BE 9D                             ld      a,(varR)                    ; it probably is already R so need to test
 687+ C6A9 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 688+ C6AB 05                                   dec     b
 689+ C6AC 20 FB                                jr      nz,.SunDVL10
 690+ C6AE 32 A8 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 691+ C6B1 3A B2 C5                             ld      a,(SunVarT)
 692+ C6B4 32 AB C5                             ld      (SunVarK+3),a
 693+ C6B7 C9                                   ret
 694+ C6B8
 695+ C6B8
 696+ C6B8
 697+ C6B8 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 698+ C6B9 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 699+ C6BD 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 700+ C6C0 FD 67                                ld      iyh,a                       ; save sign
 701+ C6C2                                      ClearSignBitA
 701+ C6C2 E6 7F       >                        and     SignMask8Bit
 702+ C6C4                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 703+ C6C4              ;                        ld      c,a                         ;
 704+ C6C4 5A                                   ld      e,d
 705+ C6C5 57                                   ld      d,a
 706+ C6C6 0E 00                                ld      c,0
 707+ C6C8                                      ; added above to correct positioning as in reality its X/(Z/256)
 708+ C6C8 78                                   ld      a,b                         ; restore sign byte
 709+ C6C9 FD 6F                                ld      iyl,a                       ; save sign
 710+ C6CB                                      ClearSignBitA
 710+ C6CB E6 7F       >                        and     SignMask8Bit
 711+ C6CD CD B3 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 712+ C6D0              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 712+ C6D0 A7          >                        and     a
 712+ C6D1 C2 EE C6    >                        jp	    nz,.IsOffScreen
 713+ C6D4                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 713+ C6D4 7C          >                        ld      a,h
 713+ C6D5 E6 80       >                        and     SignOnly8Bit
 713+ C6D7 C2 EE C6    >                        jp      nz,.IsOffScreen
 714+ C6DA 7C                                   ld      a,h
 715+ C6DB                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 715+ C6DB FE 04       >                        cp    4
 715+ C6DD D0          >                        ret	 nc
 716+ C6DE FD 7C                                ld      a,iyh                       ; now deal with the sign
 717+ C6E0 FD AD                                xor     iyl
 718+ C6E2                                      SignBitOnlyA                        ; a= resultant sign
 718+ C6E2 E6 80       >                        and     SignOnly8Bit
 719+ C6E4 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 720+ C6E6              .XIsNegative:           NegHL                               ; make 2's c as negative
 720+ C6E6 AF          >                    xor a
 720+ C6E7 95          >                    sub l
 720+ C6E8 6F          >                    ld l,a
 720+ C6E9 9F          >                    sbc a,a
 720+ C6EA 94          >                    sub h
 720+ C6EB 67          >                    ld h,a
 721+ C6EC              .calculatedVert:        ClearCarryFlag
 721+ C6EC B7          >                        or a
 722+ C6ED C9                                   ret
 723+ C6EE 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 724+ C6F1 FD 7C                                ld      a,iyh
 725+ C6F3 FD AD                                xor     iyl
 726+ C6F5                                      SignBitOnlyA
 726+ C6F5 E6 80       >                        and     SignOnly8Bit
 727+ C6F7 28 02                                jr      z,.calculatedOffScreen
 728+ C6F9 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 729+ C6FA 23                                   inc     hl                          ; .
 730+ C6FB              .calculatedOffScreen:   SetCarryFlag
 730+ C6FB 37          >                        scf
 731+ C6FC C9                                   ret
 732+ C6FD
 733+ C6FD
 734+ C6FD              ; .........................................................................................................................
 735+ C6FD              ; we only hit this if z is positive so we can ignore signs
 736+ C6FD ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 737+ C701 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 738+ C704 57                                   ld      d,a                         ;
 739+ C705 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 740+ C708 CD 8F AF                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 741+ C70B B4                                   or      h                           ; if A or H are not 0 then max Radius
 742+ C70C                                      JumpIfAIsZero  .SaveRadius
 742+ C70C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 742+ C70D CA 12 C7    >                        jp	    z, .SaveRadius
 743+ C710 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 744+ C712 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 745+ C713 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 746+ C715 32 A7 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 747+ C718 5F                                   ld      e,a                         ; as later code expects it to be in e
 748+ C719 C9                                   ret
 749+ C71A
 750+ C71A              ; Shorter version when sun does not need to be processed to screen
 751+ C71A 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 752+ C71D 2A 10 C0                             ld      hl,(SBnKxlo)
 753+ C720 CD B8 C6                             call    SunProcessVertex
 754+ C723 22 19 C0                             ld      (SunCompassX),hl
 755+ C726 3A 15 C0                             ld      a,(SBnKysgn)
 756+ C729 2A 13 C0                             ld      hl,(SBnKylo)
 757+ C72C CD B8 C6                             call    SunProcessVertex
 758+ C72F 22 1B C0                             ld      (SunCompassY),hl
 759+ C732 C9                                   ret
 760+ C733
 761+ C733                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 762+ C733 CD C4 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 763+ C736 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 764+ C739                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 764+ C739 FE 30       >                        cp     48
 764+ C73B D2 1A C7    >                        jp		nc,SunUpdateCompass
 765+ C73E 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 766+ C741 B6                                   or      (hl)
 767+ C742                                      JumpIfAIsZero       SunUpdateCompass
 767+ C742 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 767+ C743 CA 1A C7    >                        jp	    z, SunUpdateCompass
 768+ C746 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 769+ C749 2A 10 C0                             ld      hl,(SBnKxlo)
 770+ C74C CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 771+ C74F 22 19 C0                             ld      (SunCompassX),hl
 772+ C752 D8                                   ret     c
 773+ C753 1E 80        .calculatedX:           ld      e,ScreenCenterX
 774+ C755 16 00                                ld      d,0
 775+ C757                                      ClearCarryFlag
 775+ C757 B7          >                        or a
 776+ C758 ED 5A                                adc     hl,de
 777+ C75A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 778+ C75A 22 A3 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 779+ C75D 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 780+ C760 2A 13 C0                             ld      hl,(SBnKylo)
 781+ C763 CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 782+ C766 22 1B C0                             ld      (SunCompassY),hl
 783+ C769 D8                                   ret     c
 784+ C76A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 785+ C76C 16 00                                ld      d,0
 786+ C76E EB                                   ex      de,hl
 787+ C76F                                      ClearCarryFlag
 787+ C76F B7          >                        or a
 788+ C770 ED 52                                sbc     hl,de
 789+ C772                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 790+ C772 22 A5 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 791+ C775              ; .........................................................................................................................
 792+ C775 CD FD C6                             call    SunCalculateRadius
 793+ C778              ; .........................................................................................................................
 794+ C778 2A A3 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 795+ C77B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 796+ C77E 16 00                                ld      d,0                         ; e still holds radius
 797+ C780 7C                                   ld      a,h
 798+ C781                                      JumpOnLeadSignSet   h,.CheckXNegative
 798+ C781 7C          >                        ld      a,h
 798+ C782 E6 80       >                        and     SignOnly8Bit
 798+ C784 C2 9A C7    >                        jp      nz,.CheckXNegative
 799+ C787 7C           .CheckXPositive:        ld      a,h
 800+ C788                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 800+ C788 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 800+ C789 CA A3 C7    >                        jp	    z, .XOnScreen
 801+ C78C 16 00                                ld      d,0                         ; de = radius
 802+ C78E                                      ClearCarryFlag
 802+ C78E B7          >                        or a
 803+ C78F ED 52                                sbc     hl,de
 804+ C791 FA A3 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 805+ C794 7C                                   ld      a,h
 806+ C795                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 806+ C795 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 806+ C796 CA A3 C7    >                        jp	    z, .XOnScreen
 807+ C799 C9                                   ret                                 ; None of the X coordinates are on screen
 808+ C79A 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 809+ C79C                                      ClearCarryFlag
 809+ C79C B7          >                        or a
 810+ C79D ED 5A                                adc     hl,de                       ; so we have hl - de
 811+ C79F F2 A3 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 812+ C7A2 C9                                   ret                                 ; else x is totally off the left side of the screen
 813+ C7A3              ; .........................................................................................................................
 814+ C7A3 2A A5 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 815+ C7A6                                      JumpOnLeadSignSet   h,.CheckYNegative
 815+ C7A6 7C          >                        ld      a,h
 815+ C7A7 E6 80       >                        and     SignOnly8Bit
 815+ C7A9 C2 CA C7    >                        jp      nz,.CheckYNegative
 816+ C7AC 7C           .CheckYPositive:        ld      a,h
 817+ C7AD                                      JumpIfAIsNotZero   .PosYCheck2
 817+ C7AD A7          >                        and     a
 817+ C7AE C2 B7 C7    >                        jp	    nz,.PosYCheck2
 818+ C7B1 7D                                   ld      a,l
 819+ C7B2 E6 80                                and     %10000000
 820+ C7B4 CA D3 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 821+ C7B7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 822+ C7B9                                      ClearCarryFlag
 822+ C7B9 B7          >                        or a
 823+ C7BA ED 52                                sbc     hl,de
 824+ C7BC FA D3 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 825+ C7BF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 826+ C7C0                                      ReturnIfANotZero                    ; .
 826+ C7C0 A7          >                        and     a
 826+ C7C1 C0          >                        ret     nz
 827+ C7C2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 828+ C7C3 E6 80                                and     %10000000                   ; .
 829+ C7C5                                      ReturnIfANotZero                    ; .
 829+ C7C5 A7          >                        and     a
 829+ C7C6 C0          >                        ret     nz
 830+ C7C7 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 831+ C7CA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 832+ C7CC                                      ClearCarryFlag
 832+ C7CC B7          >                        or a
 833+ C7CD ED 5A                                adc     hl,de                       ; so we have hl - de
 834+ C7CF F2 D3 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 835+ C7D2 C9                                   ret                                 ; else never gets above 0 so return
 836+ C7D3              ; .........................................................................................................................
 837+ C7D3 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 838+ C7D6 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 839+ C7D9 3E 00                                ld		a,0
 840+ C7DB CD 86 99                             call	memfill_dma
 841+ C7DE              ; .........................................................................................................................
 842+ C7DE 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 843+ C7E1 3A A7 C5                             ld      a,(SunRadius)               ; get readius
 844+ C7E4 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 845+ C7E6                                      FlipCarryFlag
 845+ C7E6 3F          >                        ccf
 846+ C7E7 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 847+ C7E9 FE 28                                cp      40
 848+ C7EB                                      FlipCarryFlag
 848+ C7EB 3F          >                        ccf
 849+ C7EC CB 13                                rl      e
 850+ C7EE FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 851+ C7F0                                      FlipCarryFlag
 851+ C7F0 3F          >                        ccf
 852+ C7F1 CB 13                                rl     e
 853+ C7F3 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 854+ C7F4 32 A0 C5                             ld      (RaggedSize),a
 855+ C7F7              ; .........................................................................................................................
 856+ C7F7 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 857+ C7FA 22 A3 C1                             ld      (LineArrayPtr),hl
 858+ C7FD AF                                   xor     a
 859+ C7FE 32 9F C5                             ld      (LineCount),a
 860+ C801              ; .........................................................................................................................
 861+ C801 2A A5 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 862+ C804 3A A7 C5                             ld      a,(SunRadius)
 863+ C807 5F                                   ld      e,a
 864+ C808 16 00                                ld      d,0
 865+ C80A                                      ClearCarryFlag
 865+ C80A B7          >                        or a
 866+ C80B ED 52                                sbc     hl,de
 867+ C80D F2 13 C8                             jp      p,.DoneMinY
 868+ C810 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 869+ C813              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 869+ C813 7C          >                        ld      a, h
 869+ C814 A7          >                        and     a
 869+ C815 C0          >                        ret     nz
 870+ C816 7D                                   ld      a,l                         ; check if l > 127
 871+ C817 E6 80                                and     SignOnly8Bit                ; .
 872+ C819 C0                                   ret     nz                          ; if bit is set then > 128
 873+ C81A 7D           .SetMinY:               ld      a,l
 874+ C81B 32 A1 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 875+ C81E 2A A5 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 876+ C821 3A A7 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 877+ C824 16 00                                ld      d,0                         ; .
 878+ C826 5F                                   ld      e,a                         ; .
 879+ C827                                      ClearCarryFlag                      ; .
 879+ C827 B7          >                        or a
 880+ C828 ED 5A                                adc     hl,de                       ; .
 881+ C82A 7C                                   ld      a,h
 882+ C82B A7                                   and     a
 883+ C82C 28 06                                jr      z,.YHiOK
 884+ C82E 21 7F 00     .YHiGTE127:             ld      hl,127
 885+ C831 C3 3D C8                             jp      .SetMaxY
 886+ C834 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 887+ C835 E6 80                                and     SignOnly8Bit                ; .
 888+ C837 CA 3D C8                             jp      z,.SetMaxY
 889+ C83A 21 7F 00                             ld      hl,127
 890+ C83D 7D           .SetMaxY                ld      a,l
 891+ C83E 32 A2 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 892+ C841 CD 48 C8                             call    SunDrawCircle
 893+ C844 CD BD C1                             call    SunDraw
 894+ C847 C9                                   ret
 895+ C848                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 896+ C848              ;.. Now we caluclate the circle of the star
 897+ C848              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 898+ C848              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 899+ C848              ; so now there are the following conditions to consider
 900+ C848              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 901+ C848              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 902+ C848              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 903+ C848              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 904+ C848              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 905+ C848              ; x center + radius < 0                                                 => Don't draw
 906+ C848              ; x center - radius > 255                                               => Don't draw
 907+ C848              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 908+ C848              ; x point = max (x point, 0)   on left
 909+ C848              ; x point = min (x point, 255) on right
 910+ C848
 911+ C848              SetIYPlusOffset:        MACRO   reg
 912+ C848 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 913+ C848 ~                                    pop     hl                              ;
 914+ C848 ~                                    ld      a,reg
 915+ C848 ~                                    add     hl,a
 916+ C848 ~                                    add     hl,a
 917+ C848 ~                                    push    hl
 918+ C848 ~                                    pop     iy
 919+ C848 ~                                    pop     hl
 920+ C848                                      ENDM
 921+ C848
 922+ C848              SetIYMinusOffset:       MACRO   reg
 923+ C848 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 924+ C848 ~                                    pop     hl                              ;
 925+ C848 ~                                    ld      a,reg
 926+ C848 ~                                    add     a,a
 927+ C848 ~                                    ld      e,a
 928+ C848 ~                                    ld      d,0
 929+ C848 ~                                    ClearCarryFlag
 930+ C848 ~                                    sbc     hl,de
 931+ C848 ~                                    push    hl
 932+ C848 ~                                    pop     iy
 933+ C848 ~                                    pop     de,,hl
 934+ C848                                      ENDM
 935+ C848
 936+ C848
 937+ C848              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 938+ C848              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 939+ C848              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 940+ C848              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 941+ C848              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 942+ C848              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 943+ C848              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 944+ C848              ;;;-                        push    hl
 945+ C848              ;;;-                        ld      a,(SunRadius)
 946+ C848              ;;;-                        add     hl,a
 947+ C848              ;;;-                        bit     7,h
 948+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 949+ C848              ;;;-                        pop     hl
 950+ C848              ;;;-                        ld      d,0
 951+ C848              ;;;-                        ld      e,a
 952+ C848              ;;;-                        ClearCarryFlag
 953+ C848              ;;;-                        sbc     hl,de
 954+ C848              ;;;-                        ld      a,h
 955+ C848              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 956+ C848              ;;;-
 957+ C848              ;;;-                        ld      hl,(SunScrnX)
 958+ C848              ;;;-                        push    hl
 959+ C848              ;;;-                        ld      a,(SunRadius)
 960+ C848              ;;;-                        add     hl,a
 961+ C848              ;;;-                        bit     7,h
 962+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 963+ C848              ;;;-                        pop     hl
 964+ C848              ;;;-                        ld      d,0
 965+ C848              ;;;-                        ld      e,a
 966+ C848              ;;;-                        ClearCarryFlag
 967+ C848              ;;;-                        sbc     hl,de
 968+ C848              ;;;-                        ld      a,h
 969+ C848              ;;;-
 970+ C848              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 971+ C848              SunDrawCircle
 972+ C848                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 973+ C848              .PrepCircleData:       ; ld      ixl,0
 974+ C848                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 975+ C848 3A A7 C5                             ld      a,(SunRadius)
 976+ C84B DD 67                                ld		ixh,a							; ixh = radius
 977+ C84D DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 978+ C850 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 979+ C852 6F                                   ld		l,a                             ; .
 980+ C853 29                                   add		hl,hl							; .
 981+ C854 EB                                   ex		de,hl							; .
 982+ C855 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 983+ C858 A7                                   and		a                               ; .
 984+ C859 ED 52                                sbc		hl,de							; .
 985+ C85B 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 986+ C85C 4D                                   ld		c,l								; .
 987+ C85D 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 988+ C860 16 00                                ld		d,0                             ; de = ixl
 989+ C862 DD 5D                                ld		e,ixl                           ;
 990+ C864                                      ClearCarryFlag                          ;
 990+ C864 B7          >                        or a
 991+ C865 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 992+ C867 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 993+ C86A DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 994+ C86C DD BD                                cp		ixl                             ;
 995+ C86E D8                                   ret		c                               ;
 996+ C86F D9           .ProcessLoop:	        exx                                     ; save out registers
 997+ C870              ; Process CY+Y CX+X & CY+Y CX-X..................................
 998+ C870 2A A5 C5     .Plot1:                 ld      hl, (SunScrnY)
 999+ C873 DD 7C        .Get1YRow:              ld      a,ixh
1000+ C875 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1001+ C877              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1001+ C877 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1001+ C878 A7          >                        and     a                               ; .
1001+ C879 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1001+ C87B 7D          >                        ld      a,l                             ; l bit 7 0?
1001+ C87C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1001+ C87E 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1002+ C880              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1002+ C880 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1002+ C883 E1          >                        pop     hl                              ;
1002+ C884 DD 7C       >                        ld      a,ixh
1002+ C886 ED 31       >                        add     hl,a
1002+ C888 ED 31       >                        add     hl,a
1002+ C88A E5          >                        push    hl
1002+ C88B FD E1       >                        pop     iy
1002+ C88D E1          >                        pop     hl
1003+ C88E                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1003+ C88E 7D          >                        ld      a,l
1003+ C88F 21 A3 C0    >                        ld      hl,SBnKLineArray
1003+ C892 ED 31       >                        add     hl,a
1003+ C894 ED 31       >                        add     hl,a
1003+ C896 E5          >                        push    hl
1003+ C897 FD E1       >                        pop     iy
1004+ C899 DD 7D                                ld      a,ixl
1005+ C89B CD 6E C9                             call    ProcessXRowA
1006+ C89E C3 A1 C8                             jp      .Plot2
1007+ C8A1              .NoTopPixelPair:        ;break
1008+ C8A1              ; Process CY-Y CX+X & CY-Y CX-X..................................
1009+ C8A1 2A A5 C5     .Plot2:                 ld      hl, (SunScrnY)
1010+ C8A4 16 00        .Get2YRow:              ld      d,0
1011+ C8A6 DD 5C                                ld      e,ixh
1012+ C8A8                                      ClearCarryFlag
1012+ C8A8 B7          >                        or a
1013+ C8A9 ED 52                                sbc     hl,de
1014+ C8AB              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1014+ C8AB 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1014+ C8AC A7          >                        and     a                               ; .
1014+ C8AD 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1014+ C8AF 7D          >                        ld      a,l                             ; l bit 7 0?
1014+ C8B0 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1014+ C8B2 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1015+ C8B4                                      SetIYMinusOffset ixh
1015+ C8B4 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1015+ C8B8 E1          >                        pop     hl                              ;
1015+ C8B9 DD 7C       >                        ld      a,ixh
1015+ C8BB 87          >                        add     a,a
1015+ C8BC 5F          >                        ld      e,a
1015+ C8BD 16 00       >                        ld      d,0
1015+ C8BF             >                        ClearCarryFlag
1015+ C8BF B7          >                        or a
1015+ C8C0 ED 52       >                        sbc     hl,de
1015+ C8C2 E5          >                        push    hl
1015+ C8C3 FD E1       >                        pop     iy
1015+ C8C5 E1 D1       >                        pop     de,,hl
1016+ C8C7              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1016+ C8C7 7D          >                        ld      a,l
1016+ C8C8 21 A3 C0    >                        ld      hl,SBnKLineArray
1016+ C8CB ED 31       >                        add     hl,a
1016+ C8CD ED 31       >                        add     hl,a
1016+ C8CF E5          >                        push    hl
1016+ C8D0 FD E1       >                        pop     iy
1017+ C8D2 DD 7D                                ld      a,ixl
1018+ C8D4 CD 6E C9                             call    ProcessXRowA
1019+ C8D7 C3 DA C8                             jp      .Plot3
1020+ C8DA              .NoBottomPixelPair:     ;break
1021+ C8DA              ; Process CY+X CX+Y & CY+X CX-Y..................................
1022+ C8DA 2A A5 C5     .Plot3:                 ld      hl, (SunScrnY)
1023+ C8DD DD 7D        .Get3YRow:              ld      a,ixl
1024+ C8DF ED 31                                add     hl,a                            ; Check to see if CY+Y
1025+ C8E1              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1025+ C8E1 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1025+ C8E2 A7          >                        and     a                               ; .
1025+ C8E3 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1025+ C8E5 7D          >                        ld      a,l                             ; l bit 7 0?
1025+ C8E6 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1025+ C8E8 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1026+ C8EA                                      SetIYPlusOffset ixl
1026+ C8EA E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1026+ C8ED E1          >                        pop     hl                              ;
1026+ C8EE DD 7D       >                        ld      a,ixl
1026+ C8F0 ED 31       >                        add     hl,a
1026+ C8F2 ED 31       >                        add     hl,a
1026+ C8F4 E5          >                        push    hl
1026+ C8F5 FD E1       >                        pop     iy
1026+ C8F7 E1          >                        pop     hl
1027+ C8F8              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1027+ C8F8 7D          >                        ld      a,l
1027+ C8F9 21 A3 C0    >                        ld      hl,SBnKLineArray
1027+ C8FC ED 31       >                        add     hl,a
1027+ C8FE ED 31       >                        add     hl,a
1027+ C900 E5          >                        push    hl
1027+ C901 FD E1       >                        pop     iy
1028+ C903 DD 7C                                ld      a,ixh
1029+ C905 CD 6E C9                             call    ProcessXRowA
1030+ C908 C3 0B C9                             jp      .Plot4
1031+ C90B              .NoTop3PixelPair:       ;break
1032+ C90B              ; Process CY-X CX+Y & CY-X CX-Y..................................
1033+ C90B 2A A5 C5     .Plot4:                 ld      hl, (SunScrnY)
1034+ C90E 16 00        .Get4YRow:              ld      d,0
1035+ C910 DD 5D                                ld      e,ixl
1036+ C912                                      ClearCarryFlag
1036+ C912 B7          >                        or a
1037+ C913 ED 52                                sbc     hl,de
1038+ C915              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1038+ C915 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1038+ C916 A7          >                        and     a                               ; .
1038+ C917 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1038+ C919 7D          >                        ld      a,l                             ; l bit 7 0?
1038+ C91A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1038+ C91C 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1039+ C91E                                      SetIYMinusOffset ixl
1039+ C91E D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1039+ C922 E1          >                        pop     hl                              ;
1039+ C923 DD 7D       >                        ld      a,ixl
1039+ C925 87          >                        add     a,a
1039+ C926 5F          >                        ld      e,a
1039+ C927 16 00       >                        ld      d,0
1039+ C929             >                        ClearCarryFlag
1039+ C929 B7          >                        or a
1039+ C92A ED 52       >                        sbc     hl,de
1039+ C92C E5          >                        push    hl
1039+ C92D FD E1       >                        pop     iy
1039+ C92F E1 D1       >                        pop     de,,hl
1040+ C931              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1040+ C931 7D          >                        ld      a,l
1040+ C932 21 A3 C0    >                        ld      hl,SBnKLineArray
1040+ C935 ED 31       >                        add     hl,a
1040+ C937 ED 31       >                        add     hl,a
1040+ C939 E5          >                        push    hl
1040+ C93A FD E1       >                        pop     iy
1041+ C93C DD 7C                                ld      a,ixh
1042+ C93E CD 6E C9                             call    ProcessXRowA
1043+ C941              .NoBottom4PixelPair:
1044+ C941              ; Completed one iteration........................................
1045+ C941 D9                                   exx
1046+ C942 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1047+ C944 28 03                                jr z,   .draw_circle_1
1048+ C946 19                                   add hl,de			; Delta=Delta+D1
1049+ C947 18 05                                jr      .draw_circle_2		;
1050+ C949 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1051+ C94A 03                                   inc     bc
1052+ C94B 03                                   inc     bc				; D2=D2+2
1053+ C94C DD 25                                dec     ixh				; Y=Y-1
1054+ C94E 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1055+ C94F 03                                   inc bc
1056+ C950 13                                   inc de				    ; D1=D1+2
1057+ C951 13                                   inc de
1058+ C952 DD 2C                                inc ixl				    ; X=X+1
1059+ C954 C3 6A C8                             jp      .CircleLoop
1060+ C957 2A A3 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1061+ C95A 7C                                   ld      a,h
1062+ C95B A7                                   and     a
1063+ C95C C0                                   ret     nz                  ; if the high byte is set then no pixel
1064+ C95D 4D                                   ld      c,l
1065+ C95E 2A A5 C5                             ld      hl,(SunScrnY)
1066+ C961 7C                                   ld      a,h
1067+ C962 A7                                   and     a
1068+ C963 C0                                   ret     nz                  ; if the high byte is set then no pixel
1069+ C964 7D                                   ld      a,l
1070+ C965 CB 7F                                bit     7,a
1071+ C967 C0                                   ret     nz                  ; if l > 127 then no pixel
1072+ C968 47                                   ld      b,a
1073+ C969 7B                                   ld		a,e
1074+ C96A CD 43 E1                             call	l2_plot_pixel_y_test
1075+ C96D C9                                   ret
1076+ C96E
1077+ C96E              ProcessXRowA:           ;break
1078+ C96E 2A A3 C5                             ld      hl,(SunScrnX)                    ; get X Center
1079+ C971 F5                                   push    af                              ; save A (curent offset +/- value
1080+ C972 ED 31                                add     hl,a                            ; Hl = HL + offset
1081+ C974 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1082+ C975 CB 7F                                bit     7,a                             ;
1083+ C977 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1084+ C979 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1085+ C97A 20 16                                jr      nz,.XCoordMaxed                 ; .
1086+ C97C 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1087+ C97D C5           .AddFuzz:               push    bc
1088+ C97E CD 35 A3                             call    doRandom                        ; c = c - random AND ragged Size
1089+ C981 C1                                   pop     bc
1090+ C982 21 A0 C5                             ld      hl,RaggedSize                   ;
1091+ C985 A6                                   and     (hl)                            ;
1092+ C986 81                                   add     c                               ;
1093+ C987 4F                                   ld      c,a                             ;
1094+ C988 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1095+ C98A C3 94 C9                             jp      .ProcessSubtract                ;
1096+ C98D 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1097+ C98F C3 94 C9                             jp      .ProcessSubtract
1098+ C992 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1099+ C994 F1           .ProcessSubtract:       pop     af                              ; get offset back
1100+ C995 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1101+ C996 16 00                                ld      d,0
1102+ C998 2A A3 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1103+ C99B                                      ClearCarryFlag                          ; .
1103+ C99B B7          >                        or a
1104+ C99C ED 52                                sbc     hl,de                           ; .
1105+ C99E FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1106+ C9A1 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1107+ C9A3 CD 35 A3                             call    doRandom                        ; c = c - random AND ragged Size
1108+ C9A6 C1                                   pop     bc
1109+ C9A7 21 A0 C5                             ld      hl,RaggedSize                   ;
1110+ C9AA A6                                   and     (hl)                            ;
1111+ C9AB 5F                                   ld      e,a
1112+ C9AC E1                                   pop     hl
1113+ C9AD ED 52                                sbc     hl,de
1114+ C9AF FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1115+ C9B2 7C                                   ld      a,h
1116+ C9B3 A7                                   and     a
1117+ C9B4 C2 C0 C9                             jp      nz,.XCordLeftMaxed
1118+ C9B7 45                                   ld      b,l
1119+ C9B8 C3 C2 C9                             jp      .CompletedXCoords
1120+ C9BB 06 00        .XCoordLeftNegative:    ld      b,0
1121+ C9BD C3 C2 C9                             jp      .CompletedXCoords
1122+ C9C0 06 FF        .XCordLeftMaxed:        ld      b,255
1123+ C9C2 78           .CompletedXCoords:      ld      a,b
1124+ C9C3 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1125+ C9C6 79                                   ld      a,c
1126+ C9C7 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1127+ C9CA C9                                   ret
1128+ C9CB
1129+ C9CB              ; .....................................................
1130+ C9CB              ; if the universe object is a planet or sun then do that instead
1131+ C9CB              ;;TODOProcessPlanet:          cp      129
1132+ C9CB              ;;TODO                        jr      nz, .ItsAPlanet
1133+ C9CB              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1134+ C9CB              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1135+ C9CB
1136+ C9CB
1137+ C9CB              ; Square Root using tables
1138+ C9CB              ; DE = number to find
1139+ C9CB 21 EB CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1140+ C9CE 7A           .LookupCorseJump:       ld      a,d
1141+ C9CF ED 31                                add     hl,a
1142+ C9D1 ED 31                                add     hl,a
1143+ C9D3 7E                                   ld      a,(hl)
1144+ C9D4 23                                   inc     hl
1145+ C9D5 66                                   ld      h,(hl)
1146+ C9D6 6F                                   ld      l,a
1147+ C9D7 7E           .FineSearchLoop:        ld      a,(hl)
1148+ C9D8                                      JumpIfAEqNusng  e, .FoundByte
1148+ C9D8 BB          >                        cp     e
1148+ C9D9 CA E5 C9    >                        jp      z,.FoundByte
1149+ C9DC                                      JumpIfAGTENusng e, .PreviousByte
1149+ C9DC BB          >                        cp     e
1149+ C9DD D2 E8 C9    >                        jp		nc,.PreviousByte
1150+ C9E0 23           .NotFound:              inc     hl
1151+ C9E1 23                                   inc     hl
1152+ C9E2 C3 D7 C9                             jp      .FineSearchLoop
1153+ C9E5 23           .FoundByte:             inc     hl
1154+ C9E6 7E                                   ld      a,(hl)
1155+ C9E7 C9                                   ret
1156+ C9E8 2B           .PreviousByte:          dec     hl
1157+ C9E9 7E                                   ld      a,(hl)
1158+ C9EA C9                                   ret
1159+ C9EB
1160+ C9EB EB CB FD CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1160+ C9EF 0B CC 17 CC
1160+ C9F3 21 CC 29 CC
1160+ C9F7 31 CC 39 CC
1160+ C9FB 41 CC 47 CC
1160+ C9FF 4F CC 55 CC
1160+ CA03 59 CC 5F CC
1160+ CA07 65 CC 6B CC
1161+ CA0B 71 CC 77 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1161+ CA0F 7D CC 83 CC
1161+ CA13 89 CC 8D CC
1161+ CA17 91 CC 93 CC
1161+ CA1B 97 CC 9B CC
1161+ CA1F 9F CC A3 CC
1161+ CA23 A7 CC AB CC
1161+ CA27 AD CC B1 CC
1162+ CA2B B3 CC B7 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1162+ CA2F BB CC BD CC
1162+ CA33 BF CC C3 CC
1162+ CA37 C5 CC C7 CC
1162+ CA3B CB CC CD CC
1162+ CA3F CF CC D1 CC
1162+ CA43 D5 CC D7 CC
1162+ CA47 D9 CC DD CC
1163+ CA4B E1 CC E5 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1163+ CA4F E9 CC ED CC
1163+ CA53 EF CC F3 CC
1163+ CA57 F7 CC FB CC
1163+ CA5B FD CC 01 CD
1163+ CA5F 05 CD 09 CD
1163+ CA63 0D CD 11 CD
1163+ CA67 15 CD 19 CD
1164+ CA6B 1D CD 21 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1164+ CA6F 25 CD 29 CD
1164+ CA73 2D CD 31 CD
1164+ CA77 35 CD 39 CD
1164+ CA7B 3D CD 41 CD
1164+ CA7F 45 CD 49 CD
1164+ CA83 4D CD 51 CD
1164+ CA87 55 CD 59 CD
1165+ CA8B 5D CD 5F CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1165+ CA8F 63 CD 67 CD
1165+ CA93 6B CD 6F CD
1165+ CA97 73 CD 77 CD
1165+ CA9B 7B CD 7D CD
1165+ CA9F 81 CD 85 CD
1165+ CAA3 89 CD 8D CD
1165+ CAA7 91 CD 93 CD
1166+ CAAB 97 CD 9B CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1166+ CAAF 9F CD A3 CD
1166+ CAB3 A5 CD A9 CD
1166+ CAB7 AD CD B1 CD
1166+ CABB B5 CD B7 CD
1166+ CABF BB CD BF CD
1166+ CAC3 C3 CD C5 CD
1166+ CAC7 C7 CD CB CD
1167+ CACB CF CD D3 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1167+ CACF D7 CD DB CD
1167+ CAD3 DF CD E3 CD
1167+ CAD7 E5 CD E9 CD
1167+ CADB ED CD EF CD
1167+ CADF F3 CD F7 CD
1167+ CAE3 FB CD FD CD
1167+ CAE7 01 CE 05 CE
1168+ CAEB 09 CE 0B CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1168+ CAEF 0F CE 11 CE
1168+ CAF3 15 CE 19 CE
1168+ CAF7 1D CE 1F CE
1168+ CAFB 23 CE 27 CE
1168+ CAFF 29 CE 2D CE
1168+ CB03 31 CE 33 CE
1168+ CB07 37 CE 3B CE
1169+ CB0B 3D CE 41 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1169+ CB0F 45 CE 47 CE
1169+ CB13 4B CE 4F CE
1169+ CB17 51 CE 55 CE
1169+ CB1B 59 CE 5B CE
1169+ CB1F 5F CE 63 CE
1169+ CB23 65 CE 69 CE
1169+ CB27 6D CE 6F CE
1170+ CB2B 73 CE 77 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1170+ CB2F 79 CE 7D CE
1170+ CB33 7F CE 83 CE
1170+ CB37 87 CE 89 CE
1170+ CB3B 8D CE 8F CE
1170+ CB3F 93 CE 97 CE
1170+ CB43 99 CE 9D CE
1170+ CB47 A1 CE A3 CE
1171+ CB4B A5 CE A7 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1171+ CB4F AB CE AF CE
1171+ CB53 B1 CE B5 CE
1171+ CB57 B7 CE BB CE
1171+ CB5B BF CE C3 CE
1171+ CB5F C5 CE C7 CE
1171+ CB63 CB CE CD CE
1171+ CB67 D1 CE D5 CE
1172+ CB6B D7 CE DB CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1172+ CB6F DD CE E1 CE
1172+ CB73 E3 CE E7 CE
1172+ CB77 EB CE ED CE
1172+ CB7B EF CE F1 CE
1172+ CB7F F5 CE F7 CE
1172+ CB83 FB CE FF CE
1172+ CB87 01 CF 05 CF
1173+ CB8B 07 CF 0B CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1173+ CB8F 0D CF 11 CF
1173+ CB93 13 CF 17 CF
1173+ CB97 1B CF 1D CF
1173+ CB9B 21 CF 23 CF
1173+ CB9F 27 CF 29 CF
1173+ CBA3 2D CF 2F CF
1173+ CBA7 31 CF 33 CF
1174+ CBAB 37 CF 3B CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1174+ CBAF 3F CF 43 CF
1174+ CBB3 47 CF 4B CF
1174+ CBB7 4D CF 51 CF
1174+ CBBB 55 CF 59 CF
1174+ CBBF 5B CF 5F CF
1174+ CBC3 61 CF 63 CF
1174+ CBC7 65 CF 69 CF
1175+ CBCB 6B CF 6D CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1175+ CBCF 6F CF 73 CF
1175+ CBD3 75 CF 79 CF
1175+ CBD7 7B CF 7F CF
1175+ CBDB 81 CF 85 CF
1175+ CBDF 87 CF 8B CF
1175+ CBE3 8D CF 91 CF
1175+ CBE7 93 CF 95 CF
1176+ CBEB
1177+ CBEB              SunSquareRootTable:
1178+ CBEB 00 00        SunSqr00:               DB $00,   0
1179+ CBED 04 02                                DB $04,   2
1180+ CBEF 10 04                                DB $10,   4
1181+ CBF1 24 06                                DB $24,   6
1182+ CBF3 40 08                                DB $40,   8
1183+ CBF5 64 0A                                DB $64,  10
1184+ CBF7 90 0C                                DB $90,  12
1185+ CBF9 C4 0E                                DB $C4,  14
1186+ CBFB FF 0F                                DB $FF,  15
1187+ CBFD 00 10        SunSqr01:               DB $00,  16
1188+ CBFF 21 11                                DB $21,  17
1189+ CC01 44 12                                DB $44,  18
1190+ CC03 69 13                                DB $69,  19
1191+ CC05 90 14                                DB $90,  20
1192+ CC07 B9 15                                DB $B9,  21
1193+ CC09 FF 16                                DB $FF,  22
1194+ CC0B 11 17        SunSqr02:               DB $11,  23
1195+ CC0D 40 18                                DB $40,  24
1196+ CC0F 71 19                                DB $71,  25
1197+ CC11 A4 1A                                DB $A4,  26
1198+ CC13 D9 1B                                DB $D9,  27
1199+ CC15 FF 1B                                DB $FF,  27
1200+ CC17 10 1C        SunSqr03:               DB $10,  28
1201+ CC19 49 1D                                DB $49,  29
1202+ CC1B 84 1E                                DB $84,  30
1203+ CC1D C1 1F                                DB $C1,  31
1204+ CC1F FF 1F                                DB $FF,  31
1205+ CC21 00 20        SunSqr04:               DB $00,  32
1206+ CC23 41 21                                DB $41,  33
1207+ CC25 84 22                                DB $84,  34
1208+ CC27 FF 23                                DB $FF,  35
1209+ CC29 10 24        SunSqr05:               DB $10,  36
1210+ CC2B 59 25                                DB $59,  37
1211+ CC2D A4 26                                DB $A4,  38
1212+ CC2F FF 27                                DB $FF,  39
1213+ CC31 40 28        SunSqr06:               DB $40,  40
1214+ CC33 91 29                                DB $91,  41
1215+ CC35 E4 2A                                DB $E4,  42
1216+ CC37 FF 2A                                DB $FF,  42
1217+ CC39 39 2B        SunSqr07:               DB $39,  43
1218+ CC3B 90 2C                                DB $90,  44
1219+ CC3D E9 2D                                DB $E9,  45
1220+ CC3F FF 2D                                DB $FF,  45
1221+ CC41 44 2E        SunSqr08:               DB $44,  46
1222+ CC43 A1 2F                                DB $A1,  47
1223+ CC45 FF 2F                                DB $FF,  47
1224+ CC47 00 30        SunSqr09:               DB $00,  48
1225+ CC49 61 31                                DB $61,  49
1226+ CC4B C4 32                                DB $C4,  50
1227+ CC4D FF 32                                DB $FF,  50
1228+ CC4F 29 33        SunSqr0A:               DB $29,  51
1229+ CC51 90 34                                DB $90,  52
1230+ CC53 FF 35                                DB $FF,  53
1231+ CC55 64 36        SunSqr0B:               DB $64,  54
1232+ CC57 FF 37                                DB $FF,  55
1233+ CC59 40 38        SunSqr0C:               DB $40,  56
1234+ CC5B B1 39                                DB $B1,  57
1235+ CC5D FF 39                                DB $FF,  57
1236+ CC5F 24 3A        SunSqr0D:               DB $24,  58
1237+ CC61 99 3B                                DB $99,  59
1238+ CC63 FF 3B                                DB $FF,  59
1239+ CC65 10 3C        SunSqr0E:               DB $10,  60
1240+ CC67 89 3D                                DB $89,  61
1241+ CC69 FF 3D                                DB $FF,  61
1242+ CC6B 04 3E        SunSqr0F:               DB $04,  62
1243+ CC6D 81 3F                                DB $81,  63
1244+ CC6F FF 3F                                DB $FF,  63
1245+ CC71 00 40        SunSqr10:               DB $00,  64
1246+ CC73 81 41                                DB $81,  65
1247+ CC75 FF 41                                DB $FF,  65
1248+ CC77 04 42        SunSqr11:               DB $04,  66
1249+ CC79 89 43                                DB $89,  67
1250+ CC7B FF 43                                DB $FF,  67
1251+ CC7D 10 44        SunSqr12:               DB $10,  68
1252+ CC7F 99 45                                DB $99,  69
1253+ CC81 FF 45                                DB $FF,  69
1254+ CC83 24 46        SunSqr13:               DB $24,  70
1255+ CC85 B1 47                                DB $B1,  71
1256+ CC87 FF 47                                DB $FF,  71
1257+ CC89 40 48        SunSqr14:               DB $40,  72
1258+ CC8B FF 49                                DB $FF,  73
1259+ CC8D 64 4A        SunSqr15:               DB $64,  74
1260+ CC8F FF 4B                                DB $FF,  75
1261+ CC91 FF 4C        SunSqr16:               DB $FF,  76
1262+ CC93 C4 4D        SunSqr17:               DB $C4,  77
1263+ CC95 FF 4E                                DB $FF,  78
1264+ CC97 61 4F        SunSqr18:               DB $61,  79
1265+ CC99 FF 4F                                DB $FF,  79
1266+ CC9B 00 50        SunSqr19:               DB $00,  80
1267+ CC9D FF 51                                DB $FF,  81
1268+ CC9F 44 52        SunSqr1A:               DB $44,  82
1269+ CCA1 FF 53                                DB $FF,  83
1270+ CCA3 90 54        SunSqr1B:               DB $90,  84
1271+ CCA5 FF 54                                DB $FF,  84
1272+ CCA7 39 55        SunSqr1C:               DB $39,  85
1273+ CCA9 FF 56                                DB $FF,  86
1274+ CCAB FF 57        SunSqr1D:               DB $FF,  87
1275+ CCAD 40 58        SunSqr1E:               DB $40,  88
1276+ CCAF FF 59                                DB $FF,  89
1277+ CCB1 FF 5A        SunSqr1F:               DB $FF,  90
1278+ CCB3 59 5B        SunSqr20:               DB $59,  91
1279+ CCB5 FF 5B                                DB $FF,  91
1280+ CCB7 10 5C        SunSqr21:               DB $10,  92
1281+ CCB9 FF 5D                                DB $FF,  93
1282+ CCBB FF 5E        SunSqr22:               DB $FF,  94
1283+ CCBD FF 5F        SunSqr23:               DB $FF,  95
1284+ CCBF 00 60        SunSqr24:               DB $00,  96
1285+ CCC1 FF 61                                DB $FF,  97
1286+ CCC3 84 62        SunSqr25:               DB $84,  98
1287+ CCC5 49 63        SunSqr26:               DB $49,  99
1288+ CCC7 10 64        SunSqr27:               DB $10, 100
1289+ CCC9 FF 65                                DB $FF, 101
1290+ CCCB FF 66        SunSqr28:               DB $FF, 102
1291+ CCCD FF 67        SunSqr29:               DB $FF, 103
1292+ CCCF FF 68        SunSqr2A:               DB $FF, 104
1293+ CCD1 11 69        SunSqr2B:               DB $11, 105
1294+ CCD3 FF 6A                                DB $FF, 106
1295+ CCD5 FF 6B        SunSqr2C:               DB $FF, 107
1296+ CCD7 FF 6C        SunSqr2D:               DB $FF, 108
1297+ CCD9 69 6D        SunSqr2E:               DB $69, 109
1298+ CCDB FF 6E                                DB $FF, 110
1299+ CCDD 44 6E        SunSqr2F:               DB $44, 110
1300+ CCDF FF 6F                                DB $FF, 111
1301+ CCE1 21 6F        SunSqr30:               DB $21, 111
1302+ CCE3 FF 70                                DB $FF, 112
1303+ CCE5 00 70        SunSqr31:               DB $00, 112
1304+ CCE7 FF 71                                DB $FF, 113
1305+ CCE9 C4 72        SunSqr32:               DB $C4, 114
1306+ CCEB FF 72                                DB $FF, 114
1307+ CCED FF 73        SunSqr33:               DB $FF, 115
1308+ CCEF 90 74        SunSqr34:               DB $90, 116
1309+ CCF1 FF 75                                DB $FF, 117
1310+ CCF3 79 75        SunSqr35:               DB $79, 117
1311+ CCF5 FF 76                                DB $FF, 118
1312+ CCF7 64 76        SunSqr36:               DB $64, 118
1313+ CCF9 64 77                                DB $64, 119
1314+ CCFB 51 77        SunSqr37:               DB $51, 119
1315+ CCFD 40 78        SunSqr38:               DB $40, 120
1316+ CCFF FF 79                                DB $FF, 121
1317+ CD01 31 79        SunSqr39:               DB $31, 121
1318+ CD03 FF 7A                                DB $FF, 122
1319+ CD05 24 7A        SunSqr3A:               DB $24, 122
1320+ CD07 FF 7B                                DB $FF, 123
1321+ CD09 19 7B        SunSqr3B:               DB $19, 123
1322+ CD0B FF 7C                                DB $FF, 124
1323+ CD0D 10 7C        SunSqr3C:               DB $10, 124
1324+ CD0F FF 7D                                DB $FF, 125
1325+ CD11 09 7D        SunSqr3D:               DB $09, 125
1326+ CD13 FF 7D                                DB $FF, 125
1327+ CD15 04 7E        SunSqr3E:               DB $04, 126
1328+ CD17 FF 7E                                DB $FF, 126
1329+ CD19 01 7F        SunSqr3F:               DB $01, 127
1330+ CD1B FF 7F                                DB $FF, 127
1331+ CD1D 00 80        SunSqr40:               DB $00, 128
1332+ CD1F FF 80                                DB $FF, 128
1333+ CD21 01 81        SunSqr41:               DB $01, 129
1334+ CD23 FF 82                                DB $FF, 130
1335+ CD25 04 82        SunSqr42:               DB $04, 130
1336+ CD27 FF 83                                DB $FF, 131
1337+ CD29 09 83        SunSqr43:               DB $09, 131
1338+ CD2B FF 84                                DB $FF, 132
1339+ CD2D 10 84        SunSqr44:               DB $10, 132
1340+ CD2F FF 85                                DB $FF, 133
1341+ CD31 19 85        SunSqr45:               DB $19, 133
1342+ CD33 FF 86                                DB $FF, 134
1343+ CD35 24 86        SunSqr46:               DB $24, 134
1344+ CD37 FF 87                                DB $FF, 135
1345+ CD39 31 87        SunSqr47:               DB $31, 135
1346+ CD3B FF 88                                DB $FF, 136
1347+ CD3D 40 88        SunSqr48:               DB $40, 136
1348+ CD3F FF 89                                DB $FF, 137
1349+ CD41 51 89        SunSqr49:               DB $51, 137
1350+ CD43 FF 8A                                DB $FF, 138
1351+ CD45 64 8A        SunSqr4A:               DB $64, 138
1352+ CD47 FF 8A                                DB $FF, 138
1353+ CD49 79 8B        SunSqr4B:               DB $79, 139
1354+ CD4B FF 8B                                DB $FF, 139
1355+ CD4D 90 8C        SunSqr4C:               DB $90, 140
1356+ CD4F FF 8C                                DB $FF, 140
1357+ CD51 A9 8D        SunSqr4D:               DB $A9, 141
1358+ CD53 FF 8D                                DB $FF, 141
1359+ CD55 C4 8E        SunSqr4E:               DB $C4, 142
1360+ CD57 FF 8E                                DB $FF, 142
1361+ CD59 E1 8F        SunSqr4F:               DB $E1, 143
1362+ CD5B FF 8F                                DB $FF, 143
1363+ CD5D FF 8F        SunSqr50:               DB $FF, 143
1364+ CD5F 00 90        SunSqr51:               DB $00, 144
1365+ CD61 FF 90                                DB $FF, 144
1366+ CD63 21 91        SunSqr52:               DB $21, 145
1367+ CD65 FF 91                                DB $FF, 145
1368+ CD67 44 92        SunSqr53:               DB $44, 146
1369+ CD69 FF 92                                DB $FF, 146
1370+ CD6B 69 93        SunSqr54:               DB $69, 147
1371+ CD6D FF 93                                DB $FF, 147
1372+ CD6F 90 94        SunSqr55:               DB $90, 148
1373+ CD71 FF 94                                DB $FF, 148
1374+ CD73 B9 95        SunSqr56:               DB $B9, 149
1375+ CD75 FF 95                                DB $FF, 149
1376+ CD77 E4 96        SunSqr57:               DB $E4, 150
1377+ CD79 FF 96                                DB $FF, 150
1378+ CD7B FF 96        SunSqr58:               DB $FF, 150
1379+ CD7D 11 97        SunSqr59:               DB $11, 151
1380+ CD7F FF 97                                DB $FF, 151
1381+ CD81 40 98        SunSqr5A:               DB $40, 152
1382+ CD83 FF 98                                DB $FF, 152
1383+ CD85 71 99        SunSqr5B:               DB $71, 153
1384+ CD87 FF 99                                DB $FF, 153
1385+ CD89 A4 9A        SunSqr5C:               DB $A4, 154
1386+ CD8B FF 9A                                DB $FF, 154
1387+ CD8D D9 9B        SunSqr5D:               DB $D9, 155
1388+ CD8F FF 9B                                DB $FF, 155
1389+ CD91 FF 9B        SunSqr5E:               DB $FF, 155
1390+ CD93 10 9C        SunSqr5F:               DB $10, 156
1391+ CD95 FF 9C                                DB $FF, 156
1392+ CD97 49 9D        SunSqr60:               DB $49, 157
1393+ CD99 FF 9D                                DB $FF, 157
1394+ CD9B 84 9E        SunSqr61:               DB $84, 158
1395+ CD9D FF 9E                                DB $FF, 158
1396+ CD9F C1 9F        SunSqr62:               DB $C1, 159
1397+ CDA1 FF 9F                                DB $FF, 159
1398+ CDA3 FF 9F        SunSqr63:               DB $FF, 159
1399+ CDA5 00 A0        SunSqr64:               DB $00, 160
1400+ CDA7 FF A0                                DB $FF, 160
1401+ CDA9 41 A1        SunSqr65:               DB $41, 161
1402+ CDAB FF A1                                DB $FF, 161
1403+ CDAD 84 A2        SunSqr66:               DB $84, 162
1404+ CDAF FF A2                                DB $FF, 162
1405+ CDB1 C9 A3        SunSqr67:               DB $C9, 163
1406+ CDB3 FF A3                                DB $FF, 163
1407+ CDB5 FF A3        SunSqr68:               DB $FF, 163
1408+ CDB7 10 A4        SunSqr69:               DB $10, 164
1409+ CDB9 FF A4                                DB $FF, 164
1410+ CDBB 59 A5        SunSqr6A:               DB $59, 165
1411+ CDBD FF A5                                DB $FF, 165
1412+ CDBF A4 A6        SunSqr6B:               DB $A4, 166
1413+ CDC1 FF A6                                DB $FF, 166
1414+ CDC3 FF A7        SunSqr6C:               DB $FF, 167
1415+ CDC5 FF A7        SunSqr6D:               DB $FF, 167
1416+ CDC7 40 A8        SunSqr6E:               DB $40, 168
1417+ CDC9 FF A8                                DB $FF, 168
1418+ CDCB 91 A9        SunSqr6F:               DB $91, 169
1419+ CDCD FF A9                                DB $FF, 169
1420+ CDCF E4 AA        SunSqr70:               DB $E4, 170
1421+ CDD1 FF AA                                DB $FF, 170
1422+ CDD3 00 AA        SunSqr71:               DB $00, 170
1423+ CDD5 FF AA                                DB $FF, 170
1424+ CDD7 39 AB        SunSqr72:               DB $39, 171
1425+ CDD9 FF AB                                DB $FF, 171
1426+ CDDB 90 AC        SunSqr73:               DB $90, 172
1427+ CDDD FF AC                                DB $FF, 172
1428+ CDDF E9 AD        SunSqr74:               DB $E9, 173
1429+ CDE1 FF AD                                DB $FF, 173
1430+ CDE3 FF AD        SunSqr75:               DB $FF, 173
1431+ CDE5 44 AE        SunSqr76:               DB $44, 174
1432+ CDE7 FF AE                                DB $FF, 174
1433+ CDE9 A1 AF        SunSqr77:               DB $A1, 175
1434+ CDEB FF AF                                DB $FF, 175
1435+ CDED FF AF        SunSqr78:               DB $FF, 175
1436+ CDEF 00 B0        SunSqr79:               DB $00, 176
1437+ CDF1 FF B0                                DB $FF, 176
1438+ CDF3 61 B1        SunSqr7A:               DB $61, 177
1439+ CDF5 FF B1                                DB $FF, 177
1440+ CDF7 C4 B2        SunSqr7B:               DB $C4, 178
1441+ CDF9 FF B2                                DB $FF, 178
1442+ CDFB FF B2        SunSqr7C:               DB $FF, 178
1443+ CDFD 29 B3        SunSqr7D:               DB $29, 179
1444+ CDFF FF B3                                DB $FF, 179
1445+ CE01 90 B4        SunSqr7E:               DB $90, 180
1446+ CE03 FF B4                                DB $FF, 180
1447+ CE05 F9 B5        SunSqr7F:               DB $F9, 181
1448+ CE07 FF B5                                DB $FF, 181
1449+ CE09 FF B5        SunSqr80:               DB $FF, 181
1450+ CE0B 64 B6        SunSqr81:               DB $64, 182
1451+ CE0D FF B6                                DB $FF, 182
1452+ CE0F D1 B7        SunSqr82:               DB $D1, 183
1453+ CE11 FF B7        SunSqr83:               DB $FF, 183
1454+ CE13 FF B7                                DB $FF, 183
1455+ CE15 40 B8        SunSqr84:               DB $40, 184
1456+ CE17 FF B8                                DB $FF, 184
1457+ CE19 B1 B9        SunSqr85:               DB $B1, 185
1458+ CE1B FF B9                                DB $FF, 185
1459+ CE1D FF B9        SunSqr86:               DB $FF, 185
1460+ CE1F 24 BA        SunSqr87:               DB $24, 186
1461+ CE21 FF BA                                DB $FF, 186
1462+ CE23 99 BB        SunSqr88:               DB $99, 187
1463+ CE25 FF BB                                DB $FF, 187
1464+ CE27 FF BB        SunSqr89:               DB $FF, 187
1465+ CE29 10 BC        SunSqr8A:               DB $10, 188
1466+ CE2B FF BC                                DB $FF, 188
1467+ CE2D 89 BD        SunSqr8B:               DB $89, 189
1468+ CE2F FF BD                                DB $FF, 189
1469+ CE31 FF BD        SunSqr8C:               DB $FF, 189
1470+ CE33 04 BE        SunSqr8D:               DB $04, 190
1471+ CE35 FF BE                                DB $FF, 190
1472+ CE37 81 BF        SunSqr8E:               DB $81, 191
1473+ CE39 FF BF                                DB $FF, 191
1474+ CE3B FF BF        SunSqr8F:               DB $FF, 191
1475+ CE3D 00 C0        SunSqr90:               DB $00, 192
1476+ CE3F FF C0                                DB $FF, 192
1477+ CE41 81 C1        SunSqr91:               DB $81, 193
1478+ CE43 FF C1                                DB $FF, 193
1479+ CE45 FF C1        SunSqr92:               DB $FF, 193
1480+ CE47 04 C2        SunSqr93:               DB $04, 194
1481+ CE49 FF C2                                DB $FF, 194
1482+ CE4B 89 C3        SunSqr94:               DB $89, 195
1483+ CE4D FF C3                                DB $FF, 195
1484+ CE4F FF C3        SunSqr95:               DB $FF, 195
1485+ CE51 10 C4        SunSqr96:               DB $10, 196
1486+ CE53 FF C4                                DB $FF, 196
1487+ CE55 99 C5        SunSqr97:               DB $99, 197
1488+ CE57 FF C5                                DB $FF, 197
1489+ CE59 FF C5        SunSqr98:               DB $FF, 197
1490+ CE5B 24 C6        SunSqr99:               DB $24, 198
1491+ CE5D FF C6                                DB $FF, 198
1492+ CE5F B1 C7        SunSqr9A:               DB $B1, 199
1493+ CE61 FF C7                                DB $FF, 199
1494+ CE63 FF C7        SunSqr9B:               DB $FF, 199
1495+ CE65 40 C8        SunSqr9C:               DB $40, 200
1496+ CE67 FF C8                                DB $FF, 200
1497+ CE69 D1 C9        SunSqr9D:               DB $D1, 201
1498+ CE6B FF C9                                DB $FF, 201
1499+ CE6D FF C9        SunSqr9E:               DB $FF, 201
1500+ CE6F 64 CA        SunSqr9F:               DB $64, 202
1501+ CE71 FF CA                                DB $FF, 202
1502+ CE73 F9 CB        SunSqrA0:               DB $F9, 203
1503+ CE75 FF CB                                DB $FF, 203
1504+ CE77 FF CB        SunSqrA1:               DB $FF, 203
1505+ CE79 90 CC        SunSqrA2:               DB $90, 204
1506+ CE7B FF CC                                DB $FF, 204
1507+ CE7D FF CC        SunSqrA3:               DB $FF, 204
1508+ CE7F 29 CD        SunSqrA4:               DB $29, 205
1509+ CE81 FF CD                                DB $FF, 205
1510+ CE83 C4 CE        SunSqrA5:               DB $C4, 206
1511+ CE85 FF CE                                DB $FF, 206
1512+ CE87 FF CE        SunSqrA6:               DB $FF, 206
1513+ CE89 61 CF        SunSqrA7:               DB $61, 207
1514+ CE8B FF CF                                DB $FF, 207
1515+ CE8D FF CF        SunSqrA8:               DB $FF, 207
1516+ CE8F 00 D0        SunSqrA9:               DB $00, 208
1517+ CE91 FF D0                                DB $FF, 208
1518+ CE93 A1 D1        SunSqrAA:               DB $A1, 209
1519+ CE95 FF D1                                DB $FF, 209
1520+ CE97 FF D1        SunSqrAB:               DB $FF, 209
1521+ CE99 44 D2        SunSqrAC:               DB $44, 210
1522+ CE9B FF D2                                DB $FF, 210
1523+ CE9D E9 D3        SunSqrAD:               DB $E9, 211
1524+ CE9F FF D3                                DB $FF, 211
1525+ CEA1 FF D3        SunSqrAE:               DB $FF, 211
1526+ CEA3 90 D4        SunSqrAF:               DB $90, 212
1527+ CEA5 FF D4        SunSqrB0:               DB $FF, 212
1528+ CEA7 39 D5        SunSqrB1:               DB $39, 213
1529+ CEA9 FF D5                                DB $FF, 213
1530+ CEAB E4 D6        SunSqrB2:               DB $E4, 214
1531+ CEAD FF D6                                DB $FF, 214
1532+ CEAF FF D6        SunSqrB3:               DB $FF, 214
1533+ CEB1 91 D7        SunSqrB4:               DB $91, 215
1534+ CEB3 FF D7                                DB $FF, 215
1535+ CEB5 FF D7        SunSqrB5:               DB $FF, 215
1536+ CEB7 40 D8        SunSqrB6:               DB $40, 216
1537+ CEB9 FF D8                                DB $FF, 216
1538+ CEBB F1 D9        SunSqrB7:               DB $F1, 217
1539+ CEBD FF D9                                DB $FF, 217
1540+ CEBF FF D9        SunSqrB8:               DB $FF, 217
1541+ CEC1 FF D9                                DB $FF, 217
1542+ CEC3 A4 DA        SunSqrB9:               DB $A4, 218
1543+ CEC5 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1544+ CEC7 59 DB        SunSqrBB:               DB $59, 219
1545+ CEC9 FF DB                                DB $FF, 219
1546+ CECB FF DB        SunSqrBC:               DB $FF, 219
1547+ CECD 10 DC        SunSqrBD:               DB $10, 220
1548+ CECF FF DC                                DB $FF, 220
1549+ CED1 C9 DD        SunSqrBE:               DB $C9, 221
1550+ CED3 FF DD                                DB $FF, 221
1551+ CED5 FF DD        SunSqrBF:               DB $FF, 221
1552+ CED7 84 DE        SunSqrC0:               DB $84, 222
1553+ CED9 FF DE                                DB $FF, 222
1554+ CEDB FF DE        SunSqrC1:               DB $FF, 222
1555+ CEDD 41 DF        SunSqrC2:               DB $41, 223
1556+ CEDF FF DF                                DB $FF, 223
1557+ CEE1 FF DF        SunSqrC3:               DB $FF, 223
1558+ CEE3 00 E0        SunSqrC4:               DB $00, 224
1559+ CEE5 FF E0                                DB $FF, 224
1560+ CEE7 C1 E1        SunSqrC5:               DB $C1, 225
1561+ CEE9 FF E1                                DB $FF, 225
1562+ CEEB FF E1        SunSqrC6:               DB $FF, 225
1563+ CEED 84 E2        SunSqrC7:               DB $84, 226
1564+ CEEF FF E2        SunSqrC8:               DB $FF, 226
1565+ CEF1 49 E3        SunSqrC9:               DB $49, 227
1566+ CEF3 FF E3                                DB $FF, 227
1567+ CEF5 FF E4        SunSqrCA:               DB $FF, 228
1568+ CEF7 10 E4        SunSqrCB:               DB $10, 228
1569+ CEF9 FF E4                                DB $FF, 228
1570+ CEFB D9 E5        SunSqrCC:               DB $D9, 229
1571+ CEFD FF E5                                DB $FF, 229
1572+ CEFF FF E5        SunSqrCD:               DB $FF, 229
1573+ CF01 A4 E6        SunSqrCE:               DB $A4, 230
1574+ CF03 FF E6                                DB $FF, 230
1575+ CF05 FF E6        SunSqrCF:               DB $FF, 230
1576+ CF07 71 E7        SunSqrD0:               DB $71, 231
1577+ CF09 FF E7                                DB $FF, 231
1578+ CF0B FF E7        SunSqrD1:               DB $FF, 231
1579+ CF0D 40 E8        SunSqrD2:               DB $40, 232
1580+ CF0F FF E8                                DB $FF, 232
1581+ CF11 FF E8        SunSqrD3:               DB $FF, 232
1582+ CF13 11 E9        SunSqrD4:               DB $11, 233
1583+ CF15 FF E9                                DB $FF, 233
1584+ CF17 E4 EA        SunSqrD5:               DB $E4, 234
1585+ CF19 FF EA                                DB $FF, 234
1586+ CF1B FF EA        SunSqrD6:               DB $FF, 234
1587+ CF1D B9 EB        SunSqrD7:               DB $B9, 235
1588+ CF1F FF EB                                DB $FF, 235
1589+ CF21 FF EB        SunSqrD8:               DB $FF, 235
1590+ CF23 90 EC        SunSqrD9:               DB $90, 236
1591+ CF25 FF EC                                DB $FF, 236
1592+ CF27 FF EC        SunSqrDA:               DB $FF, 236
1593+ CF29 69 ED        SunSqrDB:               DB $69, 237
1594+ CF2B FF ED                                DB $FF, 237
1595+ CF2D FF ED        SunSqrDC:               DB $FF, 237
1596+ CF2F 44 EE        SunSqrDD:               DB $44, 238
1597+ CF31 FF EE        SunSqrDE:               DB $FF, 238
1598+ CF33 21 EF        SunSqrDF:               DB $21, 239
1599+ CF35 FF EF                                DB $FF, 239
1600+ CF37 00 F0        SunSqrE0:               DB $00, 240
1601+ CF39 FF F0                                DB $FF, 240
1602+ CF3B 00 F0        SunSqrE1:               DB $00, 240
1603+ CF3D FF F0                                DB $FF, 240
1604+ CF3F E1 F1        SunSqrE2:               DB $E1, 241
1605+ CF41 FF F1                                DB $FF, 241
1606+ CF43 E1 F1        SunSqrE3:               DB $E1, 241
1607+ CF45 FF F1                                DB $FF, 241
1608+ CF47 C4 F2        SunSqrE4:               DB $C4, 242
1609+ CF49 FF F2                                DB $FF, 242
1610+ CF4B FF F2        SunSqrE5:               DB $FF, 242
1611+ CF4D A9 F3        SunSqrE6:               DB $A9, 243
1612+ CF4F FF F3                                DB $FF, 243
1613+ CF51 FF F3        SunSqrE7:               DB $FF, 243
1614+ CF53 FF F3                                DB $FF, 243
1615+ CF55 90 F3        SunSqrE8:               DB $90, 243
1616+ CF57 FF F4                                DB $FF, 244
1617+ CF59 FF F4        SunSqrE9:               DB $FF, 244
1618+ CF5B 79 F5        SunSqrEA:               DB $79, 245
1619+ CF5D FF F5                                DB $FF, 245
1620+ CF5F FF F5        SunSqrEB:               DB $FF, 245
1621+ CF61 64 F6        SunSqrEC:               DB $64, 246
1622+ CF63 FF F6        SunSqrED:               DB $FF, 246
1623+ CF65 51 F7        SunSqrEE:               DB $51, 247
1624+ CF67 FF F7                                DB $FF, 247
1625+ CF69 FF F7        SunSqrEF:               DB $FF, 247
1626+ CF6B 40 F8        SunSqrF0:               DB $40, 248
1627+ CF6D FF F8        SunSqrF1:               DB $FF, 248
1628+ CF6F 31 F9        SunSqrF2:               DB $31, 249
1629+ CF71 FF F9                                DB $FF, 249
1630+ CF73 FF F9        SunSqrF3:               DB $FF, 249
1631+ CF75 24 FA        SunSqrF4:               DB $24, 250
1632+ CF77 FF FA                                DB $FF, 250
1633+ CF79 FF FA        SunSqrF5:               DB $FF, 250
1634+ CF7B 19 FB        SunSqrF6:               DB $19, 251
1635+ CF7D FF FB                                DB $FF, 251
1636+ CF7F FF FB        SunSqrF7:               DB $FF, 251
1637+ CF81 10 FC        SunSqrF8:               DB $10, 252
1638+ CF83 FF FC                                DB $FF, 252
1639+ CF85 FF FC        SunSqrF9:               DB $FF, 252
1640+ CF87 09 FD        SunSqrFA:               DB $09, 253
1641+ CF89 FF FD                                DB $FF, 253
1642+ CF8B FF FD        SunSqrFB:               DB $FF, 253
1643+ CF8D 04 FE        SunSqrFC:               DB $04, 254
1644+ CF8F FF FE                                DB $FF, 254
1645+ CF91 FF FE        SunSqrFD:               DB $FF, 254
1646+ CF93 01 FF        SunSqrFE:               DB $01, 255
1647+ CF95 FF FF        SunSqrFF:               DB $FF, 255
1648+ CF97
1649+ CF97
1650+ CF97
1651+ CF97              SunBankSize  EQU $ - StartOfSun
1652+ CF97
1653+ CF97
# file closed: ./Universe/Sun/sun_data.asm
1558  CF97
1559  CF97              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1560  CF97                  SLOT    PlanetBankAddr
1561  CF97                  PAGE    BankPlanetData
1562  CF97              	ORG	    PlanetBankAddr,BankPlanetData
1563  C000                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD 86 99                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA
  72+ C0BA              ; --------------------------------------------------------------
  73+ C0BA              ; This sets current universe object to a planet,they use sign + 23 bit positions
  74+ C0BA CD A4 C0     CreatePlanet:           call    ResetPBnKData
  75+ C0BD 3A 49 9E                             ld      a,(DisplayTekLevel)
  76+ C0C0 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  77+ C0C2 F6 80                                or      %10000000
  78+ C0C4 32 33 C0                             ld      (PBnKShipType),a
  79+ C0C7                                      MaxUnivPitchAndRoll
  79+ C0C7 3E 7F       >                        ld      a,127
  79+ C0C9 32 33 C0    >                        ld      (UBnKRotXCounter),a
  79+ C0CC 32 34 C0    >                        ld      (UBnKRotZCounter),a
  80+ C0CF 3A B4 9E                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  81+ C0D2 E6 03                                and     %00000011               ; .
  82+ C0D4 CE 03                                adc     3                       ; .
  83+ C0D6 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  84+ C0D9 CB 1F                                rr      a
  85+ C0DB 32 12 C0                             ld      (PBnKxsgn),a
  86+ C0DE 32 15 C0                             ld      (PBnKysgn),a
  87+ C0E1 C9                                   ret
  88+ C0E2
  89+ C0E2 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
  90+ C0E5 21 00 00                             ld      hl,0
  91+ C0E8                                      ZeroA
  91+ C0E8 AF          >                        xor a
  92+ C0E9 22 10 C0                             ld      (PBnKxlo),hl
  93+ C0EC 22 13 C0                             ld      (PBnKylo),hl
  94+ C0EF 21 FF FF                             ld      hl,$FFFF
  95+ C0F2 22 16 C0                             ld      (PBnKzlo),hl
  96+ C0F5 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F8 32 15 C0                             ld      (PBnKysgn),a
  98+ C0FB 32 18 C0                             ld      (PBnKzsgn),a
  99+ C0FE                                      MaxUnivPitchAndRoll
  99+ C0FE 3E 7F       >                        ld      a,127
  99+ C100 32 33 C0    >                        ld      (UBnKRotXCounter),a
  99+ C103 32 34 C0    >                        ld      (UBnKRotZCounter),a
 100+ C106 C9                                   ret
 101+ C107              ; NEED FINSIHGING
 102+ C107
 103+ C107
 104+ C107 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 105+ C10B 2A 79 C0                             ld			hl,(PBnKXScaled)
 106+ C10E ED 5B 7B C0                          ld			de,(PBnKYScaled)
 107+ C112 78           .SetABSbc:              ld			a,b
 108+ C113 DD 67                                ld			ixh,a
 109+ C115 E6 7F                                and			SignMask8Bit
 110+ C117 47                                   ld			b,a									; bc = ABS bc
 111+ C118 7C           .SetABShl:              ld			a,h
 112+ C119 DD 6F                                ld			ixl,a
 113+ C11B E6 7F                                and			SignMask8Bit
 114+ C11D 67                                   ld			h,a									; hl = ABS hl
 115+ C11E 7A           .SetABSde:              ld			a,d
 116+ C11F FD 67                                ld			iyh,a
 117+ C121 E6 7F                                and			SignMask8Bit
 118+ C123 57                                   ld			d,a									; de = ABS de
 119+ C124 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 120+ C125 B4                                   or			h                                   ; XX15+1	\ x hi
 121+ C126 B2                                   or			d                                   ; XX15+4	\ y hi
 122+ C127 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 123+ C129                                      ShiftHLRight1
 123+ C129 CB 3C       >			   srl h
 123+ C12B CB 1D       >			   rr  l
 124+ C12D                                      ShiftDERight1
 124+ C12D CB 3A       >			   srl d
 124+ C12F CB 1B       >			   rr  e
 125+ C131                                      ShiftBCRight1
 125+ C131 CB 38       >			   srl b
 125+ C133 CB 19       >			   rr  c
 126+ C135 C3 24 C1                             jp          .ScaleNodeTo8BitLoop
 127+ C138              ; now we have scaled values we have to deal with sign
 128+ C138 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 129+ C13A E6 80                                and			SignOnly8Bit
 130+ C13C B0                                   or			b
 131+ C13D 47                                   ld			b,a
 132+ C13E DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 133+ C140 E6 80                                and			SignOnly8Bit
 134+ C142 B4                                   or			h
 135+ C143 67                                   ld			h,a
 136+ C144 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 137+ C146 E6 80                                and			SignOnly8Bit
 138+ C148 B2                                   or			d
 139+ C149 57                                   ld			d,a
 140+ C14A ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 141+ C14E 22 79 C0                             ld			(PBnKXScaled),hl
 142+ C151 ED 53 7B C0                          ld			(PBnKYScaled),de
 143+ C155 78                                   ld			a,b
 144+ C156 32 BC 9D                             ld			(varU),a
 145+ C159 79                                   ld			a,c
 146+ C15A 32 D9 9D                             ld			(varT),a
 147+ C15D C9                                   ret
 148+ C15E
 149+ C15E              ;--------------------------------------------------------------------------------------------------------
 150+ C15E                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C15E              CopyPSXX12ScaledToPXX18:
   2++C15E              CopyResultToPDrawCam:
   3++C15E                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C15E 3A 7F C0    >                        ld       a,(PXX12)
   3++C161 32 6D C0    >                        ld       (PXX18),a
   4++C164                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C164 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C167 32 6F C0    >                        ld       (PXX18+2),a
   5++C16A                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C16A 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C16D 32 70 C0    >                        ld       (PXX18+3),a
   6++C170                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C170 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C173 32 72 C0    >                        ld       (PXX18+5),a
   7++C176                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C176 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C179 32 73 C0    >                        ld       (PXX18+6),a
   8++C17C                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C17C 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C17F 32 75 C0    >                        ld       (PXX18+8),a
   9++C182 C9                   ret
  10++C183
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 151+ C183
 152+ C183              ; ......................................................                                                         ;;;
 153+ C183                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C183
   2++C183              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C183              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C183              ; Need to write a test routine for roll and pitchs
   5++C183 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C187 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C18B 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C18F 00 00 00     PlanetK2                   DS 3
   9++C192
  10++C192 3A D3 9C     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C195 21 C5 9C                             ld      hl,BETA
  12++C198 B6                                   or      (hl)
  13++C199 E6 7F                                and     SignMask8Bit
  14++C19B CA 4C C2                             jp      z,.NoRotation
  15++C19E 3A D3 9C     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1A1 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1A3 57                                   ld      d,a                         ; .
  18++C1A4 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1A7 5F                                   ld      e,a                         ; .
  20++C1A8 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1AB CD BC AE                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1AE              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1AE                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1AE 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1AF 32 84 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1B2 7B                                   ld      a,e
  27++C1B3 32 85 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1B6 7A                                   ld      a,d
  29++C1B7 32 86 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1BA ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1BE 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1C1 6F                                   ld      l,a                         ; .
  33++C1C2 ED 4B 85 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1C6 3A 84 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1C9 67                                   ld      h,a                         ; .
  36++C1CA CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1CD 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1CE 32 8F C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1D1 ED 53 90 C1                          ld      (PlanetK2+1),de                ;
  40++C1D5 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1D6 5F                                   ld      e,a                         ; .
  42++C1D7 3A C5 9C                             ld      a,(BETA)                    ; D = BETA
  43++C1DA 57                                   ld      d,a                         ; .
  44++C1DB CD BC AE                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1DE ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1E2 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1E5 67                                   ld      h,a                         ;
  48++C1E6 CD 4C AC                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1E9 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1ED 7D                                   ld      a,l                         ; .
  51++C1EE 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C1F1 3A C5 9C     .CalcBetaZ:             ld      a,(BETA)
  53++C1F4 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C1F6 57                                   ld      d,a                         ; .
  55++C1F7 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C1FA 5F                                   ld      e,a                         ; .
  57++C1FB 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C1FE CD BC AE                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C201              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C201                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C201                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C201                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C201                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C201                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C201                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C201                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C201 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C203 65                                   ld      h,l
  69++C204 ED 5B 90 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C208 3A 8F C1                             ld      a,(PlanetK2)
  71++C20B 6F                                   ld      l,a
  72++C20C CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C20F ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C213 7D                                   ld      a,l                         ; .
  75++C214 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C217 3A D3 9C     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C21A 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C21B 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C21E 5F                                   ld      e,a                         ; .
  80++C21F 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C222 CD BC AE                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C225 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C226 32 87 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C229 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C22A 32 88 C1                             ld      (PlanetAlphaMulY+1),a
  86++C22D 7B                                   ld      a,e
  87++C22E 32 89 C1                             ld      (PlanetAlphaMulY+2),a
  88++C231 7A                                   ld      a,d
  89++C232 32 8A C1                             ld      (PlanetAlphaMulY+3),a
  90++C235 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C237 65                                   ld      h,l                         ; .
  92++C238 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C23C 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C23F 6F                                   ld      l,a                         ; .
  95++C240 CD 4C AC                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C243 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C244 63                                   ld      h,e                         ;
  98++C245 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C248 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C24B C9                                   ret
 101++C24C 3A B9 9D     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C24F                                      ReturnIfAIsZero
 102++C24F A7          >                        and     a
 102++C250 C8          >                        ret     z
 103++C251 0E 00                                ld      c,0                         ;
 104++C253 67                                   ld      h,a                         ;
 105++C254 06 80                                ld      b,$80                       ;
 106++C256 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C25A 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C25D 6F                                   ld      l,a                         ; .
 109++C25E CD 4C AC                             call    AddBCHtoDELsigned           ; update speed
 110++C261 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C265 7D                                   ld      a,l
 112++C266 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C269 C9                                   ret
 114++C26A
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 154+ C26A
 155+ C26A 00           PlanetOnScreen          DB 0
 156+ C26B 00 00        PlanetScrnX             DW  0       ; signed
 157+ C26D 00 00        PlanetScrnY             DW  0       ; signed
 158+ C26F 00           PlanetRadius            DB  0       ; unsigned
 159+ C270              ; draw circle
 160+ C270
 161+ C270              ;
 162+ C270              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 163+ C270
 164+ C270 00 00 00 00  PlanetVarK                 DS 4
 165+ C274 00 00 00     PlanetVarP                 DS 3
 166+ C277 00           PlanetVarQ                 DS 1
 167+ C278 00           PlanetVarR                 DS 1
 168+ C279 00           PlanetVarS                 DS 1
 169+ C27A 00           PlanetVarT                 DS 1
 170+ C27B
 171+ C27B              ; Optimisation
 172+ C27B              ; if a <> 0
 173+ C27B              ;       divide AH by CD
 174+ C27B              ; if h <> 0
 175+ C27B              ;      if c <> 0 return 0
 176+ C27B              ;      else
 177+ C27B              ;        divide HL by DE
 178+ C27B              ; if l <>0
 179+ C27B              ;      if c or d <> 0 return 0
 180+ C27B              ;      else
 181+ C27B              ;        divide l by e
 182+ C27B              ;
 183+ C27B 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 184+ C27C 79                                   ld      a,c                         ; check for divide by zero
 185+ C27D B2                                   or      d                           ; .
 186+ C27E B3                                   or      e                           ; .
 187+ C27F                                      JumpIfZero      .divideByZero       ; .
 187+ C27F CA 98 C2    >                        jp	z,.divideByZero
 188+ C282 78                                   ld      a,b                         ; get a back
 189+ C283                                      JumpIfAIsNotZero    .divideAHLbyCDE
 189+ C283 A7          >                        and     a
 189+ C284 C2 9F C2    >                        jp	    nz,.divideAHLbyCDE
 190+ C287 7C           .AIsZero:               ld      a,h
 191+ C288                                      JumpIfAIsNotZero    .divideHLbyDE
 191+ C288 A7          >                        and     a
 191+ C289 C2 A6 C2    >                        jp	    nz,.divideHLbyDE
 192+ C28C 7D           .HIsZero:               ld      a,l
 193+ C28D                                      JumpIfAIsNotZero    .divideLbyE
 193+ C28D A7          >                        and     a
 193+ C28E C2 B5 C2    >                        jp	    nz,.divideLbyE
 194+ C291              .resultIsZero:          ZeroA
 194+ C291 AF          >                        xor a
 195+ C292 67                                   ld      h,a                        ; result is zero so set hlde
 196+ C293 6F                                   ld      l,a                        ; result is zero so set hlde
 197+ C294 54 5D                                ld      de,hl
 198+ C296                                      ClearCarryFlag
 198+ C296 B7          >                        or a
 199+ C297 C9                                   ret
 200+ C298 3E FF        .divideByZero:          ld      a,$FF
 201+ C29A 67                                   ld      h,a
 202+ C29B 6F                                   ld      l,a
 203+ C29C 54 5D                                ld      de,hl
 204+ C29E                                      SetCarryFlag
 204+ C29E 37          >                        scf
 205+ C29F              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 206+ C29F              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 207+ C29F CD 54 AD     .divideAHLbyCDE:        call    Div24by24
 208+ C2A2 EB                                   ex      hl,de                         ; ahl is result
 209+ C2A3 79                                   ld      a,c                           ; ahl is result
 210+ C2A4                                      ClearCarryFlag
 210+ C2A4 B7          >                        or a
 211+ C2A5              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 212+ C2A5              ;                        ld      e,d                         ; and DE to CD
 213+ C2A5              ;                        ld      d,c                         ; but make sure we do it in the right
 214+ C2A5              ;                        ld      c,h                         ; order so we don't trash values
 215+ C2A5              ;                        call    BC_Div_DE                   ; bc = result
 216+ C2A5              ;                        ld      a,b
 217+ C2A5              ;                        ld      h,c
 218+ C2A5              ;                        ld      l,0
 219+ C2A5 C9                                   ret
 220+ C2A6              ; AHL = 0hl/0de as A is zero
 221+ C2A6 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 222+ C2A7                                      JumpIfAIsNotZero   .resultIsZero
 222+ C2A7 A7          >                        and     a
 222+ C2A8 C2 91 C2    >                        jp	    nz,.resultIsZero
 223+ C2AB 44 4D                                ld      bc,hl
 224+ C2AD CD 11 B1                             call    BC_Div_DE                   ; BC = HL/DE
 225+ C2B0 60 69                                ld      hl,bc
 226+ C2B2                                      ZeroA                               ; so we can set A to Zero
 226+ C2B2 AF          >                        xor a
 227+ C2B3                                      ClearCarryFlag
 227+ C2B3 B7          >                        or a
 228+ C2B4 C9                                   ret
 229+ C2B5              ; AHL = 00l/00e as A and H are zero
 230+ C2B5 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 231+ C2B6 B2                                   or      d
 232+ C2B7                                      JumpIfAIsNotZero   .resultIsZero
 232+ C2B7 A7          >                        and     a
 232+ C2B8 C2 91 C2    >                        jp	    nz,.resultIsZero
 233+ C2BB 4B                                   ld      c,e
 234+ C2BC 5D                                   ld      e,l
 235+ C2BD CD D3 B0                             call    E_Div_C
 236+ C2C0 6F                                   ld      l,a
 237+ C2C1                                      ZeroA
 237+ C2C1 AF          >                        xor a
 238+ C2C2 67                                   ld      h,a
 239+ C2C3                                      ClearCarryFlag
 239+ C2C3 B7          >                        or a
 240+ C2C4 C9                                   ret
 241+ C2C5
 242+ C2C5
 243+ C2C5 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 244+ C2C6 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 245+ C2CA 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 246+ C2CD FD 67                                ld      iyh,a                       ; save sign
 247+ C2CF                                      ClearSignBitA
 247+ C2CF E6 7F       >                        and     SignMask8Bit
 248+ C2D1                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 249+ C2D1              ;                        ld      c,a                         ;
 250+ C2D1 5A                                   ld      e,d
 251+ C2D2 57                                   ld      d,a
 252+ C2D3 0E 00                                ld      c,0
 253+ C2D5                                      ; added above to correct positioning as in reality its X/(Z/256)
 254+ C2D5 78                                   ld      a,b                         ; restore sign byte
 255+ C2D6 FD 6F                                ld      iyl,a                       ; save sign
 256+ C2D8                                      ClearSignBitA
 256+ C2D8 E6 7F       >                        and     SignMask8Bit
 257+ C2DA CD 7B C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 258+ C2DD              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 258+ C2DD A7          >                        and     a
 258+ C2DE C2 FB C2    >                        jp	    nz,.IsOffScreen
 259+ C2E1                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 259+ C2E1 7C          >                        ld      a,h
 259+ C2E2 E6 80       >                        and     SignOnly8Bit
 259+ C2E4 C2 FB C2    >                        jp      nz,.IsOffScreen
 260+ C2E7 7C                                   ld      a,h
 261+ C2E8                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 261+ C2E8 FE 04       >                        cp    4
 261+ C2EA D0          >                        ret	 nc
 262+ C2EB FD 7C                                ld      a,iyh                       ; now deal with the sign
 263+ C2ED FD AD                                xor     iyl
 264+ C2EF                                      SignBitOnlyA                        ; a= resultant sign
 264+ C2EF E6 80       >                        and     SignOnly8Bit
 265+ C2F1 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 266+ C2F3              .XIsNegative:           NegHL                               ; make 2's c as negative
 266+ C2F3 AF          >                    xor a
 266+ C2F4 95          >                    sub l
 266+ C2F5 6F          >                    ld l,a
 266+ C2F6 9F          >                    sbc a,a
 266+ C2F7 94          >                    sub h
 266+ C2F8 67          >                    ld h,a
 267+ C2F9              .calculatedVert:        ClearCarryFlag
 267+ C2F9 B7          >                        or a
 268+ C2FA C9                                   ret
 269+ C2FB 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 270+ C2FE FD 7C                                ld      a,iyh
 271+ C300 FD AD                                xor     iyl
 272+ C302                                      SignBitOnlyA
 272+ C302 E6 80       >                        and     SignOnly8Bit
 273+ C304 28 02                                jr      z,.calculatedOffScreen
 274+ C306 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 275+ C307 23                                   inc     hl                          ; .
 276+ C308              .calculatedOffScreen:   SetCarryFlag
 276+ C308 37          >                        scf
 277+ C309 C9                                   ret
 278+ C30A
 279+ C30A
 280+ C30A              ; .........................................................................................................................
 281+ C30A              ; we only hit this if z is positive so we can ignore signs
 282+ C30A ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 283+ C30E 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 284+ C311 57                                   ld      d,a                         ;
 285+ C312 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 286+ C315 CD 8F AF                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 287+ C318 B4                                   or      h                           ; if A or H are not 0 then max Radius
 288+ C319                                      JumpIfAIsZero  .SaveRadius
 288+ C319 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 288+ C31A CA 1F C3    >                        jp	    z, .SaveRadius
 289+ C31D 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 290+ C31F 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 291+ C320 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 292+ C322 32 6F C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 293+ C325 5F                                   ld      e,a                         ; as later code expects it to be in e
 294+ C326 C9                                   ret
 295+ C327
 296+ C327              ; Shorter version when sun does not need to be processed to screen
 297+ C327 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 298+ C32A 2A 10 C0                             ld      hl,(PBnKxlo)
 299+ C32D CD C5 C2                             call    PlanetProcessVertex
 300+ C330 22 19 C0                             ld      (PlanetCompassX),hl
 301+ C333 3A 15 C0                             ld      a,(PBnKysgn)
 302+ C336 2A 13 C0                             ld      hl,(PBnKylo)
 303+ C339 CD C5 C2                             call    PlanetProcessVertex
 304+ C33C 22 1B C0                             ld      (PlanetCompassY),hl
 305+ C33F C9                                   ret
 306+ C340
 307+ C340                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 308+ C340 CD 92 C1     PlanetUpdateAndRender:     call    PlanetApplyMyRollAndPitch
 309+ C343 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 310+ C346                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 310+ C346 FE 30       >                        cp     48
 310+ C348 D2 27 C3    >                        jp		nc,PlanetUpdateCompass
 311+ C34B 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 312+ C34E B6                                   or      (hl)
 313+ C34F                                      JumpIfAIsZero       PlanetUpdateCompass
 313+ C34F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 313+ C350 CA 27 C3    >                        jp	    z, PlanetUpdateCompass
 314+ C353 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 315+ C356 2A 10 C0                             ld      hl,(PBnKxlo)
 316+ C359 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 317+ C35C 22 19 C0                             ld      (PlanetCompassX),hl
 318+ C35F D8                                   ret     c
 319+ C360 1E 80        .calculatedX:           ld      e,ScreenCenterX
 320+ C362 16 00                                ld      d,0
 321+ C364                                      ClearCarryFlag
 321+ C364 B7          >                        or a
 322+ C365 ED 5A                                adc     hl,de
 323+ C367                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 324+ C367 22 6B C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 325+ C36A 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 326+ C36D 2A 13 C0                             ld      hl,(PBnKylo)
 327+ C370 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 328+ C373 22 1B C0                             ld      (PlanetCompassY),hl
 329+ C376 D8                                   ret     c
 330+ C377 1E 60        .calculatedY:           ld      e,ScreenCenterY
 331+ C379 16 00                                ld      d,0
 332+ C37B EB                                   ex      de,hl
 333+ C37C                                      ClearCarryFlag
 333+ C37C B7          >                        or a
 334+ C37D ED 52                                sbc     hl,de
 335+ C37F                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 336+ C37F 22 6D C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 337+ C382              ; .........................................................................................................................
 338+ C382 CD 0A C3                             call    PlanetCalculateRadius
 339+ C385              ; .........................................................................................................................
 340+ C385 2A 6B C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 341+ C388 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 342+ C38B 16 00                                ld      d,0                         ; e still holds radius
 343+ C38D 7C                                   ld      a,h
 344+ C38E                                      JumpOnLeadSignSet   h,.CheckXNegative
 344+ C38E 7C          >                        ld      a,h
 344+ C38F E6 80       >                        and     SignOnly8Bit
 344+ C391 C2 A7 C3    >                        jp      nz,.CheckXNegative
 345+ C394 7C           .CheckXPositive:        ld      a,h
 346+ C395                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 346+ C395 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 346+ C396 CA B0 C3    >                        jp	    z, .XOnScreen
 347+ C399 16 00                                ld      d,0                         ; de = radius
 348+ C39B                                      ClearCarryFlag
 348+ C39B B7          >                        or a
 349+ C39C ED 52                                sbc     hl,de
 350+ C39E FA B0 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 351+ C3A1 7C                                   ld      a,h
 352+ C3A2                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 352+ C3A2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 352+ C3A3 CA B0 C3    >                        jp	    z, .XOnScreen
 353+ C3A6 C9                                   ret                                 ; None of the X coordinates are on screen
 354+ C3A7 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 355+ C3A9                                      ClearCarryFlag
 355+ C3A9 B7          >                        or a
 356+ C3AA ED 5A                                adc     hl,de                       ; so we have hl - de
 357+ C3AC F2 B0 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 358+ C3AF C9                                   ret                                 ; else x is totally off the left side of the screen
 359+ C3B0              ; .........................................................................................................................
 360+ C3B0 2A 6D C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 361+ C3B3                                      JumpOnLeadSignSet   h,.CheckYNegative
 361+ C3B3 7C          >                        ld      a,h
 361+ C3B4 E6 80       >                        and     SignOnly8Bit
 361+ C3B6 C2 D7 C3    >                        jp      nz,.CheckYNegative
 362+ C3B9 7C           .CheckYPositive:        ld      a,h
 363+ C3BA                                      JumpIfAIsNotZero   .PosYCheck2
 363+ C3BA A7          >                        and     a
 363+ C3BB C2 C4 C3    >                        jp	    nz,.PosYCheck2
 364+ C3BE 7D                                   ld      a,l
 365+ C3BF E6 80                                and     %10000000
 366+ C3C1 CA E0 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 367+ C3C4 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 368+ C3C6                                      ClearCarryFlag
 368+ C3C6 B7          >                        or a
 369+ C3C7 ED 52                                sbc     hl,de
 370+ C3C9 FA E0 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 371+ C3CC 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 372+ C3CD                                      ReturnIfANotZero                    ; .
 372+ C3CD A7          >                        and     a
 372+ C3CE C0          >                        ret     nz
 373+ C3CF 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 374+ C3D0 E6 80                                and     %10000000                   ; .
 375+ C3D2                                      ReturnIfANotZero                    ; .
 375+ C3D2 A7          >                        and     a
 375+ C3D3 C0          >                        ret     nz
 376+ C3D4 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 377+ C3D7 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 378+ C3D9                                      ClearCarryFlag
 378+ C3D9 B7          >                        or a
 379+ C3DA ED 5A                                adc     hl,de                       ; so we have hl - de
 380+ C3DC F2 E0 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 381+ C3DF C9                                   ret                                 ; else never gets above 0 so return
 382+ C3E0              ; .........................................................................................................................
 383+ C3E0 CD E4 C3     .YOnScreen:             call    PlanetDraw
 384+ C3E3 C9                                   ret
 385+ C3E4
 386+ C3E4              PlanetDraw:             MMUSelectLayer2
 386+ C3E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 387+ C3E8 2A 6B C2                             ld      hl,(PlanetScrnX)
 388+ C3EB ED 5B 6D C2                          ld      de,(PlanetScrnY)
 389+ C3EF 3A 6F C2                             ld      a,(PlanetRadius)
 390+ C3F2 4F                                   ld      c,a
 391+ C3F3 3E 0C                                ld      a,L2ColourGREEN_4
 392+ C3F5 CD 37 E8                             call    l2_draw_clipped_circle
 393+ C3F8 C9                                   ret
 394+ C3F9
 395+ C3F9
 396+ C3F9              PlanetBankSize  EQU $ - StartOfPlanet
 397+ C3F9
 398+ C3F9
# file closed: ./Universe/Planet/planet_data.asm
1564  C3F9
1565  C3F9                  SLOT    GalaxyDataAddr
1566  C3F9                  PAGE    BankGalaxyData1
1567  C3F9              	ORG GalaxyDataAddr, BankGalaxyData1
1568  E000 FF           GALAXYDATABlock1         DB $FF
1569  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1570  0000
1571  0000                  SLOT    GalaxyDataAddr
1572  0000                  PAGE    BankGalaxyData2
1573  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1574  E000 FF           GALAXYDATABlock2         DB $FF
1575  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1576  0000                  SLOT    GalaxyDataAddr
1577  0000                  PAGE    BankGalaxyData3
1578  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1579  E000 FF           GALAXYDATABlock3         DB $FF
1580  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1581  0000                  SLOT    GalaxyDataAddr
1582  0000                  PAGE    BankGalaxyData4
1583  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1584  E000 FF           GALAXYDATABlock4         DB $FF
1585  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1586  0000                  SLOT    GalaxyDataAddr
1587  0000                  PAGE    BankGalaxyData5
1588  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1589  E000 FF           GALAXYDATABlock5         DB $FF
1590  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1591  0000                  SLOT    GalaxyDataAddr
1592  0000                  PAGE    BankGalaxyData6
1593  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1594  E000 FF           GALAXYDATABlock6         DB $FF
1595  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1596  0000                  SLOT    GalaxyDataAddr
1597  0000                  PAGE    BankGalaxyData7
1598  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1599  E000 FF           GALAXYDATABlock7         DB $FF
1600  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1601  0000
1602  0000
1603  0000
1604  0000
1605  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1606  0000                  SAVENEX CFG  0,0,0,1
1607  0000                  SAVENEX AUTO
1608  0000                  SAVENEX CLOSE
1609  0000
# file closed: eliteNext.asm
