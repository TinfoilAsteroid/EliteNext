# file opened: eliteNext.asm
   1  0000              Fcoc DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal     EQU 0
  15  0000              ScreenGalactic  EQU ScreenLocal + 1
  16  0000              ScreenMarket    EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp EQU ScreenMarket + 1
  18  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent    EQU ScreenStatus + 1
  20  0000              ScreenPlanet    EQU ScreenInvent + 1
  21  0000              ScreenEquip     EQU ScreenPlanet + 1
  22  0000              ScreenLaunch    EQU ScreenEquip + 1
  23  0000              ScreenFront     EQU ScreenLaunch + 1
  24  0000              ScreenAft       EQU ScreenFront+1
  25  0000              ScreenLeft      EQU ScreenAft+1
  26  0000              ScreenRight     EQU ScreenLeft+1
  27  0000              ScreenDocking   EQU ScreenRight+1
  28  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  29  0000              ; Colour Defines
  30  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  31  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  32  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  33  0000              ; Total screen list
  34  0000              ; Local Chart
  35  0000              ; Galactic Chart
  36  0000              ; Market Prices
  37  0000              ; Inventory
  38  0000              ; Comander status
  39  0000              ; System Data
  40  0000              ; Mission Briefing
  41  0000              ; missio completion
  42  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  43  0000              ; Pause Menu (only place you can load from )
  44  0000              ; byint and selling equipment
  45  0000              ; bying and selling stock
  46  0000
  47  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  48  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  49  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipModelsAddr	        equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankShipModels1         equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000              BankShipModels2         equ 67
  81+ 0000              BankShipModels3         equ 68
  82+ 0000              BankShipModels4         equ 69
  83+ 0000
  84+ 0000              BankUNIVDATA0           equ 70
  85+ 0000              BankUNIVDATA1           equ 71
  86+ 0000              BankUNIVDATA2           equ 72
  87+ 0000              BankUNIVDATA3           equ 73
  88+ 0000              BankUNIVDATA4           equ 74
  89+ 0000              BankUNIVDATA5           equ 75
  90+ 0000              BankUNIVDATA6           equ 76
  91+ 0000              BankUNIVDATA7           equ 77
  92+ 0000              BankUNIVDATA8           equ 78
  93+ 0000              BankUNIVDATA9           equ 79
  94+ 0000              BankUNIVDATA10          equ 80
  95+ 0000              BankUNIVDATA11          equ 81
  96+ 0000              BankUNIVDATA12          equ 82
  97+ 0000
  98+ 0000              BankGalaxyData0         equ 91
  99+ 0000              BankGalaxyData1         equ 92
 100+ 0000              BankGalaxyData2         equ 93
 101+ 0000              BankGalaxyData3         equ 94
 102+ 0000              BankGalaxyData4         equ 95
 103+ 0000              BankGalaxyData5         equ 96
 104+ 0000              BankGalaxyData6         equ 97
 105+ 0000              BankGalaxyData7         equ 98
 106+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  50  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  51  0000                  INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipDataLength          equ ShipNewBitsOffset+1
  23+ 0000
  24+ 0000              CobraTablePointer       equ 43
  25+ 0000              ;29 faulty
  26+ 0000              BankThreshold           equ 16
  27+ 0000
  28+ 0000              ShipTableALast          equ 23
  29+ 0000              ShipTableBLast          equ 39
  30+ 0000              ShipTableCLast          equ 55
  31+ 0000
# file closed: ./Data/ShipModelEquates.asm
  52  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCmdrData:	 MACRO
  43+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectUniverseA:  MACRO
  59+ 0000 ~                                 add    a,BankUNIVDATA0
  60+ 0000 ~                                 nextreg UniverseMMU,       a
  61+ 0000                                   ENDM
  62+ 0000
  63+ 0000              MMUSelectUniverseN:  MACRO value
  64+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectGalaxyA:    MACRO
  68+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectGalaxyN:    MACRO value
  72+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  73+ 0000                                   ENDM
  74+ 0000              MMUSelectGalaxyACopy:MACRO
  75+ 0000 ~                                 nextreg UniverseMMU,       a
  76+ 0000                                   ENDM
  77+ 0000
  78+ 0000              MMUSelectUniverseAbs:MACRO value
  79+ 0000 ~                                 nextreg UniverseMMU,       value
  80+ 0000                                   ENDM
  81+ 0000
  82+ 0000              MMUSelectMenuGalCht: MACRO
  83+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  84+ 0000              					 ENDM
  85+ 0000
  86+ 0000              MMUSelectMenuShrCht: MACRO
  87+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  88+ 0000              					 ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuInvent: MACRO
  91+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuSystem: MACRO
  95+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuMarket: MACRO
  99+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuStatus: MACRO
 103+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectViewFront:  MACRO
 107+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectScreenA:    MACRO
 111+ 0000 ~                                 nextreg ScreenBankMMU,		a
 112+ 0000              					 ENDM
 113+ 0000
# file closed: ./Macros/MMUMacros.asm
  53  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  54  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
  55  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  15+ 0000 ~                                    ld      a,(mem)
  16+ 0000 ~                                    bit 	bitnbr,a
  17+ 0000 ~                                    jp      nz,target
  18+ 0000                                      ENDM
  19+ 0000
  20+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  21+ 0000 ~                                    ld      a,(mem)
  22+ 0000 ~                                    bit 	bitnbr,a
  23+ 0000 ~                                    jp      z,target
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      nz,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    jp      z,target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  38+ 0000 ~                                    bit 	bitnbr,reg
  39+ 0000 ~                                    ret     nz
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  43+ 0000 ~                                    ld   a,(mem)
  44+ 0000 ~                                    bit 	bitnbr,a
  45+ 0000 ~                                    ret     nz
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  49+ 0000 ~                                    bit 	bitnbr,reg
  50+ 0000 ~                                    ret		z
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  54+ 0000 ~                                    ld     a,(mem)
  55+ 0000 ~                                    bit 	bitnbr,a
  56+ 0000 ~                                    ret		z
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfAGTEusng:         MACRO
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfAGTENusng:        MACRO reg,target
  64+ 0000 ~                                    cp     reg
  65+ 0000 ~                                    jp		nc,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000
  69+ 0000              CallIfAGTENusng:        MACRO   reg,target
  70+ 0000 ~                                    cp      reg
  71+ 0000 ~                                    call	nc,target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  75+ 0000 ~                                    ld     a,(mem)
  76+ 0000 ~                                    cp     value
  77+ 0000 ~                                    jp	  nc,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  81+ 0000 ~                                    ld   a,(mem)
  82+ 0000 ~                                    ld   hl,address
  83+ 0000 ~                                    cp   (hl)
  84+ 0000 ~                                    jp	  nc,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
  88+ 0000 ~                                    ld   a,(mem)
  89+ 0000 ~                                    ld   hl,address
  90+ 0000 ~                                    cp   (hl)
  91+ 0000 ~                                    jp	  z,target
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  95+ 0000 ~                                    ld   a,(mem)
  96+ 0000 ~                                    ld   hl,address
  97+ 0000 ~                                    cp   (hl)
  98+ 0000 ~                                    call    z,target
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              JumpIfALTusng:          MACRO target
 102+ 0000 ~                                    jp		c,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfALTNusng:         MACRO value, target
 106+ 0000 ~                                    cp      value
 107+ 0000 ~                                    jp		c, target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 111+ 0000 ~                                    ld      a,(mem)
 112+ 0000 ~                                    cp      value
 113+ 0000 ~                                    jp	  c,target
 114+ 0000                                      ENDM
 115+ 0000
 116+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 117+ 0000 ~                                    ld    a,(mem)
 118+ 0000 ~                                    ld    hl,value
 119+ 0000 ~                                    cp    (hl)
 120+ 0000 ~                                    jp	  c,target
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 124+ 0000 ~                                    ld  a,(mem)
 125+ 0000 ~                                    cp  value
 126+ 0000 ~                                    jr  z,target
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 130+ 0000 ~                                    ld  a,(mem)
 131+ 0000 ~                                    cp  value
 132+ 0000 ~                                    jr  nz,target
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              JumpIfMemZero:          MACRO mem,target
 136+ 0000 ~                                    ld  a,(mem)
 137+ 0000 ~                                    and a
 138+ 0000 ~                                    jr  z,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfALTMemHLusng:     MACRO target
 142+ 0000 ~                                    cp    (hl)
 143+ 0000 ~                                    jp	  c,target
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              JumpIfANENusng: MACRO value, target
 147+ 0000 ~                            cp     value
 148+ 0000 ~                            jp      nz,target
 149+ 0000                              ENDM
 150+ 0000
 151+ 0000              JumpIfANEMemusng: MACRO  value, target
 152+ 0000 ~                              ld    hl,value
 153+ 0000 ~                              cp    (hl)
 154+ 0000 ~                              jp      nz,target
 155+ 0000                                ENDM
 156+ 0000
 157+ 0000              JumpIfAEqNusng: MACRO value, target
 158+ 0000 ~                            cp     value
 159+ 0000 ~                            jp      z,target
 160+ 0000                              ENDM
 161+ 0000
 162+ 0000              IfAIsZeroGoto:	MACRO target
 163+ 0000 ~            				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 164+ 0000 ~            				jp	z, target
 165+ 0000              				ENDM
 166+ 0000
 167+ 0000              IfANotZeroGoto:	MACRO target
 168+ 0000 ~            				cp	0
 169+ 0000 ~            				jp	nz,target
 170+ 0000              				ENDM
 171+ 0000
 172+ 0000              IfResultZeroGoto:	MACRO target
 173+ 0000 ~            					jp	z,target
 174+ 0000              					ENDM
 175+ 0000
 176+ 0000              IfResultNotZeroGoto:MACRO target
 177+ 0000 ~            					jp	nz,target
 178+ 0000              					ENDM
 179+ 0000
 180+ 0000              ReturnIfAIsZero: MACRO
 181+ 0000 ~                             and a
 182+ 0000 ~                             ret    z
 183+ 0000                               ENDM
 184+ 0000
 185+ 0000              ReturnIfMemisZero: MACRO mem
 186+ 0000 ~                               ld   a,(mem)
 187+ 0000 ~                               and a
 188+ 0000 ~                               ret    z
 189+ 0000                                 ENDM
 190+ 0000
 191+ 0000              ReturnIfMemEquN:    MACRO mem, value
 192+ 0000 ~                                ld   a,(mem)
 193+ 0000 ~                                cp     value
 194+ 0000 ~                                ret    z
 195+ 0000                                  ENDM
 196+ 0000
 197+ 0000              ReturnIfANotZero: MACRO
 198+ 0000 ~                              cp     0
 199+ 0000 ~                              ret    nz
 200+ 0000                                ENDM
 201+ 0000
 202+ 0000              ReturnIfMemNotZero: MACRO mem
 203+ 0000 ~                                ld     a,(mem)
 204+ 0000 ~                                cp     0
 205+ 0000 ~                                ret    nz
 206+ 0000                                  ENDM
 207+ 0000
 208+ 0000              ReturnIfAGTEusng: MACRO value
 209+ 0000 ~            				  cp    value
 210+ 0000 ~                              ret	 nc
 211+ 0000                                ENDM
 212+ 0000
 213+ 0000              ReturnIfALTNusng:  MACRO value
 214+ 0000 ~                               cp    value
 215+ 0000 ~                               ret	 c
 216+ 0000                                 ENDM
 217+ 0000
 218+ 0000              ReturnIfAGTENusng: MACRO value
 219+ 0000 ~                               cp    value
 220+ 0000 ~                               ret	 nc
 221+ 0000                                 ENDM
 222+ 0000
 223+ 0000              ReturnIfANENusng: MACRO value
 224+ 0000 ~                              cp      value
 225+ 0000 ~                              ret     nz
 226+ 0000                                ENDM
 227+ 0000
 228+ 0000              ReturnIfAEqNusng: MACRO value
 229+ 0000 ~                              cp      value
 230+ 0000 ~                              ret     z
 231+ 0000                                ENDM
 232+ 0000
 233+ 0000              SetCarryFlag:           MACRO
 234+ 0000 ~                                    scf
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              ClearCarryFlag:	        MACRO
 238+ 0000 ~                                    or a
 239+ 0000                                      ENDM
 240+ 0000
 241+ 0000              FlipCarryFalg:          MACRO
 242+ 0000 ~                                    ccf
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              pushbcde:		        MACRO
 246+ 0000 ~                                    push	bc
 247+ 0000 ~                                    push	de
 248+ 0000                                      ENDM
 249+ 0000
 250+ 0000              popdebc:		        MACRO
 251+ 0000 ~                                    pop		de
 252+ 0000 ~                                    pop		bc
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              pushhlde:		MACRO
 256+ 0000 ~                            push	hl
 257+ 0000 ~                            push	de
 258+ 0000                              ENDM
 259+ 0000
 260+ 0000              popdehl:		MACRO
 261+ 0000 ~                            pop		de
 262+ 0000 ~                            pop		hl
 263+ 0000                              ENDM
 264+ 0000
 265+ 0000              pushbcdeaf:		MACRO
 266+ 0000 ~                            push	bc
 267+ 0000 ~                            push	de
 268+ 0000 ~                            push	af
 269+ 0000                              ENDM
 270+ 0000
 271+ 0000              popafdebc:		MACRO
 272+ 0000 ~                            pop		af
 273+ 0000 ~                            pop		de
 274+ 0000 ~                            pop		bc
 275+ 0000                              ENDM
 276+ 0000
 277+ 0000              NegIY:			MACRO
 278+ 0000 ~                            xor a
 279+ 0000 ~                            sub iyl
 280+ 0000 ~                            ld iyl,a
 281+ 0000 ~                            sbc a,a
 282+ 0000 ~                            sub iyh
 283+ 0000 ~                            ld iyh,a
 284+ 0000                              ENDM
 285+ 0000
 286+ 0000              NegHL:			MACRO
 287+ 0000 ~                            xor a
 288+ 0000 ~                            sub l
 289+ 0000 ~                            ld l,a
 290+ 0000 ~                            sbc a,a
 291+ 0000 ~                            sub h
 292+ 0000 ~                            ld h,a
 293+ 0000                              ENDM
 294+ 0000
 295+ 0000              NegDE:			MACRO
 296+ 0000 ~                            xor a
 297+ 0000 ~                            sub e
 298+ 0000 ~                            ld e,a
 299+ 0000 ~                            sbc a,a
 300+ 0000 ~                            sub d
 301+ 0000 ~                            ld d,a
 302+ 0000                              ENDM
 303+ 0000
 304+ 0000              NegBC:			MACRO
 305+ 0000 ~                            xor a
 306+ 0000 ~                            sub c
 307+ 0000 ~                            ld c,a
 308+ 0000 ~                            sbc a,a
 309+ 0000 ~                            sub  b
 310+ 0000 ~                            ld b,a
 311+ 0000                              ENDM
 312+ 0000
 313+ 0000              NegH            MACRO
 314+ 0000 ~                            ld      a,h
 315+ 0000 ~                            neg
 316+ 0000 ~                            ld      h,a
 317+ 0000                              ENDM
 318+ 0000
 319+ 0000              NegD            MACRO
 320+ 0000 ~                            ld      a,d
 321+ 0000 ~                            neg
 322+ 0000 ~                            ld      d,a
 323+ 0000                              ENDM
 324+ 0000
 325+ 0000              NegB            MACRO
 326+ 0000 ~                            ld      a,b
 327+ 0000 ~                            neg
 328+ 0000 ~                            ld      b,a
 329+ 0000                              ENDM
 330+ 0000
 331+ 0000              FourLDIInstrunctions:   MACRO
 332+ 0000 ~                                    ldi
 333+ 0000 ~                                    ldi
 334+ 0000 ~                                    ldi
 335+ 0000 ~                                    ldi
 336+ 0000                                      ENDM
 337+ 0000
 338+ 0000              FiveLDIInstrunctions:   MACRO
 339+ 0000 ~                                    ldi
 340+ 0000 ~                                    ldi
 341+ 0000 ~                                    ldi
 342+ 0000 ~                                    ldi
 343+ 0000 ~                                    ldi
 344+ 0000                                      ENDM
 345+ 0000
 346+ 0000              SixLDIInstrunctions:    MACRO
 347+ 0000 ~                                    ldi
 348+ 0000 ~                                    ldi
 349+ 0000 ~                                    ldi
 350+ 0000 ~                                    ldi
 351+ 0000 ~                                    ldi
 352+ 0000 ~                                    ldi
 353+ 0000                                      ENDM
 354+ 0000
 355+ 0000              EightLDIInstrunctions:  MACRO
 356+ 0000 ~            		                ldi
 357+ 0000 ~            		                ldi
 358+ 0000 ~            		                ldi
 359+ 0000 ~            		                ldi
 360+ 0000 ~            		                ldi
 361+ 0000 ~            		                ldi
 362+ 0000 ~            		                ldi
 363+ 0000 ~            		                ldi
 364+ 0000                                      ENDM
 365+ 0000
 366+ 0000              NineLDIInstrunctions:  MACRO
 367+ 0000 ~            		                ldi
 368+ 0000 ~            		                ldi
 369+ 0000 ~            		                ldi
 370+ 0000 ~            		                ldi
 371+ 0000 ~            		                ldi
 372+ 0000 ~            		                ldi
 373+ 0000 ~            		                ldi
 374+ 0000 ~            		                ldi
 375+ 0000 ~            		                ldi
 376+ 0000                                      ENDM
 377+ 0000
 378+ 0000              FlipMemSign:        MACRO mem
 379+ 0000 ~                                ld  a,(mem)
 380+ 0000 ~                                xor SignOnly8Bit
 381+ 0000 ~                                ld  (mem),a
 382+ 0000                                  ENDM
 383+ 0000
# file closed: ./Macros/GeneralMacros.asm
  56  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000
  59  0000
  60  0000              charactersetaddr		equ 15360
  61  0000              STEPDEBUG               equ 1
  62  0000
  63  0000
  64  0000                                      ORG         $8000
  65  8000 F3                                   di
  66  8001                                      ; "STARTUP"
  67  8001                                      MMUSelectLayer1
  67  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  68  8005 CD 47 E0                             call		l1_cls
  69  8008 3E 07                                ld			a,7
  70  800A CD 53 E0                             call		l1_attr_cls_to_a
  71  800D 3E FF                                ld          a,$FF
  72  800F CD 5D E0                             call        l1_set_border
  73  8012                                      MMUSelectSpriteBank
  73  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  74  8016 CD 54 E1                             call		sprite_load_sprite_data
  75  8019              Initialise:             MMUSelectLayer2
  75  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76  801D CD D0 E0                             call 		l2_initialise
  77  8020 3E FF                                ld          a,$FF
  78  8022 32 13 84                             ld          (ScreenTransitionForced),a
  79  8025 3E 10        TidyDEBUG:              ld          a,16
  80  8027 32 EE 82                             ld          (TidyCounter),a
  81  802A
  82  802A AF           TestText:               xor			a
  83  802B 32 20 94                             ld      (JSTX),a
  84  802E                                      MMUSelectCmdrData
  84  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  85  8032 CD 1F E0                             call		defaultCommander
  86  8035
  87  8035                                      MMUSelectSpriteBank
  87  8035 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  88  8039 CD 4C E1                             call		init_sprites
  89  803C
  90  803C                                      MMUSelectStockTable
  90  803C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  91  8040 CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
  92  8043
  93  8043                                      IFDEF DOUBLEBUFFER
  94  8043                                          MMUSelectLayer2
  94  8043 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  95  8047 CD C9 E0                                 call        l2_cls
  96  804A CD DD E0                                 call  l2_flip_buffers
  97  804D                                      ENDIF
  98  804D
  99  804D                                      ;MMUSelectResetUniv
 100  804D CD 14 84                             call		ResetUniv
 100  8050
 101  8050 CD 3C 84                             call        ResetGalaxy
 102  8053                                      MMUSelectGalaxyN 0
 102  8053 ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 103  8057 CD 90 FC                             call        SeedGalaxy
 104  805A
 105  805A                                      MMUSelectLayer2
 105  805A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 106  805E                                      MMUSelectUniverseN 0
 106  805E ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 107  8062 CD C9 E0                             call        l2_cls
 108  8065                                      IFDEF DOUBLEBUFFER
 109  8065                                          MMUSelectLayer2
 109  8065 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110  8069 CD DD E0                                 call  l2_flip_buffers
 111  806C                                      ENDIF
 112  806C
 113  806C
 114  806C              ;InitialiseDemoShip:     call    ClearFreeSlotList
 115  806C              ;                        call    FindNextFreeSlotInA
 116  806C              ;                        ld      b,a
 117  806C              ;                        ld      a,13 ;Coriolis station
 118  806C              ;                        call    InitialiseShipAUnivB
 119  806C              ;                        xor     a
 120  806C 32 F3 94     InitialiseMainLoop:     ld      (CurrentUniverseAI),a
 121  806F 3E 03                                ld      a,3
 122  8071 32 70 94                             ld      (MenuIdMax),a
 123  8074 3E FF                                ld      a,$FF                               ; Starts Docked
 124  8076 32 75 94                             ld      (DockedFlag),a
 125  8079              ;                        call    InitialiseFrontView
 126  8079 CD 90 84                             call    InitialiseCommander
 127  807C                                      MMUSelectUniverseN 0
 127  807C ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 128  8080 CD 48 85                             call    SetInitialShipPosition
 129  8083              ;..................................................................................................................................
 130  8083 CD 60 98     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 131  8086 CD CB 91                             call    scan_keyboard
 132  8089              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 133  8089 CD 03 82     DemoOfShipsDEBUG:       call    TestForNextShip
 134  808C              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 135  808C 3E 00        InputBlockerCheck:      ld      a,$0
 136  808E                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 136  808E FE 01       >                cp     $01
 136  8090 CA B2 80    >                jp      z,SkipInputHandlers
 137  8093 CD F4 84                             call    ViewKeyTest
 138  8096 CD 3F 82                             call    TestPauseMode
 139  8099 3A 76 94                             ld      a,(GamePaused)
 140  809C FE 00                                cp      0
 141  809E 20 E3                                jr      nz,MainLoop
 142  80A0 CD 5C 93                             call    MovementKeyTest
 143  80A3              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 144  80A3 3A B1 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 145  80A6                                      IfAIsZeroGoto     TestAreWeDocked
 145  80A6 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145  80A7 CA B2 80    >				jp	z, TestAreWeDocked
 146  80AA              ;.. Handle displaying correct screen ..............................................................................................
 147  80AA 3E 00        HandleBankSelect:       ld      a,$00
 148  80AC                                      MMUSelectScreenA
 148  80AC ED 92 56    >                     nextreg ScreenBankMMU,		a
 149  80AF CD 00 00     CallCursorRoutine:      call    $0000
 150  80B2              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 151  80B2              ;.. Also end up here if we have the screen input blocker set
 152  80B2              SkipInputHandlers:
 153  80B2              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 154  80B2 3A 75 94     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 155  80B5                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 155  80B5 FE 00       >                cp     0
 155  80B7 C2 F6 80    >                jp      nz,SkipUniveseUpdate
 156  80BA              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 157  80BA              ;.. we do one universe slot each loop update ......................................................................................
 158  80BA CD 46 81                             call    UpdateUniverseObjects
 159  80BD                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 159  80BD 3A 13 84    >                        ld  a,(ScreenTransitionForced)
 159  80C0 FE FF       >                        cp  $FF
 159  80C2 20 71       >                        jr  nz,BruteForceChange
 160  80C4 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 161  80C6 FE 00                                cp      0                                             ; .
 162  80C8 28 24                                jr      z, MenusLoop                                  ; This will change as more screens are added TODO
 163  80CA              ;..Processing a view...............................................................................................................
 164  80CA                                      MMUSelectLayer2
 164  80CA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 165  80CE CD C9 E0                             call   l2_cls
 166  80D1                                      MMUSelectLayer1
 166  80D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 167  80D5              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 168  80D5 3E DF        DrawStarsForwards:      ld     a,$DF
 169  80D7 32 EB E8                             ld     (line_gfx_colour),a
 170  80DA              StarUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 170  80DA ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 171  80DE CD 64 8D     StarUpdateRoutine:      call   StarsForward                                   ; This needs to be self modifying
 172  80E1              PrepLayer2:             MMUSelectLayer2                                       ; Clear layer 2 for graphics
 172  80E1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173  80E5                                    ;  call   l2_cls
 174  80E5 CD D5 81     ProcessShipModels:      call    DrawForwardShips                              ; Draw all ships (this may need to be self modifying)
 175  80E8 CD 97 85                             call   UpdateConsole                                  ; Update display console on layer 1
 176  80EB C3 04 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 177  80EE              ;..If we were not in views then we were in display screens/menus...................................................................
 178  80EE 2A 02 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 179  80F1 7C                                   ld      a,h
 180  80F2 B5                                   or      l
 181  80F3 CA 04 81                             jp      z,LoopRepeatPoint
 182  80F6              ;..This is the screen update routine for menus.....................................................................................
 183  80F6              ;.. Also used by transition routines
 184  80F6              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 184  80F6 3A 02 81    >                        ld  a,(ScreenLoopJP+1)
 184  80F9 A7          >                        and a
 184  80FA 28 08       >                        jr  z,LoopRepeatPoint
 185  80FC 3E 00        ScreenLoopBank:         ld      a,$0
 186  80FE                                      MMUSelectScreenA
 186  80FE ED 92 56    >                     nextreg ScreenBankMMU,		a
 187  8101 CD 00 00     ScreenLoopJP:           call    $0000
 188  8104 3A 75 94     LoopRepeatPoint:        ld      a,(DockedFlag)
 189  8107              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 189  8107 FE FD       >                cp     $FD
 189  8109 CA 14 81    >                jp      z,WeHaveCompletedLaunch
 190  810C                                      JumpIfAEqNusng  $FE, WeAreInTransition
 190  810C FE FE       >                cp     $FE
 190  810E CA 1A 81    >                jp      z,WeAreInTransition
 191  8111 C3 1A 81                             jp  DoubleBufferCheck
 192  8114 CD 65 84     WeHaveCompletedLaunch:  call    LaunchedFromStation
 193  8117 C3 1A 81                             jp  DoubleBufferCheck
 194  811A              WeAreInTransition:
 195  811A 3E 00        DoubleBufferCheck:      ld      a,00
 196  811C                                      IFDEF DOUBLEBUFFER
 197  811C FE 00                                    cp      0
 198  811E CA 2D 81                                 jp      z,TestTransition
 199  8121                                          MMUSelectLayer2
 199  8121 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 200  8125 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 201  8128 FE 00                                    cp     0
 202  812A C4 DD E0                                 call   nz,l2_flip_buffers
 203  812D                                      ENDIF
 204  812D 3A 13 84     TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 205  8130 FE FF                                cp      $FF
 206  8132 CA 83 80                             jp      z,MainLoop
 207  8135 57           BruteForceChange:      ld      d,a
 208  8136 1E 10                                ld      e,ScreenMapRow
 209  8138 ED 30                                mul
 210  813A DD 21 33 83                          ld      ix,ScreenKeyMap
 211  813E DD 19                                add     ix,de                               ; Force screen transition
 212  8140 CD A4 84                             call    SetScreenAIX
 213  8143 C3 83 80                             jp MainLoop
 214  8146
 215  8146              ;..................................................................................................................................
 216  8146              ;..Update Universe Objects.........................................................................................................
 217  8146 AF           UpdateUniverseObjects:  xor     a
 218  8147 32 F4 94                             ld      (SelectedUniverseSlot),a
 219  814A 57           .UpdateUniverseLoop:     ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 220  814B              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 221  814B CD FF 97                             call    GetTypeAtSlotA
 222  814E FE FF                                cp      $FF
 223  8150 28 2C                                jr      z,.ProcessedUniverseSlot
 224  8152 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 225  8153                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 225  8153 C6 46       >                     add    a,BankUNIVDATA0
 225  8155 ED 92 56    >                     nextreg UniverseMMU,       a
 226  8158 CD B6 DA                             call    ApplyMyRollAndPitch
 227  815B              ;.. If its a space station then see if we are ready to dock........................................................................
 228  815B 3A 15 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 229  815E                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 229  815E FE 02       >                cp     ShipTypeStation
 229  8160 C2 74 81    >                jp      nz,.NotDockingCheck
 230  8163              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 230  8163 3A 16 C3    >                        ld      a,(ShipNewBitsAddr)
 230  8166 CB 67       >                        bit 	4,a
 230  8168 C2 74 81    >                        jp      nz,.NotDockingCheck
 231  816B CD 9A 81                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 232  816E                                      ReturnIfMemEquN ScreenTransitionForced, $FF             ; if we docked then a transition would have been forced
 232  816E 3A 13 84    >                    ld   a,(ScreenTransitionForced)
 232  8171 FE FF       >                    cp     $FF
 232  8173 C8          >                    ret    z
 233  8174              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 233  8174 3A F4 94    >                        ld   a,(SelectedUniverseSlot)
 233  8177 21 F3 94    >                        ld   hl,CurrentUniverseAI
 233  817A BE          >                        cp   (hl)
 233  817B CC 6A 82    >                        call    z,UpdateShip
 234  817E 3A F4 94     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 235  8181 3C                                   inc     a                                               ; .
 236  8182                                      JumpIfAGTENusng   UniverseListSize, .UpdateAICounter    ; .
 236  8182 FE 0C       >                        cp     UniverseListSize
 236  8184 D2 8D 81    >                        jp		nc,.UpdateAICounter
 237  8187 32 F4 94                             ld      (SelectedUniverseSlot),a
 238  818A C3 4A 81                             jp      .UpdateUniverseLoop
 239  818D 3A F3 94     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 240  8190 3C                                   inc     a
 241  8191 FE 0C                                cp      12
 242  8193 38 01                                jr      c,.IterateAI
 243  8195 AF                                   xor     a
 244  8196 32 F3 94     .IterateAI:             ld      (CurrentUniverseAI),a
 245  8199 C9                                   ret
 246  819A              ;..................................................................................................................................
 247  819A              ;.. Quickly eliminate space stations too far away..................................................................................
 248  819A ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 249  819E 2A 0F C0                             ld      hl,(UBnKylo)
 250  81A1 ED 5B 12 C0                          ld      de,(UBnKzlo)
 251  81A5 78                                   ld      a,b
 252  81A6 B4                                   or      h
 253  81A7 B2                                   or      d
 254  81A8 C0                                   ret     nz
 255  81A9 79           .CheckIfInRangeLo:      ld      a,c
 256  81AA B5                                   or      l
 257  81AB B3                                   or      e
 258  81AC E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 259  81AE C0                                   ret     nz
 260  81AF              ;.. Now check to see if we are comming in at a viable angle........................................................................
 261  81AF 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 262  81B2                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 262  81B2 FE D6       >                   cp    214
 262  81B4 D8          >                   ret	 c
 263  81B5 CD 88 82                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 264  81B8 CB 7F                                bit     7,a                                 ; if its negative
 265  81BA C0                                   ret     nz                                  ; we are flying away from it
 266  81BB                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 266  81BB FE 59       >                   cp    89
 266  81BD D8          >                   ret	 c
 267  81BE 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 268  81C1 E6 7F                                and     SignMask8Bit
 269  81C3                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 269  81C3 FE 50       >                   cp    80
 269  81C5 D8          >                   ret	 c
 270  81C6              ;.. Its passed all validation and we are docking...................................................................................
 271  81C6              .AreDocking:            MMUSelectLayer1
 271  81C6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 272  81CA 3E 06                                ld        a,$6
 273  81CC CD 5D E0                             call      l1_set_border
 274  81CF 3E 0D        .EnterDockingBay:       ld      a,ScreenDocking
 275  81D1 32 13 84                             ld      (ScreenTransitionForced),a
 276  81D4 C9                                   ret
 277  81D5              ;..................................................................................................................................
 278  81D5 AF           DrawForwardShips:       xor     a
 279  81D6 F5           DrawShipLoop:           push    af
 280  81D7 CD FF 97                             call    GetTypeAtSlotA
 281  81DA FE FF                                cp      $FF
 282  81DC 28 1D                                jr      z,ProcessedDrawShip
 283  81DE              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 284  81DE F1           SelectShipToDraw:       pop     af
 285  81DF F5                                   push    af
 286  81E0                                      MMUSelectUniverseA
 286  81E0 C6 46       >                     add    a,BankUNIVDATA0
 286  81E2 ED 92 56    >                     nextreg UniverseMMU,       a
 287  81E5 CD 96 DB                             call   ProcessNodes
 288  81E8              DrawShip:               ;call   SetAllFacesVisible
 289  81E8 CD 4E D4                             call   CullV2				; culling but over aggressive backface assumes all 0 up front TOFIX
 290  81EB CD 68 DC                             call   PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 291  81EE F1                                   pop     af
 292  81EF F5                                   push    af
 293  81F0                                      MMUSelectUniverseA
 293  81F0 C6 46       >                     add    a,BankUNIVDATA0
 293  81F2 ED 92 56    >                     nextreg UniverseMMU,       a
 294  81F5 CD 51 90                             call   DrawLines                   ; Need to plot all lines
 295  81F8 CD 21 86     UpdateRadar:            call    UpdateScannerShip
 296  81FB F1           ProcessedDrawShip:      pop     af
 297  81FC 3C                                   inc     a
 298  81FD                                      JumpIfALTNusng   UniverseListSize, DrawShipLoop
 298  81FD FE 0C       >                        cp      UniverseListSize
 298  81FF DA D6 81    >                        jp		c, DrawShipLoop
 299  8202 C9                                   ret
 300  8203              ;..................................................................................................................................
 301  8203
 302  8203
 303  8203 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 304  8205 CD 52 92                             call    is_key_pressed
 305  8208 C0                                   ret     nz
 306  8209 3A 69 82                             ld      a,(currentDemoShip)
 307  820C 3C                                   inc     a
 308  820D FE 2C                                cp      44
 309  820F 20 01                                jr      nz,.TestOK
 310  8211 AF                                   xor     a
 311  8212 32 69 82     .TestOK:                ld      (currentDemoShip),a
 312  8215 CD B4 97                             call    ClearUnivSlotList
 313  8218 3A 69 82                             ld      a,(currentDemoShip)
 314  821B 47                                   ld      b,a
 315  821C AF                                   xor     a
 316  821D CD C8 97                             call    SetSlotAToTypeB
 317  8220                                      MMUSelectUniverseN 0
 317  8220 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 318  8224 CD 20 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 319  8227 3A 69 82                             ld      a,(currentDemoShip)
 320  822A                                      MMUSelectShipBank1
 320  822A ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 321  822E CD 0F E0                             call    GetShipBankId
 322  8231                                      MMUSelectShipBankA
 322  8231 ED 92 57    >					 nextreg ShipModelMMU,	    a
 323  8234 78                                   ld      a,b
 324  8235 CD 6A E0                             call    CopyShipToUniverse
 325  8238 CD 48 85                             call    SetInitialShipPosition
 326  823B CD EF 82                             call    DEBUGSETNODES
 327  823E C9                                   ret
 328  823F
 329  823F
 330  823F 3A 76 94     TestPauseMode:          ld      a,(GamePaused)
 331  8242 FE 00                                cp      0
 332  8244 20 12                                jr      nz,.TestForResume
 333  8246 3A 6D 94     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 334  8249                                      ReturnIfAGTENusng       ScreenFront
 334  8249 FE 09       >                   cp    ScreenFront
 334  824B D0          >                   ret	 nc
 335  824C 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 336  824E CD 52 92                             call    is_key_pressed
 337  8251 C0                                   ret     nz
 338  8252 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 339  8254 32 76 94                             ld      (GamePaused),a
 340  8257 C9                                   ret
 341  8258 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 342  825A CD 52 92                             call    is_key_pressed
 343  825D C0                                   ret     nz
 344  825E AF           .ResumePressed:         xor     a
 345  825F 32 76 94                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 346  8262 C9                                   ret
 347  8263
 348  8263 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 349  8265 CD 52 92                             call    is_key_pressed
 350  8268 C9                                   ret
 351  8269 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 352  826A
 353  826A              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 354  826A 21 EE 82                             ld      hl,TidyCounter
 355  826D 35                                   dec     (hl)
 356  826E C0                                   ret     nz
 357  826F 3E 10                                ld      a,16
 358  8271 32 EE 82                             ld      (TidyCounter),a
 359  8274                                     ; call    TIDY DEBUG
 360  8274                                     ; add AI in here too
 361  8274 C9                                   ret
 362  8275
 363  8275 F5           InitialiseShipAUnivB:   push    af
 364  8276 78                                   ld      a,b
 365  8277                                      MMUSelectUniverseA                          ; load up register into universe bank
 365  8277 C6 46       >                     add    a,BankUNIVDATA0
 365  8279 ED 92 56    >                     nextreg UniverseMMU,       a
 366  827C CD 20 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 367  827F                                      MMUSelectShipBank1
 367  827F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 368  8283 F1                                   pop     af
 369  8284 CD 6A E0                             call    CopyShipToUniverse
 370  8287 C9                                   ret
 371  8288
 372  8288 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 373  828B 11 85 94                             ld      de,varVector9ByteWork
 374  828E ED A0                                ldi
 375  8290 ED A0                                ldi
 376  8292 ED A0                                ldi
 377  8294 ED A0                                ldi
 378  8296 ED A0                                ldi
 379  8298 ED A0                                ldi
 380  829A ED A0                                ldi
 381  829C ED A0                                ldi
 382  829E ED A0                                ldi
 383  82A0 2A 85 94     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 384  82A3 ED 5B 88 94                          ld      de, (varVector9ByteWork+3); Y
 385  82A7 ED 4B 8B 94                          ld      bc, (varVector9ByteWork+6); Z
 386  82AB 7D                                   ld      a,l
 387  82AC B3                                   or      e
 388  82AD B1                                   or      c
 389  82AE F6 01                                or      1
 390  82B0 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 391  82B2 7C                                   ld      a,h
 392  82B3 B2                                   or      d
 393  82B4 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 394  82B5 C5           .MulBy2Loop:            push    bc
 395  82B6 DD 45                                ld      b,ixl
 396  82B8 CB 20                                sla     b                       ; Shift ixl left
 397  82BA DD 68                                ld      ixl,b
 398  82BC C1                                   pop     bc
 399  82BD CB 17                                rl      a                       ; roll into a
 400  82BF 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 401  82C1                                      ShiftHLLeft1                    ; Shift Left X
 401  82C1 CB 25       >			   sla l
 401  82C3 CB 14       >			   rl  h
 402  82C5                                      ShiftDELeft1                    ; Shift Left Y
 402  82C5 CB 23       >			   sla e
 402  82C7 CB 12       >			   rl  d
 403  82C9                                      ShiftBCLeft1                    ; Shift Left Z
 403  82C9 CB 21       >			   sla c
 403  82CB CB 10       >			   rl  b
 404  82CD 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 405  82CF 3A 87 94     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 406  82D2 CB 3C                                srl     h
 407  82D4 B4                                   or      h
 408  82D5 32 75 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 409  82D8 3A 8A 94                             ld      a,(varVector9ByteWork+5); y sign
 410  82DB CB 3A                                srl     d
 411  82DD B2                                   or      d
 412  82DE 32 76 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 413  82E1 3A 8D 94                             ld      a,(varVector9ByteWork+8); y sign
 414  82E4 CB 38                                srl     b
 415  82E6 B0                                   or      b
 416  82E7 32 77 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 417  82EA CD 95 A5                             call    normaliseXX1596fast
 418  82ED C9                                   ret                             ; will return with a holding Vector Z
 419  82EE
 420  82EE 00           TidyCounter             DB  0
 421  82EF
 422  82EF                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 82EF
   2+ 82EF
   3+ 82EF 21 12 83     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 82F2 11 0C C0                             ld      de,UBnKxlo
   5+ 82F5 01 09 00                             ld      bc,9
   6+ 82F8 ED B0                                ldir
   7+ 82FA 21 1B 83                             ld      hl,DEBUGROTMATDATA
   8+ 82FD 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8300 01 12 00                             ld      bc,6*3
  10+ 8303 ED B0                                ldir
  11+ 8305 C9                                   ret
  12+ 8306
  13+ 8306 21 12 83     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 8309 11 0C C0                             ld      de,UBnKxlo
  15+ 830C 01 06 00                             ld      bc,9 - 3
  16+ 830F ED B0                                ldir
  17+ 8311 C9                                   ret
  18+ 8312
  19+ 8312              ; culltest
  20+ 8312              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 8312 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 8316 00 00 5C 07
  21+ 831A 00
  22+ 831B 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 831F 00 00
  23+ 8321 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 8325 00 00
  24+ 8327 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 832B 00 E0
  25+ 832D
  26+ 832D              ; FAILS due to sharp angle, OK now
  27+ 832D              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 832D              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 832D              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 832D              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 832D              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 832D              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 832D              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 832D              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 832D              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 832D              ; Looks OK
  37+ 832D              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 832D              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 832D              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 832D              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 832D              ;
  42+ 832D              ; Massive horizontal line
  43+ 832D              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 832D              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 832D              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 832D              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 832D              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 832D              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 832D              ; Line lost in clipping
  50+ 832D              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 832D              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 832D              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 832D              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 832D              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 832D              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 832D              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 832D              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 832D              ;
  59+ 832D              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 832D              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 832D              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 832D              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 832D              ; top left off right issue
  64+ 832D              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 832D              ; test middle of screen
  69+ 832D              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 832D              ;
  71+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 832D              ; test middle of screen futher away
  75+ 832D              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 832D              ;
  77+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 832D
  81+ 832D              ; Test left center clip still warping
  82+ 832D              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 832D              ;
  84+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 832D              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 832D              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 832D              ;
  90+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 832D              ; Test top center clip test 1 - good test many ships fail
  94+ 832D              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 832D              ;
  96+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 832D              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 832D              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 832D              ;
 102+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 832D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 832D              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 832D              ; looks better now may have some clipping issues maybe ship data
 107+ 832D              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 832D              ;
 109+ 832D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 832D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 832D E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 8331 B0 55
 112+ 8333              ; Test left top center clip
 113+ 8333
 114+ 8333              ; Test right top center clip
 115+ 8333              ; Test left bottom center clip
 116+ 8333              ; Test right bottom center clip
 117+ 8333
 118+ 8333              ; Tests with no clip
 119+ 8333              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 8333              ;
 121+ 8333              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 8333              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 8333              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 8333              ;
 125+ 8333              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 8333              ;
 127+ 8333              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 8333              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 8333
# file closed: ./debugMatrices.asm
 423  8333
 424  8333
 425  8333              ;TODO Optimisation
 426  8333              ; Need this table to handle differnet events
 427  8333              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 428  8333              ; cursor key, joystick press
 429  8333              ; cursor key, joystick press
 430  8333              ; non cursor keys presses
 431  8333              ;
 432  8333              ; First byte is now docked flag
 433  8333              ;
 434  8333              ; Padded to 8 bytes to allow a * 8 for addressing
 435  8333              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 436  8333              ; Byte 1   - Screen Id
 437  8333              ; Byte 2,3 - address of keypress table
 438  8333              ; Byte 4   - Bank with Display code
 439  8333              ; Byte 5,6 - Function for display
 440  8333              ; Byte 7,8 - Main loop update routine
 441  8333              ; Byte 9   - Draw stars Y/N
 442  8333              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 443  8333              ; byte 11  - Double Buffering 0 = no, 1 = yes
 444  8333              ; byte 12,13  - cursor key input routine
 445  8333              ; byte 14  - paddinf (removed special instrunction logic and moved to docking flag)
 446  8333              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 447  8333              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 448  8333 00 00 7B 91  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 448  8337 32 FC C3 00
 448  833B 00 00 00 00
 448  833F 5A C4 00 00
 449  8343 00 01 79 91  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $00,$00
 449  8347 33 43 C1 62
 449  834B C2 00 00 00
 449  834F 05 C3 00 00
 450  8353 01 02 7D 91                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $00,$00
 450  8357 36 43 C3 FA
 450  835B C3 00 00 00
 450  835F 00 00 00 00
 451  8363 02 03 7D 91                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 451  8367 36 43 C3 00
 451  836B 00 00 00 00
 451  836F 00 00 00 00
 452  8373 00 04 7F 91  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $00,$00
 452  8377 3F 1E CF 62
 452  837B CF 00 00 00
 452  837F 00 00 00 00
 453  8383 00 05 81 91                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 453  8387 34 F5 C1 00
 453  838B 00 00 00 00
 453  838F 00 00 00 00
 454  8393 00 06 8F 91                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 454  8397 35 F0 C2 00
 454  839B 00 00 00 00
 454  839F 00 00 00 00
 455  83A3 01 07 77 91                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $00,$00
 455  83A7 40 EA D3 86
 455  83AB D4 00 00 00
 455  83AF 00 00 00 00
 456  83B3 01 08 71 91                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 456  83B7 41 79 C1 63
 456  83BB C2 00 01 01
 456  83BF 00 00 01 00
 457  83C3 02 09 47 91  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 457  83C7 3E 6A C0 00
 457  83CB 00 01 00 01
 457  83CF A8 C0 00 00
 458  83D3 02 0A 47 91                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 458  83D7 3E 6A C0 00
 458  83DB 00 01 00 01
 458  83DF A8 C0 00 00
 459  83E3 02 0B 47 91                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 459  83E7 3E 6A C0 00
 459  83EB 00 01 00 01
 459  83EF A8 C0 00 00
 460  83F3 02 0C 47 91                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 460  83F7 3E 6A C0 00
 460  83FB 00 01 00 01
 460  83FF A8 C0 00 00
 461  8403 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $00,$00
 461  8407 41 F5 C1 98
 461  840B C2 00 01 01
 461  840F 00 00 00 00
 462  8413
 463  8413              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 464  8413              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 465  8413              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 466  8413              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 467  8413              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 468  8413              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 469  8413 FF           ScreenTransitionForced  DB $FF
 470  8414                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 8414              ; Use bank 0 as source and bank 7 as write target
   2+ 8414              ResetUniv:
   3+ 8414                  MODULE ResetUniv
   4+ 8414              ; Move bank 70 into page 0
   5+ 8414                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 8414 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 8418 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 841A 06 0C        	ld		b,12
   8+ 841C              ResetCopyLoop:
   9+ 841C C5           	push	bc
  10+ 841D              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 841D C6 46       >                     add    a,BankUNIVDATA0
  10+ 841F ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 8422 F5           	push	af
  12+ 8423 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 8426 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 8429 01 21 1D     	ld		bc,UnivBankSize
  15+ 842C CD F2 90     	call	memcopy_dma
  16+ 842F F1           	pop		af
  17+ 8430 C1           	pop		bc
  18+ 8431 3C           	inc		a
  19+ 8432 57               ld      d,a
  20+ 8433 C6 41            add     "A"
  21+ 8435 32 0B C0         ld      (StartOfUnivN),a
  22+ 8438 7A               ld      a,d
  23+ 8439 10 E1        	djnz	ResetCopyLoop
  24+ 843B C9           	ret
  25+ 843C                  ENDMODULE
  26+ 843C
  27+ 843C              ; Use bank 0 as source and bank 7 as write target
  28+ 843C              ResetGalaxy:
  29+ 843C                  MODULE ResetGalaxy
  30+ 843C              ; Move bank 70 into page 0
  31+ 843C                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  31+ 843C ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  32+ 8440 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  33+ 8442 06 08        	ld		b,8
  34+ 8444 0E 01            ld      c,1
  35+ 8446              ResetCopyLoop:
  36+ 8446 F5           	push	af
  37+ 8447 C5           	push	bc
  38+ 8448              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  38+ 8448 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  39+ 844B 21 00 E0     	ld		hl,GalaxyDataAddr
  40+ 844E 11 00 00     	ld		de,dmaCopySrcAddr
  41+ 8451 01 CD 1C     	ld		bc,GalaxyBankSize
  42+ 8454 CD F2 90     	call	memcopy_dma
  43+ 8457 C1           	pop		bc
  44+ 8458 21 0F E0         ld      hl, galaxy_pg_cnt
  45+ 845B 79               ld      a,c
  46+ 845C C6 30            add     a, $30
  47+ 845E 77               ld      (hl),a
  48+ 845F 0C               inc     c
  49+ 8460 F1               pop     af
  50+ 8461 3C           	inc		a
  51+ 8462 10 E2        	djnz	ResetCopyLoop
  52+ 8464 C9           	ret
  53+ 8465                  ENDMODULE
# file closed: ./GameEngine/resetUniverse.asm
 471  8465
 472  8465 DD 01        LaunchedFromStation:    break
 473  8467 CD B4 97                             call    ClearUnivSlotList
 474  846A AF                                   xor     a
 475  846B CD C0 97                             call    SetSlotAToSpaceStation              ; set slot 0 to space station
 476  846E                                      MMUSelectUniverseA                          ; Prep Target universe
 476  846E C6 46       >                     add    a,BankUNIVDATA0
 476  8470 ED 92 56    >                     nextreg UniverseMMU,       a
 477  8473                                      MMUSelectShipBank1                          ; Bank in the ship model code
 477  8473 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 478  8477 3E 0D                                ld      a,CoriloisStation
 479  8479 CD 0F E0                             call    GetShipBankId
 480  847C                                      MMUSelectShipBankA                          ; Select the correct bank found
 480  847C ED 92 57    >					 nextreg ShipModelMMU,	    a
 481  847F 78                                   ld      a,b                                 ; Select the correct ship
 482  8480 CD 6A E0                             call    CopyShipToUniverse
 483  8483 CD 2B CA     .BuiltStation:          call    ResetStationLaunch
 484  8486 AF           .NowInFlight:           xor     a
 485  8487 32 75 94                             ld      (DockedFlag),a
 486  848A 3E 09                                ld      a,ScreenFront
 487  848C 32 13 84                             ld      (ScreenTransitionForced),a
 488  848F C9                                   ret
 489  8490
 490  8490 3A 74 83     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 491  8493 DD 21 73 83                          ld      ix,ScreenCmdr
 492  8497 C3 A4 84                             jp      SetScreenAIX
 493  849A
 494  849A 3A C4 83     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 495  849D DD 21 C3 83                          ld      ix,ScreenKeyFront
 496  84A1 C3 A4 84                             jp      SetScreenAIX
 497  84A4              ; false ret here as we get it free from jp
 498  84A4
 499  84A4              ;----------------------------------------------------------------------------------------------------------------------------------
 500  84A4 32 6D 94     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 501  84A7 AF                                   xor     a
 502  84A8 3D                                   dec     a                               ; set A to FF
 503  84A9 32 13 84                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 504  84AC 32 6C 94                             ld      (ScreenChanged),a               ; Set screen changed to FF
 505  84AF DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 506  84B2 32 FD 80                             ld      (ScreenLoopBank+1),a            ; setup loop
 507  84B5 32 AB 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 508  84B8                                      MMUSelectScreenA
 508  84B8 ED 92 56    >                     nextreg ScreenBankMMU,		a
 509  84BB DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 510  84BE 32 F2 84                             ld      (ScreenUpdateAddr+1),a
 511  84C1 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 512  84C4 32 F3 84                             ld      (ScreenUpdateAddr+2),a
 513  84C7 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 514  84CA 32 02 81                             ld      (ScreenLoopJP+1),a
 515  84CD DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 516  84D0 32 03 81                             ld      (ScreenLoopJP+2),a
 517  84D3 DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 518  84D6 32 C5 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 519  84D9 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 520  84DC 32 8D 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 521  84DF DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 522  84E2 32 1B 81                             ld      (DoubleBufferCheck+1),a
 523  84E5 DD 7E 0C                             ld      a,(ix+12)
 524  84E8 32 B0 80                             ld      (CallCursorRoutine+1),a
 525  84EB DD 7E 0D                             ld      a,(ix+13)
 526  84EE 32 B1 80                             ld      (CallCursorRoutine+2),a
 527  84F1
 528  84F1 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 529  84F4              ;----------------------------------------------------------------------------------------------------------------------------------
 530  84F4 3A 6D 94     ViewKeyTest:            ld      a,(ScreenIndex)
 531  84F7 4F                                   ld      c,a
 532  84F8 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 533  84FA DD 21 33 83                          ld      ix,ScreenKeyMap
 534  84FE DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 535  8501              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 536  8501 FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 537  8503 28 3B                                jr      z,NotReadNextKey                ;
 538  8505 FE 00                                cp      0                               ; if itr a always read skip docking check
 539  8507 28 14                                jr      z,.NoDocCheck
 540  8509 57           .DocCheck:              ld      d,a
 541  850A 3A 75 94                             ld      a,(DockedFlag)
 542  850D FE 00                                cp      0                               ; if we are docked
 543  850F 28 07                                jr      z,.NotDockedCheck
 544  8511 7A           .DockedCheck:           ld      a,d
 545  8512 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 546  8514 20 2A                                jr      nz,NotReadNextKey
 547  8516 18 05                                jr      .NoDocCheck
 548  8518 7A           .NotDockedCheck:        ld      a,d
 549  8519 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 550  851B 20 23                                jr      nz,NotReadNextKey
 551  851D DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 552  8520 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 553  8521 5F                                   ld      e,a
 554  8522 28 1C                                jr      z,NotReadNextKey
 555  8524 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 556  8527 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 557  8529 28 15                                jr      z,NotReadNextKey
 558  852B 32 35 85                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 559  852E DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 560  8531 32 36 85                             ld      (ReadKeyAddr+2),a
 561  8534 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 562  8537 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 563  8538                                      IfAIsZeroGoto NotReadNextKey
 563  8538 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 563  8539 CA 40 85    >				jp	z, NotReadNextKey
 564  853C 7B           .ValidScreenChange:     ld      a,e
 565  853D C3 A4 84                             jp      SetScreenAIX
 566  8540              ;--- CODE WILL NOT FALL TO HERE ---
 567  8540 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 568  8543 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 569  8545 10 B7                                djnz    ViewScanLoop
 570  8547 C9                                   ret
 571  8548
 572  8548 21 00 00     SetInitialShipPosition: ld      hl,$0000
 573  854B 22 0C C0                             ld      (UBnKxlo),hl
 574  854E 21 00 00                             ld      hl,$0000
 575  8551 22 0F C0                             ld      (UBnKylo),hl
 576  8554 21 B4 03                             ld      hl,$03B4
 577  8557 22 12 C0                             ld      (UBnKzlo),hl
 578  855A AF                                   xor     a
 579  855B 32 0E C0                             ld      (UBnKxsgn),a
 580  855E 32 11 C0                             ld      (UBnKysgn),a
 581  8561 32 14 C0                             ld      (UBnKzsgn),a
 582  8564              ;    call    Reset TODO
 583  8564 CD DD CC                             call	InitialiseOrientation            ;#00;
 584  8567 3E 01                                ld      a,1
 585  8569 32 60 94                             ld      (DELTA),a
 586  856C 21 04 00                             ld      hl,4
 587  856F 22 61 94                             ld      (DELTA4),hl
 588  8572 C9                                   ret
 589  8573
 590  8573 1E 10        Draw3Lines:             ld      e,16
 591  8575 C5 D5                                push    bc,,de
 592  8577                                      MMUSelectLayer2
 592  8577 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 593  857B CD 62 E2                             call    l2_draw_horz_line
 594  857E D1 C1                                pop     bc,,de
 595  8580 05                                   dec     b
 596  8581 C5 D5                                push    bc,,de
 597  8583 1E 14                                ld      e,20
 598  8585                                      MMUSelectLayer2
 598  8585 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 599  8589 CD 62 E2                             call    l2_draw_horz_line
 600  858C D1 C1                                pop     bc,,de
 601  858E 05                                   dec     b
 602  858F                                      MMUSelectLayer2
 602  858F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 603  8593 CD 62 E2                             call    l2_draw_horz_line
 604  8596 C9                                   ret
 605  8597
 606  8597 3A 60 94     UpdateConsole:          ld      a,(DELTA)
 607  859A FE 00                                cp      0                           ; don't draw if there is nothing to draw
 608  859C 28 0C                                jr      z,.UpdateRoll
 609  859E 01 D1 84                             ld      bc,SpeedoStart
 610  85A1 21 67 97                             ld      hl,SpeedoMapping
 611  85A4 ED 31                                add     hl,a
 612  85A6 56                                   ld      d,(hl)
 613  85A7 CD 73 85                             call    Draw3Lines
 614  85AA 3A 23 94     .UpdateRoll:            ld      a,(ALP1)
 615  85AD FE 00                                cp      0
 616  85AF 28 30                                jr      z,.UpdatePitch
 617  85B1 21 E0 8A                             ld      hl,RollMiddle
 618  85B4 3A 24 94                             ld      a,(ALP2)
 619  85B7 FE 00                                cp      0
 620  85B9 28 18                                jr      z,.PosRoll
 621  85BB 16 00        .NegRoll:               ld      d,0
 622  85BD 3A 23 94                             ld      a,(ALP1)
 623  85C0 CB 27                                sla     a
 624  85C2 5F                                   ld      e,a
 625  85C3 B7                                   or      a
 626  85C4 ED 52                                sbc     hl,de
 627  85C6 44 4D                                ld      bc,hl
 628  85C8 3E E1                                ld      a,DialMiddleXPos
 629  85CA 91                                   sub     c
 630  85CB 57                                   ld      d,a
 631  85CC 1E FF                                ld      e,$FF
 632  85CE CD 73 85                             call    Draw3Lines
 633  85D1 18 0E                                jr      .UpdatePitch
 634  85D3 01 E0 8A     .PosRoll:               ld      bc,RollMiddle
 635  85D6 3A 23 94                             ld      a,(ALP1)
 636  85D9 CB 27                                sla     a
 637  85DB 57                                   ld      d,a
 638  85DC 1E FF                                ld      e,$FF
 639  85DE CD 73 85                             call    Draw3Lines
 640  85E1 3A 16 94     .UpdatePitch:           ld      a,(BET1)
 641  85E4 FE 00                                cp      0
 642  85E6 28 30                                jr      z,.DoneConsole
 643  85E8 21 E0 92                             ld      hl,PitchMiddle
 644  85EB 3A 17 94                             ld      a,(BET2)
 645  85EE FE 00                                cp      0
 646  85F0 28 18                                jr      z,.PosPtich
 647  85F2 16 00        .NegPitch:              ld      d,0
 648  85F4 3A 16 94                             ld      a,(BET1)
 649  85F7 CB 27                                sla     a
 650  85F9 5F                                   ld      e,a
 651  85FA B7                                   or      a
 652  85FB ED 52                                sbc     hl,de
 653  85FD 44 4D                                ld      bc,hl
 654  85FF 3E E1                                ld      a,DialMiddleXPos
 655  8601 91                                   sub     c
 656  8602 57                                   ld      d,a
 657  8603 1E FF                                ld      e,$FF
 658  8605 CD 73 85                             call    Draw3Lines
 659  8608 18 0E                                jr      .DoneConsole
 660  860A 01 E0 92     .PosPtich:              ld      bc,PitchMiddle
 661  860D 3A 16 94                             ld      a,(BET1)
 662  8610 CB 27                                sla     a
 663  8612 57                                   ld      d,a
 664  8613 1E FF                                ld      e,$FF
 665  8615 CD 73 85                             call    Draw3Lines
 666  8618 C9           .DoneConsole:           ret
 667  8619
 668  8619              ScannerX                equ 128
 669  8619              ScannerY                equ 171
 670  8619              ScannerBottom           equ 190
 671  8619              ScannerTypeMissle       equ 2
 672  8619              ScannerXRangeOffset     equ $35
 673  8619              ScannerCenter           equ 127
 674  8619
 675  8619              ScannerDefault          equ 0
 676  8619              ScannerMissile          equ 2
 677  8619              ScannerStation          equ 4
 678  8619              ScannerEnemy            equ 6
 679  8619
 680  8619 10 1C 90 FC  ScannerColourTable:     DB  16,28,144,252,18,31,128,224
 680  861D 12 1F 80 E0
 681  8621
 682  8621              GetShipColor:           MACRO
 683  8621 ~                                    ld      a,(ShipTypeAddr)
 684  8621 ~                                    sla     a                            ; as its byte pairs * 2
 685  8621 ~                                    ld      hl,ScannerColourTable
 686  8621 ~                                    add     hl,a
 687  8621 ~                                    ld      a,(hl)
 688  8621                                      ENDM
 689  8621              GetShipColorBright:     MACRO
 690  8621 ~                                    ld      a,(ShipTypeAddr)
 691  8621 ~                                    sla     a                            ; as its byte pairs * 2
 692  8621 ~                                    inc     a
 693  8621 ~                                    ld      hl,ScannerColourTable
 694  8621 ~                                    add     hl,a
 695  8621 ~                                    ld      a,(hl)
 696  8621                                      ENDM
 697  8621
 698  8621              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 699  8621              UpdateScannerShip:
 700  8621 3A 2B C0                             ld      a,(UBnkexplDsp)             ; if bit 4 is clear then ship should not be drawn
 701  8624 CB 67                                bit     4,a                         ; .
 702  8626                                      ;DEBUG ret     z                           ; .
 703  8626 3A 15 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 704  8629 CB 7F                                bit     7,a
 705  862B C0                                   ret     nz
 706  862C              ; DEBUG Add in station types later
 707  862C 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 708  862F ED 5B 0C C0                          ld      de,(UBnKxlo)
 709  8633 ED 4B 0F C0                          ld      bc,(UBnKylo)
 710  8637 7C                                   ld      a,h
 711  8638 B2                                   or      d
 712  8639 B0                                   or      b
 713  863A E6 C0                                and     %11000000
 714  863C C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 715  863D 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 716  8640 CB 7F                                bit     7,a
 717  8642 28 04                                jr      z,.absXHi
 718  8644                                      NegD
 718  8644 7A          >                ld      a,d
 718  8645 ED 44       >                neg
 718  8647 57          >                ld      d,a
 719  8648 7A           .absXHi:                ld      a,d
 720  8649 C6 80                                add     ScannerX
 721  864B DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 722  864D CB 3C        .ProcessZCoord:         srl     h
 723  864F CB 3C                                srl     h
 724  8651 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 725  8654 CB 7F                                bit     7,a
 726  8656 28 04                                jr      z,.absZHi
 727  8658                                      NegH
 727  8658 7C          >                ld      a,h
 727  8659 ED 44       >                neg
 727  865B 67          >                ld      h,a
 728  865C 3E AB        .absZHi:                ld      a,ScannerY
 729  865E 94                                   sub     h
 730  865F FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 731  8661 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 732  8663 20 19                                jr      nz,.StickHasLength
 733  8665 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 734  8667 FD 6F                                ld      iyl,a
 735  8669 DD 7D                                ld      a,ixl
 736  866B                                      GetShipColorBright
 736  866B 3A 15 C3    >                        ld      a,(ShipTypeAddr)
 736  866E CB 27       >                        sla     a                            ; as its byte pairs * 2
 736  8670 3C          >                        inc     a
 736  8671 21 19 86    >                        ld      hl,ScannerColourTable
 736  8674 ED 31       >                        add     hl,a
 736  8676 7E          >                        ld      a,(hl)
 737  8677                                      MMUSelectLayer2
 737  8677 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 738  867B C3 B5 86                             jp      .NoStick
 739  867E 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 740  8681 CB 7F                                bit     7,a
 741  8683 28 04                                jr      z,.absYHi
 742  8685                                      NegB
 742  8685 78          >                ld      a,b
 742  8686 ED 44       >                neg
 742  8688 47          >                ld      b,a
 743  8689 FD 7C        .absYHi:                ld      a,iyh
 744  868B 90           .SetStickPos:           sub     b
 745  868C                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 745  868C FE BE       >                        cp      ScannerBottom
 745  868E DA 93 86    >                        jp		c, .StickOnScreen
 746  8691 3E BE                                ld      a,ScannerBottom
 747  8693 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 748  8695                                      GetShipColor
 748  8695 3A 15 C3    >                        ld      a,(ShipTypeAddr)
 748  8698 CB 27       >                        sla     a                            ; as its byte pairs * 2
 748  869A 21 19 86    >                        ld      hl,ScannerColourTable
 748  869D ED 31       >                        add     hl,a
 748  869F 7E          >                        ld      a,(hl)
 749  86A0 DD 6F                                ld      ixl,a
 750  86A2 FD 44                                ld      b,iyh                       ; from row
 751  86A4 DD 4C                                ld      c,ixh                       ; from col
 752  86A6 FD 55                                ld      d,iyl                       ; to row
 753  86A8 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 754  86AA E5                                   push    hl
 755  86AB                                      MMUSelectLayer2
 755  86AB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 756  86AF CD 0D E3                             call    l2_draw_vert_line_to
 757  86B2 E1                                   pop     hl
 758  86B3 23                                   inc     hl
 759  86B4 7E                                   ld      a,(hl)
 760  86B5 FD 45        .NoStick:               ld      b,iyl                       ; row
 761  86B7 DD 4C                                ld      c,ixh                       ; col
 762  86B9 F5                                   push    af
 763  86BA CD FF E0                             call    l2_plot_pixel
 764  86BD F1                                   pop     af
 765  86BE FD 45                                ld      b,iyl
 766  86C0 DD 4C                                ld      c,ixh
 767  86C2 0C                                   inc     c
 768  86C3 CD FF E0                             call    l2_plot_pixel
 769  86C6 C9                                   ret
 770  86C7
 771  86C7
 772  86C7
 773  86C7              ;.absXhi:
 774  86C7              ;                        ld      a,ScannerX
 775  86C7              ;                        JumpOnBitSet d,7,ScannerNegX
 776  86C7              ;                        add     a,e
 777  86C7              ;                        jp      ScannerZCoord
 778  86C7              ;ScannerNegX:            sub     e
 779  86C7              ;ScannerZCoord:          ld      e,a
 780  86C7              ;                        srl     c
 781  86C7              ;                        srl     c
 782  86C7              ;                        ld      a,ScannerY
 783  86C7              ;                        JumpOnBitSet b,7,ScannerNegZ
 784  86C7              ;                        sub     c
 785  86C7              ;                        jp      ScannerYCoord
 786  86C7              ;ScannerNegZ:            add     a,c
 787  86C7              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 788  86C7              ;                        JumpOnBitSet h,7,ScannerStickDown
 789  86C7              ;                        sub     l                       ; a already holds actual Y
 790  86C7              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 791  86C7              ;                        ld      a,128
 792  86C7              ;                        jp      ScannerHeightDone
 793  86C7              ;ScannerStickDown:       add     a,l
 794  86C7              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 795  86C7              ;                        ld      a,191
 796  86C7              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 797  86C7              ;                        ld      b,d
 798  86C7              ;                        ld      d,a
 799  86C7              ;                        cp      b
 800  86C7              ;                        jp      z,Scanner0Height
 801  86C7              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 802  86C7              ;                        push    bc
 803  86C7              ;                        push    de
 804  86C7              ;                        MMUSelectLayer2
 805  86C7              ;                        call    l2_draw_vert_line_to
 806  86C7              ;                        pop     de
 807  86C7              ;                        pop     bc
 808  86C7              ;Scanner0Height:         ld      b,d
 809  86C7              ;                       push    bc
 810  86C7              ;                       ld      a,255
 811  86C7              ;                       MMUSelectLayer2
 812  86C7              ;                       call    l2_plot_pixel
 813  86C7              ;                       pop     bc
 814  86C7              ;                       inc     c
 815  86C7              ;                       ld      a,255
 816  86C7              ;                       MMUSelectLayer2
 817  86C7              ;                       call    l2_plot_pixel
 818  86C7 C9                                   ret
 819  86C8
 820  86C8
 821  86C8 AF           SeedGalaxy0:            xor     a
 822  86C9                                      MMUSelectGalaxyA
 822  86C9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 823  86CC DD 21 16 E0                          ld      ix,galaxy_data
 824  86D0 AF                                   xor		a
 825  86D1 32 69 94                             ld		(XSAV),a
 826  86D4 CD 9C 98                             call    copy_galaxy_to_system
 827  86D7 DD E5        SeedGalaxy0Loop:        push    ix
 828  86D9 D1                                   pop     de
 829  86DA 21 50 94                             ld      hl,SystemSeed
 830  86DD CD A2 98                             call    copy_seed
 831  86E0 DD E5                                push    ix
 832  86E2 E1                                   pop     hl
 833  86E3 ED 34 08 00                          add     hl,8
 834  86E7 E5                                   push    hl
 835  86E8 DD E1                                pop     ix
 836  86EA CD D7 98                             call    next_system_seed
 837  86ED 3A 69 94                             ld		a,(XSAV)
 838  86F0 3D                                   dec		a
 839  86F1 FE 00                                cp		0
 840  86F3 C8                                   ret		z
 841  86F4 32 69 94                             ld		(XSAV),a
 842  86F7 20 DE                                jr      nz,SeedGalaxy0Loop
 843  86F9 C9                                   ret
 844  86FA
 845  86FA
 846  86FA
 847  86FA
 848  86FA                  include "./ModelRender/testdrawing.asm"
# file opened: ./ModelRender/testdrawing.asm
   1+ 86FA
   2+ 86FA              ; Test of render
   3+ 86FA              ;  Generate a memory bank for a ship using univ_ship_data to create a block in bank 6
   4+ 86FA              ;  need to clear page 70
   5+ 86FA              ;  swap in to bank 7
   6+ 86FA              ;  use UBnKxlo as INWK 0 (we will add an equ so that its moved over)
   7+ 86FA              ;  x cobraMk3 data to map data
   8+ 86FA              ;  Use ShipModelTable table indexed by cobraMk3 ship number (CobraTablePointer)
   9+ 86FA              ;  Pull ship model table into bank 6
  10+ 86FA              ;  use dma transfer to copy data from bank 6 to bank 7
  11+ 86FA              ;
  12+ 86FA              ScaleRotationMatrix197:
  13+ 86FA 06 09        	ld		b,9
  14+ 86FC 21 30 C0     	ld		hl,UBnkTransmatSidev
  15+ 86FF              ScaleRotationLoop:
  16+ 86FF 7E           	ld		a,(hl)
  17+ 8700 5F           	ld		e,a
  18+ 8701 23           	inc		hl                  ; move to hi byte
  19+ 8702 7E           	ld		a,(hl)
  20+ 8703 57           	ld		d,a
  21+ 8704 E6 80            and     SignOnly8Bit        ; strip out sign bit
  22+ 8706 DD 6F        	ld		ixl,a				; retain for sign bit
  23+ 8708              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2
  23+ 8708 CB 23       >			   sla e
  23+ 870A CB 12       >			   rl  d
  24+ 870C 7A               ld      a,d
  25+ 870D 0E C5        	ld		c,ConstNorm
  26+ 870F 7A           	ld		a,d					; a = D Hi* 2
  27+ 8710 C5           	push	bc
  28+ 8711 E5           	push	hl
  29+ 8712 CD A3 A3     	call	DIV16Amul256dCUNDOC	; result in BC
  30+ 8715 E1           	pop		hl
  31+ 8716 78           	ld		a,b
  32+ 8717 DD B5            or      ixl                 ; bring back sign bit
  33+ 8719 77               ld      (hl),a
  34+ 871A 2B               dec     hl
  35+ 871B 71               ld      (hl),c
  36+ 871C 23               inc     hl
  37+ 871D C1           	pop		bc
  38+ 871E 23               inc     hl                  ; no to next vertex value
  39+ 871F 10 DE        	djnz	ScaleRotationLoop
  40+ 8721 C9           	ret
  41+ 8722
  42+ 8722                                      include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ././Maths/Utilities/ScaleXX16Matrix197.asm
   1++8722              ScaleXX16Matrix197:
   2++8722 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3++8724 0E C5        	ld		c,ConstNorm         ; c = 197
   4++8726 21 30 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5++8729              .ScaleXX16Loop:
   6++8729 7E           	ld		a,(hl)              ; set DE = matrix value
   7++872A 5F           	ld		e,a                 ;
   8++872B 23           	inc		hl                  ;
   9++872C 7E           	ld		a,(hl)              ;
  10++872D 57           	ld		d,a                 ;
  11++872E E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12++8730 DD 6F        	ld		ixl,a				; retain for sign bit
  13++8732              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13++8732 CB 23       >			   sla e
  13++8734 CB 12       >			   rl  d
  14++8736 7A               ld      a,d                 ; a = high byte after x 2
  15++8737 C5           	push	bc                  ; save BC  counter and constant 197
  16++8738 E5           	push	hl                  ; save HL
  17++8739 CD A3 A3     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18++873C E1           	pop		hl
  19++873D 2B               dec     hl                  ; move back to low byte
  20++873E 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21++873F 23               inc     hl                  ; move back to high byte
  22++8740              ;    ld      a,(hl)
  23++8740              ;    and     $80
  24++8740 DD 7D            ld      a,ixl
  25++8742 77               ld      (hl),a              ; write back just sign bit
  26++8743 C1           	pop		bc                  ; retrieve both counter and constant 197
  27++8744 23               inc     hl                  ; no to next vertex value
  28++8745 10 E2        	djnz	.ScaleXX16Loop
  29++8747 C9           	ret
  30++8748
# file closed: ././Maths/Utilities/ScaleXX16Matrix197.asm
  43+ 8748              GetXX18Scale:
  44+ 8748 3A 11 C3         ld      a,(QAddr)
  45+ 874B DD 6F            ld      ixl,a                 ; save Scale in C
  46+ 874D ED 4B 69 C0      ld      bc,(UBnkDrawCam0xLo)
  47+ 8751 ED 5B 6C C0      ld      de,(UBnkDrawCam0yLo)
  48+ 8755 2A 6F C0         ld      hl,(UBnkDrawCam0zLo)
  49+ 8758              ScalePos:
  50+ 8758 78               ld      a,b
  51+ 8759 B2               or      d
  52+ 875A B4               or      h
  53+ 875B CA 6F 87         jp      z,ScalePosDone
  54+ 875E DD 2C            inc     ixl
  55+ 8760                  ShiftBCRight1
  55+ 8760 CB 38       >			   srl b
  55+ 8762 CB 19       >			   rr  c
  56+ 8764                  ShiftDERight1
  56+ 8764 CB 3A       >			   srl d
  56+ 8766 CB 1B       >			   rr  e
  57+ 8768                  ShiftHLRight1
  57+ 8768 CB 3C       >			   srl h
  57+ 876A CB 1D       >			   rr  l
  58+ 876C C3 58 87         jp      ScalePos
  59+ 876F              ScalePosDone:
  60+ 876F DD 7D            ld      a,ixl
  61+ 8771 32 6B 94         ld      (XX17),a
  62+ 8774 C9               ret
  63+ 8775
  64+ 8775
  65+ 8775              ScaleOrientationXX16:
  66+ 8775              ScaleRotationMatrix:
  67+ 8775                  MODULE  ScaleRotationMatrix
  68+ 8775 06 09        	ld		b,9
  69+ 8777 21 48 C0     	ld		hl,UbnkTransInvRow0x0
  70+ 877A 3A 6B 94     	ld		a,(XX17)
  71+ 877D FE 00        	cp		0
  72+ 877F C8           	ret		z									; no mulitplier then bail out early
  73+ 8780 DD 6F        	ld		ixl,a								; master copy of 2^multiplier
  74+ 8782              ScaleRotationLoop:
  75+ 8782 5E           	ld		e,(hl)
  76+ 8783 23           	inc		hl
  77+ 8784 56           	ld		d,(hl)
  78+ 8785 7A           	ld		a,d
  79+ 8786 E6 80        	and		$80
  80+ 8788 DD 67        	ld		ixh,a								; make a copy for sign purposes
  81+ 878A 7A           	ld		a,d									; we need it back now to strip sign
  82+ 878B E6 7F        	and		SignMask8Bit
  83+ 878D 57           	ld		d,a
  84+ 878E DD 4D        	ld		c,ixl								; get master copy of multiplier
  85+ 8790              ScaleLoop:
  86+ 8790              	ShiftDELeft1
  86+ 8790 CB 23       >			   sla e
  86+ 8792 CB 12       >			   rl  d
  87+ 8794 0D           	dec		c
  88+ 8795 20 F9        	jr		nz,ScaleLoop						; loop until 0
  89+ 8797              .NoMultiply:
  90+ 8797 7A           	ld		a,d
  91+ 8798 DD B4        	or		ixh									; bring sign bit back in to a and
  92+ 879A 77           	ld		(hl),a								; we don;t need to go though d reg as an optimisation
  93+ 879B 2B           	dec		hl
  94+ 879C 73           	ld		(hl),e								; written back DE now
  95+ 879D 23           	inc		hl
  96+ 879E 23           	inc		hl									; on to next byte now
  97+ 879F 10 E1        	djnz	ScaleRotationLoop
  98+ 87A1 C9           	ret
  99+ 87A2                  ENDMODULE
 100+ 87A2
 101+ 87A2              ScaleNodeTo8Bit:								; TODO make signed
 102+ 87A2 ED 4B 79 C0  	ld			bc,(UBnkZScaled)
 103+ 87A6 2A 75 C0     	ld			hl,(UBnkXScaled)
 104+ 87A9 ED 5B 77 C0  	ld			de,(UBnkYScaled)
 105+ 87AD              SetABSbc:
 106+ 87AD 78           	ld			a,b
 107+ 87AE DD 67        	ld			ixh,a
 108+ 87B0 E6 7F        	and			SignMask8Bit
 109+ 87B2 47           	ld			b,a									; bc = ABS bc
 110+ 87B3              SetABShl:
 111+ 87B3 7C           	ld			a,h
 112+ 87B4 DD 6F        	ld			ixl,a
 113+ 87B6 E6 7F        	and			SignMask8Bit
 114+ 87B8 67           	ld			h,a									; hl = ABS hl
 115+ 87B9              SetABSde:
 116+ 87B9 7A           	ld			a,d
 117+ 87BA FD 67        	ld			iyh,a
 118+ 87BC E6 7F        	and			SignMask8Bit
 119+ 87BE 57           	ld			d,a									; de = ABS de
 120+ 87BF              ScaleNodeTo8BitLoop:
 121+ 87BF 78               ld          a,b		                            ; U	\ z hi
 122+ 87C0 B4           	or			h                                   ; XX15+1	\ x hi
 123+ 87C1 B2           	or			d                                   ; XX15+4	\ y hi
 124+ 87C2 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 125+ 87C4                  ShiftHLRight1
 125+ 87C4 CB 3C       >			   srl h
 125+ 87C6 CB 1D       >			   rr  l
 126+ 87C8                  ShiftDERight1
 126+ 87C8 CB 3A       >			   srl d
 126+ 87CA CB 1B       >			   rr  e
 127+ 87CC              	ShiftBCRight1
 127+ 87CC CB 38       >			   srl b
 127+ 87CE CB 19       >			   rr  c
 128+ 87D0 C3 BF 87         jp          ScaleNodeTo8BitLoop
 129+ 87D3              ScaleNodeDone:										; now we have scaled values we have to deal with sign
 130+ 87D3 DD 7C        	ld			a,ixh								; get sign bit and or with b
 131+ 87D5 E6 80        	and			SignOnly8Bit
 132+ 87D7 B0           	or			b
 133+ 87D8 47           	ld			b,a
 134+ 87D9              SignforHL:
 135+ 87D9 DD 7D        	ld			a,ixl								; get sign bit and or with b
 136+ 87DB E6 80        	and			SignOnly8Bit
 137+ 87DD B4           	or			h
 138+ 87DE 67           	ld			h,a
 139+ 87DF              SignforDE:
 140+ 87DF FD 7C        	ld			a,iyh								; get sign bit and or with b
 141+ 87E1 E6 80        	and			SignOnly8Bit
 142+ 87E3 B2           	or			d
 143+ 87E4 57           	ld			d,a
 144+ 87E5              SignsDoneSaveResult:
 145+ 87E5 ED 43 79 C0  	ld			(UBnkZScaled),bc
 146+ 87E9 22 75 C0     	ld			(UBnkXScaled),hl
 147+ 87EC ED 53 77 C0  	ld			(UBnkYScaled),de
 148+ 87F0 78           	ld			a,b
 149+ 87F1 32 63 94     	ld			(varU),a
 150+ 87F4 79           	ld			a,c
 151+ 87F5 32 84 94     	ld			(varT),a
 152+ 87F8 C9           	ret
 153+ 87F9
 154+ 87F9 00 00        varR16			DW	0
 155+ 87FB
 156+ 87FB              TestProjectNodeToScreen:
 157+ 87FB ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 158+ 87FF 79           	ld			a,c                                 ;  so no need for a negative check
 159+ 8800 32 64 94     	ld			(varQ),a		                    ; VarQ = z
 160+ 8803 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
 161+ 8806 CD A3 A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 162+ 8809              ;	ld			(varR16),bc							; store result in R for now TODO move to say D reg
 163+ 8809 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 164+ 880C                  JumpOnBitSet a,7,TestNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 164+ 880C CB 7F       >                        bit 	7,a
 164+ 880E C2 19 88    >                        jp      nz,TestNegativeXPoint
 165+ 8811              TestPositiveXPoint:									; x was positive result
 166+ 8811              ;	ld			bc,(varR16)							; calculated X positision
 167+ 8811 2E 80            ld          l,ScreenCenterX						;
 168+ 8813 26 00            ld          h,0
 169+ 8815 09               add         hl,bc								; hl = Screen Centre + X
 170+ 8816 C3 20 88         jp          TestStoreXPoint
 171+ 8819              TestNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 172+ 8819              ;	ld			bc,(varR16
 173+ 8819 2E 80            ld          l,ScreenCenterX
 174+ 881B 26 00            ld          h,0
 175+ 881D              ;	ld			c,a
 176+ 881D              ;    ld          b,0
 177+ 881D                  ClearCarryFlag
 177+ 881D B7          >                        or a
 178+ 881E ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 179+ 8820              TestStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 180+ 8820 EB               ex          de,hl
 181+ 8821 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 182+ 8824 FD 72 01         ld          (iy+1),d                            ; Update X Point
 183+ 8827              TestProcessYPoint:
 184+ 8827 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
 185+ 882B 79           	ld			a,c
 186+ 882C 32 64 94     	ld			(varQ),a
 187+ 882F              ;    ldCopyByte  varT,varQ                          ; T =>  Q	\ zdist lo
 188+ 882F 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
 189+ 8832 CD A3 A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 190+ 8835              ;	ld			a,c
 191+ 8835              	;ld			(varR),a
 192+ 8835 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 193+ 8838                  JumpOnBitSet a,7,TestNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 193+ 8838 CB 7F       >                        bit 	7,a
 193+ 883A C2 45 88    >                        jp      nz,TestNegativeYPoint
 194+ 883D              TestPositiveYPoint:									; Y is positive so above the centre line
 195+ 883D              ;	ld			a,(varR)							; in fact this code is already 16 bit aware
 196+ 883D 2E 60            ld          l,ScreenCenterY
 197+ 883F              ;	ld			c,a									; TODO DEBUG just added for testing to force 8 bit
 198+ 883F              ;	ld			b,0
 199+ 883F                  ClearCarryFlag
 199+ 883F B7          >                        or a
 200+ 8840 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 201+ 8842 C3 4A 88         jp          TestStoreYPoint
 202+ 8845              TestNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 203+ 8845              ;	ld			a,(varR)
 204+ 8845 2E 60            ld          l,ScreenCenterY
 205+ 8847 26 00            ld          h,0
 206+ 8849 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 207+ 884A              TestStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 208+ 884A EB               ex          de,hl
 209+ 884B FD 73 02         ld          (iy+2),e                            ; Update Y Point
 210+ 884E FD 72 03         ld          (iy+3),d                            ; Update Y Point
 211+ 8851 C9               ret
 212+ 8852
 213+ 8852                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1++8852 21 7B C0     CopyXX12ToXX15:         ld      hl,XX12
   2++8855 11 75 C0                             ld      de,XX15
   3++8858 01 06 00                             ld      bc,6
   4++885B ED B0                                ldir
   5++885D C9                                   ret
   6++885E
   7++885E 21 7B C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8++8861 11 81 C0                             ld      de,XX12Save
   9++8864 01 06 00                             ld      bc,6
  10++8867 ED B0                                ldir
  11++8869 C9                                   ret
  12++886A
  13++886A 21 81 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14++886D 11 7B C0                             ld      de,XX12
  15++8870 01 06 00                             ld      bc,6
  16++8873 ED B0                                ldir
  17++8875 C9                                   ret
  18++8876
  19++8876 21 7B C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20++8879 11 87 C0                             ld      de,XX12Save2
  21++887C 01 06 00                             ld      bc,6
  22++887F ED B0                                ldir
  23++8881 C9                                   ret
  24++8882
  25++8882 21 87 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26++8885 11 7B C0                             ld      de,XX12
  27++8888 01 06 00                             ld      bc,6
  28++888B ED B0                                ldir
  29++888D C9                                   ret
  30++888E
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 214+ 888E
 215+ 888E                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1++888E 21 75 C0     CopyXX15ToXX12:         ld		hl,XX15
   2++8891 11 7B C0                             ld      de,XX12
   3++8894 01 06 00                             ld      bc,6
   4++8897 ED B0                                ldir
   5++8899 C9                                   ret
   6++889A
   7++889A
   8++889A
   9++889A 21 75 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10++889D 11 90 C0                             ld      de,XX15Save
  11++88A0 01 06 00                             ld      bc,6
  12++88A3 ED B0                                ldir
  13++88A5 C9                                   ret
  14++88A6
  15++88A6 21 90 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16++88A9 11 75 C0                             ld      de,XX15
  17++88AC 01 06 00                             ld      bc,6
  18++88AF ED B0                                ldir
  19++88B1 C9                                   ret
  20++88B2
  21++88B2 21 75 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22++88B5 11 98 C0                             ld      de,XX15Save2
  23++88B8 01 06 00                             ld      bc,6
  24++88BB ED B0                                ldir
  25++88BD C9                                   ret
  26++88BE
  27++88BE 21 98 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28++88C1 11 75 C0                             ld      de,XX15
  29++88C4 01 06 00                             ld      bc,6
  30++88C7 ED B0                                ldir
  31++88C9 C9                                   ret
  32++88CA
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 216+ 88CA
 217+ 88CA 00 00        XX12PVarQ			DW 0
 218+ 88CC 00 00        XX12PVarR			DW 0
 219+ 88CE 00 00        XX12PVarS			DW 0
 220+ 88D0 00 00        XX12PVarResult1		DW 0
 221+ 88D2 00 00        XX12PVarResult2		DW 0
 222+ 88D4 00 00        XX12PVarResult3		DW 0
 223+ 88D6 00           XX12PVarSign2		DB 0
 224+ 88D7 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 225+ 88D8 00           XX12PVarSign3		DB 0
 226+ 88D9
 227+ 88D9              ; copy from wiring addhlde un iniv ship data
 228+ 88D9              XX12ProcessCalcHLPlusDESignBC:
 229+ 88D9              ; Combinations validated in ClacHLDEsignedBE.asm
 230+ 88D9              ; calcs HLB + DEC where B and C are signs
 231+ 88D9 78           		ld		a,b										; get HL sign byte
 232+ 88DA CB 7F        		bit		7,a										; is high bit set?
 233+ 88DC 20 12        		jr		nz,XX12AddHLNegative					; if it is then the HL is negative
 234+ 88DE              XX12AddHLPositive:										; At here HL is positive
 235+ 88DE 79           		ld		a,c										; so we check DE as well
 236+ 88DF CB 7F        		bit		7,a
 237+ 88E1 20 03        		jr		nz,XX12HLPosDENeg						; here if HL is negative jump
 238+ 88E3              XX12HLPosDEPos:											; so here we have +HL + +DE
 239+ 88E3 19           		add		hl,de									; which is HL+DE
 240+ 88E4 AF           		xor		a										; and will always return a + sign
 241+ 88E5 C9           		ret
 242+ 88E6              XX12HLPosDENeg:											; here we have +HL + -DE
 243+ 88E6              		ClearCarryFlag									;
 243+ 88E6 B7          >                        or a
 244+ 88E7 ED 52        		sbc		hl,de									; so we do HL - DE
 245+ 88E9 CB 7C        		bit		7,h
 246+ 88EB C2 04 89     		jp		nz,XX12Pt1FixNegResult					; if the result was negative we need a correction
 247+ 88EE AF           		xor		a										; else sign is +ve
 248+ 88EF C9           		ret
 249+ 88F0              XX12AddHLNegative:										; here we enter with -HL
 250+ 88F0 79           		ld		a,c
 251+ 88F1 CB 7F        		bit		7,a
 252+ 88F3 20 0B        		jr		nz,XX12HLNegDENeg						; and now do we have DE as negative
 253+ 88F5              XX12HLNegDEPos:											; here we have -HL + +DE
 254+ 88F5 EB           		ex		de,hl									; so to simplify concept swap DE and HL
 255+ 88F6              		ClearCarryFlag									; to make the calc
 255+ 88F6 B7          >                        or a
 256+ 88F7 ED 52        		sbc		hl,de									; DE - HL
 257+ 88F9 CB 7C        		bit		7,h										; was the result negative
 258+ 88FB C2 04 89     		jp		nz,XX12Pt1FixNegResult					; if so deal with it
 259+ 88FE AF           		xor 	a										; else it is positive
 260+ 88FF C9           		ret
 261+ 8900              XX12HLNegDENeg:											; now we have -HL + -DE
 262+ 8900 19           		add		hl,de									; which we can translate to (HL + DE) * -1
 263+ 8901 3E 80        		ld		a,$80									; this sets the sign i.e. * -1
 264+ 8903 C9           		ret
 265+ 8904              XX12Pt1FixNegResult:	 								; the result of HLcalcDE was negative
 266+ 8904              		NegHL											; so we 2's compliment it back to an absolute value
 266+ 8904 AF          >                xor a
 266+ 8905 95          >                sub l
 266+ 8906 6F          >                ld l,a
 266+ 8907 9F          >                sbc a,a
 266+ 8908 94          >                sub h
 266+ 8909 67          >                ld h,a
 267+ 890A 3E 80        		ld		a,$80									; and set the sign to a negative
 268+ 890C C9           		ret
 269+ 890D
 270+ 890D                                      include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
   1++890D              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2++890D              ; so xx12 = XX15 * XX16 row
   3++890D              XX12ProcessOneRow:
   4++890D              XX12CalcXCell:
   5++890D ED 4B 75 C0          ld		bc,(UBnkXScaled)
   6++8911 5E           		ld		e,(hl)								    ; get orientation ZX
   7++8912 23           		inc		hl
   8++8913 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9++8914 7A           		ld		a,d
  10++8915 A8                   xor     b
  11++8916 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12++8918 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13++891A 78           		ld		a,b                                     ; now make bc abs bc
  14++891B E6 7F        		and		SignMask8Bit
  15++891D 47           		ld		b,a                                     ; bc = abs(bc) now
  16++891E E5           		push	hl
  17++891F 16 00                ld      d,0                                     ; d = value
  18++8921 60           		ld		h,b
  19++8922 69           		ld		l,c
  20++8923 CD 69 A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21++8926 22 D0 88     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22++8929 DD 7C        		ld		a,ixh
  23++892B 32 D7 88     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24++892E E1           		pop		hl
  25++892F              XX12CalcYCell:
  26++892F ED 4B 77 C0          ld		bc,(UBnkYScaled)
  27++8933 23           		inc		hl
  28++8934 5E           		ld		e,(hl)							    	; get orientation ZX
  29++8935 23           		inc		hl
  30++8936 56           		ld		d,(hl)
  31++8937 7A           		ld		a,d
  32++8938 A8                   xor     b
  33++8939 E6 80        		and		SignOnly8Bit
  34++893B DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35++893D 78           		ld		a,b                                     ; now make bc abs bc
  36++893E E6 7F        		and		SignMask8Bit
  37++8940 47           		ld		b,a                                     ; bc = abs(bc) now
  38++8941 E5           		push	hl
  39++8942 16 00                ld      d,0                                     ; d = value
  40++8944 60           		ld		h,b
  41++8945 69           		ld		l,c
  42++8946 CD 69 A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43++8949 22 D2 88     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44++894C DD 7C        		ld		a,ixh
  45++894E 32 D6 88     		ld		(XX12PVarSign2),a					    ; S = sign
  46++8951 E1           		pop		hl
  47++8952              XX12CalcZCell:
  48++8952 ED 4B 79 C0          ld		bc,(UBnkZScaled)
  49++8956 23           		inc		hl
  50++8957 5E           		ld		e,(hl)								    ; get orientation ZX
  51++8958 23           		inc		hl
  52++8959 56           		ld		d,(hl)
  53++895A 7A           		ld		a,d
  54++895B A8                   xor     b
  55++895C E6 80        		and		SignOnly8Bit
  56++895E DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57++8960 78           		ld		a,b                                     ; now make bc abs bc
  58++8961 E6 7F        		and		SignMask8Bit
  59++8963 47           		ld		b,a                                     ; bc = abs(bc) now
  60++8964 16 00                ld      d,0                                     ; d = value
  61++8966 60           		ld		h,b
  62++8967 69           		ld		l,c
  63++8968 CD 69 A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64++896B 22 D4 88     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65++896E DD 7C        		ld		a,ixh
  66++8970 32 D8 88     		ld		(XX12PVarSign3),a					    ; S = sign
  67++8973              XX12CalcCellResult:
  68++8973 2A D0 88     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69++8976 ED 5B D2 88  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70++897A ED 4B D6 88  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71++897E              XX12MSBOnly:
  72++897E 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73++897F 5A           		ld		e,d									    ; for both results
  74++8980 AF           		xor		a									    ;
  75++8981 67           		ld		h,a									    ;
  76++8982 57           		ld		d,a									    ; so set high byte to 0
  77++8983 CD 6A CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78++8986 47           		ld		b,a									    ; move sign into b ready for next calc
  79++8987 3A D8 88     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80++898A 4F           		ld		c,a									    ; goes into c to align with DE
  81++898B ED 5B D4 88  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82++898F 5A           		ld		e,d                                     ; d = result /256
  83++8990 16 00        		ld		d,0									    ; and only us high byte
  84++8992 CD 6A CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85++8995 C9           		ret											    ; hl = result, a = sign
  86++8996              								    ; hl = result, a = sign
  87++8996
  88++8996              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89++8996              ;...X cell
  90++8996 21 48 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91++8999 CD 0D 89             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92++899C 47           		ld		b,a                                 ; b = sign
  93++899D 7C           		ld		a,h                                 ; a = high byte
  94++899E B0           		or		b
  95++899F 32 7C C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96++89A2 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97++89A3 32 7B C0             ld      (UBnkXX12xLo),a						; that is result done for
  98++89A6              ;...Y cell
  99++89A6 21 50 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100++89A9 CD 0D 89             call    XX12ProcessOneRow
 101++89AC 47           		ld		b,a
 102++89AD 7C           		ld		a,h
 103++89AE              ;		ld		a,l
 104++89AE B0           		or		b
 105++89AF 32 7E C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106++89B2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107++89B3 32 7D C0             ld      (UBnkXX12yLo),a						; that is result done for
 108++89B6              ;...Z cell
 109++89B6 21 58 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110++89B9 CD 0D 89             call    XX12ProcessOneRow
 111++89BC 47           		ld		b,a
 112++89BD 7C                   ld		a,h
 113++89BE              ;		ld		a,l
 114++89BE B0           		or		b
 115++89BF 32 80 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116++89C2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117++89C3 32 7F C0             ld      (UBnkXX12zLo),a						; that is result done for
 118++89C6 C9                   ret
 119++89C7
 120++89C7              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121++89C7              ;...X cell
 122++89C7 21 48 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123++89CA CD 0D 89             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124++89CD 47           		ld		b,a                                 ; b = sign
 125++89CE 7C           		ld		a,h                                 ; a = high byte
 126++89CF B0           		or		b
 127++89D0 32 7C C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128++89D3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129++89D4 32 7B C0             ld      (UBnkXX12xLo),a						; that is result done for
 130++89D7              ;...Y cell
 131++89D7 21 50 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132++89DA CD 0D 89             call    XX12ProcessOneRow
 133++89DD 47           		ld		b,a
 134++89DE 7C           		ld		a,h
 135++89DF              ;		ld		a,l
 136++89DF B0           		or		b
 137++89E0 32 7E C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138++89E3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139++89E4 32 7D C0             ld      (UBnkXX12yLo),a						; that is result done for
 140++89E7              ;...Z cell
 141++89E7 21 58 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142++89EA CD 0D 89             call    XX12ProcessOneRow
 143++89ED 47           		ld		b,a
 144++89EE 7C                   ld		a,h
 145++89EF              ;		ld		a,l
 146++89EF B0           		or		b
 147++89F0 32 80 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148++89F3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149++89F4 32 7F C0             ld      (UBnkXX12zLo),a						; that is result done for
 150++89F7 C9                   ret
 151++89F8
 152++89F8              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153++89F8              ;...X cell
 154++89F8 21 30 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155++89FB CD 0D 89             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156++89FE 47           		ld		b,a                                 ; b = sign
 157++89FF 7C           		ld		a,h                                 ; a = high byte
 158++8A00 B0           		or		b
 159++8A01 32 7C C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160++8A04 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161++8A05 32 7B C0             ld      (UBnkXX12xLo),a						; that is result done for
 162++8A08              ;...Y cell
 163++8A08 21 36 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164++8A0B CD 0D 89             call    XX12ProcessOneRow
 165++8A0E 47           		ld		b,a
 166++8A0F 7C           		ld		a,h
 167++8A10              ;		ld		a,l
 168++8A10 B0           		or		b
 169++8A11 32 7E C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170++8A14 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171++8A15 32 7D C0             ld      (UBnkXX12yLo),a						; that is result done for
 172++8A18              ;...Z cell
 173++8A18 21 3C C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174++8A1B CD 0D 89             call    XX12ProcessOneRow
 175++8A1E 47           		ld		b,a
 176++8A1F 7C                   ld		a,h
 177++8A20              ;		ld		a,l
 178++8A20 B0           		or		b
 179++8A21 32 80 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180++8A24 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181++8A25 32 7F C0             ld      (UBnkXX12zLo),a						; that is result done for
 182++8A28 C9                   ret
# file closed: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
 271+ 8A29
 272+ 8A29              TransposeXX12ByShipToXX15:
 273+ 8A29 2A 7B C0             ld		hl,(UBnkXX12xLo)					; get X into HL
 274+ 8A2C 7C           		ld		a,h			                        ; get XX12 Sign
 275+ 8A2D E6 80        		and		$80									; check sign bit on high byte
 276+ 8A2F 47           		ld		b,a									; and put it in of 12xlo in b
 277+ 8A30                      ;110921 debugld      h,0
 278+ 8A30 7C                   ld      a,h
 279+ 8A31 E6 7F                and     $7F
 280+ 8A33 67                   ld      h,a
 281+ 8A34                      ;110921 debugld      h,0
 282+ 8A34 ED 5B 0C C0  		ld		de,(UBnKxlo)						;
 283+ 8A38 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
 284+ 8A3B E6 80        		and		$80									; make sure we only have bit 7
 285+ 8A3D 4F           		ld		c,a									; and put sign of unkxsgn c
 286+ 8A3E CD 6A CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 287+ 8A41 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 288+ 8A42 67           		ld		h,a
 289+ 8A43 22 75 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
 290+ 8A46              ; ..................................
 291+ 8A46 2A 7D C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
 292+ 8A49 7C           		ld		a,h
 293+ 8A4A E6 80        		and		$80
 294+ 8A4C 47           		ld		b,a
 295+ 8A4D                      ;110921 debugld      h,0
 296+ 8A4D 7C                   ld      a,h
 297+ 8A4E E6 7F                and     $7F
 298+ 8A50 67                   ld      h,a
 299+ 8A51                      ;110921 debugld      h,0
 300+ 8A51 ED 5B 0F C0  		ld		de,(UBnKylo)
 301+ 8A55 3A 11 C0     		ld		a,(UBnKysgn)
 302+ 8A58 E6 80        		and		$80									; make sure we only have bit 7
 303+ 8A5A 4F           		ld		c,a
 304+ 8A5B CD 6A CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 305+ 8A5E B4           		or		h									; combine sign in A with H
 306+ 8A5F 67           		ld		h,a
 307+ 8A60 22 77 C0     		ld		(UBnkYScaled),hl
 308+ 8A63              ; ..................................
 309+ 8A63 2A 7F C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
 310+ 8A66 7C           		ld		a,h
 311+ 8A67 E6 80        		and		$80
 312+ 8A69 47           		ld		b,a
 313+ 8A6A                      ;110921 debugld      h,0
 314+ 8A6A 7C                   ld      a,h
 315+ 8A6B E6 7F                and     $7F
 316+ 8A6D 67                   ld      h,a
 317+ 8A6E                      ;110921 debugld      h,0
 318+ 8A6E ED 5B 12 C0  		ld		de,(UBnKzlo)
 319+ 8A72 3A 14 C0     		ld		a,(UBnKzsgn)
 320+ 8A75 E6 80        		and		$80									; make sure we only have bit 7
 321+ 8A77 4F           		ld		c,a
 322+ 8A78 CD 6A CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 323+ 8A7B B4           		or		h									; combine sign in A with H
 324+ 8A7C 67           		ld		h,a
 325+ 8A7D CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 326+ 8A7F 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
 327+ 8A81 E6 7F                and     $7F                                 ; a = value unsigned
 328+ 8A83 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 329+ 8A85 7D                   ld      a,l                                 ; get low byte now
 330+ 8A86              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
 330+ 8A86 FE 04       >                        cp      4
 330+ 8A88 DA 97 8A    >                        jp		c, ClampZto4
 331+ 8A8B              NoClampZto4:
 332+ 8A8B 22 79 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
 333+ 8A8E 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 334+ 8A8F 32 84 94             ld      (varT),a
 335+ 8A92 7C           		ld		a,h
 336+ 8A93 32 63 94             ld      (varU),a
 337+ 8A96 C9           		ret
 338+ 8A97              ClampZto4:											; This is where we limit 4 to a minimum of 4
 339+ 8A97 21 04 00     		ld		hl,4
 340+ 8A9A 22 79 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
 341+ 8A9D 7D           		ld		a,l
 342+ 8A9E 32 84 94             ld      (varT),a                            ;                                                                           ;;;
 343+ 8AA1 7C           		ld		a,h
 344+ 8AA2 32 63 94             ld      (varU),a 						; compatibility for now
 345+ 8AA5 C9           		ret
 346+ 8AA6
 347+ 8AA6
 348+ 8AA6              RescaleXXValue:
 349+ 8AA6 5E           		ld		e,(hl)
 350+ 8AA7 23           		inc		hl
 351+ 8AA8 56           		ld		d,(hl)
 352+ 8AA9 7A           		ld		a,d
 353+ 8AAA E6 80        		and		$80
 354+ 8AAC 47           		ld		b,a
 355+ 8AAD 7A           		ld		a,d
 356+ 8AAE E6 7F        		and		$7F
 357+ 8AB0 4F           		ld		c,a
 358+ 8AB1 7B           		ld		a,e
 359+ 8AB2 CB 7F        		bit		7,a
 360+ 8AB4 CA B8 8A     		jp		z,XX15XLT128
 361+ 8AB7              XX15XGT128:
 362+ 8AB7 0C           		inc		c
 363+ 8AB8              XX15XLT128:
 364+ 8AB8 59           		ld		e,c
 365+ 8AB9 50           		ld		d,b
 366+ 8ABA 72           		ld		(hl),d
 367+ 8ABB 2B           		dec		hl
 368+ 8ABC 73           		ld		(hl),e
 369+ 8ABD 23           		inc		hl
 370+ 8ABE 23           		inc		hl
 371+ 8ABF C9           		ret
 372+ 8AC0
 373+ 8AC0
 374+ 8AC0              NegZeroBodge:
 375+ 8AC0 21 21 C0         ld     hl,UBnkrotmatNosevX
 376+ 8AC3 06 09            ld     b,9
 377+ 8AC5              NegBodgeLoop:
 378+ 8AC5 7E               ld      a,(hl)
 379+ 8AC6 23               inc     hl
 380+ 8AC7 FE 00            cp      0
 381+ 8AC9 20 07            jr      nz,NegBodgeSkip1
 382+ 8ACB 7E               ld      a,(hl)
 383+ 8ACC FE 80            cp      $80
 384+ 8ACE 20 02            jr      nz,NegBodgeSkip1
 385+ 8AD0 AF               xor     a
 386+ 8AD1 77               ld      (hl),a
 387+ 8AD2              NegBodgeSkip1:
 388+ 8AD2 23               inc     hl
 389+ 8AD3 10 F0            djnz    NegBodgeLoop
 390+ 8AD5 C9               ret
 391+ 8AD6
 392+ 8AD6 B0           RollLoop: DB $B0
 393+ 8AD7
 394+ 8AD7              TestRender:
 395+ 8AD7              	;include "Tests/PlotTest2.asm"
 396+ 8AD7              ; Initialise banks is include in main initialise subrotines now
 397+ 8AD7              ; Prototype for .TITLE
 398+ 8AD7              TestLines:
 399+ 8AD7              ;include "Tests/LineHLtoDETest.asm"
 400+ 8AD7              TestCalcs:
 401+ 8AD7
 402+ 8AD7              ;include "Tests/CalcHLDEsignedBE.asm"
 403+ 8AD7
 404+ 8AD7
 405+ 8AD7 3E 5A        	ld	a,90
 406+ 8AD9 4F           	ld	c,a
 407+ 8ADA 16 6C        	ld	d,108
 408+ 8ADC CD A2 A7     	call AequAdivDmul96
 409+ 8ADF
 410+ 8ADF 3E 5A        	ld	a,90
 411+ 8AE1 06 6C        	ld	b,108
 412+ 8AE3 21 00 24     	ld	hl,$2400
 413+ 8AE6 22 65 94     	ld	(varR),hl
 414+ 8AE9 CD 16 AA     	call	TidySub1
 415+ 8AEC
 416+ 8AEC              	;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 417+ 8AEC
 418+ 8AEC              TestTIDY:
 419+ 8AEC 21 00 00     	ld	hl,$0000
 420+ 8AEF 22 21 C0     	ld	(UBnkrotmatNosevX),hl
 421+ 8AF2 21 00 8D     	ld	hl,$8D00
 422+ 8AF5 22 23 C0     	ld	(UBnkrotmatNosevY),hl
 423+ 8AF8 21 00 E0     	ld	hl,$E000
 424+ 8AFB 22 25 C0     	ld	(UBnkrotmatNosevZ),hl
 425+ 8AFE
 426+ 8AFE 21 00 00     	ld	hl,$0000
 427+ 8B01 22 1B C0     	ld	(UBnkrotmatRoofvX),hl
 428+ 8B04 21 00 B4     	ld	hl,$B400
 429+ 8B07 22 1D C0     	ld	(UBnkrotmatRoofvY),hl
 430+ 8B0A 21 00 CF     	ld	hl,$CF00
 431+ 8B0D 22 1F C0     	ld	(UBnkrotmatRoofvZ),hl
 432+ 8B10
 433+ 8B10 21 00 28     	ld	hl,$2800
 434+ 8B13 22 15 C0     	ld	(UBnkrotmatSidevX),hl
 435+ 8B16 21 00 00     	ld	hl,$0000
 436+ 8B19 22 17 C0     	ld	(UBnkrotmatSidevY),hl
 437+ 8B1C 21 00 00     	ld	hl,$0000
 438+ 8B1F 22 19 C0     	ld	(UBnkrotmatSidevZ),hl
 439+ 8B22 CD 1C 8C     	call	TestPitchPos
 440+ 8B25              ;	call	TestRollPos
 441+ 8B25              ;	call	TIDY
 442+ 8B25
 443+ 8B25
 444+ 8B25 21 00 00     	ld	hl,$0
 445+ 8B28 22 21 C0     	ld	(UBnkrotmatNosevX),hl
 446+ 8B2B 21 CE 63     	ld	hl,$63CE
 447+ 8B2E 22 23 C0     	ld	(UBnkrotmatNosevY),hl
 448+ 8B31 21 C6 1D     	ld	hl,$1DC6
 449+ 8B34 22 25 C0     	ld	(UBnkrotmatNosevZ),hl
 450+ 8B37
 451+ 8B37 21 00 00     	ld	hl,$0
 452+ 8B3A 22 1B C0     	ld	(UBnkrotmatRoofvX),hl
 453+ 8B3D 21 7D 64     	ld	hl,$647D
 454+ 8B40 22 1D C0     	ld	(UBnkrotmatRoofvY),hl
 455+ 8B43 21 9B 23     	ld	hl,$239B
 456+ 8B46 22 1F C0     	ld	(UBnkrotmatRoofvZ),hl
 457+ 8B49
 458+ 8B49 21 00 60     	ld	hl,$6000
 459+ 8B4C 22 15 C0     	ld	(UBnkrotmatSidevX),hl
 460+ 8B4F 21 00 00     	ld	hl,$0
 461+ 8B52 22 17 C0     	ld	(UBnkrotmatSidevY),hl
 462+ 8B55 21 00 00     	ld	hl,$0
 463+ 8B58 22 19 C0     	ld	(UBnkrotmatSidevZ),hl
 464+ 8B5B CD 66 AA     	call	TIDY
 465+ 8B5E
 466+ 8B5E
 467+ 8B5E              TestRollLoop:
 468+ 8B5E 3A D6 8A         ld      a,(RollLoop)
 469+ 8B61 3D               dec     a
 470+ 8B62                  JumpIfALTNusng $40 , ItsRoll
 470+ 8B62 FE 40       >                        cp      $40
 470+ 8B64 DA 70 8B    >                        jp		c, ItsRoll
 471+ 8B67 32 D6 8A         ld      (RollLoop),a
 472+ 8B6A CD 1C 8C       	call	TestPitchPos
 473+ 8B6D C3 86 8B         jp     SkipTidyUp
 474+ 8B70              ItsRoll;
 475+ 8B70 FE 00            cp      0
 476+ 8B72 20 0B            jr      nz,DontReset
 477+ 8B74 3E 60            ld      a,$60
 478+ 8B76 32 D6 8A         ld      (RollLoop),a
 479+ 8B79 CD E2 8B         call    TestRollPos
 480+ 8B7C C3 86 8B         jp      SkipTidyUp
 481+ 8B7F              DontReset
 482+ 8B7F 32 D6 8A         ld      (RollLoop),a
 483+ 8B82 CD E2 8B         call    TestRollPos
 484+ 8B85 C9               ret
 485+ 8B86
 486+ 8B86              SkipTidyUp:
 487+ 8B86
 488+ 8B86
 489+ 8B86
 490+ 8B86 00 00        DebugPoint: DW 0
 491+ 8B88
 492+ 8B88              SubColor1:
 493+ 8B88 7C           	ld		a,h
 494+ 8B89 D6 1F        	sub		$1F
 495+ 8B8B 67           	ld		h,a
 496+ 8B8C C9           	ret
 497+ 8B8D              SubColor2:
 498+ 8B8D 7C           	ld		a,h
 499+ 8B8E D6 2F        	sub		$2F
 500+ 8B90 67           	ld		h,a
 501+ 8B91 C9           	ret
 502+ 8B92
 503+ 8B92                  ; V1 /512 => Part 1 = V1 - (1 /512) ; Oart 2 = V2 / 16 Answer = p1 + p2
 504+ 8B92
 505+ 8B92              SetupShip:
 506+ 8B92 47               ld  b,a
 507+ 8B93 CB 47            bit  0,a
 508+ 8B95 28 0B            jr   z,ShipRoot
 509+ 8B97 FE 05            cp  5
 510+ 8B99 28 14            jr  z,ShipUp
 511+ 8B9B FE 03            cp  3
 512+ 8B9D 28 23            jr  z,ShipSide
 512+ 8B9F
 513+ 8B9F 18 31            jr  ShipNose
 514+ 8BA1 C9               ret
 515+ 8BA2
 516+ 8BA2              ShipRoot:
 517+ 8BA2 21 00 00         ld hl,0
 518+ 8BA5 22 75 C0         ld (UBnkXScaled),hl
 519+ 8BA8 22 77 C0         ld (UBnkYScaled),hl
 520+ 8BAB 22 79 C0         ld (UBnkZScaled),hl
 521+ 8BAE C9               ret
 522+ 8BAF
 523+ 8BAF              ShipUp:
 524+ 8BAF 21 00 00         ld hl,0
 525+ 8BB2 22 75 C0         ld (UBnkXScaled),hl
 526+ 8BB5 21 14 00         ld hl,20
 527+ 8BB8 22 77 C0         ld (UBnkYScaled),hl
 528+ 8BBB 21 00 00         ld hl,0
 529+ 8BBE 22 79 C0         ld (UBnkZScaled),hl
 530+ 8BC1 C9               ret
 531+ 8BC2
 532+ 8BC2              ShipSide:
 533+ 8BC2 21 14 00         ld hl,20
 534+ 8BC5 22 75 C0         ld (UBnkXScaled),hl
 535+ 8BC8 21 00 00         ld hl,0
 536+ 8BCB 22 77 C0         ld (UBnkYScaled),hl
 537+ 8BCE 22 79 C0         ld (UBnkZScaled),hl
 538+ 8BD1 C9               ret
 539+ 8BD2
 540+ 8BD2              ShipNose:
 541+ 8BD2 21 00 00         ld hl,0
 542+ 8BD5 22 75 C0         ld (UBnkXScaled),hl
 543+ 8BD8 22 77 C0         ld (UBnkYScaled),hl
 544+ 8BDB 21 14 00         ld hl,20
 545+ 8BDE 22 79 C0         ld (UBnkZScaled),hl
 546+ 8BE1 C9               ret
 547+ 8BE2
 548+ 8BE2              TestRollPos:
 549+ 8BE2 21 15 C0     	ld	hl,UBnkrotmatSidevX
 550+ 8BE5 22 F2 93     	ld	(varAxis1),hl
 551+ 8BE8 21 17 C0     	ld	hl,UBnkrotmatSidevY
 552+ 8BEB 22 F4 93     	ld	(varAxis2),hl
 553+ 8BEE AF           	xor	a
 554+ 8BEF 32 7A 94     	ld	(varRAT2),a
 555+ 8BF2 CD 2F CC     	call MVS5XRotateXAxis
 556+ 8BF5 21 1B C0     	ld	hl,UBnkrotmatRoofvX
 557+ 8BF8 22 F2 93     	ld	(varAxis1),hl
 558+ 8BFB 21 1D C0     	ld	hl,UBnkrotmatRoofvY
 559+ 8BFE 22 F4 93     	ld	(varAxis2),hl
 560+ 8C01 AF           	xor	a
 561+ 8C02 32 7A 94     	ld	(varRAT2),a
 562+ 8C05 CD 2F CC     	call MVS5XRotateXAxis
 563+ 8C08 21 21 C0     	ld	hl,UBnkrotmatNosevX
 564+ 8C0B 22 F2 93     	ld	(varAxis1),hl
 565+ 8C0E 21 23 C0     	ld	hl,UBnkrotmatNosevY
 566+ 8C11 22 F4 93     	ld	(varAxis2),hl
 567+ 8C14 AF           	xor	a
 568+ 8C15 32 7A 94     	ld	(varRAT2),a
 569+ 8C18 CD 2F CC     	call MVS5XRotateXAxis
 570+ 8C1B C9           	ret
 571+ 8C1C
 572+ 8C1C              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 573+ 8C1C              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 574+ 8C1C
 575+ 8C1C              TestPitchPos:
 576+ 8C1C 21 17 C0         ld	hl,UBnkrotmatSidevY
 577+ 8C1F 22 F2 93         ld	(varAxis1),hl
 578+ 8C22 21 19 C0         ld	hl,UBnkrotmatSidevZ
 579+ 8C25 22 F4 93         ld	(varAxis2),hl
 580+ 8C28 AF               xor	a
 581+ 8C29 32 7A 94         ld	(varRAT2),a
 582+ 8C2C CD 2F CC         call MVS5XRotateXAxis
 583+ 8C2F              ; Do Y
 584+ 8C2F 21 1D C0     	ld	hl,UBnkrotmatRoofvY
 585+ 8C32 22 F2 93     	ld	(varAxis1),hl
 586+ 8C35 21 1F C0     	ld	hl,UBnkrotmatRoofvZ
 587+ 8C38 22 F4 93     	ld	(varAxis2),hl
 588+ 8C3B AF           	xor	a
 589+ 8C3C 32 7A 94     	ld	(varRAT2),a
 590+ 8C3F CD 2F CC     	call MVS5XRotateXAxis
 591+ 8C42              ; Do Z
 592+ 8C42 21 23 C0     	ld	hl,UBnkrotmatNosevY
 593+ 8C45 22 F2 93     	ld	(varAxis1),hl
 594+ 8C48 21 25 C0     	ld	hl,UBnkrotmatNosevZ
 595+ 8C4B 22 F4 93     	ld	(varAxis2),hl
 596+ 8C4E AF           	xor	a
 597+ 8C4F 32 7A 94     	ld	(varRAT2),a
 598+ 8C52 CD 2F CC     	call MVS5XRotateXAxis
 599+ 8C55 C9           	ret
 600+ 8C56
 601+ 8C56
 602+ 8C56              TestReplot:
 603+ 8C56 3A 07 C3         ld      a,(VertexCtX6Addr)                  ; get Hull byte#8 = number of vertices *6                                   ;;;
 604+ 8C59 4F               ld      c,a									; XX20 also c = number of vertices * 6 (or XX20)
 605+ 8C5A 16 06            ld      d,6
 606+ 8C5C CD D3 A3         call    asm_div8                            ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 607+ 8C5F 41               ld      b,c									; c = number of vertices
 608+ 8C60 FD 21 BF C0  	ld		iy,UBnkNodeArray
 609+ 8C64              RePointLoop:
 610+ 8C64 C5           	push	bc
 611+ 8C65 FD E5        	push	iy
 612+ 8C67 FD 7E 00     	ld		a,(iy+0)
 613+ 8C6A 4F           	ld		c,a
 614+ 8C6B FD 7E 02     	ld		a,(iy+2)
 615+ 8C6E 47           	ld		b,a
 616+ 8C6F 26 DF        	ld 		h,$DF
 617+ 8C71 FD 7E 01     	ld		a,(iy+1)
 618+ 8C74 57           	ld		d,a
 619+ 8C75 FD 7E 03     	ld		a,(iy+3)
 620+ 8C78 5F           	ld		e,a
 621+ 8C79 B2           	or		d
 622+ 8C7A 28 0C        	jr		z,RePlotAsIs
 623+ 8C7C 7A           	ld 		a,d
 624+ 8C7D FE 00        	cp		0
 625+ 8C7F C4 88 8B     	call	nz,SubColor1
 626+ 8C82 7A           	ld 		a,d
 627+ 8C83 FE 00        	cp		0
 628+ 8C85 C4 88 8B     	call	nz,SubColor1
 629+ 8C88              RePlotAsIs:
 630+ 8C88 7C           	ld		a,h
 631+ 8C89              	MMUSelectLayer2
 631+ 8C89 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 632+ 8C8D CD FF E0     	call    l2_plot_pixel
 633+ 8C90 E1           	pop		hl
 634+ 8C91 3E 04        	ld		a,4
 635+ 8C93 ED 31        	add		hl,a
 636+ 8C95 E5           	push	hl
 637+ 8C96 FD E1        	pop		iy								; this is very expensive need to optimise TODO
 638+ 8C98 C1           	pop		bc
 639+ 8C99 10 C9        	djnz	RePointLoop
 640+ 8C9B C9           	ret
 641+ 8C9C
 642+ 8C9C                  ;ProcessFaceNormDebug:
 643+ 8C9C              ;    push    hl
 644+ 8C9C              ;    push    bc
 645+ 8C9C              ;    push    de
 646+ 8C9C              ;    push    ix
 647+ 8C9C              ;    push    iy
 648+ 8C9C              ;    ld      hl,UBnkHullNormals
 649+ 8C9C              ;    call    CopyFaceToXX12
 650+ 8C9C              ;    call    CopyXX15ToXX15Save
 651+ 8C9C              ;    call    CopyXX12ToXX15
 652+ 8C9C              ;    call    RotateXX15ByTransMatXX16
 653+ 8C9C              ;    call    CopyXX15ToXX12
 654+ 8C9C              ;    call    CopyXX15SaveToXX15
 655+ 8C9C              ;    call    DotproductXX12XX15
 656+ 8C9C              ;    ld      a,(varS)
 657+ 8C9C              ;    JumpOnBitClear a,7,ItsGreen
 658+ 8C9C              ;
 659+ 8C9C              ;    ld      a,193
 660+ 8C9C              ;    jp      DoPlotNorm
 661+ 8C9C              ;ItsGreen:
 662+ 8C9C              ;	ld		a,28
 663+ 8C9C              ;DoPlotNorm:
 664+ 8C9C              ;    pop     iy
 665+ 8C9C              ;    pop     ix
 666+ 8C9C              ;    pop     de
 667+ 8C9C              ;    pop     bc
 668+ 8C9C              ;    pop     hl
 669+ 8C9C              ;    ret
 670+ 8C9C              ;
 671+ 8C9C              ;ProcessNormalLine:
 672+ 8C9C              ;    push    hl
 673+ 8C9C              ;    push    bc
 674+ 8C9C              ;    push    de
 675+ 8C9C              ;    push    ix
 676+ 8C9C              ;    push    iy
 677+ 8C9C              ;;    call    CopyXX15ToXX15Save                                      ; save current XX15
 678+ 8C9C              ;    ld      hl,UBnkHullNormals
 679+ 8C9C              ;    call    CopyFaceToXX15                                          ;        Get Face data into XX12
 680+ 8C9C              ;  ;  call    CopyXX12ToXX15
 681+ 8C9C              ;  ; ld      a,(QAddr)
 682+ 8C9C              ;  ;  xor       a
 683+ 8C9C              ;  ;  ld      (XX17),a
 684+ 8C9C              ;  ;  call    ScaleNormal
 685+ 8C9C              ;	ld		a,(UBnkXScaledSign)
 686+ 8C9C              ;	call    XX12EquNodeDotOrientation
 687+ 8C9C              ;    ld      a,(UBnkXX12zSign)
 688+ 8C9C              ;    ld      (VarBackface),a
 689+ 8C9C              ;    call    CopyXX12ToXX12Save
 690+ 8C9C              ;	call    TransposeXX12ByShipToXX15
 691+ 8C9C              ;    call    ScaleNodeTo8Bit
 692+ 8C9C              ;    call    CopyXX15ToXX12
 693+ 8C9C              ;    call    CopyXX12ToXX12Save2
 694+ 8C9C              ;    call    CopyXX15SaveToXX15 ; Copy from previous
 695+ 8C9C              ;    call    CopyXX12SaveToXX12
 696+ 8C9C              ;    ld      a,1
 697+ 8C9C              ;    ld      (XX17),a
 698+ 8C9C              ;    call    ScaleNormal
 699+ 8C9C              ;   ; call    DotproductXX12XX15
 700+ 8C9C              ;    ld      a,(VarBackface)
 701+ 8C9C              ;    JumpOnBitClear a,7,PlotRed
 702+ 8C9C              ;    JumpIfALTNUsng 51,PlotRed
 703+ 8C9C              ;PlotGreen:
 704+ 8C9C              ;    ld      a,$7C
 705+ 8C9C              ;    jp      ReadyToDrawLine
 706+ 8C9C              ;PlotRed:
 707+ 8C9C              ;    ld      a,$E0
 708+ 8C9C              ;ReadyToDrawLine:
 709+ 8C9C              ;    ld      (line_gfx_colour),a
 710+ 8C9C              ;    call    CopyXX12Save2ToXX12
 711+ 8C9C              ;    call    CopyXX12ToXX15
 712+ 8C9C              ;    ld		iy,UBnkNodeArray2
 713+ 8C9C              ;    call    TestProjectNodeToScreen
 714+ 8C9C              ;    ld		a,(iy+0)
 715+ 8C9C              ;	ld		e,a
 716+ 8C9C              ;	ld		a,(iy+2)
 717+ 8C9C              ;	ld		d,a
 718+ 8C9C              ;    ld      hl,(DebugPoint)
 719+ 8C9C              ;	MMUSelectLayer2
 720+ 8C9C              ;
 721+ 8C9C              ;	call    LineHLtoDE
 722+ 8C9C              ;
 723+ 8C9C              ;Skipit:
 724+ 8C9C              ;    pop     iy
 725+ 8C9C              ;
 726+ 8C9C              ;    pop     ix
 727+ 8C9C              ;    pop     de
 728+ 8C9C              ;    pop     bc
 729+ 8C9C              ;    pop     hl
 730+ 8C9C              ;    ret
 731+ 8C9C
# file closed: ./ModelRender/testdrawing.asm
 849  8C9C                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8C9C              ;note: DIV16Amul256dCUNDOC as per
   2+ 8C9C              ;                                   BC = A0
   3+ 8C9C              ;                                   DE = 0C
   4+ 8C9C              ;                                   so BC = a * 256 / C
   5+ 8C9C
   6+ 8C9C              ; We can cheat here, Speed is always 0 or positive
   7+ 8C9C              ; z postion will always be positive if we can see it
   8+ 8C9C
   9+ 8C9C EB           InitStarAtHL:           ex      de,hl
  10+ 8C9D CD 60 98                             call    doRND
  11+ 8CA0 EB                                   ex      de,hl
  12+ 8CA1 F6 08                                or      8
  13+ 8CA3 77                                   ld      (hl),a
  14+ 8CA4 E6 7F                                and     $7F
  15+ 8CA6 23                                   inc     hl
  16+ 8CA7 77                                   ld      (hl),a
  17+ 8CA8 EB                                   ex      de,hl
  18+ 8CA9 CD 60 98                             call    doRND
  19+ 8CAC EB                                   ex      de,hl
  20+ 8CAD 0F                                   rrca
  21+ 8CAE E6 80                                and     $80
  22+ 8CB0 B6                                   or      (hl)
  23+ 8CB1 77                                   ld      (hl),a
  24+ 8CB2 23                                   inc     hl
  25+ 8CB3 EB                                   ex      de,hl
  26+ 8CB4 CD 60 98                             call    doRND
  27+ 8CB7 EB                                   ex      de,hl
  28+ 8CB8 F6 04                                or      4
  29+ 8CBA 77                                   ld      (hl),a
  30+ 8CBB 23                                   inc     hl
  31+ 8CBC E6 7F                                and     $7F
  32+ 8CBE 77                                   ld      (hl),a
  33+ 8CBF EB                                   ex      de,hl
  34+ 8CC0 CD 60 98                             call    doRND
  35+ 8CC3 EB                                   ex      de,hl
  36+ 8CC4 0F                                   rrca
  37+ 8CC5 E6 80                                and     $80
  38+ 8CC7 B6                                   or      (hl)
  39+ 8CC8 77                                   ld      (hl),a
  40+ 8CC9 23                                   inc     hl
  41+ 8CCA EB                                   ex      de,hl
  42+ 8CCB CD 60 98                             call    doRND
  43+ 8CCE EB                                   ex      de,hl
  44+ 8CCF F6 90                                or      144
  45+ 8CD1 77                                   ld      (hl),a
  46+ 8CD2 23                                   inc     hl
  47+ 8CD3 F6 70                                or      %01110000
  48+ 8CD5 E6 7F                                and     $7f     ; bodge
  49+ 8CD7 77                                   ld      (hl),a
  50+ 8CD8 23                                   inc     hl
  51+ 8CD9 C9                                   ret
  52+ 8CDA
  53+ 8CDA              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8CDA 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8CDB E6 80                                and     SignOnly8Bit
  56+ 8CDD 47                                   ld      b,a                         ;save sign bit in b
  57+ 8CDE AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8CDF                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8CDF FA 0D 8D    >                        jp		m, .SUBHLDEOppSGN
  59+ 8CE2 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8CE3 B2                                   or      d
  61+ 8CE4                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8CE4 FA EE 8C    >                        jp		m, .SUBHLDESameNeg
  62+ 8CE7 B7                                   or      a
  63+ 8CE8 ED 52                                sbc     hl,de
  64+ 8CEA                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8CEA FA 01 8D    >                        jp		m, .SUBHLDESameOvrFlw
  65+ 8CED C9                                   ret
  66+ 8CEE 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8CEF E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8CF1 67                                   ld      h,a
  69+ 8CF2 7A                                   ld      a,d
  70+ 8CF3 E6 7F                                and     SignMask8Bit
  71+ 8CF5 57                                   ld      d,a
  72+ 8CF6 B7                                   or      a
  73+ 8CF7 ED 52                                sbc     hl,de
  74+ 8CF9                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8CF9 FA 01 8D    >                        jp		m, .SUBHLDESameOvrFlw
  75+ 8CFC 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8CFD F6 80                                or      SignOnly8Bit
  77+ 8CFF 67                                   ld      h,a
  78+ 8D00 C9                                   ret
  79+ 8D01              .SUBHLDESameOvrFlw:     NegHL
  79+ 8D01 AF          >                xor a
  79+ 8D02 95          >                sub l
  79+ 8D03 6F          >                ld l,a
  79+ 8D04 9F          >                sbc a,a
  79+ 8D05 94          >                sub h
  79+ 8D06 67          >                ld h,a
  80+ 8D07 78                                   ld      a,b
  81+ 8D08 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8D0A B4                                   or      h
  83+ 8D0B 67                                   ld      h,a                         ; recover sign
  84+ 8D0C C9                                   ret
  85+ 8D0D B7           .SUBHLDEOppSGN:         or      a
  86+ 8D0E 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8D0F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8D11 67                                   ld      h,a
  89+ 8D12 7A                                   ld      a,d
  90+ 8D13 E6 7F                                and     SignMask8Bit
  91+ 8D15 57                                   ld      d,a
  92+ 8D16 19                                   add     hl,de
  93+ 8D17 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8D18 B4                                   or      h
  95+ 8D19 67                                   ld      h,a                         ; set the previou sign value
  96+ 8D1A C9                                   ret
  97+ 8D1B
  98+ 8D1B 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8D1C E6 80                                and     SignOnly8Bit
 100+ 8D1E 47                                   ld      b,a                         ;save sign bit in b
 101+ 8D1F AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8D20                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8D20 FA 38 8D    >                        jp		m, .ADDHLDEOppSGN
 103+ 8D23 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8D24 B2                                   or      d
 105+ 8D25                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8D25 FA 2A 8D    >                        jp		m, .ADDHLDESameNeg
 106+ 8D28 19                                   add     hl,de
 107+ 8D29 C9                                   ret
 108+ 8D2A 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8D2B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8D2D 67                                   ld      h,a
 111+ 8D2E 7A                                   ld      a,d
 112+ 8D2F E6 7F                                and     SignMask8Bit
 113+ 8D31 57                                   ld      d,a
 114+ 8D32 19                                   add     hl,de
 115+ 8D33 3E 80                                ld      a,SignOnly8Bit
 116+ 8D35 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8D36 67                                   ld      h,a
 118+ 8D37 C9                                   ret
 119+ 8D38 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8D39 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8D3B 67                                   ld      h,a
 122+ 8D3C 7A                                   ld      a,d
 123+ 8D3D E6 7F                                and     SignMask8Bit
 124+ 8D3F 57                                   ld      d,a
 125+ 8D40 B7                                   or      a
 126+ 8D41 ED 52                                sbc     hl,de
 127+ 8D43 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8D45 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8D46 B4                                   or      h
 130+ 8D47 67                                   ld      h,a                         ; set the previou sign value
 131+ 8D48 C9                                   ret
 132+ 8D49              .ADDHLDEOppInvert:      NegHL
 132+ 8D49 AF          >                xor a
 132+ 8D4A 95          >                sub l
 132+ 8D4B 6F          >                ld l,a
 132+ 8D4C 9F          >                sbc a,a
 132+ 8D4D 94          >                sub h
 132+ 8D4E 67          >                ld h,a
 133+ 8D4F 78                                   ld      a,b
 134+ 8D50 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8D52 B4                                   or      h
 136+ 8D53 67                                   ld      h,a                         ; recover sign
 137+ 8D54 C9                                   ret
 138+ 8D55              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8D55 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 140+ 8D57 78                                   ld      a,b
 141+ 8D58 32 7E 95                             ld      (NumberOfStarsNOSTM),a
 142+ 8D5B 21 CB 96                             ld      hl,varDust
 143+ 8D5E CD 9C 8C     InitStarsLoop:          call    InitStarAtHL
 144+ 8D61 10 FB                                djnz    InitStarsLoop
 145+ 8D63 C9                                   ret
 146+ 8D64              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8D64              StarsForward:          ; break
 148+ 8D64 3A 7E 95                             ld      a,(NumberOfStarsNOSTM)
 149+ 8D67 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8D68 FD 21 CB 96                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8D6C C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8D6D FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8D70 5F                                   ld      e,a
 154+ 8D71 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8D73 3A 60 94                             ld      a,(DELTA)
 156+ 8D76 FE 00                                cp      0
 157+ 8D78 20 01                                jr      nz,.NormalSpeed
 158+ 8D7A 3C                                   inc     a                                   ; so the is at lest some dust movement
 159+ 8D7B 47           .NormalSpeed:           ld      b,a
 160+ 8D7C 0E 00                                ld      c,0                                 ; bc = delta * 256
 161+ 8D7E CD 17 A4                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 162+ 8D81                                      ShiftHLRight1
 162+ 8D81 CB 3C       >			   srl h
 162+ 8D83 CB 1D       >			   rr  l
 163+ 8D85                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 163+ 8D85 CB 3C       >			   srl h
 163+ 8D87 CB 1D       >			   rr  l
 164+ 8D89 7D                                   ld      a,l                                 ;
 165+ 8D8A F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 166+ 8D8C DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 167+ 8D8E FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 167+ 8D92 66 05
 168+ 8D94 ED 5B 61 94                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 169+ 8D98 CD DA 8C                             call    StarsSUBHLDESigned
 170+ 8D9B                                      JumpOnBitSet h,7,ResetStar
 170+ 8D9B CB 7C       >                        bit 	7,h
 170+ 8D9D C2 F2 8E    >                        jp      nz,ResetStar
 171+ 8DA0 FD 75 04 FD                          ld      (iy+4),hl
 171+ 8DA4 74 05
 172+ 8DA6 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 172+ 8DAA 66 01
 173+ 8DAC 7C                                   ld      a,h                                 ;
 174+ 8DAD E6 7F                                and     $7F                                 ;
 175+ 8DAF 57                                   ld      d,a                                 ; d = abs(x hi)
 176+ 8DB0 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 177+ 8DB2 ED 30                                mul                                         ; de =  abs(x hi) * Q
 178+ 8DB4 7C                                   ld      a,h                                 ;
 179+ 8DB5 E6 80                                and     $80                                 ;
 180+ 8DB7 B2                                   or      d                                   ; set sign bit in d
 181+ 8DB8 57                                   ld      d,a                                 ;
 182+ 8DB9 CD 1B 8D                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 183+ 8DBC 7C                                   ld      a,h
 184+ 8DBD E6 7F                                and     $7F
 185+ 8DBF                                      JumpIfAGTENusng $70, ResetStar
 185+ 8DBF FE 70       >                        cp     $70
 185+ 8DC1 D2 F2 8E    >                        jp		nc,ResetStar
 186+ 8DC4 FD 75 00 FD                          ld      (iy+0),hl                           ;
 186+ 8DC8 74 01
 187+ 8DCA FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 187+ 8DCE 66 03
 188+ 8DD0 7C                                   ld      a,h                                 ;
 189+ 8DD1 E6 7F                                and     $7F                                 ;
 190+ 8DD3 57                                   ld      d,a                                 ; d = abs(y hi)
 191+ 8DD4 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 192+ 8DD6 ED 30                                mul                                         ; de =  abs(y hi) * Q
 193+ 8DD8 7C                                   ld      a,h                                 ;
 194+ 8DD9 E6 80                                and     $80                                 ;
 195+ 8DDB B2                                   or      d                                   ; set sign bit in d
 196+ 8DDC 57                                   ld      d,a                                 ;
 197+ 8DDD CD 1B 8D                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 198+ 8DE0 7C                                   ld      a,h
 199+ 8DE1 E6 7F                                and     $7F
 200+ 8DE3                                      JumpIfAGTENusng $60, ResetStar
 200+ 8DE3 FE 60       >                        cp     $60
 200+ 8DE5 D2 F2 8E    >                        jp		nc,ResetStar
 201+ 8DE8 7C                                   ld      a,h
 202+ 8DE9 E6 80                                and     $80
 203+ 8DEB 20 06                                jr      nz,.NoSecondCheck
 204+ 8DED 7C                                   ld      a,h
 205+ 8DEE                                      JumpIfAGTENusng $20, ResetStar
 205+ 8DEE FE 20       >                        cp     $20
 205+ 8DF0 D2 F2 8E    >                        jp		nc,ResetStar
 206+ 8DF3 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 206+ 8DF7 74 03
 207+ 8DF9              ; Now roll
 208+ 8DF9              ;  6. x = x - alpha * y / 256
 209+ 8DF9 2A 23 94     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 210+ 8DFC 7D                                   ld      a,l
 211+ 8DFD FE 00                                cp      0
 212+ 8DFF 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 8E01                                      ;break
 214+ 8E01                                      ;ld      a,$80
 215+ 8E01                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 216+ 8E01 E5                                   push    hl
 217+ 8E02 7C                                   ld      a,h
 218+ 8E03 E6 80                                and     $80
 219+ 8E05 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 8E06 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 8E07 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 8E0A 5F                                   ld      e,a
 223+ 8E0B E6 80                                and     $80
 224+ 8E0D 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 8E0E 7B           .rxEEquABSignX:         ld      a,e
 226+ 8E0F E6 7F                                and     $7F
 227+ 8E11 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 8E12 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 8E14 79                                   ld      a,c
 230+ 8E15 A8                                   xor     b                                   ; handle muliple sign bits
 231+ 8E16 B2                                   or      d
 232+ 8E17 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 8E18 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 8E1C 66 01
 234+ 8E1E CD DA 8C                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 235+ 8E21 FD 75 00 FD                          ld      (iy+0),hl
 235+ 8E25 74 01
 236+ 8E27              ;  5. y = y + alpha * x / 256
 237+ 8E27              .YRoll:                 ;break
 238+ 8E27 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 8E28 7C                                   ld      a,h
 240+ 8E29 E6 80                                and     $80
 241+ 8E2B 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 242+ 8E2C 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 243+ 8E2D FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 244+ 8E30 5F                                   ld      e,a
 245+ 8E31 E6 80                                and     $80
 246+ 8E33 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 247+ 8E34 7B           .ryEEquABSignX:         ld      a,e
 248+ 8E35 E6 7F                                and     $7F
 249+ 8E37 5F                                   ld      e,a                                 ; save abs x hi in e
 250+ 8E38 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 251+ 8E3A 79                                   ld      a,c
 252+ 8E3B A8                                   xor     b                                   ; handle muliple sign bits
 253+ 8E3C B2                                   or      d
 254+ 8E3D 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 255+ 8E3E FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 255+ 8E42 66 03
 256+ 8E44 CD 1B 8D                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 257+ 8E47 FD 75 02 FD                          ld      (iy+2),hl
 257+ 8E4B 74 03
 258+ 8E4D 3A 16 94     .NoRoll:                ld      a,(BET1)
 259+ 8E50 FE 00                                cp      0
 260+ 8E52 28 22                                jr      z,.NoPitch
 261+ 8E54              ;  8. y = y - beta * 256
 262+ 8E54 57           .YPitch:                ld      d,a                                 ; d = BET1
 263+ 8E55 FD 7E 02                             ld      a,(iy+2)
 264+ 8E58 5F                                   ld      e,a                                 ; e = Y HI
 265+ 8E59 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 266+ 8E5B 5F                                   ld      e,a
 267+ 8E5C ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 268+ 8E5E                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 268+ 8E5E CB 23       >			   sla e
 268+ 8E60 CB 12       >			   rl  d
 269+ 8E62 3A 18 94                             ld      a,(BET2FLIP)                        ; get inverted Sign
 270+ 8E65 B2                                   or      d
 271+ 8E66 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 272+ 8E67 FD 6E 02 FD                          ld      hl,(iy+2)
 272+ 8E6B 66 03
 273+ 8E6D CD 1B 8D                             call    StarsADDHLDESigned
 274+ 8E70 FD 75 02 FD                          ld      (iy+2),hl
 274+ 8E74 74 03
 275+ 8E76              ; now work out screen pos
 276+ 8E76              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 277+ 8E76              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 278+ 8E76              ;        pop     de
 279+ 8E76               ;       call    ProjectStarXToScreen
 280+ 8E76                                      ;pop     de
 281+ 8E76              .NoPitch:
 282+ 8E76 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 283+ 8E79 6F                                   ld      l,a
 284+ 8E7A E6 7F                                and     $7F
 285+ 8E7C                                      JumpOnBitSet l,7,StarNegXPt
 285+ 8E7C CB 7D       >                        bit 	7,l
 285+ 8E7E C2 87 8E    >                        jp      nz,StarNegXPt
 286+ 8E81 C6 80                                add     a,$80
 287+ 8E83 4F                                   ld      c,a
 288+ 8E84 C3 8C 8E                             jp      StarDoneX
 289+ 8E87 47           StarNegXPt:             ld      b,a
 290+ 8E88 3E 80                                ld      a,$80
 291+ 8E8A 90                                   sub     b
 292+ 8E8B 4F                                   ld      c,a
 293+ 8E8C FD 7E 03     StarDoneX:              ld      a,(iy+3)
 294+ 8E8F 6F                                   ld      l,a
 295+ 8E90 E6 7F                                and     $7F
 296+ 8E92                                      JumpOnBitSet l,7,StarNegYPt
 296+ 8E92 CB 7D       >                        bit 	7,l
 296+ 8E94 C2 9D 8E    >                        jp      nz,StarNegYPt
 297+ 8E97 C6 60                                add     a,$60
 298+ 8E99 47                                   ld      b,a
 299+ 8E9A C3 A2 8E                             jp      StarDoneY
 300+ 8E9D 47           StarNegYPt:             ld      b,a
 301+ 8E9E 3E 60                                ld      a,$60
 302+ 8EA0 90                                   sub     b
 303+ 8EA1 47                                   ld      b,a
 304+ 8EA2 3E FC        StarDoneY:              ld      a,$FC
 305+ 8EA4 C5                                   push    bc
 306+ 8EA5              .DrawStar:              MMUSelectLayer2
 306+ 8EA5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 307+ 8EA9 CD FF E0                             call    l2_plot_pixel
 308+ 8EAC FD 7E 05                             ld      a,(iy+5)
 309+ 8EAF C1                                   pop    bc
 310+ 8EB0                                      JumpIfAGTENusng $60,EndofStarsLoop
 310+ 8EB0 FE 60       >                        cp     $60
 310+ 8EB2 D2 E2 8E    >                        jp		nc,EndofStarsLoop
 311+ 8EB5 3E D8                                ld      a,$D8
 312+ 8EB7 0C                                   inc     c
 313+ 8EB8 C5                                   push    bc
 314+ 8EB9                                      MMUSelectLayer2
 314+ 8EB9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ 8EBD CD FF E0                             call    l2_plot_pixel
 316+ 8EC0 FD 7E 05                             ld      a,(iy+5)
 317+ 8EC3 C1                                   pop    bc
 318+ 8EC4                                      JumpIfAGTENusng $37,EndofStarsLoop
 318+ 8EC4 FE 37       >                        cp     $37
 318+ 8EC6 D2 E2 8E    >                        jp		nc,EndofStarsLoop
 319+ 8EC9 3E B4                                ld      a,$B4
 320+ 8ECB 04                                   inc     b
 321+ 8ECC C5                                   push    bc
 322+ 8ECD                                      MMUSelectLayer2
 322+ 8ECD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 323+ 8ED1 CD FF E0                             call    l2_plot_pixel
 324+ 8ED4 FD 7E 05                             ld      a,(iy+5)
 325+ 8ED7 C1                                   pop    bc
 326+ 8ED8 3E B4                                ld      a,$B4
 327+ 8EDA 0D                                   dec     c
 328+ 8EDB                                      MMUSelectLayer2
 328+ 8EDB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ 8EDF CD FF E0                             call    l2_plot_pixel
 330+ 8EE2 C1           EndofStarsLoop:         pop     bc                                      ;  0
 331+ 8EE3 FD E5                                push    iy                                      ; +1
 332+ 8EE5 E1                                   pop     hl                                      ;  0
 333+ 8EE6 ED 34 06 00                          add     hl,6
 334+ 8EEA E5           NextStarLoop2:          push    hl                                      ; +1
 335+ 8EEB FD E1                                pop     iy                                      ;  0
 336+ 8EED 05                                   dec     b
 337+ 8EEE C2 6C 8D                             jp      nz,StarProcessLoop
 338+ 8EF1 C9                                   ret
 339+ 8EF2              ResetStar:              ;break
 340+ 8EF2                                      ;pop     de
 341+ 8EF2 C1                                   pop     bc                                      ; 0
 342+ 8EF3 3A 7E 95                             ld      a,(NumberOfStarsNOSTM)
 343+ 8EF6 90                                   sub     b
 344+ 8EF7 57                                   ld      d,a
 345+ 8EF8 1E 06                                ld      e,6
 346+ 8EFA ED 30                                mul
 347+ 8EFC 21 CB 96                             ld      hl,varDust
 348+ 8EFF 19                                   add     hl,de
 349+ 8F00 CD 9C 8C                             call    InitStarAtHL
 350+ 8F03 C3 EA 8E                             jp      NextStarLoop2
 351+ 8F06              ;----------------------------------------------------------------------------------------------------------------------------------
 352+ 8F06 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 353+ 8F09 FD 7E 01                             ld      a,(iy+1)
 354+ 8F0C 6F                                   ld      l,a
 355+ 8F0D E6 7F                                and     $7F
 356+ 8F0F 47                                   ld      b,a
 357+ 8F10 CD BA A3                             call    DIV16BCDivDEUNDOC
 358+ 8F13 7D                                   ld      a,l
 359+ 8F14                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 359+ 8F14 CB 7F       >                        bit 	7,a
 359+ 8F16 C2 21 8F    >                        jp      nz,StarXNegativePoint
 360+ 8F19              ;StarXPositivePoint:									; x was positive result
 361+ 8F19 2E 80                                ld          l,ScreenCenterX						;
 362+ 8F1B 26 00                                ld          h,0
 363+ 8F1D 09                                   add         hl,bc								; hl = Screen Centre + X
 364+ 8F1E C3 28 8F                             jp          StarStoreXPoint
 365+ 8F21              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 366+ 8F21 2E 80                                ld          l,ScreenCenterX
 367+ 8F23 26 00                                ld          h,0
 368+ 8F25                                      ClearCarryFlag
 368+ 8F25 B7          >                        or a
 369+ 8F26 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 370+ 8F28              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 371+ 8F28 7D                                   ld          a,l
 372+ 8F29 32 23 97                             ld          (varStarX),a
 373+ 8F2C C9                                   ret
 374+ 8F2D
 375+ 8F2D FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 376+ 8F30 FD 7E 03                             ld          a,(iy+3)
 377+ 8F33 6F                                   ld          l,a
 378+ 8F34 E6 7F                                and         $7F
 379+ 8F36 47                                   ld          b,a
 380+ 8F37 CD BA A3                             call        DIV16BCDivDEUNDOC
 381+ 8F3A 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 382+ 8F3B                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 382+ 8F3B CB 7F       >                        bit 	7,a
 382+ 8F3D C2 48 8F    >                        jp      nz,StarNegativeYPoint
 383+ 8F40                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 384+ 8F40 2E 60                               ld          l,ScreenCenterY
 385+ 8F42                                      ClearCarryFlag
 385+ 8F42 B7          >                        or a
 386+ 8F43 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 387+ 8F45 C3 4D 8F                             jp          StarStoreYPoint
 388+ 8F48              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 389+ 8F48 2E 60                                ld          l,ScreenCenterY
 390+ 8F4A 26 00                                ld          h,0
 391+ 8F4C 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 392+ 8F4D              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 393+ 8F4D 7D                                   ld          a,l
 394+ 8F4E 32 24 97                             ld          (varStarY),a
 395+ 8F51 C9                                   ret
 396+ 8F52
 397+ 8F52
# file closed: ./Universe/StarRoutines.asm
 850  8F52              ;    include "Universe/move_object-MVEIT.asm"
 851  8F52                  include "./ModelRender/draw_object.asm"
# file opened: ./ModelRender/draw_object.asm
   1+ 8F52              JumpIfObjectIsPlanet:   MACRO target
   2+ 8F52 ~                                    ld a,(UbnkHullCopy)
   3+ 8F52 ~                                    bit 7,a
   4+ 8F52 ~                                    jp  nz,target
   5+ 8F52                                      ENDM
   6+ 8F52
   7+ 8F52              SetMaxVisibility:       MACRO
   8+ 8F52 ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8F52 ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8F52                                      ENDM
  11+ 8F52
  12+ 8F52              JumpIfObjectOutsideFov: MACRO target
  13+ 8F52 ~            LL10CheckXInFoV:
  14+ 8F52 ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8F52 ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8F52 ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8F52 ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8F52 ~                                    bit     7,h
  19+ 8F52 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8F52 ~            LL10CheckYInFoV:
  21+ 8F52 ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8F52 ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8F52 ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8F52 ~                                    bit     7,h
  25+ 8F52 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8F52                                      ENDM
  27+ 8F52
  28+ 8F52              LL10AddGunNode:         MACRO
  29+ 8F52 ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8F52 ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8F52 ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8F52 ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8F52 ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8F52 ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8F52 ~            MakeBothGunNodesVisible:
  36+ 8F52 ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8F52 ~                                    inc     hl                              ;
  38+ 8F52 ~                                    ld      (hl),a                          ;
  39+ 8F52                                      ENDM
  40+ 8F52
  41+ 8F52              JumpIfTooFarAway:       MACRO   target
  42+ 8F52 ~                                    ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8F52 ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8F52 ~                                    ld      a,h                             ;
  45+ 8F52 ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8F52                                      ENDM
  47+ 8F52
  48+ 8F52              DisplayObject:
  49+ 8F52              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8F52                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8F52              ; .................................................................................................................................
  52+ 8F52              LL9NotPlanet:
  53+ 8F52                  SetMaxVisibility
  53+ 8F52 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8F54 32 FE 93    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8F57              ;LL9TestRemoveShip:
  55+ 8F57              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8F57              ; .................................................................................................................................
  57+ 8F57              LL9NoEraseLines:
  58+ 8F57                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8F57 3A 2B C0    >                        ld      a,(UBnkexplDsp)
  58+ 8F5A CB 6F       >                        bit 	5,a
  58+ 8F5C C2 87 8F    >                        jp      nz,DoExplosionOrClear7
  59+ 8F5F                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8F5F CB 7F       >                        bit 	7,a
  59+ 8F61 CA 87 8F    >                        jp      z,DoExplosionOrClear7
  60+ 8F64 E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8F66 32 2B C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8F69              ;...............................................................................................................................................................................
  63+ 8F69              LL9ZeroAccelRotCtr:
  64+ 8F69                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8F69 AF          >               xor      a
  64+ 8F6A 32 28 C0    >               ld       (UBnkAccel),a
  65+ 8F6D 32 2A C0     	ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  66+ 8F70 CD 4D CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  67+ 8F73              ;...............................................................................................................................................................................
  68+ 8F73              LL9SetExploRad:
  69+ 8F73              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  69+ 8F73 3E 12       >               ld       a,18
  69+ 8F75 32 F6 C2    >               ld       (UbnKEdgeHeapCounter),a
  70+ 8F78              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  70+ 8F78 3A 06 C3    >               ld       a,(ExplosionCtAddr)
  70+ 8F7B 32 F4 C2    >               ld       (UbnkEdgeHeapBytes),a
  71+ 8F7E CD 85 98         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  72+ 8F81 3A 14 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  73+ 8F84 C3 8F 8F     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  74+ 8F87              ;...............................................................................................................................................................................
  75+ 8F87              DoExplosionOrClear7:	                                                                                   ;;;;
  76+ 8F87              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  77+ 8F87              EE49:
  78+ 8F87              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  78+ 8F87 3A 14 C0    >                        ld      a,(UBnKzsgn)
  78+ 8F8A CB 7F       >                        bit 	7,a
  78+ 8F8C C2 FD 8F    >                        jp      nz,TestToRemove
  79+ 8F8F              ;...............................................................................................................................................................................
  80+ 8F8F              ObjectInFront:
  81+ 8F8F              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  82+ 8F8F                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  82+ 8F8F 3A 13 C0    >                        ld     a,(UBnKzhi)
  82+ 8F92 FE C0       >                        cp     FarInFront
  82+ 8F94 D2 FD 8F    >                        jp	  nc,TestToRemove
  83+ 8F97              LL10CheckFov:
  84+ 8F97                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8F97             >LL10CheckXInFoV:
  84+ 8F97 2A 0C C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  84+ 8F9A ED 5B 12 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  84+ 8F9E B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  84+ 8F9F ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  84+ 8FA1 CB 7C       >                        bit     7,h
  84+ 8FA3 CA FD 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8FA6             >LL10CheckYInFoV:
  84+ 8FA6 2A 0F C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  84+ 8FA9 B7          >                        or		a							    ; clear carry flag                                                ;         .
  84+ 8FAA ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  84+ 8FAC CB 7C       >                        bit     7,h
  84+ 8FAE CA FD 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8FB1              LookAtGunNode:
  86+ 8FB1                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  86+ 8FB1 3A 05 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  86+ 8FB4 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  86+ 8FB5 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  86+ 8FB7 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  86+ 8FB9 21 BF C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  86+ 8FBC 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  86+ 8FBD             >MakeBothGunNodesVisible:
  86+ 8FBD 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  86+ 8FBE 23          >                        inc     hl                              ;
  86+ 8FBF 77          >                        ld      (hl),a                          ;
  87+ 8FC0              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  88+ 8FC0                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8FC0 2A 12 C0    >                        ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  88+ 8FC3             >                        ShiftHLDiv8                             ; z position / 8
  88+ 8FC3 CB 3C       >			   srl h
  88+ 8FC5 CB 1D       >			   rr  l
  88+ 8FC7 CB 3C       >			   srl h
  88+ 8FC9 CB 1D       >			   rr  l
  88+ 8FCB CB 3C       >			   srl h
  88+ 8FCD CB 1D       >			   rr  l
  88+ 8FCF 7C          >                        ld      a,h                             ;
  88+ 8FD0             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8FD0 FE 00       >				cp	0
  88+ 8FD2 C2 E8 8F    >				jp	nz,SkipToAsFar
  89+ 8FD5              LL10CloseEnoughToDraw:
  90+ 8FD5              ; if zhi /16
  91+ 8FD5 7C               ld      a,h                             ; get zHi shifted again
  92+ 8FD6 CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  93+ 8FD8 CB 3F            srl     a                               ;
  94+ 8FDA CB 3F            srl     a                               ;
  95+ 8FDC CB 3F            srl     a                               ; zhi is now max 31
  96+ 8FDE 32 8D C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  97+ 8FE1              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  98+ 8FE1              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
  99+ 8FE1              ObjectDrawForwards:
 100+ 8FE1 CD 8F 90         call    DrawForwards
 101+ 8FE4 C9               ret
 102+ 8FE5 C3 E1 8F         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 103+ 8FE8              ;...............................................................................................................................................................................
 104+ 8FE8              SkipToAsFar:
 105+ 8FE8              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 106+ 8FE8              LL13:                                       ; hopped to as far
 107+ 8FE8              LL13DrawIfNearerThanDotDist:
 108+ 8FE8              ; if dot_distance >= z_hi then we can still draw ship
 109+ 8FE8                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 109+ 8FE8 3A 0C C3    >                        ld   a,(DotAddr)
 109+ 8FEB 21 13 C0    >                        ld   hl,UBnKzhi
 109+ 8FEE BE          >                        cp   (hl)
 109+ 8FEF D2 E1 8F    >                        jp	  nc,ObjectDrawForwards
 110+ 8FF2              LL13DrawIfExplodingTest:
 111+ 8FF2              ; if exploding then draw ship
 112+ 8FF2 3A 2B C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 113+ 8FF5 E6 20            and     $20                             ; mask bit 5 exploding
 114+ 8FF7 C2 E1 8F         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 115+ 8FFA              LL13TooFarPlotPoint:
 116+ 8FFA C3 0F 90         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 117+ 8FFD              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ 8FFD              ;...............................................................................................................................................................................
 119+ 8FFD              ;;;LL14
 120+ 8FFD              ;;;   if bit5 of INWK31 is set								  ::LL14
 121+ 8FFD              ;;;      clear bit 3 of INWK31
 122+ 8FFD              ;;;      goto DO Explosion (DOEXP )
 123+ 8FFD              ;;;   end if
 124+ 8FFD              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 125+ 8FFD              ;;;      clear bt 3 of INK31
 126+ 8FFD              ;;;      goto Clear Lines from X19
 127+ 8FFD              ;;;   else
 128+ 8FFD              ;;;      return from subroutine
 129+ 8FFD              ;;;
 130+ 8FFD              TestToRemove:                                                                                             ;;;;
 131+ 8FFD              LL14:										; Test to remove object                                        ;;;;
 132+ 8FFD              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 132+ 8FFD 3A 2B C0    >                        ld      a,(UBnkexplDsp)
 132+ 9000 CB 6F       >                        bit 	5,a
 132+ 9002 C2 4D CD    >                        jp      nz,EraseOldLines
 133+ 9005              ; Ship is exploding
 134+ 9005              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 135+ 9005 E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 136+ 9007 32 2B C0     	ld		(UBnkexplDsp),a					; INWK+31
 137+ 900A C3 0D 90     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 138+ 900D              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 139+ 900D
 140+ 900D              DOEXP: ; TODO
 141+ 900D B7           	or a
 142+ 900E C9           	ret
 143+ 900F
# file closed: ./ModelRender/draw_object.asm
 852  900F                  include "./ModelRender/draw_ship_point.asm"
# file opened: ./ModelRender/draw_ship_point.asm
   1+ 900F
   2+ 900F
   3+ 900F              ShipPlotPoint:
   4+ 900F              SHPPT:	                                    ; ship plot as point from LL10
   5+ 900F CD 4D CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 9012              SHPPT_ProjectToK3K4:
   7+ 9012 CD 1E CD         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 9015              SHPTOnScreenTest:
   9+ 9015 2A 8E 94     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 9018 ED 5B 94 94  	ld		de,(varK4)
  11+ 901C 7C           	ld		a,h
  12+ 901D B2           	or		d								;
  13+ 901E 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 9020 7B           	ld		a,e								; k4 or Y lo
  15+ 9021              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 9021 FE 80       >                        cp     ViewHeight
  15+ 9023 D2 47 90    >                        jp		nc,SHPTFinishup
  16+ 9026              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 9026 3E 01        	ld		a,1
  18+ 9028 32 F1 C2     	ld		(UbnkLineArrayLen),a
  19+ 902B 3E 04        	ld		a,4
  20+ 902D 32 F1 C2     	ld		(UbnkLineArrayLen),a
  21+ 9030 55           	ld		d,l                             ; de = Y lo X hi
  22+ 9031 21 FF C1     	ld		hl,UbnkLineArray				; head of array
  23+ 9034 72           	ld		(hl),d
  24+ 9035 23           	inc		hl
  25+ 9036 73           	ld		(hl),e
  26+ 9037 23           	inc		hl
  27+ 9038 72           	ld		(hl),d
  28+ 9039 23           	inc		hl
  29+ 903A 73           	ld		(hl),e
  30+ 903B 23           	inc		hl								; write out point as a line for clean up later
  31+ 903C              SHPTIsOnScreen:
  32+ 903C 43           	ld		b,e
  33+ 903D 4A           	ld		c,d								; bc = XY
  34+ 903E 3E FF        	ld		a,ShipColour
  35+ 9040              	MMUSelectLayer2
  35+ 9040 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 9044 CD FF E0         call    l2_plot_pixel
  37+ 9047              SHPTFinishup:
  38+ 9047 3A 2B C0         ld      a,(UBnkexplDsp)
  39+ 904A E6 F7            and     $F7                             ;  clear bit3
  40+ 904C 32 2B C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 904F C9               ret                                     ; now it will return to the caller of
  42+ 9050
  43+ 9050              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 9050                  INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++9050              ; ---------------------------------------------------------------------------------------------------------------------------------
   2++9050 00           DrawLinesCounter		db	0
   3++9051              ; Initial tests look OK
   4++9051              LL155:;
   5++9051              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   6++9051                    ;break                                                                             ; ObjectInFront:
   7++9051 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   8++9053 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
   9++9055 3A F1 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  10++9058                                      ReturnIfAIsZero   						; No lines then bail out.
  10++9058 A7          >                 and a
  10++9059 C8          >                 ret    z
  11++905A FD 67                                ld		iyh,a			                ; number of lines still to draw
  12++905C 21 FF C1                             ld		hl,UbnkLineArray
  13++905F              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  14++905F 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  15++9060 23                                   inc     hl
  16++9061 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  17++9062 23                                   inc     hl
  18++9063              ;;DEBUGTEST        push bc
  19++9063              ;;DEBUGTEST        push hl
  20++9063              ;;DEBUGTEST        push de
  21++9063              ;;DEBUGTEST        ld  a,$3F
  22++9063              ;;DEBUGTEST        MMUSelectLayer2
  23++9063              ;;DEBUGTEST        call    l2_plot_pixel
  24++9063              ;;DEBUGTEST        pop de
  25++9063              ;;DEBUGTEST        pop hl
  26++9063              ;;DEBUGTEST        pop bc
  27++9063 5E                                   ld      e,(hl)                          ; c = varX1
  28++9064 23                                   inc     hl
  29++9065 56                                   ld      d,(hl)                          ; de = point2 Y,X
  30++9066              ;;DEBUGTEST       push bc
  31++9066              ;;DEBUGTEST       push hl
  32++9066              ;;DEBUGTEST       push de
  33++9066              ;;DEBUGTEST       push de
  34++9066              ;;DEBUGTEST       pop  bc
  35++9066              ;;DEBUGTEST       ld  a,$3F
  36++9066              ;;DEBUGTEST       MMUSelectLayer2
  37++9066              ;;DEBUGTEST       call    l2_plot_pixel
  38++9066              ;;DEBUGTEST       pop de
  39++9066              ;;DEBUGTEST       pop hl
  40++9066              ;;DEBUGTEST       pop bc
  41++9066 23                                   inc     hl
  42++9067 E5                                   push	hl
  43++9068 FD E5                                push    iy
  44++906A 60                                   ld      h,b
  45++906B 69                                   ld      l,c
  46++906C                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  47++906C FD 7D                                ld		a,iyl							; get colour back before calling line draw
  48++906E                                      MMUSelectLayer2
  48++906E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  49++9072 CD EE E8                             call    LineHLtoDE
  50++9075 FD E1                                pop     iy
  51++9077 E1                                   pop	    hl
  52++9078 FD 25                                dec     iyh
  53++907A 20 E3                                jr		nz,DrawXX19ClippedLines
  54++907C C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  55++907D
# file closed: ././ModelRender/DrawLines.asm
  45+ 907D
  46+ 907D              ;
  47+ 907D              ;DrawLineBCtoDE:
  48+ 907D              ;LIONBCDE:
  49+ 907D              ;    -- Set colour etc
  50+ 907D              ;    call    l2_draw_diagonal:
  51+ 907D              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  52+ 907D
# file closed: ./ModelRender/draw_ship_point.asm
 853  907D                  include "./ModelRender/drawforwards-LL17.asm"
# file opened: ./ModelRender/drawforwards-LL17.asm
   1+ 907D              SetLastFaceVisible: MACRO
   2+ 907D ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 907D ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 907D                                  ENDM
   5+ 907D
   6+ 907D 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 907F 32 B0 C0                         ld      (UbnkFaceVisArray+15),a
   8+ 9082 C9                               ret
   9+ 9083
  10+ 9083              CheckIfExplodingCall:
  11+ 9083              ; DEBUG TODO turn into MACRO later
  12+ 9083              ; Sets Z flag to true if only some faces are visible
  13+ 9083              ; Clears Z flag if exploding so all faces should be rendered
  14+ 9083 3A 2B C0             ld      a,(UBnkexplDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 9086              ;;DEBUG
  16+ 9086 F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 9088 32 2B C0             ld      (UBnkexplDsp),a
  18+ 908B              ;;DEBUG
  19+ 908B 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 908C E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 908E C9                   ret
  22+ 908F
  23+ 908F
  24+ 908F              DrawForwardsIXL:
  25+ 908F              DrawForwards:
  26+ 908F              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 908F              ; Copy the three orientation vectors into XX16
  28+ 908F CD BE CF     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 9092              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 9092 CD A0 D1     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 9095              ; ......................................................                                                                            ;;;
  32+ 9095              LastNormalAlwaysVisible:
  33+ 9095 CD 7D 90             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 9098              ; HEre original does LDY 12
  35+ 9098              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 9098              CheckIfExplodingState:
  37+ 9098 CD 83 90             call    CheckIfExplodingCall
  38+ 909B 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 909D              ; ......................................................                                                                            ;;; else
  40+ 909D              ItIsExploding:
  41+ 909D              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 909D CD 06 D0             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 90A0 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 90A2                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 90A2 AF          >               xor      a
  44+ 90A3 32 FE 93    >               ld       (LastNormalVisible),a
  45+ 90A6              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 90A6 C3 AC 90             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 90A9              ; ......................................................                                                                            ;;;
  48+ 90A9              CullBackFaces:
  49+ 90A9              EE29Entry:
  50+ 90A9 CD 4E D4             call    CullV2
  51+ 90AC              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 90AC              TransposeMatrix:
  53+ 90AC              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 90AC CD 6D D0             call    InverseXX16
  55+ 90AF
  56+ 90AF
  57+ 90AF CD 96 DB             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 90B2              DrawResults:
  59+ 90B2 CD 68 DC             call    PrepLines                   ; LL72, process lines and clip
  60+ 90B5 CD 51 90             call    DrawLines                   ; Need to plot all lines
  61+ 90B8 C9                   ret
  62+ 90B9
# file closed: ./ModelRender/drawforwards-LL17.asm
 854  90B9
 855  90B9                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 90B9
   2+ 90B9 00           memfillvalue		DB 0
   3+ 90BA 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 90BE 7D
   4+ 90BF B9 90        memfill_astrt  		DW memfillvalue
   5+ 90C1 00 40        memfill_length 		DB $00,$40
   6+ 90C3 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 90C6 00 00        memfill_bstrt  		DB $00,$00
   8+ 90C8 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 90CC              memfill_cmd_len	  	EQU $ - memfill
  10+ 90CC
  11+ 90CC              memfill_dma:
  12+ 90CC              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 90CC              .set_fill_value:
  14+ 90CC 32 B9 90     	ld 		(memfillvalue),a
  15+ 90CF              .set_target:
  16+ 90CF 22 C6 90     	ld		(memfill_bstrt),hl
  17+ 90D2              .set_length:
  18+ 90D2 ED 53 C1 90  	ld		(memfill_length),de
  19+ 90D6              .write_dma:
  20+ 90D6 21 BA 90     	ld 		hl, memfill
  21+ 90D9 06 12        	ld 		b, memfill_cmd_len
  22+ 90DB 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 90DD ED B3        	otir
  24+ 90DF C9           	ret
  25+ 90E0
# file closed: ./Hardware/memfill_dma.asm
 856  90E0                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 90E0
   2+ 90E0 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 90E4 7D
   3+ 90E5 00 00        memcopy_astrt  		DB $00,$00
   4+ 90E7 00 40        memcopy_length 		DB $00,$40
   5+ 90E9 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 90EC 00 00        memcopy_bstrt  		DB $00,$00
   7+ 90EE 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 90F2              memcopy_cmd_len	  	equ $ - memcopy
   9+ 90F2
  10+ 90F2              memcopy_dma:
  11+ 90F2              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 90F2              .set_target:
  13+ 90F2 22 EC 90     	ld		(memcopy_bstrt),hl
  14+ 90F5              .set_source:
  15+ 90F5 ED 53 E5 90  	ld		(memcopy_astrt),de
  16+ 90F9              .set_length:
  17+ 90F9 ED 43 E7 90  	ld		(memcopy_length),bc
  18+ 90FD              .write_dma:
  19+ 90FD 21 E0 90     	ld 		hl, memcopy
  20+ 9100 06 12        	ld 		b, memcopy_cmd_len
  21+ 9102 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 9104 ED B3        	otir
  23+ 9106 C9           	ret
  24+ 9107
# file closed: ./Hardware/memcopy_dma.asm
 857  9107                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 9107              ;
   2+ 9107              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 9107              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 9107              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 9107              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 9107              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 9107              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 9107              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 9107              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 9107              ;
  11+ 9107              ; Keyboard
  12+ 9107              ;
  13+ 9107              ;   0      1       2       3       4       5        6       7       8       9
  14+ 9107              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 9107              ;   10     11      12      13      14      15       16      17      18      19
  16+ 9107              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 9107              ;   20     21      22      23      24      25       26      27      28      29
  18+ 9107              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 9107              ;   30     31      32      33      34      35       36      37      38      39
  20+ 9107              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 9107              ;
  22+ 9107              ; Default map
  23+ 9107              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 9107              ;   0          1           2             3              4           5           6           7           8           9
  25+ 9107              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 9107              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 9107              ;                                                                                                       Find System
  28+ 9107              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 9107              ;   10         11          12            13             14          15          16          17          18          19
  30+ 9107              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 9107              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 9107              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 9107              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 9107              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 9107              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 9107              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 9107              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 9107              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 9107              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 9107              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 9107              ;              ResumeGame
  42+ 9107
  43+ 9107              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 9107
  45+ 9107              c_Pressed_Front         equ 0  * 2
  46+ 9107              c_Pressed_Aft           equ 1  * 2
  47+ 9107              c_Pressed_Left          equ 2  * 2
  48+ 9107              c_Pressed_Right         equ 3  * 2
  49+ 9107              c_Pressed_RollLeft      equ 4  * 2
  50+ 9107              c_Pressed_RollRight     equ 5  * 2
  51+ 9107              c_Pressed_Dive          equ 6  * 2
  52+ 9107              c_Pressed_Climb         equ 7  * 2
  53+ 9107              c_Pressed_Accellerate   equ 8  * 2
  54+ 9107              c_Pressed_Decellerate   equ 9  * 2
  55+ 9107              c_Pressed_FireLaser     equ 10 * 2
  56+ 9107              c_Pressed_TargetMissle  equ 11 * 2
  57+ 9107              c_Pressed_FireMissile   equ 12 * 2
  58+ 9107              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 9107              c_Pressed_ECM           equ 14 * 2
  60+ 9107              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 9107              c_Pressed_EscapePod     equ 16 * 2
  62+ 9107              c_Pressed_DockingComp   equ 17 * 2
  63+ 9107              c_Pressed_Hyperspace    equ 18 * 2
  64+ 9107              c_Pressed_Distance      equ 19 * 2
  65+ 9107              c_Pressed_HomeCursor    equ 20 * 2
  66+ 9107              c_Pressed_Launch        equ 21 * 2
  67+ 9107              c_Pressed_BuyCargo      equ 22 * 2
  68+ 9107              c_Pressed_SellCargo     equ 23 * 2
  69+ 9107              c_Pressed_Equip         equ 24 * 2
  70+ 9107              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 9107              c_Pressed_LocalChart    equ 26 * 2
  72+ 9107              c_Pressed_MarketPrices  equ 27 * 2
  73+ 9107              c_Pressed_Status        equ 28 * 2
  74+ 9107              c_Pressed_Inventory     equ 29 * 2
  75+ 9107              c_Pressed_GameSkip      equ 30 * 2
  76+ 9107              c_Pressed_Save          equ 31 * 2
  77+ 9107              c_Pressed_Freeze        equ 32 * 2
  78+ 9107              c_Pressed_Resume        equ 33 * 2
  79+ 9107              c_Pressed_Recentre      equ 34 * 2
  80+ 9107              c_Pressed_Quit          equ 35 * 2
  81+ 9107              c_Pressed_PlanetData    equ 36 * 2
  82+ 9107              c_Pressed_CursorUp      equ 37 * 2
  83+ 9107              c_Pressed_CursorDown    equ 38 * 2
  84+ 9107              c_Pressed_Find          equ 39 * 2
  85+ 9107
  86+ 9107              ; half row 1
  87+ 9107              VK_CAPS  				equ 0
  88+ 9107              VK_Z  					equ 1
  89+ 9107              VK_X  					equ 2
  90+ 9107              VK_C  					equ 3
  91+ 9107              VK_V  					equ 4
  92+ 9107              ; half row 2
  93+ 9107              VK_A  					equ 5
  94+ 9107              VK_S  					equ 6
  95+ 9107              VK_D  					equ 7
  96+ 9107              VK_F  					equ 8
  97+ 9107              VK_G  					equ 9
  98+ 9107              ; half row 3
  99+ 9107              VK_Q  					equ 10
 100+ 9107              VK_W  					equ 11
 101+ 9107              VK_E  					equ 12
 102+ 9107              VK_R  					equ 13
 103+ 9107              VK_T  					equ 14
 104+ 9107              ; half row 4
 105+ 9107              VK_1  					equ 15
 106+ 9107              VK_2  					equ 16
 107+ 9107              VK_3  					equ 17
 108+ 9107              VK_4  					equ 18
 109+ 9107              VK_5  					equ 19
 110+ 9107              ; half row 5
 111+ 9107              VK_0 					equ 20
 112+ 9107              VK_9 					equ 21
 113+ 9107              VK_8 					equ 22
 114+ 9107              VK_7 					equ 23
 115+ 9107              VK_6 					equ 24
 116+ 9107              ; half row 6
 117+ 9107              VK_P  					equ 25
 118+ 9107              VK_O  					equ 26
 119+ 9107              VK_I  					equ 27
 120+ 9107              VK_U  					equ 28
 121+ 9107              VK_Y  					equ 29
 122+ 9107              ; half row 7
 123+ 9107              VK_ENTER 				equ 30
 124+ 9107              VK_L  					equ 31
 125+ 9107              VK_K  					equ 32
 126+ 9107              VK_J  					equ 33
 127+ 9107              VK_H  					equ 34
 128+ 9107              ; half row 8
 129+ 9107              VK_SPACE 				equ 35
 130+ 9107              VK_SYM  				equ 36
 131+ 9107              VK_M  					equ 37
 132+ 9107              VK_N  					equ 38
 133+ 9107              VK_B  					equ 39
 134+ 9107
 135+ 9107              ;KeyboardMapping
 136+ 9107              KeyCode_Front        	equ VK_1
 137+ 9107              KeyCode_Aft          	equ VK_2
 138+ 9107              KeyCode_Left         	equ VK_3
 139+ 9107              KeyCode_Right        	equ VK_4
 140+ 9107              KeyCode_RollLeft     	equ VK_O
 141+ 9107              KeyCode_RollRight    	equ VK_P
 142+ 9107              KeyCode_Dive         	equ VK_Q
 143+ 9107              KeyCode_Climb        	equ VK_A
 144+ 9107              KeyCode_Accellerate  	equ VK_W
 145+ 9107              KeyCode_Decellerate  	equ VK_S
 146+ 9107              KeyCode_FireLaser    	equ VK_SPACE
 147+ 9107              KeyCode_TargetMissle 	equ VK_T
 148+ 9107              KeyCode_FireMissile  	equ VK_F
 149+ 9107              KeyCode_Find        	equ VK_F
 150+ 9107              KeyCode_UnarmMissile 	equ VK_R
 151+ 9107              KeyCode_ECM          	equ VK_E
 152+ 9107              KeyCode_EnergyBomb   	equ VK_U
 153+ 9107              KeyCode_EscapePod    	equ VK_CAPS
 154+ 9107              KeyCode_DockingComp  	equ VK_N
 155+ 9107              KeyCode_Hyperspace   	equ VK_H
 156+ 9107              KeyCode_Distance     	equ VK_J
 157+ 9107              KeyCode_HomeCursor   	equ VK_G
 158+ 9107              KeyCode_Launch       	equ VK_L
 159+ 9107              KeyCode_BuyCargo     	equ VK_B
 160+ 9107              KeyCode_SellCargo    	equ VK_V
 161+ 9107              KeyCode_Equip        	equ VK_C
 162+ 9107              KeyCode_GalacticChrt 	equ VK_5
 163+ 9107              KeyCode_LocalChart   	equ VK_6
 164+ 9107              KeyCode_MarketPrices 	equ VK_7
 165+ 9107              KeyCode_Status       	equ VK_8
 166+ 9107              KeyCode_Inventory    	equ VK_9
 167+ 9107              KeyCode_GameSkip     	equ VK_Z
 168+ 9107              KeyCode_Save         	equ VK_O
 169+ 9107              KeyCode_Freeze       	equ VK_B
 170+ 9107              KeyCode_Resume       	equ VK_L
 171+ 9107              KeyCode_Recentre     	equ VK_D
 172+ 9107              KeyCode_Quit         	equ VK_Y
 173+ 9107              KeyCode_PlanetData   	equ VK_0
 174+ 9107              KeyCode_CursorUp        equ VK_Q
 175+ 9107              KeyCode_CursorDown      equ VK_A
 176+ 9107
 177+ 9107 00 00 00...  Keys					DS	40
 178+ 912F              c_KeyBoardLen 			equ $ - Keys
 179+ 912F 00 00 00...  RawKeys					DS	8
 180+ 9137 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 913B FE FB FE F7
 180+ 913F FE EF FE DF
 180+ 9143 FE BF FE 7F
 181+ 9147              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 9147              ; of updating this table with the respective location to look up
 183+ 9147              ; key list sequence is in table above
 184+ 9147 16 91 17 91  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 914B 18 91 19 91
 184+ 914F 21 91
 185+ 9151 20 91 11 91                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 9155 0C 91 12 91
 185+ 9159 0D 91
 186+ 915B 2A 91 15 91                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 915F 0F 91 14 91
 186+ 9163 13 91
 187+ 9165 23 91 07 91                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 9169 2D 91 29 91
 187+ 916D 28 91
 188+ 916F 10 91 26 91                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 9173 2E 91 0B 91
 188+ 9177 0A 91
 189+ 9179 1A 91 1F 91                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 917D 1E 91 1D 91
 189+ 9181 1C 91
 190+ 9183 08 91 21 91                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 9187 2E 91 26 91
 190+ 918B 0E 91
 191+ 918D 24 91 1B 91                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 9191 11 91 0C 91
 191+ 9195 0F 91
 192+ 9197
 193+ 9197 23 5A 58 43  ASCII_Map:           DB "#","Z","X","C","V"
 193+ 919B 56
 194+ 919C 41 53 44 46                       DB "A","S","D","F","G"
 194+ 91A0 47
 195+ 91A1 51 57 45 52                       DB "Q","W","E","R","T"
 195+ 91A5 54
 196+ 91A6 31 32 33 34                       DB "1","2","3","4","5"
 196+ 91AA 35
 197+ 91AB 30 39 38 37                       DB "0","9","8","7","6"
 197+ 91AF 36
 198+ 91B0 50 4F 49 55                       DB "P","O","I","U","Y"
 198+ 91B4 59
 199+ 91B5 3E 4C 4B 4A                       DB ">","L","K","J","H"
 199+ 91B9 48
 200+ 91BA 20 5E 4D 4E                       DB " ","^","M","N","B"
 200+ 91BE 42
 201+ 91BF
 202+ 91BF
 203+ 91BF              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 91BF              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 91BF              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 91BF              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 91BF              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 91BF              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 91BF              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 91BF              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 91BF              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 91BF              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 91BF              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 91BF              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 91BF              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 91BF              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 91BF              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 91BF              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 91BF              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 91BF              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 91BF              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 91BF              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 91BF              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 91BF              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 91BF              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 91BF              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 91BF              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 91BF              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 91BF              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 91BF              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 91BF              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 91BF              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 91BF              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 91BF              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 91BF              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 91BF              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 91BF              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 91BF              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 91BF              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 91BF              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 91BF              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 91BF              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 91BF
 244+ 91BF
 245+ 91BF              init_keyboard:
 246+ 91BF 21 07 91     	ld		hl,Keys
 247+ 91C2 11 28 00     	ld		de, c_KeyBoardLen
 248+ 91C5 3E 00        	ld		a,0
 249+ 91C7 CD CC 90     	call	memfill_dma
 250+ 91CA C9           	ret
 251+ 91CB
 252+ 91CB              scan_keyboard:
 253+ 91CB 21 2F 91     	ld		hl,RawKeys
 254+ 91CE 11 37 91     	ld		de,KeyAddrTab
 255+ 91D1 AF           	xor		a
 256+ 91D2 FD 2E 08     	ld		iyl,8
 257+ 91D5 DD 21 07 91      ld      ix,Keys
 258+ 91D9              .PortReadLoop:
 259+ 91D9 1A           	ld		a,(de)							; Set up BC as port to read
 260+ 91DA 4F           	ld		c,a
 261+ 91DB 13           	inc		de
 262+ 91DC 1A               ld      a,(de)
 263+ 91DD 47           	ld		b,a
 264+ 91DE 13           	inc		de
 265+ 91DF ED 78        	in		a,(c)							; read port to a
 266+ 91E1 77           	ld		(hl),a							; set raw keys to value
 267+ 91E2 23           	inc		hl								; and ready for next element
 268+ 91E3 06 05        	ld		b,5								; loop all bits (there are only 5 keys to a group)
 269+ 91E5              .ProcessBitsLoop:
 270+ 91E5 CB 47        	bit		0,a								; is bit set
 271+ 91E7 28 07            jr      z,.SetKeyPressed
 272+ 91E9 08               ex      af,af'
 273+ 91EA AF               xor     a
 274+ 91EB C3 F7 91         jp      .SetKey
 275+ 91EE 20 0B        	jr		nz,.SkipKeySet
 276+ 91F0              .SetKeyPressed:
 277+ 91F0 08           	ex		af,af'
 278+ 91F1 DD 7E 00         ld      a,(ix+0)
 279+ 91F4 3C               inc     a
 280+ 91F5 E6 03            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 281+ 91F7              .SetKey:
 282+ 91F7 DD 77 00     	ld		(ix+0),a							; Key Pressed
 283+ 91FA 08           	ex		af,af'
 284+ 91FB              .SkipKeySet:
 285+ 91FB DD 23        	inc		ix								; move to next key
 286+ 91FD CB 3F        	srl		a								; move next key into bit 0
 287+ 91FF 10 E4        	djnz	.ProcessBitsLoop				; Process all key group bits
 288+ 9201 FD 2D            dec     iyl
 289+ 9203 20 D4            jr      nz,.PortReadLoop				; Read next input port
 290+ 9205 C9           	ret
 291+ 9206
 292+ 9206              GetKeyStateAddressDE: MACRO
 293+ 9206 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 294+ 9206 ~                                  add     hl,a
 295+ 9206 ~                                  ld      a,(hl)
 296+ 9206 ~                                  ld      e,a
 297+ 9206 ~                                  inc     hl
 298+ 9206 ~                                  ld      a,(hl)
 299+ 9206 ~                                  ld      d,a                             ; now de = address in keypress list
 300+ 9206                                    ENDM
 301+ 9206
 302+ 9206
 303+ 9206              ; call with a = c_Pressed key, will then read mapping
 304+ 9206              wait_for_key_a_press:
 305+ 9206                  GetKeyStateAddressDE
 305+ 9206 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 305+ 9209 ED 31       >                      add     hl,a
 305+ 920B 7E          >                      ld      a,(hl)
 305+ 920C 5F          >                      ld      e,a
 305+ 920D 23          >                      inc     hl
 305+ 920E 7E          >                      ld      a,(hl)
 305+ 920F 57          >                      ld      d,a                             ; now de = address in keypress list
 306+ 9210 D5               push    de
 307+ 9211              wait_for_key_press_loop:
 308+ 9211 CD CB 91         call    scan_keyboard
 309+ 9214 E1               pop     hl                              ; get key address into hl
 310+ 9215 E5               push    hl
 311+ 9216 7E               ld      a,(hl)
 312+ 9217                  JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 312+ 9217 FE 01       >                cp     1
 312+ 9219 C2 11 92    >                jp      nz,wait_for_key_press_loop
 313+ 921C E1               pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 314+ 921D C9               ret
 315+ 921E
 316+ 921E              wait_for_key_a_held:
 317+ 921E                  GetKeyStateAddressDE
 317+ 921E 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 317+ 9221 ED 31       >                      add     hl,a
 317+ 9223 7E          >                      ld      a,(hl)
 317+ 9224 5F          >                      ld      e,a
 317+ 9225 23          >                      inc     hl
 317+ 9226 7E          >                      ld      a,(hl)
 317+ 9227 57          >                      ld      d,a                             ; now de = address in keypress list
 318+ 9228 D5               push    de
 319+ 9229              wait_for_key_a_held_loop:
 320+ 9229 CD CB 91         call    scan_keyboard
 321+ 922C E1               pop     hl
 322+ 922D E5               push    hl
 323+ 922E 7E               ld      a,(hl)
 324+ 922F                  JumpIfALTNusng  2,wait_for_key_a_held_loop
 324+ 922F FE 02       >                        cp      2
 324+ 9231 DA 29 92    >                        jp		c, wait_for_key_a_held_loop
 325+ 9234 E1               pop     hl
 326+ 9235 C9               ret
 327+ 9236
 328+ 9236              get_key_a_state:                            ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 329+ 9236                  GetKeyStateAddressDE
 329+ 9236 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 329+ 9239 ED 31       >                      add     hl,a
 329+ 923B 7E          >                      ld      a,(hl)
 329+ 923C 5F          >                      ld      e,a
 329+ 923D 23          >                      inc     hl
 329+ 923E 7E          >                      ld      a,(hl)
 329+ 923F 57          >                      ld      d,a                             ; now de = address in keypress list
 330+ 9240 EB               ex      de,hl
 331+ 9241 7E               ld      a,(hl)                          ; a = keystate
 332+ 9242 C9               ret
 333+ 9243
 334+ 9243              force_key_press:
 335+ 9243                  GetKeyStateAddressDE
 335+ 9243 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 9246 ED 31       >                      add     hl,a
 335+ 9248 7E          >                      ld      a,(hl)
 335+ 9249 5F          >                      ld      e,a
 335+ 924A 23          >                      inc     hl
 335+ 924B 7E          >                      ld      a,(hl)
 335+ 924C 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 924D EB               ex      de,hl
 337+ 924E 3E 01            ld      a,1
 338+ 9250 77               ld      (hl),a
 339+ 9251 C9               ret
 340+ 9252
 341+ 9252              is_key_pressed:                             ; returns z is set if pressed
 342+ 9252                  GetKeyStateAddressDE
 342+ 9252 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 9255 ED 31       >                      add     hl,a
 342+ 9257 7E          >                      ld      a,(hl)
 342+ 9258 5F          >                      ld      e,a
 342+ 9259 23          >                      inc     hl
 342+ 925A 7E          >                      ld      a,(hl)
 342+ 925B 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 925C EB               ex      de,hl
 344+ 925D 7E               ld      a,(hl)                          ; a = keystate
 345+ 925E FE 01            cp      1
 346+ 9260 C9               ret
 347+ 9261
 348+ 9261              is_key_held:                                ; returns z is set if held
 349+ 9261                  GetKeyStateAddressDE
 349+ 9261 21 47 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 349+ 9264 ED 31       >                      add     hl,a
 349+ 9266 7E          >                      ld      a,(hl)
 349+ 9267 5F          >                      ld      e,a
 349+ 9268 23          >                      inc     hl
 349+ 9269 7E          >                      ld      a,(hl)
 349+ 926A 57          >                      ld      d,a                             ; now de = address in keypress list
 350+ 926B EB               ex      de,hl
 351+ 926C 7E               ld      a,(hl)                          ; a = keystate
 352+ 926D E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 353+ 926F FE 02            cp      2
 354+ 9271 C9               ret
 355+ 9272
 356+ 9272              is_any_key_pressed:
 357+ 9272 21 07 91         ld      hl,Keys
 358+ 9275 06 28            ld      b,40
 359+ 9277 0E 00            ld      c,0
 360+ 9279              .KeyReadLoop:
 361+ 9279 7E               ld      a,(hl)
 362+ 927A FE 01            cp      1
 363+ 927C CA 86 92         jp      z,.KeyPressed
 364+ 927F 23               inc     hl
 365+ 9280 0C               inc     c
 366+ 9281 10 F6            djnz    .KeyReadLoop
 367+ 9283 3E FF            ld      a,$FF
 368+ 9285 C9               ret
 369+ 9286              .KeyPressed:
 370+ 9286 79               ld      a,c
 371+ 9287 C9               ret
 372+ 9288
 373+ 9288              is_any_key_held:
 374+ 9288 21 07 91         ld      hl,Keys
 375+ 928B 06 28            ld      b,40
 376+ 928D 0E 00            ld      c,0
 377+ 928F              .KeyReadLoop:
 378+ 928F 7E               ld      a,(hl)
 379+ 9290 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 380+ 9292 FE 02            cp      2
 381+ 9294 CA 9E 92         jp      z,.KeyPressed
 382+ 9297 23               inc     hl
 383+ 9298 0C               inc     c
 384+ 9299 10 F4            djnz    .KeyReadLoop
 385+ 929B 3E FF            ld      a,$FF
 386+ 929D C9               ret
 387+ 929E              .KeyPressed:
 388+ 929E 79               ld      a,c
 389+ 929F C9               ret
 390+ 92A0
 391+ 92A0
 392+ 92A0 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 393+ 92BE 00                                   DB  0               ; end of string marker as a safety
 394+ 92BF 00           InputCursor             DB  0
 395+ 92C0 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 396+ 92C1 00           InputChanged            DB  0
 397+ 92C2              InputLimit              EQU 20
 398+ 92C2
 399+ 92C2              keyboard_copy_input_to_de:
 400+ 92C2 21 A0 92         ld      hl,InputString
 401+ 92C5 3A BF 92         ld      a,(InputCursor)
 402+ 92C8 FE 00            cp      0
 403+ 92CA 28 05            jr      z,.NoString
 404+ 92CC 4F               ld      c,a
 405+ 92CD 06 00            ld      b,0
 406+ 92CF ED B0            ldir
 407+ 92D1              .NoString
 408+ 92D1 3E 00            ld      a,0
 409+ 92D3 12               ld      (de),a
 410+ 92D4 C9               ret
 411+ 92D5
 412+ 92D5              initInputText:
 413+ 92D5 AF               xor     a
 414+ 92D6 32 BF 92         ld      (InputCursor),a
 415+ 92D9 32 C0 92         ld      (EnterPressed),a
 416+ 92DC 32 C1 92         ld      (InputChanged),a
 417+ 92DF 21 A0 92         ld      hl,InputString
 418+ 92E2 06 1E            ld      b,30
 419+ 92E4              .wipeloop:
 420+ 92E4 77               ld      (hl),a
 421+ 92E5 23               inc     hl
 422+ 92E6 10 FC            djnz    .wipeloop
 423+ 92E8 C9               ret
 424+ 92E9
 425+ 92E9              InputName:
 426+ 92E9 AF               xor     a
 427+ 92EA 32 C1 92         ld      (InputChanged),a
 428+ 92ED CD 72 92         call    is_any_key_pressed
 429+ 92F0 FE FF            cp      $FF
 430+ 92F2 C8               ret     z
 431+ 92F3              .KeyPressed:
 432+ 92F3 4F               ld      c,a
 433+ 92F4 3A BF 92         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 434+ 92F7 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 435+ 92F9 28 0B            jr      z,.DeleteOrEnterOnly            ;
 436+ 92FB 21 97 91         ld      hl,ASCII_Map
 437+ 92FE 79               ld      a,c
 438+ 92FF ED 31            add     hl,a
 439+ 9301 7E               ld      a,(hl)
 440+ 9302 FE 41            cp      "A"
 441+ 9304 30 15            jr      nc,.AlphaPressed
 442+ 9306              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 443+ 9306 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 444+ 9308 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 445+ 930A FE 3E            cp      ">"         ; ENTER
 446+ 930C 28 24            jr      z,.EnterPressed
 447+ 930E FE 23            cp      "#"         ; CAPS
 448+ 9310 28 33            jr      z,.CapsPressed
 449+ 9312 FE 5E            cp      "^"         ; SYMBOLSHIFT
 450+ 9314 28 2F            jr      z,.SymbolPressed
 451+ 9316 FE 20            cp      " "         ; space
 452+ 9318 28 2B            jr      z,.SpacePressed
 453+ 931A C9               ret
 454+ 931B              .AlphaPressed:
 455+ 931B 47               ld      b,a
 456+ 931C 3A BF 92         ld      a,(InputCursor)
 457+ 931F 4F               ld      c,a
 458+ 9320 21 A0 92         ld      hl,InputString
 459+ 9323 ED 31            add     hl,a
 460+ 9325 78               ld      a,b
 461+ 9326 70               ld      (hl),b
 462+ 9327 79               ld      a,c
 463+ 9328 21 BF 92         ld      hl,InputCursor
 464+ 932B 34               inc     (hl)
 465+ 932C 3E FF            ld      a,$FF
 466+ 932E 32 C1 92         ld      (InputChanged),a
 467+ 9331 C9               ret
 468+ 9332              .EnterPressed:
 469+ 9332 3A BF 92         ld      a,(InputCursor)
 470+ 9335 3C               inc     a
 471+ 9336 21 A0 92         ld      hl,InputString
 472+ 9339 ED 31            add     hl,a
 473+ 933B AF               xor     a
 474+ 933C 77               ld      (hl),a
 475+ 933D 3D               dec     a
 476+ 933E 32 C0 92         ld      (EnterPressed),a
 477+ 9341 32 C1 92         ld      (InputChanged),a
 478+ 9344 C9               ret
 479+ 9345              .CheckShiftDelete:
 480+ 9345              .CapsPressed:                               ; act as a delete key for now
 481+ 9345              .SymbolPressed:
 482+ 9345              .SpacePressed:
 483+ 9345 3A BF 92         ld      a,(InputCursor)
 484+ 9348 FE 00            cp      0
 485+ 934A C8               ret     z
 486+ 934B 3D               dec     a
 487+ 934C 32 BF 92         ld      (InputCursor),a
 488+ 934F 21 A0 92         ld      hl,InputString
 489+ 9352 ED 31            add     hl,a
 490+ 9354 AF               xor     a
 491+ 9355 77               ld      (hl),a
 492+ 9356 3E FF            ld      a,$FF
 493+ 9358 32 C1 92         ld      (InputChanged),a
 494+ 935B C9               ret
 495+ 935C
 496+ 935C              MovementKeyTest:
 497+ 935C              ;DBG1:jp dbg1
 498+ 935C              ;dbx1:
 499+ 935C AF               xor     a
 500+ 935D 32 6E 94         ld      (CursorKeysPressed),a
 501+ 9360 3A 70 94         ld      a,(MenuIdMax)
 502+ 9363 E6 FC            and     $FC
 503+ 9365 20 26            jr      nz,CursorKeys
 504+ 9367              ClimbDiveKeys:
 505+ 9367 2A 55 91         ld      hl,(addr_Pressed_Climb)
 506+ 936A 7E               ld      a,(hl)
 507+ 936B                  IfAIsZeroGoto ScanDiveKey
 507+ 936B A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 507+ 936C CA 7A 93    >				jp	z, ScanDiveKey
 508+ 936F 3A 6E 94         ld      a,(CursorKeysPressed)
 509+ 9372 F6 80            or      $80
 510+ 9374 32 6E 94         ld      (CursorKeysPressed),a
 511+ 9377 C3 B0 93         jp      ScanLeftKey
 512+ 937A              ScanDiveKey:
 513+ 937A 2A 53 91         ld      hl,(addr_Pressed_Dive)
 514+ 937D 7E               ld      a,(hl)
 515+ 937E                  IfAIsZeroGoto ScanLeftKey
 515+ 937E A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 515+ 937F CA B0 93    >				jp	z, ScanLeftKey
 516+ 9382 3A 6E 94         ld      a,(CursorKeysPressed)
 517+ 9385 F6 40            or      $40
 518+ 9387 32 6E 94         ld      (CursorKeysPressed),a
 519+ 938A C3 B0 93         jp      ScanLeftKey
 520+ 938D              CursorKeys:
 521+ 938D 2A 91 91         ld      hl,(addr_Pressed_CursorUp)
 522+ 9390 7E               ld      a,(hl)
 523+ 9391                  IfAIsZeroGoto ScanCursorDownKey
 523+ 9391 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 9392 CA A0 93    >				jp	z, ScanCursorDownKey
 524+ 9395 3A 6E 94         ld      a,(CursorKeysPressed)
 525+ 9398 F6 80            or      $80
 526+ 939A 32 6E 94         ld      (CursorKeysPressed),a
 527+ 939D C3 B0 93         jp      ScanLeftKey
 528+ 93A0              ScanCursorDownKey
 529+ 93A0 2A 93 91         ld      hl,(addr_Pressed_CursorDown)
 530+ 93A3 7E               ld      a,(hl)
 531+ 93A4                  IfAIsZeroGoto ScanLeftKey
 531+ 93A4 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 531+ 93A5 CA B0 93    >				jp	z, ScanLeftKey
 532+ 93A8 3A 6E 94         ld      a,(CursorKeysPressed)
 533+ 93AB F6 40            or      $40
 534+ 93AD 32 6E 94         ld      (CursorKeysPressed),a
 535+ 93B0              ScanLeftKey:
 536+ 93B0 2A 4F 91         ld      hl,(addr_Pressed_RollLeft)
 537+ 93B3 7E               ld      a,(hl)
 538+ 93B4                  IfAIsZeroGoto ScanRightKey
 538+ 93B4 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 538+ 93B5 CA C1 93    >				jp	z, ScanRightKey
 539+ 93B8 3A 6E 94         ld      a,(CursorKeysPressed)
 540+ 93BB F6 20            or      $20
 541+ 93BD 32 6E 94         ld      (CursorKeysPressed),a
 542+ 93C0 C9               ret
 543+ 93C1              ScanRightKey:
 544+ 93C1 2A 51 91         ld      hl,(addr_Pressed_RollRight)
 545+ 93C4 7E               ld      a,(hl)
 546+ 93C5                  IfAIsZeroGoto ScanHomeKey
 546+ 93C5 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 93C6 CA D2 93    >				jp	z, ScanHomeKey
 547+ 93C9 3A 6E 94         ld      a,(CursorKeysPressed)
 548+ 93CC F6 10            or      $10
 549+ 93CE 32 6E 94         ld      (CursorKeysPressed),a
 550+ 93D1 C9               ret
 551+ 93D2              ScanHomeKey:
 552+ 93D2 2A 6F 91         ld      hl,(addr_Pressed_HomeCursor)
 553+ 93D5 7E               ld      a,(hl)
 554+ 93D6                  IfAIsZeroGoto ScanRecentreKey
 554+ 93D6 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 554+ 93D7 CA E3 93    >				jp	z, ScanRecentreKey
 555+ 93DA 3A 6E 94         ld      a,(CursorKeysPressed)
 556+ 93DD F6 08            or      $08
 557+ 93DF 32 6E 94         ld      (CursorKeysPressed),a
 558+ 93E2 C9               ret
 559+ 93E3              ScanRecentreKey:
 560+ 93E3 2A 8B 91         ld      hl,(addr_Pressed_Recentre)
 561+ 93E6 7E               ld      a,(hl)
 562+ 93E7                  ReturnIfAIsZero
 562+ 93E7 A7          >                 and a
 562+ 93E8 C8          >                 ret    z
 563+ 93E9 3A 6E 94         ld      a,(CursorKeysPressed)
 564+ 93EC F6 04            or      $04
 565+ 93EE 32 6E 94         ld      (CursorKeysPressed),a
 566+ 93F1 C9               ret
 567+ 93F2
 568+ 93F2
# file closed: ./Hardware/keyboard.asm
 858  93F2
 859  93F2                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 93F2              ;Contants
   2+ 93F2
   3+ 93F2              SignMask8Bit		equ %01111111
   4+ 93F2              SignMask16Bit		equ %0111111111111111
   5+ 93F2              SignOnly8Bit		equ $80
   6+ 93F2              SignOnly16Bit		equ $8000
   7+ 93F2
   8+ 93F2              ConstPi				equ $80
   9+ 93F2              ConstNorm           equ 197
  10+ 93F2
  11+ 93F2              ;Text Tokens
  12+ 93F2              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 93F2              BrabenBellToken 	equ $0D
  14+ 93F2              AcorToken			equ $0C
  15+ 93F2
  16+ 93F2              ; Intro Screen
  17+ 93F2              TitleShip			equ	$8C
  18+ 93F2              RotationUnity		equ $60
  19+ 93F2              DBCheckCode			equ $DB
  20+ 93F2              MaxVisibility		equ $1F
  21+ 93F2              FarInFront			equ $C0
  22+ 93F2
  23+ 93F2              ; Universe Managment
  24+ 93F2              ShipTypeStation     equ 2
  25+ 93F2              ShipTypeMissile     equ 1
  26+ 93F2              ShipTypeNormal      equ 0
  27+ 93F2
  28+ 93F2              MaxNumberOfStars	equ 11
  29+ 93F2              UniverseListSize    equ	12
  30+ 93F2              ShipTypeSize		equ	32 			;??????? just a guess for now
  31+ 93F2              ShipSST				equ 4			; its a space station
  32+ 93F2              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  33+ 93F2              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  34+ 93F2              ShipCountMax		equ	2			; For now just 2 ships to debug
  35+ 93F2              LineLimitPerShip	equ 70			; Max lines per ship
  36+ 93F2              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  37+ 93F2              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  38+ 93F2              PlayerDocked		equ	$FF
  39+ 93F2
  40+ 93F2              ; Memory page managment	(Refers to a memory slot as a place to access data)
  41+ 93F2              ShipDataSlot		equ	6			; this may move into rom swap out space later
  42+ 93F2              UniverseObjectSlot	equ	7
  43+ 93F2
  44+ 93F2              KeyForwardsView		equ	$20
  45+ 93F2
  46+ 93F2              ; Ship Data
  47+ 93F2              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  48+ 93F2              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  49+ 93F2              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  50+ 93F2              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  51+ 93F2              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  52+ 93F2              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  53+ 93F2              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  54+ 93F2              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  55+ 93F2              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  56+ 93F2              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  57+ 93F2              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  58+ 93F2              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  59+ 93F2              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  60+ 93F2              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  61+ 93F2              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  62+ 93F2              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  63+ 93F2              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  64+ 93F2              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  65+ 93F2              ;;;;00 00			 EQUW 0     \ type 18 is
  66+ 93F2              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  67+ 93F2              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  68+ 93F2              ;;;;00 00			 EQUW 0     \ type 21 is
  69+ 93F2              ;;;;00 00			 EQUW 0     \ type 22 is
  70+ 93F2              ;;;;00 00			 EQUW 0     \ type 23 is
  71+ 93F2              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  72+ 93F2              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  73+ 93F2              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  74+ 93F2              ;;;;00 00			 EQUW 0     \ type 27 is
  75+ 93F2              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  76+ 93F2              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  77+ 93F2              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  78+ 93F2              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  79+ 93F2              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  80+ 93F2              ;;;;			\ NEWB examples
  81+ 93F2              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  82+ 93F2              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  83+ 93F2              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  84+ 93F2              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  85+ 93F2              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  86+ 93F2
# file closed: ./Variables/constant_equates.asm
 860  93F2                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 93F2              ;	PAGE 0 Map to variable anmes
   2+ 93F2              ;	PAGE 0 Map to variable anmes
   3+ 93F2              ;
   4+ 93F2              ;
   5+ 93F2              ;
   6+ 93F2              ;	06		T1
   7+ 93F2              ;	07
   8+ 93F2              ;	08		SC1					Screen Hi
   9+ 93F2              ;	09							XX16 Matrix
  10+ 93F2              ;	0A							XX16+1
  11+ 93F2              ;	0B							XX16+2
  12+ 93F2              ;	0C							XX16+3
  13+ 93F2              ;	0D                          XX16+4
  14+ 93F2              ;	0E                          XX16+5
  15+ 93F2              ;	0F							XX16+6
  16+ 93F2              ;	10		varP				XX16+7
  17+ 93F2              ;	11		varP				XX16+8
  18+ 93F2              ;	12                          XX16+9
  19+ 93F2              ;	13                          XX16+10
  20+ 93F2              ;	14							XX16+11
  21+ 93F2              ;	15                          XX16+12
  22+ 93F2              ;	16                          XX16+13
  23+ 93F2              ;	17                          XX16+14
  24+ 93F2              ;	17                          XX16+14
  25+ 93F2              ;	18                          XX16+15
  26+ 93F2              ;	19
  27+ 93F2              ;	1A
  28+ 93F2              ;	1B
  29+ 93F2              ;	1C
  30+ 93F2              ;	1D
  31+ 93F2              ;	1E							XX0
  32+ 93F2              ;	1F                          XX0+1
  33+ 93F2              ;	20		INF                 XX0+2
  34+ 93F2              ;	21      INF+1               XX0+3
  35+ 93F2              ;	22      varV                XX0+4
  36+ 93F2              ;	23      varV +1             XX0+5
  37+ 93F2              ;	24		XXlo                XX0+6
  38+ 93F2              ;	25		XXHi
  39+ 93F2              ;	26		YYlo
  40+ 93F2              ;	27		YYHi
  41+ 93F2              ;	28
  42+ 93F2              ;	29
  43+ 93F2              ;	2A		BETA (pitch done)
  44+ 93F2              ;	2B		BET1 lower7 magnitude
  45+ 93F2              ;	2C		XC
  46+ 93F2              ;	2D		YC
  47+ 93F2              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 93F2              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 93F2              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 93F2              ;	30		ECM Active
  51+ 93F2              ;	31		ALP1
  52+ 93F2              ;	32		ALP2
  53+ 93F2              ;	33		ALP2FLIP
  54+ 93F2
  55+ 93F2              ;	36		Z1					XX15+2yscaled
  56+ 93F2              ;	37		                    XX15+3ysign
  57+ 93F2              ;	38		                    XX15+4zscaled
  58+ 93F2              ;	39							XX15+5zsign
  59+ 93F2              ;	3A		XX12				xplot for star
  60+ 93F2              ;	3B
  61+ 93F2              ;	3C
  62+ 93F2              ;	3D
  63+ 93F2              ;	3E
  64+ 93F2              ;	3F
  65+ 93F2              ;	40		varKlo
  66+ 93F2              ;	41		varKmid
  67+ 93F2              ;	42		varKHi
  68+ 93F2              ;	43		varKVeryHi+Sign
  69+ 93F2              ;	44
  70+ 93F2              ;	45		MSTG				MissileTarget
  71+ 93F2              ;	46		INWK				; Inner working space of 37 bytes
  72+ 93F2              ;	47		INWK
  73+ 93F2              ;	48		INWK
  74+ 93F2              ;	49		INWK
  75+ 93F2              ;	4A		INWK
  76+ 93F2              ;	4B		INWK
  77+ 93F2              ;	4C		INWK
  78+ 93F2              ;	4D		INWK
  79+ 93F2              ;	4E		INWK
  80+ 93F2              ;	4F		INWK+9
  81+ 93F2              ;	50		INWK
  82+ 93F2              ;	51		INWK
  83+ 93F2              ;	52		INWK
  84+ 93F2              ;	53		INWK
  85+ 93F2              ;	54		INWK
  86+ 93F2              ;	55		INWK
  87+ 93F2              ;	56		INWK
  88+ 93F2              ;	57		INWK
  89+ 93F2              ;	58		INWK
  90+ 93F2              ;	59		INWK
  91+ 93F2              ;	5A		INWK
  92+ 93F2              ;	5B		INWK
  93+ 93F2              ;	5C		INWK
  94+ 93F2              ;	5D		INWK
  95+ 93F2              ;	5E		INWK
  96+ 93F2              ;	5F		INWK
  97+ 93F2              ;	60		INWK
  98+ 93F2              ;	61		INWK
  99+ 93F2              ;	62		INWK
 100+ 93F2              ;	63		INWK
 101+ 93F2              ;	64		INWK
 102+ 93F2              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 93F2              ;	66		INWK
 104+ 93F2              ;	67		INWK				XX19
 105+ 93F2              ;	68		INWK
 106+ 93F2              ;	69		INWK
 107+ 93F2              ;	6A		INWK36
 108+ 93F2              ;	6B
 109+ 93F2              ;	6C		QQ15				Current Seed
 110+ 93F2              ;	6D		QQ15+1
 111+ 93F2              ;	6E		QQ15+2
 112+ 93F2              ;	6F		QQ15+3
 113+ 93F2              ;	70		QQ15+4
 114+ 93F2              ;	71
 115+ 93F2              ;	72		XX18   xlo			QQ17
 116+ 93F2              ;	73		XX18+1 xhi
 117+ 93F2              ;	74		XX18+2 xsgn
 118+ 93F2              ;	75		XX18   ylo
 119+ 93F2              ;	76		XX18+1 yhi
 120+ 93F2              ;	77		XX18+2 ysgn
 121+ 93F2              ;	78		XX18   zlo
 122+ 93F2              ;	79		XX18+1 zhi
 123+ 93F2              ;	7A		XX18+2 zsgn
 124+ 93F2              ;	7B		BET2				Pitch Sign
 125+ 93F2              ;	7C		BET2FLIP
 126+ 93F2              ;	7D		DELTA
 127+ 93F2              ;	7E		DELT4Lo
 128+ 93F2              ;	7F		DELT4Hi
 129+ 93F2              ;	80
 130+ 93F2              ;	81		varQ
 131+ 93F2              ;	82		varR
 132+ 93F2              ;	83		varS
 133+ 93F2              ;	84		XSAV
 134+ 93F2              ;	85		YSAV
 135+ 93F2              ;	86		XX17
 136+ 93F2              ;	87		MenuIdMax		QQ11
 137+ 93F2              ;	88		ZZDust
 138+ 93F2              ;	89
 139+ 93F2              ;	8A		MCNT			Move Count
 140+ 93F2              ;	8B		ALPHA
 141+ 93F2              ;	8C		TYPE
 142+ 93F2              ;	8D
 143+ 93F2              ;	8E		DockedFlag		QQ12
 144+ 93F2              ;	8F
 145+ 93F2              ;	96		XX4				Nbr of Normals Visible
 146+ 93F2              ;
 147+ 93F2              ;   9F      POINT
 148+ 93F2              ;	D0
 149+ 93F2              ;	D1		varT
 150+ 93F2              ;array list of each face during draw flagged visible or not
 151+ 93F2              ;	D2      XX2
 152+ 93F2              ;	D3      XX2+1
 153+ 93F2              ;	D4      XX2+2
 154+ 93F2              ;	D5      XX2+3
 155+ 93F2              ;	D6      XX2+4
 156+ 93F2              ;	D7      XX2+5
 157+ 93F2              ;	D8      XX2+6
 158+ 93F2              ;	D9      XX2+7
 159+ 93F2              ;	DA      XX2+8
 160+ 93F2              ;	DB      XX2+9
 161+ 93F2              ;	DC      XX2+10
 162+ 93F2              ;	DD      XX2+11
 163+ 93F2              ;	DE      XX2+12
 164+ 93F2              ;	DF		XX2+13
 165+ 93F2              ;	E0		XX2+14
 166+ 93F2              ;	E1		XX2+15
 167+ 93F2              ;	E2
 168+ 93F2              ;	E3
 169+ 93F2              ;	E4
 170+ 93F2              ;	E5
 171+ 93F2              ;	E6
 172+ 93F2              ;	E7
 173+ 93F2              ;	E8
 174+ 93F2              ;	E9
 175+ 93F2              ;	EA
 176+ 93F2              ;	EB
 177+ 93F2              ;	EC
 178+ 93F2              ;	ED
 179+ 93F2              ;	EE
 180+ 93F2              ;	8F
 181+ 93F2
 182+ 93F2 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 93F4 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 93F6              ; Variables to simulate 6502 registers until code fixed
 185+ 93F6              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 93F6 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 93F7 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 93F8 00           regA		DB	0
 189+ 93F9
 190+ 93F9
 191+ 93F9 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 93FA 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 93FC 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 93FE
 195+ 93FE
 196+ 93FE
 197+ 93FE              ;XX16		DS	16				; 16 byte Matrix
 198+ 93FE
 199+ 93FE              P0INWK							; page 0 & 46
 200+ 93FE              p0INWK31						; page 0 & 65
 201+ 93FE              P0INWK36						; PAGE 0 &6A
 202+ 93FE
 203+ 93FE 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 93FF              LastNormalVisible	equ	XX4
 205+ 93FF              varXX4              equ XX4
 206+ 93FF
 207+ 93FF
 208+ 93FF
 209+ 93FF 00           PATG		DB	0				; 6502 &03C9
 210+ 9400 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 9402
 212+ 9402
 213+ 9402              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 9402              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 9402
 216+ 9402              ; Present System Variables
 217+ 9402
 218+ 9402 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 9403 20           RandomSeed1				DB	32	; 01
 220+ 9404 0C           RandomSeed2				DB	12			; 02
 221+ 9405 42           RandomSeed3				DB	66			; 03
 222+ 9406
 223+ 9406 00           varT1					DB	0				; 06
 224+ 9407 00           SClo					DB 0				; 07
 225+ 9408 00           SChi					DB 0				; 08
 226+ 9409 00           varP					DB 0 				; 10	XX16+7
 227+ 940A 00           varPhi					DB 0 				; 11	XX16+8
 228+ 940B 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 940C              varPp1                  equ varPhi
 230+ 940C              varPp2                  equ varPhi2
 231+ 940C 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 940D 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 940E              UnivPointer				equ	UnivPointerLo
 234+ 940E 00           varV					DB 0				; 22                          XX0+4
 235+ 940F 00           varVHi					DB 0				; 23                          XX0+5
 236+ 9410 00           varXXlo                 DB 0                ; 24
 237+ 9411 00           varXXHi                 DB 0                ; 25
 238+ 9412              varXX					equ	varXXlo
 239+ 9412 00           YYlo                    DB 0                ; 26
 240+ 9413 00           YYHi                    DB 0                ; 27
 241+ 9414              varYY					equ	YYlo
 242+ 9414              											;	28
 243+ 9414              											;	29
 244+ 9414              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 9414 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 9415 00           JSTY                    DB  0               ; Joystick analog
 247+ 9416 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 9417 00           BET2                    DB  0               ;            climb sign
 249+ 9418 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 9419 1F           BET1MAXC                DB  31              ; max climb
 251+ 941A E1           BET1MAXD                DB  -31             ; max dive
 252+ 941B 00           XC						DB	0               ; 2C
 253+ 941C 00           YC						DB 	0               ; 2D
 254+ 941D 00           OuterHyperCount			DB 	0				; 2E		TODO Replace with 16 bit counter later
 255+ 941E 00           InnerHyperCount			DB 	0				; 2F
 256+ 941F 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 9420 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 9422 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 259+ 9423 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 260+ 9424 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 9425 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 9426 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 9427 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 9428
 265+ 9428 00 00        MissileTarget			DW	0				; 45
 266+ 942A 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 267+ 944F
 268+ 944F              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 269+ 944F              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 270+ 944F              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 271+ 944F 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 272+ 9450              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 273+ 9450
 274+ 9450
 275+ 9450 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 276+ 9455              											;	6D		QQ15+1
 277+ 9455              											;	6E		QQ15+2
 278+ 9455              											;	6F		QQ15+3
 279+ 9455              											;	70		QQ15+4
 280+ 9455              											;	71		QQ15+5
 281+ 9455 00           QQ17					DB	0				;   72
 282+ 9456 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 283+ 9457 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 284+ 9458 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 285+ 9459 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 286+ 945A 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 287+ 945B 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 288+ 945C 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 289+ 945D 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 290+ 945E 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 291+ 945F
 292+ 945F 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 293+ 9460 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 294+ 9461 00           DELT4Lo					DB 	0				; 7E
 295+ 9462 00           DELT4Hi					DB 	0				; 7F
 296+ 9463              DELTA4                  equ                 DELT4Lo
 297+ 9463
 298+ 9463
 299+ 9463              ; Not thise must be in this order else 16 bit fetches will fail
 300+ 9463 00           varU                    DB  0               ;   80
 301+ 9464 00           varQ					DB  0 				;	81
 302+ 9465 00           varR					DB  0 				;	82
 303+ 9466 00           varS					DB  0 				;	83
 304+ 9467              varRS                   equ varR
 305+ 9467
 306+ 9467 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 307+ 9469
 308+ 9469 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 309+ 946A 00           YSAV                    DB  0               ; 85
 310+ 946B 00           XX17					DB	0				; 86
 311+ 946C              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 312+ 946C              varXX17                 equ  XX17
 313+ 946C 00           ScreenChanged           DB  0
 314+ 946D 00           ScreenIndex             DB  0
 315+ 946E 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 316+ 946F                                                          ; 7    6    5    4     3    2        1    0
 317+ 946F                                                          ; Up   Down Left Right Home Recentre
 318+ 946F 00           InvertedYAxis           DB  0
 319+ 9470 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 320+ 9471              											; Bit 7 Set  ShortRangeChart    $80
 321+ 9471              											; Bit 6 Set  Galactic Chart     $40
 322+ 9471              											; Bit 5 Set  Market Place       $20
 323+ 9471              											; Bit 4 Set  Status Screen      $10
 324+ 9471              											; Bit 3 Set  Display Inventory  $08
 325+ 9471                                                          ; Bit 2 Set  Planet Data        $04
 326+ 9471                                                          ; View bit combinations if the ones above not matched
 327+ 9471                                                          ; bits 1 0
 328+ 9471                                                          ;      1 1  Front view , i.e. $03
 329+ 9471                                                          ;      1 0  Aft View          $02
 330+ 9471                                                          ;      0 1  Left View         $01
 331+ 9471                                                          ;      0 0  Right view        $00
 332+ 9471              											; Bit 0 Set  Data On System
 333+ 9471              											; 0  Space View (Not a menu)
 334+ 9471 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 335+ 9472 00           XX13                    DB  0               ;   89
 336+ 9473 00           MCNT					DB 	0				; 8A
 337+ 9474 00           TYPE					DB	0				; 8C used for ship type in drawing
 338+ 9475 00           DockedFlag				DB	0				; 8E - Docked flag = 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 339+ 9476 00           GamePaused              DB  0
 340+ 9477 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 341+ 9478 00           varCNT                  DB  0               ; 93
 342+ 9479 00           varRAT                  DB  0               ; 99
 343+ 947A 00           varRAT2                 DB  0               ; 9A
 344+ 947B
 345+ 947B 00           varK					DB	0				; 40
 346+ 947C 00           varKp1					DB	0				; 41
 347+ 947D 00           varKp2					DB	0				; 42
 348+ 947E 00           varKp3					DB	0				; 43
 349+ 947F
 350+ 947F 00           varK2                   DB  0               ; 9B
 351+ 9480 00           varK2p1                 DB  0               ; 9C K2 plus 1
 352+ 9481 00           varK2p2                 DB  0               ; 9D K2 plus 2
 353+ 9482 00           varK2p3                 DB  0               ; 9E K2 plus 3
 354+ 9483
 355+ 9483 00           Point                   DB  0               ; 9F      POINT
 356+ 9484
 357+ 9484 00           varT					DB	0				; D1
 358+ 9485
 359+ 9485 00 00 00...  varVector9ByteWork      DS  9
 360+ 948E
 361+ 948E 00 00 00 00  varK3					DS	4				; D2
 362+ 9492 00           varK3p2					DB	0				; 42
 363+ 9493 00           varK3p3					DB	0				; 43
 364+ 9494              varK3p1					equ varK3+1			; D3
 365+ 9494 00 00 00 00  varK4					DS	4				; E0
 366+ 9498              varK4p1					equ varK4+1			; D3
 367+ 9498
 368+ 9498              ;PlayerData:
 369+ 9498 00           PlayerForwardSheild0	DB	0 ; ?????
 370+ 9499 00           PlayerForwardSheild1    DB	0
 371+ 949A 00           PlayerForwardSheild2    DB	0
 372+ 949B
 373+ 949B
 374+ 949B              ;Heap
 375+ 949B
 376+ 949B 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 377+ 949D 00 00 00...  HeapData				DS	50
 378+ 94CF              ; Contains 				X 16 bit, Y 16 bit
 379+ 94CF              ;RuntimeData:
 380+ 94CF              HeapHead				equ HeapStart
 381+ 94CF
 382+ 94CF              ; For the UniverseSlot list, for an optimisation the type slot will be the ship type, e.g. ship type this will optimise searching for a station or star
 383+ 94CF              ; bit 7 will be set for a sun or planet so we can only ever have 128 types of ship, in relality there are about 3 types
 384+ 94CF              ; note this is ship type as it space station, transporter, pirate etc not model of ship
 385+ 94CF 00 00 00...  UniverseSlotList		DS UniverseListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 386+ 94DB 00 00 00...  UniverseSlotCount       DS UniverseListSize * 2 ; To be implemented, keeps a count of each slot type, may merge into slot list and set as a DW
 387+ 94F3 00           CurrentUniverseAI       DB  0               ; used to cycle ships in each iterations of main loop
 388+ 94F4 00           SelectedUniverseSlot    DB  0
 389+ 94F5 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 390+ 94F6 00           MANY					DB	0				; &031E array of ship types???
 391+ 94F7 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 392+ 94F8 00           						DB	0				; &0321	Speculative?
 393+ 94F9 00           						DB	0				; &0322	Speculative?
 394+ 94FA 00           						DB	0				; &0323	Speculative?
 395+ 94FB 00           						DB	0				; &0324	Speculative?
 396+ 94FC 00           						DB	0				; &0325	Speculative?
 397+ 94FD 00           						DB	0				; &0326	Speculative?
 398+ 94FE 00           						DB	0				; &0327	Speculative?
 399+ 94FF 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 400+ 9500 00           						DB	0				; &0329	MANY + 11 Speculative?
 401+ 9501 00           				        DB	0				; &032A	MANY + 12 Speculative?
 402+ 9502 00           				        DB	0				; &032B	MANY + 13 Speculative?
 403+ 9503 00           				        DB	0				; &032C	MANY + 14 Speculative?
 404+ 9504 00           				        DB	0				; &032D	MANY + 15 Speculative?
 405+ 9505 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 406+ 9506 00           				        DB	0				; &032F	MANY + 17 Speculative?
 407+ 9507 00           				        DB	0				; &0330	MANY + 18 Speculative?
 408+ 9508 00           				        DB	0				; &0331	MANY + 19 Speculative?
 409+ 9509 00           						DB	0				; &0332	MANY + 20 Speculative?
 410+ 950A 00           				        DB	0				; &0333	MANY + 21 Speculative?
 411+ 950B 00           				        DB	0				; &0334	MANY + 22 Speculative?
 412+ 950C 00           				        DB	0				; &0335	MANY + 23 Speculative?
 413+ 950D 00           				        DB	0				; &0336	MANY + 24 Speculative?
 414+ 950E 00           				        DB	0				; &0337	MANY + 25 Speculative?
 415+ 950F 00           				        DB	0				; &0338	MANY + 26 Speculative?
 416+ 9510 00           				        DB	0				; &0339	MANY + 27 Speculative?
 417+ 9511 00           				        DB	0				; &033A	MANY + 28 Speculative?
 418+ 9512 00           				        DB	0				; &033B	MANY + 29 Speculative?
 419+ 9513 00           				        DB	0				; &033C	MANY + 30 Thargoids
 420+ 9514 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 421+ 9515 00           JunkCount				DB  0				; $033E
 422+ 9516 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 423+ 9517 00           CabinTemp				DB	0				; $0342
 424+ 9518 00           MissileArmedStatus		DB	0				; 0344 MSAR
 425+ 9519 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 426+ 951A 00           GunTemperature			DB	0				; 0347	GNTMP
 427+ 951B 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 428+ 951C 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 429+ 951D 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 430+ 951E 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 431+ 951F 00           JoystickX				DB	0				; 034C JSTX
 432+ 9520 00           JoystickY				DB	0				; 034D JSTY
 433+ 9521 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 434+ 9522 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 435+ 9523 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 436+ 952B 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 437+ 952C 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 438+ 952D              											; Bit mask XXXX10XX - Thargoid plan mission
 439+ 952D 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 440+ 952E 00           PresentSystemY			DB  0
 441+ 952F 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 442+ 9535 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 443+ 9536 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 444+ 9537              ;036C to D???
 445+ 9537 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 446+ 953E              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 447+ 953E              ;  #&5 Does J reverse both joystick channels
 448+ 953E              ;  #&4 Does Y reverse joystick Y channel			03CB
 449+ 953E              ;  #&3 Does F toggle flashing information			03CA
 450+ 953E              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 451+ 953E              ;  #&1 Does A toggle keyboard auto-recentering ?
 452+ 953E              ;  #&0 Caps-lock toggles keyboard flight damping
 453+ 953E 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 454+ 953F 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 455+ 9540 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 456+ 9550 00           AlienItemsAvaliability  DB	0				; 039D
 457+ 9551 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 458+ 9552 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 459+ 9554 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 460+ 9555              											;
 461+ 9555 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 462+ 9556 00           ForeShield				DB	0				; 03A5
 463+ 9557 00           AftShield				DB	0				; 03A6
 464+ 9558 00           PlayerEnergy			DB	0				; 03A7
 465+ 9559 00           CompassX				DB	0				; 03A8
 466+ 955A 00           CompassY				DB	0				; 03A9
 467+ 955B 00           MarketPrice				DB	0				; 03AA QQ24
 468+ 955C 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 469+ 955D 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 470+ 955E 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 471+ 955F 00           GovPresentSystem		DB	0				; 03AE Govenment
 472+ 9560 00           TekPresentSystem		DB	0				; 03AF Technology
 473+ 9561 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 474+ 9563              											; this is ship lines stack pointer so may be redundant with paging
 475+ 9563              											; LS = line stack so we will have one for now to remove later
 476+ 9563 00 00 00...  WorkingSeeds			DS	6
 477+ 9569 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 478+ 956F 00           DisplayEcononmy			DB	0				; 03B8
 479+ 9570 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 480+ 9571 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 481+ 9572 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 482+ 9574 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 483+ 9576 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 484+ 9578 00 00        DisplayRadius			DW	0
 485+ 957A 00           TargetPlanetX			DB	0               ; 03C1
 486+ 957B 00           TargetPlanetY			DB	0               ; 03C2
 487+ 957C 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 488+ 957D 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 489+ 957E 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 490+ 957F
 491+ 957F 00           CompassColor			DB	0				; 03C5
 492+ 9580 00           SoundToggle				DB	0				; 03C6
 493+ 9581 00           KeyboardRecenterToggle	DB	0				; 03C8
 494+ 9582 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 495+ 9583 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 496+ 9584 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 497+ 9585 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 498+ 9586 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 499+ 9587 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 500+ 9588
 501+ 9588              ; Working Data
 502+ 9588
 503+ 9588              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 504+ 9588              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 505+ 9588              ; $0925 =	EQUW page9+37* 1
 506+ 9588              ; $094A =	EQUW page9+37* 2
 507+ 9588              ; $096F =	EQUW page9+37* 3
 508+ 9588              ; $0994 =	EQUW page9+37* 4
 509+ 9588              ; $09B9 =	EQUW page9+37* 5
 510+ 9588              ; $09DE =	EQUW page9+37* 6
 511+ 9588              ; $0A03 =	EQUW page9+37* 7
 512+ 9588              ; $0A28 =	EQUW page9+37* 8
 513+ 9588              ; $0A4D =	EQUW page9+37* 9
 514+ 9588              ; $0A72 =	EQUW page9+37*10
 515+ 9588              ; $0A97 =	EQUW page9+37*11
 516+ 9588              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 517+ 9588
 518+ 9588
 519+ 9588
 520+ 9588              ; 0b00 is start address of data to save
 521+ 9588 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 522+ 9589
 523+ 9589 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 524+ 958B 00 00        CommanderLoadAddress	DW	0				;0C03
 525+ 958D 00 00        LengthOfFile			DW	0				;0C0B
 526+ 958F 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 527+ 9591
 528+ 9591 00 00 00...  EdgesBuffer				DS 50
 529+ 95C3              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 530+ 95C3              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 531+ 95C3
 532+ 95C3 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 533+ 9609              ShipLineStackTop		equ $ - ShipLineStack
 534+ 9609
 535+ 9609 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 536+ 96C9              ; LSX vector overlaps with LSO
 537+ 96C9 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 538+ 96CA 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 539+ 96CB
 540+ 96CB              ; Star Positions are 16 bit 3d coordinates
 541+ 96CB 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 542+ 970D 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 543+ 9723 00           varStarX                DB  0
 544+ 9724 00           varStarY                DB  0
 545+ 9725 00 00 00...  varDustX                DS MaxNumberOfStars *2
 546+ 973B 00 00 00...  varDustY                DS MaxNumberOfStars *2
 547+ 9751 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 548+ 9767
 549+ 9767
 550+ 9767              SpeedoStart             equ $84D1
 551+ 9767 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 551+ 976B 04 04 05 06
 551+ 976F 06 07 08 09
 551+ 9773 0A 0A 0B 0C
 551+ 9777 0D 0E 0E 0F
 551+ 977B 10 10 11 12
 551+ 977F 13 14 14 15
 551+ 9783 16 17 18 18
 551+ 9787 19 1A 1A 1B
 551+ 978B 1C 1C 1D 1E
 551+ 978F 1F
 552+ 9790
 553+ 9790              DialMiddleXPos          equ $E1
 554+ 9790              RollMiddle              equ $8AE0
 555+ 9790              PitchMiddle             equ $92E0
 556+ 9790
 557+ 9790
 558+ 9790
 559+ 9790              MakeInnocentMacro:		MACRO
 560+ 9790 ~            						xor		a
 561+ 9790 ~            						ld		(FugitiveInnocentStatus),a
 562+ 9790              						ENDM
 563+ 9790
 564+ 9790              NoEscapePodMacro:		MACRO
 565+ 9790 ~            						xor		a
 566+ 9790 ~            						ld		(EscapePod),a
 567+ 9790              						ENDM
 568+ 9790
 569+ 9790              MaxFuelLevel            EQU     $46
 570+ 9790              MaxFuelMacro:			MACRO
 571+ 9790 ~            						ld		a,MaxFuelLevel
 572+ 9790 ~            						ld		(Fuel),a
 573+ 9790              						ENDM
 574+ 9790
 575+ 9790              MaxThrottle:            MACRO
 576+ 9790 ~                                    ld      a,(SHIPMAXSPEED)
 577+ 9790 ~                                    ld      (DELTA),a
 578+ 9790 ~                                    ld      d,a
 579+ 9790 ~                                    ld      e,4
 580+ 9790 ~                                    mul
 581+ 9790 ~                                    ld      (DELT4Lo),de
 582+ 9790                                      ENDM
 583+ 9790
 584+ 9790              ZeroThrottle:           MACRO
 585+ 9790 ~                                    xor     a
 586+ 9790 ~                                    ld      (DELTA),a
 587+ 9790 ~                                    ld      (DELT4Lo),a
 588+ 9790 ~                                    ld      (DELT4Lo+1),a
 589+ 9790                                      ENDM
 590+ 9790
# file closed: ./Variables/general_variables.asm
 861  9790
 862  9790                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9790 AF           ClearSlotCount:         xor     a
   2+ 9791 21 DB 94                             ld      hl,UniverseSlotCount
   3+ 9794 06 18                                ld      b, UniverseListSize * 2
   4+ 9796 77           .fillLoop:              ld      (hl),a
   5+ 9797 23                                   inc     hl
   6+ 9798 10 FC                                djnz    .fillLoop
   7+ 979A C9                                   ret
   8+ 979B
   9+ 979B              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 979B              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 979B CD 90 97     CorrectSlotCount:       call    ClearSlotCount
  12+ 979E 21 DB 94                             ld      hl,UniverseSlotCount
  13+ 97A1 11 CF 94                             ld      de,UniverseSlotList
  14+ 97A4 06 0C                                ld      b,UniverseListSize
  15+ 97A6 1A           .fillLoop:              ld      a,(de)
  16+ 97A7 FE FF                                cp      $FF
  17+ 97A9 28 05                                jr      z,.SkipSlot
  18+ 97AB 77           .CorrectSlot:           ld      (hl),a
  19+ 97AC 23                                   inc     hl
  20+ 97AD 36 01                                ld      (hl),1
  21+ 97AF 23                                   inc     hl
  22+ 97B0 13           .SkipSlot               inc     de
  23+ 97B1 10 F3                                djnz    .fillLoop
  24+ 97B3 C9                                   ret
  25+ 97B4
  26+ 97B4
  27+ 97B4
  28+ 97B4              ; Wipe all items
  29+ 97B4 3E FF        ClearUnivSlotList:      ld      a,$FF
  30+ 97B6 21 CF 94                             ld      hl,UniverseSlotList
  31+ 97B9 06 0C                                ld      b, UniverseListSize
  32+ 97BB 77           .fillLoop:              ld      (hl),a
  33+ 97BC 23                                   inc     hl
  34+ 97BD 10 FC                                djnz    .fillLoop
  35+ 97BF C9                                   ret
  36+ 97C0
  37+ 97C0 21 CF 94     SetSlotAToSpaceStation: ld      hl,UniverseSlotList
  38+ 97C3 ED 31                                add     hl,a
  39+ 97C5 36 02                                ld      (hl),ShipTypeStation
  40+ 97C7 C9                                   ret
  41+ 97C8
  42+ 97C8 21 CF 94     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 97CB ED 31                                add     hl,a
  44+ 97CD 70                                   ld      (hl),b
  45+ 97CE C9                                   ret
  46+ 97CF
  47+ 97CF              ; Clears all except slot A, used when say restarting a space station post launch
  48+ 97CF 57           ClearFreeSlotListSaveA: ld      d,a
  49+ 97D0 0E 00                                ld      c,0
  50+ 97D2 21 CF 94                             ld      hl,UniverseSlotList
  51+ 97D5 06 0C                                ld      b, UniverseListSize
  52+ 97D7 79           .fillLoop:              ld      a,c
  53+ 97D8 BA                                   cp      d
  54+ 97D9 28 03                                jr      z,.SkipSlot
  55+ 97DB 3E FF                                ld      a,$FF
  56+ 97DD 77                                   ld      (hl),a
  57+ 97DE 23           .SkipSlot:              inc     hl
  58+ 97DF 10 F6                                djnz    .fillLoop
  59+ 97E1 C9                                   ret
  60+ 97E2
  61+ 97E2 21 CF 94     SetSlotAOccupiedByB:    ld      hl,UniverseSlotList
  62+ 97E5 ED 31                                add     hl,a
  63+ 97E7 78                                   ld      a,b
  64+ 97E8 70                                   ld      (hl),b
  65+ 97E9 C9                                   ret
  66+ 97EA
  67+ 97EA 21 CF 94     FindSpaceStationSlotInC:ld      hl,UniverseSlotList
  68+ 97ED 06 0C                                ld      b,UniverseListSize
  69+ 97EF 0E 00                                ld      c,0
  70+ 97F1 7E           .SearchLoop:            ld      a,(hl)
  71+ 97F2                                      JumpIfAEqNusng ShipTypeStation, .FoundSlot
  71+ 97F2 FE 02       >                cp     ShipTypeStation
  71+ 97F4 CA FD 97    >                jp      z,.FoundSlot
  72+ 97F7 0C                                   inc     c
  73+ 97F8 23                                   inc     hl
  74+ 97F9 10 F6                                djnz    .SearchLoop
  75+ 97FB                                      SetCarryFlag
  75+ 97FB 37          >                        scf
  76+ 97FC C9                                   ret
  77+ 97FD              .FoundSlot:             ClearCarryFlag
  77+ 97FD B7          >                        or a
  78+ 97FE C9                                   ret
  79+ 97FF
  80+ 97FF 21 CF 94     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  81+ 9802 ED 31                                add     hl,a
  82+ 9804 7E                                   ld      a,(hl)
  83+ 9805 C9                                   ret
  84+ 9806
  85+ 9806 CD EA 97     FindSpaceStationSlotInA:call    FindSpaceStationSlotInC
  85+ 9809
  86+ 9809 79                                   ld      a,c
  87+ 980A C9                                   ret
  88+ 980B
  89+ 980B
  90+ 980B 21 CF 94     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
  91+ 980E 06 0C                                ld      b, UniverseListSize
  92+ 9810 0E 00                                ld      c, 0
  93+ 9812 7E           .SearchLoop:            ld      a,(hl)
  94+ 9813                                      JumpIfAEqNusng $FF, .FoundSlot
  94+ 9813 FE FF       >                cp     $FF
  94+ 9815 CA 1E 98    >                jp      z,.FoundSlot
  95+ 9818 0C                                   inc     c
  96+ 9819 23                                   inc     hl
  97+ 981A 10 F6                                djnz    .SearchLoop
  98+ 981C                                      SetCarryFlag
  98+ 981C 37          >                        scf
  99+ 981D C9                                   ret
 100+ 981E              .FoundSlot:             ClearCarryFlag
 100+ 981E B7          >                        or a
 101+ 981F C9                                   ret
 102+ 9820
 103+ 9820 CD 0B 98     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 104+ 9823 79                                   ld      a,c
 105+ 9824 C9                                   ret
 106+ 9825
# file closed: ./Variables/UniverseSlotRoutines.asm
 863  9825
 864  9825                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9825 00           AutoDocking				DB	0				; $033F
   2+ 9826 00           PlayerECM				DB	0				; $0340
   3+ 9827 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 9828 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 9829 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 982D 19           Fuel					DB	25				; 0365  QQ14
   7+ 982E 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 9832 46           CargoBaySize			DB	70				; 036E
   9+ 9833 00           CargoRunningLoad        DB  0
  10+ 9834 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9838 00 00 00 00
  10+ 983C 00 00 00 00
  10+ 9840 00 00 00 00
  11+ 9844              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9844              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9844              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9844              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9844
  16+ 9844              QQ20                    equ CargoTonnes
  17+ 9844 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  18+ 985E              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  19+ 985E              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  20+ 985E              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  21+ 985E              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  22+ 985E              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  23+ 985E              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  24+ 985E 01           FuelScoopsBarrelStatus	DB	1				; 0381
  25+ 985F
# file closed: ./Variables/EquipmentVariables.asm
 865  985F
 866  985F                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 985F              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 985F              doRND2:
   3+ 985F A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9860              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9860              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9860 3A 02 94     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9863 CB 17                                rl		a								; Rotate L including carry
   8+ 9865 4F                                   ld		c,a								; c =  double lo
   9+ 9866 21 04 94     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9869 8E                                   adc		a,(hl)							; RAND+2
  11+ 986A 32 02 94     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 986D 08           .SaveBtoSeed2:          ex		af,af'
  13+ 986E 79                                   ld		a,c
  14+ 986F 32 04 94                             ld		(RandomSeed2),a
  15+ 9872 08                                   ex		af,af'
  16+ 9873 3A 03 94                             ld		a,(RandomSeed1)
  17+ 9876 4F                                   ld		c,a								; C = Seed1
  18+ 9877 21 05 94     .AddSeed3:              ld		hl,RandomSeed3
  19+ 987A 8E                                   adc		a,(hl)
  20+ 987B 32 03 94                             ld		(RandomSeed1),a
  21+ 987E 08                                   ex		af,af'
  22+ 987F 79                                   ld		a,c
  23+ 9880 32 05 94                             ld		(RandomSeed3),a
  24+ 9883 08                                   ex		af,af'
  25+ 9884 C9                                   ret
  26+ 9885
  27+ 9885              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9885 06 04        	ld		b,4
  29+ 9887 21 FF C1     	ld		hl,UbnkLineArray				; line data
  30+ 988A              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 988A              EE55:
  32+ 988A CD 60 98     	call	doRND							; get random
  33+ 988D 77           	ld		(hl),a							; (XX19),Y
  34+ 988E 23           	inc		hl
  35+ 988F 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9891 C9               ret
  37+ 9892
# file closed: ./Variables/random_number.asm
 867  9892                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9892 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9896 58 59 53 45
   1+ 989A 45 44
   2+ 989C 21 2F 95     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 989F 11 50 94                             ld		de,SystemSeed
   4+ 98A2 ED A0        copy_seed:		        ldi
   5+ 98A4 ED A0                                ldi
   6+ 98A6 ED A0                                ldi
   7+ 98A8 ED A0                                ldi
   8+ 98AA ED A0                                ldi
   9+ 98AC ED A0                                ldi
  10+ 98AE C9                                   ret
  11+ 98AF
  12+ 98AF 21 50 94     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 98B2 11 2F 95                             ld		de,GalaxySeeds
  14+ 98B5 18 EB                                jr		copy_seed
  15+ 98B7
  16+ 98B7 21 2F 95     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 98BA 11 63 95                             ld		de,WorkingSeeds
  18+ 98BD 18 E3                                jr		copy_seed
  19+ 98BF
  20+ 98BF 21 63 95     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 98C2 11 2F 95                             ld		de,GalaxySeeds
  22+ 98C5 18 DB                                jr		copy_seed
  23+ 98C7
  24+ 98C7 21 63 95     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 98CA 11 50 94                             ld		de,SystemSeed
  26+ 98CD 18 D3                                jr		copy_seed
  27+ 98CF
  28+ 98CF 21 50 94     copy_system_to_working: ld		hl,SystemSeed
  29+ 98D2 11 63 95                             ld		de,WorkingSeeds
  30+ 98D5 18 CB                                jr		copy_seed
  31+ 98D7
  32+ 98D7              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 98D7 CD DA 98     		call	.NextStep					; This logic means we hard code x4
  34+ 98DA              .NextStep:
  35+ 98DA CD DD 98     		call	process_seed				; This logic means we hard code x2
  36+ 98DD              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 98DD 3A 50 94     		ld		a,(SystemSeed)				; QQ15
  38+ 98E0 B7           		or		a							; clear carry flag
  39+ 98E1 21 52 94     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 98E4 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 98E5 47           		ld		b,a							; partial sum lo
  42+ 98E6 3A 51 94     		ld		a,(SystemSeed+1)
  43+ 98E9 21 53 94     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 98EC 8E           		adc		a,(hl)						; note add with carry
  45+ 98ED 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 98EE 3A 52 94     		ld		a,(SystemSeed+2)
  47+ 98F1 32 50 94     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 98F4 3A 53 94     		ld		a,(SystemSeed+3)
  49+ 98F7 32 51 94     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 98FA 3A 55 94     		ld		a,(SystemSeed+5)
  51+ 98FD 32 53 94     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9900 3A 54 94     		ld		a,(SystemSeed+4)
  53+ 9903 32 52 94     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 9906 B7           		or		a
  55+ 9907 78           		ld		a,b
  56+ 9908 21 52 94     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 990B 86           		add	    a,(hl)
  58+ 990C 32 54 94     		ld		(SystemSeed+4),a
  59+ 990F 79           		ld		a,c
  60+ 9910 21 53 94     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 9913 8E           		adc		a,(hl)
  62+ 9914 32 55 94     		ld		(SystemSeed+5),a
  63+ 9917 C9           		ret
  64+ 9918
  65+ 9918              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 9918 CD 1B 99     		call	.NextStep					; This logic means we hard code x4
  67+ 991B              .NextStep:
  68+ 991B CD 1E 99     		call	working_seed				; This logic means we hard code x2
  69+ 991E              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 991E              ; x = a + c
  71+ 991E 3A 63 95     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9921 B7           		or		a							; clear carry flag
  73+ 9922 21 65 95     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9925 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 9926 47           		ld		b,a							; partial sum lo [x]
  76+ 9927              ; y = b + d	+ carry
  77+ 9927 3A 64 95     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 992A 21 66 95     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 992D 8E           		adc		a,(hl)						; note add with carry
  80+ 992E 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 992F 3A 65 95     		ld		a,(WorkingSeeds+2)
  82+ 9932 32 63 95     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9935 3A 66 95     		ld		a,(WorkingSeeds+3)
  84+ 9938 32 64 95     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 993B 3A 68 95     		ld		a,(WorkingSeeds+5)
  86+ 993E 32 66 95     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 9941 3A 67 95     		ld		a,(WorkingSeeds+4)
  88+ 9944 32 65 95     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9947 B7           		or		a
  90+ 9948 78           		ld		a,b
  91+ 9949 21 65 95     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 994C 86           		add	    a,(hl)
  93+ 994D 32 67 95     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 9950 79           		ld		a,c
  95+ 9951 21 66 95     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9954 8E           		adc		a,(hl)
  97+ 9955 32 68 95     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9958 C9           		ret
  99+ 9959
 100+ 9959 32           working_distX	DB 50
 101+ 995A 32           working_distY	DB 50
 102+ 995B 00           current_distY	DB 0
 103+ 995C
 104+ 995C AF           find_present_system:    xor		a
 105+ 995D 32 69 94                             ld		(XSAV),a
 106+ 9960              .CounterLoop:
 107+ 9960 3A 51 94     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 108+ 9963 4F           	ld		c,a
 109+ 9964              .calcLocaldy:
 110+ 9964 3A 2E 95     	ld		a,(PresentSystemY)
 111+ 9967 47           	ld		b,a								; so b holds Y ccord
 112+ 9968 79           	ld		a,c
 113+ 9969 90           	sub		b
 114+ 996A CB 7F        	bit		7,a
 115+ 996C 28 02        	jr		z,.positivedy
 116+ 996E              .negativedy:
 117+ 996E ED 44        	neg
 118+ 9970              .positivedy:
 119+ 9970 32 5B 99     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 120+ 9973 ED 5B 59 99  	ld		de,(working_distX)
 121+ 9977 BA           	cp		d
 122+ 9978 30 24        	jr		nc,.toofar
 123+ 997A              .calcLocaldx:
 124+ 997A 3A 53 94     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 125+ 997D 4F           	ld		c,a
 126+ 997E 3A 2D 95     	ld		a,(PresentSystemX)
 127+ 9981 47           	ld		b,a								; so b holds Y ccord
 128+ 9982 79           	ld		a,c
 129+ 9983 90           	sub		b
 130+ 9984 CB 7F        	bit		7,a
 131+ 9986 28 02        	jr		z,.positivedx
 132+ 9988              .negativedx:
 133+ 9988 ED 44        	neg
 134+ 998A              .positivedx:
 135+ 998A 4F           	ld		c,a
 136+ 998B BB           	cp		e
 137+ 998C 30 10        	jr		nc,.toofar
 138+ 998E              .Nearer:									; we have a closer system
 139+ 998E 3A 5B 99     	ld		a,(current_distY)
 140+ 9991 47           	ld		b,a								; we have c to recall Y into b
 141+ 9992 ED 43 59 99  	ld		(working_distX),bc
 142+ 9996 C5           	push	bc
 143+ 9997 CD CF 98     	call 	copy_system_to_working
 144+ 999A C1           	pop		bc
 145+ 999B 78           	ld		a,b								;
 146+ 999C B1           	or		c								;
 147+ 999D C8           	ret		z								; if we have distance 0 then bang on
 148+ 999E              .toofar:
 149+ 999E CD D7 98     	call	next_system_seed
 150+ 99A1 3A 69 94     	ld		a,(XSAV)
 151+ 99A4 3D           	dec		a
 152+ 99A5 FE 00        	cp		0
 153+ 99A7 C8           	ret		z
 154+ 99A8 32 69 94     	ld		(XSAV),a
 155+ 99AB 18 B3        	jr		.CounterLoop
 156+ 99AD
 157+ 99AD
 158+ 99AD              get_planet_data_working_seed:
 159+ 99AD 3A 64 95     		ld		a, (WorkingSeeds+1)
 160+ 99B0 E6 07        		and		7
 161+ 99B2 32 6F 95     		ld		(DisplayEcononmy),a
 162+ 99B5 3A 65 95     		ld		a, (WorkingSeeds+2)
 163+ 99B8 CB 3F        		srl	a
 164+ 99BA CB 3F        		srl	a
 165+ 99BC CB 3F        		srl	a
 166+ 99BE CB 3F        		srl	a								; c/8
 167+ 99C0 E6 07        		and		7
 168+ 99C2 32 70 95     		ld		(DisplayGovernment),a
 169+ 99C5 CB 3F        		srl	a
 170+ 99C7 FE 00        		cp		0
 171+ 99C9 20 08        		jr		nz,.CanBeRich
 172+ 99CB              .Fedual:
 173+ 99CB 3A 6F 95     		ld		a,(DisplayEcononmy)
 174+ 99CE F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 175+ 99D0 32 6F 95     		ld		(DisplayEcononmy),a
 176+ 99D3              .CanBeRich:
 177+ 99D3 3A 6F 95     		ld		a,(DisplayEcononmy)
 178+ 99D6 EE 07        		xor		7							; flip economy so Rich is now 7
 179+ 99D8 32 71 95     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 180+ 99DB 47           		ld		b,a
 181+ 99DC 3A 66 95     		ld		a,(WorkingSeeds+3)
 182+ 99DF E6 03        		and		3
 183+ 99E1 80           		add		a,b
 184+ 99E2 32 71 95     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 185+ 99E5 3A 70 95     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 186+ 99E8 CB 3F        		srl		a 							; gov/2
 187+ 99EA 47           		ld		b,a
 188+ 99EB 3A 71 95     		ld		a,(DisplayTekLevel)
 189+ 99EE 80           		add		a,b
 190+ 99EF 32 71 95     		ld		(DisplayTekLevel),a			; Tek += gov /2
 191+ 99F2 CB 27        		sla		a
 192+ 99F4 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 193+ 99F6 47           		ld		b,a
 194+ 99F7 3A 6F 95     		ld		a,(DisplayEcononmy)
 195+ 99FA 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 196+ 99FB 47           		ld		b,a
 197+ 99FC 3A 70 95     		ld		a,(DisplayGovernment)
 198+ 99FF 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 199+ 9A00 32 72 95     		ld		(DisplayPopulation),a
 200+ 9A03 3A 6F 95     		ld		a,(DisplayEcononmy)
 201+ 9A06 EE 07        		xor		7							; Onto productivity
 202+ 9A08 C6 03        		add		3							;  (Flipped eco +3)
 203+ 9A0A 57           		ld		d,a
 204+ 9A0B 3A 70 95     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 205+ 9A0E C6 04        		add		4
 206+ 9A10 5F           		ld		e,a
 207+ 9A11 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 208+ 9A13 3A 72 95     		ld		a,(DisplayPopulation)		; then we use d for radius
 209+ 9A16 57           		ld		d,a
 210+ 9A17 ED 30        		mul
 211+ 9A19 CB 23        		sla		e
 212+ 9A1B CB 1A        		rr		d
 213+ 9A1D CB 23        		sla		e
 214+ 9A1F CB 1A        		rr		d
 215+ 9A21 CB 23        		sla		e
 216+ 9A23 CB 1A        		rr		d							; de * 8
 217+ 9A25 ED 53 74 95  		ld		(DisplayProductivity),de
 218+ 9A29              .DoRadius:
 219+ 9A29 3A 66 95     		ld		a,(WorkingSeeds+3)
 220+ 9A2C 4F           		ld		c,a
 221+ 9A2D 3A 68 95     		ld		a,(WorkingSeeds+5)
 222+ 9A30 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 223+ 9A32 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 224+ 9A34 47           		ld		b,a							;
 225+ 9A35 ED 43 78 95  		ld		(DisplayRadius),bc
 226+ 9A39 C9           		ret
 227+ 9A3A
# file closed: ./Variables/galaxy_seed.asm
 868  9A3A                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9A3A 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9A3E 65 00
   2+ 9A40 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9A44 00
   3+ 9A45 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9A49 74 61 72 79
   3+ 9A4D 00
   4+ 9A4E 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9A52 6E 67 00
   5+ 9A55 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9A59 6F 6D 00
   6+ 9A5C
   7+ 9A5C 3A 9A 40 9A  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 9A60 45 9A 4E 9A
   7+ 9A64 55 9A
   8+ 9A66              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9A66
  10+ 9A66 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9A6A 65 64 00
  11+ 9A6D 47 72 65 65  ConditionName2		DB "Green",0
  11+ 9A71 6E 00
  12+ 9A73 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9A77 6F 77 00
  13+ 9A7A 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9A7E
  15+ 9A7E 66 9A 6D 9A  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9A82 73 9A 7A 9A
  16+ 9A86              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9A86
  18+ 9A86 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9A8A 53 45 49 54
  18+ 9A8E 49 4C 45 54
  18+ 9A92 53 54 4F 4E
  18+ 9A96 4C 4F 4E 55
  18+ 9A9A 54 48 4E 4F
  18+ 9A9E 41 4C 4C 45
  18+ 9AA2 58 45 47 45
  18+ 9AA6 5A 41 43 45
  18+ 9AAA 42 49 53 4F
  18+ 9AAE 55 53 45 53
  18+ 9AB2 41 52 4D 41
  18+ 9AB6 49 4E 44 49
  18+ 9ABA 52 45 41 3F
  18+ 9ABE 45 52 41 54
  18+ 9AC2 45 4E 42 45
  18+ 9AC6 52 41 4C 41
  18+ 9ACA 56 45 54 49
  18+ 9ACE 45 44 4F 52
  18+ 9AD2 51 55 41 4E
  18+ 9AD6 54 45 49 53
  18+ 9ADA 52 49 4F 4E
  18+ 9ADE 00
  19+ 9ADF
  20+ 9ADF 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 9AE3 10 00 20 00
  20+ 9AE7 40 00 80 00
  20+ 9AEB 00 02 00 0A
  20+ 9AEF 00 19 00 49
  20+ 9AF3 FF FF
  21+ 9AF5
  22+ 9AF5 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 9AF9 6C 65 73 73
  22+ 9AFD 00
  23+ 9AFE 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 9B02 6C 79 20 48
  23+ 9B06 61 72 6D 6C
  23+ 9B0A 65 73 73 00
  24+ 9B0E 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9B12 00
  25+ 9B13 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 9B17 61 67 65 00
  26+ 9B1B 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9B1F 65 20 41 76
  26+ 9B23 65 72 61 67
  26+ 9B27 65 00
  27+ 9B29 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9B2D 65 74 65 6E
  27+ 9B31 74 00
  28+ 9B33 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9B37 65 72 6F 75
  28+ 9B3B 73 00
  29+ 9B3D 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9B41 6C 79 00
  30+ 9B44 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9B48 20 45 20 4C
  30+ 9B4C 20 49 20 54
  30+ 9B50 20 45 20 2D
  30+ 9B54 2D 2D 00
  31+ 9B57 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9B5B 6C 6F 62 73
  31+ 9B5F 67 6F 64 00
  32+ 9B63 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9B67 65 72 00
  33+ 9B6A
  34+ 9B6A F5 9A FE 9A  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9B6E 0E 9B 13 9B
  34+ 9B72 1B 9B 29 9B
  34+ 9B76 33 9B 3D 9B
  34+ 9B7A 44 9B 57 9B
  34+ 9B7E 63 9B
  35+ 9B80              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9B80
  37+ 9B80
  38+ 9B80              getTableText:
  39+ 9B80              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9B80              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9B80 D5           	push	de								; save DE as we will likley need it in caller
  42+ 9B81 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9B83 ED 31        	add		hl,a
  44+ 9B85 5E           	ld		e,(hl)
  45+ 9B86 23           	inc		hl
  46+ 9B87 56           	ld		d,(hl)							; de = indexed address
  47+ 9B88 EB           	ex		de,hl							; flip it to hl
  48+ 9B89 D1           	pop		de								; retrieve de
  49+ 9B8A C9           	ret										; return with hl as start entry
  50+ 9B8B
  51+ 9B8B
  52+ 9B8B              ;               CF      ZF      Result
  53+ 9B8B              ;               -----------------------------------
  54+ 9B8B              ;               0       0       HL > DE
  55+ 9B8B              ;               0       1       HL == DE
  56+ 9B8B              ;               1       0       HL < DE
  57+ 9B8B              ;               1       1       Impossible
  58+ 9B8B              getRankIndex:
  59+ 9B8B              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9B8B              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9B8B 7A           	ld		a,d
  62+ 9B8C B3           	or		e
  63+ 9B8D FE 00        	cp		0
  64+ 9B8F C8           	ret		z								; quicks skip for 0 kills
  65+ 9B90 AF           	xor 	a
  66+ 9B91 21 DF 9A     	ld		hl,RankingTable
  67+ 9B94              .testLoop:
  68+ 9B94 4E           	ld		c,(hl)
  69+ 9B95 23           	inc		hl
  70+ 9B96 46           	ld		b,(hl)							; bc = ranking
  71+ 9B97 E5           	push	hl
  72+ 9B98 60           	ld		h,b
  73+ 9B99 69           	ld		l,c
  74+ 9B9A CD 5B A5     	call	compare16HLDE
  75+ 9B9D 38 06        	jr		c,.HLLTDE
  76+ 9B9F              .HLGTEDE									; Found the correct rank
  77+ 9B9F E1           	pop		hl
  78+ 9BA0 23           	inc		hl								; move to next value
  79+ 9BA1 23           	inc		hl
  80+ 9BA2 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9BA3 18 EF        	jr		.testLoop
  82+ 9BA5              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9BA5 E1           	pop		hl
  84+ 9BA6 C9           	ret
  85+ 9BA7
# file closed: ./Tables/text_tables.asm
 869  9BA7                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9BA7 58 00        WordDummy					DB  "X",0
   2+ 9BA9 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9BAD 74 00
   3+ 9BAF 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9BB3 74 00
   4+ 9BB5 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9BB9 00
   5+ 9BBA 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9BBE 00
   6+ 9BBF 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9BC3 65 00
   7+ 9BC5 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9BC9 70 65 00
   8+ 9BCC 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9BD0 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9BD4 6F 00
  10+ 9BD6 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9BDA 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9BDE 00
  12+ 9BDF 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9BE3 70 73 00
  13+ 9BE6 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9BEA 4D 2E 00
  14+ 9BED 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9BF1 65 6D 00
  15+ 9BF4 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 9BF8 67 79 00
  16+ 9BFB 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9BFF 00
  17+ 9C00 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9C04 72 00
  18+ 9C06 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 9C0A 65 00
  19+ 9C0C 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9C10 00
  20+ 9C11 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9C15 61 72 79 00
  21+ 9C19 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9C1D 6E 67 00
  22+ 9C20 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9C24 6F 6D 00
  23+ 9C27 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9C2B 00
  24+ 9C2C 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9C30 6C 64 00
  25+ 9C33 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 9C37 69 6E 67 00
  26+ 9C3B 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 9C3F 75 74 65 72
  26+ 9C43 73 00
  27+ 9C45 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9C49 72 73 70 61
  27+ 9C4D 63 65 00
  28+ 9C50 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9C54 63 74 69 63
  28+ 9C58 00
  29+ 9C59 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9C5D 61 00
  30+ 9C5F 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9C63 6E 00
  31+ 9C65 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9C69 6E 64 65 72
  31+ 9C6D 00
  32+ 9C6E 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9C72 74 69 76 65
  32+ 9C76 00
  33+ 9C77 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9C7B 00
  34+ 9C7C 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9C80 69 6C 65 73
  34+ 9C84 00
  35+ 9C85 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9C89 6F 61 63 74
  35+ 9C8D 69 76 65 73
  35+ 9C91 00
  36+ 9C92 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9C96 65 73 00
  37+ 9C99 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9C9D 6F 72 2F 57
  37+ 9CA1 69 6E 65 73
  37+ 9CA5 00
  38+ 9CA6 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9CAA 72 69 65 73
  38+ 9CAE 00
  39+ 9CAF 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9CB3 6F 74 69 63
  39+ 9CB7 73 00
  40+ 9CB9 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9CBD 69 6E 65 72
  40+ 9CC1 79 00
  41+ 9CC3 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9CC7 79 73 00
  42+ 9CCA 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9CCE 61 72 6D 73
  42+ 9CD2 00
  43+ 9CD3 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9CD7 00
  44+ 9CD8 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9CDC 72 61 6C 73
  44+ 9CE0 00
  45+ 9CE1 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9CE5 00
  46+ 9CE6 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9CEA 69 6E 75 6D
  46+ 9CEE 00
  47+ 9CEF 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9CF3 53 74 6F 6E
  47+ 9CF7 65 73 00
  48+ 9CFA 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9CFE 6E 20 49 74
  48+ 9D02 65 6D 73 00
  49+ 9D06 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9D0A 65 73 00
  50+ 9D0D 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9D11 67 72 61 6D
  50+ 9D15 73 00
  51+ 9D17 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9D1B 73 00
  52+ 9D1D 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9D21 74 00
  53+ 9D23 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9D27 65 00
  54+ 9D29 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9D2D 74 00
  55+ 9D2F 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9D33 00
  56+ 9D34 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9D37 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9D3B 61 6E 63 65
  57+ 9D3F 00
  58+ 9D40 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9D44 6F 6D 79 00
  59+ 9D48 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9D4C 72 6E 6D 65
  59+ 9D50 6E 74 00
  60+ 9D53 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9D57 4C 65 76 65
  60+ 9D5B 6C 00
  61+ 9D5D 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9D61 6C 61 74 69
  61+ 9D65 6F 6E 00
  62+ 9D68 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9D6C 69 6F 6E 00
  63+ 9D70 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9D74 69 6F 6E 00
  64+ 9D78 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9D7C 73 00
  65+ 9D7E 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9D82 75 63 74 69
  65+ 9D86 76 69 74 79
  65+ 9D8A 00
  66+ 9D8B 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9D8F 61 67 65 00
  67+ 9D93 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9D97 75 73 00
  68+ 9D9A 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9D9D 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9DA1 00
  70+ 9DA2 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9DA6 00
  71+ 9DA7 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9DAB 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9DAF 6C 79 00
  73+ 9DB2 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9DB6 00
  74+ 9DB7 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9DBB 73 74 72 69
  74+ 9DBF 61 6C 00
  75+ 9DC2 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9DC6 63 75 6C 74
  75+ 9DCA 75 72 61 6C
  75+ 9DCE 00
  76+ 9DCF 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9DD3 63 68 79 00
  77+ 9DD7 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9DDB 61 6C 00
  78+ 9DDE 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9DE2 69 2D 47 6F
  78+ 9DE6 76 65 72 6E
  78+ 9DEA 6D 65 6E 74
  78+ 9DEE 00
  79+ 9DEF 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9DF3 61 74 6F 72
  79+ 9DF7 73 68 69 70
  79+ 9DFB 00
  80+ 9DFC 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9E00 75 6E 69 73
  80+ 9E04 74 00
  81+ 9E06 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9E0A 65 64 65 72
  81+ 9E0E 61 63 79 00
  82+ 9E12 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9E16 63 72 61 63
  82+ 9E1A 79 00
  83+ 9E1C 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9E20 6F 72 61 74
  83+ 9E24 65 20 53 74
  83+ 9E28 61 74 65 00
  84+ 9E2C 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9E30 65 00
  85+ 9E32 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9E36 74 00
  86+ 9E38 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9E3C 73 00
  87+ 9E3E 30 00        Word0						DB  "0",0				   ;86
  88+ 9E40 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9E44 65 74 00
  89+ 9E47 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9E4B 65 73 00
  90+ 9E4E 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9E52 75 63 74 00
  91+ 9E56 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9E5A 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9E5E 65 00
  93+ 9E60 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9E64 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9E68 00
  95+ 9E69 74 00        Wordt						DB  "t",0                  ;94
  96+ 9E6B 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9E6E 67 00        Wordg						DB  "g",0                  ;96
  98+ 9E70 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9E74 69 74 69 74
  98+ 9E78 79 00
  99+ 9E7A 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9E7E 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9E82 6B 00
 101+ 9E84 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9E88 70 00
 102+ 9E8A 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9E8E 00
 103+ 9E8F 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9E93 69 6C 65 00
 104+ 9E97 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9E9B 72 64 72 69
 104+ 9E9F 76 65 00
 105+ 9EA2 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9EA6 74 61 72 79
 105+ 9EAA 00
 106+ 9EAB
 107+ 9EAB A7 9B A9 9B  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9EAF AF 9B B5 9B
 108+ 9EB3 BA 9B BF 9B  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9EB7 C5 9B CC 9B
 109+ 9EBB D0 9B D6 9B  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9EBF DA 9B DF 9B
 110+ 9EC3 E6 9B ED 9B  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9EC7 F4 9B FB 9B
 111+ 9ECB 00 9C 06 9C  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9ECF 0C 9C 11 9C
 112+ 9ED3 19 9C 20 9C  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9ED7 27 9C 2C 9C
 113+ 9EDB 33 9C 3B 9C  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9EDF 45 9C 50 9C
 114+ 9EE3 59 9C 5F 9C  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9EE7 65 9C 6E 9C
 115+ 9EEB 77 9C 7C 9C  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9EEF 85 9C 92 9C
 116+ 9EF3 99 9C A6 9C  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9EF7 AF 9C B9 9C
 117+ 9EFB C3 9C CA 9C  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9EFF D3 9C D8 9C
 118+ 9F03 E1 9C E6 9C  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9F07 EF 9C FA 9C
 119+ 9F0B 06 9D 0D 9D  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9F0F 17 9D 1D 9D
 120+ 9F13 23 9D 29 9D  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9F17 2F 9D 34 9D
 121+ 9F1B 37 9D 40 9D  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9F1F 48 9D 53 9D
 122+ 9F23 5D 9D 68 9D  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9F27 70 9D 78 9D
 123+ 9F2B 7E 9D 8B 9D  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9F2F 93 9D 9A 9D
 124+ 9F33 9D 9D        					DW  WordMCR																	;68
 125+ 9F35 A2 9D A7 9D  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9F39 AB 9D B2 9D
 126+ 9F3D B7 9D C2 9D                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9F41 CF 9D D7 9D  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9F45 DE 9D EF 9D
 128+ 9F49 FC 9D 06 9E                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9F4D 12 9E 1C 9E
 129+ 9F51 2C 9E 32 9E  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9F55 38 9E 3E 9E
 130+ 9F59 40 9E 47 9E  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9F5D 4E 9E 56 9E
 131+ 9F61 5A 9E 60 9E                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9F65 64 9E
 132+ 9F67 69 9E 6B 9E  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9F6B 6E 9E
 133+ 9F6D 70 9E 7A 9E  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9F71 7E 9E 84 9E
 134+ 9F75 8A 9E 8F 9E                      DW  WordShip,           WordMissile       ; 101
 135+ 9F79
 136+ 9F79              ; Phrases
 137+ 9F79 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9F7D 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9F80 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9F83 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9F86 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9F89 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9F8C 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9F8F 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9F92 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9F96 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9F9A 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9F9E 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9FA2 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9FA6 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9FA9 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9FAC 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9FAF 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9FB2 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9FB5 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9FB8 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9FBB 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9FBE 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9FC1 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9FC4 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9FC7 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9FCB 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9FCE 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9FD0
 165+ 9FD0 00           TextDummy					DB  0
 166+ 9FD1
 167+ 9FD1 79 9F 7D 9F  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9FD5 80 9F
 168+ 9FD7 83 9F 86 9F  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9FDB 89 9F
 169+ 9FDD 8C 9F 8F 9F  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9FE1 92 9F 96 9F  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9FE5 9A 9F 9E 9F
 171+ 9FE9 A2 9F A6 9F  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9FED A9 9F
 172+ 9FEF AC 9F AF 9F  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9FF3 B5 9F B2 9F
 172+ 9FF7 BE 9F B8 9F
 172+ 9FFB BB 9F C1 9F
 173+ 9FFF C4 9F        					DW  TextLightYears		                                            ; 21 23
 174+ A001 C7 9F CB 9F  					DW  Text0LightYears, TextMarketPrices
 175+ A005 D0 9F        					DW  TextDummy;  25
 176+ A007 00 00 00...  TextBuffer			DS	33
 177+ A028
 178+ A028              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ A028              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ A028
 181+ A028              CapitaliseString:
 182+ A028              ; ">CapitaliseString hl = address"
 183+ A028              .CapLoop:
 184+ A028 23           	inc		hl
 185+ A029 7E           	ld		a,(hl)
 186+ A02A FE 00        	cp		0
 187+ A02C C8           	ret		z
 188+ A02D FE 5B        	cp		'Z'+1
 189+ A02F 30 F7        	jr		nc,.CapLoop
 190+ A031 FE 41        	cp		'A'
 191+ A033 38 F3        	jr		c,.CapLoop
 192+ A035              .LowerCase:
 193+ A035 C6 20        	add		a,'a'-'A'
 194+ A037 77           	ld		(hl),a
 195+ A038 18 EE        	jr		.CapLoop
 196+ A03A
 197+ A03A              WordIndexToAddress:
 198+ A03A 21 AB 9E     	ld		hl,WordIdx
 199+ A03D ED 31        	add		hl,a
 200+ A03F ED 31        	add		hl,a
 201+ A041 D5           	push	de
 202+ A042 5E           	ld		e,(hl)
 203+ A043 23           	inc		hl
 204+ A044 56           	ld		d,(hl)
 205+ A045 EB           	ex		de,hl
 206+ A046 D1           	pop		de
 207+ A047 C9           	ret
 208+ A048
 209+ A048
 210+ A048              expandTokenToString:
 211+ A048              ; ">expandTokenToString a = texttoken"
 212+ A048 21 D1 9F     	ld		hl,TextTokens
 213+ A04B CD 80 9B     	call	getTableText
 214+ A04E 11 07 A0     	ld		de,TextBuffer
 215+ A051              .ReadLoop:
 216+ A051 7E           	ld		a,(hl)
 217+ A052 FE 00        	cp		0
 218+ A054 28 1B        	jr		z,.ReadDone
 219+ A056 E5           	push	hl
 220+ A057 D5           	push	de
 221+ A058 21 AB 9E     	ld		hl,WordIdx
 222+ A05B CD 80 9B     	call	getTableText
 223+ A05E D1           	pop		de
 224+ A05F              .WordExpandLoop:
 225+ A05F 7E           	ld		a,(hl)
 226+ A060 FE 00        	cp		0
 227+ A062 28 05        	jr		z,.AddSpace
 228+ A064              ;.GetChar:
 229+ A064 12           	ld		(de),a
 230+ A065 13           	inc		de
 231+ A066 23           	inc		hl
 232+ A067 18 F6        	jr		.WordExpandLoop
 233+ A069              .AddSpace:
 234+ A069 3E 20        	ld		a,' '
 235+ A06B 12           	ld		(de),a
 236+ A06C 13           	inc		de
 237+ A06D E1           	pop		hl
 238+ A06E 23           	inc		hl
 239+ A06F 18 E0        	jr		.ReadLoop
 240+ A071              .ReadDone:
 241+ A071 1B           	dec		de
 242+ A072 AF           	xor		a
 243+ A073 12           	ld		(de),a
 244+ A074 C9           	ret
 245+ A075
# file closed: ./Tables/dictionary.asm
 870  A075                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ A075 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ A079 53 45 49 54
   1+ A07D 49 4C 45 54
   1+ A081 53 54 4F 4E
   1+ A085 4C 4F 4E 55
   1+ A089 54 48 4E 4F
   2+ A08D 41 4C 4C     name_digrams2   DB "ALL"
   3+ A090 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A094 45 5A 41 43
   3+ A098 45 42 49 53
   3+ A09C 4F 55 53 45
   3+ A0A0 53 41 52 4D
   3+ A0A4 41 49 4E 44
   3+ A0A8 49 52 45 41
   4+ A0AC 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A0B0 54 45 4E 42
   4+ A0B4 45 52 41 4C
   4+ A0B8 41 56 45 54
   4+ A0BC 49 45 44 4F
   4+ A0C0 52 51 55 41
   4+ A0C4 4E 54 45 49
   4+ A0C8 53 52 49 4F
   4+ A0CC 4E
   5+ A0CD
   6+ A0CD              ; TODO Moveinto galaxy data module
   7+ A0CD 00 00 00...  name_expanded	DS 32
   8+ A0ED 00           				DB 0
   9+ A0EE
  10+ A0EE
  11+ A0EE
  12+ A0EE              NamingLoop:
  13+ A0EE 3A 68 95     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A0F1 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A0F3 FE 00        	cp		0					; 0 = skip 2 chars
  16+ A0F5 28 12        	jr		z,.SkipPhrase
  17+ A0F7 C6 0C        	add		a,12
  18+ A0F9 CB 27        	sla		a					; phrase = (a+12)*2
  19+ A0FB 21 75 A0     	ld		hl,name_digrams
  20+ A0FE ED 31        	add		hl,a
  21+ A100 ED A0        	ldi
  22+ A102 7E           	ld		a,(hl)
  23+ A103 FE 3F        	cp		'?'
  24+ A105 28 02        	jr		z,.SkipPhrase
  25+ A107              .AddExtra:
  26+ A107 ED A0        	ldi
  27+ A109              .SkipPhrase:
  28+ A109 D5           	push	de
  29+ A10A CD 1E 99     	call	working_seed
  30+ A10D D1           	pop		de
  31+ A10E C9           	ret
  32+ A10F
  33+ A10F              ;GetDigramGalaxySeed:
  34+ A10F              ;	call	copy_galaxy_to_working
  35+ A10F              ;	jr		GetDigramWorkingSeed
  36+ A10F              ;GetDigramSystemSeed:
  37+ A10F              ;	call	copy_system_to_working
  38+ A10F              ;GetDigramWorkingSeed:
  39+ A10F              ;; ">GetDigram a = digram seed"
  40+ A10F              ;	ld		de,name_expanded
  41+ A10F              ;	ld		b,3
  42+ A10F              ;	ld		a,(WorkingSeeds)
  43+ A10F              ;	and		$40
  44+ A10F              ;	jr		z,.SmallSizeName
  45+ A10F              ;.LargeSizeName:
  46+ A10F              ;	call	NamingLoop
  47+ A10F              ;.SmallSizeName:
  48+ A10F              ;	call	NamingLoop
  49+ A10F              ;	call	NamingLoop
  50+ A10F              ;	call	NamingLoop
  51+ A10F              ;.DoneName:
  52+ A10F              ;	ex		de,hl
  53+ A10F              ;	ld		(hl),0
  54+ A10F              ;	ex		de,hl
  55+ A10F              ;	ret
  56+ A10F
  57+ A10F
  58+ A10F
  59+ A10F              ;GetDigramWorkingSeed:
  60+ A10F              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A10F              ;	ld		b,5					; working seed
  62+ A10F              ;	ld		de,name_expanded
  63+ A10F              ;.ExpansionLoop:
  64+ A10F              ;	push	bc
  65+ A10F              ;	ld		hl,WorkingSeeds
  66+ A10F              ;	ld		a,b
  67+ A10F              ;	add		hl,a
  68+ A10F              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A10F              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A10F              ;	cp		0					; 0 = skip 2 chars
  71+ A10F              ;	jr		z,.SkipPhrase
  72+ A10F              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A10F              ;	call	TT27
  74+ A10F              ;.SkipPhrase:
  75+ A10F              ;	push	de
  76+ A10F              ;	call	next_working_seed
  77+ A10F              ;	pop		de
  78+ A10F              ;	pop		bc
  79+ A10F              ;	djnz	GetDigramWorkingSeed
  80+ A10F              ;.DoneName:
  81+ A10F              ;	ex		de,hl
  82+ A10F              ;	ld		(hl),0
  83+ A10F              ;	ex		de,hl
  84+ A10F              ;	ret
  85+ A10F              ;
  86+ A10F              ;ExpandToken:
  87+ A10F              ;	DE = target
  88+ A10F              ;	a = token
  89+ A10F              ;
  90+ A10F              ;PlanetDigram:
  91+ A10F              ;	cp		&A0							; >- 160
  92+ A10F              ;	jr		c,MorePage4
  93+ A10F              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A10F              ;	asl		2							; Multiply by 2
  95+ A10F              ;	ld		hl, name_digrams2
  96+ A10F              ;	add		hl,a
  97+ A10F              ;	ld		a,(hl)
  98+ A10F              ;	call	ProcessTextToken
  99+ A10F              ;	inc		hl
 100+ A10F              ;	ld		a,(hl)
 101+ A10F              ;	cp		'?'
 102+ A10F              ;	ret		z
 103+ A10F              ;	call	ProcessTextToken
 104+ A10F              ;	ret
 105+ A10F              ;MorePage4:
 106+ A10F              ;	sub		$A0
 107+ A10F              ;ExtraTokenCheck:
 108+ A10F              ;	push	de							; save target address
 109+ A10F              ;	push	bc
 110+ A10F              ;	ld		b,a
 111+ A10F              ;	ld		hl,varV
 112+ A10F              ;	ld		(VarV),0400
 113+ A10F              ;	ld		(varV),a
 114+ A10F              ;	ld
 115+ A10F              ;
 116+ A10F              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A10F              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A10F              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A10F              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A10F              ;0A                      ASL A		      \ *= 2
 121+ A10F              ;A8                      TAY 		      \ digram index = 0to62
 122+ A10F              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A10F              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A10F              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A10F              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A10F              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A10F              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A10F              ;
 129+ A10F              ;	.TT47	\ more page4, subtract #160
 130+ A10F              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A10F              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A10F              ;AA                      TAX 		\ copy of word index
 133+ A10F              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A10F              ;85 22                   STA &22		\ V
 135+ A10F              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A10F              ;85 23                   STA &23		\ V+1
 137+ A10F              ;A0 00                   LDY #0
 138+ A10F              ;8A                      TXA 		\ token = word index
 139+ A10F              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A10F              ;	.TT51	\ counters Y letter, X token
 141+ A10F              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A10F              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A10F              ;C8                      INY 		\ letter count
 144+ A10F              ;D0 F9                   BNE TT51	\ loop Y
 145+ A10F              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A10F              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A10F              ;	.TT49	\ word ended
 148+ A10F              ;C8                      INY
 149+ A10F              ;D0 02                   BNE TT59    	\ next word
 150+ A10F              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A10F              ;	.TT59	\ next word
 152+ A10F              ;CA                      DEX 		\ token count
 153+ A10F              ;D0 ED                   BNE TT51	\ loop X token
 154+ A10F              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A10F              ;98                      TYA
 156+ A10F              ;48                      PHA 		\ store Yindex
 157+ A10F              ;A5 23                   LDA &23		\ V+1
 158+ A10F              ;48                      PHA 		\ correct pointer hi
 159+ A10F              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A10F              ;49 23                   EOR #&23	\ decode '#'
 161+ A10F              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A10F              ;68                      PLA 		\ restore this depth's Vhi
 163+ A10F              ;85 23                   STA &23		\ V+1
 164+ A10F              ;68                      PLA
 165+ A10F              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A10F              ;C8                      INY 		\ next letter
 167+ A10F              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A10F              ;E6 23                   INC &23		\ V+1
 169+ A10F              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A10F              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A10F              ;	.TT48 	\ rts
 172+ A10F              ;60                      RTS 		\ end of flight token printing TT27
 173+ A10F              ;
 174+ A10F              ;
 175+ A10F              ;
 176+ A10F              ;
 177+ A10F              ;
 178+ A10F              ;
 179+ A10F              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A10F              ;;AA                      TAX		\ copy token to count down
 181+ A10F              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A10F              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A10F              ;CA                      DEX
 184+ A10F              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A10F              ;CA                      DEX
 186+ A10F              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A10F              ;CA                      DEX
 188+ A10F              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A10F              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A10F              ;CA                      DEX
 191+ A10F              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A10F              ;CA                      DEX
 193+ A10F              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A10F              ;CA                      DEX
 195+ A10F              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A10F              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A10F              ;85 72                   STA &72	 	\ QQ17
 198+ A10F              ;60                      RTS
 199+ A10F              ;CA                      DEX 		\ skip Acc ==7
 200+ A10F              ;CA                      DEX
 201+ A10F              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A10F              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A10F              ;60                      RTS
 204+ A10F              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A10F              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A10F              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A10F              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A10F              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A10F              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A10F              ;C9 20                   CMP #32		\ < 32 ?
 211+ A10F              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A10F              ;		\ Token  < 14 or > 31
 213+ A10F              ;A6 72                   LDX &72	 	\ QQ17
 214+ A10F              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A10F              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A10F              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A10F              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A10F              ;	.TT42	\ Uppercase to lowercase
 219+ A10F              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A10F              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A10F              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A10F              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A10F              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A10F              ;	.TT44	\ print character as is with TT26
 225+ A10F              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A10F              ;
 227+ A10F              ;	.TT41	\ QQ17 bit7 set
 228+ A10F              ;24 72                   BIT &72		\ QQ17
 229+ A10F              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A10F              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A10F              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A10F              ;48                      PHA 		\ else store token Acc
 233+ A10F              ;8A                      TXA 		\ QQ17 copy
 234+ A10F              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A10F              ;85 72                   STA &72	 	\ QQ17
 236+ A10F              ;68                      PLA 		\ restore token
 237+ A10F              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A10F              ;
 239+ A10F              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A10F              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A10F              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A10F              ;
 243+ A10F              ;	.crlf	\ Acc == 9,  colon on right
 244+ A10F              ;A9 15                   LDA #21		\ on right
 245+ A10F              ;85 2C                   STA &2C		\ XC
 246+ A10F              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A10F              ;
 248+ A10F              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A10F              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A10F              ;F0 63                   BEQ TT48	\ rts
 251+ A10F              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A10F              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A10F              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A10F              ;48                      PHA 		\ push token
 255+ A10F              ;8A                      TXA 		\ QQ17 copy
 256+ A10F              ;29 BF                   AND #&BF	\ clear bit6
 257+ A10F              ;85 72                   STA &72	 	\ QQ17
 258+ A10F              ;68                      PLA 		\ pull token
 259+ A10F              ;	.TT74	\ TT26, print character.
 260+ A10F              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A10F              ;
 262+ A10F              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A10F              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A10F              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A10F              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A10F              ;0A                      ASL A		      \ *= 2
 267+ A10F              ;A8                      TAY 		      \ digram index = 0to62
 268+ A10F              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A10F              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A10F              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A10F              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A10F              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A10F              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A10F              ;
 275+ A10F              ;	.TT47	\ more page4, subtract #160
 276+ A10F              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A10F              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A10F              ;AA                      TAX 		\ copy of word index
 279+ A10F              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A10F              ;85 22                   STA &22		\ V
 281+ A10F              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A10F              ;85 23                   STA &23		\ V+1
 283+ A10F              ;A0 00                   LDY #0
 284+ A10F              ;8A                      TXA 		\ token = word index
 285+ A10F              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A10F              ;	.TT51	\ counters Y letter, X token
 287+ A10F              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A10F              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A10F              ;C8                      INY 		\ letter count
 290+ A10F              ;D0 F9                   BNE TT51	\ loop Y
 291+ A10F              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A10F              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A10F              ;	.TT49	\ word ended
 294+ A10F              ;C8                      INY
 295+ A10F              ;D0 02                   BNE TT59    	\ next word
 296+ A10F              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A10F              ;	.TT59	\ next word
 298+ A10F              ;CA                      DEX 		\ token count
 299+ A10F              ;D0 ED                   BNE TT51	\ loop X token
 300+ A10F              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A10F              ;98                      TYA
 302+ A10F              ;48                      PHA 		\ store Yindex
 303+ A10F              ;A5 23                   LDA &23		\ V+1
 304+ A10F              ;48                      PHA 		\ correct pointer hi
 305+ A10F              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A10F              ;49 23                   EOR #&23	\ decode '#'
 307+ A10F              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A10F              ;68                      PLA 		\ restore this depth's Vhi
 309+ A10F              ;85 23                   STA &23		\ V+1
 310+ A10F              ;68                      PLA
 311+ A10F              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A10F              ;C8                      INY 		\ next letter
 313+ A10F              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A10F              ;E6 23                   INC &23		\ V+1
 315+ A10F              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A10F              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A10F              ;	.TT48 	\ rts
 318+ A10F              ;60                      RTS 		\ end of flight token printing TT27
 319+ A10F              ;
 320+ A10F              ;
 321+ A10F              ;
# file closed: ./Tables/name_digrams.asm
 871  A10F              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 872  A10F
 873  A10F              ; Include all maths libraries to test assembly
 874  A10F                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A10F              addhldesigned:
   2+ A10F CB 7C                bit     7,h
   3+ A111 20 03                jr      nz,.noneghl
   4+ A113 CD 61 A5             call    negate16hl
   5+ A116              .noneghl:
   6+ A116 CB 7A                bit     7,d
   7+ A118 20 03                jr      nz,.nonegde
   8+ A11A CD 68 A5             call    negate16de
   9+ A11D              .nonegde:
  10+ A11D 19                   add     hl,de                       ; do 2'd c add
  11+ A11E AF                   xor     a                           ; assume positive
  12+ A11F CB 7C                bit     7,h
  13+ A121 C8                   ret     z                           ; if not set then can exit early
  14+ A122 CD 61 A5             call    negate16hl
  15+ A125 3E FF                ld      a,$FF
  16+ A127 C9                   ret
  17+ A128
# file closed: ./Maths/addhldesigned.asm
 875  A128                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A128
   2+ A128              ; a = value to add
   3+ A128              ; b = offset (equivalent to regX)
   4+ A128              ; returns INWK [x] set to new value
   5+ A128              addINWKbasigned:
   6+ A128 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ A12B 4F           		ld      c,a                         ; preserve a
   8+ A12C 78           		ld		a,b
   9+ A12D ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ A12F 79                   ld      a,c                         ; get back a value
  11+ A130 E6 80                and     $80                         ; get sign bit from a
  12+ A132 47                   ld      b,a                         ; now b = sign bit of a
  13+ A133 79                   ld      a,c                         ; a = original value
  14+ A134 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ A136              ; hl = unsigned version of INWK0[b]
  16+ A136              ; a = value to add, also in c which will optimise later code
  17+ A136              ; b = sign bit of a ( in old code was varT)
  18+ A136              addhlcsigned:
  19+ A136 5E                   ld      e,(hl)                      ; de = INKK value
  20+ A137 23                   inc     hl
  21+ A138 56                   ld      d,(hl)
  22+ A139 23                   inc     hl                          ; now pointing a sign
  23+ A13A 7E                   ld      a,(hl)                      ; a = sign bit
  24+ A13B EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ A13C A8                   xor     b                           ; a = resultant sign
  26+ A13D CB 7F                bit     7,a                         ; is it negative?
  27+ A13F 28 28                jr      z,.postivecalc
  28+ A141              .negativecalc:
  29+ A141 7C                   ld      a,h
  30+ A142 E6 7F                and     SignMask8Bit
  31+ A144 67                   ld      h,a                         ; strip high bit
  32+ A145 DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ A147 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ A149 ED 42                sbc     hl,bc
  35+ A14B DD 45                ld      b,ixl                       ; get sign back
  36+ A14D EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ A14E 7E                   ld      a,(hl)                      ;
  38+ A14F E6 7F                and     SignMask8Bit
  39+ A151 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ A153 F6 80                or      $80                         ; set bit 0
  41+ A155 A8                   xor     b                           ; flip bit on sign (var T)
  42+ A156 77                   ld      (hl),a
  43+ A157 2B                   dec     hl
  44+ A158 72                   ld      (hl),d
  45+ A159 2B                   dec     hl
  46+ A15A 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ A15B EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ A15C D8                   ret     c                           ; if carry was set then we can exit now
  49+ A15D              .nocarry:
  50+ A15D CD 61 A5             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ A160 B0                   or      b                           ; b is still varT
  52+ A161 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ A162 73                   ld      (hl),e
  54+ A163 23                   inc     hl
  55+ A164 72                   ld      (hl),d
  56+ A165 23                   inc     hl
  57+ A166 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ A167 EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ A168 C9                   ret
  60+ A169              .postivecalc:
  61+ A169 DD 68                ld      ixl,b
  62+ A16B 06 00                ld      b,0
  63+ A16D 19                   add     hl,de
  64+ A16E EB                   ex      de,hl
  65+ A16F DD B5                or      ixl                         ; we don;t need to recover b here
  66+ A171 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ A172 2B                   dec     hl
  68+ A173 72                   ld      (hl),d
  69+ A174 2B                   dec     hl
  70+ A175 73                   ld      (hl),e
  71+ A176 C9                   ret
  72+ A177
  73+ A177              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ A177              ;MVT1
  75+ A177              ;    S = bits 6 to 0 of A
  76+ A177              ;    A = sign bit => T
  77+ A177              ;    xor sign bit with ink[x] Sign
  78+ A177              ;    if negative thn its not an add
  79+ A177              ;
  80+ A177              ;        and h, 7F
  81+ A177              ;        b = 0
  82+ A177              ;        c = varS
  83+ A177              ;        subtract INW[X]hilo, bc
  84+ A177              ;        retain carry
  85+ A177              ;        get INKW[x]Sign
  86+ A177              ;        and 7F
  87+ A177              ;        subtract carry (so will go negtive if negative)
  88+ A177              ;        xor bit 7 of h with T to flip bit
  89+ A177              ;        write to INKW[x]Sign
  90+ A177              ;
  91+ A177              ;    else
  92+ A177              ;MV10.
  93+ A177              ;        add INWK[x]hi,lo, varS
  94+ A177              ;        or      sign bit
  95+ A177
  96+ A177
# file closed: ./Maths/addhlasigned.asm
 876  A177                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ A177              ; Note its big endian
   2+ A177 2A 29 98     addDEtoCash:            ld      hl,(Cash)
   3+ A17A 19                                   add     hl,de
   4+ A17B 22 29 98                             ld      (Cash),hl
   5+ A17E 11 00 00                             ld      de,0
   6+ A181 2A 2B 98                             ld      hl,(Cash+2)
   7+ A184 ED 5A                                adc     hl,de
   8+ A186 22 2B 98                             ld      (Cash+2),hl
   9+ A189 C9                                   ret
  10+ A18A
  11+ A18A 2A 29 98     subDEfromCash:          ld      hl,(Cash)
  12+ A18D 7C                                   ld      a,h
  13+ A18E B5                                   or      l
  14+ A18F 2A 2B 98                             ld      hl,(Cash+2)
  15+ A192 B4                                   or      h
  16+ A193 B5                                   or      l
  17+ A194 C8                                   ret     z               ; No cash return
  18+ A195 B7                                   or      a
  19+ A196 2A 29 98                             ld      hl,(Cash)
  20+ A199 ED 52                                sbc     hl,de
  21+ A19B 22 29 98                             ld      (Cash),hl
  22+ A19E 11 00 00                             ld      de,0
  23+ A1A1 2A 2B 98                             ld      hl,(Cash+2)
  24+ A1A4 ED 52                                sbc     hl,de
  25+ A1A6 22 2B 98                             ld      (Cash+2),hl
  26+ A1A9                                      JumpOnBitSet h,7,.ZeroCash
  26+ A1A9 CB 7C       >                        bit 	7,h
  26+ A1AB C2 AF A1    >                        jp      nz,.ZeroCash
  27+ A1AE C9                                   ret
  28+ A1AF 21 00 00     .ZeroCash:              ld      hl,0
  29+ A1B2 22 29 98                             ld      (Cash),hl
  30+ A1B5 22 2B 98                             ld      (Cash+2),hl
  31+ A1B8 C9                                   ret
  32+ A1B9
# file closed: ./Maths/Utilities/AddDEtoCash.asm
 877  A1B9                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A1B9              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A1B9 2A 65 94                             ld  hl,(varRS)
   3+ A1BC 3A 64 94                             ld  a,(varQ)
   4+ A1BF C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A1C1 11 00 00                             ld  de,0        ; de = XY
   6+ A1C4 47                                   ld  b,a         ; b = Q
   7+ A1C5                                      ShiftHLRight1
   7+ A1C5 CB 3C       >			   srl h
   7+ A1C7 CB 1D       >			   rr  l
   8+ A1C9 CB 20                                sla b
   9+ A1CB 30 03                                jr  nc,.LL126
  10+ A1CD EB           .LL125:                 ex de,hl
  11+ A1CE 19                                   add hl,de
  12+ A1CF EB                                   ex  de,hl       ; de = de + rs
  13+ A1D0              .LL126:                 ShiftHLRight1
  13+ A1D0 CB 3C       >			   srl h
  13+ A1D2 CB 1D       >			   rr  l
  14+ A1D4 CB 20                                sla b
  15+ A1D6 38 F5                                jr      c,.LL125
  16+ A1D8 20 F6                                jr      nz,.LL126
  17+ A1DA EB                                   ex      de,hl   ; hl = result
  18+ A1DB D1 C1                                pop     bc,,de
  19+ A1DD C9                                   ret
  20+ A1DE
  21+ A1DE
  22+ A1DE              MacroDEEquQmulASigned:  MACRO
  23+ A1DE ~                                    ld      d,a                         ; save a into d
  24+ A1DE ~                                    ld      a,(varQ)
  25+ A1DE ~                                    ld      e,a
  26+ A1DE ~                                    xor     d                           ; a = a xor var Q
  27+ A1DE ~                                    and     SignOnly8Bit
  28+ A1DE ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A1DE ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A1DE ~                                    and     SignMask8Bit
  31+ A1DE ~                                    ld      d,a
  32+ A1DE ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A1DE ~                                    and     SignMask8Bit
  34+ A1DE ~                                    ld      e,a
  35+ A1DE ~                                    mul                                 ; de = a * Q
  36+ A1DE ~                                    ld      a,d
  37+ A1DE ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A1DE ~                                    ld      d,a
  39+ A1DE                                      ENDM
  40+ A1DE
  41+ A1DE
  42+ A1DE
  43+ A1DE                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A1DE              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A1DE 57          >                        ld      d,a                         ; save a into d
  44+ A1DF 3A 64 94    >                        ld      a,(varQ)
  44+ A1E2 5F          >                        ld      e,a
  44+ A1E3 AA          >                        xor     d                           ; a = a xor var Q
  44+ A1E4 E6 80       >                        and     SignOnly8Bit
  44+ A1E6 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A1E7 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A1E8 E6 7F       >                        and     SignMask8Bit
  44+ A1EA 57          >                        ld      d,a
  44+ A1EB 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A1EC E6 7F       >                        and     SignMask8Bit
  44+ A1EE 5F          >                        ld      e,a
  44+ A1EF ED 30       >                        mul                                 ; de = a * Q
  44+ A1F1 7A          >                        ld      a,d
  44+ A1F2 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A1F3 57          >                        ld      d,a
  45+ A1F4 2A 65 94     madDEaddRS:             ld		hl,(varR)
  46+ A1F7 CD 00 A2                             call	madXAAddHLDESigned
  47+ A1FA EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A1FB                                      ClearCarryFlag
  48+ A1FB B7          >                        or a
  49+ A1FC DD 6B                                ld      ixl,e
  50+ A1FE 7A                                   ld      a,d
  51+ A1FF C9                                   ret
  52+ A200
  53+ A200
  54+ A200 7C           madXAAddHLDESigned:     ld      a,h
  55+ A201 E6 80                                and     SignOnly8Bit
  56+ A203 47                                   ld      b,a                         ;save sign bit in b
  57+ A204 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A205                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A205 FA 1D A2    >                        jp		m, .ADDHLDEOppSGN
  59+ A208 78           .ADDHLDESameSigns:       ld      a,b
  60+ A209 B2                                   or      d
  61+ A20A                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A20A FA 0F A2    >                        jp		m, .ADDHLDESameNeg
  62+ A20D 19                                   add     hl,de
  63+ A20E C9                                   ret
  64+ A20F 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A210 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A212 67                                   ld      h,a
  67+ A213 7A                                   ld      a,d
  68+ A214 E6 7F                                and     SignMask8Bit
  69+ A216 57                                   ld      d,a
  70+ A217 19                                   add     hl,de
  71+ A218 3E 80                                ld      a,SignOnly8Bit
  72+ A21A B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A21B 67                                   ld      h,a
  74+ A21C C9                                   ret
  75+ A21D 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A21E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A220 67                                   ld      h,a
  78+ A221 7A                                   ld      a,d
  79+ A222 E6 7F                                and     SignMask8Bit
  80+ A224 57                                   ld      d,a
  81+ A225 B7                                   or      a
  82+ A226 ED 52                                sbc     hl,de
  83+ A228 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A22A 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A22B B4                                   or      h
  86+ A22C 67                                   ld      h,a                         ; set the previou sign value
  87+ A22D C9                                   ret
  88+ A22E              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A22E AF          >                xor a
  88+ A22F 95          >                sub l
  88+ A230 6F          >                ld l,a
  88+ A231 9F          >                sbc a,a
  88+ A232 94          >                sub h
  88+ A233 67          >                ld h,a
  89+ A234 78                                   ld      a,b
  90+ A235 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A237 B4                                   or      h
  92+ A238 67                                   ld      h,a                         ; recover sign
  93+ A239 C9                                   ret
  94+ A23A
  95+ A23A
  96+ A23A                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A23A                  ;
  98+ A23A                  ; enter : hl = 16-bit multiplier   = x
  99+ A23A                  ;          e =  8-bit multiplicand = y
 100+ A23A                  ;
 101+ A23A                  ; exit  : ahl = 24-bit product
 102+ A23A                  ;         carry reset
 103+ A23A                  ;
 104+ A23A                  ; uses  : af, de, hl
 105+ A23A 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A23B 63                                   ld h,e                      ; yl
 107+ A23C ED 30                                mul de                      ; xh*yl
 108+ A23E EB                                   ex de,hl
 109+ A23F ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A241
 111+ A241 7A                                   ld  a,d                     ; sum products
 112+ A242 85                                   add a,l
 113+ A243 57                                   ld  d,a
 114+ A244 EB                                   ex de,hl
 115+ A245
 116+ A245 7A                                   ld  a,d
 117+ A246 CE 00                                adc a,0
 118+ A248 C9                                   ret
 119+ A249
 120+ A249
 121+ A249
 122+ A249                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A249                 ;
 124+ A249                 ; enter : de = 16-bit multiplicand = y
 125+ A249                 ;         hl = 16-bit multiplicand = x
 126+ A249                 ;
 127+ A249                 ; exit  : dehl = 32-bit product
 128+ A249                 ;         carry reset
 129+ A249                 ;
 130+ A249                 ; uses  : af, bc, de, hl
 131+ A249
 132+ A249
 133+ A249
 134+ A249 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A24A 4B                                   ld c,e                      ; y0
 136+ A24B 5D                                   ld e,l                      ; x0
 137+ A24C 6A                                   ld l,d
 138+ A24D E5                                   push hl                     ; x1 y1
 139+ A24E 69                                   ld l,c                      ; y0
 140+ A24F              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A24F ED 30                                mul de                      ; y1*x0
 142+ A251 EB                                   ex de,hl
 143+ A252 ED 30                                mul de                      ; x1*y0
 144+ A254
 145+ A254 AF                                   xor a                       ; zero A
 146+ A255 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A256 8F                                   adc a,a                     ; capture carry p3
 148+ A257
 149+ A257 59                                   ld e,c                      ; x0
 150+ A258 50                                   ld d,b                      ; y0
 151+ A259 ED 30                                mul de                      ; y0*x0
 152+ A25B
 153+ A25B 47                                   ld b,a                      ; carry from cross products
 154+ A25C 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A25D
 156+ A25D 7A                                   ld a,d
 157+ A25E 85                                   add a,l
 158+ A25F 67                                   ld h,a
 159+ A260 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A261
 161+ A261 D1                                   pop de
 162+ A262 ED 30                                mul de                      ; x1*y1
 163+ A264
 164+ A264 EB                                   ex de,hl
 165+ A265 ED 4A                                adc hl,bc
 166+ A267 EB                                   ex de,hl                    ; de = final MSW
 167+ A268
 168+ A268 C9                                   ret
 169+ A269
 170+ A269              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A269              ; enter : de = 16-bit multiplicand
 172+ A269              ;         hl = 16-bit multiplicand
 173+ A269              ; exit  : hl = 16-bit product
 174+ A269              ;         carry reset
 175+ A269              ; maths is
 176+ A269              ;        hl = y , de= x
 177+ A269              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A269              ;        hl = yhih & xlo + x
 179+ A269              ;
 180+ A269              ;
 181+ A269              ; uses  : af, bc, de, hl
 182+ A269 C5           mulDEbyHL:              push    bc
 183+ A26A 7A                                   ld a,d                      ; a = xh
 184+ A26B 54                                   ld d,h                      ; d = yh
 185+ A26C 67                                   ld h,a                      ; h = xh
 186+ A26D 4B                                   ld c,e                      ; c = xl
 187+ A26E 45                                   ld b,l                      ; b = yl
 188+ A26F ED 30                                mul                         ; yh * yl
 189+ A271 EB                                   ex de,hl
 190+ A272 ED 30                                mul                         ; xh * yl
 191+ A274 19                                   add hl,de                   ; add cross products
 192+ A275 59                                   ld e,c
 193+ A276 50                                   ld d,b
 194+ A277 ED 30                                mul                         ; yl * xl
 195+ A279 7D                                   ld a,l                      ; cross products lsb
 196+ A27A 82                                   add a,d                     ; add to msb final
 197+ A27B 67                                   ld h,a
 198+ A27C 6B                                   ld l,e                      ; hl = final
 199+ A27D                                      ; 83 cycles, 19 bytes
 200+ A27D AF                                   xor a                       ; reset carry
 201+ A27E C1                                   pop     bc
 202+ A27F C9                                   ret
 203+ A280
 204+ A280              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 205+ A280              ; enter : de = 16-bit multiplicand
 206+ A280              ;         hl = 16-bit multiplicand
 207+ A280              ; exit  : hl = 16-bit product
 208+ A280              ;         carry reset
 209+ A280              ;
 210+ A280              ; uses  : af, bc, de, hl
 211+ A280 00           mulDEbyHLSignByte       DB      0
 212+ A281 AF           mulDEbyHLSgnTo2c:       xor     a
 213+ A282 32 80 A2                             ld      (mulDEbyHLSignByte),a
 214+ A285 7A           .SignDE:                ld      a,d
 215+ A286 ED 27 80                             test    $80
 216+ A289 28 08                                jr      z,.SignHL
 217+ A28B E6 7F        .NegativeDE:            and     $7F
 218+ A28D 57                                   ld      d,a
 219+ A28E 3E 80                                ld      a,$80
 220+ A290 32 80 A2                             ld      (mulDEbyHLSignByte),a
 221+ A293 7C           .SignHL:                ld      a,h
 222+ A294 ED 27 80                             test    $80
 223+ A297 28 0B                                jr      z,.AbsoluteMultiply
 224+ A299 E6 7F        .NegativeHL:            and     $7F
 225+ A29B 67                                   ld      h,a
 226+ A29C 3A 80 A2                             ld      a,(mulDEbyHLSignByte)
 227+ A29F EE 80                                xor     $80
 228+ A2A1 32 80 A2                             ld      (mulDEbyHLSignByte),a
 229+ A2A4 CD 69 A2     .AbsoluteMultiply:      call    mulDEbyHL
 230+ A2A7 3A 80 A2     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 231+ A2AA ED 27 80                             test    $80
 232+ A2AD C8                                   ret     z
 233+ A2AE AF           .Negateghl: 				xor 	a
 234+ A2AF 95                                   sub 	l
 235+ A2B0 6F                                   ld 		l,a
 236+ A2B1 9F                                   sbc 	a,a
 237+ A2B2 94                                   sub 	h
 238+ A2B3 67                                   ld 		h,a
 239+ A2B4 C9                                   ret
 240+ A2B5
 241+ A2B5 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 242+ A2B6 32 80 A2                             ld      (mulDEbyHLSignByte),a
 243+ A2B9 7A           .SignDE:                ld      a,d
 244+ A2BA ED 27 80                             test    $80
 245+ A2BD 28 08                                jr      z,.AbsoluteMultiply
 246+ A2BF E6 7F        .NegativeDE:            and     $7F
 247+ A2C1 57                                   ld      d,a
 248+ A2C2 3E 80                                ld      a,$80
 249+ A2C4 32 80 A2                             ld      (mulDEbyHLSignByte),a
 250+ A2C7 CD 69 A2     .AbsoluteMultiply:      call    mulDEbyHL
 251+ A2CA 3A 80 A2     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 252+ A2CD ED 27 80                             test    $80
 253+ A2D0 C8                                   ret     z
 254+ A2D1 AF           .Negateghl:             xor 	a
 255+ A2D2 95                                   sub 	l
 256+ A2D3 6F                                   ld 		l,a
 257+ A2D4 9F                                   sbc 	a,a
 258+ A2D5 94                                   sub 	h
 259+ A2D6 67                                   ld 		h,a
 260+ A2D7 C9                                   ret
 261+ A2D8
 262+ A2D8
# file closed: ./Maths/multiply.asm
 878  A2D8                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A2D8              ; "ASM_SQUA : TESTGOOD"
   2+ A2D8              ; "AP = A^2 A = low,P = hi"
   3+ A2D8
   4+ A2D8              inline_squde: MACRO
   5+ A2D8 ~            			ld	e,a
   6+ A2D8 ~            			ld  d,a
   7+ A2D8 ~            			mul
   8+ A2D8              			ENDM
   9+ A2D8
  10+ A2D8              inline_squa: MACRO
  11+ A2D8 ~            			ld	e,a
  12+ A2D8 ~            			ld  d,a
  13+ A2D8 ~            			mul
  14+ A2D8 ~            			ld	a,e
  15+ A2D8              			ENDM
  16+ A2D8
  17+ A2D8
  18+ A2D8              asm_squa:
  19+ A2D8 E6 7F        	and SignMask8Bit
  20+ A2DA              ; "ASM SQUA2 : TESTGOOD"
  21+ A2DA              ; "AP = A^2 A = low,P = hi singed"
  22+ A2DA              asm_squa2:
  23+ A2DA 5F           	ld e, a
  24+ A2DB 57           	ld d,a
  25+ A2DC ED 30        	mul
  26+ A2DE ED 53 09 94  	ld (varP),de
  27+ A2E2 7B           	ld a,e
  28+ A2E3 C9           	ret
# file closed: ./Maths/asm_square.asm
 879  A2E4                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A2E4              ; "ASM SQRT : TESTGOOD"
   2+ A2E4              ; "16-bit integer square root"
   3+ A2E4              ; "call with de = number to square root"
   4+ A2E4              ; "returns   hl = square root"
   5+ A2E4              ; "corrupts  bc, de"
   6+ A2E4              asm_sqrt:
   7+ A2E4 01 00 80     	ld bc,$8000
   8+ A2E7 61           	ld h,c
   9+ A2E8 69           	ld l,c
  10+ A2E9              .sqrloop:
  11+ A2E9 CB 38        	srl b
  12+ A2EB CB 19        	rr c
  13+ A2ED 09           	add hl,bc
  14+ A2EE EB           	ex de,hl
  15+ A2EF ED 52        	sbc hl,de
  16+ A2F1 38 04        	jr c,.sqrbit
  17+ A2F3 EB           	ex de,hl
  18+ A2F4 09           	add hl,bc
  19+ A2F5 18 05        	jr .sqrfi
  20+ A2F7              .sqrbit:
  21+ A2F7 19           	add hl,de
  22+ A2F8 EB           	ex de,hl
  23+ A2F9 B7           	or a
  24+ A2FA ED 42        	sbc hl,bc
  25+ A2FC              .sqrfi:
  26+ A2FC CB 3C        	srl h
  27+ A2FE CB 1D        	rr l
  28+ A300 CB 38        	srl b
  29+ A302 CB 19        	rr c
  30+ A304 30 E3        	jr nc,.sqrloop
  31+ A306 C9           	ret
  32+ A307
  33+ A307
  34+ A307              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A307 3A 64 94     	ld		a,(varQ)
  36+ A30A 5F           	ld		e,a
  37+ A30B 3A 65 94     	ld		a,(varR)
  38+ A30E 57           	ld		d,a
  39+ A30F CD E4 A2     	call	asm_sqrt
  40+ A312 7D               ld      a,l
  41+ A313 32 64 94     	ld		(varQ),a
  42+ A316 C9           	ret
  43+ A317
# file closed: ./Maths/asm_sqrt.asm
 880  A317                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A317              ; Divide 8-bit values
   2+ A317              ; In: Divide E by divider C
   3+ A317              ; Out: A = result, B = rest
   4+ A317              ;
   5+ A317              ;;;Div8:
   6+ A317              ;;;    xor a
   7+ A317              ;;;    ld b,8
   8+ A317              ;;;Div8_Loop:
   9+ A317              ;;;    rl e
  10+ A317              ;;;    rla
  11+ A317              ;;;    sub c
  12+ A317              ;;;    jr nc,Div8_NoAdd
  13+ A317              ;;;    add a,c
  14+ A317              ;;;Div8_NoAdd:
  15+ A317              ;;;    djnz Div8_Loop
  16+ A317              ;;;    ld b,a
  17+ A317              ;;;    ld a,e
  18+ A317              ;;;    rla
  19+ A317              ;;;    cpl
  20+ A317              ;;;    ret
  21+ A317
  22+ A317              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A317              ;;Outputs: DE is the result
  24+ A317              ;;         A is a copy of E
  25+ A317              ;;         HL is the remainder
  26+ A317              ;;         BC is not changed
  27+ A317              ;; so DE = DE /BC
  28+ A317              ;140 bytes
  29+ A317              ;145cc
  30+ A317
  31+ A317              MacroDEDivBC:       MACRO
  32+ A317 ~                                rla
  33+ A317 ~                                adc     hl,hl
  34+ A317 ~                                sbc     hl,bc
  35+ A317 ~                                jr      nc,$+3
  36+ A317 ~                                add     hl,bc
  37+ A317                                  ENDM
  38+ A317
  39+ A317              DEequDEDivBC:
  40+ A317 AF               xor a
  41+ A318 ED 62            sbc hl,hl
  42+ A31A 7A               ld a,d
  43+ A31B                  MacroDEDivBC
  43+ A31B 17          >                    rla
  43+ A31C ED 6A       >                    adc     hl,hl
  43+ A31E ED 42       >                    sbc     hl,bc
  43+ A320 30 01       >                    jr      nc,$+3
  43+ A322 09          >                    add     hl,bc
  44+ A323                  MacroDEDivBC
  44+ A323 17          >                    rla
  44+ A324 ED 6A       >                    adc     hl,hl
  44+ A326 ED 42       >                    sbc     hl,bc
  44+ A328 30 01       >                    jr      nc,$+3
  44+ A32A 09          >                    add     hl,bc
  45+ A32B                  MacroDEDivBC
  45+ A32B 17          >                    rla
  45+ A32C ED 6A       >                    adc     hl,hl
  45+ A32E ED 42       >                    sbc     hl,bc
  45+ A330 30 01       >                    jr      nc,$+3
  45+ A332 09          >                    add     hl,bc
  46+ A333                  MacroDEDivBC
  46+ A333 17          >                    rla
  46+ A334 ED 6A       >                    adc     hl,hl
  46+ A336 ED 42       >                    sbc     hl,bc
  46+ A338 30 01       >                    jr      nc,$+3
  46+ A33A 09          >                    add     hl,bc
  47+ A33B                  MacroDEDivBC
  47+ A33B 17          >                    rla
  47+ A33C ED 6A       >                    adc     hl,hl
  47+ A33E ED 42       >                    sbc     hl,bc
  47+ A340 30 01       >                    jr      nc,$+3
  47+ A342 09          >                    add     hl,bc
  48+ A343                  MacroDEDivBC
  48+ A343 17          >                    rla
  48+ A344 ED 6A       >                    adc     hl,hl
  48+ A346 ED 42       >                    sbc     hl,bc
  48+ A348 30 01       >                    jr      nc,$+3
  48+ A34A 09          >                    add     hl,bc
  49+ A34B                  MacroDEDivBC
  49+ A34B 17          >                    rla
  49+ A34C ED 6A       >                    adc     hl,hl
  49+ A34E ED 42       >                    sbc     hl,bc
  49+ A350 30 01       >                    jr      nc,$+3
  49+ A352 09          >                    add     hl,bc
  50+ A353                  MacroDEDivBC
  50+ A353 17          >                    rla
  50+ A354 ED 6A       >                    adc     hl,hl
  50+ A356 ED 42       >                    sbc     hl,bc
  50+ A358 30 01       >                    jr      nc,$+3
  50+ A35A 09          >                    add     hl,bc
  51+ A35B 17               rla
  52+ A35C 2F               cpl
  53+ A35D 57               ld d,a
  54+ A35E
  55+ A35E 7B               ld a,e
  56+ A35F                  MacroDEDivBC
  56+ A35F 17          >                    rla
  56+ A360 ED 6A       >                    adc     hl,hl
  56+ A362 ED 42       >                    sbc     hl,bc
  56+ A364 30 01       >                    jr      nc,$+3
  56+ A366 09          >                    add     hl,bc
  57+ A367                  MacroDEDivBC
  57+ A367 17          >                    rla
  57+ A368 ED 6A       >                    adc     hl,hl
  57+ A36A ED 42       >                    sbc     hl,bc
  57+ A36C 30 01       >                    jr      nc,$+3
  57+ A36E 09          >                    add     hl,bc
  58+ A36F                  MacroDEDivBC
  58+ A36F 17          >                    rla
  58+ A370 ED 6A       >                    adc     hl,hl
  58+ A372 ED 42       >                    sbc     hl,bc
  58+ A374 30 01       >                    jr      nc,$+3
  58+ A376 09          >                    add     hl,bc
  59+ A377                  MacroDEDivBC
  59+ A377 17          >                    rla
  59+ A378 ED 6A       >                    adc     hl,hl
  59+ A37A ED 42       >                    sbc     hl,bc
  59+ A37C 30 01       >                    jr      nc,$+3
  59+ A37E 09          >                    add     hl,bc
  60+ A37F                  MacroDEDivBC
  60+ A37F 17          >                    rla
  60+ A380 ED 6A       >                    adc     hl,hl
  60+ A382 ED 42       >                    sbc     hl,bc
  60+ A384 30 01       >                    jr      nc,$+3
  60+ A386 09          >                    add     hl,bc
  61+ A387                  MacroDEDivBC
  61+ A387 17          >                    rla
  61+ A388 ED 6A       >                    adc     hl,hl
  61+ A38A ED 42       >                    sbc     hl,bc
  61+ A38C 30 01       >                    jr      nc,$+3
  61+ A38E 09          >                    add     hl,bc
  62+ A38F                  MacroDEDivBC
  62+ A38F 17          >                    rla
  62+ A390 ED 6A       >                    adc     hl,hl
  62+ A392 ED 42       >                    sbc     hl,bc
  62+ A394 30 01       >                    jr      nc,$+3
  62+ A396 09          >                    add     hl,bc
  63+ A397                  MacroDEDivBC
  63+ A397 17          >                    rla
  63+ A398 ED 6A       >                    adc     hl,hl
  63+ A39A ED 42       >                    sbc     hl,bc
  63+ A39C 30 01       >                    jr      nc,$+3
  63+ A39E 09          >                    add     hl,bc
  64+ A39F 17               rla
  65+ A3A0 2F               cpl
  66+ A3A1 5F               ld e,a
  67+ A3A2 C9               ret
  68+ A3A3
  69+ A3A3
  70+ A3A3
  71+ A3A3              ;divdide by 16 using undocumented instrunctions
  72+ A3A3              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A3A3              ;Output: BC = Quotient, HL = Remainder
  74+ A3A3              ; Our use
  75+ A3A3              ; BC = A0
  76+ A3A3              ; DE = 0C
  77+ A3A3              ; so BC = a * 256 / C
  78+ A3A3              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A3A3 B9          >                        cp     c
  78+ A3A4 D2 CF A3    >                        jp		nc,DEV16ATooLarge
  79+ A3A7 47                                   ld      b,a
  80+ A3A8 59                                   ld      e,c
  81+ A3A9 0E 00                                ld      c,0
  82+ A3AB 16 00                                ld      d,0
  83+ A3AD C3 BA A3                             jp      DIV16UNDOC
  84+ A3B0 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A3B1 0E 00                                ld      c,0
  86+ A3B3 21 64 94                             ld      hl,varQ
  87+ A3B6 7E                                   ld      a,(hl)
  88+ A3B7 16 00                                ld      d,0
  89+ A3B9 5F                                   ld      e,a
  90+ A3BA              DIV16BCDivDEUNDOC:
  91+ A3BA 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A3BD 78                                   ld      a,b
  93+ A3BE 06 10                                ld      b,16
  94+ A3C0 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A3C2 17                                   rla			; ...
  96+ A3C3 ED 6A                                adc	hl,hl		; ...
  97+ A3C5 ED 52                                sbc	hl,de		; ...
  98+ A3C7 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A3C9 19                                   add	hl,de		; ...
 100+ A3CA 0D                                   dec	c		; ...
 101+ A3CB 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A3CD 47                                   ld   b,a
 103+ A3CE C9                                   ret
 104+ A3CF 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A3D2 C9                                   ret
 106+ A3D3
 107+ A3D3              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A3D3 06 08        asm_div8:               ld b,8
 109+ A3D5 AF                                   xor a
 110+ A3D6 CB 21        div8_loop:	            sla c
 111+ A3D8 17                                   rla
 112+ A3D9 BA                                   cp d
 113+ A3DA 38 02                                jr c,div8_skip
 113+ A3DC
 114+ A3DC 0C                                   inc c
 115+ A3DD 92                                   sub d
 116+ A3DE 10 F6        div8_skip:	            djnz div8_loop
 117+ A3E0 C9                                   ret
 118+ A3E1              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A3E1 06 10        asm_div16:              ld b,16
 120+ A3E3 AF                                   xor a
 121+ A3E4 CB 25        div16_loop:	            sla l
 122+ A3E6 CB 14                                rl	h
 123+ A3E8              ;    add hl,hl
 124+ A3E8 17                                   rla
 125+ A3E9 B9                                   cp c
 126+ A3EA 38 02                                jr c,div16_skip
 127+ A3EC 2C                                   inc l
 128+ A3ED 91                                   sub c
 129+ A3EE 10 F4        div16_skip:		        djnz div16_loop
 130+ A3F0 C9                                   ret
 131+ A3F1              ;
 132+ A3F1              ; Divide 16-bit values (with 16-bit result)
 133+ A3F1              ; In: Divide BC by divider DE
 134+ A3F1              ; Out: BC = result, HL = rest
 135+ A3F1              ;
 136+ A3F1              HLDivC_Iteration: 	MACRO
 137+ A3F1 ~            					add	hl,hl		; unroll 16 times
 138+ A3F1 ~            					rla				; ...
 139+ A3F1 ~            					cp	c			; ...
 140+ A3F1 ~            					jr	1F
 141+ A3F1 ~            					sub	c			; ...
 142+ A3F1 ~            1:
 143+ A3F1 ~            					inc	l			; ...
 144+ A3F1              					ENDM
 145+ A3F1
 146+ A3F1
 147+ A3F1
 148+ A3F1              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A3F1 21 00 00     Div1616:            ld hl,0
 150+ A3F4 78                               ld a,b
 151+ A3F5 06 08                            ld b,8
 152+ A3F7 17           .Div16_Loop1:       rla
 153+ A3F8 ED 6A                            adc hl,hl
 154+ A3FA ED 52                            sbc hl,de
 155+ A3FC 30 01                            jr nc,.Div16_NoAdd1
 156+ A3FE 19                               add hl,de
 157+ A3FF 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A401 17                               rla
 159+ A402 2F                               cpl
 160+ A403 47                               ld b,a
 161+ A404 79                               ld a,c
 162+ A405 48                               ld c,b
 163+ A406 06 08                            ld b,8
 164+ A408 17           .Div16_Loop2:       rla
 165+ A409 ED 6A                            adc hl,hl
 166+ A40B ED 52                            sbc hl,de
 167+ A40D 30 01                            jr nc,.Div16_NoAdd2
 168+ A40F 19                               add hl,de
 169+ A410 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A412 17                               rla
 171+ A413 2F                               cpl
 172+ A414 41                               ld b,c
 173+ A415 4F                               ld c,a
 174+ A416 C9                               ret
 175+ A417
 176+ A417
 177+ A417
 178+ A417              BCDIVDE_Iteration: MACRO
 179+ A417 ~            				   rla
 180+ A417 ~            				   adc	hl,hl
 181+ A417 ~            				   add	hl,de
 182+ A417 ~            				   jr	c,1F
 183+ A417 ~            				   sbc	hl,de
 184+ A417 ~            1:
 185+ A417              				   ENDM
 186+ A417
 187+ A417
 188+ A417              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A417              ;BC/DE ==> BC, remainder in HL
 190+ A417              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A417              ;min: 738cc
 192+ A417              ;max: 898cc
 193+ A417              ;avg: 818cc
 194+ A417              ;144 bytes
 195+ A417 AF           BC_Div_DE:              xor a
 196+ A418 67                                   ld h,a
 197+ A419 6F                                   ld l,a
 198+ A41A 93                                   sub e
 199+ A41B 5F                                   ld e,a
 200+ A41C 9F                                   sbc a,a
 201+ A41D 92                                   sub d
 202+ A41E 57                                   ld d,a
 203+ A41F 78                                   ld a,b
 204+ A420                                      BCDIVDE_Iteration
 204+ A420 17          >				   rla
 204+ A421 ED 6A       >				   adc	hl,hl
 204+ A423 19          >				   add	hl,de
 204+ A424 38 02       >				   jr	c,1F
 204+ A426 ED 52       >				   sbc	hl,de
 204+ A428             >1:
 205+ A428                                      BCDIVDE_Iteration
 205+ A428 17          >				   rla
 205+ A429 ED 6A       >				   adc	hl,hl
 205+ A42B 19          >				   add	hl,de
 205+ A42C 38 02       >				   jr	c,1F
 205+ A42E ED 52       >				   sbc	hl,de
 205+ A430             >1:
 206+ A430                                      BCDIVDE_Iteration
 206+ A430 17          >				   rla
 206+ A431 ED 6A       >				   adc	hl,hl
 206+ A433 19          >				   add	hl,de
 206+ A434 38 02       >				   jr	c,1F
 206+ A436 ED 52       >				   sbc	hl,de
 206+ A438             >1:
 207+ A438                                      BCDIVDE_Iteration
 207+ A438 17          >				   rla
 207+ A439 ED 6A       >				   adc	hl,hl
 207+ A43B 19          >				   add	hl,de
 207+ A43C 38 02       >				   jr	c,1F
 207+ A43E ED 52       >				   sbc	hl,de
 207+ A440             >1:
 208+ A440                                      BCDIVDE_Iteration
 208+ A440 17          >				   rla
 208+ A441 ED 6A       >				   adc	hl,hl
 208+ A443 19          >				   add	hl,de
 208+ A444 38 02       >				   jr	c,1F
 208+ A446 ED 52       >				   sbc	hl,de
 208+ A448             >1:
 209+ A448                                      BCDIVDE_Iteration
 209+ A448 17          >				   rla
 209+ A449 ED 6A       >				   adc	hl,hl
 209+ A44B 19          >				   add	hl,de
 209+ A44C 38 02       >				   jr	c,1F
 209+ A44E ED 52       >				   sbc	hl,de
 209+ A450             >1:
 210+ A450                                      BCDIVDE_Iteration
 210+ A450 17          >				   rla
 210+ A451 ED 6A       >				   adc	hl,hl
 210+ A453 19          >				   add	hl,de
 210+ A454 38 02       >				   jr	c,1F
 210+ A456 ED 52       >				   sbc	hl,de
 210+ A458             >1:
 211+ A458                                      BCDIVDE_Iteration
 211+ A458 17          >				   rla
 211+ A459 ED 6A       >				   adc	hl,hl
 211+ A45B 19          >				   add	hl,de
 211+ A45C 38 02       >				   jr	c,1F
 211+ A45E ED 52       >				   sbc	hl,de
 211+ A460             >1:
 212+ A460 17                                   rla
 213+ A461 47                                   ld b,a
 214+ A462
 215+ A462 79                                   ld a,c
 216+ A463                                      BCDIVDE_Iteration
 216+ A463 17          >				   rla
 216+ A464 ED 6A       >				   adc	hl,hl
 216+ A466 19          >				   add	hl,de
 216+ A467 38 02       >				   jr	c,1F
 216+ A469 ED 52       >				   sbc	hl,de
 216+ A46B             >1:
 217+ A46B                                      BCDIVDE_Iteration
 217+ A46B 17          >				   rla
 217+ A46C ED 6A       >				   adc	hl,hl
 217+ A46E 19          >				   add	hl,de
 217+ A46F 38 02       >				   jr	c,1F
 217+ A471 ED 52       >				   sbc	hl,de
 217+ A473             >1:
 218+ A473                                      BCDIVDE_Iteration
 218+ A473 17          >				   rla
 218+ A474 ED 6A       >				   adc	hl,hl
 218+ A476 19          >				   add	hl,de
 218+ A477 38 02       >				   jr	c,1F
 218+ A479 ED 52       >				   sbc	hl,de
 218+ A47B             >1:
 219+ A47B                                      BCDIVDE_Iteration
 219+ A47B 17          >				   rla
 219+ A47C ED 6A       >				   adc	hl,hl
 219+ A47E 19          >				   add	hl,de
 219+ A47F 38 02       >				   jr	c,1F
 219+ A481 ED 52       >				   sbc	hl,de
 219+ A483             >1:
 220+ A483                                      BCDIVDE_Iteration
 220+ A483 17          >				   rla
 220+ A484 ED 6A       >				   adc	hl,hl
 220+ A486 19          >				   add	hl,de
 220+ A487 38 02       >				   jr	c,1F
 220+ A489 ED 52       >				   sbc	hl,de
 220+ A48B             >1:
 221+ A48B                                      BCDIVDE_Iteration
 221+ A48B 17          >				   rla
 221+ A48C ED 6A       >				   adc	hl,hl
 221+ A48E 19          >				   add	hl,de
 221+ A48F 38 02       >				   jr	c,1F
 221+ A491 ED 52       >				   sbc	hl,de
 221+ A493             >1:
 222+ A493                                      BCDIVDE_Iteration
 222+ A493 17          >				   rla
 222+ A494 ED 6A       >				   adc	hl,hl
 222+ A496 19          >				   add	hl,de
 222+ A497 38 02       >				   jr	c,1F
 222+ A499 ED 52       >				   sbc	hl,de
 222+ A49B             >1:
 223+ A49B                                      BCDIVDE_Iteration
 223+ A49B 17          >				   rla
 223+ A49C ED 6A       >				   adc	hl,hl
 223+ A49E 19          >				   add	hl,de
 223+ A49F 38 02       >				   jr	c,1F
 223+ A4A1 ED 52       >				   sbc	hl,de
 223+ A4A3             >1:
 224+ A4A3 17                                   rla
 225+ A4A4 4F                                   ld c,a
 226+ A4A5 C9                                   ret
 227+ A4A6
 228+ A4A6              ;Inputs:
 229+ A4A6              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A4A6              ;Outputs:
 231+ A4A6              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A4A6              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A4A6              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A4A6              ;Otherwise:
 235+ A4A6              ;min: 1107cc
 236+ A4A6              ;max: 1319cc
 237+ A4A6              ;avg: 1201cc
 238+ A4A6 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A4A7 AA                                   xor d
 240+ A4A8 F5                                   push af   ;sign bit is the result sign bit
 241+ A4A9              ; Now make sure the inputs are positive
 242+ A4A9 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A4AA F2 B3 A4                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A4AD AF                                   xor a
 245+ A4AE 91                                   sub c
 246+ A4AF 4F                                   ld c,a
 247+ A4B0 9F                                   sbc a,a
 248+ A4B1 90                                   sub b
 249+ A4B2 47                                   ld b,a
 250+ A4B3 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A4B4 B2                                   or d
 252+ A4B5 FA BE A4                             jp m,BC_Div_DE_88_lbl2
 253+ A4B8 AF                                   xor a
 254+ A4B9 93                                   sub e
 255+ A4BA 5F                                   ld e,a
 256+ A4BB 9F                                   sbc a,a
 257+ A4BC 92                                   sub d
 258+ A4BD 57                                   ld d,a
 259+ A4BE B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A4BF 28 1D                                jr z,div_fixed88_overflow
 261+ A4C1 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A4C3 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A4C4 83                                   add a,e
 264+ A4C5 7A                                   ld a,d
 265+ A4C6 8C                                   adc a,h
 266+ A4C7 38 15                                jr c,div_fixed88_overflow
 267+ A4C9 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A4CA 79                                   ld a,c
 269+ A4CB CD E6 A4                             call div_fixed88_sub
 270+ A4CE 4F                                   ld c,a
 271+ A4CF 78                                   ld a,b      ;A is now 0
 272+ A4D0 CD E6 A4                             call div_fixed88_sub
 273+ A4D3 51                                   ld d,c
 274+ A4D4 5F                                   ld e,a
 275+ A4D5 F1                                   pop af
 276+ A4D6 F0                                   ret p
 277+ A4D7 AF                                   xor a
 278+ A4D8 93                                   sub e
 279+ A4D9 5F                                   ld e,a
 280+ A4DA 9F                                   sbc a,a
 281+ A4DB 92                                   sub d
 282+ A4DC 57                                   ld d,a
 283+ A4DD C9                                   ret
 284+ A4DE
 285+ A4DE 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A4E1 F1                                   pop af
 287+ A4E2 F0                                   ret p
 288+ A4E3 13                                   inc de
 289+ A4E4 1C                                   inc e
 290+ A4E5 C9                                   ret
 291+ A4E6
 292+ A4E6              ;min: 456cc
 293+ A4E6              ;max: 536cc
 294+ A4E6              ;avg: 496cc
 295+ A4E6 06 08        div_fixed88_sub:        ld b,8
 296+ A4E8 17           BC_Div_DE_88_lbl3:      rla
 297+ A4E9 ED 6A                                adc hl,hl
 298+ A4EB 19                                   add hl,de
 299+ A4EC 38 02                                jr c,$+4
 300+ A4EE ED 52                                sbc hl,de
 301+ A4F0 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A4F2 8F                                   adc a,a
 303+ A4F3 C9                                   ret
 304+ A4F4
# file closed: ./Maths/asm_divide.asm
 881  A4F4                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A4F4              asm_tis2:
   2+ A4F4              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A4F4              ; ">DOES NOT DO SIGNED YET"
   4+ A4F4 F5           	push af
   5+ A4F5 E6 7F            and SignMask8Bit
   6+ A4F7 57           	ld d,a				;; d = A
   7+ A4F8 3A 64 94     	ld a,(varQ)
   8+ A4FB 5F           	ld e,a
   9+ A4FC 7A           	ld a,d
  10+ A4FD BB           	cp e
  11+ A4FE 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A500 1E 60        	ld e, 96
  13+ A502 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A504 EB           	ex de,hl
  15+ A505 3A 64 94     	ld a,(varQ)
  16+ A508 4F           	ld c,a
  17+ A509 CD E1 A3     	call asm_div16
  18+ A50C F1           	pop af
  19+ A50D E6 80        	and $80
  20+ A50F B5           	or l
  21+ A510 C9           	ret
  22+ A511              .tis2_set96:
  23+ A511 F1           	pop af
  24+ A512 E6 80        	and $80
  25+ A514 F6 96        	or $96
  26+ A516 C9           	ret
  27+ A517
  28+ A517
  29+ A517              asm_unit_vector:
  30+ A517              squareregfx:
  31+ A517 3A 75 C0     	ld a,(UBnkXScaled)
  32+ A51A 57           	ld d,a
  33+ A51B 5F           	ld e,a
  34+ A51C ED 30        	mul
  35+ A51E EB           	ex de,hl
  36+ A51F              squareregfy:
  37+ A51F 3A 77 C0     	ld a, (UBnkYScaled)
  38+ A522 57           	ld d,a
  39+ A523 5F           	ld e,a
  40+ A524 ED 30        	mul
  41+ A526 19           	add hl,de
  42+ A527              squareregfz:
  43+ A527 3A 79 C0     	ld a, (UBnkZScaled)
  44+ A52A 57           	ld d,a
  45+ A52B 5F           	ld e,a
  46+ A52C ED 30        	mul
  47+ A52E 19           	add hl,de
  48+ A52F EB           	ex de,hl			; de de to number to root
  49+ A530              hlequsquareroot:
  50+ A530 CD E4 A2     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A533 E5           	push hl				; save it for work 3 copies
  52+ A534 E5           	push hl				; save it for work
  53+ A535 E5           	push hl				; save it for work
  54+ A536              normfx:
  55+ A536 3A 75 C0     	ld a,(UBnkXScaled)
  56+ A539 E1           	pop hl				; get copy #1
  57+ A53A 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A53B 4F           	ld c,a
  59+ A53C CD F4 A4     	call asm_tis2
  60+ A53F 32 75 C0     	ld (UBnkXScaled),a
  61+ A542              normfy:
  62+ A542 3A 77 C0     	ld a,(UBnkYScaled)
  63+ A545 E1           	pop hl				; get copy #2
  64+ A546 7D           	ld a,l
  65+ A547 4F           	ld c,a
  66+ A548 CD F4 A4     	call asm_tis2
  67+ A54B 32 77 C0     	ld (UBnkYScaled),a
  68+ A54E              normfz:
  69+ A54E 3A 79 C0     	ld a,(UBnkZScaled)
  70+ A551 E1           	pop hl				; get copy #2
  71+ A552 7D           	ld a,l
  72+ A553 4F           	ld c,a
  73+ A554 CD F4 A4     	call asm_tis2
  74+ A557 32 79 C0     	ld (UBnkZScaled),a
  75+ A55A              asm_unit_vector_end:
  76+ A55A C9           	ret
  77+ A55B
# file closed: ./Maths/asm_unitvector.asm
 882  A55B                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A55B              compare16HLDE:
   2+ A55B              ; Input:
   3+ A55B              ;       HL = 1st value
   4+ A55B              ;       DE = 2nd value
   5+ A55B              ; Output:
   6+ A55B              ;       CF, ZF = results of comparison:
   7+ A55B              ;
   8+ A55B              ;               CF      ZF      Result
   9+ A55B              ;               -----------------------------------
  10+ A55B              ;               0       0       HL > DE
  11+ A55B              ;               0       1       HL == DE
  12+ A55B              ;               1       0       HL < DE
  13+ A55B              ;               1       1       Impossible
  14+ A55B              ;
  15+ A55B E5           		push    hl
  16+ A55C A7           		and     a
  17+ A55D ED 52        		sbc     hl,de
  18+ A55F E1           		pop     hl
  19+ A560 C9           		ret
  20+ A561
# file closed: ./Maths/compare16.asm
 883  A561                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A561              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A561              ;; 16-bit negate
   3+ A561              negate16:
   4+ A561              negate16hl:
   5+ A561                      ; Input:
   6+ A561                      ;       HL = value
   7+ A561                      ; Output:
   8+ A561                      ;       HL = -value
   9+ A561                      ; Destroys:
  10+ A561                      ;       AF
  11+ A561                      ;
  12+ A561 AF           	xor 	a
  13+ A562 95           	sub 	l
  14+ A563 6F           	ld 		l,a
  15+ A564 9F           	sbc 	a,a
  16+ A565 94           	sub 	h
  17+ A566 67           	ld 		h,a
  18+ A567 C9           	ret
  19+ A568
  20+ A568              negate16de:
  21+ A568 AF           	xor 	a
  22+ A569 93           	sub 	e
  23+ A56A 5F           	ld 		e,a
  24+ A56B 9F           	sbc 	a,a
  25+ A56C 92           	sub 	d
  26+ A56D 57           	ld 		d,a
  27+ A56E C9           	ret
  28+ A56F
  29+ A56F              negate16bc:
  30+ A56F AF           	xor 	a
  31+ A570 91           	sub 	c
  32+ A571 4F           	ld 		c,a
  33+ A572 9F           	sbc 	a,a
  34+ A573 90           	sub 	b
  35+ A574 47           	ld 		b,a
  36+ A575 C9           	ret
  37+ A576
  38+ A576
  39+ A576              macronegate16hl:	MACRO
  40+ A576 ~            					xor 	a
  41+ A576 ~            					sub 	l
  42+ A576 ~            					ld 		l,a
  43+ A576 ~            					sbc 	a,a
  44+ A576 ~            					sub 	h
  45+ A576 ~            					ld 		h,a
  46+ A576              					ENDM
  47+ A576
  48+ A576              macronegate16de:	MACRO
  49+ A576 ~            					xor 	a
  50+ A576 ~                                sub 	e
  51+ A576 ~                                ld 		e,a
  52+ A576 ~                                sbc 	a,a
  53+ A576 ~                                sub 	d
  54+ A576 ~                                ld 		d,a
  55+ A576              					ENDM
  56+ A576              macronegate16bc:	MACRO
  57+ A576 ~            					xor 	a
  58+ A576 ~                                sub 	c
  59+ A576 ~                                ld 		c,a
  60+ A576 ~                                sbc 	a,a
  61+ A576 ~                                sub 	b
  62+ A576 ~                                ld 		b,a
  63+ A576              					ENDM
  64+ A576
  65+ A576              macronegate16ix:	MACRO
  66+ A576 ~            					xor 	a
  67+ A576 ~                                sub 	ixl
  68+ A576 ~                                ld 		ixl,a
  69+ A576 ~                                sbc 	a,a
  70+ A576 ~                                sub 	ixh
  71+ A576 ~                                ld 		ixh,a
  72+ A576              					ENDM
# file closed: ./Maths/negate16.asm
 884  A576                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A576 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A578                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A578 BA          >                        cp     d
   2+ A579 D2 8E A5    >                        jp		nc,TISXAccGTEQ
   3+ A57C 4F                                   ld			c,a
   4+ A57D CD D3 A3                             call		asm_div8
   5+ A580 79                                   ld			a,c							; a = result
   6+ A581 CB 3F                                srl			a							; result / 4
   7+ A583 47                                   ld			b,a							; t = t /4
   8+ A584 CB 3F                                srl			a							; result / 8
   9+ A586 80                                   add			a,b							; result /8 + result /4
  10+ A587 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A588 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A58A E6 80                                and			$80							; recover sign only
  13+ A58C B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A58D C9                                   ret
  15+ A58E              TISXAccGTEQ:
  16+ A58E              ;TI4:										;\ clean to +/- unity
  17+ A58E DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A590 E6 80                                and			$80							; copy of Acc
  19+ A592 F6 60                                or			$60							; unity
  20+ A594 C9                                   ret
  21+ A595
  22+ A595
  23+ A595
  24+ A595
  25+ A595              normaliseXX1596fast:
  26+ A595                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A595 3A 75 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A598 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A59A E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ A59C              N96SQX:
  31+ A59C              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A59C 5F          >			ld	e,a
  31+ A59D 57          >			ld  d,a
  31+ A59E ED 30       >			mul
  32+ A5A0 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A5A1 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A5A2              N96SQY:
  35+ A5A2 3A 76 C0     	ld		a,(XX15+1)
  36+ A5A5 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A5A7 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ A5A9              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A5A9 5F          >			ld	e,a
  38+ A5AA 57          >			ld  d,a
  38+ A5AB ED 30       >			mul
  39+ A5AD 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A5AE              N96SQZ:
  41+ A5AE 3A 77 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A5B1 FD 67        	ld		iyh,a               ; iyh = signed
  43+ A5B3 E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ A5B5              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A5B5 5F          >			ld	e,a
  44+ A5B6 57          >			ld  d,a
  44+ A5B7 ED 30       >			mul
  45+ A5B9              N96SQADD:
  46+ A5B9 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A5BA EB           	ex		de,hl				; hl => de ready for square root
  48+ A5BB              N96SQRT:
  49+ A5BB CD E4 A2     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A5BE              N96NORMX:
  51+ A5BE 3A 75 C0     	ld		a,(XX15+0)
  52+ A5C1 E6 7F        	and		SignMask8Bit
  53+ A5C3 4F           	ld		c,a
  54+ A5C4 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A5C5 CD A2 A7     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A5C8 47           	ld		b,a				;++SGN
  57+ A5C9 DD 7C        	ld		a,ixh			;++SGN
  58+ A5CB E6 80        	and		$80				;++SGN
  59+ A5CD B0           	or		b				;++SGN
  60+ A5CE 32 75 C0     	ld		(XX15+0),a
  61+ A5D1              N96NORMY:
  62+ A5D1 3A 76 C0     	ld		a,(XX15+1)
  63+ A5D4 E6 7F        	and		SignMask8Bit
  64+ A5D6 4F           	ld		c,a
  65+ A5D7 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A5D8 CD A2 A7     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A5DB 47           	ld		b,a				;++SGN
  68+ A5DC DD 7D        	ld		a,ixl			;++SGN
  69+ A5DE E6 80        	and		$80				;++SGN
  70+ A5E0 B0           	or		b				;++SGN
  71+ A5E1 32 76 C0     	ld		(XX15+1),a
  72+ A5E4              N96NORMZ:
  73+ A5E4 3A 77 C0     	ld		a,(XX15+2)
  74+ A5E7 E6 7F        	and		SignMask8Bit
  75+ A5E9 4F           	ld		c,a
  76+ A5EA 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A5EB CD A2 A7     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A5EE 47           	ld		b,a				;++SGN
  79+ A5EF FD 7C        	ld		a,iyh			;++SGN
  80+ A5F1 E6 80        	and		$80				;++SGN
  81+ A5F3 B0           	or		b				;++SGN
  82+ A5F4 32 77 C0     	ld		(XX15+2),a
  83+ A5F7 C9           	ret
  84+ A5F8
  85+ A5F8              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  86+ A5F8 3A 75 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  87+ A5FB                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  87+ A5FB 5F          >			ld	e,a
  87+ A5FC 57          >			ld  d,a
  87+ A5FD ED 30       >			mul
  88+ A5FF 7A                                   ld		a,d
  89+ A600 32 65 94                             ld		(varR),a			; R	 \ hi sum later use b
  90+ A603 7B                                   ld		a,e
  91+ A604 32 64 94                             ld		(varQ),a			; Q	 \ lo sum later use c
  92+ A607 32 09 94                             ld		(varP),a			; P	 \ lo sum later just drop
  93+ A60A 3A 76 C0                             ld		a,(XX15+1)
  94+ A60D                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  94+ A60D 5F          >			ld	e,a
  94+ A60E 57          >			ld  d,a
  94+ A60F ED 30       >			mul
  95+ A611 7A                                   ld		a,d
  96+ A612 32 84 94                             ld		(varT),a			; T	 \ hi sum
  97+ A615 7B                                   ld		a,e
  98+ A616 32 09 94                             ld		(varP),a			; P	 \ lo sum
  99+ A619 21 64 94                             ld		hl,varQ
 100+ A61C 8E                                   adc		a,(hl)				; +Q
 101+ A61D 32 64 94                             ld		(varQ),a			; =>Q
 102+ A620 3A 84 94                             ld		a,(varT)			;
 103+ A623 21 65 94                             ld		hl,varR
 104+ A626 8E                                   adc		a,(hl)				;  R
 105+ A627 32 65 94                             ld		(varR),a			; R
 106+ A62A 3A 77 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 107+ A62D                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 107+ A62D 5F          >			ld	e,a
 107+ A62E 57          >			ld  d,a
 107+ A62F ED 30       >			mul
 108+ A631 7A                                   ld		a,d
 109+ A632 32 84 94                             ld		(varT),a			; T	 \ hi sum
 110+ A635 7B                                   ld		a,e
 111+ A636 32 09 94                             ld		(varP),a			; P	 \ lo sum
 112+ A639 21 64 94                             ld		hl,varQ
 113+ A63C 8E                                   adc		a,(hl)				; +Q
 114+ A63D 32 64 94                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 115+ A640 3A 84 94                             ld		a,(varT)			; T temp Hi
 116+ A643 21 65 94                             ld		hl,varR
 117+ A646 8E                                   adc		a,(hl)				; +R
 118+ A647 32 65 94                             ld		(varR),a			; R
 119+ A64A CD 07 A3                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 120+ A64D 3A 75 C0                             ld		a,(XX15+0)
 121+ A650 CD 9C A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 122+ A653 32 75 C0                             ld		(XX15+0),a
 123+ A656 3A 76 C0                             ld		a,(XX15+1)
 124+ A659 CD 9C A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 125+ A65C 32 76 C0                             ld		(XX15+1),a
 126+ A65F 3A 76 C0                             ld		a,(XX15+1)
 127+ A662 CD 9C A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ A665 32 76 C0                             ld		(XX15+1),a
 129+ A668 C9                                   ret
 130+ A669
 131+ A669
# file closed: ./Maths/normalise96.asm
 885  A669                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A669              ;Number in hl to decimal ASCII
   2+ A669              ;Thanks to z80 Bits
   3+ A669              ;inputs:	hl = number to ASCII
   4+ A669              ;example: hl=300 outputs '00300'
   5+ A669              ;destroys: af, bc, hl, de used
   6+ A669              DispHLtoDE:
   7+ A669              ; "DispHL, writes HL to DE address"
   8+ A669 01 F0 D8     	ld	bc,-10000
   9+ A66C CD 82 A6     	call	Num1
  10+ A66F 01 18 FC     	ld	bc,-1000
  11+ A672 CD 82 A6     	call	Num1
  12+ A675 01 9C FF     	ld	bc,-100
  13+ A678 CD 82 A6     	call	Num1
  14+ A67B 0E F6        	ld	c,-10
  15+ A67D CD 82 A6     	call	Num1
  16+ A680 0E FF        	ld	c,-1
  17+ A682              Num1:
  18+ A682 3E 2F        	ld	a,'0'-1
  19+ A684              .Num2:
  20+ A684 3C           	inc	a
  21+ A685 09           	add	hl,bc
  22+ A686 38 FC        	jr	c,.Num2
  23+ A688 ED 42        	sbc	hl,bc
  24+ A68A 12           	ld	(de),a
  25+ A68B 13           	inc	de
  26+ A68C C9           	ret
  27+ A68D
  28+ A68D              DispAtoDE:
  29+ A68D 26 00        	ld h,0
  30+ A68F 6F           	ld l,a
  31+ A690 C3 69 A6     	jp DispHLtoDE
  32+ A693
  33+ A693              DispPriceAtoDE:
  34+ A693 26 00        	ld h,0
  35+ A695 6F           	ld l,a
  36+ A696 01 9C FF     	ld	bc,-100
  37+ A699 CD A9 A6     	call	.NumLeadBlank1
  38+ A69C 0E F6        	ld	c,-10
  39+ A69E CD 82 A6     	call	Num1
  40+ A6A1 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A6A3 12           	ld		(de),a					; we can optimse that later TODO
  42+ A6A4 13           	inc		de						; with just an inc De
  43+ A6A5 0E FF        	ld	c,-1
  44+ A6A7 18 D9        	jr		Num1
  45+ A6A9              .NumLeadBlank1:
  46+ A6A9 3E 2F        	ld	a,'0'-1
  47+ A6AB              .NumLeadBlank2:
  48+ A6AB 3C           	inc	a
  49+ A6AC 09           	add	hl,bc
  50+ A6AD 38 FC        	jr	c,.NumLeadBlank2
  51+ A6AF FE 30        	cp	'0'
  52+ A6B1 20 02        	jr	nz,.DontBlank
  53+ A6B3              .Blank:
  54+ A6B3 3E 20        	ld	a,' '
  55+ A6B5              .DontBlank:
  56+ A6B5 ED 42        	sbc	hl,bc
  57+ A6B7 12           	ld	(de),a
  58+ A6B8 13           	inc	de
  59+ A6B9 C9           	ret
  60+ A6BA
  61+ A6BA              DispQtyAtoDE:
  62+ A6BA FE 00        	cp	0
  63+ A6BC 28 23        	jr	z,.NoStock
  64+ A6BE 26 00        	ld h,0
  65+ A6C0 6F           	ld l,a
  66+ A6C1 01 9C FF     	ld	bc,-100
  67+ A6C4 CD D0 A6     	call	.NumLeadBlank1
  68+ A6C7 0E F6        	ld	c,-10
  69+ A6C9 CD D0 A6     	call	.NumLeadBlank1
  70+ A6CC 0E FF        	ld	c,-1
  71+ A6CE 18 B2        	jr		Num1
  72+ A6D0              .NumLeadBlank1:
  73+ A6D0 3E 2F        	ld	a,'0'-1
  74+ A6D2              .NumLeadBlank2:
  75+ A6D2 3C           	inc	a
  76+ A6D3 09           	add	hl,bc
  77+ A6D4 38 FC        	jr	c,.NumLeadBlank2
  78+ A6D6 FE 30        	cp	'0'
  79+ A6D8 20 02        	jr	nz,.DontBlank
  80+ A6DA              .Blank:
  81+ A6DA 3E 20        	ld	a,' '
  82+ A6DC              .DontBlank:
  83+ A6DC ED 42        	sbc	hl,bc
  84+ A6DE 12           	ld	(de),a
  85+ A6DF 13           	inc	de
  86+ A6E0 C9           	ret
  87+ A6E1              .NoStock:
  88+ A6E1 3E 20        	ld	a,' '
  89+ A6E3 12           	ld	(de),a
  90+ A6E4 13           	inc	de
  91+ A6E5 12           	ld	(de),a
  92+ A6E6 13           	inc	de
  93+ A6E7 3E 2D        	ld	a,'-'
  94+ A6E9 12           	ld	(de),a
  95+ A6EA 13           	inc de
  96+ A6EB C9           	ret
  97+ A6EC
  98+ A6EC
  99+ A6EC              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A6EC              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A6EC              ;### Output     IY=last char in destination string
 102+ A6EC              ;### Destroyed AF,BC,DE,HL,IX
 103+ A6EC 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A6F0 0A 00 00 00
 103+ A6F4 64 00 00 00
 103+ A6F8 E8 03 00 00
 103+ A6FC 10 27 00 00
 104+ A700 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A704 40 42 0F 00
 104+ A708 80 96 98 00
 104+ A70C 00 E1 F5 05
 104+ A710 00 CA 9A 3B
 105+ A714 00 00 00 00  clcn32z ds 4
 106+ A718
 107+ A718              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A718 CD 27 A7     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A71B FD 7E 00                             ld      a,(IY+0)
 110+ A71E FD 77 01                             ld      (IY+1),a
 111+ A721 3E 2E                                ld      a,"."
 112+ A723 FD 77 00                             ld      (IY+0),a
 113+ A726 C9                                   ret
 114+ A727
 115+ A727 DD 22 14 A7  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A72B ED 53 16 A7                          ld (clcn32z+2),de
 117+ A72F DD 21 10 A7                          ld ix,clcn32t+36
 118+ A733 06 09                                ld b,9
 119+ A735 0E 00                                ld c,0
 120+ A737 3E 30        .clcn321:               ld a,'0'
 121+ A739 B7                                   or a
 122+ A73A DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A73D DD 56 01                             ld d,(ix+1)
 124+ A740 2A 14 A7                             ld hl,(clcn32z)
 125+ A743 ED 52                                sbc hl,de
 126+ A745 22 14 A7                             ld (clcn32z),hl
 127+ A748 DD 5E 02                             ld e,(ix+2)
 128+ A74B DD 56 03                             ld d,(ix+3)
 129+ A74E 2A 16 A7                             ld hl,(clcn32z+2)
 130+ A751 ED 52                                sbc hl,de
 131+ A753 22 16 A7                             ld (clcn32z+2),hl
 132+ A756 38 04                                jr c,.clcn325
 133+ A758 0C                                   inc c
 134+ A759 3C                                   inc a
 135+ A75A 18 DE                                jr .clcn322
 136+ A75C DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A75F DD 56 01                             ld d,(ix+1)
 138+ A762 2A 14 A7                             ld hl,(clcn32z)
 139+ A765 19                                   add hl,de
 140+ A766 22 14 A7                             ld (clcn32z),hl
 141+ A769 DD 5E 02                             ld e,(ix+2)
 142+ A76C DD 56 03                             ld d,(ix+3)
 143+ A76F 2A 16 A7                             ld hl,(clcn32z+2)
 144+ A772 ED 5A                                adc hl,de
 145+ A774 22 16 A7                             ld (clcn32z+2),hl
 146+ A777 11 FC FF                             ld de,-4
 147+ A77A DD 19                                add ix,de
 148+ A77C 0C                                   inc c
 149+ A77D 0D                                   dec c
 150+ A77E 28 05                                jr z,.clcn323
 151+ A780 FD 77 00                             ld (iy+0),a
 152+ A783 FD 23                                inc iy
 153+ A785 10 B0        .clcn323:               djnz .clcn321
 154+ A787 3A 14 A7                             ld a,(clcn32z)
 155+ A78A C6 30                                add A,'0'
 156+ A78C FD 77 00                             ld (iy+0),a
 157+ A78F FD 36 01 00                          ld (iy+1),0
 158+ A793 C9                                   ret
 159+ A794
# file closed: ./Maths/binary_to_decimal.asm
 886  A794              ;INCLUDE "badd_ll38.asm"
 887  A794              ;;INCLUDE "XX12equXX15byXX16.asm"
 888  A794                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A794
   2+ A794              ; USES 			A DE BC
   3+ A794              ; DOES NOT USE 	HL
   4+ A794              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A794 CB 7F        	bit			7,a
   6+ A796 28 04        	jr			z,AequAdivQmul96
   7+ A798 ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A79A CB FF        	set			7,a
   9+ A79C              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A79C              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A79C              TIS2:
  12+ A79C 4F           	ld			c,a							; copy of Acc
  13+ A79D 3A 64 94     	ld			a,(varQ)
  14+ A7A0 57           	ld			d,a							; d = varQ
  15+ A7A1 79           	ld			a,c							; recover a
  16+ A7A2              AequAdivDmul96:
  17+ A7A2 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A7A3 E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A7A5              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A7A5 BA          >                        cp     d
  19+ A7A6 D2 C6 A7    >                        jp		nc,TIS2AccGTEQ
  20+ A7A9 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A7AB              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A7AB CB 27        	sla			a
  23+ A7AD              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A7AD BA          >                        cp      d
  23+ A7AE DA CC A7    >                        jp		c, TIS2SkipSub
  24+ A7B1 9A           	sbc			a,d							; do subtraction with carry
  25+ A7B2 37           	scf
  26+ A7B3 CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A7B5 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A7B7              TIS2SKIPCont:
  29+ A7B7 78           	ld			a,b							; T
  30+ A7B8 CB 3F        	srl			a							; result / 2
  31+ A7BA CB 3F        	srl			a							; result / 4
  32+ A7BC 47           	ld			b,a							; t = t /4
  33+ A7BD CB 3F        	srl			a							; result / 8
  34+ A7BF 80           	add			a,b							; result /8 + result /4
  35+ A7C0 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A7C1 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A7C2 E6 80        	and			$80							; recover sign only
  38+ A7C4 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A7C5 C9           	ret
  40+ A7C6              TIS2AccGTEQ:
  41+ A7C6              ;TI4:										;\ clean to +/- unity
  42+ A7C6 79           	ld			a,c
  43+ A7C7 E6 80        	and			$80							; copy of Acc
  44+ A7C9 F6 60        	or			$60							; unity
  45+ A7CB C9           	ret
  46+ A7CC              TIS2SkipSub:
  47+ A7CC B7           	or			a
  48+ A7CD CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A7CF 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A7D1 C3 B7 A7     	jp			TIS2SKIPCont
  51+ A7D4
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 889  A7D4                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A7D4              fmltu:
   2+ A7D4              AequAmulQdiv256:
   3+ A7D4              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A7D4 57           	ld	d,a
   5+ A7D5 3A 64 94     	ld	a,(varQ)
   6+ A7D8 5F           	ld	e,a
   7+ A7D9 ED 30        	mul
   8+ A7DB 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A7DC C9           	ret
  10+ A7DD
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 890  A7DD                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A7DD              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A7DD              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A7DD 21 51 97     		ld		hl,varDustZ
   4+ A7E0 FD 7D        		ld		a,iyl
   5+ A7E2 ED 31        		add		hl,a
   6+ A7E4 7E           		ld		a,(hl)
   7+ A7E5 C3 F1 A7     		jp		DV41
   8+ A7E8              DV42:										; travel step of dust particle front/rear
   9+ A7E8 21 51 97     		ld		hl,varDustZ
  10+ A7EB 3A F7 93     		ld		a,(regY)
  11+ A7EE ED 31        		add		hl,a
  12+ A7F0 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A7F1              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A7F1 5F           		ld		e,a							; using E as Q var replacement
  15+ A7F2 3A 60 94     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A7F5              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A7F5 06 08        		ld		b,8							; counter
  18+ A7F7 CB 27        		sla		a							;
  19+ A7F9 57           		ld		d,a							; use d for - p = delta * 2
  20+ A7FA AF           		xor		a
  21+ A7FB              DVL4:										; counter x loop (b reg)
  22+ A7FB CB 17        		rl		a							; a = a * 2
  23+ A7FD 38 03        		jr		c,DV8						; jump on carry
  24+ A7FF BB           		cp		e							; var Q
  25+ A800 38 02        		jr		c,DV5						; skip subtraction
  26+ A802              DV8:
  27+ A802 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A803 37           		scf									;  carry gets set
  29+ A804              DV5:										; skipped subtraction
  30+ A804 CB 12        		rl		d							; d (P hi)
  31+ A806 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A808              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A808              ; Note we are not going to call LL28+4 but inline code here:
  34+ A808 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A80A 4F           		ld		c,a							; use c as R var
  36+ A80B              .RollRemainder:
  37+ A80B CB 27        		sla		a
  38+ A80D 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A80F B8           		cp		b							; a < q?
  40+ A810 30 01        		jr		nc,.DontSBC
  41+ A812              .DoSBC:										; a is < q
  42+ A812 98           		sbc		a,b							; 	a -= q
  43+ A813              .DontSBC:
  44+ A813 CB 11        		rl		c							; r << 1
  45+ A815 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A817 79           		ld		a,c
  47+ A818 32 65 94     		ld		(varR),a					; for backwards compat
  48+ A81B 7A           		ld		a,d
  49+ A81C 32 09 94     		ld		(varP),a
  50+ A81F C9           		ret									; R (c) left with remainder
  51+ A820              .Reduce:									; a geneated a carry
  52+ A820 98           		sbc		a,b							; a = a - (q +1)
  53+ A821 37           		scf									; set carry flag for rl
  54+ A822 CB 11        		rl		c							; r << 1 briging in carry
  55+ A824 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A826 79           		ld		a,c
  57+ A827 32 65 94     		ld		(varR),a					; for backwards compat
  58+ A82A 7A           		ld		a,d
  59+ A82B 32 09 94     		ld		(varP),a
  60+ A82E C9           		ret
  61+ A82F              .AnswerTooBig:
  62+ A82F 0E FF        		ld		c,$FF						; arse its too big
  63+ A831 79           		ld		a,c
  64+ A832 32 65 94     		ld		(varR),a					; for backwards compat
  65+ A835 7A           		ld		a,d
  66+ A836 32 09 94     		ld		(varP),a
  67+ A839 C9           		ret
  68+ A83A
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 891  A83A                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A83A
   2+ A83A              asm_defmutl:
   3+ A83A              AequDmulEdiv256usgn:
   4+ A83A              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A83A ED 30        	mul
   6+ A83C 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A83D C9           	ret
   8+ A83E
   9+ A83E
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 892  A83E              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 893  A83E              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 894  A83E              ;INCLUDE "APequPmulX-MU11.asm"
 895  A83E                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A83E              APequQmulA:
   2+ A83E              asm_mult1:
   3+ A83E              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A83E FE 00        	cp	0
   5+ A840 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A842 5F           	ld	e,a
   7+ A843 3A 64 94     	ld	a,(varQ)
   8+ A846 57           	ld	d,a
   9+ A847 FE 00        	cp	0				; compare a
  10+ A849 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A84B AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A84C E6 80        	and $80				; get the resultant sign and save into b
  13+ A84E 47           	ld	b,a
  14+ A84F 7A           	ld	a,d
  15+ A850 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A852 57           	ld	d,a
  17+ A853 7B           	ld	a,e
  18+ A854 E6 7F        	and SignMask8Bit
  19+ A856 5F           	ld	e,a
  20+ A857 ED 30        	mul					; zxn de = d * e
  21+ A859 7B           	ld	a,e
  22+ A85A 32 09 94     	ld	(varP),a		; p = lo
  23+ A85D 7A           	ld	a,d				; a = hi
  24+ A85E B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A85F 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A860 C9           	ret
  27+ A861              .mul0:
  28+ A861 AF           	xor	a
  29+ A862 32 09 94     	ld	(varP),a
  30+ A865 57           	ld	d,a
  31+ A866 5F           	ld  e,a
  32+ A867 C9           	ret
  33+ A868
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 896  A868                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A868              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A868              SAEquSRPlusAQ:
   3+ A868              ; Calculate the following between sign-magnitude numbers:
   4+ A868              ;   (S A) = (S R) + (A Q)
   5+ A868              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ A868              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ A868              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ A868              LL38:
   9+ A868              ;	ld		d,a
  10+ A868              ;	ld		a,(varQ)
  11+ A868              ;	ld		e,a
  12+ A868              ;	ld		a,(varS)
  13+ A868              ;	ld		h,a
  14+ A868              ;	ld		a,(varR)
  15+ A868              ;	ld		l,a
  16+ A868              ;	call	ADDHLDESignedv3
  17+ A868              ;	ld		a,h
  18+ A868              ;	ld		(varS),a
  19+ A868              ;	ld		a,l
  20+ A868              ;	ret
  21+ A868              ; calculation table
  22+ A868              ;   R     Q    Op            Sign calc
  23+ A868              ;	10    5    Add           +    sign same add R sign
  24+ A868              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ A868              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ A868              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ A868              ;   5    10    Add           +    sign same add R sign
  28+ A868              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ A868              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ A868              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ A868
  32+ A868              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ A868              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ A868              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ A868              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ A868
  37+ A868
  38+ A868              ; Calculate sign for Q from A and varS
  39+ A868 21 66 94     	ld		hl,varS							;
  40+ A86B AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ A86C FA 77 A8     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ A86F 3A 64 94     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ A872 21 65 94     	ld		hl,varR
  44+ A875 86           	add		a,(hl)							; a = Q + R
  45+ A876 C9           	ret										; Done carry set if overflow
  46+ A877              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ A877 3A 65 94     	ld		a,(varR)						; a = R
  48+ A87A 21 64 94     	ld		hl,varQ                         ; Q
  49+ A87D              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ A87D              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ A87D B7          >                        or a
  51+ A87E 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ A87F 38 01            jr      c,.LL39SignCorrection
  53+ A881              ;--    jr      a,.LL39ResultZero
  54+ A881              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ A881              ;--	or		a								; Clear carry flag to say result is correct
  56+ A881 C9           	ret
  57+ A882              .LL39SignCorrection:
  58+ A882 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ A884 28 0E            jr      z,.LL39ResultZero
  60+ A886 ED 44            neg                                     ; flip A 2'c value to positive
  61+ A888 08           	ex		af,af'							; save A temporarily
  62+ A889 3A 66 94     	ld		a,(varS)						; Flip Sign bit in varS
  63+ A88C EE 80        	xor		$80							    ;
  64+ A88E 32 66 94     	ld		(varS),a                        ; flip sign bit of a
  65+ A891 08           	ex		af,af'                          ; get back a which is the result
  66+ A892                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ A892 B7          >                        or a
  67+ A893 C9           	ret
  68+ A894              .LL39ResultZero:
  69+ A894 32 66 94         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ A897                  ClearCarryFlag                          ; clear carry
  70+ A897 B7          >                        or a
  71+ A898 C9               ret
  72+ A899              ;--LL39SwapSubtraction:
  73+ A899              ;--	push	bc
  74+ A899              ;--	ld		b,a
  75+ A899              ;--	ld		a,(hl)
  76+ A899              ;--	sub		b
  77+ A899              ;--	pop		bc
  78+ A899              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ A899              ;--	ld		a,(varS)
  80+ A899              ;--	xor		$80
  81+ A899              ;--	ld		(varS),a
  82+ A899              ;--	ex		af,af'
  83+ A899              ;--	ret
  84+ A899
  85+ A899              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ A899              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ A899              ;;;;;   (S A) = (S R) + (A Q)
  88+ A899              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ A899              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ A899              ;;;;LL38:
  91+ A899              ;;;;; Calculate sign for Q from A and varS
  92+ A899              ;;;;	ld		hl,varS							;
  93+ A899              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ A899              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ A899              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ A899              ;;;;	ld		hl,varR
  97+ A899              ;;;;	add		a,(hl)							; a = Q + R
  98+ A899              ;;;;	ret										; Done
  99+ A899              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ A899              ;;;;	ld		hl,varQ                         ;
 101+ A899              ;;;;	ld		a,(hl)
 102+ A899              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ A899              ;;;;	ld		a,(varR)						;
 104+ A899              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ A899              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ A899              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ A899              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ A899              ;;;;	ret
 109+ A899              ;;;;.SignCorrection:
 110+ A899              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ A899              ;;;;	ex		af,af'							; save A temporarily
 112+ A899              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ A899              ;;;;	xor		$80							    ;
 114+ A899              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ A899              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ A899              ;;;;	ret
 117+ A899              ;;;;LL39Sub16Bit:
 118+ A899              ;;;;	ld		e,a
 119+ A899              ;;;;	ld		d,0
 120+ A899              ;;;;	ld		a,(varR)
 121+ A899              ;;;;	ld		l,a
 122+ A899              ;;;;	ld		h,0
 123+ A899              ;;;;	ClearCarryFlag
 124+ A899              ;;;;	sbc		hl,de
 125+ A899              ;;;;	jr		c,.SignCorrection16bit
 126+ A899              ;;;;	bit		7,h
 127+ A899              ;;;;	jr		z,.GoodToReturn
 128+ A899              ;;;;.Needtonegate:
 129+ A899              ;;;;	macronegate16hl
 130+ A899              ;;;;.GoodToReturn
 131+ A899              ;;;;	ld		a,l
 132+ A899              ;;;;	or		a
 133+ A899              ;;;;	ret
 134+ A899              ;;;;.SignCorrection16bit:
 135+ A899              ;;;;	macronegate16hl
 136+ A899              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ A899              ;;;;	xor		$80							    ;
 138+ A899              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ A899              ;;;;	ld		a,l
 140+ A899              ;;;;	ret
 141+ A899
 142+ A899
# file closed: ./Maths/Utilities/badd_ll38.asm
 897  A899                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A899              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A899              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A899              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A899
   5+ A899
   6+ A899              moveship4Yreg:
   7+ A899 3A F7 93     		ld		a,(regY)
   8+ A89C 47           		ld		b,a
   9+ A89D              moveship4breg:
  10+ A89D              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A89D              MVS4PitchAlphaRollBeta:
  12+ A89D              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A89D 3A 22 94     		ld		a,(ALPHA)					;  ALPHA
  14+ A8A0 32 64 94     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A8A3 21 0E C0     		ld		hl,UBnKxsgn
  16+ A8A6 78           		ld		a,b							; from
  17+ A8A7 ED 31        		add		hl,a
  18+ A8A9 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A8AA 32 65 94     		ld		(varR),a					; R  \ lo
  20+ A8AD 23           		inc		hl
  21+ A8AE 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A8AF 32 66 94     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A8B2 2B           		dec		hl
  24+ A8B3 2B           		dec		hl
  25+ A8B4 2B           		dec		hl							;
  26+ A8B5 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A8B6 32 09 94     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A8B9 23           		inc		hl
  29+ A8BA 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A8BB EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A8BD CD DE A1     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A8C0 23                   inc     hl
  33+ A8C1 23                   inc     hl
  34+ A8C2 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A8C3 2B                   dec     hl
  36+ A8C4 3A F6 93             ld      a,(regX)
  37+ A8C7 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A8C8 32 09 94             ld      (varP),a                    ;  P
  39+ A8CB 2B                   dec     hl
  40+ A8CC 2B                   dec     hl
  41+ A8CD 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A8CE 32 65 94             ld      (varR),a                    ;  R	\ lo
  43+ A8D1 23                   inc     hl
  44+ A8D2 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A8D3 32 66 94             ld      (varS),a                    ; S	\ hi
  46+ A8D6 23                   inc     hl
  47+ A8D7 23                   inc     hl
  48+ A8D8 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A8D9 CD DE A1             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A8DC 2B                   dec     hl
  51+ A8DD 2B                   dec     hl
  52+ A8DE 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A8DF 3A F6 93             ld      a,(regX)
  54+ A8E2 2B                   dec     hl
  55+ A8E3 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A8E4 32 09 94             ld      (varP),a                    ; P
  57+ A8E7 3A 14 94             ld      a,(BETA)                    ; BETA
  58+ A8EA 32 64 94             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A8ED 23                   inc     hl
  60+ A8EE 23                   inc     hl
  61+ A8EF 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A8F0 32 65 94             ld      (varR),a                    ; R	\ lo
  63+ A8F3 23                   inc     hl
  64+ A8F4 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A8F5 32 66 94             ld      (varS),a                    ; S	\ hi
  66+ A8F8 23                   inc     hl
  67+ A8F9 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A8FA 32 09 94             ld      (varP),a                    ; P	\ lo
  69+ A8FD 23                   inc     hl
  70+ A8FE 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A8FF EE 80                xor     $80                         ; flip sign hi
  72+ A901 CD DE A1             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A904 2B                   dec     hl
  74+ A905 2B                   dec     hl
  75+ A906 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A907 3A F6 93             ld      a,(regX)
  77+ A90A 2B                   dec     hl
  78+ A90B 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A90C 32 09 94             ld      (varP),a                    ; P
  80+ A90F 23                   inc     hl
  81+ A910 23                   inc     hl
  82+ A911 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A912 32 65 94             ld      (varR),a                    ; R	\ lo
  84+ A915 23                   inc     hl
  85+ A916 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A917 32 66 94             ld      (varS),a                    ; S	\ hi
  87+ A91A 2B                   dec     hl
  88+ A91B 2B                   dec     hl
  89+ A91C 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A91D CD DE A1             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A920 23                   inc     hl
  92+ A921 23                   inc     hl
  93+ A922 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A923 3A F6 93             ld      a,(regX)
  95+ A926 2B                   dec     hl
  96+ A927 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A928 C9                   ret
  98+ A929
  99+ A929
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 898  A929              ;INCLUDE "MoveShip5-MVS5.asm"
 899  A929              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 900  A929              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 901  A929              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 902  A929                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A929              ;;;LL28:
   2+ A929              ;;;    ld      c,a                         ;
   3+ A929              ;;;    ld      a,(varQ)                    ;
   4+ A929              ;;;    ld      b,a                         ;
   5+ A929              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A929              ;;;RequAmul256divB:                        ;
   7+ A929              ;;;LL28Breg:
   8+ A929              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A929              ;;;	cp		b							; Check A >= Q
  10+ A929              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A929              ;;;.CalcRemainder:
  12+ A929              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A929              ;;;.RollRemainder:
  14+ A929              ;;;	sla		a
  15+ A929              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A929              ;;;	cp		b							; a < q?
  17+ A929              ;;;	jr		nc,.DontSBC
  18+ A929              ;;;.DoSBC:									; a is < q
  19+ A929              ;;;	sbc		a,b							; 	a -= q
  20+ A929              ;;;.DontSBC:
  21+ A929              ;;;	rl		c							; r << 1
  22+ A929              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A929              ;;;    ld      a,c
  24+ A929              ;;;    ld      (varR),a
  25+ A929              ;;;	ret									; R (c) left with remainder
  26+ A929              ;;;.Reduce:								; a geneated a carry
  27+ A929              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A929              ;;;	scf									; set carry flag for rl
  29+ A929              ;;;	rl		c							; r << 1 briging in carry
  30+ A929              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A929              ;;;    ld      a,c
  32+ A929              ;;;    ld      (varR),a
  33+ A929              ;;;	ret
  34+ A929              ;;;.AnswerTooBig:
  35+ A929              ;;;	ld	    c,$FF							; arse its too big
  36+ A929              ;;;    ld      a,c
  37+ A929              ;;;    ld      (varR),a
  38+ A929              ;;;	ret
  39+ A929
  40+ A929              BCequAmul256DivC:
  41+ A929 59             ld    e,c
  42+ A92A 67             ld    h,a
  43+ A92B 2E 00          ld    l,0
  44+ A92D              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A92D 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A92E B7             or a                                   ; from this time on the carry is cleared
  47+ A92F C8             ret z
  48+ A930 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A933 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A935              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A935 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A937 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A938 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A93A C9             ret
  55+ A93B
  56+ A93B              HL_Div_C:
  57+ A93B              ; Integer divides HL by C
  58+ A93B              ; Result in HL, remainder in A
  59+ A93B              ; Clobbers F, B
  60+ A93B 06 10                ld b,16
  61+ A93D AF                   xor a
  62+ A93E              HL_Div_C_Loop:
  63+ A93E 29                   add hl,hl
  64+ A93F 17                   rla
  65+ A940 B9                   cp c
  66+ A941 38 02                jr c,HL_DivC_Skip
  67+ A943 91                   sub c
  68+ A944 2C                   inc l
  69+ A945              HL_DivC_Skip:
  70+ A945 10 F7                djnz HL_Div_C_Loop
  71+ A947 7D                   ld   a,l
  72+ A948 32 65 94             ld  (varR),a
  73+ A94B C9                   ret
  74+ A94C
  75+ A94C
  76+ A94C
  77+ A94C              ; Entry point if varQ is populated with demoninator
  78+ A94C              RequAmul256divQ:
  79+ A94C              BFRDIV:
  80+ A94C F5           		push	af
  81+ A94D 3A 64 94     		ld		a,(varQ)
  82+ A950 4F           		ld		c,a
  83+ A951 F1           		pop		af
  84+ A952 FE 00        		cp		0
  85+ A954 CA 6B A9     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A957              RequAmul256divC:
  87+ A957 2E 00        		ld		l,0
  88+ A959 67           		ld		h,a
  89+ A95A              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A95A 06 10        		ld b,16
  91+ A95C AF           		xor a
  92+ A95D              LOOPPOINT:
  93+ A95D 29           		add hl,hl
  94+ A95E 17           		rla
  95+ A95F B9           		cp c
  96+ A960 38 02        		jr c,SKIPINCSUB
  97+ A962 2C           		inc l
  98+ A963 91           		sub c
  99+ A964              SKIPINCSUB:
 100+ A964 10 F7        		djnz LOOPPOINT
 101+ A966 7D           		ld		a,l
 102+ A967 32 65 94     		ld 		(varR),a
 103+ A96A C9           		ret
 104+ A96B              HLDIVC_0_BY:
 105+ A96B 32 65 94     		ld		(varR),a
 106+ A96E C9           		ret
 107+ A96F              ;	push	af
 108+ A96F              ;	ld		a,b
 109+ A96F              ;	ld		(varQ),a
 110+ A96F              ;	pop		af
 111+ A96F              ;RequAmul256divQ:
 112+ A96F              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A96F              ;	ld		hl,varQ
 114+ A96F              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A96F              ;	ld		b,$FE						; b = X
 116+ A96F              ;	ld		c,a							; c = R	div roll counter
 117+ A96F              ;LL31:									; roll R
 118+ A96F              ;	sla		a
 119+ A96F              ;	jr		c,LL29						; hop to Reduce
 120+ A96F              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A96F              ;	sbc		a,(hl)						; a = a - Q
 122+ A96F              ;	rl		c							; rotate R left
 123+ A96F              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A96F              ;	jr		LL2Good
 125+ A96F              ;LL29:									; Reduce
 126+ A96F              ;	sbc		a,(hl)
 127+ A96F              ;	scf
 128+ A96F              ;	rl		c							; roll a carry flag into R
 129+ A96F              ;	jr		c,LL31						;  loop R
 130+ A96F              ;	jr		LL2Good
 131+ A96F              ;LL2:
 132+ A96F              ;	ld		c,$FF
 133+ A96F              ;LL2Good:
 134+ A96F              ;	ld		a,c
 135+ A96F              ;	ld		(varR),a
 136+ A96F              ;	ret
 137+ A96F
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 903  A96F                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A96F              RequAdivQ:
   2+ A96F              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A96F              LL61:										; Handling division R=A/Q for case further down
   4+ A96F 4F           	ld		c,a								; c = A
   5+ A970 3A 64 94     	ld		a,(varQ)						; test for divide by 0
   6+ A973 FE 00        	cp		0
   7+ A975 28 16        	jr		z,LL84							; divide by zero error
   8+ A977 57           	ld		d,a								; now we can do C/D
   9+ A978 06 08            ld b,8
  10+ A97A AF               xor a
  11+ A97B              LL63:										; roll divide loop
  12+ A97B CB 21            sla c
  13+ A97D 17               rla
  14+ A97E BA               cp d
  15+ A97F 38 02            jr c,LL64
  16+ A981 0C               inc c
  17+ A982 92               sub d
  18+ A983              LL64:
  19+ A983 10 F6            djnz LL63
  20+ A985 32 63 94     	ld	(varU),a							; store remainder in U
  21+ A988 79           	ld	a,c
  22+ A989 32 65 94     	ld	(varR),a							; store remainder in R
  23+ A98C C9               ret
  24+ A98D              LL84:										; div error  R=U=#5
  25+ A98D 3E 32        	ld		a,50
  26+ A98F 32 65 94     	ld		(varR),a
  27+ A992 32 63 94     	ld		(varU),a
  28+ A995 C9           	ret
  29+ A996
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 904  A996              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 905  A996                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A996              asm_mult12:
   2+ A996              RSequQmulA:
   3+ A996              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A996 CD 3E A8     	call APequQmulA
   5+ A999 08           	ex 	af,af'
   6+ A99A 7A           	ld	a,d
   7+ A99B 32 66 94     	ld	(varS),a
   8+ A99E 7B           	ld	a,e
   9+ A99F 32 65 94     	ld	(varR),a
  10+ A9A2 08           	ex 	af,af'
  11+ A9A3 C9           	ret
  12+ A9A4
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 906  A9A4              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 907  A9A4                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ A9A4              ;rotmap0xLo: DB	0				; INWK +9
   2+ A9A4              ;rotmap0xHi: DB	0				; INWK +10
   3+ A9A4              ;rotmat0yLo: DB	0				; INWK +11
   4+ A9A4              ;rotmat0yHi: DB	0				; INWK +12
   5+ A9A4              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A9A4              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A9A4              ;rotmap1xLo: DB	0				; INWK +15
   8+ A9A4              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A9A4              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A9A4              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A9A4              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A9A4              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A9A4              ;rotmat2xLo: DB	0				; INWK +21
  14+ A9A4              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A9A4              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A9A4              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A9A4              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A9A4              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A9A4              ;
  20+ A9A4              ;rotmatFx	equ	rotmat0xHi
  21+ A9A4              ;rotmatFy	equ	rotmat0yHi
  22+ A9A4              ;rotmatFz	equ	rotmat0zHi
  23+ A9A4              ;rotmatUx	equ	rotmat1xHi
  24+ A9A4              ;rotmatUy	equ	rotmat1yHi
  25+ A9A4              ;rotmatUz	equ	rotmat1zHi
  26+ A9A4              ;
  27+ A9A4              ;inwkarray			equ		INWK+10
  28+ A9A4
  29+ A9A4                  include "./Variables/CopyRotMattoXX15.asm"
# file opened: ././Variables/CopyRotMattoXX15.asm
   1++A9A4              CopyRotMatNoseVtoXX15:
   2++A9A4                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A9A4 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A9A7 32 75 C0    >               ld       (XX15VecX),a
   3++A9AA                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A9AA 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A9AD 32 76 C0    >               ld       (XX15VecY),a
   4++A9B0                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A9B0 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A9B3 32 77 C0    >               ld       (XX15VecZ),a
   5++A9B6 C9                   ret
   6++A9B7
   7++A9B7              CopyRotMatRoofVtoXX15:
   8++A9B7                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A9B7 3A 1C C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A9BA 32 75 C0    >               ld       (XX15VecX),a
   9++A9BD                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A9BD 3A 1E C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A9C0 32 76 C0    >               ld       (XX15VecY),a
  10++A9C3                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A9C3 3A 20 C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A9C6 32 77 C0    >               ld       (XX15VecZ),a
  11++A9C9 C9                   ret
  12++A9CA
  13++A9CA              CopyRotMatSideVtoXX15:
  14++A9CA                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A9CA 3A 16 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A9CD 32 75 C0    >               ld       (XX15VecX),a
  15++A9D0                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A9D0 3A 18 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A9D3 32 76 C0    >               ld       (XX15VecY),a
  16++A9D6                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A9D6 3A 1A C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A9D9 32 77 C0    >               ld       (XX15VecZ),a
  17++A9DC C9                   ret
  18++A9DD
# file closed: ././Variables/CopyRotMattoXX15.asm
  30+ A9DD
  31+ A9DD                  include "./Variables/CopyXX15toRotMat.asm"
# file opened: ././Variables/CopyXX15toRotMat.asm
   1++A9DD              CopyXX15toRotMatNoseV:
   2++A9DD                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A9DD 3A 75 C0    >               ld       a,(XX15VecX)
   2++A9E0 32 22 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A9E3                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A9E3 3A 76 C0    >               ld       a,(XX15VecY)
   3++A9E6 32 24 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A9E9                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A9E9 3A 77 C0    >               ld       a,(XX15VecZ)
   4++A9EC 32 26 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A9EF C9                   ret
   6++A9F0
   7++A9F0              CopyXX15toRotMatRoofV:
   8++A9F0                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A9F0 3A 75 C0    >               ld       a,(XX15VecX)
   8++A9F3 32 1C C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A9F6                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A9F6 3A 76 C0    >               ld       a,(XX15VecY)
   9++A9F9 32 1E C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A9FC                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A9FC 3A 77 C0    >               ld       a,(XX15VecZ)
  10++A9FF 32 20 C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++AA02 C9                   ret
  12++AA03
  13++AA03              CopyXX15toRotMatSideV:
  14++AA03                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++AA03 3A 75 C0    >               ld       a,(XX15VecX)
  14++AA06 32 16 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++AA09                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++AA09 3A 76 C0    >               ld       a,(XX15VecY)
  15++AA0C 32 18 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++AA0F                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++AA0F 3A 77 C0    >               ld       a,(XX15VecZ)
  16++AA12 32 1A C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++AA15 C9                   ret
  18++AA16
# file closed: ././Variables/CopyXX15toRotMat.asm
  32+ AA16
  33+ AA16              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ AA16              		; b = regX on entry
  35+ AA16              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ AA16 08           		ex		af,af'
  37+ AA17 78           		ld		a,b
  38+ AA18 32 64 94     		ld		(varQ),a
  39+ AA1B 08           		ex		af,af'
  40+ AA1C EE 80        		xor		$80							;	 flip sign of Acc
  41+ AA1E CD DE A1     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ AA21              ; USES 				A BC E
  43+ AA21              ; DOES NOT USE		D HL
  44+ AA21              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ AA21 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ AA22 E6 80        		and		SignOnly8Bit						; ..
  47+ AA24 5F           		ld		e,a							; ..
  48+ AA25 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ AA26 E6 7F        		and		SignMask8Bit							; ..
  50+ AA28 06 FE        		ld		b,$FE						; slide counter T1
  51+ AA2A              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ AA2A CB 27        		sla		a
  53+ AA2C              		JumpIfALTNusng $60, TIS1SkipSub
  53+ AA2C FE 60       >                        cp      $60
  53+ AA2E DA 3B AA    >                        jp		c, TIS1SkipSub
  54+ AA31 DE 60        		sbc		a,$60							; subtract 96
  55+ AA33 37           		scf
  56+ AA34 CB 10        		rl		b							;  T1
  57+ AA36 38 F2        		jr		c,TIS1RollTLoop
  58+ AA38              TIS1KIPCont:
  59+ AA38 78           		ld		a,b							;   T1
  60+ AA39 B3           		or		e							;   restore T sign
  61+ AA3A C9           		ret
  62+ AA3B              TIS1SkipSub:
  63+ AA3B B7           	or			a
  64+ AA3C CB 10        	rl			b							; T rolled left to push bit out the end
  65+ AA3E 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ AA40 C3 38 AA     	jp			TIS1KIPCont
  67+ AA43
  68+ AA43              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ AA43              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ AA43
  71+ AA43
  72+ AA43
  73+ AA43
  74+ AA43              TidyRotYSmall:
  75+ AA43 CD 6C AB     		call	CalcRoofvZ
  76+ AA46 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ AA49 C3 7D AA     		jp		NormaliseRoofV
  78+ AA4C
  79+ AA4C              TidyRotXSmall:
  80+ AA4C AF           		xor		a
  81+ AA4D 47           		ld		b,a
  82+ AA4E 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ AA51 E6 60        		and		%01100000
  84+ AA53 CA 43 AA     		jp		z,TidyRotYSmall
  85+ AA56 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ AA59 47           		ld		b,a							; b = regX for now
  87+ AA5A 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ AA5D CD 32 AB     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ AA60 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ AA63 C3 7D AA     		jp		NormaliseRoofV
  91+ AA66              TIDY:
  92+ AA66              ORTHOGALISE:
  93+ AA66              ;-- NormaliseNosev
  94+ AA66 CD A4 A9     		call	CopyRotMatNoseVtoXX15
  95+ AA69 CD 95 A5     		call	normaliseXX1596fast			; normalise z hi
  96+ AA6C CD DD A9     		call	CopyXX15toRotMatNoseV
  97+ AA6F              .CheckNXSmall:
  98+ AA6F 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
  99+ AA72 E6 60        		and		%01100000					; check top two magnitude bits
 100+ AA74 CA 4C AA     		jp		z,TidyRotXSmall
 101+ AA77              .RotXIsBig:
 102+ AA77 CD F8 AA             call	CalcRoofvX
 103+ AA7A 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 104+ AA7D              NormaliseRoofV:
 105+ AA7D CD B7 A9     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 106+ AA80 CD 95 A5     		call	normaliseXX1596fast			; normalise roof
 107+ AA83              ;calc sidev x
 108+ AA83 CD F0 A9     		call	CopyXX15toRotMatRoofV		; get back normalised version
 109+ AA86 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 110+ AA89 32 64 94     		ld		(varQ),a					; q = nosev_y
 111+ AA8C 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 112+ AA8F CD 96 A9     		call	RSequQmulA
 113+ AA92 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 114+ AA95 47           		ld		b,a							; b = regX for now
 115+ AA96 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 116+ AA99 CD 16 AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 117+ AA9C                      IfAIsZeroGoto NormSideXNoNeg
 117+ AA9C A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 117+ AA9D CA A2 AA    >				jp	z, NormSideXNoNeg
 118+ AAA0 EE 80        		xor		$80							; flip a to get -sidev_x
 119+ AAA2              NormSideXNoNeg:
 120+ AAA2 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 121+ AAA5              ;calc sidev y
 122+ AAA5 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 123+ AAA8 32 64 94     		ld		(varQ),a
 124+ AAAB 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 125+ AAAE CD 96 A9     		call	RSequQmulA
 126+ AAB1 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 127+ AAB4 47           		ld		b,a							; b = regX for now
 128+ AAB5 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 129+ AAB8 CD 16 AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 130+ AABB                      IfAIsZeroGoto NormSideYNoNeg
 130+ AABB A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 130+ AABC CA C1 AA    >				jp	z, NormSideYNoNeg
 131+ AABF EE 80        		xor		$80							; flip a to get -sidev_y
 132+ AAC1              NormSideYNoNeg:
 133+ AAC1 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 134+ AAC4              ;calc sidev z
 135+ AAC4 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 136+ AAC7 32 64 94     		ld		(varQ),a
 137+ AACA 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 138+ AACD CD 96 A9     		call	RSequQmulA
 139+ AAD0 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 140+ AAD3 47           		ld		b,a							; b = regX for now
 141+ AAD4 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 142+ AAD7 CD 16 AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 143+ AADA                      IfAIsZeroGoto NormSideZNoNeg
 143+ AADA A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 143+ AADB CA E0 AA    >				jp	z, NormSideZNoNeg
 144+ AADE EE 80        		xor		$80							; flip a to get -sidev_y
 145+ AAE0              NormSideZNoNeg:
 146+ AAE0 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 147+ AAE3              .ClearLoBytes:
 148+ AAE3 21 21 C0     		ld		hl,UBnkrotmatNosevX
 149+ AAE6 06 09        		ld		b,9
 150+ AAE8 AF                   xor     a
 151+ AAE9              .ClearLoLoop:
 152+ AAE9 77           		ld		(hl),a						; zero out lo bytes
 153+ AAEA 23           		inc		hl
 154+ AAEB 23           		inc		hl
 155+ AAEC 10 FB        		djnz	.ClearLoLoop
 156+ AAEE CD CA A9     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 157+ AAF1 CD 95 A5     		call	normaliseXX1596fast			; normalise roof
 158+ AAF4              ;calc sidev x
 159+ AAF4 CD 03 AA     		call	CopyXX15toRotMatSideV		; get back normalised version
 160+ AAF7
 161+ AAF7 C9           		ret
 162+ AAF8
 163+ AAF8
 164+ AAF8
 165+ AAF8              ;;;;;;;;.CheckNYSmall:
 166+ AAF8              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 167+ AAF8              ;;;;;;;;		and		$7F
 168+ AAF8              ;;;;;;;;		cp		0
 169+ AAF8              ;;;;;;;;		jp		z,Tidy1RZ
 170+ AAF8              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 171+ AAF8              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 172+ AAF8              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 173+ AAF8              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 174+ AAF8              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 175+ AAF8              ;;;;;;;;.DoNZ:
 176+ AAF8              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 177+ AAF8              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 178+ AAF8              ;;;;;;;;NormaliseRoofv:
 179+ AAF8              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 180+ AAF8              ;;;;;;;;		push	bc
 181+ AAF8              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 182+ AAF8              ;;;;;;;;		pop		bc
 183+ AAF8              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 184+ AAF8              ;;;;;;;;ProcessSidev:
 185+ AAF8              ;;;;;;;;; -- SIDEV X
 186+ AAF8              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 187+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 188+ AAF8              ;;;;;;;;		push	bc
 189+ AAF8              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 190+ AAF8              ;;;;;;;;		pop		bc
 191+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 192+ AAF8              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 193+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 194+ AAF8              ;;;;;;;;		push	bc
 195+ AAF8              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 196+ AAF8              ;;;;;;;;		pop		bc
 197+ AAF8              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 198+ AAF8              ;;;;;;;;; -- SIDEV Y
 199+ AAF8              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 200+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 201+ AAF8              ;;;;;;;;		push	bc
 202+ AAF8              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 203+ AAF8              ;;;;;;;;		pop		bc
 204+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 205+ AAF8              ;;;;;;;;		ld		b,a
 206+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 207+ AAF8              ;;;;;;;;		push	bc
 208+ AAF8              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 209+ AAF8              ;;;;;;;;		pop		bc
 210+ AAF8              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 211+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 212+ AAF8              ;;;;;;;;		push	bc
 213+ AAF8              ;;;;;;;;; -- SIDEV Z
 214+ AAF8              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 215+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 216+ AAF8              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 217+ AAF8              ;;;;;;;;		pop		bc
 218+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 219+ AAF8              ;;;;;;;;		ld		b,a
 220+ AAF8              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 221+ AAF8              ;;;;;;;;		push	bc
 222+ AAF8              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 223+ AAF8              ;;;;;;;;		pop		bc
 224+ AAF8              ;;;;;;;;		ld		(sidev_z+1),a
 225+ AAF8              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 226+ AAF8              ;;;;;;;;		ld		hl,sidev_z
 227+ AAF8              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 228+ AAF8              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 229+ AAF8              ;;;;;;;;NormaliseSideV:
 230+ AAF8              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 231+ AAF8              ;;;;;;;;		push	bc
 232+ AAF8              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 233+ AAF8              ;;;;;;;;		pop		bc
 234+ AAF8              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 235+ AAF8              ;;;;;;;;
 236+ AAF8
 237+ AAF8
 238+ AAF8              CalcRoofvX:
 239+ AAF8              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 240+ AAF8              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 240+ AAF8 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 240+ AAFB 32 64 94    >               ld       (varQ),a
 241+ AAFE 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 242+ AB01 CD 96 A9     		call	RSequQmulA						; rs = nosez hi * roofz hi
 243+ AB04              		ldCopyByte UBnkrotmatNosevY+1,varQ
 243+ AB04 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 243+ AB07 32 64 94    >               ld       (varQ),a
 244+ AB0A 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 245+ AB0D CD DE A1     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 246+ AB10 7A           		ld		a,d
 247+ AB11 E6 80        		and 	$80
 248+ AB13 FD 67        		ld		iyh,a
 249+ AB15              ;DEBUG		ld		c,a
 250+ AB15 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 251+ AB18 4F           		ld		c,a								; temp save
 252+ AB19 E6 80        		and		$80
 253+ AB1B FD AC        		xor		iyh								; flip from saved multiply sign result
 254+ AB1D FD 67        		ld		iyh,a							; save nosesev sign to iyh
 255+ AB1F 79           		ld		a,c								; recover a
 256+ AB20 E6 7F        		and		$7F								; a is unsigned nosev x
 257+ AB22 42           		ld		b,d
 258+ AB23 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 259+ AB24 57           		ld		d,a								; de = nosev x hi
 260+ AB25 1E 00        		ld		e,0
 261+ AB27 CD 17 A4     		call	BC_Div_DE
 262+ AB2A FD 7C        		ld		a,iyh							; get back sign from nosevx
 263+ AB2C EE 80        		xor		$80								; flip sign
 264+ AB2E E6 80        		and		$80								; keep sign bit only
 265+ AB30 B0           		or		b
 266+ AB31 C9           		ret
 267+ AB32
 268+ AB32
 269+ AB32              CalcRoofvY:
 270+ AB32              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 271+ AB32              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 271+ AB32 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 271+ AB35 32 64 94    >               ld       (varQ),a
 272+ AB38 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 273+ AB3B CD 96 A9     		call	RSequQmulA
 274+ AB3E              		ldCopyByte UBnkrotmatNosevX+1,varQ
 274+ AB3E 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 274+ AB41 32 64 94    >               ld       (varQ),a
 275+ AB44 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 276+ AB47 CD DE A1     		call	madXAequQmulAaddRS
 277+ AB4A 7A           		ld		a,d
 278+ AB4B E6 80        		and 	$80
 279+ AB4D FD 67        		ld		iyh,a
 280+ AB4F 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 281+ AB52 4F           		ld		c,a								; temp save
 282+ AB53 E6 80        		and		$80
 283+ AB55 FD AC        		xor		iyh								; flip from saved multiply sign result
 284+ AB57 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 285+ AB59 79           		ld		a,c								; recover a
 286+ AB5A E6 7F        		and		$7F								; a is unsigned nosev x
 287+ AB5C 42           		ld		b,d
 288+ AB5D 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 289+ AB5E 57           		ld		d,a								; de = nosev x hi
 290+ AB5F 1E 00        		ld		e,0
 291+ AB61 CD 17 A4     		call	BC_Div_DE
 292+ AB64 FD 7C        		ld		a,iyh
 293+ AB66 EE 80        		xor		$80
 294+ AB68 E6 80        		and		$80
 295+ AB6A B0           		or		b
 296+ AB6B C9           		ret
 297+ AB6C
 298+ AB6C              CalcRoofvZ:
 299+ AB6C              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 300+ AB6C              		ldCopyByte UBnkrotmatNosevY+1,varQ
 300+ AB6C 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 300+ AB6F 32 64 94    >               ld       (varQ),a
 301+ AB72 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 302+ AB75 CD 96 A9     		call	RSequQmulA						; rs = NOSEy * ROOFy
 303+ AB78              		ldCopyByte UBnkrotmatNosevX+1,varQ
 303+ AB78 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 303+ AB7B 32 64 94    >               ld       (varQ),a
 304+ AB7E 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 305+ AB81 CD DE A1     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 306+ AB84 7A           		ld		a,d
 307+ AB85 E6 80        		and 	$80
 308+ AB87 FD 67        		ld		iyh,a
 309+ AB89 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 310+ AB8C 4F           		ld		c,a								; temp save
 311+ AB8D E6 80        		and		$80
 312+ AB8F FD AC        		xor		iyh								; flip from saved multiply sign result
 313+ AB91 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 314+ AB93 79           		ld		a,c								; recover a
 315+ AB94 E6 7F        		and		$7F								; a is unsigned nosev x
 316+ AB96 42           		ld		b,d
 317+ AB97 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 318+ AB98 57           		ld		d,a								; de = nosev x hi
 319+ AB99 1E 00        		ld		e,0
 320+ AB9B CD 17 A4     		call	BC_Div_DE
 321+ AB9E FD 7C        		ld		a,iyh
 322+ ABA0 EE 80        		xor		$80
 323+ ABA2 E6 80        		and		$80
 324+ ABA4 B0           		or		b
 325+ ABA5 C9           		ret
 326+ ABA6
 327+ ABA6
 328+ ABA6
 329+ ABA6              ;;ProcessSidev:
 330+ ABA6              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 331+ ABA6              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 332+ ABA6              ;;		push	bc
 333+ ABA6              ;;		call	RSequQmulA					; RS = Q * A MULT12
 334+ ABA6              ;;		pop		bc
 335+ ABA6              ;;		ld		a,(UBnkrotmatNosevY+1)
 336+ ABA6              ;;		ld		b,a							; set x (b) to value of nosev_z
 337+ ABA6              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 338+ ABA6              ;;		push	bc
 339+ ABA6              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 340+ ABA6              ;;		pop		bc
 341+ ABA6              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 342+ ABA6              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 343+ ABA6              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 344+ ABA6              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 345+ ABA6              ;;		push	bc
 346+ ABA6              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 347+ ABA6              ;;		pop		bc
 348+ ABA6              ;;		ld		a,(UBnkrotmatNosevZ+1)
 349+ ABA6              ;;		ld		b,a
 350+ ABA6              ;;		ld		a,(UBnkrotmatNosevY+1)
 351+ ABA6              ;;		push	bc
 352+ ABA6              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 353+ ABA6              ;;		pop		bc
 354+ ABA6              ;;		xor		$80							; a *= -1
 355+ ABA6              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 356+ ABA6              ;;		ld		a,(UBnkrotmatRoofvY+1)
 357+ ABA6              ;;		push	bc
 358+ ABA6              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 359+ ABA6              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 360+ ABA6              ;;		call	RSequQmulA					; RS = Q * A MULT12
 361+ ABA6              ;;		pop		bc
 362+ ABA6              ;;		ld		a,(UBnkrotmatNosevX+1)
 363+ ABA6              ;;		ld		b,a
 364+ ABA6              ;;		ld		a,(UBnkrotmatRoofvY+1)
 365+ ABA6              ;;		push	bc
 366+ ABA6              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 367+ ABA6              ;;		pop		bc
 368+ ABA6              ;;		xor		$80
 369+ ABA6              ;;		ld		(UBnkrotmatSidevZ+1),a
 370+ ABA6              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 371+ ABA6              ;;		ld		hl,UBnkrotmatSidevZ
 372+ ABA6              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 373+ ABA6              ;;		ld		hl,UBnkrotmatNosevX
 374+ ABA6
 375+ ABA6
 376+ ABA6
 377+ ABA6
 378+ ABA6
 379+ ABA6
 380+ ABA6              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 381+ ABA6              ;;;;;;;;.ProcessRoofv:
 382+ ABA6              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 383+ ABA6              ;;;;;;;;		push	bc
 384+ ABA6              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 385+ ABA6              ;;;;;;;;		pop		bc
 386+ ABA6              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 387+ ABA6              ;;;;;;;;.ProcessSidev:
 388+ ABA6              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 389+ ABA6              ;;;;;;;;		push	bc
 390+ ABA6              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 391+ ABA6              ;;;;;;;;		pop		bc
 392+ ABA6              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 393+ ABA6
# file closed: ./Maths/Utilities/tidy.asm
 908  ABA6                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ ABA6
   2+ ABA6              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ ABA6 BA          >                        cp     d
   2+ ABA7 D2 C5 AB    >                        jp		nc,.Ll28Exit255
   3+ ABAA 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ ABAC CB 27        .LL31:                  sla     a
   5+ ABAE 38 0D                                jr      c,.LL29
   6+ ABB0                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ ABB0 BA          >                        cp      d
   6+ ABB1 DA B6 AB    >                        jp		c, .SkipSub
   7+ ABB4 92                                   sub     d
   8+ ABB5                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ ABB5 B7          >                        or a
   9+ ABB6 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ ABB7 CB 13                                rl      e
  11+ ABB9 38 F1                                jr      c,.LL31
  12+ ABBB 7B                                   ld      a,e
  13+ ABBC C9                                   ret
  14+ ABBD 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ ABBE 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ ABBF CB 13                                rl      e                           ; rotate counter e left
  17+ ABC1 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ ABC3 7B                                   ld      a,e                         ; stick result in a
  19+ ABC4 C9                                   ret
  20+ ABC5 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ ABC7 C9                                   ret
  22+ ABC8
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 909  ABC8                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ ABC8              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ ABC8              TIS1:
   3+ ABC8 08           		ex		af,af'
   4+ ABC9 3A F6 93     		ld		a,(regX)
   5+ ABCC 47           		ld		b,a
   6+ ABCD 08           		ex		af,af'
   7+ ABCE              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ ABCE 08           		ex		af,af'
   9+ ABCF 78           		ld		a,b
  10+ ABD0 32 64 94     		ld		(varQ),a
  11+ ABD3 08           		ex		af,af'
  12+ ABD4 EE 80        		xor		$80							;	 flip sign of Acc
  13+ ABD6 CD DE A1     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ ABD9              ; USES 				A BC E
  15+ ABD9              ; DOES NOT USE		D HL
  16+ ABD9              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ ABD9 47           		ld		b,a
  18+ ABDA E6 80        		and		$80							;	hi sign
  19+ ABDC 5F           		ld		e,a							;   e = varT
  20+ ABDD 78           		ld		a,b
  21+ ABDE E6 7F        		and		$7F							;	hi A7
  22+ ABE0 06 FE        		ld		b,$FE						;   slide counter
  23+ ABE2 48           		ld		c,b							;   c == T1 ::  T1
  24+ ABE3              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ ABE3 CB 27        		sla		a
  26+ ABE5 FE 60        		cp		$60							; max 96
  27+ ABE7 30 02        		jr		nc,.DV4
  28+ ABE9 DE 60        		sbc		a,$60							;  SBC #&60
  29+ ABEB              .DV4:										; skip subtraction
  30+ ABEB CB 11        		rl		c							;  T1
  31+ ABED 38 F4        		jr		c,.DVL3
  32+ ABEF 79           		ld		a,c							;   T1
  33+ ABF0 B3           		or		e							;   restore T sign
  34+ ABF1 C9           		ret
  35+ ABF2
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 910  ABF2              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 911  ABF2              ;INCLUDE "XHiYLoequPA-gc3.asm"
 912  ABF2              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 913  ABF2              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 914  ABF2              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 915  ABF2                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 916  ABF2
 917  ABF2
 918  ABF2                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ ABF2              M_GETSETDRV             equ $89
   2+ ABF2              F_OPEN                  equ $9a
   3+ ABF2              F_CLOSE                 equ $9b
   4+ ABF2              F_READ                  equ $9d
   5+ ABF2              F_WRITE                 equ $9e
   6+ ABF2              F_SEEK                  equ $9f
   7+ ABF2
   8+ ABF2              FA_READ                 equ $01
   9+ ABF2              FA_APPEND               equ $06
  10+ ABF2              FA_OVERWRITE            equ $0C
  11+ ABF2
  12+ ABF2 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ ABF6 DD E5
  13+ ABF8 AF                                   xor	    a	; set drive. 0 is default
  14+ ABF9 CF                                   rst	    $08
  15+ ABFA 89                                   db	    $89
  16+ ABFB 32 05 AC                             ld	    (DefaultDrive),a
  17+ ABFE DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ AC02 C1 F1
  18+ AC04 C9                                   ret
  19+ AC05 00           DefaultDrive:	        db	0
  20+ AC06
  21+ AC06              ; *******************************************************************************************************
  22+ AC06              ;	Function:	Open a file read for reading/writing
  23+ AC06              ;	In:		ix = filename
  24+ AC06              ;			b  = Open filemode
  25+ AC06              ;	ret		a  = handle, 0 on error
  26+ AC06              ; *******************************************************************************************************
  27+ AC06 E5 DD E5     fOpen:	                push	hl,,ix
  28+ AC09 DD E5                                push	ix
  29+ AC0B 3A 05 AC                             ld	    a,(DefaultDrive)
  30+ AC0E CF                                   rst	    $08
  31+ AC0F 9A                                   db	    F_OPEN
  32+ AC10 DD E1 E1                             pop	    hl,,ix
  33+ AC13 C9                                   ret
  34+ AC14
  35+ AC14              ; *******************************************************************************************************
  36+ AC14              ;	Function	Read bytes from the open file
  37+ AC14              ;	In:		ix  = address to read into
  38+ AC14              ;			bc  = amount to read
  39+ AC14              ;	ret:		carry set = error
  40+ AC14              ; *******************************************************************************************************
  41+ AC14 B7           fRead:                  or   	a             ; is it zero?
  42+ AC15 C8                                   ret  	z             ; if so return
  43+ AC16 E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ AC19 E1                                   pop		hl
  45+ AC1A CF                                   rst	    $08
  46+ AC1B 9D                                   db	    F_READ
  47+ AC1C E1                                   pop	    hl
  48+ AC1D C9                                   ret
  49+ AC1E
  50+ AC1E              ; *******************************************************************************************************
  51+ AC1E              ;	Function	Read bytes from the open file
  52+ AC1E              ;	In:		ix  = address to read into
  53+ AC1E              ;			bc  = amount to read
  54+ AC1E              ;	ret:		carry set = error
  55+ AC1E              ; *******************************************************************************************************
  56+ AC1E B7           fWrite:                 or   	a             ; is it zero?
  57+ AC1F C8                                   ret  	z             ; if so return
  58+ AC20 E5 DD E5                             push	hl,,ix
  59+ AC23 E1                                   pop	    hl
  60+ AC24 CF                                   rst	    $08
  61+ AC25 9E                                   db	    F_WRITE
  62+ AC26 E1                                   pop	    hl
  63+ AC27 C9                                   ret
  64+ AC28
  65+ AC28              ; *******************************************************************************************************
  66+ AC28              ;	Function:	Close open file
  67+ AC28              ;	In:		a  = handle
  68+ AC28              ;	ret		a  = handle, 0 on error
  69+ AC28              ; *******************************************************************************************************
  70+ AC28 B7           fClose:		            or   	a             ; is it zero?
  71+ AC29 C8                                   ret  	z             ; if so return
  72+ AC2A CF                                   rst	    $08
  73+ AC2B 9B                                   db	    F_CLOSE
  74+ AC2C C9                                   ret
  75+ AC2D
  76+ AC2D              ; *******************************************************************************************************
  77+ AC2D              ;	Function	Read bytes from the open file
  78+ AC2D              ;	In:		a   = file handle
  79+ AC2D              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ AC2D              ;			BCDE = bytes to seek
  81+ AC2D              ;	ret:		BCDE = file pos from start
  82+ AC2D              ; *******************************************************************************************************
  83+ AC2D DD E5 E5     fSeek:                  push	ix,,hl
  84+ AC30 CF                                   rst	    $08
  85+ AC31 9F                                   db	    F_SEEK
  86+ AC32 E1 DD E1                             pop	    ix,,hl
  87+ AC35 C9                                   ret
  88+ AC36
  89+ AC36              ; *******************************************************************************************************
  90+ AC36              ; Init the file system
  91+ AC36              ; *******************************************************************************************************
  92+ AC36 CD F2 AB     InitFileSystem:         call    GetDefaultDrive
  93+ AC39 C9                                   ret
  94+ AC3A
  95+ AC3A              ; *******************************************************************************************************
  96+ AC3A              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ AC3A              ; In:		hl = file data pointer
  98+ AC3A              ;		ix = address to load to
  99+ AC3A              ; *******************************************************************************************************
 100+ AC3A CD F2 AB     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ AC3D C5 D5 F5                             push	bc,,de,,af
 102+ AC40                                      ; get file size
 103+ AC40 4E                                   ld	    c,(hl)
 104+ AC41 2C                                   inc	    l
 105+ AC42 46                                   ld	    b,(hl)
 106+ AC43 2C                                   inc	    l
 107+ AC44 C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ AC47 E5                                   push	hl				; get name into ix
 109+ AC48 DD E1                                pop	    ix
 110+ AC4A 06 01                                ld      b,FA_READ		; mode open for reading
 111+ AC4C CD 06 AC                             call    fOpen
 112+ AC4F 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ AC51 FE 00                                cp	    0				; was file handle 0?
 114+ AC53 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ AC55 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ AC58 F5                                   push	af				; remember handle
 117+ AC59 CD 14 AC                             call	fRead			; read data from A to address IX of length BC
 118+ AC5C 38 0C                                jr	    c,.error_reading
 119+ AC5E F1                                   pop	    af			    ; get handle back
 120+ AC5F CD 28 AC                             call	fClose			; close file
 121+ AC62 38 07                                jr	    c,.error_closing
 122+ AC64 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ AC67 C9                                   ret
 124+ AC68              ;
 125+ AC68              ; On error, display error code an lock up so we can see it
 126+ AC68              ;
 127+ AC68 DD E1        .error_opening:         pop	ix
 128+ AC6A C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ AC6B
 130+ AC6B              .error_closing:
 131+ AC6B C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ AC6C D1                                   pop	de
 133+ AC6D C1                                   pop	bc
 134+ AC6E C9                                   ret
 135+ AC6F
 136+ AC6F              ; *******************************************************************************************************
 137+ AC6F              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ AC6F              ; In:		hl = file data pointer
 139+ AC6F              ;		ix = address to save from
 140+ AC6F              ;		bc = size
 141+ AC6F              ; *******************************************************************************************************
 142+ AC6F CD F2 AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ AC72 C5 E5                                push	bc,,hl   			; store size& save address
 144+ AC74 E5                                   push	hl		        	; get name into ix
 145+ AC75 DD E1                                pop	    ix
 146+ AC77 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ AC79 CD 06 AC                             call    fOpen
 148+ AC7C 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ AC7E FE 00                                cp	    0			        ; was file handle 0?
 150+ AC80 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ AC82 DD E1                                pop	    ix			        ; get save address back
 152+ AC84 C1                                   pop	    bc			        ; get size back
 153+ AC85 F5                                   push	af			        ; remember handle
 154+ AC86 CD 1E AC                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AC89 38 04                                jr	c,.error
 156+ AC8B F1                                   pop	af			            ; get handle back
 157+ AC8C CD 28 AC                             call	fClose			    ; close file
 158+ AC8F C9           .error:                 ret
 159+ AC90              ;
 160+ AC90              ; On error, display error code an lock up so we can see it
 161+ AC90              ;
 162+ AC90 DD E1        .error_opening:         pop	ix
 163+ AC92 C1                                   pop	bc	; don't pop a, need error code
 164+ AC93 C9                                   ret
 165+ AC94
# file closed: ./Drive/drive_access.asm
 919  AC94
 920  AC94                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AC94 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AC98 41 4E 44 45
   1+ AC9C 52 00
   2+ AC9E 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ ACA2 4E 54 4F 52
   2+ ACA6 59 00
   3+ ACA8 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ ACAC 65 6E 74 20
   3+ ACB0 53 79 73 74
   3+ ACB4 65 6D 20 20
   3+ ACB8 20 3A 00
   4+ ACBB 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ ACBF 72 73 70 61
   4+ ACC3 63 65 20 53
   4+ ACC7 79 73 74 65
   4+ ACCB 6D 3A 00
   5+ ACCE 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ ACD2 69 74 69 6F
   5+ ACD6 6E 20 20 20
   5+ ACDA 3A 00
   6+ ACDC 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ ACE0 20 20 20 20
   6+ ACE4 20 20 20 20
   6+ ACE8 3A 00
   7+ ACEA 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ ACEE 20 20 20 20
   7+ ACF2 20 20 20 20
   7+ ACF6 3A 00
   8+ ACF8 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ ACFC 6C 20 53 74
   8+ AD00 61 74 75 73
   8+ AD04 3A 00
   9+ AD06 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AD0A 6E 67 20 20
   9+ AD0E 20 20 20 20
   9+ AD12 3A 00
  10+ AD14 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AD18 50 4D 45 4E
  10+ AD1C 54 3A 00
  11+ AD1F
  12+ AD1F 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AD23 20 4C 69 67
  12+ AD27 68 74 20 59
  12+ AD2B 65 61 72 73
  12+ AD2F 00
  13+ AD30 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AD34 58 58 58 58
  13+ AD38 58 58 00
  14+ AD3B 2E           txt_cash_decimal        DB "."
  15+ AD3C 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AD40 00
  16+ AD41
  17+ AD41              txt_status_colour		equ $FF
  18+ AD41
  19+ AD41              print_boiler_text_l2:
  20+ AD41              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AD41              BoilerTextLoop:
  22+ AD41 C5           	push		bc			; Save Message Count loop value
  23+ AD42 4E           	ld			c,(hl)		; Get Row into b
  24+ AD43 23           	inc			hl
  25+ AD44 46           	ld			b,(hl)		; Get Col into b
  26+ AD45 23           	inc			hl
  27+ AD46 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AD47 23           	inc			hl
  29+ AD48 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AD49 23           	inc			hl
  31+ AD4A E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AD4B EB           	ex			de,hl		; now hl = address of text data
  33+ AD4C 1E FF        	ld			e,txt_status_colour
  34+ AD4E                  MMUSelectLayer2
  34+ AD4E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AD52 CD 80 E0     	call		l1_print_at
  36+ AD55 E1           	pop			hl
  37+ AD56 C1           	pop			bc
  38+ AD57 10 E8        	djnz		BoilerTextLoop
  39+ AD59 C9           	ret
  40+ AD5A
  41+ AD5A
  42+ AD5A              print_boiler_text:
  43+ AD5A              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AD5A              .BoilerTextLoop:
  45+ AD5A C5           	push		bc			; Save Message Count loop value
  46+ AD5B 4E           	ld			c,(hl)		; Get Row into b
  47+ AD5C 23           	inc			hl
  48+ AD5D 46           	ld			b,(hl)		; Get Col into b
  49+ AD5E 23           	inc			hl
  50+ AD5F 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AD60 23           	inc			hl
  52+ AD61 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AD62 23           	inc			hl
  54+ AD63 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AD64 EB           	ex			de,hl		; now hl = address of text data
  56+ AD65 1E FF        	ld			e,txt_status_colour
  57+ AD67 C5           	push		bc
  58+ AD68 D1           	pop			de
  59+ AD69 CD 80 E0     	call		l1_print_at
  60+ AD6C E1           	pop			hl
  61+ AD6D C1           	pop			bc
  62+ AD6E 10 EA        	djnz		.BoilerTextLoop
  63+ AD70 C9           	ret
  64+ AD71
  65+ AD71              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AD71
   2++AD71
   3++AD71 3A 2D 98     	ld		a,(Fuel)
   4++AD74 11 1F AD     	ld		de,txt_fuel_level
   5++AD77 0E 9C        	ld	c, -100
   6++AD79 CD 83 AD     	call	.Num1
   7++AD7C 0E F6        	ld	c,-10
   8++AD7E CD 83 AD     	call	.Num1
   9++AD81 0E FF        	ld	c,-1
  10++AD83              .Num1:
  11++AD83 06 2F        	ld	b,'0'-1
  12++AD85              .Num2:
  13++AD85 04           	inc		b
  14++AD86 81           	add		a,c
  15++AD87 38 FC        	jr		c,.Num2
  16++AD89 91           	sub 	c
  17++AD8A C5           	push	bc
  18++AD8B F5           	push	af
  19++AD8C 79           	ld		a,c
  20++AD8D FE FF        	cp		-1
  21++AD8F CC 98 AD     	call	z,.InsertDot
  22++AD92 78           	ld		a,b
  23++AD93 12           	ld		(de),a
  24++AD94 13           	inc		de
  25++AD95 F1           	pop		af
  26++AD96 C1           	pop		bc
  27++AD97 C9           	ret
  28++AD98              .InsertDot:
  29++AD98 3E 2E        	ld		a,'.'
  30++AD9A 12           	ld		(de),a
  31++AD9B 13           	inc		de
  32++AD9C C9           	ret
  33++AD9D
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AD9D
  67+ AD9D 2A 29 98     GetCash:                ld      hl,(Cash)
  68+ ADA0 EB                                   ex      de,hl
  69+ ADA1 DD 2A 2B 98                          ld      ix,(Cash+2)
  70+ ADA5 FD 21 30 AD                          ld		iy,txt_cash_amount
  71+ ADA9 CD 27 A7                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ ADAC FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ ADAF 32 3C AD                             ld		(txt_cash_fraction),a
  74+ ADB2 21 31 AD     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ ADB5 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ ADB6 FE 00                                cp		0
  77+ ADB8 C8                                   ret		z
  78+ ADB9 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ ADBD C9                                   ret
  80+ ADBE
# file closed: ./Menus/common_menu.asm
 921  ADBE              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 922  ADBE              ;INCLUDE "./title_page.asm"
 923  ADBE
 924  ADBE              ; Blocks dependent on variables in Universe Banks
 925  ADBE              ; Bank 49
 926  ADBE              ;    SEG RESETUNIVSEG
 927  ADBE              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 928  ADBE              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 929  ADBE
 930  ADBE              ;	ORG ResetUniverseAddr
 931  ADBE              ;INCLUDE "./GameEngine/resetUniverse.asm"
 932  ADBE              ; Bank 50
 933  ADBE
 934  ADBE
 935  ADBE
 936  ADBE                  SLOT    MenuShrChtAddr
 937  ADBE                  PAGE    BankMenuShrCht
 938  ADBE              	ORG     MenuShrChtAddr,BankMenuShrCht
 939  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 07 A0  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD 80 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 2D 95                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A 2D 98                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 58 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 7A 95                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B 2D 95                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 36 95     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 7A 95                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 CD A0                             ld		hl,name_expanded
  65+ C127 CD 28 A0                             call	CapitaliseString
  66+ C12A 21 CD A0                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 7A 95                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B 2D 95                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 36 95     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 36 95     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 2D 95                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 76 95                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 27 A7                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 5B A5                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 5B A5                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 5B A5                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD CF 98     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 36 95                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 CD A0                             ld		hl,name_expanded
 258+ C2C2 CD 28 A0                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 CD A0                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 CD A0                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 2A 94                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD CF 98     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 36 95     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 CD A0     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 28 A0                             call	CapitaliseString
 333+ C34C 21 CD A0     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 69 94                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD CC 90                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 36 95                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 50 94                             ld      de,SystemSeed
 359+ C388 CD A2 98                             call    copy_seed
 360+ C38B 3A 51 94                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 2E 95     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 53 94     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 2D 95                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 51 94     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 2E 95                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 53 94                             ld		a,(SystemSeed+3)
 390+ C3C5 21 2D 95                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 55 94                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 12 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 69 94                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 69 94                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 47 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 53 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 70 94                             ld      (MenuIdMax),a
 420+ C41E 2A 2D 95                             ld		hl,(PresentSystemX)
 421+ C421 22 7A 95                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 48 A0                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 9C 98     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A 6E 94     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A 7B 95     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 7B 95                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A 7B 95     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 7B 95                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A 7A 95     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 7A 95                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A 7A 95     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 7A 95                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A 2D 95     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 7A 95                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A 36 95     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 7A 95                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: ./Menus/short_range_chart_menu.asm
 940  C4DA              ; Bank 51
 941  C4DA
 942  C4DA                  SLOT    MenuGalChtAddr
 943  C4DA                  PAGE    BankMenuGalCht
 944  C4DA              	ORG     MenuGalChtAddr
 945  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 07 A0  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD 80 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B 2D 95  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A 2D 98     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 58 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B 7A 95  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 69 94     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A 36 95         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 50 94         ld      de,SystemSeed
  66+ C0F0 CD A2 98     	call    copy_seed
  67+ C0F3 3A 53 94     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 51 94     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 54 94     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 69 94     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 69 94     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 47 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 53 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 70 94         ld      (MenuIdMax),a
 106+ C168 2A 2D 95         ld      hl,(PresentSystemX)
 107+ C16B 22 7A 95         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 48 A0     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A 36 95         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B 7A 95      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD 80 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD C2 92         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A BF 92         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD 80 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 52 92                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD D5 92                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD E9 92     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A C1 92                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A C0 92     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 C0 92                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A 36 95                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 A0 92                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 7A 95                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD 80 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD 80 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A 6E 94                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A 7B 95     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 7B 95                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A 7B 95     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 7B 95                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A 7A 95     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 7A 95                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A 7A 95     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 7A 95                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A 2D 95     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 7A 95                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A 36 95     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 7A 95                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B 7A 95  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A 36 95                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 CD A0                             ld		hl,name_expanded
 356+ C3B5 CD 28 A0                             call	CapitaliseString
 357+ C3B8 21 CD A0                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A 36 95     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B 2D 95                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B 7A 95                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 76 95                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 27 A7                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD 5B A5                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD 5B A5                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD 5B A5                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 69 94                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A 36 95     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A 2D 95                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 69 95                             ld      de,PresentSystemSeeds
 442+ C479 CD A2 98                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 69 94                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 69 94                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
 946  C495              ; Bank 52
 947  C495
 948  C495                  SLOT    MenuInventAddr
 949  C495                  PAGE    BankMenuInvent
 950  C495              	ORG     MenuInventAddr
 951  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD 80 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 2D 98     	ld		a,(Fuel)
   4++C136 11 1F AD     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 34 98                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 80 9B                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 AB 9E                             ld		hl, WordIdx
 118+ C17A CD 80 9B                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD 80 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD 80 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 80 9B                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 AB 9E                             ld		hl,WordIdx
 148+ C1C1 CD 80 9B                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD 80 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 2B 98     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 29 98                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 47 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 53 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 70 94                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 1F AD                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 952  C281
 953  C281              ; Bank 53
 954  C281
 955  C281                  SLOT    MenuSystemAddr
 956  C281                  PAGE    BankMenuSystem
 957  C281              	ORG     MenuSystemAddr
 958  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 07 A0  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 CD A0  						DW $0280,name_expanded
   5+ C018 08 0B 37 9D  						DW $0B08,WordDistance
   6+ C01C 08 13 40 9D  						DW $1308,WordEconomy
   7+ C020 08 1B 48 9D  						DW $1B08,WordGovernment
   8+ C024 08 23 53 9D  						DW $2308,WordTechLevel
   9+ C028 08 2B 5D 9D  						DW $2B08,WordPopulation
  10+ C02C 08 3B 78 9D  						DW $3B08,WordGross
  11+ C030 38 3B 7E 9D  						DW $3B38,WordProductivity
  12+ C034 08 43 8B 9D  						DW $4308,WordAverage
  13+ C038 48 43 93 9D  						DW $4348,WordRadius
  14+ C03C 60 0B 07 A0  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 07 A0  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 36 95     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 2D 95                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD 80 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 47 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 53 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 70 94                             ld		(MenuIdMax),a
 134+ C316 3A 36 95     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 7A 95  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 2D 95  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 7A 95  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A 2D 95                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 63 95     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 48 A0                             call	expandTokenToString
 170+ C37B 3A 36 95     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 CD A0                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 CD A0                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 76 95  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 18 A7                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD 80 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 48 A0                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 48 A0                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 3A A0                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD 80 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD 80 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 18 A7                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD 80 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 36 95     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD 80 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 27 A7                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD 80 E0                             call	l1_print_at
 272+ C48F 3A 36 95     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 27 A7                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD 80 E0                             call	l1_print_at
 289+ C4BC 3A 36 95     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD CD E0                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 959  C4F7
 960  C4F7              ; Bank 54
 961  C4F7
 962  C4F7                  SLOT    MenuMarketAddr
 963  C4F7                  PAGE    BankMenuMarket
 964  C4F7                  ORG     MenuMarketAddr
 965  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 07 A0  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 CD A0  						DW $0220,name_expanded
   4+ C018 80 0B 27 9C  						DW $0B80,WordUnit
   5+ C01C B0 0B 70 9E  						DW $0BB0,WordQuantity
   6+ C020 08 13 4E 9E  						DW $1308,WordProduct
   7+ C024 60 13 56 9E  						DW $1360,WordUoM
   8+ C028 80 13 5A 9E  						DW $1380,WordPrice
   9+ C02C B0 13 7E 9E  						DW $13B0,WordStock
  10+ C030 E0 13 7A 9E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD 80 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 2B 98     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 29 98                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 33 98                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD 80 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD 80 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD 80 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 34 98                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 AB 9E                             ld		hl,WordIdx
 273+ C2C5 CD 80 9B                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD 80 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 AB 9E                             ld		hl,WordIdx
 281+ C2DF CD 80 9B                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD 80 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD 80 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD 80 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD 80 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 47 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 53 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 70 94                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 36 95     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 48 A0                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD 80 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD 80 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD 52 92                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD 52 92                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD 52 92                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD 52 92                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 34 98                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 33 98                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD 77 A1                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 34 98                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A 32 98     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A 2B 98     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A 29 98                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 34 98                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 33 98                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD 8A A1                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 966  C4FD
 967  C4FD              ; Bank 66
 968  C4FD
 969  C4FD                  SLOT    DispMarketAddr
 970  C4FD                  PAGE    BankDispMarket
 971  C4FD                  ORG     DispMarketAddr
 972  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 07 A0  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 CD A0  						DW $0220,name_expanded
   4+ C018 80 0B 27 9C  						DW $0B80,WordUnit
   5+ C01C B0 0B 70 9E  						DW $0BB0,WordQuantity
   6+ C020 08 13 4E 9E  						DW $1308,WordProduct
   7+ C024 60 13 56 9E  						DW $1360,WordUoM
   8+ C028 80 13 5A 9E  						DW $1380,WordPrice
   9+ C02C B0 13 7E 9E  						DW $13B0,WordStock
  10+ C030 E0 13 7A 9E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD 80 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 2B 98     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 29 98                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	    ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 33 98                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:       call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD 80 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD 80 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD 80 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 34 98                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 AB 9E                             ld		hl,WordIdx
 256+ C2A5 CD 80 9B                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD 80 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 AB 9E                             ld		hl,WordIdx
 264+ C2BF CD 80 9B                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD 80 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD 80 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD 80 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD 80 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 47 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 53 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 70 94                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A 36 95     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 48 A0                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD 80 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD 80 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 973  C3D3
 974  C3D3              ; Bank 55
 975  C3D3
 976  C3D3                  SLOT    StockTableAddr
 977  C3D3                  PAGE    BankStockTable
 978  C3D3                  ORG     StockTableAddr
 979  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 9C 98                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 51 95                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 6F 95                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 51 95                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 6F 95                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
 980  E113
 981  E113              ; Bank 57
 982  E113
 983  E113                  SLOT    LAYER2Addr
 984  E113                  PAGE    BankLAYER2
 985  E113                  ORG     LAYER2Addr
 986  E000
 987  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 988  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
 989  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
 990  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 991  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 992  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
 993  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 994  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 995  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 996  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c, l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c, l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 07 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >                        or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                xor a
 100+ E589 FD 95       >                sub iyl
 100+ E58B FD 6F       >                ld iyl,a
 100+ E58D 9F          >                sbc a,a
 100+ E58E FD 94       >                sub iyh
 100+ E590 FD 67       >                ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                xor a
 102+ E59E FD 95       >                sub iyl
 102+ E5A0 FD 6F       >                ld iyl,a
 102+ E5A2 9F          >                sbc a,a
 102+ E5A3 FD 94       >                sub iyh
 102+ E5A5 FD 67       >                ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                   cp    ixl
 118+ E5C8 D0          >                   ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DF CA F8 E5    >				jp	z, l2S_ErrZero
 136+ E5E2              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E2              	lddeiy
 137+ E5E2 FD 54       >                ld		d,iyh
 137+ E5E4 FD 5D       >                ld		e,iyl
 138+ E5E6 EB           	ex		de,hl
 139+ E5E7 16 00        	ld		d,0
 140+ E5E9 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5EC 5F           	ld		e,a
 142+ E5ED              	ClearCarryFlag
 142+ E5ED B7          >                        or a
 143+ E5EE ED 52        	sbc		hl,de
 144+ E5F0 EB           	ex		de,hl
 145+ E5F1              	ldiyde
 145+ E5F1 FD 62       >                ld		iyh,d
 145+ E5F3 FD 6B       >                ld		iyl,e
 146+ E5F5              l2S_adjustRow:									; move Y down by one
 147+ E5F5 04           	inc		b
 148+ E5F6 18 BD        	jr		l2S_Loop
 149+ E5F8              l2S_ErrZero:
 150+ E5F8 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FB EB           	ex		de,hl
 152+ E5FC 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E5FF              	ClearCarryFlag
 153+ E5FF B7          >                        or a
 154+ E600 ED 52        	sbc		hl,de
 155+ E602 EB           	ex		de,hl
 156+ E603              	ldiyde
 156+ E603 FD 62       >                ld		iyh,d
 156+ E605 FD 6B       >                ld		iyl,e
 157+ E607              l2S_adjustCol2:
 158+ E607 00           	nop										; update X and Y
 159+ E608 04           	inc		b
 160+ E609 18 AA        	jr		l2S_Loop
 161+ E60B
 162+ E60B              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60B 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60E 21 00 00                             ld		hl,0                            ;
 165+ E611 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E614 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E617 78           l2D_preSort:            ld		a,b								;
 168+ E618                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E618 BA          >                        cp      d
 168+ E619 DA 21 E6    >                        jp		c, l2D_noYSort
 169+ E61C              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61C 60          >                ld		h,b
 169+ E61D 69          >                ld		l,c
 170+ E61E EB                                   ex		de,hl                           ;
 171+ E61F                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61F 44          >                ld		b,h
 171+ E620 4D          >                ld		c,l
 172+ E621 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E623 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E625 79           l2D_setXLen:            ld		a,c                             ;
 175+ E626                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E626 BB          >                        cp      e
 175+ E627 DA 33 E6    >                        jp		c, l2D_PosXLen
 176+ E62A 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62B 93                                   sub     e                               ;
 178+ E62C 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62F 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E631 18 07                                jr		l2D_XINCDEC
 181+ E633 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E634 91                                   sub		c                               ;
 183+ E635 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E638 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63A 32 A9 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63D 32 D9 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E640 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E641 90                                   sub		b
 189+ E642 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E645              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E645 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E648 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64C                                      ClearCarryFlag
 193+ E64C B7          >                        or a
 194+ E64D ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64F EB                                   ex		de,hl
 196+ E650 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E652 FD 6B                                ld		iyl,e
 198+ E654 F2 79 E6                             jp		p,l2D_fracIsPositive
 199+ E657              l2D_fracIsNegative:     NegIY
 199+ E657 AF          >                xor a
 199+ E658 FD 95       >                sub iyl
 199+ E65A FD 6F       >                ld iyl,a
 199+ E65C 9F          >                sbc a,a
 199+ E65D FD 94       >                sub iyh
 199+ E65F FD 67       >                ld iyh,a
 200+ E661                                      ShiftIYRight1
 200+ E661 FD 7C       >			   ld 	a,iyh
 200+ E663 CB 3F       >			   srl 	a
 200+ E665 FD 67       >			   ld	iyh,a
 200+ E667 FD 7D       >			   ld 	a,iyl
 200+ E669 1F          >			   rra
 200+ E66A FD 6F       >			   ld	iyl,a
 201+ E66C                                      NegIY
 201+ E66C AF          >                xor a
 201+ E66D FD 95       >                sub iyl
 201+ E66F FD 6F       >                ld iyl,a
 201+ E671 9F          >                sbc a,a
 201+ E672 FD 94       >                sub iyh
 201+ E674 FD 67       >                ld iyh,a
 202+ E676 C3 84 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E679              l2D_fracIsPositive:     ShiftIYRight1
 203+ E679 FD 7C       >			   ld 	a,iyh
 203+ E67B CB 3F       >			   srl 	a
 203+ E67D FD 67       >			   ld	iyh,a
 203+ E67F FD 7D       >			   ld 	a,iyl
 203+ E681 1F          >			   rra
 203+ E682 FD 6F       >			   ld	iyl,a
 204+ E684              l2D_SkipCalcInc:
 205+ E684 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E686 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E689 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68C D1 C1                                pop     bc,,de
 209+ E68E DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E690                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E690 B8          >                        cp     b
 210+ E691 D2 97 E6    >                        jp		nc,l2D_CheckXPos
 211+ E694 C3 9B E6                             jp		l2D_Continue
 212+ E697 79           l2D_CheckXPos:          ld		a,c
 213+ E698                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E698 DD BD       >                  cp      ixl
 213+ E69A C8          >                  ret     z
 214+ E69B              l2D_Continue:
 215+ E69B FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69D CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69F 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A1 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A4 16 00                                ld		d,0
 220+ E6A6 5F                                   ld		e,a
 221+ E6A7 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A9 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AA 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AC FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AE FD B5                                or		iyl
 226+ E6B0                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6B1 CA CA E6    >				jp	z, l2D_ErrZero
 227+ E6B4              l2D_ErrPositive:		lddeiy
 227+ E6B4 FD 54       >                ld		d,iyh
 227+ E6B6 FD 5D       >                ld		e,iyl
 228+ E6B8 EB                                   ex		de,hl
 229+ E6B9 16 00                                ld		d,0
 230+ E6BB 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6BE 5F                                   ld		e,a
 232+ E6BF                                      ClearCarryFlag
 232+ E6BF B7          >                        or a
 233+ E6C0 ED 52                                sbc		hl,de
 234+ E6C2 EB                                   ex		de,hl
 235+ E6C3                                      ldiyde
 235+ E6C3 FD 62       >                ld		iyh,d
 235+ E6C5 FD 6B       >                ld		iyl,e
 236+ E6C7 04           l2D_adjustRow:			inc		b
 237+ E6C8 18 BA                                jr		l2D_Loop
 238+ E6CA 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CD EB                                   ex		de,hl
 240+ E6CE 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D1                                      ClearCarryFlag
 241+ E6D1 B7          >                        or a
 242+ E6D2 ED 52                                sbc		hl,de
 243+ E6D4 EB                                   ex		de,hl
 244+ E6D5                                      ldiyde
 244+ E6D5 FD 62       >                ld		iyh,d
 244+ E6D7 FD 6B       >                ld		iyl,e
 245+ E6D9 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DA 04                                   inc		b
 247+ E6DB 18 A7                                jr		l2D_Loop
 248+ E6DD              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DD
 250+ E6DD
 251+ E6DD
 252+ E6DD
 253+ E6DD              ;Loin:				; BBC version of line draw
 254+ E6DD              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DD              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DD              ;	ld		ixh,0							; ixh = s
 257+ E6DD              ;	ld		iyh,0							; iyh = swap
 258+ E6DD              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DD              ;LoinCalcDeltaX:
 260+ E6DD              ;	ld		a,e
 261+ E6DD              ;	sub		c								; a = deltaX
 262+ E6DD              ;	JumpIfPositive LoinPosDx
 263+ E6DD              ;LoinNegDx:
 264+ E6DD              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DD              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DD              ;LoinPosDx:
 267+ E6DD              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DD              ;LoinCalcDeltaY:
 269+ E6DD              ;	ld		a,d
 270+ E6DD              ;	sub		b								; a= deltaY
 271+ E6DD              ;	JumpIfPositive LoinPosDy
 272+ E6DD              ;LoinNegDy:
 273+ E6DD              ;	neg
 274+ E6DD              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DD              ;LoinPosDy:
 276+ E6DD              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DD              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DD              ;LoinSTPx:									; step along X
 279+ E6DD              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DD              ;LoinSTPxSwapCoords:
 281+ E6DD              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DD              ;	ld		a,l								; save l flags
 283+ E6DD              ;	ex		de,hl							; save de to hl
 284+ E6DD              ;	lddebc									; Point2 = point1
 285+ E6DD              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DD              ;	ld		l,a								; get back l flags
 287+ E6DD              ;LoinSTPxCorrectOrder:
 288+ E6DD              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DD              ;	ld		a,iyl							; get delta Y back
 290+ E6DD              ;	ld		iy1,$FE							; roll counter
 291+ E6DD              ;LionSTPxRollQ:
 292+ E6DD              ;	sla		a								; highest bit of delta-Y
 293+ E6DD              ;	jp		c,LoinSTPxSteep
 294+ E6DD              ;	cp		ixl								; compare with DeltaX
 295+ E6DD              ;	jp		cs,LoinSTPxShallow
 296+ E6DD              ;LoinSTPxSteep:								;; LI4
 297+ E6DD              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DD              ;	scf										; force carry flag set
 299+ E6DD              ;LoinSTPxShallow:							;; LI5
 300+ E6DD              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DD              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DD              ;	inc		ihl								; DeltaX += 1
 303+ E6DD              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DD              ;	ld		a,d
 305+ E6DD              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DD              ;	ld		a,iyh							; swap flag
 307+ E6DD              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DD              ;LoinSTPxX1Dec:
 309+ E6DD              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DD              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DD              ;	sub		b
 312+ E6DD              ;	if
 313+ E6DD              ;
 314+ E6DD              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DD              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DD              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DD              ;86 81                   STX &81		\ Q
 318+ E6DD              ;.LIL1	\ roll Q
 319+ E6DD              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DD              ;B0 04                   BCS LI4		\ steep
 321+ E6DD              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DD              ;90 03                   BCC LI5		\ shallow
 323+ E6DD              ;.LI4	\ steep
 324+ E6DD              ;E5 1B                   SBC &1B		\ P
 325+ E6DD              ;38                      SEC
 326+ E6DD              ;.LI5	\ shallow
 327+ E6DD              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DD              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DD              ;A6 1B                   LDX &1B		\ P
 330+ E6DD              ;E8                      INX 		\ Xreg is width
 331+ E6DD              ;A5 37                   LDA &37		\ Y2
 332+ E6DD              ;E5 35                   SBC &35		\ Y1
 333+ E6DD              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DD              ;A5 90                   LDA &90		\ SWAP
 335+ E6DD              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DD              ;CA                      DEX
 337+ E6DD              ;.LIL2	\ counter X width
 338+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DD              ;.LI6	\ Xreg correct
 342+ E6DD              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DD              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DD              ;66 82                   ROR &82		\ R
 345+ E6DD              ;A5 07                   LDA &07		\ SC
 346+ E6DD              ;69 08                   ADC #8		\ next column
 347+ E6DD              ;85 07                   STA &07		\ SC
 348+ E6DD              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DD              ;A5 83                   LDA &83		\ S
 350+ E6DD              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DD              ;85 83                   STA &83		\ S
 352+ E6DD              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DD              ;88                      DEY
 354+ E6DD              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DD              ;C6 08                   DEC &08		\ SC+1
 356+ E6DD              ;A0 07                   LDY #7
 357+ E6DD              ;.LIC2	\ skip Y adjustment
 358+ E6DD              ;CA                      DEX
 359+ E6DD              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DD              ;60                      RTS
 362+ E6DD              ;
 363+ E6DD              ;.DOWN	\ Line is going to the right and down
 364+ E6DD              ;A5 90                   LDA &90		\ SWAP
 365+ E6DD              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DD              ;CA                      DEX
 367+ E6DD              ;.LIL3	\ counter X width
 368+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DD              ;.LI9	\ no swap
 372+ E6DD              ;46 82                   LSR &82		\ R
 373+ E6DD              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DD              ;66 82                   ROR &82		\ R
 375+ E6DD              ;A5 07                   LDA &07		\ SC
 376+ E6DD              ;69 08                   ADC #8		\ next column
 377+ E6DD              ;85 07                   STA &07		\ SC
 378+ E6DD              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DD              ;A5 83                   LDA &83		\ S
 380+ E6DD              ;65 81                   ADC &81		\ Q
 381+ E6DD              ;85 83                   STA &83		\ S
 382+ E6DD              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DD              ;C8                      INY
 384+ E6DD              ;C0 08                   CPY #8
 385+ E6DD              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DD              ;E6 08                   INC &08		\ SC+1
 387+ E6DD              ;A0 00                   LDY #0
 388+ E6DD              ;.LIC3	\ skipped Y adjustment
 389+ E6DD              ;CA                      DEX
 390+ E6DD              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DD              ;60                      RTS
 393+ E6DD              ;
 394+ E6DD              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DD              ;A4 35                   LDY &35		\ Y1
 396+ E6DD              ;98                      TYA
 397+ E6DD              ;A6 34                   LDX &34		\ X1
 398+ E6DD              ;C4 37                   CPY &37		\ Y2
 399+ E6DD              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DD              ;C6 90                   DEC &90		\ SWAP
 401+ E6DD              ;A5 36                   LDA &36		\ X2
 402+ E6DD              ;85 34                   STA &34		\ X1
 403+ E6DD              ;86 36                   STX &36		\ X2
 404+ E6DD              ;AA                      TAX
 405+ E6DD              ;A5 37                   LDA &37		\ Y2
 406+ E6DD              ;85 35                   STA &35		\ Y1
 407+ E6DD              ;84 37                   STY &37		\ Y2
 408+ E6DD              ;A8                      TAY
 409+ E6DD              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DD              ;4A                      LSR A
 411+ E6DD              ;4A                      LSR A
 412+ E6DD              ;4A                      LSR A
 413+ E6DD              ;09 60                   ORA #&60
 414+ E6DD              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DD              ;8A                      TXA 		\ X1
 416+ E6DD              ;29 F8                   AND #&F8
 417+ E6DD              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DD              ;8A                      TXA
 419+ E6DD              ;29 07                   AND #7		\ mask index
 420+ E6DD              ;AA                      TAX
 421+ E6DD              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DD              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DD              ;A5 35                   LDA &35		\ Y1
 424+ E6DD              ;29 07                   AND #7
 425+ E6DD              ;A8                      TAY
 426+ E6DD              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DD              ;A2 01                   LDX #1		\ roll counter
 428+ E6DD              ;86 1B                   STX &1B	    	\ P
 429+ E6DD              ;.LIL4	\ roll P
 430+ E6DD              ;0A                      ASL A
 431+ E6DD              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DD              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DD              ;90 03                   BCC LI14	\ less than Q
 434+ E6DD              ;.LI13	\ do subtraction
 435+ E6DD              ;E5 81                   SBC &81		\ Q
 436+ E6DD              ;38                      SEC
 437+ E6DD              ;.LI14	\ less than Q
 438+ E6DD              ;26 1B                   ROL &1B		\ P
 439+ E6DD              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DD              ;A6 81                   LDX &81		\ Q
 441+ E6DD              ;E8                      INX 		\ adjust height
 442+ E6DD              ;A5 36                   LDA &36		\ X2
 443+ E6DD              ;E5 34                   SBC &34		\ X1
 444+ E6DD              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DD              ;18                      CLC
 446+ E6DD              ;A5 90                   LDA &90		\ SWAP
 447+ E6DD              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DD              ;CA                      DEX
 449+ E6DD              ;.LIL5	\ skipped first point, counter X
 450+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DD              ;.LI17	\ skipped first point
 454+ E6DD              ;88                      DEY
 455+ E6DD              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DD              ;C6 08                   DEC &08		\ SC+1
 457+ E6DD              ;A0 07                   LDY #7		\ new char
 458+ E6DD              ;	.LI16	\ skipped hi adjust
 459+ E6DD              ;A5 83                   LDA &83		\ S
 460+ E6DD              ;65 1B                   ADC &1B		\ P
 461+ E6DD              ;85 83                   STA &83		\ S
 462+ E6DD              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DD              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DD              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DD              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DD              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DD              ;69 08                   ADC #8		\ next char below
 468+ E6DD              ;85 07                   STA &07		\ SC
 469+ E6DD              ;.LIC5	\ same column
 470+ E6DD              ;CA                      DEX
 471+ E6DD              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DD              ;60                      RTS
 474+ E6DD              ;
 475+ E6DD              ;.LFT	\ going left
 476+ E6DD              ;A5 90                   LDA &90		\ SWAP
 477+ E6DD              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DD              ;CA                      DEX 		\ reduce height
 479+ E6DD              ;.LIL6	\ counter X height
 480+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DD              ;.LI18
 484+ E6DD              ;88                      DEY
 485+ E6DD              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DD              ;C6 08                   DEC &08		\ SC+1
 487+ E6DD              ;A0 07                   LDY #7		\ rest char row
 488+ E6DD              ;.LI19	\ skipped hi adjust
 489+ E6DD              ;A5 83                   LDA &83		\ S
 490+ E6DD              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DD              ;85 83                   STA &83		\ S
 492+ E6DD              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DD              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DD              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DD              ;26 82                   ROL &82		\ R
 496+ E6DD              ;A5 07                   LDA &07		\ SC
 497+ E6DD              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DD              ;85 07                   STA &07		\ SC
 499+ E6DD              ;18                      CLC
 500+ E6DD              ;.LIC6	\ no overflow
 501+ E6DD              ;CA                      DEX 		\ height
 502+ E6DD              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DD              ;.HL6
 505+ E6DD              ;60                      RTS 		\ end Line drawing
 506+ E6DD
 507+ E6DD
 508+ E6DD              ;;l2_draw_diagonalopt:
 509+ E6DD              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DD              ;;	push	af
 511+ E6DD              ;;	ld		a,b
 512+ E6DD              ;;	cp		d
 513+ E6DD              ;;	jr		z,.RegularDiagnonal
 514+ E6DD              ;;.CheckHorz:
 515+ E6DD              ;;	ld		a,c
 516+ E6DD              ;;	cp		e
 517+ E6DD              ;;	jr		z,.horizontalLine
 518+ E6DD              ;;.RegularDiagnonal:
 519+ E6DD              ;;	pop		af
 520+ E6DD              ;;	call diag
 521+ E6DD
 522+ E6DD
 523+ E6DD              ;;l2_signed_mul2a:
 524+ E6DD              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DD              ;;	TEST	$80
 526+ E6DD              ;;	jr		nz, .negativecalc
 527+ E6DD              ;;.positivecalc:
 528+ E6DD              ;;	ccf
 529+ E6DD              ;;	rla
 530+ E6DD              ;;	ret
 531+ E6DD              ;;.negativecalc:
 532+ E6DD              ;;	neg
 533+ E6DD              ;;	ccf
 534+ E6DD              ;;	rla
 535+ E6DD              ;;	neg
 536+ E6DD              ;;	ret
 537+ E6DD              ;;
 538+ E6DD              ;;l2_signed_mul2atohl:
 539+ E6DD              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DD              ;;	TEST	$80
 541+ E6DD              ;;	jr		nz, .negativecalc
 542+ E6DD              ;;.positivecalc:
 543+ E6DD              ;;	ld		hl,0
 544+ E6DD              ;;	ld		l,a
 545+ E6DD              ;;	add		hl,a
 546+ E6DD              ;;	ret
 547+ E6DD              ;;.negativecalc:
 548+ E6DD              ;;	neg
 549+ E6DD              ;;	ld		hl,0
 550+ E6DD              ;;	ld		l,a
 551+ E6DD              ;;	neghl
 552+ E6DD              ;;	ret
 553+ E6DD              ;;
 554+ E6DD              ;;l2_e2fractionby2:
 555+ E6DD              ;;	ld 		hl,(l2fraction)
 556+ E6DD              ;;	push	de
 557+ E6DD              ;;	ld		d,h
 558+ E6DD              ;;	ld		e,l
 559+ E6DD              ;;	add		hl,de
 560+ E6DD              ;;	pop		de
 561+ E6DD              ;;	ld		(l2e2),hl
 562+ E6DD              ;;	ret
 563+ E6DD
 564+ E6DD
 565+ E6DD
 566+ E6DD
 567+ E6DD
 568+ E6DD              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DD              ;;//.catchLoop:
 570+ E6DD              ;;//	jp .catchLoop
 571+ E6DD              ;;//.continue:
 572+ E6DD              ;;//    ld      A,D
 573+ E6DD              ;;//    sub     H
 574+ E6DD              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DD              ;;//.DXNegative:
 576+ E6DD              ;;//    neg
 577+ E6DD              ;;//.DXPositive:
 578+ E6DD              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DD              ;;//    ld      A,E
 580+ E6DD              ;;//    sub     L
 581+ E6DD              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DD              ;;//.DYNegative:
 583+ E6DD              ;;//    neg
 584+ E6DD              ;;//.DYPositive:
 585+ E6DD              ;;//    sub     B               ;|delta_y|
 586+ E6DD              ;;//	push	af
 587+ E6DD              ;;//	jr		c,.DeltaX
 588+ E6DD              ;;//.DeltaY
 589+ E6DD              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DD              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DD              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DD              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DD              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DD              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DD              ;;//.DeltaX:
 596+ E6DD              ;;//	ld		a,d
 597+ E6DD              ;;//	sub		h
 598+ E6DD              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DD              ;;//.TestDX:
 600+ E6DD              ;;//	ex		de,hl
 601+ E6DD              ;;//.TestDY:
 602+ E6DD              ;;//	ld		a,e
 603+ E6DD              ;;//	sub		l
 604+ E6DD              ;;//    ld      A,$01
 605+ E6DD              ;;//    jr      NC,.StoreA
 606+ E6DD              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DD              ;;//.StoreA:
 608+ E6DD              ;;//        ld      (l2way),A
 609+ E6DD              ;;//.InitLine:
 610+ E6DD              ;;//        ld      B,H
 611+ E6DD              ;;//        ld      C,L
 612+ E6DD              ;;//        ld      A,E
 613+ E6DD              ;;//        sub     L
 614+ E6DD              ;;//        jr      NC,.EndInit
 615+ E6DD              ;;//        ld      A,L
 616+ E6DD              ;;//        ld      L,E
 617+ E6DD              ;;//        ld      E,A
 618+ E6DD              ;;//.EndInit:
 619+ E6DD              ;;//        ld      A,E
 620+ E6DD              ;;//        sub     L
 621+ E6DD              ;;//        rla
 622+ E6DD              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DD              ;;//        add     A,H
 624+ E6DD              ;;//        sub     D
 625+ E6DD              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DD              ;;//        add     A,H
 627+ E6DD              ;;//        sub     D
 628+ E6DD              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DD              ;;//.Loop:
 630+ E6DD              ;;//        ld      A,B
 631+ E6DD              ;;//        sub     D
 632+ E6DD              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DD              ;;//        pop     AF
 634+ E6DD              ;;//        bit     7,A
 635+ E6DD              ;;//        push    AF
 636+ E6DD              ;;//        push    AF
 637+ E6DD              ;;//        push    BC
 638+ E6DD              ;;//        jr      Z,.DrawPoint
 639+ E6DD              ;;//        ld      A,B
 640+ E6DD              ;;//        ld      B,C
 641+ E6DD              ;;//        ld      C,A
 642+ E6DD              ;;//.DrawPoint:
 643+ E6DD              ;;//		push	hl
 644+ E6DD              ;;//		pushbcdeaf
 645+ E6DD              ;;//		ld		b,e
 646+ E6DD              ;;//		ld		c,d
 647+ E6DD              ;;//	ld 		a,(l2linecolor)
 648+ E6DD              ;;//	call	l2_plot_pixel
 649+ E6DD              ;;//		popafdebc
 650+ E6DD              ;;//		pop		hl
 651+ E6DD              ;;//        pop     BC
 652+ E6DD              ;;//        pop     AF
 653+ E6DD              ;;//.TestD:
 654+ E6DD              ;;//        bit     7,E
 655+ E6DD              ;;//        jr      NZ,.Case1
 656+ E6DD              ;;//.Case2:                          ;d >= 0
 657+ E6DD              ;;//        ld      A,E
 658+ E6DD              ;;//        add     A,H
 659+ E6DD              ;;//        ld      E,A
 660+ E6DD              ;;//        ld      A,(l2way)
 661+ E6DD              ;;//        add     A,C
 662+ E6DD              ;;//        ld      C,A
 663+ E6DD              ;;//        jr      .EndLoop
 664+ E6DD              ;;//.Case1:                          ;d < 0
 665+ E6DD              ;;//        ld      A,E
 666+ E6DD              ;;//        add     A,L
 667+ E6DD              ;;//        ld      E,A
 668+ E6DD              ;;//.EndLoop:
 669+ E6DD              ;;//        inc     B
 670+ E6DD              ;;//        jr      .Loop
 671+ E6DD              ;;//.EndLine:
 672+ E6DD              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DD              ;;//        pop     HL              ;can be removed
 674+ E6DD              ;;//        pop     DE              ;can be removed
 675+ E6DD              ;;//        ret
 676+ E6DD
 677+ E6DD              ;;	ld		(.l2yadjust),a
 678+ E6DD              ;;	call	calcdeltax:
 679+ E6DD              ;;	ld		(.l2xadjust),a
 680+ E6DD              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DD              ;;	push	hl
 682+ E6DD              ;;	push	de
 683+ E6DD              ;;	ld		hl,(l2deltaX)
 684+ E6DD              ;;	ld		de,(l2deltaY)
 685+ E6DD              ;;	add		hl,de
 686+ E6DD              ;;	ld		(l2fraction),hl
 687+ E6DD              ;;	pop		de
 688+ E6DD              ;;	pop		hl
 689+ E6DD              ;;.mainloop:
 690+ E6DD              ;;	push	bc
 691+ E6DD              ;;	push	de
 692+ E6DD              ;;	ld 		a,(l2linecolor)
 693+ E6DD              ;;	call	l2_plot_pixel
 694+ E6DD              ;;	pop		de
 695+ E6DD              ;;	pop		bc
 696+ E6DD              ;;.arewefinishedtest
 697+ E6DD              ;;	ld		a,b
 698+ E6DD              ;;	cp		d
 699+ E6DD              ;;	jr		nz,.notthereyet
 700+ E6DD              ;;	ld		a,c
 701+ E6DD              ;;	cp		e
 702+ E6DD              ;;	ret		z
 703+ E6DD              ;;.notthereyet:
 704+ E6DD              ;;	push	de
 705+ E6DD              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DD              ;;	pop		de
 707+ E6DD              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DD              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DD              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DD              ;;	or		a							;
 711+ E6DD              ;;	sbc		hl,de						;
 712+ E6DD              ;;	pop		de
 713+ E6DD              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DD              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DD              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DD              ;;.dodycalc:
 717+ E6DD              ;;	ld		hl,(l2fraction)
 718+ E6DD              ;;	push	de
 719+ E6DD              ;;	ld		de,(l2deltaY)
 720+ E6DD              ;;	add		hl,de
 721+ E6DD              ;;	ld		(l2fraction),de
 722+ E6DD              ;;	pop		de
 723+ E6DD              ;;.l2yadjust:
 724+ E6DD              ;;	nop
 725+ E6DD              ;;.skipdycalc:
 726+ E6DD              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DD              ;;	ld		hl,(l2e2)
 728+ E6DD              ;;	push	de							;
 729+ E6DD              ;;	ld		de,(l2deltaX)				;
 730+ E6DD              ;;	or		a							; clear carry flag
 731+ E6DD              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DD              ;;	pop		de
 733+ E6DD              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DD              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DD              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DD              ;;.dodxcalc:
 737+ E6DD              ;;	ld		hl,(l2fraction)
 738+ E6DD              ;;	push	de
 739+ E6DD              ;;	ld		de,(l2deltaX)
 740+ E6DD              ;;	add		hl,de
 741+ E6DD              ;;	ld		(l2fraction),de
 742+ E6DD              ;;	pop		de
 743+ E6DD              ;;.l2xadjust:
 744+ E6DD              ;;	nop
 745+ E6DD              ;;.skipdxcalc:
 746+ E6DD              ;;	jr 		.mainloop
 747+ E6DD
 748+ E6DD
 749+ E6DD              ;;/l2_draw_diagonalold:
 750+ E6DD              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DD              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DD              ;;/.sortycoords:
 753+ E6DD              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DD              ;;/	cp		d
 755+ E6DD              ;;/	jr		nc, .nocoordswap
 756+ E6DD              ;;/.swapcoords:
 757+ E6DD              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DD              ;;/	lddebc
 759+ E6DD              ;;/	ldbchl
 760+ E6DD              ;;/.nocoordswap:
 761+ E6DD              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DD              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DD              ;;/	ld		(l2deltaY),a
 764+ E6DD              ;;/	neg									; DEBUG
 765+ E6DD              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DD              ;;/	neg									; DEBUG
 767+ E6DD              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DD              ;;/    ld		a,c
 769+ E6DD              ;;/	cp		e
 770+ E6DD              ;;/	jr		c, .x1GTx0
 771+ E6DD              ;;/.x1LTx0
 772+ E6DD              ;;/	ld		a,c
 773+ E6DD              ;;/	sub		e
 774+ E6DD              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DD              ;;/	neg									; DEBUG
 776+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DD              ;;/	neg									; DEBUG
 778+ E6DD              ;;/	ld		a,l2incbstep
 779+ E6DD              ;;/	jr		.setlayershift0
 780+ E6DD              ;;/.x1GTx0:
 781+ E6DD              ;;/	ld		a,e
 782+ E6DD              ;;/	sub		c
 783+ E6DD              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DD              ;;/	neg									; DEBUG
 785+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DD              ;;/	neg									; DEBUG
 787+ E6DD              ;;/	ld		a,l2decbstep
 788+ E6DD              ;;/.setlayershift0:
 789+ E6DD              ;;/	ld		a,0
 790+ E6DD              ;;/	pushbcde
 791+ E6DD              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DD              ;;/	popdebc
 793+ E6DD              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DD              ;;/.dymuliplyby2:
 795+ E6DD              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DD              ;;/	call	l2_signed_mul2a
 797+ E6DD              ;;/	ld		(l2deltaYsq),a
 798+ E6DD              ;;/	neg									; DEBUG
 799+ E6DD              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DD              ;;/	neg									; DEBUG
 801+ E6DD              ;;/.dxmuliplyby2:
 802+ E6DD              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DD              ;;/	call	l2_signed_mul2a
 804+ E6DD              ;;/	ld		(l2deltaXsq),a
 805+ E6DD              ;;/	neg									; DEBUG
 806+ E6DD              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DD              ;;/	neg									; DEBUG
 808+ E6DD              ;;/.plotfirstpixel:
 809+ E6DD              ;;/	pushbcde
 810+ E6DD              ;;/	ld a,(l2linecolor)
 811+ E6DD              ;;/	call	l2_plot_pixel
 812+ E6DD              ;;/	popdebc
 813+ E6DD              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DD              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DD              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DD              ;;/	cp		(hl)
 817+ E6DD              ;;/	jp		m,	.signset
 818+ E6DD              ;;/.signclear:
 819+ E6DD              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DD              ;;/	jr		.dxGTdybranch
 821+ E6DD              ;;/.signset:
 822+ E6DD              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DD              ;;/.dxGTdybranch:
 824+ E6DD              ;;/	ld		a,(l2deltaYsq)
 825+ E6DD              ;;/	ld		hl,l2deltaX
 826+ E6DD              ;;/	sub		(hl)
 827+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DD              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DD              ;;/	ld		a,c
 830+ E6DD              ;;/	cp		e
 831+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DD              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DD              ;;/	ld		a,(l2fraction)
 834+ E6DD              ;;/	TEST	$80
 835+ E6DD              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DD              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DD              ;;/	ld		hl,l2deltaXsq
 838+ E6DD              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DD              ;;/	ld		(l2fraction),a
 840+ E6DD              ;;/.BranchAskipYstep:
 841+ E6DD              ;;/.l2stepx1:
 842+ E6DD              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DD              ;;/	ld		hl,l2deltaYsq
 845+ E6DD              ;;/	add		a,(hl)
 846+ E6DD              ;;/	ld		(l2fraction),a
 847+ E6DD              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DD              ;;/	pushbcde
 849+ E6DD              ;;/	ld a,(l2linecolor)
 850+ E6DD              ;;/	call	l2_plot_pixel
 851+ E6DD              ;;/	popdebc
 852+ E6DD              ;;/.BranchAloop:
 853+ E6DD              ;;/	jr		.BranchAwhile
 854+ E6DD              ;;/.dxLTEdybranch:
 855+ E6DD              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DD              ;;/	ld		hl, l2deltaY
 857+ E6DD              ;;/	sub		(hl)
 858+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DD              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DD              ;;/	ld		a,b
 861+ E6DD              ;;/	cp		d
 862+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DD              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DD              ;;/	ld		a,(l2fraction)
 865+ E6DD              ;;/	TEST	$80
 866+ E6DD              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DD              ;;/.l2stepx2
 868+ E6DD              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DD              ;;/	ld		hl,l2deltaYsq
 871+ E6DD              ;;/	sub		(hl)
 872+ E6DD              ;;/	ld		(l2fraction),a
 873+ E6DD              ;;/.BranchBskipYstep:
 874+ E6DD              ;;/	ld		hl, l2deltaYsq
 875+ E6DD              ;;/	add		a,(hl)
 876+ E6DD              ;;/	ld		(l2fraction),a
 877+ E6DD              ;;/	inc		b							; ++l2_vy0;
 878+ E6DD              ;;/.BranchBplotBCColA:
 879+ E6DD              ;;/	pushbcde
 880+ E6DD              ;;/	ld a,(l2linecolor)
 881+ E6DD              ;;/	call	l2_plot_pixel
 882+ E6DD              ;;/	popdebc
 883+ E6DD              ;;/.BranchBloop:
 884+ E6DD              ;;/	jr		.BranchBwhile
 885+ E6DD
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 997  E6DD                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DD
   2+ E6DD
   3+ E6DD
   4+ E6DD 00 00        l2trianglebc	        DW 0
   5+ E6DF 00 00        l2trianglede	        DW 0
   6+ E6E1 00 00        l2trianglehl	        DW 0
   7+ E6E3
   8+ E6E3              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E3 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E7 CD 0B E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EA F1                                   pop		af
  12+ E6EB D1                                   pop		de						; swap DE and HL
  13+ E6EC E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6ED C1                                   pop		bc
  15+ E6EE D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F0 F5                                   push	af
  17+ E6F1 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F4 F1                                   pop		af
  19+ E6F5 C1                                   pop		bc						; Now bc = original de
  20+ E6F6 D1                                   pop		de						; de = original hl
  21+ E6F7 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FA C9                                   ret
  23+ E6FB
  24+ E6FB
  25+ E6FB
  26+ E6FB
  27+ E6FB
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 998  E6FB                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FB              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FB              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FB              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FB DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FD 7D                                   ld		a,l
   6+ E6FE 32 24 E3                             ld		(l2linecolor),a
   7+ E701 79                                   ld		a,c
   8+ E702 BB                                   cp		e
   9+ E703 30 08                                jr		nc, .x2gtex1
  10+ E705 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E708 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70B 18 06                                jr		.storepoints
  13+ E70D DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E710 DD 2E 01                             ld		ixl,1
  15+ E713 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E716 DD 7C                                ld		a,ixh
  17+ E718 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E719 54                                   ld		d,h
  19+ E71A CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71D E1 D1 C1                             pop		bc,,de,,hl
  21+ E720 C5 E5                                push	bc,,hl
  22+ E722 54                                   ld		d,h                             ; now its bc -> he
  23+ E723 DD 7D                                ld		a,ixl
  24+ E725 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E728 E1 C1                                pop		bc,,hl
  26+ E72A 50           .SaveForLoop:           ld		d,b
  27+ E72B 5C                                   ld		e,h								; save loop counters
  28+ E72C D5                                   push	de								; de = y0ycommon
  29+ E72D 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E730 78                                   ld		a,b
  31+ E731 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E733 7E                                   ld		a,(hl)							;
  33+ E734 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E735 21 2C E4                             ld      hl,l2targetArray2
  35+ E738 78                                   ld      a,b
  36+ E739 ED 31                                add     hl,a
  37+ E73B              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73B 7E                                   ld		a,(hl)
  39+ E73C 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73D 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E740 5F                                   ld		e,a								; de = to colour
  42+ E741 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E742 25                                   dec		h
  44+ E743 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E744 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E747 E1                                   pop		hl
  47+ E748 C1                                   pop		bc
  48+ E749 04                                   inc		b								; down a rowc
  49+ E74A D1                                   pop		de								; de = from to (and b also = current)
  50+ E74B 14                                   inc		d
  51+ E74C 7B                                   ld		a,e								; while e >= d
  52+ E74D BA                                   cp		d
  53+ E74E 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E750 C9                                   ret
  55+ E751
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 999  E751                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E751
   2+ E751 00 00        l2_circle_pos		DW 0
   3+ E753 00           l2_circle_colour	DB 0
   4+ E754 00           l2_circle_radius	DB 0
   5+ E755 00           l2_circle_x			DB 0
   6+ E756 00           l2_circle_y			DB 0
   7+ E757 00           l2_circle_d			DB 0
   8+ E758
   9+ E758              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E758 7B           l2_draw_circle:     ld		a,e
  11+ E759 32 FF E7                         ld		(.PlotPixel+1),a
  12+ E75C 7A                               ld		a,d								; get radius
  13+ E75D A7                               and		a
  14+ E75E C8                               ret		z
  15+ E75F FE 01                            cp		1
  16+ E761 CA 0B E8                         jp		z,CircleSinglepixel
  17+ E764 ED 43 8E E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E768 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76A DD 2E 00                         ld		ixl,0
  20+ E76D 26 00        .calcd:	            ld		h,0
  21+ E76F 6F                               ld		l,a
  22+ E770 29                               add		hl,hl							; hl = r * 2
  23+ E771 EB                               ex		de,hl							; de = r * 2
  24+ E772 21 03 00                         ld		hl,3
  25+ E775 A7                               and		a
  26+ E776 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E778 44                               ld		b,h
  28+ E779 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77A 21 01 00     .calcdelta:         ld		hl,1
  30+ E77D 16 00                            ld		d,0
  31+ E77F DD 5D                            ld		e,ixl
  32+ E781 A7                               and		a
  33+ E782 ED 52                            sbc		hl,de
  34+ E784 11 01 00     .Setde1:            ld		de,1
  35+ E787 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E789 DD BD                            cp		ixl
  37+ E78B D8                               ret		c
  38+ E78C D9           .ProcessLoop:	    exx
  39+ E78D 11 00 00     .Plot1:             ld		de,0
  40+ E790 7B                               ld		a,e
  41+ E791 DD 85                            add		a,ixl
  42+ E793 4F                               ld		c,a
  43+ E794 7A                               ld		a,d
  44+ E795 DD 84                            add		a,ixh
  45+ E797 47                               ld		b,a
  46+ E798 CD FE E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79B 7B           .Plot2:             ld 		a,e
  48+ E79C DD 95                            sub 	ixl
  49+ E79E 4F                               ld 		c,a
  50+ E79F 7A                               ld 		a,d
  51+ E7A0 DD 84                            add 	a,ixh
  52+ E7A2 47                               ld		b,a
  53+ E7A3 CD FE E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A6 7B           .Plot3:             ld 		a,e
  55+ E7A7 DD 85                            add		a,ixl
  56+ E7A9 4F                               ld 		c,a
  57+ E7AA 7A                               ld 		a,d
  58+ E7AB DD 94                            sub 	ixh
  59+ E7AD 47                               ld 		b,a
  60+ E7AE CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B1 7B           .Plot4:             ld 		a,e
  62+ E7B2 DD 95                            sub 	ixl
  63+ E7B4 4F                               ld 		c,a
  64+ E7B5 7A                               ld 		a,d
  65+ E7B6 DD 94                            sub 	ixh
  66+ E7B8 47                               ld 		b,a
  67+ E7B9 CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BC 7A           .Plot5:	            ld 		a,d
  69+ E7BD DD 85                            add 	a,ixl
  70+ E7BF 47                               ld 		b,a
  71+ E7C0 7B                               ld 		a,e
  72+ E7C1 DD 84                            add 	a,ixh
  73+ E7C3 4F                               ld 		c,a
  74+ E7C4 CD FE E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C7 7A           .Plot6:	            ld 		a,d
  76+ E7C8 DD 95                            sub 	ixl
  77+ E7CA 47                               ld 		b,a
  78+ E7CB 7B                               ld 		a,e
  79+ E7CC DD 84                            add 	a,ixh
  80+ E7CE 4F                               ld 		c,a
  81+ E7CF CD FE E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D2 7A           .Plot7:	            ld 		a,d
  83+ E7D3 DD 85                            add 	a,ixl
  84+ E7D5 47                               ld 		b,a
  85+ E7D6 7B                               ld 		a,e
  86+ E7D7 DD 94                            sub 	ixh
  87+ E7D9 4F                               ld 		c,a
  88+ E7DA CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DD 7A           .Plot8:	            ld 		a,d
  90+ E7DE DD 95                            sub 	ixl
  91+ E7E0 47                               ld		b,a
  92+ E7E1 7B                               ld 		a,e
  93+ E7E2 DD 94                            sub 	ixh
  94+ E7E4 4F                               ld 		c,a
  95+ E7E5 CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E8 D9                               exx
  97+ E7E9 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7EB 28 03                            jr z,   .draw_circle_1
  99+ E7ED 19                               add hl,de			; Delta=Delta+D1
 100+ E7EE 18 05                            jr      .draw_circle_2		;
 101+ E7F0 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F1 03                               inc     bc
 103+ E7F2 03                               inc     bc				; D2=D2+2
 104+ E7F3 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F5 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F6 03                               inc bc
 107+ E7F7 13                               inc de				; D1=D1+2
 108+ E7F8 13                               inc de
 109+ E7F9 DD 2C                            inc ixl				; X=X+1
 110+ E7FB C3 87 E7                         jp      .CircleLoop
 111+ E7FE 3A 53 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E801 D5 C5 E5                         push	de,,bc,,hl
 113+ E804 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E807 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80A C9                               ret
 116+ E80B 7B           CircleSinglepixel:  ld		a,e
 117+ E80C CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80F C9                               ret
 119+ E810
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1000  E810                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E810
   2+ E810 00           l2_circle_dblx		DB 0
   3+ E811 00           l2_circle_dbly		DB 0
   4+ E812
   5+ E812              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E812 7B           l2_draw_circle_fill:    ld		a,e
   7+ E813 32 A9 E8                             ld		(.LineColour+1),a
   8+ E816 7A                                   ld		a,d								; get radius
   9+ E817 A7                                   and		a
  10+ E818 C8                                   ret		z
  11+ E819 FE 01                                cp		1
  12+ E81B CA 0B E8                             jp		z,CircleSinglepixel
  13+ E81E ED 43 48 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E822 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E824 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E827 26 00        .calcd:	                ld		h,0
  17+ E829 6F                                   ld		l,a
  18+ E82A 29                                   add		hl,hl							; hl = r * 2
  19+ E82B EB                                   ex		de,hl							; de = r * 2
  20+ E82C 21 03 00                             ld		hl,3
  21+ E82F A7                                   and		a
  22+ E830 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E832 44                                   ld		b,h
  24+ E833 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E834 21 01 00     .calcdelta              ld		hl,1
  26+ E837 16 00                                ld		d,0
  27+ E839 DD 5D                                ld		e,ixl
  28+ E83B A7                                   and		a
  29+ E83C ED 52                                sbc		hl,de
  30+ E83E 11 01 00     .Setde1	                ld		de,1
  31+ E841 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E843 DD BD                                cp		ixl
  33+ E845 D8                                   ret		c
  34+ E846 D9           .ProcessLoop:	        exx
  35+ E847 11 00 00     .Line1:                 ld		de,0
  36+ E84A 7B                                   ld 		a,e
  37+ E84B DD 95                                sub 	ixl
  38+ E84D 4F                                   ld 		c,a
  39+ E84E 7A                                   ld 		a,d
  40+ E84F DD 84                                add 	a,ixh
  41+ E851 47                                   ld		b,a
  42+ E852                                      ;; TODO ADD DOUBLE X CALC
  43+ E852 D5                                   push	de
  44+ E853 DD 55                                ld		d,ixl
  45+ E855 CB 22                                sla		d
  46+ E857 CD A4 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85A D1                                   pop		de
  48+ E85B 7B           .Line2:                 ld 		a,e
  49+ E85C DD 95                                sub		ixl
  50+ E85E 4F                                   ld 		c,a
  51+ E85F 7A                                   ld 		a,d
  52+ E860 DD 94                                sub 	ixh
  53+ E862 47                                   ld 		b,a
  54+ E863                                      ;; TODO ADD DOUBLE X CALC
  55+ E863 D5                                   push	de
  56+ E864 DD 55                                ld		d,ixl
  57+ E866 CB 22                                sla		d
  58+ E868 CD A4 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86B D1                                   pop		de
  60+ E86C 7B           .Line3:	                ld 		a,e
  61+ E86D DD 94                                sub		ixh
  62+ E86F 4F                                   ld 		c,a
  63+ E870 7A                                   ld 		a,d
  64+ E871 DD 85                                add 	a,ixl
  65+ E873 47                                   ld 		b,a
  66+ E874                                      ;; TODO ADD DOUBLE Y CALC
  67+ E874 D5                                   push	de
  68+ E875 DD 54                                ld		d,ixh
  69+ E877 CB 22                                sla		d
  70+ E879 CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87C D1                                   pop		de
  72+ E87D 7B           .Line4:	                ld 		a,e
  73+ E87E DD 94                                sub		ixh
  74+ E880 4F                                   ld 		c,a
  75+ E881 7A                                   ld 		a,d
  76+ E882 DD 95                                sub 	ixl
  77+ E884 47                                   ld 		b,a
  78+ E885                                      ;; TODO ADD DOUBLE Y CALC
  79+ E885 D5                                   push	de
  80+ E886 DD 54                                ld		d,ixh
  81+ E888 CB 22                                sla		d
  82+ E88A CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88D D1                                   pop		de
  84+ E88E D9                                   exx
  85+ E88F CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E891 28 03                                jr z,.draw_circle_1
  87+ E893 19                                   add hl,de			; Delta=Delta+D1
  88+ E894 18 05                                jr .draw_circle_2		;
  89+ E896 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E897 03                                   inc bc
  91+ E898 03                                   inc bc				; D2=D2+2
  92+ E899 DD 25                                dec ixh				; Y=Y-1
  93+ E89B 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89C 03                                   inc bc
  95+ E89D 13                                   inc de				; D1=D1+2
  96+ E89E 13                                   inc de
  97+ E89F DD 2C                                inc ixl				; X=X+1
  98+ E8A1 C3 41 E8                             jp .CircleLoop
  99+ E8A4 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A8 3A 53 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AB 5F                                   ld      e,a
 102+ E8AC CD 62 E2                             call 	l2_draw_horz_line
 103+ E8AF F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B3 C9                                   ret
 105+ E8B4
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1001  E8B4                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B4              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B4 08           l2_draw_any_line:       ex		af,af'
   3+ E8B5 79                                   ld		a,c
   4+ E8B6 BB                                   cp		e
   5+ E8B7 28 08                                jr		z,.HorizontalLine
   6+ E8B9 78                                   ld		a,b
   7+ E8BA BA                                   cp		d
   8+ E8BB 28 0A                                jr		z,.VerticalLine
   9+ E8BD              ; use jp and get a free ret instruction optimisation
  10+ E8BD 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BE C3 0B E6                             jp		l2_draw_diagonal
  12+ E8C1
  13+ E8C1 08           .HorizontalLine:        ex		af,af'
  14+ E8C2 53                                   ld		d,e				; set d as target right pixel
  15+ E8C3 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C4 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C7 08           .VerticalLine:          ex		af,af'
  18+ E8C8 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C9 C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CC
  21+ E8CC
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1002  E8CC                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CC              ; ClearLines (LL155)
   2+ E8CC              ;   y = 0
   3+ E8CC              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CC              ;   exit if XX20 < 4
   5+ E8CC              ;   ++y
   6+ E8CC              ;   do
   7+ E8CC              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CC              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CC              ;		++y
  10+ E8CC              ;	until Y > XX20
  11+ E8CC
  12+ E8CC              clearLines:
  13+ E8CC              layer2_clearLines:
  14+ E8CC 3A F1 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CF 47                                   ld		b,a
  16+ E8D0 21 FF C1                             ld		hl,UbnkLineArray
  17+ E8D3 C5           clearLinesLoop:         push	bc
  18+ E8D4 7E                                   ld		a,(hl)
  19+ E8D5 23                                   inc		hl
  20+ E8D6 4F                                   ld		c,a
  21+ E8D7 7E                                   ld		a,(hl)
  22+ E8D8 23                                   inc		hl
  23+ E8D9 47                                   ld		b,a
  24+ E8DA 7E                                   ld		a,(hl)
  25+ E8DB 23                                   inc		hl
  26+ E8DC 5F                                   ld		e,a
  27+ E8DD 7E                                   ld		a,(hl)
  28+ E8DE 23                                   inc		hl
  29+ E8DF 57                                   ld		d,a
  30+ E8E0 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E2 E5                                   push	hl
  32+ E8E3 CD B4 E8                             call    l2_draw_any_line
  33+ E8E6 E1                                   pop		hl
  34+ E8E7 C1                                   pop		bc
  35+ E8E8 10 E9                                djnz	clearLinesLoop
  36+ E8EA C9                                   ret
  37+ E8EB
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1003  E8EB                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8EB              ; ******************************************************************************
   2+ E8EB              ;
   3+ E8EB              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8EB              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8EB              ;
   6+ E8EB              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8EB              ;
   8+ E8EB              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8EB              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8EB              ;	before using line drawing.
  11+ E8EB              ;
  12+ E8EB              ;	The routine checks the range of specified coordinates which is the
  13+ E8EB              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8EB              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8EB              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8EB              ;	visible part will be drawn.
  17+ E8EB              ;
  18+ E8EB              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8EB              ;
  20+ E8EB              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8EB              ;
  22+ E8EB              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8EB              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8EB              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8EB              ;
  26+ E8EB              ;	OUT:	None.
  27+ E8EB              ;
  28+ E8EB              ;	Registers	used	by routine:
  29+ E8EB              ;		   N	:	B, loop counter
  30+ E8EB              ;		   i	:	line	balance variable
  31+ E8EB              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8EB              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8EB              ;	  (x0,y0)	:	(h,l)
  34+ E8EB              ;	  direc_x	:	d, horisontal step increment
  35+ E8EB              ;	  direc_y	:	e, vertical step increment
  36+ E8EB              ;		 ddx	:	b, horisontal step increment
  37+ E8EB              ;		 ddy	:	c, vertical step increment
  38+ E8EB              ;
  39+ E8EB              ;		DE, A work registers.
  40+ E8EB              ;
  41+ E8EB              ; The algorithm in pseudo-code:
  42+ E8EB              ;
  43+ E8EB              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8EB              ;	x = ABS x: y =	ABS y
  45+ E8EB              ;
  46+ E8EB              ;	if x	>= y
  47+ E8EB              ;		if x+y=0 then return
  48+ E8EB              ;		H = x
  49+ E8EB              ;		L = y
  50+ E8EB              ;		ddx = direc_x
  51+ E8EB              ;		ddy = 0
  52+ E8EB              ;	else
  53+ E8EB              ;		H = y
  54+ E8EB              ;		L = x
  55+ E8EB              ;		ddx = 0
  56+ E8EB              ;		ddy = direc_y
  57+ E8EB              ;	endif
  58+ E8EB              ;
  59+ E8EB              ;	B = H
  60+ E8EB              ;	i = INT(B/2)
  61+ E8EB              ;	FOR N=B TO 1 STEP -1
  62+ E8EB              ;		i = i + L
  63+ E8EB              ;		if i	< H
  64+ E8EB              ;			ix =	ddx
  65+ E8EB              ;			iy =	ddy
  66+ E8EB              ;		else
  67+ E8EB              ;			i = i - H
  68+ E8EB              ;			ix =	direc_x
  69+ E8EB              ;			iy =	direc_y
  70+ E8EB              ;		endif
  71+ E8EB              ;		x0 =	x0 +	ix
  72+ E8EB              ;		y0 =	y0 +	iy
  73+ E8EB              ;		plot	(x0,y0)
  74+ E8EB              ;	NEXT	N
  75+ E8EB              ;
  76+ E8EB              ;
  77+ E8EB              ;	Registers	changed after return:
  78+ E8EB              ;		..BCDEHL/IXIY/af......	same
  79+ E8EB              ;		AF....../..../..bcdehl	different
  80+ E8EB              ;
  81+ E8EB DF           line_gfx_colour db $DF
  82+ E8EC 00 00        line_gfx_coords	dw 0
  83+ E8EE              LineHLtoDE:
  84+ E8EE 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8EF FE C0                                cp	192
  86+ E8F1 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F3 7A                                   ld	a,d
  88+ E8F4 FE C0                                cp	192
  89+ E8F6 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F8 22 EC E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FB E5                                   push	hl
  92+ E8FC D5                                   push	de
  93+ E8FD 6C                                   ld	l,h				; L = x0
  94+ E8FE 62                                   ld	h,d				; H = x1
  95+ E8FF 7C           distanceX:		        ld	a,h
  96+ E900 95                                   sub	l
  97+ E901 6F                                   ld	l,a
  98+ E902 26 00                                ld	h,0
  99+ E904 30 02                                jr	nc, distanceXDone
 100+ E906 26 FF                                ld	h,-1
 101+ E908 D1           distanceXDone:          pop	de
 102+ E909 E3                                   ex	(sp),hl			; L = y0
 103+ E90A 63                                   ld	h,e				; H = y1
 104+ E90B 7C           distanceY:		        ld	a,h
 105+ E90C 95                                   sub	l
 106+ E90D 6F                                   ld	l,a
 107+ E90E 26 00                                ld	h,0
 108+ E910 30 02                                jr	nc, distanceYDone
 109+ E912 26 FF                                ld	h,-1
 110+ E914 D1           distanceYDone:          pop	de
 111+ E915 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E916 CD 1A E9                             call	DrawLineRelative			; draw line...
 113+ E919 C9           exit_line:              ret
 114+ E91A
 115+ E91A              ; ***************************************************************************
 116+ E91A              ;
 117+ E91A              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91A              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91A              ;
 120+ E91A              ; OUT: h - l distance in	HL
 121+ E91A              ;
 122+ E91A
 123+ E91A D5           DrawLineRelative:       push	de
 124+ E91B E5                                   push	hl
 125+ E91C D9                                   exx
 126+ E91D E1                                   pop	hl					; get relative	horisontal movement
 127+ E91E CD 89 E9                             call	sgn
 128+ E921 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E922 CD 96 E9                             call	absValue
 130+ E925 45                                   ld	b,l					; x = ABS(x)
 131+ E926 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E927 CD 89 E9                             call	sgn
 133+ E92A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92B CD 96 E9                             call	absValue
 135+ E92E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92F C5                                   push	bc
 138+ E930 D9                                   exx
 139+ E931 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E932 7C                                   ld	a,h
 141+ E933 BD                                   cp	l
 142+ E934 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E936 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E937 28 4F                                jr	z, exit_draw		;		return
 145+ E939 D9           y_lessorequal_x:        exx						;	else
 146+ E93A 42                                   ld	b,d					;		ddx = direc_x
 147+ E93B 0E 00                                ld	c,0					;		ddy = 0
 148+ E93D D9                                   exx
 149+ E93E 18 08                                jr	init_drawloop		; else
 150+ E940 7C           x_smaller_y:	        ld	a,h
 151+ E941 65                                   ld	h,l					;	H = y
 152+ E942 6F                                   ld	l,a					;	L = x
 153+ E943 D9                                   exx
 154+ E944 06 00                                ld	b,0					;	ddx = 0
 155+ E946 4B                                   ld	c,e					;	ddy = direc_y
 156+ E947 D9                                   exx
 157+ E948 44           init_drawloop:	        ld	b,h
 158+ E949 4C                                   ld	c,h					; B = H
 159+ E94A CB 39                                srl	c					; i = INT(B/2)
 160+ E94C              										; FOR N=B	TO 1	STEP	-1
 161+ E94C 79           drawloop:		        ld	a,c
 162+ E94D 85                                   add	a,l
 163+ E94E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E950 BC                                   cp	h
 165+ E951 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E953 4F                                   ld	c,a					;		i = i + L
 167+ E954 D9                                   exx
 168+ E955 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E956 D9                                   exx
 170+ E957 18 05                                jr	check_plot			;	else
 171+ E959 94           i_greater:		        sub	h					;		i = i - H
 172+ E95A 4F                                   ld	c,a
 173+ E95B D9                                   exx
 174+ E95C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95D D9                                   exx						;	endif
 176+ E95E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E960 2A EC E8                             ld	hl,(line_gfx_coords)
 179+ E963 7D                                   ld	a,l
 180+ E964 83                                   add	a,e					;
 181+ E965 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E966 7A                                   ld	a,d
 183+ E967 3C                                   inc	a
 184+ E968 84                                   add	a,h
 185+ E969 38 04                                jr	c, check_range		;	check out	of range
 186+ E96B 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96D 18 02                                jr	plot_point
 188+ E96F 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E971
 190+ E971 3D           plot_point:             dec	a
 191+ E972 C5                                   push	bc
 192+ E973 F5                                   push	af
 193+ E974 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E975 4D                                   ld		c,l
 195+ E976 3A EB E8                             ld		a,(line_gfx_colour)
 196+ E979 ED 43 EC E8                          ld      (line_gfx_coords),bc
 197+ E97D CD FF E0                             call	l2_plot_pixel
 197+ E980
 198+ E980 F1                                   pop		af
 199+ E981 C1                                   pop		bc
 200+ E982 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E983 10 C7                                djnz	drawloop		; NEXT N
 202+ E985 18 01                                jr	exit_draw
 203+ E987
 204+ E987 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E988 C9           exit_draw:		        ret
 206+ E989
 207+ E989
 208+ E989              ; ******************************************************************************
 209+ E989              ;
 210+ E989              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E989              ;
 212+ E989              ;	IN:		HL =	integer
 213+ E989              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E989              ;
 215+ E989              ;	Registers	changed after return:
 216+ E989              ;	..BCDEHL/IXIY	same
 217+ E989              ;	AF....../....	different
 218+ E989              ;
 219+ E989 7C           sgn:				    ld	a,h
 220+ E98A B5                                   or	l
 221+ E98B C8                                   ret	z				; integer	is zero, return 0...
 222+ E98C CB 7C                                bit	7,h
 223+ E98E 20 03                                jr	nz, negative_int
 224+ E990 3E 01                                ld	a,1
 225+ E992 C9                                   ret
 226+ E993 3E FF        negative_int:		    ld	a,-1
 227+ E995 C9                                   ret
 228+ E996
 229+ E996
 230+ E996              ; ******************************************************************************
 231+ E996              ;
 232+ E996              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E996              ;
 234+ E996              ;	IN:		HL =	integer
 235+ E996              ;	OUT:		HL =	converted	integer
 236+ E996              ;
 237+ E996              ;	Registers	changed after return:
 238+ E996              ;	A.BCDE../IXIY	same
 239+ E996              ;	.F....HL/....	different
 240+ E996              ;
 241+ E996 CB 7C        absValue:			    bit	7,h
 242+ E998 C8                                   ret	z				; integer	is positive...
 243+ E999 D5                                   push	de
 244+ E99A EB                                   ex	de,hl
 245+ E99B 21 00 00                             ld	hl,0
 246+ E99E BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99F ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A1 D1                                   pop	de
 249+ E9A2 C9                                   ret
 250+ E9A3
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1004  E9A3              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1005  E9A3                  SLOT    CMDRDATAAddr
1006  E9A3                  PAGE    BankCmdrData
1007  E9A3                  ORG     CMDRDATAAddr, BankCmdrData
1008  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 23 95     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 2F 95                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 2D 95                             ld		(PresentSystemX),a
  19+ E03A 32 7A 95                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 2E 95                             ld		(PresentSystemY),a
  22+ E042 32 7B 95                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 2A 94                             ld		hl,IndexedWork
  25+ E048 CD 9C 98                             call	copy_galaxy_to_system
  26+ E04B CD 5C 99                             call	find_present_system
  27+ E04E CD BF 98                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 29 98                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 2B 98                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 2D 98                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 36 95                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 44 98                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 4E 98                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 2C 95                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 2F 98                             ld		(LaserList+1),a
  48+ E080 32 30 98                             ld		(LaserList+2),a
  49+ E083 32 31 98                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 2E 98                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 47 98                             ld		(ECMPresent),a
  54+ E08F 32 5E 98                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 4A 98                             ld		(EnergyBomb),a
  56+ E095 32 4B 98                             ld		(ExtraEnergyUnit),a
  57+ E098 32 4C 98                             ld		(DockingComputer),a
  58+ E09B 32 4D 98                             ld		(GalacticHyperDrive),a
  59+ E09E 32 49 98                             ld		(EscapePod),a
  60+ E0A1 32 3F 95                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 52 95                             ld		(KillTally),a
  62+ E0A7 3D                                   dec		a								; now a = 255
  63+ E0A8 32 56 95                             ld		(ForeShield),a
  64+ E0AB 32 57 95                             ld		(AftShield),a
  65+ E0AE 32 58 95                             ld		(PlayerEnergy),a
  66+ E0B1 3E 14                                ld		a,20
  67+ E0B3 32 32 98                             ld		(CargoBaySize),a
  68+ E0B6 CD BA E0                             call	ZeroCargo						; Clear out cargo
  69+ E0B9                                      ; more to DO
  70+ E0B9 C9                                   ret
  71+ E0BA
# file closed: ./Commander/CommanderData.asm
1009  E0BA                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0BA              ZeroCargo:
   2+ E0BA AF           		xor		a							;zero-out cargo, including gems.
   3+ E0BB 06 10        		ld		b,16						;all the way up to alien items
   4+ E0BD 21 34 98     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C0              .ZeroLoop:
   6+ E0C0 77                   ld      (hl),a
   7+ E0C1 23           		inc		hl
   8+ E0C2 10 FC        		djnz	.ZeroLoop
   9+ E0C4 C9           		ret
  10+ E0C5
# file closed: ./Commander/zero_player_cargo.asm
1010  E0C5              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1011  E0C5                  SLOT    LAYER1Addr
1012  E0C5                  PAGE    BankLAYER1
1013  E0C5                  ORG     LAYER1Addr, BankLAYER1
1014  E000
1015  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD CC 90                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1016  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls:                 xor		a
   2+ E048 21 00 40     l1_cls_to_a:            ld		hl,	$4000
   3+ E04B 11 00 18                             ld		de, $1800
   4+ E04E CD CC 90                             call	memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_attr_cls:            xor		a
   8+ E053 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
   9+ E056 11 00 03                             ld		de, $0300
  10+ E059 CD CC 90                             call	memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  14+ E060 ED 79                                out		(c),a
  15+ E062 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1017  E063                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E063              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E063 D5 E5        l1_print_char:          push	de,,hl
   3+ E065 ED 94                                pixelad								; hl = address of de
   4+ E067 E5                                   push	hl							; save hl for loop
   5+ E068 26 00                                ld		h,0
   6+ E06A 6F                                   ld		l,a
   7+ E06B 29                                   add		hl,hl						; * 2
   8+ E06C 29                                   add		hl,hl						; * 4
   9+ E06D 29                                   add		hl,hl						; * 8 to get byte address
  10+ E06E ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E072 EB                                   ex		de,hl						; save address into de
  12+ E073 E1                                   pop		hl							; get back hl for loop
  13+ E074 06 08                                ld		b,8							; do 8 rows
  14+ E076 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E077 13                                   inc		de							; next byte
  16+ E078 77                                   ld		(hl),a						; poke to screen
  17+ E079 ED 93                                pixeldn								; Down 1 row
  18+ E07B 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E07D E1 D1                                pop		de,,hl					    ; restore hl
  20+ E07F C9                                   ret
  21+ E080
  22+ E080              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E080              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E080              l1_print_at:
  25+ E080 7E           .PrintLoop:             ld		a,(hl)
  26+ E081 FE 00                                cp		0
  27+ E083 C8                                   ret		z
  28+ E084                                      CallIfAGTENusng " ", l1_print_char
  28+ E084 FE 20       >                        cp      " "
  28+ E086 D4 63 E0    >                        call	nc,l1_print_char
  29+ E089 23                                   inc		hl							; move 1 message character right
  30+ E08A 7B                                   ld		a,e
  31+ E08B C6 08                                add		a,8
  32+ E08D 5F                                   ld		e,a							; move 1 screen character right
  33+ E08E 18 F0                                jr		.PrintLoop
  34+ E090              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E090 C9                                   ret
  36+ E091
  37+ E091              ;l1_print_at_wrap:
  38+ E091              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E091              ;	ld      iyh,e
  40+ E091              ;.PrintLoop:
  41+ E091              ;	ld		a,(hl)
  42+ E091              ;	cp		0
  43+ E091              ;	ret		z
  44+ E091              ;.CountWordCharLen
  45+ E091              ;; Need to change to word wrap, so it will loop through string as before
  46+ E091              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E091              ;; if that is > 238 then force a premature line wrap
  48+ E091              ;
  49+ E091              ;
  50+ E091              ;    push    iy
  51+ E091              ;    call	l1_print_char
  52+ E091              ;    pop     iy
  53+ E091              ;	inc		hl							; move 1 message character right
  54+ E091              ;	ld		a,e
  55+ E091              ;    cp      238
  56+ E091              ;    jr      nc,.NextLine
  57+ E091              ;	add		a,8
  58+ E091              ;	ld		e,a							; move 1 screen character right
  59+ E091              ;	jr		.PrintLoop
  60+ E091              ;.Clearstackandfinish:
  61+ E091              ;	pop		de
  62+ E091              ;	ret
  63+ E091              ;.NextLine:
  64+ E091              ;    ld      a,(hl)
  65+ E091              ;    cp      " "
  66+ E091              ;    ld      e,iyh
  67+ E091              ;    ld      a,d
  68+ E091              ;    add     a,8
  69+ E091              ;    ld      d,a
  70+ E091              ;    jr		.PrintLoop
  71+ E091
  72+ E091              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E091 E5           L1LenWordAtHL:          push    hl
  74+ E092 D5                                   push    de
  75+ E093 7E           .CountLoop:             ld      a,(hl)
  76+ E094 FE 00                                cp      0
  77+ E096 28 0F                                jr      z,.CountDone
  78+ E098 FE 20                                cp      32
  79+ E09A 28 0B                                jr      z,.CountDone
  80+ E09C 7B                                   ld      a,e
  81+ E09D C6 08                                add     a,8
  82+ E09F 5F                                   ld      e,a
  83+ E0A0 FE EE                                cp      238
  84+ E0A2 30 07                                jr      nc,.TooLong
  85+ E0A4 23                                   inc     hl
  86+ E0A5 18 EC                                jr      .CountLoop
  87+ E0A7 D1           .CountDone:             pop     de
  88+ E0A8 E1                                   pop     hl
  89+ E0A9 AF                                   xor     a
  90+ E0AA C9                                   ret
  91+ E0AB D1           .TooLong                pop     de
  92+ E0AC E1                                   pop     hl
  93+ E0AD 3E FF                                ld      a,$FF
  94+ E0AF C9                                   ret
  95+ E0B0
  96+ E0B0 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0B1 FE 00                                cp      0
  98+ E0B3 C8                                   ret     z
  99+ E0B4 FE 20                                cp      32
 100+ E0B6 28 0F                                jr      z,.ItsASpace
 101+ E0B8 FD E5                                push    iy
 102+ E0BA CD 63 E0                             call	l1_print_char
 103+ E0BD FD E1                                pop     iy
 104+ E0BF 7B                                   ld      a,e
 105+ E0C0 C6 08                                add     a,8
 106+ E0C2 5F                                   ld      e,a
 107+ E0C3 23                                   inc     hl
 108+ E0C4 C3 B0 E0                             jp      L1PrintWordAtHL
 109+ E0C7 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0C8 7B                                   ld      a,e
 111+ E0C9 C6 08                                add     a,8
 112+ E0CB 5F                                   ld      e,a
 113+ E0CC C9                                   ret
 114+ E0CD
 115+ E0CD
 116+ E0CD              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E0CD              ; Now has full word level wrapping
 118+ E0CD FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E0CF 7E           .PrintLoop:             ld		a,(hl)
 120+ E0D0 FE 00                                cp		0
 121+ E0D2 C8                                   ret		z
 122+ E0D3 CD 91 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E0D6 FE FF                                cp      $FF
 124+ E0D8 28 06                                jr      z,.WrapNextLine
 125+ E0DA CD B0 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E0DD              ; Need to change to word wrap, so it will loop through string as before
 127+ E0DD              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E0DD              ; if that is > 238 then force a premature line wrap
 129+ E0DD 18 F0                                jr		.PrintLoop
 130+ E0DF              .Clearstackandfinish:   ;op		de
 131+ E0DF C9                                   ret
 132+ E0E0              .WrapNextLine:
 133+ E0E0 FD 5C        .NextLine:              ld      e,iyh
 134+ E0E2 7A                                   ld      a,d
 135+ E0E3 C6 08                                add     a,8
 136+ E0E5 57                                   ld      d,a
 137+ E0E6 18 E7                                jr		.PrintLoop
 138+ E0E8
 139+ E0E8
# file closed: ./Layer1Graphics/layer1_print_at.asm
1018  E0E8              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1019  E0E8              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1020  E0E8              ; as the is aligned and data tables are after that
1021  E0E8              ; need to make the ship index tables same size in each to simplify further
1022  E0E8                  SLOT    ShipModelsAddr
1023  E0E8                  PAGE    BankShipModels1
1024  E0E8              	ORG     ShipModelsAddr, BankShipModels1
1025  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyShipIdToUniverse:  MACRO
  96+ E000 ~                                    call        GetShipModelId
  97+ E000 ~                                    MMUSelectShipBankA
  98+ E000 ~                                    ld          a,b
  99+ E000 ~                                    jp          CopyShipToUniverse
 100+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1026  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1027  E00F              GetShipBankId:
1028  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1028  E00F 06 00       >                        ld      b,0
1028  E011 4F          >                        ld      c,a                                 ; c= original ship id
1028  E012 CB 3F       >.ShiftLoop:             srl     a
1028  E014 CB 3F       >                        srl     a
1028  E016 CB 3F       >                        srl     a
1028  E018 CB 3F       >                        srl     a                                   ; divide by 16
1028  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1028  E01B 79          >                        ld      a,c
1028  E01C 50          >                        ld      d,b
1028  E01D 1E 10       >                        ld      e,16
1028  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1028  E021 93          >                        sub     e                                   ; a= actual model id now
1028  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1028  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1028  E024 7A          >                        ld      a,d                                 ; a = bank number
1028  E025             >;.. Now b = bank and a = adjusted ship nbr
1028  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1028  E028 ED 31       >                        add     hl,a
1028  E02A ED 31       >                        add     hl,a
1028  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1028  E02D             >                        ClearCarryFlag
1028  E02D B7          >                        or a
1028  E02E C9          >                        ret
1029  E02F              CopyVertsToUniv:
1030  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1030  E02F 2A 13 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1030  E032 11 17 C3    >                        ld          de,UBnkHullVerticies
1030  E035 06 00       >                        ld          b,0
1030  E037 3A 07 C3    >                        ld			a,(VertexCtX6Addr)
1030  E03A 4F          >                        ld          c,a
1030  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1030  E03C CD F2 90    >                        call        memcopy_dma
1030  E03F C9          >                        ret
1031  E040              CopyEdgesToUniv:
1032  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1032  E040 2A 02 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1032  E043 11 43 C4    >                        ld          de,UBnkHullEdges
1032  E046 06 00       >                        ld          b,0
1032  E048 3A 04 C3    >                        ld			a,(LineX4Addr)
1032  E04B 4F          >                        ld          c,a
1032  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1032  E04D CD F2 90    >                        call        memcopy_dma
1032  E050 C9          >                        ret
1033  E051              CopyNormsToUniv:
1034  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1034  E051 2A 0F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1034  E054 11 F3 C8    >                        ld          de,UBnkHullNormals
1034  E057 06 00       >                        ld          b,0
1034  E059 3A 0B C3    >                        ld          a,(FaceCtX4Addr)
1034  E05C 4F          >                        ld          c,a
1034  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1034  E05E CD F2 90    >                        call        memcopy_dma
1034  E061 C9          >                        ret
1035  E062              ShipBankTable:
1036  E062              ShipBankTable1:         MShipBankTable
1036  E062 3B 00       >                        DW      BankShipModels1
1036  E064 43 00       >                        DW      BankShipModels2
1036  E066 44 00       >                        DW      BankShipModels3
1036  E068 45 00       >                        DW      BankShipModels4
1037  E06A              CopyShipToUniverse:
1038  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1038  E06A 21 FD C2    >                        ld          hl,UBnkShipModelBank
1038  E06D 36 3B       >                        ld          (hl),BankShipModels1
1038  E06F 32 FE C2    >                        ld          (UBnkShipModelNbr),a
1038  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1038  E075 ED 31       >                        add         hl,a
1038  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1038  E079 4E          >                        ld          c,(hl)
1038  E07A 23          >                        inc         hl
1038  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1038  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1038  E07F ED 31       >                        add         hl,a
1038  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1038  E083 7E          >                        ld          a,(hl)
1038  E084 23          >                        inc         hl
1038  E085 66          >                        ld          h,(hl)
1038  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1038  E087 11 FF C2    >                        ld          de,UBnkHullCopy             ; Universe bank
1038  E08A 01 18 00    >                        ld          bc,ShipDataLength
1038  E08D ED B0       >                        ldir
1038  E08F CD 2F E0    >                        call        CopyVertsToUniv
1038  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1038  E095 CD 51 E0    >                        call        CopyNormsToUniv
1038  E098 C9          >                        ret
1039  E099                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E099              ShipModelTable:
   2+ E099 39 E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E09B 6D E2                                 DW Anaconda                                ;01
   4+ E09D 73 E3                                 DW Asp_Mk_2                                ;02
   5+ E09F 9D E4                                 DW Asteroid                                ;03
   6+ E0A1 77 E5                                 DW Boa                                     ;04
   7+ E0A3 6D E6                                 DW Boulder                                 ;05
   8+ E0A5 13 E7                                 DW Bushmaster                              ;06
   9+ E0A7 E3 E7                                 DW CargoType5                              ;07
  10+ E0A9 8F E8                                 DW Chameleon                               ;08
  11+ E0AB BB E9                                 DW CobraMk3                                ;09
  12+ E0AD 47 EB                                 DW Cobra_Mk_1                              ;10
  13+ E0AF 11 EC                                 DW Cobra_Mk_3_P                            ;11
  14+ E0B1 9D ED                                 DW Constrictor                             ;12
  15+ E0B3 A3 EE                                 DW Coriolis                                ;13
  16+ E0B5 C3 EF                                 DW Cougar                                  ;14
  17+ E0B7 C9 F0                                 DW Dodo                                    ;15
  18+ E0B9              ShipVertexTable:
  19+ E0B9 51 E1        ShipVertexTable1:        DW AdderVertices
  20+ E0BB 85 E2                                 DW AnacondaVertices
  21+ E0BD 8B E3                                 DW Asp_Mk_2Vertices
  22+ E0BF B5 E4                                 DW AsteroidVertices
  23+ E0C1 8F E5                                 DW BoaVertices
  24+ E0C3 85 E6                                 DW BoulderVertices
  25+ E0C5 2B E7                                 DW BushmasterVertices
  26+ E0C7 FB E7                                 DW CargoType5Vertices
  27+ E0C9 A7 E8                                 DW ChameleonVertices
  28+ E0CB D3 E9                                 DW CobraMk3Vertices
  29+ E0CD 5F EB                                 DW Cobra_Mk_1Vertices
  30+ E0CF 29 EC                                 DW Cobra_Mk_3_PVertices
  31+ E0D1 B5 ED                                 DW ConstrictorVertices
  32+ E0D3 BB EE                                 DW CoriolisVertices
  33+ E0D5 DB EF                                 DW CougarVertices
  34+ E0D7 E1 F0                                 DW DodoVertices
  35+ E0D9              ShipEdgeTable:
  36+ E0D9 BD E1        ShipEdgeTable1:          DW AdderEdges
  37+ E0DB DF E2                                 DW AnacondaEdges
  38+ E0DD FD E3                                 DW Asp_Mk_2Edges
  39+ E0DF EB E4                                 DW AsteroidEdges
  40+ E0E1 DD E5                                 DW BoaEdges
  41+ E0E3 AF E6                                 DW BoulderEdges
  42+ E0E5 73 E7                                 DW BushmasterEdges
  43+ E0E7 37 E8                                 DW CargoType5Edges
  44+ E0E9 13 E9                                 DW ChameleonEdges
  45+ E0EB 7B EA                                 DW CobraMk3Edges
  46+ E0ED A1 EB                                 DW Cobra_Mk_1Edges
  47+ E0EF D1 EC                                 DW Cobra_Mk_3_PEdges
  48+ E0F1 1B EE                                 DW ConstrictorEdges
  49+ E0F3 1B EF                                 DW CoriolisEdges
  50+ E0F5 4D F0                                 DW CougarEdges
  51+ E0F7 71 F1                                 DW DodoEdges
  52+ E0F9              ShipNormalTable:
  53+ E0F9 31 E2        ShipNormalTable1:        DW AdderNormals
  54+ E0FB 43 E3                                 DW AnacondaNormals
  55+ E0FD 6D E4                                 DW Asp_Mk_2Normals
  56+ E0FF 3F E5                                 DW AsteroidNormals
  57+ E101 3D E6                                 DW BoaNormals
  58+ E103 EB E6                                 DW BoulderNormals
  59+ E105 BF E7                                 DW BushmasterNormals
  60+ E107 73 E8                                 DW CargoType5Normals
  61+ E109 87 E9                                 DW ChameleonNormals
  62+ E10B 13 EB                                 DW CobraMk3Normals
  63+ E10D E9 EB                                 DW Cobra_Mk_1Normals
  64+ E10F 69 ED                                 DW Cobra_Mk_3_PNormals
  65+ E111 7B EE                                 DW ConstrictorNormals
  66+ E113 8B EF                                 DW CoriolisNormals
  67+ E115 B1 F0                                 DW CougarNormals
  68+ E117 F9 F1                                 DW DodoNormals
  69+ E119              ShipModelSizeTable:
  70+ E119 34 01        ShipModelSizeTable1:     DW AdderLen
  71+ E11B 06 01                                 DW AnacondaLen
  72+ E11D 2A 01                                 DW Asp_Mk_2Len
  73+ E11F DA 00                                 DW AsteroidLen
  74+ E121 F6 00                                 DW BoaLen
  75+ E123 A6 00                                 DW BoulderLen
  76+ E125 D0 00                                 DW BushmasterLen
  77+ E127 AC 00                                 DW CargoType5Len
  78+ E129 2C 01                                 DW ChameleonLen
  79+ E12B 8C 01                                 DW CobraMk3Len
  80+ E12D CA 00                                 DW Cobra_Mk_1Len
  81+ E12F 8C 01                                 DW Cobra_Mk_3_PLen
  82+ E131 06 01                                 DW ConstrictorLen
  83+ E133 20 01                                 DW CoriolisLen
  84+ E135 06 01                                 DW CougarLen
  85+ E137 60 01                                 DW DodoLen
  86+ E139
  87+ E139                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E139 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E13C BD E1                                DW AdderEdges
   3++E13E 74                                   DB AdderEdgesSize
   4++E13F 00 16                                DB $00, $16
   5++E141 6C                                   DB AdderVertSize
   6++E142 1D                                   DB AdderEdgesCnt
   7++E143 00 28                                DB $00, $28
   8++E145 3C                                   DB AdderNormalsSize
   9++E146 17 48 18                             DB $17, $48, $18
  10++E149 31 E2                                DW AdderNormals
  11++E14B 02 21                                DB $02, $21
  12++E14D 51 E1                                DW AdderVertices
  13++E14F 00 00                                DB 0,0                      ; Type and Tactics
  14++E151 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E155 01 BC
  15++E157 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E15B 01 23
  16++E15D 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E161 23 45
  17++E163 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E167 45 66
  18++E169 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E16D 56 7E
  19++E16F 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E173 78 AE
  20++E175 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E179 89 AA
  21++E17B 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E17F 9A BC
  22++E181 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E185 78 9D
  23++E187 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E18B 46 7D
  24++E18D 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E191 09 BD
  25++E193 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E197 02 4D
  26++E199 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E19D 1A CE
  27++E19F 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E1A3 13 5E
  28++E1A5 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E1A9 00 00
  29++E1AB 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1AF 00 00
  30++E1B1 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1B5 00 00
  31++E1B7 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1BB 00 00
  32++E1BD              AdderVertSize:          equ $ - AdderVertices
  33++E1BD 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1C1 07 23 04 08                          DB $07, $23, $04, $08
  35++E1C5 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1C9 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1CD 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1D1 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1D5 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1D9 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1DD 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E1E1 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E1E5 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E1E9 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E1ED 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E1F1 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E1F5 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E1F9 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E1FD 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E201 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E205 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E209 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E20D 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E211 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E215 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E219 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E21D 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E221 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E225 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E229 04 00 40 44                          DB $04, $00, $40, $44
  61++E22D 03 00 44 38                          DB $03, $00, $44, $38
  62++E231              AdderEdgesSize:         equ $ - AdderEdges
  63++E231              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E231 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E235 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E239 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E23D 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E241 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E245 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E249 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E24D 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E251 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E255 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E259 DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E25D 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E261 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E265 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E269 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E26D
  80++E26D              AdderNormalsSize:       equ $ - AdderNormals
  81++E26D              AdderLen:                equ $ - Adder
  82++E26D
# file closed: ./Data/Ships/Adder.asm
  88+ E26D                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E26D 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E270 DF E2                                DW AnacondaEdges
   3++E272 64                                   DB AnacondaEdgesSize
   4++E273 30 2E                                DB $30, $2E
   5++E275 5A                                   DB AnacondaVertSize
   6++E276 19                                   DB AnacondaEdgesCnt
   7++E277 00 00                                DB $00, $00
   8++E279 30                                   DB AnacondaNormalsSize
   9++E27A 24 FC 0E                             DB $24, $FC, $0E
  10++E27D 43 E3                                DW AnacondaNormals
  11++E27F 01 3F                                DB $01, $3F
  12++E281 85 E2                                DW AnacondaVertices
  13++E283 00 00                                DB 0,0                      ; Type and Tactics
  14++E285 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E289 01 55
  15++E28B 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E28F 01 22
  16++E291 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E295 02 33
  17++E297 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E29B 03 44
  18++E29D 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E2A1 04 55
  19++E2A3 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E2A7 15 66
  20++E2A9 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2AD 12 77
  21++E2AF 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2B3 23 88
  22++E2B5 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2B9 34 99
  23++E2BB 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2BF 45 AA
  24++E2C1 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2C5 FF FF
  25++E2C7 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2CB 27 88
  26++E2CD 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2D1 FF FF
  27++E2D3 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2D7 49 AA
  28++E2D9 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2DD FF FF
  29++E2DF              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2DF 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E2E3 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E2E7 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E2EB 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E2EF 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E2F3 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E2F7 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E2FB 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E2FF 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E303 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E307 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E30B 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E30F 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E313 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E317 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E31B 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E31F 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E323 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E327 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E32B 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E32F 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E333 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E337 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E33B 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E33F 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E343              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E343              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E343 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E347 BE 33 12 57                          DB $BE, $33, $12, $57
  59++E34B FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E34F 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E353 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E357 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E35B 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E35F 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E363 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E367 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E36B 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E36F 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E373              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E373              AnacondaLen:            equ $ - Anaconda
  71++E373
# file closed: ./Data/Ships/Anaconda.asm
  89+ E373                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E373 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E376 FD E3                                DW Asp_Mk_2Edges
   3++E378 70                                   DB Asp_Mk_2EdgesSize
   4++E379 20 1A                                DB $20, $1A
   5++E37B 72                                   DB Asp_Mk_2VertSize
   6++E37C 1C                                   DB Asp_Mk_2EdgesCnt
   7++E37D 00 C8                                DB $00, $C8
   8++E37F 30                                   DB Asp_Mk_2NormalsSize
   9++E380 28 96 28                             DB $28, $96, $28
  10++E383 6D E4                                DW Asp_Mk_2Normals
  11++E385 01 29                                DB $01, $29
  12++E387 8B E3                                DW Asp_Mk_2Vertices
  13++E389 00 00                                DB 0,0                      ; Type and Tactics
  14++E38B 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E38F 01 22
  15++E391 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E395 12 BB
  16++E397 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E39B 16 BB
  17++E39D 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E3A1 16 79
  18++E3A3 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E3A7 01 77
  19++E3A9 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3AD 25 BB
  20++E3AF 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3B3 25 8A
  21++E3B5 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3B9 02 88
  22++E3BB 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3BF 04 79
  23++E3C1 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3C5 04 8A
  24++E3C7 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3CB 34 69
  25++E3CD 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3D1 34 5A
  26++E3D3 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3D7 35 6B
  27++E3D9 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3DD BB BB
  28++E3DF 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E3E3 BB BB
  29++E3E5 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E3E9 BB BB
  30++E3EB 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E3EF BB BB
  31++E3F1 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E3F5 04 04
  32++E3F7 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E3FB 04 04
  33++E3FD              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E3FD 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E401 16 01 00 10                          DB $16, $01, $00, $10
  36++E405 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E409 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E40D 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E411 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E415 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E419 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E41D 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E421 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E425 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E429 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E42D 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E431 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E435 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E439 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E43D 16 36 28 30                          DB $16, $36, $28, $30
  51++E441 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E445 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E449 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E44D 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E451 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E455 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E459 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E45D 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E461 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E465 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E469 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E46D              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E46D              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E46D 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E471 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E475 FF 08 26 07                          DB $FF, $08, $26, $07
  67++E479 36 00 18 01                          DB $36, $00, $18, $01
  68++E47D 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E481 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E485 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E489 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E48D DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E491 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E495 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E499 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E49D              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E49D              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E49D
# file closed: ./Data/Ships/Asp_Mk_2.asm
  90+ E49D                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E49D 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E4A0 EB E4                                DW AsteroidEdges
   3++E4A2 54                                   DB AsteroidEdgesSize
   4++E4A3 00 22                                DB $00, $22
   5++E4A5 36                                   DB AsteroidVertSize
   6++E4A6 15                                   DB AsteroidEdgesCnt
   7++E4A7 00 05                                DB $00, $05
   8++E4A9 38                                   DB AsteroidNormalsSize
   9++E4AA 32 3C 1E                             DB $32, $3C, $1E
  10++E4AD 3F E5                                DW AsteroidNormals
  11++E4AF 01 00                                DB $01, $00
  12++E4B1 B5 E4                                DW AsteroidVertices
  13++E4B3 00 00                                DB 0,0                      ; Type and Tactics
  14++E4B5 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E4B9 FF FF
  15++E4BB 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E4BF FF FF
  16++E4C1 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E4C5 FF FF
  17++E4C7 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E4CB FF FF
  18++E4CD 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E4D1 65 DC
  19++E4D3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E4D7 FF FF
  20++E4D9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E4DD 10 32
  21++E4DF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E4E3 FF FF
  22++E4E5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E4E9 98 BA
  23++E4EB              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E4EB 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E4EF 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E4F3 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E4F7 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E4FB 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E4FF 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E503 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E507 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E50B 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E50F 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E513 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E517 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E51B 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E51F 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E523 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E527 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E52B 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E52F 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E533 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E537 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E53B 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E53F
  46++E53F              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E53F              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E53F 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E543 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E547 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E54B DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E54F 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E553 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E557 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E55B BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E55F FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E563 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E567 FF 46 50 28                          DB $FF, $46, $50, $28
  59++E56B 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E56F 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E573 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E577              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E577              AsteroidLen:            equ $ - Asteroid
  64++E577
# file closed: ./Data/Ships/Asteroid.asm
  91+ E577                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E577 05 13 24     Boa:	                DB $05, $13, $24
   2++E57A DD E5                                DW BoaEdges
   3++E57C 60                                   DB BoaEdgesSize
   4++E57D 00 26                                DB $00, $26
   5++E57F 4E                                   DB BoaVertSize
   6++E580 18                                   DB BoaEdgesCnt
   7++E581 00 00                                DB $00, $00
   8++E583 30                                   DB BoaNormalsSize
   9++E584 28 FA 18                             DB $28, $FA, $18
  10++E587 3D E6                                DW BoaNormals
  11++E589 00 1C                                DB $00, $1C
  12++E58B 8F E5                                DW BoaVertices
  13++E58D 00 00                                DB 0,0                      ; Type and Tactics
  14++E58F 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E593 FF FF
  15++E595 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E599 02 33
  16++E59B 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E59F 01 44
  17++E5A1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E5A5 12 55
  18++E5A7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E5AB 23 69
  19++E5AD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E5B1 03 6B
  20++E5B3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E5B7 04 8B
  21++E5B9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E5BD 14 8A
  22++E5BF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E5C3 15 7A
  23++E5C5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E5C9 25 79
  24++E5CB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E5CF 02 AA
  25++E5D1 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E5D5 01 AA
  26++E5D7 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E5DB 12 CC
  27++E5DD              BoaVertSize:            equ $ - BoaVertices
  28++E5DD 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E5E1 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E5E5 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E5E9 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E5ED 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E5F1 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E5F5 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E5F9 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E5FD 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E601 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E605 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E609 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E60D 18 23 04 10                          DB $18, $23, $04, $10
  41++E611 18 03 04 14                          DB $18, $03, $04, $14
  42++E615 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E619 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E61D 18 04 08 18                          DB $18, $04, $08, $18
  45++E621 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E625 16 02 04 28                          DB $16, $02, $04, $28
  47++E629 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E62D 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E631 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E635 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E639 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E63D              BoaEdgesSize:           equ $ - BoaEdges
  53++E63D              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E63D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E641 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E645 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E649 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E64D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E651 FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E655 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E659 DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E65D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E661 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E665 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E669 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E66D              BoaNormalsSize:         equ $ - BoaNormals
  67++E66D              BoaLen:                 equ $ - Boa
  68++E66D
# file closed: ./Data/Ships/Boa.asm
  92+ E66D                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E66D 00 03 84     Boulder:	            DB $00, $03, $84
   2++E670 AF E6                                DW BoulderEdges
   3++E672 3C                                   DB BoulderEdgesSize
   4++E673 00 0E                                DB $00, $0E
   5++E675 2A                                   DB BoulderVertSize
   6++E676 0F                                   DB BoulderEdgesCnt
   7++E677 00 01                                DB $00, $01
   8++E679 28                                   DB BoulderNormalsSize
   9++E67A 14 14 1E                             DB $14, $14, $1E
  10++E67D EB E6                                DW BoulderNormals
  11++E67F 02 00                                DB $02, $00
  12++E681 85 E6                                DW BoulderVertices
  13++E683 00 00                                DB 0,0                      ; Type and Tactics
  14++E685 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E689 01 59
  15++E68B 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E68F 12 56
  16++E691 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E695 23 67
  17++E697 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E69B 34 78
  18++E69D 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E6A1 04 89
  19++E6A3 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E6A7 FF FF
  20++E6A9 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E6AD FF FF
  21++E6AF              BoulderVertSize:        equ $ - BoulderVertices
  22++E6AF 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E6B3 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E6B7 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E6BB 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E6BF 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E6C3 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E6C7 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6CB 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6CF 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6D3 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6D7 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6DB 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6DF 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E6E3 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E6E7 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E6EB              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E6EB              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E6EB DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E6EF 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E6F3 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E6F7 FF 03 27 07                          DB $FF, $03, $27, $07
  43++E6FB FF 05 04 01                          DB $FF, $05, $04, $01
  44++E6FF 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E703 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E707 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E70B 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E70F 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E713              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E713              BoulderLen:             equ $ - Boulder
  51++E713
# file closed: ./Data/Ships/Boulder.asm
  93+ E713                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E713 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E716 73 E7                                DW BushmasterEdges
   3++E718 4C                                   DB BushmasterEdgesSize
   4++E719 00 1E                                DB $00, $1E
   5++E71B 48                                   DB BushmasterVertSize
   6++E71C 13                                   DB BushmasterEdgesCnt
   7++E71D 00 96                                DB $00, $96
   8++E71F 24                                   DB BushmasterNormalsSize
   9++E720 14 4A 23                             DB $14, $4A, $23
  10++E723 BF E7                                DW BushmasterNormals
  11++E725 02 21                                DB $02, $21
  12++E727 2B E7                                DW BushmasterVertices
  13++E729 00 00                                DB 0,0                      ; Type and Tactics
  14++E72B 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E72F 23 01
  15++E731 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E735 57 13
  16++E737 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E73B 46 02
  17++E73D 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E741 45 01
  18++E743 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E747 FF FF
  19++E749 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E74D 88 45
  20++E74F 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E753 88 57
  21++E755 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E759 88 46
  22++E75B 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E75F 88 88
  23++E761 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E765 88 88
  24++E767 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E76B 88 88
  25++E76D 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E771 88 88
  26++E773              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E773 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E777 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E77B 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E77F 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E783 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E787 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E78B 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E78F 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E793 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E797 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E79B 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E79F 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E7A3 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E7A7 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E7AB 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E7AF 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E7B3 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E7B7 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E7BB 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E7BF              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E7BF              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E7BF 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E7C3 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E7C7 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E7CB 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E7CF BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E7D3 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E7D7 FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E7DB 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E7DF 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E7E3              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E7E3              BushmasterLen:          equ $ - Bushmaster
  59++E7E3
# file closed: ./Data/Ships/Bushmaster.asm
  94+ E7E3                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E7E3              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E7E3              ; Corrected pointers
   3++E7E3              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E7E3              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E7E3              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E7E3              ;;;				 Example of cargo
   7++E7E3              ;;;
   8++E7E3              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E7E3              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E7E3              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E7E3              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E7E3              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E7E3              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E7E3              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E7E3              ;;;		Edges
  16++E7E3              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E7E3              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E7E3              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E7E3              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E7E3              ;;;	  	Normals (Faces)
  21++E7E3              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E7E3              ;;;		Byte 1 = X Lo
  23++E7E3              ;;;		Byte 2 = Y Lo
  24++E7E3              ;;;		Byte 3 = Z Lo
  25++E7E3
  26++E7E3 00 90 01     CargoType5              DB $00, $90, $01
  27++E7E6 37 E8                                DW CargoType5Edges
  28++E7E8 3C                                   DB CargoType5EdgesSize
  29++E7E9 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E7ED 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E7F1 11 0F
  31++E7F3 73 E8                                DW CargoType5Normals
  32++E7F5 02 00                                DB $02,$00
  33++E7F7 FB E7                                DW CargoType5Vertices
  34++E7F9 00 00                                DB 0,0                      ; Type and Tactics
  35++E7FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  36++E7FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  36++E7FF 10 55
  37++E801 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  37++E805 10 22
  38++E807 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  38++E80B 20 33
  39++E80D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  39++E811 30 44
  40++E813 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  40++E817 40 55
  41++E819 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  41++E81D 51 66
  42++E81F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  42++E823 21 66
  43++E825 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  43++E829 32 66
  44++E82B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  44++E82F 43 66
  45++E831 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  45++E835 54 66
  46++E837              CargoType5VertSize      equ $  - CargoType5Vertices
  47++E837 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  47++E83B 1F 20 04 08
  48++E83F 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  48++E843 1F 40 0C 10
  49++E847 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  49++E84B 1F 51 00 14
  50++E84F 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  50++E853 1F 32 08 1C
  51++E857 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  51++E85B 1F 54 10 24
  52++E85F 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  52++E863 1F 62 18 1C
  53++E867 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  53++E86B 1F 64 20 24
  54++E86F 1F 65 24 14                          DB $1F,$65,$24,$14
  55++E873              CargoType5EdgesSize     equ $  - CargoType5Edges
  56++E873              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  57++E873 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  58++E877 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  58++E87B 5F 00 12 30
  59++E87F 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  59++E883 7F 00 12 30
  60++E887 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  60++E88B 9F 60 00 00
  61++E88F              CargoType5NormalsSize   equ $  - CargoType5Normals
  62++E88F              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
  95+ E88F                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E88F 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E892 13 E9                                DW ChameleonEdges
   3++E894 74                                   DB ChameleonEdgesSize
   4++E895 00 1A                                DB $00, $1A
   5++E897 6C                                   DB ChameleonVertSize
   6++E898 1D                                   DB ChameleonEdgesCnt
   7++E899 00 C8                                DB $00, $C8
   8++E89B 34                                   DB ChameleonNormalsSize
   9++E89C 0A 64 1D                             DB $0A, $64, $1D
  10++E89F 87 E9                                DW ChameleonNormals
  11++E8A1 01 23                                DB $01, $23
  12++E8A3 A7 E8                                DW ChameleonVertices
  13++E8A5 00 00                                DB 0,0                      ; Type and Tactics
  14++E8A7 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8AB 25 01
  15++E8AD 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8B1 34 01
  16++E8B3 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8B7 8B 25
  17++E8B9 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8BD 68 22
  18++E8BF 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8C3 69 33
  19++E8C5 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8C9 9A 34
  20++E8CB 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8CF 7A 44
  21++E8D1 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8D5 7B 55
  22++E8D7 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8DB 36 02
  23++E8DD 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E8E1 57 14
  24++E8E3 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E8E7 BC 88
  25++E8E9 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E8ED 9C 68
  26++E8EF 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E8F3 AC 99
  27++E8F5 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E8F9 BC 7A
  28++E8FB 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E8FF CC CC
  29++E901 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E905 CC CC
  30++E907 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E90B CC CC
  31++E90D 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E911 CC CC
  32++E913              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E913 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E917 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E91B 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E91F 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E923 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E927 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E92B 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E92F 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E933 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E937 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E93B 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E93F 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E943 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E947 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E94B 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E94F 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E953 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E957 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E95B 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E95F 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E963 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E967 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E96B 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E96F 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E973 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E977 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E97B 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E97F 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E983 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E987              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E987              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E987 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E98B 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E98F 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E993 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E997 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E99B DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E99F 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E9A3 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E9A7 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9AB 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9AF 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9B3 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9B7 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9BB              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9BB              ChameleonLen:           equ $ - Chameleon
  79++E9BB
# file closed: ./Data/Ships/Chameleon.asm
  96+ E9BB                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E9BB              ; Corrected pointers
   2++E9BB              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9BB              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9BB              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9BB 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9BE 7B EA                                DW CobraMk3Edges
   7++E9C0 98                                   DB CobraMkEdgesSize
   8++E9C1 54 2A                                DB $54,$2A
   9++E9C3 A8                                   DB CobraMkVertSize
  10++E9C4 26                                   DB CobraMkEdgesCnt
  11++E9C5 00 00                                DB $00,$00
  12++E9C7 34                                   DB CobraMk3NormalsSize
  13++E9C8 32 96 1C                             DB $32,$96,$1C
  14++E9CB 13 EB                                DW CobraMk3Normals
  15++E9CD 01 13                                DB $01,$13
  16++E9CF D3 E9                                DW CobraMk3Vertices
  17++E9D1 00 00                                DB 0,0                      ; Type and Tactics
  18++E9D3                                  ; missiles = 3
  19++E9D3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9D7 FF FF
  20++E9D9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9DD FF FF
  21++E9DF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++E9E3 FF FF
  22++E9E5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++E9E9 73 AA
  23++E9EB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++E9EF 84 CC
  24++E9F1 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++E9F5 FF FF
  25++E9F7 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++E9FB FF FF
  26++E9FD 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++EA01 98 CC
  27++EA03 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++EA07 97 AA
  28++EA09 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA0D 65 99
  29++EA0F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA13 A9 BB
  30++EA15 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA19 B9 CC
  31++EA1B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA1F 99 99
  32++EA21 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA25 99 99
  33++EA27 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA2B 99 99
  34++EA2D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA31 99 99
  35++EA33 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA37 99 99
  36++EA39 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA3D 99 99
  37++EA3F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA43 99 99
  38++EA45 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA49 99 99
  39++EA4B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA4F B0 BB
  40++EA51 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA55 B0 BB
  41++EA57 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA5B 99 99
  42++EA5D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA61 99 99
  43++EA63 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA67 99 99
  44++EA69 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA6D 99 99
  45++EA6F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA73 99 99
  46++EA75 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA79 99 99
  47++EA7B              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA7B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA7F 1F C4 00 10
  49++EA83 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EA87 1F A7 0C 20
  50++EA8B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EA8F 1F 98 18 1C
  51++EA93 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EA97 1F 95 14 24
  52++EA9B 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EA9F 1F 51 08 14
  53++EAA3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EAA7 1F 73 0C 14
  54++EAAB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EAAF 1F 10 04 08
  55++EAB3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EAB7 1F A9 20 28
  56++EABB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EABF 1F C9 1C 2C
  57++EAC3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EAC7 1F CB 00 2C
  58++EACB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EACF 1D 42 00 18
  59++EAD3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EAD7 14 99 30 34
  60++EADB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EADF 14 99 38 3C
  61++EAE3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EAE7 13 99 3C 40
  62++EAEB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EAEF 13 99 34 48
  63++EAF3 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EAF7 1E 65 08 24
  64++EAFB 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EAFF 06 99 5C 60
  65++EB03 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EB07 06 99 64 68
  66++EB0B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB0F 08 99 64 6C
  67++EB13              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB13              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB13              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB13 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB17 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB1B 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB1F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB23 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB27 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB2B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB2F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB33 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB37 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB3B DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB3F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB43 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB47              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB47              CobraMk3Len             equ $  - CobraMk3
  85++EB47
# file closed: ./Data/Ships/CobraMk3.asm
  97+ EB47                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB47 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB4A A1 EB                                DW Cobra_Mk_1Edges
   3++EB4C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB4D 28 1A                                DB $28, $1A
   5++EB4F 42                                   DB Cobra_Mk_1VertSize
   6++EB50 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB51 00 4B                                DB $00, $4B
   8++EB53 28                                   DB Cobra_Mk_1NormalsSize
   9++EB54 13 51 1A                             DB $13, $51, $1A
  10++EB57 E9 EB                                DW Cobra_Mk_1Normals
  11++EB59 02 22                                DB $02, $22
  12++EB5B 5F EB                                DW Cobra_Mk_1Vertices
  13++EB5D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB5F 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB63 01 23
  15++EB65 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB69 01 45
  16++EB6B 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB6F 23 88
  17++EB71 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB75 45 99
  18++EB77 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB7B 26 78
  19++EB7D 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB81 46 79
  20++EB83 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB87 13 78
  21++EB89 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB8D 15 79
  22++EB8F 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB93 02 46
  23++EB95 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB99 01 11
  24++EB9B 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EB9F 01 11
  25++EBA1              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EBA1 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EBA5 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EBA9 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBAD 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBB1 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBB5 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBB9 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBBD 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBC1 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBC5 14 02 00 20                          DB $14, $02, $00, $20
  36++EBC9 14 04 20 04                          DB $14, $04, $20, $04
  37++EBCD 10 26 10 20                          DB $10, $26, $10, $20
  38++EBD1 10 46 20 14                          DB $10, $46, $20, $14
  39++EBD5 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBD9 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBDD 14 13 00 18                          DB $14, $13, $00, $18
  42++EBE1 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EBE5 02 01 28 24                          DB $02, $01, $28, $24
  44++EBE9              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EBE9              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EBE9 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EBED 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EBF1 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EBF5 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EBF9 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EBFD 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EC01 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EC05 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EC09 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC0D 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC11              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC11              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC11
# file closed: ./Data/Ships/Cobra_Mk_1.asm
  98+ EC11                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EC11 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC14 D1 EC                                DW Cobra_Mk_3_PEdges
   3++EC16 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC17 54 2A                                DB $54, $2A
   5++EC19 A8                                   DB Cobra_Mk_3_PVertSize
   6++EC1A 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC1B 00 AF                                DB $00, $AF
   8++EC1D 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC1E 32 96 1C                             DB $32, $96, $1C
  10++EC21 69 ED                                DW Cobra_Mk_3_PNormals
  11++EC23 01 12                                DB $01, $12
  12++EC25 29 EC                                DW Cobra_Mk_3_PVertices
  13++EC27 00 00                                DB 0,0                      ; Type and Tactics
  14++EC29 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC2D FF FF
  15++EC2F 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC33 FF FF
  16++EC35 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC39 FF FF
  17++EC3B 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC3F 73 AA
  18++EC41 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC45 84 CC
  19++EC47 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC4B FF FF
  20++EC4D 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC51 FF FF
  21++EC53 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC57 98 CC
  22++EC59 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC5D 97 AA
  23++EC5F 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC63 65 99
  24++EC65 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC69 A9 BB
  25++EC6B 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC6F B9 CC
  26++EC71 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC75 99 99
  27++EC77 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC7B 99 99
  28++EC7D 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++EC81 99 99
  29++EC83 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++EC87 99 99
  30++EC89 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++EC8D 99 99
  31++EC8F 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++EC93 99 99
  32++EC95 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++EC99 99 99
  33++EC9B 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++EC9F 99 99
  34++ECA1 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++ECA5 B0 BB
  35++ECA7 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECAB B0 BB
  36++ECAD 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECB1 99 99
  37++ECB3 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECB7 99 99
  38++ECB9 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECBD 99 99
  39++ECBF 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECC3 99 99
  40++ECC5 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECC9 99 99
  41++ECCB 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECCF 99 99
  42++ECD1              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECD1 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECD5 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECD9 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECDD 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ECE1 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ECE5 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ECE9 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ECED 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ECF1 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ECF5 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ECF9 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ECFD 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ED01 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ED05 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ED09 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED0D 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED11 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED15 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED19 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED1D 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED21 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED25 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED29 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED2D 14 99 30 34                          DB $14, $99, $30, $34
  67++ED31 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED35 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED39 14 99 40 44                          DB $14, $99, $40, $44
  70++ED3D 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED41 11 99 38 44                          DB $11, $99, $38, $44
  72++ED45 13 99 34 48                          DB $13, $99, $34, $48
  73++ED49 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED4D 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED51 06 99 58 60                          DB $06, $99, $58, $60
  76++ED55 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED59 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED5D 06 99 64 68                          DB $06, $99, $64, $68
  79++ED61 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED65 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED69              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED69              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED69 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED6D 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED71 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED75 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED79 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED7D 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++ED81 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++ED85 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++ED89 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++ED8D 3F 00 00 50                          DB $3F, $00, $00, $50
  93++ED91 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++ED95 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++ED99 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++ED9D              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++ED9D              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++ED9D
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
  99+ ED9D                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++ED9D              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++ED9D              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++ED9D              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++ED9D F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDA0 1B EE                                DW ConstrictorEdges
   6++EDA2 60                                   DB ConstrictorEdgesSize
   7++EDA3 00 2E                                DB $00,$2E
   8++EDA5 66                                   DB ConstrictorVertSize
   9++EDA6 18                                   DB ConstrictorEdgesCnt
  10++EDA7 18 00                                DB $18,$00
  11++EDA9 28                                   DB ConstrictorNormalsSize
  12++EDAA 2D C8 37                             DB $2D,$C8,$37
  13++EDAD 7B EE                                DW ConstrictorNormals
  14++EDAF 02 2F                                DB $02,$2F
  15++EDB1 B5 ED                                DW ConstrictorVertices
  16++EDB3 00 00                                DB 0,0                      ; Type and Tactics
  17++EDB5                                  ; missiles = 3
  18++EDB5 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDB9 02 99
  19++EDBB 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDBF 01 99
  20++EDC1 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDC5 14 99
  21++EDC7 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDCB 45 89
  22++EDCD 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDD1 56 88
  23++EDD3 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDD7 67 88
  24++EDD9 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDDD 37 89
  25++EDDF 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EDE3 23 99
  26++EDE5 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EDE9 FF FF
  27++EDEB 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EDEF FF FF
  28++EDF1 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EDF5 99 99
  29++EDF7 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EDFB 99 99
  30++EDFD 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EE01 99 99
  31++EE03 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EE07 99 99
  32++EE09 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE0D 99 99
  33++EE0F 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE13 99 99
  34++EE15 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE19 9F 01
  35++EE1B              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE1B 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE1F 1F 19 04 08
  37++EE23 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE27 1F 02 00 20
  38++EE2B 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE2F 1F 23 1C 20
  39++EE33 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE37 1F 49 08 0C
  40++EE3B 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE3F 1F 37 18 20
  41++EE43 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE47 1F 56 10 24
  42++EE4B 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE4F 1F 58 0C 10
  43++EE53 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE57 1F 78 14 18
  44++EE5B 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE5F 1F 06 20 24
  45++EE63 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE67 05 99 30 38
  46++EE6B 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE6F 0A 99 2C 3C
  47++EE73 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE77 12 99 2C 34
  48++EE7B              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE7B              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE7B 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE7F 9F 18 4B 14
  51++EE83 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EE87 1F 2C 4B 00
  52++EE8B 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EE8F 9F 2C 4B 00
  53++EE93 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EE97 1F 2C 4B 00
  54++EE9B 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EE9F 5F 00 1B 00
  55++EEA3              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EEA3              ConstrictorLen          equ $  - Constrictor
  57++EEA3
# file closed: ./Data/Ships/Constrictor.asm
 100+ EEA3                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EEA3 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEA6 1B EF                                DW CoriolisEdges
   3++EEA8 70                                   DB CoriolisEdgesSize
   4++EEA9 00 36                                DB $00, $36
   5++EEAB 60                                   DB CoriolisVertSize
   6++EEAC 1C                                   DB CoriolisEdgesCnt
   7++EEAD 00 00                                DB $00, $00
   8++EEAF 38                                   DB CoriolisNormalsSize
   9++EEB0 78 F0 00                             DB $78, $F0, $00
  10++EEB3 8B EF                                DW CoriolisNormals
  11++EEB5 00 06                                DB $00, $06
  12++EEB7 BB EE                                DW CoriolisVertices
  13++EEB9 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEBB A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEBF 10 62
  15++EEC1 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EEC5 20 83
  16++EEC7 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EECB 30 74
  17++EECD 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EED1 10 54
  18++EED3 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EED7 51 A6
  19++EED9 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EEDD 62 B8
  20++EEDF A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EEE3 73 C8
  21++EEE5 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EEE9 54 97
  22++EEEB A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EEEF A6 DB
  23++EEF1 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EEF5 B8 DC
  24++EEF7 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EEFB 97 DC
  25++EEFD 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EF01 95 DA
  26++EF03 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EF07 00 00
  27++EF09 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF0D 00 00
  28++EF0F 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF13 00 00
  29++EF15 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF19 00 00
  30++EF1B              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF1B 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF1F 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF23 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF27 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF2B 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF2F 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF33 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF37 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF3B 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF3F 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF43 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF47 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF4B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF4F 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF53 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF57 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF5B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF5F 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF63 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF67 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF6B 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF6F 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF73 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF77 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF7B 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF7F 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EF83 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EF87 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EF8B              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EF8B              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EF8B 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EF8F 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EF93 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EF97 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EF9B DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EF9F 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EFA3 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EFA7 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFAB 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFAF FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFB3 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFB7 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFBB BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFBF 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFC3              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFC3              CoriolisLen:            equ $ - Coriolis
  77++EFC3
# file closed: ./Data/Ships/Coriolis.asm
 101+ EFC3                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EFC3 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFC6 4D F0                                DW CougarEdges
   3++EFC8 64                                   DB CougarEdgesSize
   4++EFC9 00 2A                                DB $00, $2A
   5++EFCB 72                                   DB CougarVertSize
   6++EFCC 19                                   DB CougarEdgesCnt
   7++EFCD 00 00                                DB $00, $00
   8++EFCF 18                                   DB CougarNormalsSize
   9++EFD0 22 FC 28                             DB $22, $FC, $28
  10++EFD3 B1 F0                                DW CougarNormals
  11++EFD5 02 34                                DB $02, $34
  12++EFD7 DB EF                                DW CougarVertices
  13++EFD9 00 00                                DB 0,0                      ; Type and Tactics
  14++EFDB 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFDF 02 44
  15++EFE1 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++EFE5 01 22
  16++EFE7 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++EFEB 01 55
  17++EFED 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++EFF1 04 55
  18++EFF3 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++EFF7 12 35
  19++EFF9 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++EFFD 23 44
  20++EFFF 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++F003 34 55
  21++F005 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++F009 01 11
  22++F00B 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F00F 01 11
  23++F011 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F015 34 44
  24++F017 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F01B 34 44
  25++F01D 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F021 00 44
  26++F023 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F027 00 44
  27++F029 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F02D 00 00
  28++F02F 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F033 44 44
  29++F035 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F039 55 55
  30++F03B 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F03F 55 55
  31++F041 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F045 55 55
  32++F047 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F04B 55 55
  33++F04D              CougarVertSize:         equ $ - CougarVertices
  34++F04D 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F051 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F055 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F059 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F05D 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F061 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F065 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F069 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F06D 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F071 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F075 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F079 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F07D 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F081 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F085 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F089 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F08D 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F091 14 00 30 34                          DB $14, $00, $30, $34
  52++F095 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F099 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F09D 14 44 38 30                          DB $14, $44, $38, $30
  55++F0A1 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F0A5 14 55 40 48                          DB $14, $55, $40, $48
  57++F0A9 12 55 48 44                          DB $12, $55, $48, $44
  58++F0AD 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0B1              CougarEdgesSize:        equ $ - CougarEdges
  60++F0B1              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0B1 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0B5 DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0B9 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0BD 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0C1 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0C5 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0C9              CougarNormalsSize:      equ $ - CougarNormals
  68++F0C9              CougarLen:              equ $ - Cougar
  69++F0C9
# file closed: ./Data/Ships/Cougar.asm
 102+ F0C9                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0C9 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0CC 71 F1                                DW DodoEdges
   3++F0CE 88                                   DB DodoEdgesSize
   4++F0CF 00 36                                DB $00, $36
   5++F0D1 90                                   DB DodoVertSize
   6++F0D2 22                                   DB DodoEdgesCnt
   7++F0D3 00 00                                DB $00, $00
   8++F0D5 30                                   DB DodoNormalsSize
   9++F0D6 7D F0 00                             DB $7D, $F0, $00
  10++F0D9 F9 F1                                DW DodoNormals
  11++F0DB 00 00                                DB $00, $00
  12++F0DD E1 F0                                DW DodoVertices
  13++F0DF 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0E1 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0E5 01 55
  15++F0E7 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0EB 01 22
  16++F0ED 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0F1 02 33
  17++F0F3 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0F7 03 44
  18++F0F9 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F0FD 04 55
  19++F0FF 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F103 15 66
  20++F105 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F109 12 77
  21++F10B 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F10F 23 88
  22++F111 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F115 34 99
  23++F117 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F11B 45 AA
  24++F11D 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F121 16 77
  25++F123 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F127 27 88
  26++F129 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F12D 38 99
  27++F12F E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F133 49 AA
  28++F135 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F139 56 AA
  29++F13B 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F13F 67 BB
  30++F141 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F145 78 BB
  31++F147 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F14B 89 BB
  32++F14D 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F151 9A BB
  33++F153 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F157 6A BB
  34++F159 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F15D 00 00
  35++F15F 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F163 00 00
  36++F165 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F169 00 00
  37++F16B 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F16F 00 00
  38++F171              DodoVertSize:           equ $ - DodoVertices
  39++F171 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F175 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F179 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F17D 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F181 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F185 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F189 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F18D 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F191 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F195 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F199 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F19D 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F1A1 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F1A5 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F1A9 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1AD 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1B1 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1B5 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1B9 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1BD 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1C1 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1C5 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1C9 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1CD 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1D1 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1D5 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1D9 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1DD 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F1E1 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F1E5 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F1E9 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F1ED 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F1F1 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F1F5 14 00 58 50                          DB $14, $00, $58, $50
  73++F1F9              DodoEdgesSize:          equ $ - DodoEdges
  74++F1F9              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F1F9 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F1FD 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F201 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F205 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F209 DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F20D 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F211 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F215 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F219 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F21D FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F221 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F225 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F229              DodoNormalsSize:        equ $ - DodoNormals
  88++F229              DodoLen:                equ $ - Dodo
  89++F229
# file closed: ./Data/Ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1040  F229              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1041  F229                  SLOT    ShipModelsAddr
1042  F229                  PAGE    BankShipModels2
1043  F229              	ORG     ShipModelsAddr, BankShipModels2
1044  E000
1045  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1046  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1046  E00F 06 00       >                        ld      b,0
1046  E011 4F          >                        ld      c,a                                 ; c= original ship id
1046  E012 CB 3F       >.ShiftLoop:             srl     a
1046  E014 CB 3F       >                        srl     a
1046  E016 CB 3F       >                        srl     a
1046  E018 CB 3F       >                        srl     a                                   ; divide by 16
1046  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1046  E01B 79          >                        ld      a,c
1046  E01C 50          >                        ld      d,b
1046  E01D 1E 10       >                        ld      e,16
1046  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1046  E021 93          >                        sub     e                                   ; a= actual model id now
1046  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1046  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1046  E024 7A          >                        ld      a,d                                 ; a = bank number
1046  E025             >;.. Now b = bank and a = adjusted ship nbr
1046  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1046  E028 ED 31       >                        add     hl,a
1046  E02A ED 31       >                        add     hl,a
1046  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1046  E02D             >                        ClearCarryFlag
1046  E02D B7          >                        or a
1046  E02E C9          >                        ret
1047  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1047  E02F 2A 13 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1047  E032 11 17 C3    >                        ld          de,UBnkHullVerticies
1047  E035 06 00       >                        ld          b,0
1047  E037 3A 07 C3    >                        ld			a,(VertexCtX6Addr)
1047  E03A 4F          >                        ld          c,a
1047  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1047  E03C CD F2 90    >                        call        memcopy_dma
1047  E03F C9          >                        ret
1048  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1048  E040 2A 02 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1048  E043 11 43 C4    >                        ld          de,UBnkHullEdges
1048  E046 06 00       >                        ld          b,0
1048  E048 3A 04 C3    >                        ld			a,(LineX4Addr)
1048  E04B 4F          >                        ld          c,a
1048  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1048  E04D CD F2 90    >                        call        memcopy_dma
1048  E050 C9          >                        ret
1049  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1049  E051 2A 0F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1049  E054 11 F3 C8    >                        ld          de,UBnkHullNormals
1049  E057 06 00       >                        ld          b,0
1049  E059 3A 0B C3    >                        ld          a,(FaceCtX4Addr)
1049  E05C 4F          >                        ld          c,a
1049  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1049  E05E CD F2 90    >                        call        memcopy_dma
1049  E061 C9          >                        ret
1050  E062              ShipBankTable2:         MShipBankTable
1050  E062 3B 00       >                        DW      BankShipModels1
1050  E064 43 00       >                        DW      BankShipModels2
1050  E066 44 00       >                        DW      BankShipModels3
1050  E068 45 00       >                        DW      BankShipModels4
1051  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1051  E06A 21 FD C2    >                        ld          hl,UBnkShipModelBank
1051  E06D 36 43       >                        ld          (hl),BankShipModels2
1051  E06F 32 FE C2    >                        ld          (UBnkShipModelNbr),a
1051  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1051  E075 ED 31       >                        add         hl,a
1051  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1051  E079 4E          >                        ld          c,(hl)
1051  E07A 23          >                        inc         hl
1051  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1051  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1051  E07F ED 31       >                        add         hl,a
1051  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1051  E083 7E          >                        ld          a,(hl)
1051  E084 23          >                        inc         hl
1051  E085 66          >                        ld          h,(hl)
1051  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1051  E087 11 FF C2    >                        ld          de,UBnkHullCopy             ; Universe bank
1051  E08A 01 18 00    >                        ld          bc,ShipDataLength
1051  E08D ED B0       >                        ldir
1051  E08F CD 2F E0    >                        call        CopyVertsToUniv
1051  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1051  E095 CD 51 E0    >                        call        CopyNormsToUniv
1051  E098 C9          >                        ret
1052  E099                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E099 39 E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E09B 13 E2                                 DW Escape_Pod                              ;17
   3+ E09D 6B E2                                 DW Fer_De_Lance                            ;18
   4+ E09F 89 E3                                 DW Gecko                                   ;19
   5+ E0A1 51 E4                                 DW Ghavial                                 ;20
   6+ E0A3 39 E5                                 DW Iguana                                  ;21
   7+ E0A5 2F E6                                 DW Krait                                   ;22
   8+ E0A7 19 E7                                 DW Logo                                    ;23
   9+ E0A9 D5 E8                                 DW Mamba                                   ;24
  10+ E0AB 07 EA                                 DW Missile                                 ;25
  11+ E0AD 09 EB                                 DW Monitor                                 ;26
  12+ E0AF 0F EC                                 DW Moray                                   ;27
  13+ E0B1 EB EC                                 DW Ophidian                                ;28
  14+ E0B3 23 EE                                 DW Plate                                   ;29
  15+ E0B5 61 EE                                 DW Python                                  ;30
  16+ E0B7 57 EF                                 DW Python_P                                ;31
  17+ E0B9 51 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0BB 2B E2                                 DW Escape_PodVertices
  19+ E0BD 83 E2                                 DW Fer_De_LanceVertices
  20+ E0BF A1 E3                                 DW GeckoVertices
  21+ E0C1 69 E4                                 DW GhavialVertices
  22+ E0C3 51 E5                                 DW IguanaVertices
  23+ E0C5 47 E6                                 DW KraitVertices
  24+ E0C7 31 E7                                 DW LogoVertices
  25+ E0C9 ED E8                                 DW MambaVertices
  26+ E0CB 1F EA                                 DW MissileVertices
  27+ E0CD 21 EB                                 DW MonitorVertices
  28+ E0CF 27 EC                                 DW MorayVertices
  29+ E0D1 03 ED                                 DW OphidianVertices
  30+ E0D3 3B EE                                 DW PlateVertices
  31+ E0D5 79 EE                                 DW PythonVertices
  32+ E0D7 6F EF                                 DW Python_PVertices
  33+ E0D9 87 E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0DB 43 E2                                 DW Escape_PodEdges
  35+ E0DD F5 E2                                 DW Fer_De_LanceEdges
  36+ E0DF E9 E3                                 DW GeckoEdges
  37+ E0E1 B1 E4                                 DW GhavialEdges
  38+ E0E3 AB E5                                 DW IguanaEdges
  39+ E0E5 AD E6                                 DW KraitEdges
  40+ E0E7 2D E8                                 DW LogoEdges
  41+ E0E9 83 E9                                 DW MambaEdges
  42+ E0EB 85 EA                                 DW MissileEdges
  43+ E0ED 87 EB                                 DW MonitorEdges
  44+ E0EF 7B EC                                 DW MorayEdges
  45+ E0F1 7B ED                                 DW OphidianEdges
  46+ E0F3 4D EE                                 DW PlateEdges
  47+ E0F5 BB EE                                 DW PythonEdges
  48+ E0F7 B1 EF                                 DW Python_PEdges
  49+ E0F9 DB E1        ShipNormalTable2:        DW DragonNormals
  50+ E0FB 5B E2                                 DW Escape_PodNormals
  51+ E0FD 61 E3                                 DW Fer_De_LanceNormals
  52+ E0FF 2D E4                                 DW GeckoNormals
  53+ E101 09 E5                                 DW GhavialNormals
  54+ E103 07 E6                                 DW IguanaNormals
  55+ E105 01 E7                                 DW KraitNormals
  56+ E107 C1 E8                                 DW LogoNormals
  57+ E109 F3 E9                                 DW MambaNormals
  58+ E10B E5 EA                                 DW MissileNormals
  59+ E10D E3 EB                                 DW MonitorNormals
  60+ E10F C7 EC                                 DW MorayNormals
  61+ E111 F3 ED                                 DW OphidianNormals
  62+ E113 5D EE                                 DW PlateNormals
  63+ E115 23 EF                                 DW PythonNormals
  64+ E117 19 F0                                 DW Python_PNormals
  65+ E119 DA 00        ShipModelSizeTable2:     DW DragonLen
  66+ E11B 58 00                                 DW Escape_PodLen
  67+ E11D 1E 01                                 DW Fer_De_LanceLen
  68+ E11F C8 00                                 DW GeckoLen
  69+ E121 E8 00                                 DW GhavialLen
  70+ E123 F6 00                                 DW IguanaLen
  71+ E125 EA 00                                 DW KraitLen
  72+ E127 BC 01                                 DW LogoLen
  73+ E129 32 01                                 DW MambaLen
  74+ E12B 02 01                                 DW MissileLen
  75+ E12D 06 01                                 DW MonitorLen
  76+ E12F DC 00                                 DW MorayLen
  77+ E131 38 01                                 DW OphidianLen
  78+ E133 3E 00                                 DW PlateLen
  79+ E135 F6 00                                 DW PythonLen
  80+ E137 F6 00                                 DW Python_PLen
  81+ E139
  82+ E139                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E139 00 66 50     Dragon:	                DB $00, $66, $50
   2++E13C 87 E1                                DW DragonEdges
   3++E13E 54                                   DB DragonEdgesSize
   4++E13F 00 3C                                DB $00, $3C
   5++E141 36                                   DB DragonVertSize
   6++E142 15                                   DB DragonEdgesCnt
   7++E143 00 00                                DB $00, $00
   8++E145 38                                   DB DragonNormalsSize
   9++E146 20 F7 14                             DB $20, $F7, $14
  10++E149 DB E1                                DW DragonNormals
  11++E14B 00 47                                DB $00, $47
  12++E14D 51 E1                                DW DragonVertices
  13++E14F 00 00                                DB 0,0                      ; Type and Tactics
  14++E151 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E155 6B 05
  15++E157 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E15B 67 01
  16++E15D D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E161 78 12
  17++E163 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E167 CD 23
  18++E169 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E16D CD 89
  19++E16F D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E173 9A 34
  20++E175 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E179 AB 45
  21++E17B 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E17F FF FF
  22++E181 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E185 FF FF
  23++E187              DragonVertSize:         equ $ - DragonVertices
  24++E187 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E18B 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E18F 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E193 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E197 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E19B 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E19F 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E1A3 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E1A7 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E1AB 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E1AF 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E1B3 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E1B7 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1BB 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1BF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1C3 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1C7 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1CB 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1CF 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1D3 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1D7 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1DB              DragonEdgesSize:        equ $ - DragonEdges
  46++E1DB              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1DB 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1DF 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1E3 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1E7 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1EB 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1EF 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E1F3 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E1F7 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E1FB 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E1FF FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E203 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E207 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E20B 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E20F BF 30 00 52                          DB $BF, $30, $00, $52
  61++E213              DragonNormalsSize:      equ $ - DragonNormals
  62++E213              DragonLen:              equ $ - Dragon
  63++E213
# file closed: ./Data/Ships/Dragon.asm
  83+ E213                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E213 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E216 43 E2                                DW Escape_PodEdges
   3++E218 18                                   DB Escape_PodEdgesSize
   4++E219 00 16                                DB $00, $16
   5++E21B 18                                   DB Escape_PodVertSize
   6++E21C 06                                   DB Escape_PodEdgesCnt
   7++E21D 00 00                                DB $00, $00
   8++E21F 10                                   DB Escape_PodNormalsSize
   9++E220 08 11 08                             DB $08, $11, $08
  10++E223 5B E2                                DW Escape_PodNormals
  11++E225 04 00                                DB $04, $00
  12++E227 2B E2                                DW Escape_PodVertices
  13++E229 00 00                                DB 0,0                      ; Type and Tactics
  14++E22B 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E22F 12 33
  15++E231 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E235 02 33
  16++E237 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E23B 01 33
  17++E23D 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E241 01 22
  18++E243              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E243 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E247 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E24B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E24F 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E253 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E257 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E25B              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E25B              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E25B 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E25F 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E263 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E267 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E26B              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E26B              Escape_PodLen:          equ $ - Escape_Pod
  33++E26B
# file closed: ./Data/Ships/Escape_Pod.asm
  84+ E26B                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E26B 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E26E F5 E2                                DW Fer_De_LanceEdges
   3++E270 6C                                   DB Fer_De_LanceEdgesSize
   4++E271 00 1A                                DB $00, $1A
   5++E273 72                                   DB Fer_De_LanceVertSize
   6++E274 1B                                   DB Fer_De_LanceEdgesCnt
   7++E275 00 00                                DB $00, $00
   8++E277 28                                   DB Fer_De_LanceNormalsSize
   9++E278 28 A0 1E                             DB $28, $A0, $1E
  10++E27B 61 E3                                DW Fer_De_LanceNormals
  11++E27D 01 12                                DB $01, $12
  12++E27F 83 E2                                DW Fer_De_LanceVertices
  13++E281 00 00                                DB 0,0                      ; Type and Tactics
  14++E283 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E287 01 59
  15++E289 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E28D 12 99
  16++E28F 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E293 23 99
  17++E295 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E299 34 99
  18++E29B 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E29F 45 99
  19++E2A1 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E2A5 01 26
  20++E2A7 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E2AB 23 67
  21++E2AD 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E2B1 34 78
  22++E2B3 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E2B7 04 58
  23++E2B9 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2BD 06 78
  24++E2BF 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2C3 00 00
  25++E2C5 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2C9 00 00
  26++E2CB 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2CF 00 00
  27++E2D1 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2D5 00 00
  28++E2D7 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2DB 00 00
  29++E2DD 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2E1 00 00
  30++E2E3 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2E7 99 99
  31++E2E9 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2ED 99 99
  32++E2EF 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E2F3 99 99
  33++E2F5              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E2F5 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E2F9 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E2FD 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E301 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E305 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E309 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E30D 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E311 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E315 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E319 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E31D 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E321 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E325 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E329 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E32D 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E331 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E335 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E339 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E33D 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E341 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E345 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E349 08 00 34 38                          DB $08, $00, $34, $38
  56++E34D 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E351 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E355 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E359 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E35D 08 99 44 48                          DB $08, $99, $44, $48
  61++E361              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E361              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E361 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E365 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E369 BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E36D 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E371 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E375 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E379 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E37D 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E381 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E385 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E389              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E389              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E389
# file closed: ./Data/Ships/Fer_De_Lance.asm
  85+ E389                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E389 00 26 49     Gecko:	                DB $00, $26, $49
   2++E38C E9 E3                                DW GeckoEdges
   3++E38E 44                                   DB GeckoEdgesSize
   4++E38F 00 1A                                DB $00, $1A
   5++E391 48                                   DB GeckoVertSize
   6++E392 11                                   DB GeckoEdgesCnt
   7++E393 00 37                                DB $00, $37
   8++E395 24                                   DB GeckoNormalsSize
   9++E396 12 46 1E                             DB $12, $46, $1E
  10++E399 2D E4                                DW GeckoNormals
  11++E39B 03 10                                DB $03, $10
  12++E39D A1 E3                                DW GeckoVertices
  13++E39F 00 00                                DB 0,0                      ; Type and Tactics
  14++E3A1 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E3A5 03 45
  15++E3A7 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E3AB 01 23
  16++E3AD 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E3B1 05 67
  17++E3B3 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E3B7 01 78
  18++E3B9 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3BD 45 66
  19++E3BF 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3C3 12 88
  20++E3C5 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3C9 34 67
  21++E3CB 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3CF 23 78
  22++E3D1 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3D5 33 33
  23++E3D7 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3DB 33 33
  24++E3DD 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3E1 33 33
  25++E3E3 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3E7 33 33
  26++E3E9              GeckoVertSize:          equ $ - GeckoVertices
  27++E3E9 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3ED 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E3F1 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E3F5 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E3F9 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E3FD 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E401 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E405 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E409 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E40D 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E411 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E415 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E419 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E41D 14 67 08 18                          DB $14, $67, $08, $18
  41++E421 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E425 10 33 20 28                          DB $10, $33, $20, $28
  43++E429 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E42D              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E42D              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E42D 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E431 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E435 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E439 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E43D DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E441 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E445 BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E449 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E44D 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E451              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E451              GeckoLen:               equ $ - Gecko
  57++E451
# file closed: ./Data/Ships/Gecko.asm
  86+ E451                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E451 03 26 00     Ghavial:	DB $03, $26, $00
   2++E454 B1 E4        	DW GhavialEdges
   3++E456 58           	DB GhavialEdgesSize
   4++E457 00 22        	DB $00, $22
   5++E459 48           	DB GhavialVertSize
   6++E45A 16           	DB GhavialEdgesCnt
   7++E45B 00 64        	DB $00, $64
   8++E45D 30           	DB GhavialNormalsSize
   9++E45E 0A 72 10     	DB $0A, $72, $10
  10++E461 09 E5        	DW GhavialNormals
  11++E463 00 27        	DB $00, $27
  12++E465 69 E4        	DW GhavialVertices
  13++E467 00 00                                DB 0,0                      ; Type and Tactics
  14++E469
  15++E469 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E46D 67 01
  16++E46F 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E473 6B 05
  17++E475 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E479 23 01
  18++E47B 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E47F 45 03
  19++E481 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E485 78 12
  20++E487 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E48B 89 23
  21++E48D 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E491 AB 45
  22++E493 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E497 9A 34
  23++E499 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E49D FF FF
  24++E49F 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E4A3 00 00
  25++E4A5 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E4A9 00 00
  26++E4AB 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E4AF 00 00
  27++E4B1
  28++E4B1              GhavialVertSize: equ $ - GhavialVertices
  29++E4B1
  30++E4B1
  31++E4B1 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E4B5 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E4B9 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4BD 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4C1 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4C5 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4C9 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4CD 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4D1 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4D5 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4D9 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4DD 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4E1 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4E5 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4E9 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4ED 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E4F1 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E4F5 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E4F9 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E4FD 09 00 24 28  	DB $09, $00, $24, $28
  51++E501 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E505 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E509
  54++E509              GhavialEdgesSize: equ $ - GhavialEdges
  55++E509
  56++E509
  57++E509              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E509
  59++E509
  60++E509 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E50D 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E511 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E515 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E519 BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E51D 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E521 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E525 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E529 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E52D 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E531 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E535 DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E539
  73++E539              GhavialNormalsSize: equ $ - GhavialNormals
  74++E539              GhavialLen: equ $ - Ghavial
  75++E539
# file closed: ./Data/Ships/Ghavial.asm
  87+ E539                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E539 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E53C AB E5        	DW IguanaEdges
   3++E53E 5C           	DB IguanaEdgesSize
   4++E53F 00 1A        	DB $00, $1A
   5++E541 5A           	DB IguanaVertSize
   6++E542 17           	DB IguanaEdgesCnt
   7++E543 00 96        	DB $00, $96
   8++E545 28           	DB IguanaNormalsSize
   9++E546 0A 5A 21     	DB $0A, $5A, $21
  10++E549 07 E6        	DW IguanaNormals
  11++E54B 01 23        	DB $01, $23
  12++E54D 51 E5        	DW IguanaVertices
  13++E54F 00 00                                DB 0,0                      ; Type and Tactics
  14++E551
  15++E551
  16++E551 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E555 23 01
  17++E557 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E55B 46 02
  18++E55D 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E561 45 01
  19++E563 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E567 57 13
  20++E569 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E56D 67 23
  21++E56F 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E573 89 46
  22++E575 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E579 88 45
  23++E57B 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E57F 89 57
  24++E581 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E585 99 67
  25++E587 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E58B 11 00
  26++E58D 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E591 33 22
  27++E593 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E597 99 88
  28++E599 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E59D 88 88
  29++E59F 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E5A3 99 88
  30++E5A5 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E5A9 99 99
  31++E5AB
  32++E5AB              IguanaVertSize: equ $ - IguanaVertices
  33++E5AB
  34++E5AB
  35++E5AB
  36++E5AB 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E5AF 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E5B3 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E5B7 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5BB 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5BF 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5C3 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5C7 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5CB 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5CF 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5D3 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5D7 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5DB 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5DF 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5E3 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5E7 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5EB 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5EF 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E5F3 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E5F7 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E5FB 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E5FF 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E603 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E607
  60++E607              IguanaEdgesSize: equ $ - IguanaEdges
  61++E607
  62++E607
  63++E607              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E607
  65++E607
  66++E607 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E60B DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E60F 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E613 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E617 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E61B DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E61F 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E623 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E627 BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E62B 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E62F
  77++E62F
  78++E62F              IguanaNormalsSize: equ $ - IguanaNormals
  79++E62F              IguanaLen: equ $ - Iguana
  80++E62F
# file closed: ./Data/Ships/Iguana.asm
  88+ E62F                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E62F
   2++E62F 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E632 AD E6                                DW KraitEdges
   4++E634 54                                   DB KraitEdgesSize
   5++E635 00 12                                DB $00, $12
   6++E637 66                                   DB KraitVertSize
   7++E638 15                                   DB KraitEdgesCnt
   8++E639 64 00                                DB $64,$00
   9++E63B 18                                   DB KraitNormalsSize
  10++E63C 14 50 1E                             DB $14, $50, $1E
  11++E63F 01 E7                                DW KraitNormals
  12++E641 02 10                                DB $02, $10
  13++E643 47 E6                                DW KraitVertices
  14++E645 00 00                                DB 0,0                      ; Type and Tactics
  15++E647 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E64B 01 23
  16++E64D 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E651 03 45
  17++E653 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E657 12 45
  18++E659 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E65D 01 44
  19++E65F 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E663 23 55
  20++E665 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E669 01 11
  21++E66B 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E66F 23 33
  22++E671 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E675 00 33
  23++E677 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E67B 00 33
  24++E67D 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E681 33 33
  25++E683 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E687 00 00
  26++E689 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E68D 44 44
  27++E68F 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E693 44 44
  28++E695 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E699 44 44
  29++E69B 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E69F 55 55
  30++E6A1 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E6A5 55 55
  31++E6A7 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E6AB 55 55
  32++E6AD              KraitVertSize           equ $  - KraitVertices
  33++E6AD 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E6B1 1F 12 00 08
  34++E6B5 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E6B9 1F 23 00 10
  35++E6BD 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6C1 1F 25 10 08
  36++E6C5 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6C9 1F 04 0C 04
  37++E6CD 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6D1 1C 23 10 18
  38++E6D5 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6D9 09 00 1C 28
  39++E6DD 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6E1 09 33 1C 24
  40++E6E5 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6E9 08 44 2C 34
  41++E6ED 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E6F1 07 44 30 2C
  42++E6F5 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E6F9 08 55 3C 40
  43++E6FD 08 55 40 38                          DB $08, $55, $40, $38
  44++E701              KraitEdgesSize          equ $  - KraitEdges
  45++E701              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E701 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E705 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E709 DF 07 30 06
  48++E70D 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E711 3F 4D 00 9A
  49++E715 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E719              KraitNormalsSize        equ $  - KraitNormals
  51++E719              KraitLen                equ $  - Krait
  52++E719
# file closed: ./Data/Ships/Krait.asm
  89+ E719                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E719 00 26 49     Logo:	DB $00, $26, $49
   2++E71C 2D E8        	DW LogoEdges
   3++E71E 94           	DB LogoEdgesSize
   4++E71F 00 36        	DB $00, $36
   5++E721 FC           	DB LogoVertSize
   6++E722 25           	DB LogoEdgesCnt
   7++E723 00 00        	DB $00, $00
   8++E725 14           	DB LogoNormalsSize
   9++E726 63 FC 24     	DB $63, $FC, $24
  10++E729 C1 E8        	DW LogoNormals
  11++E72B 01 00        	DB $01, $00
  12++E72D 31 E7        	DW LogoVertices
  13++E72F 00 00                                DB 0,0                      ; Type and Tactics
  14++E731
  15++E731 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E735 00 00
  16++E737 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E73B 00 00
  17++E73D 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E741 00 00
  18++E743 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E747 00 00
  19++E749 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E74D 00 00
  20++E74F 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E753 00 00
  21++E755 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E759 00 00
  22++E75B 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E75F 00 00
  23++E761 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E765 00 00
  24++E767 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E76B 00 00
  25++E76D 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E771 00 00
  26++E773 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E777 00 00
  27++E779 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E77D 02 33
  28++E77F 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E783 02 44
  29++E785 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E789 01 33
  30++E78B 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E78F 02 33
  31++E791 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E795 02 44
  32++E797 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E79B 01 44
  33++E79D 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E7A1 00 00
  34++E7A3 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7A7 00 00
  35++E7A9 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7AD 00 00
  36++E7AF 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E7B3 00 00
  37++E7B5 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E7B9 00 00
  38++E7BB 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7BF 00 00
  39++E7C1 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7C5 00 00
  40++E7C7 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7CB 00 00
  41++E7CD 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7D1 00 00
  42++E7D3 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7D7 00 00
  43++E7D9 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7DD 00 00
  44++E7DF 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7E3 00 00
  45++E7E5 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7E9 00 00
  46++E7EB 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7EF 00 00
  47++E7F1 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E7F5 00 00
  48++E7F7 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E7FB 00 00
  49++E7FD 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E801 00 00
  50++E803 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E807 00 00
  51++E809 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E80D 00 00
  52++E80F 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E813 00 00
  53++E815 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E819 00 00
  54++E81B 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E81F 00 00
  55++E821 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E825 00 00
  56++E827 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E82B 00 00
  57++E82D
  58++E82D              LogoVertSize: equ $ - LogoVertices
  59++E82D
  60++E82D
  61++E82D
  62++E82D 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E831 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E835 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E839 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E83D 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E841 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E845 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E849 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E84D 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E851 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E855 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E859 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E85D 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E861 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E865 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E869 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E86D 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E871 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E875 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E879 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E87D 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E881 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E885 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E889 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E88D 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E891 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E895 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E899 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E89D 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E8A1 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E8A5 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E8A9 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E8AD 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E8B1 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E8B5 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E8B9 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8BD 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8C1
 100++E8C1              LogoEdgesSize: equ $ - LogoEdges
 101++E8C1
 102++E8C1
 103++E8C1              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8C1
 105++E8C1
 106++E8C1 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8C5 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8C9 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8CD 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8D1 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8D5
 112++E8D5
 113++E8D5              LogoNormalsSize: equ $ - LogoNormals
 114++E8D5              LogoLen: equ $ - Logo
 115++E8D5
# file closed: ./Data/Ships/Logo.asm
  90+ E8D5                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8D5 01 13 24     Mamba:	DB $01, $13, $24
   2++E8D8 83 E9        	DW MambaEdges
   3++E8DA 70           	DB MambaEdgesSize
   4++E8DB 00 22        	DB $00, $22
   5++E8DD 96           	DB MambaVertSize
   6++E8DE 1C           	DB MambaEdgesCnt
   7++E8DF 00 96        	DB $00, $96
   8++E8E1 14           	DB MambaNormalsSize
   9++E8E2 19 5A 1E     	DB $19, $5A, $1E
  10++E8E5 F3 E9        	DW MambaNormals
  11++E8E7 02 12        	DB $02, $12
  12++E8E9 ED E8        	DW MambaVertices
  13++E8EB 00 00                                DB 0,0                      ; Type and Tactics
  14++E8ED
  15++E8ED 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E8F1 10 32
  16++E8F3 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E8F7 20 44
  17++E8F9 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E8FD 21 44
  18++E8FF 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E903 31 44
  19++E905 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E909 30 44
  20++E90B 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E90F 11 11
  21++E911 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E915 11 11
  22++E917 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E91B 11 11
  23++E91D 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E921 11 11
  24++E923 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E927 00 00
  25++E929 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E92D 00 00
  26++E92F 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E933 00 00
  27++E935 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E939 00 00
  28++E93B 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E93F 00 00
  29++E941 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E945 00 00
  30++E947 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E94B 44 44
  31++E94D 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E951 44 44
  32++E953 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E957 44 44
  33++E959 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E95D 44 44
  34++E95F 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E963 44 44
  35++E965 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E969 44 44
  36++E96B 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E96F 44 44
  37++E971 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E975 44 44
  38++E977 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E97B 44 44
  39++E97D 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E981 44 44
  40++E983
  41++E983              MambaVertSize: equ $ - MambaVertices
  42++E983
  43++E983
  44++E983
  45++E983 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E987 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E98B 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E98F 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E993 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E997 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E99B 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E99F 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E9A3 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E9A7 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E9AB 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E9AF 10 00 24 30  	DB $10, $00, $24, $30
  57++E9B3 10 00 28 34  	DB $10, $00, $28, $34
  58++E9B7 14 00 28 38  	DB $14, $00, $28, $38
  59++E9BB 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9BF 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9C3 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9C7 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9CB 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9CF 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9D3 07 44 50 54  	DB $07, $44, $50, $54
  66++E9D7 05 44 50 60  	DB $05, $44, $50, $60
  67++E9DB 05 44 54 60  	DB $05, $44, $54, $60
  68++E9DF 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9E3 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9E7 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9EB 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9EF 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++E9F3
  74++E9F3              MambaEdgesSize: equ $ - MambaEdges
  75++E9F3
  76++E9F3
  77++E9F3              MambaEdgesCnt: equ MambaEdgesSize/4
  78++E9F3
  79++E9F3
  80++E9F3 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++E9F7 1E 00 18 02  	DB $1E, $00, $18, $02
  82++E9FB 9E 20 40 10  	DB $9E, $20, $40, $10
  83++E9FF 1E 20 40 10  	DB $1E, $20, $40, $10
  84++EA03 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++EA07
  86++EA07              MambaNormalsSize: equ $ - MambaNormals
  87++EA07              MambaLen: equ $ - Mamba
  88++EA07
# file closed: ./Data/Ships/Mamba.asm
  91+ EA07                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++EA07 00 06 40     Missile:	DB $00, $06, $40
   2++EA0A 85 EA        	DW MissileEdges
   3++EA0C 60           	DB MissileEdgesSize
   4++EA0D 00 0A        	DB $00, $0A
   5++EA0F 66           	DB MissileVertSize
   6++EA10 18           	DB MissileEdgesCnt
   7++EA11 00 00        	DB $00, $00
   8++EA13 24           	DB MissileNormalsSize
   9++EA14 0E 02 2C     	DB $0E, $02, $2C
  10++EA17 E5 EA        	DW MissileNormals
  11++EA19 02 00        	DB $02, $00
  12++EA1B 1F EA        	DW MissileVertices
  13++EA1D 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA1F
  15++EA1F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA23 10 32
  16++EA25 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA29 21 54
  17++EA2B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA2F 32 74
  18++EA31 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA35 30 76
  19++EA37 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA3B 10 65
  20++EA3D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA41 74 88
  21++EA43 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA47 54 88
  22++EA49 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA4D 65 88
  23++EA4F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA53 76 88
  24++EA55 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA59 74 88
  25++EA5B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA5F 54 88
  26++EA61 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA65 65 88
  27++EA67 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA6B 76 88
  28++EA6D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA71 76 77
  29++EA73 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA77 65 66
  30++EA79 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA7D 74 77
  31++EA7F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA83 54 55
  32++EA85
  33++EA85              MissileVertSize: equ $ - MissileVertices
  34++EA85
  35++EA85
  36++EA85
  37++EA85 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA89 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA8D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EA91 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EA95 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EA99 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EA9D 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EAA1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EAA5 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EAA9 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EAAD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EAB1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EAB5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EAB9 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EABD 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAC1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EAC5 08 85 18 28  	DB $08, $85, $18, $28
  54++EAC9 08 87 14 24  	DB $08, $87, $14, $24
  55++EACD 08 87 20 30  	DB $08, $87, $20, $30
  56++EAD1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EAD5 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EAD9 08 54 28 40  	DB $08, $54, $28, $40
  59++EADD 08 76 30 34  	DB $08, $76, $30, $34
  60++EAE1 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EAE5
  62++EAE5              MissileEdgesSize: equ $ - MissileEdges
  63++EAE5
  64++EAE5
  65++EAE5              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EAE5
  67++EAE5
  68++EAE5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EAE9 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAED 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EAF1 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EAF5 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EAF9 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EAFD 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EB01 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EB05 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EB09
  78++EB09
  79++EB09              MissileNormalsSize: equ $ - MissileNormals
  80++EB09              MissileLen: equ $ - Missile
  81++EB09
# file closed: ./Data/Ships/Missile.asm
  92+ EB09                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EB09 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB0C 87 EB                                DW MonitorEdges
   3++EB0E 5C                                   DB MonitorEdgesSize
   4++EB0F 00 2A                                DB $00, $2A
   5++EB11 66                                   DB MonitorVertSize
   6++EB12 17                                   DB MonitorEdgesCnt
   7++EB13 01 90                                DB $01, $90
   8++EB15 2C                                   DB MonitorNormalsSize
   9++EB16 28 84 10                             DB $28, $84, $10
  10++EB19 E3 EB                                DW MonitorNormals
  11++EB1B 00 37                                DB $00, $37
  12++EB1D 21 EB                                DW MonitorVertices
  13++EB1F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB21
  15++EB21 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB25 FF FF
  16++EB27 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB2B 23 01
  17++EB2D 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB31 50 34
  18++EB33 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB37 78 12
  19++EB39 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB3D 96 45
  20++EB3F 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB43 AA 28
  21++EB45 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB49 AA 49
  22++EB4B 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB4F AA 23
  23++EB51 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB55 AA 34
  24++EB57 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB5B AA 89
  25++EB5D 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB61 89 67
  26++EB63 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB67 00 00
  27++EB69 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB6D 00 00
  28++EB6F 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB73 77 77
  29++EB75 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB79 77 77
  30++EB7B 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB7F 66 66
  31++EB81 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB85 66 66
  32++EB87              MonitorVertSize:        equ $ - MonitorVertices
  33++EB87 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB8B 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB8F 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EB93 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EB97 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EB9B 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EB9F 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EBA3 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EBA7 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EBAB 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EBAF 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EBB3 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EBB7 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBBB 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBBF 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBC3 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBC7 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBCB 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBCF 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBD3 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBD7 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBDB 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBDF 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBE3              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBE3              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBE3 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBE7 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBEB 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBEF 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EBF3 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EBF7 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EBFB DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EBFF 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EC03 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EC07 FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EC0B 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EC0F              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EC0F              MonitorLen:             equ $ - Monitor
  71++EC0F
# file closed: ./Data/Ships/Monitor.asm
  93+ EC0F                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EC0F 01 03 84     Moray:	                DB $01, $03, $84
   2++EC12 7B EC                                DW MorayEdges
   3++EC14 4C                                   DB MorayEdgesSize
   4++EC15 00 1A                                DB $00, $1A
   5++EC17 54                                   DB MorayVertSize
   6++EC18 13                                   DB MorayEdgesCnt
   7++EC19 00 32                                DB $00, $32
   8++EC1B 24                                   DB MorayNormalsSize
   9++EC1C 28 59 19                             DB $28, $59, $19
  10++EC1F C7 EC                                DW MorayNormals
  11++EC21 02 2A                                DB $02, $2A
  12++EC23 27 EC                                DW MorayVertices
  13++EC25 00 00                                DB 0,0                      ; Type and Tactics
  14++EC27
  15++EC27 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC2B 02 78
  16++EC2D 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC31 01 67
  17++EC33 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC37 FF FF
  18++EC39 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC3D 13 66
  19++EC3F 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC43 25 88
  20++EC45 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC49 45 78
  21++EC4B 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC4F 34 67
  22++EC51 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC55 44 44
  23++EC57 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC5B 44 44
  24++EC5D 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC61 44 44
  25++EC63 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC67 00 00
  26++EC69 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC6D 00 00
  27++EC6F 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC73 00 00
  28++EC75 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC79 00 00
  29++EC7B              MorayVertSize:          equ $ - MorayVertices
  30++EC7B 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC7F 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC83 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC87 18 47 14 18                          DB $18, $47, $14, $18
  34++EC8B 18 58 10 14                          DB $18, $58, $10, $14
  35++EC8F 1F 28 00 10                          DB $1F, $28, $00, $10
  36++EC93 0F 67 04 18                          DB $0F, $67, $04, $18
  37++EC97 0F 78 00 14                          DB $0F, $78, $00, $14
  38++EC9B 0F 02 00 08                          DB $0F, $02, $00, $08
  39++EC9F 0F 01 04 08                          DB $0F, $01, $04, $08
  40++ECA3 11 13 08 0C                          DB $11, $13, $08, $0C
  41++ECA7 11 25 08 10                          DB $11, $25, $08, $10
  42++ECAB 0D 45 08 14                          DB $0D, $45, $08, $14
  43++ECAF 0D 34 08 18                          DB $0D, $34, $08, $18
  44++ECB3 05 44 1C 20                          DB $05, $44, $1C, $20
  45++ECB7 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECBB 07 44 20 24                          DB $07, $44, $20, $24
  47++ECBF 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECC3 05 00 30 34                          DB $05, $00, $30, $34
  49++ECC7              MorayEdgesSize:         equ $ - MorayEdges
  50++ECC7              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECC7 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECCB 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECCF 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECD3 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECD7 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECDB 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECDF DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECE3 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECE7 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECEB
  61++ECEB              MorayNormalsSize:       equ $ - MorayNormals
  62++ECEB              MorayLen:               equ $ - Moray
  63++ECEB
# file closed: ./Data/Ships/Moray.asm
  94+ ECEB                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECEB 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECEE 7B ED                                DW OphidianEdges
   3++ECF0 78                                   DB OphidianEdgesSize
   4++ECF1 00 3C                                DB $00, $3C
   5++ECF3 78                                   DB OphidianVertSize
   6++ECF4 1E                                   DB OphidianEdgesCnt
   7++ECF5 00 32                                DB $00, $32
   8++ECF7 30                                   DB OphidianNormalsSize
   9++ECF8 14 40 22                             DB $14, $40, $22
  10++ECFB F3 ED                                DW OphidianNormals
  11++ECFD 01 1A                                DB $01, $1A
  12++ECFF 03 ED                                DW OphidianVertices
  13++ED01 00 00                                DB 0,0                      ; Type and Tactics
  14++ED03
  15++ED03 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ED07 68 02
  16++ED09 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ED0D 67 01
  17++ED0F 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ED13 22 01
  18++ED15 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ED19 8A 24
  19++ED1B 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED1F 79 13
  20++ED21 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED25 FF FF
  21++ED27 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED2B 9B 35
  22++ED2D 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED31 AB 45
  23++ED33 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED37 BB 4A
  24++ED39 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED3D FF FF
  25++ED3F 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED43 FF FF
  26++ED45 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED49 BB 39
  27++ED4B 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED4F FF FF
  28++ED51 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED55 FF FF
  29++ED57 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED5B BB 9A
  30++ED5D 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED61 FF FF
  31++ED63 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED67 BB BB
  32++ED69 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED6D BB BB
  33++ED6F 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED73 BB BB
  34++ED75 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED79 BB BB
  35++ED7B
  36++ED7B              OphidianVertSize:       equ $ - OphidianVertices
  37++ED7B 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED7F 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED83 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED87 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED8B 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED8F 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++ED93 1F 35 14 18                          DB $1F, $35, $14, $18
  44++ED97 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++ED9B 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++ED9F 1F 17 04 10                          DB $1F, $17, $04, $10
  47++EDA3 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++EDA7 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++EDAB 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++EDAF 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++EDB3 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++EDB7 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDBB 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDBF 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDC3 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDC7 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDCB 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDCF 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDD3 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDD7 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDDB 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDDF 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDE3 10 39 30 34                          DB $10, $39, $30, $34
  64++EDE7 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDEB 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDEF 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EDF3              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EDF3              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EDF3
  70++EDF3 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EDF7 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EDFB 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EDFF 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EE03 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EE07 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EE0B 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EE0F 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EE13 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EE17 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE1B FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE1F 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE23
  83++EE23              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE23              OphidianLen:            equ $ - Ophidian
  85++EE23
# file closed: ./Data/Ships/Ophidian.asm
  95+ EE23                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EE23 80 00 64     Plate:	DB $80, $00, $64
   2++EE26 4D EE        	DW PlateEdges
   3++EE28 10           	DB PlateEdgesSize
   4++EE29 00 0A        	DB $00, $0A
   5++EE2B 12           	DB PlateVertSize
   6++EE2C 04           	DB PlateEdgesCnt
   7++EE2D 00 00        	DB $00, $00
   8++EE2F 04           	DB PlateNormalsSize
   9++EE30 05 10 10     	DB $05, $10, $10
  10++EE33 5D EE        	DW PlateNormals
  11++EE35 03 00        	DB $03, $00
  12++EE37 3B EE        	DW PlateVertices
  13++EE39 00 00                                DB 0,0                      ; Type and Tactics
  14++EE3B
  15++EE3B
  16++EE3B 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE3F FF FF
  17++EE41 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE45 FF FF
  18++EE47 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE4B FF FF
  19++EE4D
  20++EE4D              PlateVertSize: equ $ - PlateVertices
  21++EE4D
  22++EE4D
  23++EE4D
  24++EE4D 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE51 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE55 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE59 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE5D
  29++EE5D              PlateEdgesSize: equ $ - PlateEdges
  30++EE5D
  31++EE5D
  32++EE5D              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE5D
  34++EE5D
  35++EE5D 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE61
  37++EE61
  38++EE61              PlateNormalsSize: equ $ - PlateNormals
  39++EE61              PlateLen: equ $ - Plate
  40++EE61
# file closed: ./Data/Ships/Plate.asm
  96+ EE61                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE61              ;\ -> &5BA1 \ Python = Type 12
   2++EE61 05 00 19     Python:                 DB $05, $00, $19
   3++EE64 BB EE                                DW PythonEdges
   4++EE66 68                                   DB PythonEdgesSize
   5++EE67 00 2A                                DB $00,$2A
   6++EE69 42                                   DB PythonVertSize
   7++EE6A 1A                                   DB PythonEdgesCnt
   8++EE6B 00 00                                DB $00,$00
   9++EE6D 34                                   DB PythonNormalsSize
  10++EE6E 28 FA 14                             DB $28,$FA,$14
  11++EE71 23 EF                                DW PythonNormals
  12++EE73 00 1B                                DB $00, $1B
  13++EE75 79 EE                                DW PythonVertices
  14++EE77 00 00                                DB 0,0                      ; Type and Tactics
  15++EE79
  16++EE79 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE7D 10 32
  17++EE7F 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE83 10 54
  18++EE85 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE89 FF FF
  19++EE8B 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE8F FF FF
  20++EE91 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EE95 54 98
  21++EE97 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EE9B 89 CC
  22++EE9D 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EEA1 B8 CC
  23++EEA3 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EEA7 A9 CC
  24++EEA9 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EEAD 32 76
  25++EEAF 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EEB3 76 BA
  26++EEB5 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EEB9 BA CC
  27++EEBB              PythonVertSize          equ $  - PythonVertices
  28++EEBB 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EEBF 1F 20 00 0C
  29++EEC3 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EEC7 1E 10 00 04
  30++EECB 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EECF 1D 51 04 08
  31++EED3 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EED7 1D 40 04 0C
  32++EEDB 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEDF 1D A7 08 24
  33++EEE3 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EEE7 1D B6 0C 24
  34++EEEB 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EEEF 05 BB 0C 28
  35++EEF3 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EEF7 05 AA 08 28
  36++EEFB 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EEFF 1F B8 0C 18
  37++EF03 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EF07 1F C9 14 1C
  38++EF0B 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EF0F 1D CB 18 28
  39++EF13 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EF17 1D BA 24 28
  40++EF1B 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF1F 1D 76 20 24
  41++EF23              PythonEdgesSize         equ $  - PythonEdges
  42++EF23              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF23 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF27 1E 1B 28 0B
  44++EF2B DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF2F 5E 1B 28 0B
  45++EF33 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF37 1E 13 26 00
  46++EF3B DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF3F 5E 13 26 00
  47++EF43 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF47 3E 19 25 0B
  48++EF4B 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF4F FE 19 25 0B
  49++EF53 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF57              PythonNormalsSize       equ $  - PythonNormals
  51++EF57              PythonLen               equ $  - Python
  52++EF57
# file closed: ./Data/Ships/Python.asm
  97+ EF57                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF57 02 19 00     Python_P:	DB $02, $19, $00
   2++EF5A B1 EF        	DW Python_PEdges
   3++EF5C 68           	DB Python_PEdgesSize
   4++EF5D 00 2A        	DB $00, $2A
   5++EF5F 42           	DB Python_PVertSize
   6++EF60 1A           	DB Python_PEdgesCnt
   7++EF61 00 C8        	DB $00, $C8
   8++EF63 34           	DB Python_PNormalsSize
   9++EF64 28 FA 14     	DB $28, $FA, $14
  10++EF67 19 F0        	DW Python_PNormals
  11++EF69 00 1B        	DB $00, $1B
  12++EF6B 6F EF        	DW Python_PVertices
  13++EF6D 00 00                                DB 0,0                      ; Type and Tactics
  14++EF6F
  15++EF6F 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF73 10 32
  16++EF75 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF79 10 54
  17++EF7B 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF7F FF FF
  18++EF81 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF85 FF FF
  19++EF87 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF8B 54 98
  20++EF8D 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EF91 89 CC
  21++EF93 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EF97 B8 CC
  22++EF99 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EF9D A9 CC
  23++EF9F 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EFA3 32 76
  24++EFA5 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EFA9 76 BA
  25++EFAB 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EFAF BA CC
  26++EFB1
  27++EFB1              Python_PVertSize: equ $ - Python_PVertices
  28++EFB1
  29++EFB1
  30++EFB1
  31++EFB1 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EFB5 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EFB9 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFBD 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFC1 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFC5 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFC9 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFCD 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFD1 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFD5 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFD9 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFDD 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFE1 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFE5 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFE9 07 99 08 14  	DB $07, $99, $08, $14
  46++EFED 07 AA 08 28  	DB $07, $AA, $08, $28
  47++EFF1 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++EFF5 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++EFF9 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++EFFD 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++F001 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++F005 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++F009 1F 98 10 14  	DB $1F, $98, $10, $14
  54++F00D 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++F011 1F 54 04 10  	DB $1F, $54, $04, $10
  56++F015 1F 76 20 24  	DB $1F, $76, $20, $24
  57++F019
  58++F019              Python_PEdgesSize: equ $ - Python_PEdges
  59++F019
  60++F019
  61++F019              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++F019
  63++F019
  64++F019 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F01D 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F021 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F025 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F029 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F02D 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F031 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F035 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F039 BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F03D 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F041 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F045 FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F049 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F04D
  78++F04D
  79++F04D              Python_PNormalsSize: equ $ - Python_PNormals
  80++F04D              Python_PLen: equ $ - Python_P
  81++F04D
# file closed: ./Data/Ships/Python_P.asm
  98+ F04D
# file closed: ./Data/ShipModelMetaData2.asm
1053  F04D              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1054  F04D                  SLOT    ShipModelsAddr
1055  F04D                  PAGE    BankShipModels3
1056  F04D              	ORG     ShipModelsAddr, BankShipModels3
1057  E000
1058  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1059  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1059  E00F 06 00       >                        ld      b,0
1059  E011 4F          >                        ld      c,a                                 ; c= original ship id
1059  E012 CB 3F       >.ShiftLoop:             srl     a
1059  E014 CB 3F       >                        srl     a
1059  E016 CB 3F       >                        srl     a
1059  E018 CB 3F       >                        srl     a                                   ; divide by 16
1059  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1059  E01B 79          >                        ld      a,c
1059  E01C 50          >                        ld      d,b
1059  E01D 1E 10       >                        ld      e,16
1059  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1059  E021 93          >                        sub     e                                   ; a= actual model id now
1059  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1059  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1059  E024 7A          >                        ld      a,d                                 ; a = bank number
1059  E025             >;.. Now b = bank and a = adjusted ship nbr
1059  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1059  E028 ED 31       >                        add     hl,a
1059  E02A ED 31       >                        add     hl,a
1059  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1059  E02D             >                        ClearCarryFlag
1059  E02D B7          >                        or a
1059  E02E C9          >                        ret
1060  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1060  E02F 2A 13 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1060  E032 11 17 C3    >                        ld          de,UBnkHullVerticies
1060  E035 06 00       >                        ld          b,0
1060  E037 3A 07 C3    >                        ld			a,(VertexCtX6Addr)
1060  E03A 4F          >                        ld          c,a
1060  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1060  E03C CD F2 90    >                        call        memcopy_dma
1060  E03F C9          >                        ret
1061  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1061  E040 2A 02 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1061  E043 11 43 C4    >                        ld          de,UBnkHullEdges
1061  E046 06 00       >                        ld          b,0
1061  E048 3A 04 C3    >                        ld			a,(LineX4Addr)
1061  E04B 4F          >                        ld          c,a
1061  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1061  E04D CD F2 90    >                        call        memcopy_dma
1061  E050 C9          >                        ret
1062  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1062  E051 2A 0F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1062  E054 11 F3 C8    >                        ld          de,UBnkHullNormals
1062  E057 06 00       >                        ld          b,0
1062  E059 3A 0B C3    >                        ld          a,(FaceCtX4Addr)
1062  E05C 4F          >                        ld          c,a
1062  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1062  E05E CD F2 90    >                        call        memcopy_dma
1062  E061 C9          >                        ret
1063  E062              ShipBankTable3:         MShipBankTable
1063  E062 3B 00       >                        DW      BankShipModels1
1063  E064 43 00       >                        DW      BankShipModels2
1063  E066 44 00       >                        DW      BankShipModels3
1063  E068 45 00       >                        DW      BankShipModels4
1064  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1064  E06A 21 FD C2    >                        ld          hl,UBnkShipModelBank
1064  E06D 36 44       >                        ld          (hl),BankShipModels3
1064  E06F 32 FE C2    >                        ld          (UBnkShipModelNbr),a
1064  E072 21 19 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1064  E075 ED 31       >                        add         hl,a
1064  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1064  E079 4E          >                        ld          c,(hl)
1064  E07A 23          >                        inc         hl
1064  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1064  E07C 21 99 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1064  E07F ED 31       >                        add         hl,a
1064  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1064  E083 7E          >                        ld          a,(hl)
1064  E084 23          >                        inc         hl
1064  E085 66          >                        ld          h,(hl)
1064  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1064  E087 11 FF C2    >                        ld          de,UBnkHullCopy             ; Universe bank
1064  E08A 01 18 00    >                        ld          bc,ShipDataLength
1064  E08D ED B0       >                        ldir
1064  E08F CD 2F E0    >                        call        CopyVertsToUniv
1064  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1064  E095 CD 51 E0    >                        call        CopyNormsToUniv
1064  E098 C9          >                        ret
1065  E099                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E099 19 E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E09B F3 E1                                 DW ShuttleType9                            ;33
   3+ E09D 29 E3                                 DW Shuttle_Mk_2                            ;34
   4+ E09F 4B E4                                 DW Sidewinder                              ;35
   5+ E0A1 F7 E4                                 DW Splinter                                ;36
   6+ E0A3 4F E5                                 DW TestVector                              ;37
   7+ E0A5 B1 E5                                 DW Thargoid                                ;38
   8+ E0A7 D1 E6                                 DW Thargon                                 ;39
   9+ E0A9 7D E7                                 DW TransportType10                         ;40
  10+ E0AB 63 E9                                 DW Viper                                   ;41
  11+ E0AD 41 EA                                 DW Worm                                    ;42
  12+ E0AF F5 EA                                 DW Rattler                                 ;43
  13+ E0B1 00 00                                 DW 0                                       ;44
  14+ E0B3 00 00                                 DW 0                                       ;45
  15+ E0B5 00 00                                 DW 0                                       ;46
  16+ E0B7 00 00                                 DW 0                                       ;47
  17+ E0B9 31 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0BB 0B E2                                 DW ShuttleType9Vertices
  19+ E0BD 41 E3                                 DW Shuttle_Mk_2Vertices
  20+ E0BF 63 E4                                 DW SidewinderVertices
  21+ E0C1 0F E5                                 DW SplinterVertices
  22+ E0C3 67 E5                                 DW TestVectorVertices
  23+ E0C5 C9 E5                                 DW ThargoidVertices
  24+ E0C7 E9 E6                                 DW ThargonVertices
  25+ E0C9 95 E7                                 DW TransportType10Vertices
  26+ E0CB 7B E9                                 DW ViperVertices
  27+ E0CD 59 EA                                 DW WormVertices
  28+ E0CF 0D EB                                 DW RattlerVertices
  29+ E0D1 67 E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D3 7D E2                                 DW ShuttleType9Edges
  31+ E0D5 A7 E3                                 DW Shuttle_Mk_2Edges
  32+ E0D7 9F E4                                 DW SidewinderEdges
  33+ E0D9 27 E5                                 DW SplinterEdges
  34+ E0DB 91 E5                                 DW TestVectorEdges
  35+ E0DD 41 E6                                 DW ThargoidEdges
  36+ E0DF 25 E7                                 DW ThargonEdges
  37+ E0E1 73 E8                                 DW TransportType10Edges
  38+ E0E3 D5 E9                                 DW ViperEdges
  39+ E0E5 95 EA                                 DW WormEdges
  40+ E0E7 67 EB                                 DW RattlerEdges
  41+ E0E9 BB E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0EB F5 E2                                 DW ShuttleType9Normals
  43+ E0ED 17 E4                                 DW Shuttle_Mk_2Normals
  44+ E0EF DB E4                                 DW SidewinderNormals
  45+ E0F1 3F E5                                 DW SplinterNormals
  46+ E0F3 A1 E5                                 DW TestVectorNormals
  47+ E0F5 A9 E6                                 DW ThargoidNormals
  48+ E0F7 61 E7                                 DW ThargonNormals
  49+ E0F9 2B E9                                 DW TransportType10Normals
  50+ E0FB 25 EA                                 DW ViperNormals
  51+ E0FD D5 EA                                 DW WormNormals
  52+ E0FF 67 EB                                 DW RattlerEdges
  53+ E101 DA 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E103 36 01                                 DW ShuttleType9Len
  55+ E105 22 01                                 DW Shuttle_Mk_2Len
  56+ E107 AC 00                                 DW SidewinderLen
  57+ E109 58 00                                 DW SplinterLen
  58+ E10B 62 00                                 DW TestVectorLen
  59+ E10D 20 01                                 DW ThargoidLen
  60+ E10F AC 00                                 DW ThargonLen
  61+ E111 E6 01                                 DW TransportType10Len
  62+ E113 DE 00                                 DW ViperLen
  63+ E115 B4 00                                 DW WormLen
  64+ E117 0E 01                                 DW RattlerLen
  65+ E119
  66+ E119                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E119 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E11C 67 E1        	DW Rock_HermitEdges
   3++E11E 54           	DB Rock_HermitEdgesSize
   4++E11F 00 32        	DB $00, $32
   5++E121 36           	DB Rock_HermitVertSize
   6++E122 15           	DB Rock_HermitEdgesCnt
   7++E123 00 00        	DB $00, $00
   8++E125 38           	DB Rock_HermitNormalsSize
   9++E126 32 B4 1E     	DB $32, $B4, $1E
  10++E129 BB E1        	DW Rock_HermitNormals
  11++E12B 01 02        	DB $01, $02
  12++E12D 31 E1        	DW Rock_HermitVertices
  13++E12F 00 00                                DB 0,0                      ; Type and Tactics
  14++E131
  15++E131
  16++E131 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E135 FF FF
  17++E137 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E13B FF FF
  18++E13D 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E141 FF FF
  19++E143 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E147 FF FF
  20++E149 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E14D 65 DC
  21++E14F 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E153 FF FF
  22++E155 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E159 10 32
  23++E15B 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E15F FF FF
  24++E161 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E165 98 BA
  25++E167
  26++E167
  27++E167              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E167
  29++E167
  30++E167
  31++E167 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E16B 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E16F 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E173 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E177 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E17B 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E17F 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E183 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E187 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E18B 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E18F 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E193 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E197 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E19B 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E19F 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E1A3 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E1A7 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E1AB 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E1AF 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E1B3 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E1B7 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E1BB
  53++E1BB              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E1BB
  55++E1BB
  56++E1BB              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E1BB
  58++E1BB
  59++E1BB 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E1BF 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E1C3 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E1C7 DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E1CB 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E1CF 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E1D3 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E1D7 BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E1DB FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E1DF 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E1E3 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E1E7 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E1EB 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E1EF 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E1F3
  74++E1F3
  75++E1F3              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E1F3              Rock_HermitLen: equ $ - Rock_Hermit
  77++E1F3
# file closed: ./Data/Ships/Rock_Hermit.asm
  67+ E1F3                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E1F3 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E1F6 7D E2        	DW ShuttleType9Edges
   3++E1F8 78           	DB ShuttleType9EdgesSize
   4++E1F9 00 26        	DB $00, $26
   5++E1FB 72           	DB ShuttleType9VertSize
   6++E1FC 1E           	DB ShuttleType9EdgesCnt
   7++E1FD 00 00        	DB $00, $00
   8++E1FF 34           	DB ShuttleType9NormalsSize
   9++E200 16 20 08     	DB $16, $20, $08
  10++E203 F5 E2        	DW ShuttleType9Normals
  11++E205 02 00        	DB $02, $00
  12++E207 0B E2        	DW ShuttleType9Vertices
  13++E209 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E20B
  15++E20B
  16++E20B 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E20F FF FF
  17++E211 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E215 FF FF
  18++E217 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E21B FF FF
  19++E21D 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E221 FF FF
  20++E223 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E227 12 39
  21++E229 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E22D 34 59
  22++E22F 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E233 56 79
  23++E235 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E239 17 89
  24++E23B 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E23F 99 99
  25++E241 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E245 99 99
  26++E247 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E24B 99 99
  27++E24D 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E251 99 99
  28++E253 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E257 0A BC
  29++E259 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E25D FF 02
  30++E25F 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E263 01 F4
  31++E265 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E269 A1 3F
  32++E26B 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E26F 6B 23
  33++E271 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E275 F8 C0
  34++E277 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E27B 4F 18
  35++E27D
  36++E27D              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E27D
  38++E27D
  39++E27D
  40++E27D 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E281 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E285 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E289 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E28D 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E291 18 12 00 10  	DB $18, $12, $00, $10
  46++E295 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E299 18 34 04 14  	DB $18, $34, $04, $14
  48++E29D 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E2A1 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E2A5 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E2A9 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E2AD 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E2B1 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E2B5 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E2B9 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E2BD 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E2C1 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E2C5 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E2C9 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E2CD 10 99 20 24  	DB $10, $99, $20, $24
  61++E2D1 07 99 24 28  	DB $07, $99, $24, $28
  62++E2D5 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E2D9 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E2DD 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E2E1 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E2E5 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E2E9 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E2ED 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E2F1 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E2F5              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E2F5              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E2F5
  73++E2F5 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E2F9 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E2FD DF 33 33 17  	DB $DF, $33, $33, $17
  76++E301 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E305 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E309 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E30D 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E311 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E315 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E319 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E31D 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E321 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E325 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E329
  87++E329
  88++E329              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E329              ShuttleType9Len: equ $ - ShuttleType9
  90++E329
# file closed: ./Data/Ships/ShuttleType9.asm
  68+ E329                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E329 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E32C A7 E3        	DW Shuttle_Mk_2Edges
   3++E32E 70           	DB Shuttle_Mk_2EdgesSize
   4++E32F 00 26        	DB $00, $26
   5++E331 66           	DB Shuttle_Mk_2VertSize
   6++E332 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E333 00 00        	DB $00, $00
   8++E335 34           	DB Shuttle_Mk_2NormalsSize
   9++E336 0A 20 09     	DB $0A, $20, $09
  10++E339 17 E4        	DW Shuttle_Mk_2Normals
  11++E33B 02 00        	DB $02, $00
  12++E33D 41 E3        	DW Shuttle_Mk_2Vertices
  13++E33F 00 00                                DB 0,0                      ; Type and Tactics
  14++E341
  15++E341
  16++E341 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E345 23 01
  17++E347 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E34B 34 00
  18++E34D 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E351 15 00
  19++E353 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E357 26 11
  20++E359 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E35D 37 22
  21++E35F 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E363 58 04
  22++E365 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E369 69 15
  23++E36B 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E36F 7A 26
  24++E371 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E375 7B 34
  25++E377 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E37B BC 48
  26++E37D 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E381 9C 58
  27++E383 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E387 AC 69
  28++E389 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E38D BC 7A
  29++E38F 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E393 CC CC
  30++E395 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E399 CC CC
  31++E39B 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E39F CC CC
  32++E3A1 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E3A5 CC CC
  33++E3A7
  34++E3A7              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E3A7
  36++E3A7
  37++E3A7
  38++E3A7 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E3AB 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E3AF 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E3B3 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E3B7 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E3BB 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E3BF 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E3C3 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E3C7 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E3CB 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E3CF 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E3D3 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E3D7 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E3DB 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E3DF 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E3E3 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E3E7 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E3EB 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E3EF 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E3F3 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E3F7 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E3FB 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E3FF 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E403 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E407 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E40B 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E40F 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E413 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E417
  67++E417              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E417
  69++E417
  70++E417              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E417
  72++E417
  73++E417 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E41B DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E41F 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E423 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E427 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E42B 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E42F 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E433 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E437 BF 42 42 16  	DB $BF, $42, $42, $16
  82++E43B FF 42 42 16  	DB $FF, $42, $42, $16
  83++E43F 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E443 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E447 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E44B
  87++E44B
  88++E44B              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E44B              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E44B
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
  69+ E44B                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E44B 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E44E 9F E4        	DW SidewinderEdges
   3++E450 3C           	DB SidewinderEdgesSize
   4++E451 00 1E        	DB $00, $1E
   5++E453 3C           	DB SidewinderVertSize
   6++E454 0F           	DB SidewinderEdgesCnt
   7++E455 00 32        	DB $00, $32
   8++E457 1C           	DB SidewinderNormalsSize
   9++E458 14 46 25     	DB $14, $46, $25
  10++E45B DB E4        	DW SidewinderNormals
  11++E45D 02 10        	DB $02, $10
  12++E45F 63 E4        	DW SidewinderVertices
  13++E461 00 00                                DB 0,0                      ; Type and Tactics
  14++E463
  15++E463 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E467 10 54
  16++E469 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E46D 20 65
  17++E46F 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E473 32 66
  18++E475 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E479 31 44
  19++E47B 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E47F 10 32
  20++E481 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E485 43 65
  21++E487 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E48B 33 33
  22++E48D 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E491 33 33
  23++E493 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E497 33 33
  24++E499 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E49D 33 33
  25++E49F
  26++E49F
  27++E49F              SidewinderVertSize: equ $ - SidewinderVertices
  28++E49F
  29++E49F
  30++E49F
  31++E49F 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E4A3 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E4A7 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E4AB 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E4AF 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E4B3 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E4B7 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E4BB 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E4BF 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E4C3 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E4C7 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E4CB 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E4CF 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E4D3 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E4D7 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E4DB
  47++E4DB              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E4DB
  49++E4DB
  50++E4DB              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E4DB
  52++E4DB
  53++E4DB 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E4DF 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E4E3 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E4E7 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E4EB DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E4EF 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E4F3 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E4F7
  61++E4F7
  62++E4F7              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E4F7              SidewinderLen: equ $ - Sidewinder
  64++E4F7
# file closed: ./Data/Ships/Sidewinder.asm
  70+ E4F7                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E4F7 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E4FA 27 E5                                DW SplinterEdges
   3++E4FC 18                                   DB SplinterEdgesSize
   4++E4FD 00 16                                DB $00, $16
   5++E4FF 18                                   DB SplinterVertSize
   6++E500 06                                   DB SplinterEdgesCnt
   7++E501 00 00                                DB $00, $00
   8++E503 10                                   DB SplinterNormalsSize
   9++E504 08 14 0A                             DB $08, $14, $0A
  10++E507 3F E5                                DW SplinterNormals
  11++E509 05 00                                DB $05, $00
  12++E50B 0F E5                                DW SplinterVertices
  13++E50D 00 00                                DB 0,0                      ; Type and Tactics
  14++E50F
  15++E50F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E513 12 33
  16++E515 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E519 02 33
  17++E51B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E51F 01 33
  18++E521 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E525 01 22
  19++E527              SplinterVertSize:       equ $ - SplinterVertices
  20++E527 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E52B 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E52F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E533 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E537 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E53B 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E53F              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E53F              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E53F 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E543 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E547 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E54B 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E54F              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E54F              SplinterLen:            equ $ - Splinter
  34++E54F
# file closed: ./Data/Ships/Splinter.asm
  71+ E54F                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E54F 03 41 23     TestVector:             DB $03, $41, $23
   2++E552 91 E5                                DW TestVectorEdges
   3++E554 10                                   DB TestVectorEdgesSize
   4++E555 54 2A                                DB $54,$2A
   5++E557 2A                                   DB TestVectorVertSize
   6++E558 04                                   DB TestVectorEdgesCnt
   7++E559 00 00                                DB $00,$00
   8++E55B 10                                   DB TestVectorNormalsSize
   9++E55C 32 96 1C                             DB $32,$96,$1C
  10++E55F A1 E5                                DW TestVectorNormals
  11++E561 04 01                                DB $04,$01
  12++E563 67 E5                                DW TestVectorVertices
  13++E565 00 00                                DB 0,0                      ; Type and Tactics
  14++E567
  15++E567 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E56B 00 00
  16++E56D 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E571 00 00
  17++E573 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E577 01 01
  18++E579 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E57D 01 01
  19++E57F 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E583 02 02
  20++E585 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E589 02 02
  21++E58B 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E58F 03 03
  22++E591              TestVectorVertSize      equ $  - TestVectorVertices
  23++E591 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E595 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E599 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E59D 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E5A1              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E5A1              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E5A1              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E5A1 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E5A5 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E5A9 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E5AD 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B1              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E5B1              TestVectorLen           equ $  - TestVector
  36++E5B1
# file closed: ./Data/Ships/TestVector.asm
  72+ E5B1                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E5B1 00 26 49     Thargoid:	DB $00, $26, $49
   2++E5B4 41 E6                    DW ThargoidEdges
   3++E5B6 68                       DB ThargoidEdgesSize
   4++E5B7 3C 26                    DB $3C, $26
   5++E5B9 78                       DB ThargoidVertSize
   6++E5BA 1A                       DB ThargoidEdgesCnt
   7++E5BB 01 F4                    DB $01, $F4
   8++E5BD 28                       DB ThargoidNormalsSize
   9++E5BE 37 F0 27                 DB $37, $F0, $27
  10++E5C1 A9 E6                    DW ThargoidNormals
  11++E5C3 02 16                    DB $02, $16
  12++E5C5 C9 E5                    DW ThargoidVertices
  13++E5C7 00 00                    DB 0,0                      ; Type and Tactics
  14++E5C9
  15++E5C9 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E5CD 40 88
  16++E5CF 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E5D3 10 44
  17++E5D5 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E5D9 21 44
  18++E5DB 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E5DF 32 44
  19++E5E1 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E5E5 43 55
  20++E5E7 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E5EB 54 66
  21++E5ED 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E5F1 64 77
  22++E5F3 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E5F7 74 88
  23++E5F9 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E5FD 80 99
  24++E5FF 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E603 10 99
  25++E605 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E609 21 99
  26++E60B 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E60F 32 99
  27++E611 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E615 53 99
  28++E617 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E61B 65 99
  29++E61D 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E621 76 99
  30++E623 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E627 87 99
  31++E629 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E62D 99 99
  32++E62F 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E633 99 99
  33++E635 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E639 99 99
  34++E63B 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E63F 99 99
  35++E641
  36++E641              ThargoidVertSize: equ $ - ThargoidVertices
  37++E641
  38++E641
  39++E641
  40++E641 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E645 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E649 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E64D 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E651 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E655 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E659 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E65D 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E661 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E665 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E669 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E66D 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E671 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E675 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E679 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E67D 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E681 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E685 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E689 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E68D 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E691 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E695 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E699 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E69D 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E6A1 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E6A5 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E6A9
  67++E6A9              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E6A9
  69++E6A9              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E6A9
  71++E6A9 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E6AD 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E6B1 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E6B5 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E6B9 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E6BD 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E6C1 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E6C5 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E6C9 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E6CD 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E6D1
  82++E6D1
  83++E6D1              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E6D1              ThargoidLen: equ $ - Thargoid
  85++E6D1
# file closed: ./Data/Ships/Thargoid.asm
  73+ E6D1                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E6D1 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E6D4 25 E7        	DW ThargonEdges
   3++E6D6 3C           	DB ThargonEdgesSize
   4++E6D7 00 12        	DB $00, $12
   5++E6D9 3C           	DB ThargonVertSize
   6++E6DA 0F           	DB ThargonEdgesCnt
   7++E6DB 00 32        	DB $00, $32
   8++E6DD 1C           	DB ThargonNormalsSize
   9++E6DE 14 14 1E     	DB $14, $14, $1E
  10++E6E1 61 E7        	DW ThargonNormals
  11++E6E3 02 10        	DB $02, $10
  12++E6E5 E9 E6        	DW ThargonVertices
  13++E6E7 00 00                                DB 0,0                      ; Type and Tactics
  14++E6E9
  15++E6E9
  16++E6E9 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E6ED 01 55
  17++E6EF 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E6F3 01 22
  18++E6F5 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E6F9 02 33
  19++E6FB 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E6FF 03 44
  20++E701 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E705 04 55
  21++E707 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E70B 15 66
  22++E70D 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E711 12 66
  23++E713 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E717 23 66
  24++E719 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E71D 34 66
  25++E71F 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E723 45 66
  26++E725
  27++E725              ThargonVertSize: equ $ - ThargonVertices
  28++E725
  29++E725
  30++E725 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E729 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E72D 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E731 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E735 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E739 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E73D 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E741 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E745 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E749 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E74D 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E751 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E755 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E759 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E75D 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E761
  46++E761              ThargonEdgesSize: equ $ - ThargonEdges
  47++E761
  48++E761
  49++E761              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E761
  51++E761
  52++E761 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E765 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E769 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E76D 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E771 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E775 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E779 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E77D
  60++E77D
  61++E77D              ThargonNormalsSize: equ $ - ThargonNormals
  62++E77D              ThargonLen: equ $ - Thargon
  63++E77D
# file closed: ./Data/Ships/Thargon.asm
  74+ E77D                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E77D 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E780 73 E8        	DW TransportType10Edges
   3++E782 B8           	DB TransportType10EdgesSize
   4++E783 30 1A        	DB $30, $1A
   5++E785 DE           	DB TransportType10VertSize
   6++E786 2E           	DB TransportType10EdgesCnt
   7++E787 00 00        	DB $00, $00
   8++E789 38           	DB TransportType10NormalsSize
   9++E78A 10 20 0A     	DB $10, $20, $0A
  10++E78D 2B E9        	DW TransportType10Normals
  11++E78F 02 00        	DB $02, $00
  12++E791 95 E7        	DW TransportType10Vertices
  13++E793 00 00                                DB 0,0                      ; Type and Tactics
  14++E795
  15++E795 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E799 06 77
  16++E79B 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E79F 01 77
  17++E7A1 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E7A5 01 22
  18++E7A7 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E7AB 02 33
  19++E7AD 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E7B1 03 44
  20++E7B3 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E7B7 04 55
  21++E7B9 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E7BD 05 66
  22++E7BF 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E7C3 FF FF
  23++E7C5 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E7C9 17 89
  24++E7CB 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E7CF 12 39
  25++E7D1 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E7D5 34 5A
  26++E7D7 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E7DB 56 AB
  27++E7DD 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E7E1 89 CD
  28++E7E3 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E7E7 39 DD
  29++E7E9 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E7ED 3A DD
  30++E7EF 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E7F3 AB CD
  31++E7F5 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E7F9 77 77
  32++E7FB 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E7FF 77 77
  33++E801 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E805 77 77
  34++E807 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E80B 77 77
  35++E80D 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E811 77 77
  36++E813 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E817 77 77
  37++E819 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E81D 66 66
  38++E81F 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E823 66 66
  39++E825 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E829 66 66
  40++E82B 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E82F 66 66
  41++E831 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E835 66 66
  42++E837 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E83B 66 66
  43++E83D 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E841 66 66
  44++E843 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E847 33 33
  45++E849 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E84D 33 33
  46++E84F 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E853 33 33
  47++E855 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E859 33 33
  48++E85B 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E85F 00 00
  49++E861 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E865 00 00
  50++E867 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E86B 00 00
  51++E86D 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E871 00 00
  52++E873
  53++E873              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E873
  55++E873
  56++E873
  57++E873 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E877 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E87B 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E87F 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E883 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E887 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E88B 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E88F 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E893 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E897 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E89B 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E89F 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E8A3 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E8A7 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E8AB 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E8AF 11 19 20 24  	DB $11, $19, $20, $24
  73++E8B3 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E8B7 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E8BB 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E8BF 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++E8C3 10 89 20 30  	DB $10, $89, $20, $30
  78++E8C7 1F 39 24 34  	DB $1F, $39, $24, $34
  79++E8CB 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++E8CF 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++E8D3 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++E8D7 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++E8DB 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++E8DF 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++E8E3 07 77 40 44  	DB $07, $77, $40, $44
  86++E8E7 07 77 48 4C  	DB $07, $77, $48, $4C
  87++E8EB 07 77 4C 50  	DB $07, $77, $4C, $50
  88++E8EF 07 77 48 50  	DB $07, $77, $48, $50
  89++E8F3 07 77 50 54  	DB $07, $77, $50, $54
  90++E8F7 07 66 58 5C  	DB $07, $66, $58, $5C
  91++E8FB 07 66 5C 60  	DB $07, $66, $5C, $60
  92++E8FF 07 66 60 58  	DB $07, $66, $60, $58
  93++E903 07 66 64 68  	DB $07, $66, $64, $68
  94++E907 07 66 68 6C  	DB $07, $66, $68, $6C
  95++E90B 07 66 64 6C  	DB $07, $66, $64, $6C
  96++E90F 07 66 6C 70  	DB $07, $66, $6C, $70
  97++E913 06 33 74 78  	DB $06, $33, $74, $78
  98++E917 06 33 7C 80  	DB $06, $33, $7C, $80
  99++E91B 08 00 84 88  	DB $08, $00, $84, $88
 100++E91F 05 00 88 8C  	DB $05, $00, $88, $8C
 101++E923 05 00 8C 90  	DB $05, $00, $8C, $90
 102++E927 05 00 90 84  	DB $05, $00, $90, $84
 103++E92B
 104++E92B              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++E92B
 106++E92B
 107++E92B              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++E92B
 109++E92B
 110++E92B 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++E92F BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++E933 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++E937 5F 00 22 00  	DB $5F, $00, $22, $00
 114++E93B 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++E93F 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++E943 1F 08 20 03  	DB $1F, $08, $20, $03
 117++E947 9F 08 20 03  	DB $9F, $08, $20, $03
 118++E94B 93 08 22 0B  	DB $93, $08, $22, $0B
 119++E94F 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++E953 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++E957 13 08 22 0B  	DB $13, $08, $22, $0B
 122++E95B 1F 00 26 11  	DB $1F, $00, $26, $11
 123++E95F 1F 00 00 79  	DB $1F, $00, $00, $79
 124++E963
 125++E963
 126++E963              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++E963              TransportType10Len: equ $ - TransportType10
 128++E963
# file closed: ./Data/Ships/TransportType10.asm
  75+ E963                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++E963              ; Mapping Orginal to new
   2++E963              ; 0    => 0
   3++E963              ; 1-2  => 1-2
   4++E963              ; 3    => EQU Edges
   5++E963              ; 4    => EQU Normals
   6++E963              ; 5    => EQU EdgesCnt
   7++E963              ; 6    => 6
   8++E963              ; 7    => 7
   9++E963              ; 8    => EQU VertSize
  10++E963              ; 9    => EQU EdgesCnt
  11++E963              ; 10-11=> 10-11
  12++E963              ; 12   => EQU  NormalsSize
  13++E963              ; 13   => 13
  14++E963              ; 14   => 14
  15++E963              ; 15   => 15
  16++E963              ; 16   => EQU Edges
  17++E963              ; 17   => EQU Normals
  18++E963              ; 18   => 18
  19++E963              ; 19   => 19
  20++E963              ;\ -> &5C93  \ Viper = Type 16
  21++E963 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E966 D5 E9                                DW ViperEdges
  23++E968 50                                   DB ViperEdgesSize
  24++E969 00 2A                                DB $00,$2A
  25++E96B 5A                                   DB ViperVertSize
  26++E96C 14                                   DB ViperEdgesCnt
  27++E96D 00 00                                DB $00,$00
  28++E96F 1C                                   DB ViperNormalsSize
  29++E970 17 64 20                             DB $17, $64, $20
  30++E973 25 EA                                DW ViperNormals
  31++E975 01 11                                DB $01, $11
  32++E977 7B E9                                DW ViperVertices
  33++E979 00 00                                DB 0,0                      ; Type and Tactics
  34++E97B
  35++E97B 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++E97F 21 43
  36++E981 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++E985 10 22
  37++E987 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++E98B 43 55
  38++E98D 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++E991 42 66
  39++E993 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++E997 31 66
  40++E999 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++E99D 54 66
  41++E99F 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++E9A3 35 66
  42++E9A5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++E9A9 20 66
  43++E9AB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++E9AF 10 66
  44++E9B1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++E9B5 66 66
  45++E9B7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++E9BB 66 66
  46++E9BD 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++E9C1 66 66
  47++E9C3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++E9C7 66 66
  48++E9C9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++E9CD 66 66
  49++E9CF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++E9D3 66 66
  50++E9D5              ViperVertSize           equ $  - ViperVertices
  51++E9D5 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++E9D9 1E 21 00 04
  52++E9DD 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++E9E1 1F 31 00 10
  53++E9E5 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++E9E9 1E 10 04 20
  54++E9ED 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++E9F1 1E 53 08 18
  55++E9F5 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++E9F9 1E 65 14 18
  56++E9FD 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EA01 1E 63 10 18
  57++EA05 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EA09 1E 46 0C 14
  58++EA0D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EA11 12 66 24 34
  59++EA15 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EA19 12 66 28 38
  60++EA1D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EA21 10 66 30 34
  61++EA25              ViperEdgesSize          equ $  - ViperEdges
  62++EA25              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EA25 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EA29 9F 16 21 0B
  64++EA2D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EA31 DF 16 21 0B
  65++EA35 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EA39 5F 00 20 00
  66++EA3D 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EA41              ViperNormalsSize        equ $  - ViperNormals
  68++EA41              ViperLen                equ $  - Viper
  69++EA41
# file closed: ./Data/Ships/Viper.asm
  76+ EA41                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EA41 00 26 49     Worm:	                DB $00, $26, $49
   2++EA44 95 EA                                DW WormEdges
   3++EA46 40                                   DB WormEdgesSize
   4++EA47 00 12                                DB $00, $12
   5++EA49 3C                                   DB WormVertSize
   6++EA4A 10                                   DB WormEdgesCnt
   7++EA4B 00 00                                DB $00, $00
   8++EA4D 20                                   DB WormNormalsSize
   9++EA4E 13 1E 17                             DB $13, $1E, $17
  10++EA51 D5 EA                                DW WormNormals
  11++EA53 03 08                                DB $03, $08
  12++EA55 59 EA                                DW WormVertices
  13++EA57 00 00                                DB 0,0                      ; Type and Tactics
  14++EA59 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EA5D 02 77
  15++EA5F 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EA63 03 77
  16++EA65 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EA69 01 24
  17++EA6B 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EA6F 01 35
  18++EA71 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EA75 24 77
  19++EA77 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EA7B 35 77
  20++EA7D 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EA81 46 77
  21++EA83 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EA87 56 77
  22++EA89 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EA8D 14 66
  23++EA8F 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EA93 15 66
  24++EA95
  25++EA95              WormVertSize: equ $ - WormVertices
  26++EA95
  27++EA95
  28++EA95 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EA99 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EA9D 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EAA1 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EAA5 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EAA9 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EAAD 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EAB1 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EAB5 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EAB9 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EABD 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EAC1 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EAC5 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EAC9 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EACD 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EAD1 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EAD5
  45++EAD5              WormEdgesSize: equ $ - WormEdges
  46++EAD5
  47++EAD5
  48++EAD5              WormEdgesCnt: equ WormEdgesSize/4
  49++EAD5
  50++EAD5
  51++EAD5 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EAD9 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EADD 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EAE1 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EAE5 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EAE9 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EAED 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EAF1 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EAF5
  60++EAF5
  61++EAF5              WormNormalsSize: equ $ - WormNormals
  62++EAF5              WormLen: equ $ - Worm
  63++EAF5
# file closed: ./Data/Ships/Worm.asm
  77+ EAF5                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++EAF5 02 17 70     Rattler:	DB $02, $17, $70
   2++EAF8 67 EB                    DW RattlerEdges
   3++EAFA 68                       DB RattlerEdgesSize
   4++EAFB 00 2A                    DB $00, $2A
   5++EAFD 5A                       DB RattlerVertSize
   6++EAFE 1A                       DB RattlerEdgesCnt
   7++EAFF 00 96                    DB $00, $96
   8++EB01 34                       DB RattlerNormalsSize
   9++EB02 0A 71 1F                 DB $0A, $71, $1F
  10++EB05 CF EB                    DW RattlerNormals
  11++EB07 01 22                    DB $01, $22
  12++EB09 0D EB                    DW RattlerVertices
  13++EB0B 00 00                                DB 0,0                      ; Type and Tactics
  14++EB0D
  15++EB0D
  16++EB0D 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++EB11 89 23
  17++EB13 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++EB17 9A 34
  18++EB19 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++EB1D 78 12
  19++EB1F 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++EB23 AB 45
  20++EB25 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++EB29 67 01
  21++EB2B 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++EB2F CC 5B
  22++EB31 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++EB35 CC 06
  23++EB37 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++EB3B FF FF
  24++EB3D 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++EB41 FF FF
  25++EB43 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++EB47 CC CC
  26++EB49 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++EB4D CC CC
  27++EB4F 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++EB53 CC CC
  28++EB55 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++EB59 CC CC
  29++EB5B 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++EB5F CC CC
  30++EB61 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++EB65 CC CC
  31++EB67
  32++EB67              RattlerVertSize: equ $ - RattlerVertices
  33++EB67
  34++EB67
  35++EB67 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++EB6B 1F 17 08 10  	DB $1F, $17, $08, $10
  37++EB6F 1F 28 00 08  	DB $1F, $28, $00, $08
  38++EB73 1F 39 00 04  	DB $1F, $39, $00, $04
  39++EB77 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++EB7B 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++EB7F 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++EB83 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++EB87 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++EB8B 1F 67 10 20  	DB $1F, $67, $10, $20
  45++EB8F 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++EB93 1F 78 08 20  	DB $1F, $78, $08, $20
  47++EB97 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++EB9B 1F 89 00 20  	DB $1F, $89, $00, $20
  49++EB9F 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++EBA3 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++EBA7 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++EBAB 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++EBAF 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++EBB3 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++EBB7 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++EBBB 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++EBBF 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++EBC3 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++EBC7 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++EBCB 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++EBCF
  62++EBCF              RattlerEdgesSize: equ $ - RattlerEdges
  63++EBCF
  64++EBCF
  65++EBCF              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++EBCF
  67++EBCF
  68++EBCF 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++EBD3 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++EBD7 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++EBDB 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++EBDF 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++EBE3 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++EBE7 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++EBEB DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++EBEF DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++EBF3 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++EBF7 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++EBFB 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++EBFF 3F 00 00 60  	DB $3F, $00, $00, $60
  81++EC03
  82++EC03              RattlerNormalsSize: equ $ - RattlerNormals
  83++EC03              RattlerLen: equ $ - Rattler
  84++EC03
# file closed: ./Data/Ships/Rattler.asm
  78+ EC03
# file closed: ./Data/ShipModelMetaData3.asm
1066  EC03              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1067  EC03              ;;Privisioned for more models     SLOT    ShipModelsAddr
1068  EC03              ;;Privisioned for more models     PAGE    BankShipModels4
1069  EC03              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1070  EC03
1071  EC03              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1072  EC03                  SLOT    SpritemembankAddr
1073  EC03                  PAGE    BankSPRITE
1074  EC03              	ORG     SpritemembankAddr, BankSPRITE
1075  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: ./Layer3Sprites/sprite_routines.asm
1076  E154                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: ./Layer3Sprites/sprite_load.asm
1077  E16B                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: ./Layer3Sprites/SpriteSheet.asm
1078  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1079  ED6B                  SLOT    ConsoleImageAddr
1080  ED6B                  PAGE    BankConsole
1081  ED6B              	ORG     ConsoleImageAddr, BankConsole
1082  E000
1083  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
1084  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1085  E900                  SLOT    ViewFrontAddr
1086  E900                  PAGE    BankFrontView
1087  E900                  ORG     ViewFrontAddr
1088  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 24 94                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 25 94                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 20 94                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 23 94     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 22 94                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 A6 C0     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 17 94                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 18 94                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 15 94                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 16 94     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 14 94                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 A7 C0     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 47 E0                             call    l1_cls
  50+ C071 CD 52 E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 3F E1                             call    sprite_cls_cursors
  55+ C082                                      MMUSelectConsoleBank
  55+ C082 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  56+ C086 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  57+ C089 11 00 E0                             ld          de,ConsoleImageData
  58+ C08C 01 00 08                             ld          bc, ScreenL1BottomLen
  59+ C08F CD F2 90                             call        memcopy_dma
  60+ C092 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  61+ C095 11 00 E8                             ld          de,ConsoleAttributes
  62+ C098 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  63+ C09B CD F2 90                             call        memcopy_dma
  64+ C09E CD 55 8D                             call        InitialiseStars
  65+ C0A1 AF                                   xor         a
  66+ C0A2 32 75 94                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  67+ C0A5 C9                                   ret
  68+ C0A6
  69+ C0A6              dampenRate:             equ     $04
  70+ C0A6 04           dampenRcounter:         DB      dampenRate
  71+ C0A7 04           dampenPcounter:         DB      dampenRate
  72+ C0A8 AF           input_front_view:       xor         a
  73+ C0A9 2A 57 91                             ld      hl,(addr_Pressed_Accellerate)
  74+ C0AC 7E                                   ld      a,(hl)
  75+ C0AD                                      IfAIsZeroGoto     TestDecellerate
  75+ C0AD A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  75+ C0AE CA CA C0    >				jp	z, TestDecellerate
  76+ C0B1 3A 5F 94                             ld      a,(SHIPMAXSPEED)
  77+ C0B4 57                                   ld      d,a
  78+ C0B5 3A 60 94                             ld      a,(DELTA)
  79+ C0B8                                      JumpIfAGTENusng d,TestDecellerate
  79+ C0B8 BA          >                        cp     d
  79+ C0B9 D2 CA C0    >                        jp		nc,TestDecellerate
  80+ C0BC 3C                                   inc     a
  81+ C0BD 32 60 94                             ld      (DELTA),a
  82+ C0C0 2A 61 94                             ld      hl,(DELT4Lo)
  83+ C0C3 ED 34 04 00                          add     hl,4
  84+ C0C7 22 61 94                             ld      (DELT4Lo),hl
  85+ C0CA 2A 59 91     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  86+ C0CD 7E                                   ld      a,(hl)
  87+ C0CE                                      IfAIsZeroGoto   TestLeftPressed
  87+ C0CE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  87+ C0CF CA E7 C0    >				jp	z, TestLeftPressed
  88+ C0D2 3A 60 94                             ld      a,(DELTA)
  89+ C0D5                                      IfAIsZeroGoto   TestLeftPressed
  89+ C0D5 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  89+ C0D6 CA E7 C0    >				jp	z, TestLeftPressed
  90+ C0D9 3D                                   dec     a
  91+ C0DA 32 60 94                             ld      (DELTA),a
  92+ C0DD 2A 61 94                             ld      hl,(DELT4Lo)
  93+ C0E0 2B                                   dec     hl
  94+ C0E1 2B                                   dec     hl
  95+ C0E2 2B                                   dec     hl
  96+ C0E3 2B                                   dec     hl
  97+ C0E4 22 61 94                             ld      (DELT4Lo),hl
  98+ C0E7 2A 4F 91     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  99+ C0EA 7E                                   ld      a,(hl)
 100+ C0EB                                      IfAIsZeroGoto   TestRightPressed
 100+ C0EB A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 100+ C0EC CA 02 C1    >				jp	z, TestRightPressed
 101+ C0EF 3A 20 94                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 102+ C0F2 21 27 94                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 103+ C0F5 BE                                   cp      (hl)
 104+ C0F6 28 0A                                jr      z,TestRightPressed
 105+ C0F8                                      ;break
 106+ C0F8 3D                                   dec     a                                   ; increase joystick roll
 107+ C0F9 32 20 94                             ld      (JSTX),a
 108+ C0FC CD 10 C0                             call    draw_front_calc_alpha
 109+ C0FF C3 37 C1                             jp      TestDivePressed                    ; when pressing ignore damper
 110+ C102 2A 51 91     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 111+ C105 7E                                   ld      a,(hl)
 112+ C106                                      IfAIsZeroGoto   .DampenRoll
 112+ C106 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 112+ C107 CA 1D C1    >				jp	z, .DampenRoll
 113+ C10A 3A 20 94                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 114+ C10D 21 26 94                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 115+ C110 BE                                   cp      (hl)
 116+ C111 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 117+ C113                                      ;break
 118+ C113 3C                                   inc     a                                   ; increase joystick roll
 119+ C114 32 20 94     .UpdateAlphRoll:        ld      (JSTX),a
 120+ C117 CD 10 C0                             call    draw_front_calc_alpha
 121+ C11A C3 37 C1                             jp      TestDivePressed                    ; when pressing ignore damper
 122+ C11D 21 A6 C0     .DampenRoll:            ld      hl,dampenRcounter
 123+ C120 35                                   dec     (hl)
 124+ C121 20 14                                jr      nz,TestDivePressed
 125+ C123 3E 04                                ld      a,dampenRate
 126+ C125 77                                   ld      (hl),a
 127+ C126 3A 20 94                             ld      a,(JSTX)
 128+ C129 FE 00                                cp      0
 129+ C12B 28 0A                                jr      z, TestDivePressed
 130+ C12D CB 7F                                bit     7,a
 131+ C12F 28 03                                jr      z,.PosRollDampen
 132+ C131 3C           .NegRollDampen:         inc     a
 133+ C132 18 01                                jr      .ApplyRollDampen
 134+ C134 3D           .PosRollDampen:         dec     a
 135+ C135 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 136+ C137              ; Dive and Climb input
 137+ C137 2A 53 91     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 138+ C13A 7E                                   ld      a,(hl)
 139+ C13B                                      IfAIsZeroGoto   TestClimbPressed
 139+ C13B A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 139+ C13C CA 52 C1    >				jp	z, TestClimbPressed
 140+ C13F 3A 15 94                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 141+ C142 21 1A 94                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 142+ C145 BE                                   cp      (hl)
 143+ C146 28 0A                                jr      z,TestClimbPressed
 144+ C148                                      ;break
 145+ C148 3D                                   dec     a                                   ; increase joystick roll
 146+ C149 32 15 94                             ld      (JSTY),a
 147+ C14C CD 3D C0                             call    draw_front_calc_beta
 148+ C14F C3 87 C1                             jp      ForwardViewDoneKeys
 149+ C152 2A 55 91     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 150+ C155 7E                                   ld      a,(hl)
 151+ C156                                      IfAIsZeroGoto   .DampenPitch
 151+ C156 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 151+ C157 CA 6D C1    >				jp	z, .DampenPitch
 152+ C15A 3A 15 94                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 153+ C15D 21 19 94                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 154+ C160 BE                                   cp      (hl)
 155+ C161 28 24                                jr      z,ForwardViewDoneKeys
 156+ C163 3C                                   inc     a                                   ; increase joystick roll
 157+ C164 32 15 94     .UpdateBetaPitch:       ld      (JSTY),a
 158+ C167 CD 3D C0                             call    draw_front_calc_beta
 159+ C16A C3 87 C1                             jp      ForwardViewDoneKeys
 160+ C16D 21 A7 C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 161+ C170 35                                   dec     (hl)
 162+ C171 20 14                                jr      nz,ForwardViewDoneKeys
 163+ C173 3E 04                                ld      a,dampenRate
 164+ C175 77                                   ld      (hl),a
 165+ C176 3A 15 94                             ld      a,(JSTY)
 166+ C179 FE 00                                cp      0
 167+ C17B 28 0A                                jr      z,ForwardViewDoneKeys
 168+ C17D CB 7F                                bit     7,a
 169+ C17F 28 03                                jr      z,.PosPitchDampen
 170+ C181 3C           .NegPitchDampen:        inc     a
 171+ C182 18 01                                jr      .ApplyPitchDampen
 172+ C184 3D           .PosPitchDampen:        dec     a
 173+ C185 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 174+ C187 C9           ForwardViewDoneKeys:    ret
 175+ C188
 176+ C188
 177+ C188
 178+ C188
 179+ C188
 180+ C188
 181+ C188
# file closed: ./Views/Front_View.asm
1089  C188              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1090  C188                  SLOT    MenuStatusAddr
1091  C188                  PAGE    BankMenuStatus
1092  C188                  ORG     MenuStatusAddr
1093  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 94 AC  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 23 95  						DW $0290,CommanderName
   5+ C018 08 0B A8 AC  						DW $0B08,txt_present_system
   6+ C01C 08 13 BB AC  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B CE AC  						DW $1B08,txt_condition
   8+ C024 08 23 DC AC  						DW $2308,txt_fuel
   9+ C028 08 2B EA AC  						DW $2B08,txt_cash
  10+ C02C 08 33 F8 AC  						DW $3308,txt_legal_status
  11+ C030 08 3B 06 AD  						DW $3B08,txt_rating
  12+ C034 08 4B 14 AD  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A 2B 98     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A 29 98                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A 36 95     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD CC 90                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 46 98                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A 36 95     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B 2D 95                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A 36 95     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B 7A 95                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 7E 9A                             ld		hl, ConditionNameIdx
 223+ CE45 CD 80 9B                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD 71 AD     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 1F AD                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 3F 95     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 5F 9C                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 6E 9C     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 65 9C     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 52 95  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 8B 9B                             call	getRankIndex
 260+ CEA9 21 6A 9B                             ld		hl, RankingNameIdx
 261+ CEAC CD 80 9B                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 47 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c, .FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD 80 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A 75 94     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 F8 94     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A 58 95     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E              ;;;PrintEquipment:         ld		a,(hl)
 324+ CF1E              ;;;                        cp		0
 325+ CF1E              ;;;                        ret		z
 326+ CF1E              ;;;                        ld		a,b
 327+ CF1E              ;;;PrintEquipmentDirect:	call	expandTokenToString
 328+ CF1E              ;;;                        ld		hl,TextBuffer
 329+ CF1E              ;;;                        ld		de,(equipment_cursor)
 330+ CF1E              ;;;                        call	l1_print_at
 331+ CF1E              ;;;                        ld		bc,(equipment_cursor)
 332+ CF1E              ;;;                        ld		a,b
 333+ CF1E              ;;;                        add		a,8
 334+ CF1E              ;;;                        ld		b,a
 335+ CF1E              ;;;                        ld		(equipment_cursor),bc
 336+ CF1E              ;;;                        cp		equipmax_row
 337+ CF1E              ;;;                        jr		c,.SkipColUpdate
 338+ CF1E              ;;;.ColUpdate:             ld		hl,equipment_position2
 339+ CF1E              ;;;                        ld		(equipment_cursor),hl
 340+ CF1E              ;;;                        ret
 341+ CF1E              ;;;.SkipColUpdate:	        ld		a,b
 342+ CF1E              ;;;                        ld		(equipment_cursor+1), a
 343+ CF1E              ;;;                        ret
 344+ CF1E
 345+ CF1E              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF1E
   2++CF1E                  MMUSelectLayer1
   2++CF1E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF22 CD 47 E0     	call	l1_cls
   4++CF25 3E 07        	ld		a,7
   5++CF27 CD 53 E0     	call	l1_attr_cls_to_a
   6++CF2A                  MMUSelectLayer2
   6++CF2A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF2E CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF31 CD C9 E0     	call	l2_cls	; Get some space
   9++CF34              	MMUSelectSpriteBank
   9++CF34 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF38 CD 3F E1     	call    sprite_cls_cursors
  11++CF3B
  12++CF3B
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF3B 3E 08                                ld		a,8
 347+ CF3D 32 70 94                             ld		(MenuIdMax),a
 348+ CF40 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF43 11 FD BE                             ld		de,$BEFD
 350+ CF46 3E C0                                ld		a,$C0
 351+ CF48                                      MMUSelectLayer2
 351+ CF48 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF4C CD F6 E1                             call	l2_draw_box
 353+ CF4F 01 01 0A                             ld		bc,$0A01
 354+ CF52 11 C0 FE                             ld		de,$FEC0
 355+ CF55 CD 62 E2                             call	l2_draw_horz_line
 356+ CF58 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF5B CD BC CE                             call    draw_STAT_items
 358+ CF5E CD F3 CD                             call    draw_STAT_maintext
 359+ CF61 C9                                   ret
 360+ CF62
 361+ CF62              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF62              ; Handles all the input whilst in the market menu
 363+ CF62 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF64 CD 52 92                             call    is_key_pressed
 365+ CF67 CC 73 CF                             call    z,STAT_UpPressed
 366+ CF6A 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF6C CD 52 92                             call    is_key_pressed
 368+ CF6F CC 85 CF                             call    z,STAT_DownPressed
 369+ CF72 C9                                   ret
 370+ CF73
 371+ CF73              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CF73 AF           STAT_UpPressed:         xor     a
 373+ CF74 32 3A C0                             ld      (STAT_selected_row),a
 374+ CF77 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CF7A FE 00                                cp      0
 376+ CF7C C8                                   ret     z
 377+ CF7D 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CF7E 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CF81 CD BC CE                             call    draw_STAT_items
 380+ CF84 C9                                   ret
 381+ CF85              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CF85 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CF87 32 3A C0                             ld      (STAT_selected_row),a
 384+ CF8A 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CF8D 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CF8E 05                                   dec     b
 387+ CF8F 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CF92 B8                                   cp      b
 389+ CF93 C8                                   ret     z
 390+ CF94 FE 09                                cp      STAT_eqip_window_len-1
 391+ CF96 28 05                                jr      z, .check_scroll_down
 392+ CF98 21 3A C0                             ld      hl,STAT_selected_row
 393+ CF9B 34                                   inc     (hl)
 394+ CF9C C9                                   ret
 395+ CF9D 47           .check_scroll_down:     ld      b,a
 396+ CF9E 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFA1 80                                   add     b
 398+ CFA2 3C                                   inc     a
 399+ CFA3 21 3C C0                             ld      hl,STAT_current_end
 400+ CFA6                                      ReturnIfAGTEusng      (hl)
 400+ CFA6 BE          >				  cp    (hl)
 400+ CFA7 D0          >                  ret	 nc
 401+ CFA8 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFAB 34                                   inc     (hl)
 403+ CFAC CD BC CE                             call    draw_STAT_items
 404+ CFAF C9                                   ret
 405+ CFB0
# file closed: ./Menus/status_menu.asm
1094  CFB0
1095  CFB0              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1096  CFB0
1097  CFB0                  SLOT    MenuEquipSAddr
1098  CFB0                  PAGE    BankMenuEquipS
1099  CFB0                  ORG     MenuEquipSAddr
1100  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 CD A0  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD 80 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 2B 98     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 29 98                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD 80 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD CC 90                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 47 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD 80 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 47 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 53 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 70 94                             ld      (MenuIdMax),a
 380+ D40C 3A 36 95     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 2D 95                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A 36 95     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 48 A0                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 52 92                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 52 92                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 52 92                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 52 92                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >				  cp    (hl)
 481+ D4EA D0          >                  ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 36 95     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 77 A1                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 44 98                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 2E 98     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 77 A1                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A 36 95     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 3E 95     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A 2B 98     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A 29 98                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 44 98     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 2D 98    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 3E 95     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 2E 98                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 77 A1                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 44 98                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 44 98     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 2E 98                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 8A A1                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1101  D651
1102  D651
1103  D651                  SLOT    LaunchShipAddr
1104  D651                  PAGE    BankLaunchShip
1105  D651                  ORG     LaunchShipAddr
1106  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 55 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 55 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 0B E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 0B E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD F2 90                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD F2 90                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 47 E0                             call    l1_cls
 129+ C180 CD 52 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 3F E1                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 5F 94    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 60 94    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 61 94 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 60 94    >                        ld      (DELTA),a
 160+ C1E9 32 61 94    >                        ld      (DELT4Lo),a
 160+ C1EC 32 62 94    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 75 94                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 47 E0                             call    l1_cls
 169+ C1FC CD 52 E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 3F E1                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 60 94    >                        ld      (DELTA),a
 200+ C257 32 61 94    >                        ld      (DELT4Lo),a
 200+ C25A 32 62 94    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 75 94                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 75 94                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7 3E 04        .FinishedDocking        ld      a,ScreenStatus              ; Force move to status screen
 262+ C2C9 32 13 84                             ld      (ScreenTransitionForced),a
 263+ C2CC C9                                   ret
 264+ C2CD
 265+ C2CD
 266+ C2CD
# file closed: ./Transitions/launch_ship.asm
1107  C2CD
1108  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1109  C2CD                  SLOT    UniverseBankAddr
1110  C2CD                  PAGE    BankUNIVDATA0
1111  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1112  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   8+ C000              ; This means each gets its own line list, inwork etc
   9+ C000
  10+ C000              ; "Runtime Ship Data paged into in Bank 7"
  11+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  11+ C004 65 72 73 65
  11+ C008 20 50 47
  12+ C00B 58           StartOfUnivN:       DB "X"
  13+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  14+ C00C
  15+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  16+ C00C              ; Universe map substibute for INWK
  17+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  18+ C00C                                      INCLUDE "./Variables/ShipPosVars.asm"
# file opened: ././Variables/ShipPosVars.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015
  12++C015              INWKxlo                     equ UBnKxlo
  13++C015              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C015              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C015              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C015              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C015              INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C015              INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C015              INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C015              INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Variables/ShipPosVars.asm
  19+ C015                                      INCLUDE "./Variables/RotationMatrixVars.asm"
# file opened: ././Variables/RotationMatrixVars.asm
   1++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C027
# file closed: ././Variables/RotationMatrixVars.asm
  20+ C027                                      INCLUDE "./Variables/AIRuntimeData.asm"
# file opened: ././Variables/AIRuntimeData.asm
   1++C027              ; -- Ship AI data
   2++C027
   3++C027 00           UBnkspeed                   DB  0                       ; INWK +27
   4++C028 00           UBnkAccel                   DB  0                       ; INWK +28
   5++C029 00           UBnkrotXCounter             DB  0                       ; INWK +29
   6++C02A 00           UBnkrotZCounter             DB  0                       ; INWK +30
   7++C02B 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02C              ; Flags work as follows:
   9++C02C              ; 7 - Flag ship to be killed with debris
  10++C02C              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02C              ; 5 - Ship is exploding if set
  12++C02C              ; 4 -
  13++C02C              ; 3 - Display state - Plot as a Dot
  14++C02C              ; 2 - Nbr of Missiles bit 2
  15++C02C              ; 1 - Nbr of Missiles bit 1
  16++C02C              ; 0 - Nbr of Missiles bit 0
  17++C02C 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02D 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02E 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C02F 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C030              ; Flags work as follows:
  22++C030              ;Bit	Description
  23++C030              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C030              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C030              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C030              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C030              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C030              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C030              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C030              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C030              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C030              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C030              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C030              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C030              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C030              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C030              ;                       This flag is randomly set for traders when they are spawned
  38++C030              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C030              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C030              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C030              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C030              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C030              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C030              ;                       Ships that are cops: Viper, Transporter
  45++C030              ;#7	Scooped, docked, escape pod flag
  46++C030              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C030              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C030              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C030
# file closed: ././Variables/AIRuntimeData.asm
  21+ C030
  22+ C030              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  23+ C030              ;                    [roofv x y z ] roof vector (up)
  24+ C030              ;                    [sidev x y z ] side vector (right)
  25+ C030              ;INWKspeed                   equ UBnkspeed               ; INWK +27UBnkTransmat2zLo  DB  0               ; XX16+16
  26+ C030              ;INWKAccel                   equ UBnkAccel               ; INWK +28          UBnkTransmat2zHi    DB  0               ; XX16+17
  27+ C030              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C030              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C030              ;--explDsp                     equ UBnkexplDsp             ; INWK +31 clear exploding/display state|missiles UBnkDrawCam0xHi   DB  0               ; XX18+1
  30+ C030              ;--aiatkecm                    equ UBnkaiatkecm            ; INWK +32 ai_attack_univ_ecm i.e. AI typeUBnkDrawCam0xSgn      DB  0               ; XX18+2
  31+ C030              ;INWKDrawCam0yLo             equ UBnkDrawCam0yLo         ; INWK +33UBnkDrawCam0yLo   DB  0               ; XX18+3
  32+ C030              ;INWKDrawCam0yHi             equ UBnkDrawCam0yHi         ; INWK +34UBnkDrawCam0yHi   DB  0               ; XX18+4
  33+ C030              ;INWKEnergy                  equ UbnKEnergy              ; INWK +35UBnkDrawCam0ySgn      DB  0               ; XX18+5
  34+ C030              ;UBnkDrawCam0ySgn    equ UbnKEnergy              ; Reycles but not a good idea TODO
  35+ C030              ;INWKNewb                    equ UbnKNewb                ; INWK +36 INWK+36 \ NEWB bit 7 remove ship?UBnkDrawCam0zLo     DB  0               ; XX18+6
  36+ C030                                      INCLUDE "./Variables/XX16Vars.asm"
# file opened: ././Variables/XX16Vars.asm
   1++C030              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C030 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C032              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C032 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C034 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C036 00 00        UBnkTransmatRoofvX          DW 0
   7++C038              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C038 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03A 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03C 00 00        UBnkTransmatNosevX          DW 0
  11++C03E              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C03E 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C040 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C042 00 00        UbnkTransmatTransX          DW 0
  15++C044 00 00        UbnkTransmatTransY          DW 0
  16++C046 00 00        UbnkTransmatTransZ          DW 0
  17++C048              XX16                        equ UBnkTransmatSidev
  18++C048              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C048 00 00        UbnkTransInvRow0x0          DW 0
  20++C04A 00 00        UbnkTransInvRow0x1          DW 0
  21++C04C 00 00        UbnkTransInvRow0x2          DW 0
  22++C04E 00 00        UbnkTransInvRow0x3          DW 0
  23++C050 00 00        UbnkTransInvRow1y0          DW 0
  24++C052 00 00        UbnkTransInvRow1y1          DW 0
  25++C054 00 00        UbnkTransInvRow1y2          DW 0
  26++C056 00 00        UbnkTransInvRow1y3          DW 0
  27++C058 00 00        UbnkTransInvRow2z0          DW 0
  28++C05A 00 00        UbnkTransInvRow2z1          DW 0
  29++C05C 00 00        UbnkTransInvRow2z2          DW 0
  30++C05E 00 00        UbnkTransInvRow2z3          DW 0
  31++C060
  32++C060              XX16Inv             equ UbnkTransInvRow0x0
  33++C060
# file closed: ././Variables/XX16Vars.asm
  37+ C060                                      INCLUDE "./Variables/XX25Vars.asm"
# file opened: ././Variables/XX25Vars.asm
   1++C060              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C060 00           UbnkProjxLo                 DB  0
   3++C061 00           UbnkProjxHi                 DB  0
   4++C062 00           UbnkProjxSgn                DB  0
   5++C063              UbnkProjx                   EQU UbnkProjxLo
   6++C063 00           UbnkProjyLo                 DB  0
   7++C064 00           UbnkProjyHi                 DB  0
   8++C065 00           UbnkProjySgn                DB  0
   9++C066              UbnkProjy                   EQU UbnkProjyLo
  10++C066 00           UbnkProjzLo                 DB  0
  11++C067 00           UbnkProjzHi                 DB  0
  12++C068 00           UbnkProjzSgn                DB  0
  13++C069              UbnkProjz                   EQU UbnkProjzLo
  14++C069              XX25                        EQU UbnkProjxLo
  15++C069
# file closed: ././Variables/XX25Vars.asm
  38+ C069                                      INCLUDE "./Variables/XX18Vars.asm"
# file opened: ././Variables/XX18Vars.asm
   1++C069              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C069 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C06A 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06B 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C06C              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C06C 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C06D 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C06E 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C06F              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C06F 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C070 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C071 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C072              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C072              XX18                        equ UBnkDrawCam0xLo
  15++C072
# file closed: ././Variables/XX18Vars.asm
  39+ C072
  40+ C072              ; Used to make 16 bit reads a little cleaner in source code
  41+ C072 00 00 00     UbnkZPoint                  DS  3
  42+ C075              UbnkZPointLo                equ UbnkZPoint
  43+ C075              UbnkZPointHi                equ UbnkZPoint+1
  44+ C075              UbnkZPointSign              equ UbnkZPoint+2
  45+ C075                                      INCLUDE "./Variables/XX15Vars.asm"
# file opened: ././Variables/XX15Vars.asm
   1++C075              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C075 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C076 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C077 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C078 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C079 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C07A 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07B
   9++C07B              XX15                        equ UBnkXScaled
  10++C07B              XX15VecX                    equ XX15
  11++C07B              XX15VecY                    equ XX15+1
  12++C07B              XX15VecZ                    equ XX15+2
  13++C07B              UbnkXPoint                  equ XX15
  14++C07B              UbnkXPointLo                equ XX15+0
  15++C07B              UbnkXPointHi                equ XX15+1
  16++C07B              UbnkXPointSign              equ XX15+2
  17++C07B              UbnkYPoint                  equ XX15+3
  18++C07B              UbnkYPointLo                equ XX15+3
  19++C07B              UbnkYPointHi                equ XX15+4
  20++C07B              UbnkYPointSign              equ XX15+5
  21++C07B              ; Repurposed XX15 pre clip plines
  22++C07B              UbnkPreClipX1               equ XX15+0
  23++C07B              UbnkPreClipY1               equ XX15+2
  24++C07B              UbnkPreClipX2               equ XX15+4
  25++C07B              UbnkPreClipY2               equ XX15+6
  26++C07B              ; Repurposed XX15 post clip lines
  27++C07B              UBnkNewX1                   equ XX15+0
  28++C07B              UBnkNewY1                   equ XX15+1
  29++C07B              UBnkNewX2                   equ XX15+2
  30++C07B              UBnkNewY2                   equ XX15+3
  31++C07B              ; Repurposed XX15
  32++C07B              regXX15fx                   equ UBnkXScaled
  33++C07B              regXX15fxSgn                equ UBnkXScaledSign
  34++C07B              regXX15fy                   equ UBnkYScaled
  35++C07B              regXX15fySgn                equ UBnkYScaledSign
  36++C07B              regXX15fz                   equ UBnkZScaled
  37++C07B              regXX15fzSgn                equ UBnkZScaledSign
  38++C07B              ; Repurposed XX15
  39++C07B              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07B              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07B              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07B              ; After clipping the coords are two 8 bit pairs
  43++C07B              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07B              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07B              ; Repurposed XX15 when plotting lines
  46++C07B              ; Repurposed XX15 before calling clip routine
  47++C07B              UBnkX1                      equ XX15
  48++C07B              UBnKx1Lo                    equ XX15
  49++C07B              UBnKx1Hi                    equ XX15+1
  50++C07B              UBnkY1                      equ XX15+2
  51++C07B              UbnKy1Lo                    equ XX15+2
  52++C07B              UBnkY1Hi                    equ XX15+3
  53++C07B              UBnkX2                      equ XX15+4
  54++C07B              UBnkX2Lo                    equ XX15+4
  55++C07B              UBnkX2Hi                    equ XX15+5
  56++C07B
# file closed: ././Variables/XX15Vars.asm
  46+ C07B                                      INCLUDE "./Variables/XX12Vars.asm"
# file opened: ././Variables/XX12Vars.asm
   1++C07B              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07B              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07B 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C07C 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C07D 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C07E 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C07F 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C080 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C081 00 00 00...  XX12Save                    DS  6
  10++C087 00 00 00...  XX12Save2                   DS  6
  11++C08D              XX12                        equ UBnkXX12xLo
  12++C08D              varXX12                     equ UBnkXX12xLo
  13++C08D              ; Repurposed XX12 when plotting lines
  14++C08D              UBnkY2                      equ XX12+0
  15++C08D              UbnKy2Lo                    equ XX12+0
  16++C08D              UBnkY2Hi                    equ XX12+1
  17++C08D              UBnkDeltaXLo                equ XX12+2
  18++C08D              UBnkDeltaXHi                equ XX12+3
  19++C08D              UBnkDeltaYLo                equ XX12+4
  20++C08D              UBnkDeltaYHi                equ XX12+5
  21++C08D              UbnkGradient                equ XX12+2
  22++C08D              UBnkTemp1                   equ XX12+2
  23++C08D              UBnkTemp1Lo                 equ XX12+2
  24++C08D              UBnkTemp1Hi                 equ XX12+3
  25++C08D              UBnkTemp2                   equ XX12+3
  26++C08D              UBnkTemp2Lo                 equ XX12+3
  27++C08D              UBnkTemp2Hi                 equ XX12+4
  28++C08D
# file closed: ././Variables/XX12Vars.asm
  47+ C08D
  48+ C08D
  49+ C08D              ; Post clipping the results are now 8 bit
  50+ C08D 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  51+ C08E
  52+ C08E 00           UBnkProjectedY              DB  0
  53+ C08F 00           UBnkProjectedX              DB  0
  54+ C090              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  55+ C090 00 00 00...  XX15Save                    DS  8
  56+ C098 00 00 00...  XX15Save2                   DS  8
  57+ C0A0 00           VarBackface                 DB 0
  58+ C0A1              ; Heap (or array) information for lines and normals
  59+ C0A1              ; Coords are stored XY,XY,XY,XY
  60+ C0A1              ; Normals
  61+ C0A1              ; This needs re-oprganising now.
  62+ C0A1              ; Runtime Calculation Store
  63+ C0A1
  64+ C0A1              FaceArraySize               equ 30
  65+ C0A1              EdgeHeapSize                equ 40
  66+ C0A1              NodeArraySize               equ 40
  67+ C0A1              LineArraySize               equ 50
  68+ C0A1              ; Storage arrays for data
  69+ C0A1              ; Structure of arrays
  70+ C0A1              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  71+ C0A1              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  72+ C0A1              ; NodeArray         -  4 bytes per element      0           1            2          3
  73+ C0A1              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  74+ C0A1              ; Line Array        -  4 bytes per eleement     0           1            2          3
  75+ C0A1              ;                                               X1          Y1           X2         Y2
  76+ C0A1 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  77+ C0BF 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  78+ C15F 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  79+ C1FF 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  80+ C2C7              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  81+ C2C7 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  82+ C2EF              ; Array current Lengths
  83+ C2EF 00           UbnkFaceVisArrayLen         DS 1
  84+ C2F0 00           UBnkNodeArrayLen            DS 1
  85+ C2F1 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  86+ C2F2 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  87+ C2F3              XX20                        equ UbnkLineArrayLen
  88+ C2F3              varXX20                     equ UbnkLineArrayLen
  89+ C2F3
  90+ C2F3
  91+ C2F3 00           UbnkEdgeHeapSize            DS 1
  92+ C2F4 00           UbnkEdgeHeapBytes           DS 1
  93+ C2F5 00           UBnkLinesHeapLen            DS 1
  94+ C2F6 00           UbnKEdgeHeapCounter         DS 1
  95+ C2F7 00           UbnKEdgeRadius              DS 1
  96+ C2F8 00           UbnKEdgeShipType            DS 1
  97+ C2F9 00           UbnKEdgeExplosionType       DS 1
  98+ C2FA
  99+ C2FA              ; Node heap is used to write out transformed Vertexs
 100+ C2FA
 101+ C2FA              ; Lines
 102+ C2FA 00 00 00     UBnkXX19                    DS  3
 103+ C2FD
 104+ C2FD
 105+ C2FD              ; Used to make 16 bit reads a little cleaner in source code
 106+ C2FD
 107+ C2FD              ;rotmatFx            equ rotmat0xHi
 108+ C2FD              ;rotmatFy            equ rotmat0yHi
 109+ C2FD              ;rotmatFz            equ rotmat0zHi
 110+ C2FD              ;rotmatUx            equ rotmat1xHi
 111+ C2FD              ;rotmatUy            equ rotmat1yHi
 112+ C2FD              ;rotmatUz            equ rotmat1zHi
 113+ C2FD
 114+ C2FD 00           UBnkShipModelBank           DB  0
 115+ C2FE 00           UBnkShipModelNbr            DB  0
 116+ C2FF 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 117+ C317              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 118+ C317              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 119+ C317              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 120+ C317              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 121+ C317              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 122+ C317              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 123+ C317              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 124+ C317              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 125+ C317              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 126+ C317              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 127+ C317              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 128+ C317              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 129+ C317              DotAddr                     equ UBnkHullCopy + DotOffset
 130+ C317              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 131+ C317              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 132+ C317              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 133+ C317              QAddr                       equ UBnkHullCopy + QOffset
 134+ C317              LaserAddr                   equ UBnkHullCopy + LaserOffset
 135+ C317              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 136+ C317              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 137+ C317              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 138+ C317              ; Static Ship Data. This is copied in when creating the universe object
 139+ C317              XX0                         equ UBnkHullCopy        ; general hull index pointer
 140+ C317 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 141+ C443 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 142+ C8F3 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 143+ CA1F 0C           OrthagCountdown             DB  12
 144+ CA20
 145+ CA20              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 146+ CA20              UBnk_Data_len               EQU $ - StartOfUniv
 147+ CA20
 148+ CA20
 149+ CA20 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 150+ CA23 11 20 0A                             ld      de,UBnk_Data_len
 151+ CA26 AF                                   xor     a
 152+ CA27 CD CC 90                             call    memfill_dma
 153+ CA2A C9                                   ret
 154+ CA2B
 155+ CA2B 3E 81        ResetStationLaunch:     ld  a,%10000001
 156+ CA2D 32 2C C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 157+ CA30 AF                                   xor a
 158+ CA31 32 2A C0                             ld      (UBnkrotZCounter),a             ; no pitch
 159+ CA34 32 16 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 160+ CA37 3E FF                                ld      a,$FF
 161+ CA39 32 29 C0                             ld      (UBnkrotXCounter),a             ; set roll to maxi on station
 162+ CA3C 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 163+ CA3F 22 0C C0                             ld      (UBnKxlo),hl
 164+ CA42 21 00 00                             ld      hl,$0000
 165+ CA45 22 0F C0                             ld      (UBnKylo),hl
 166+ CA48 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 167+ CA4B 22 12 C0                             ld      (UBnKzlo),hl
 168+ CA4E AF                                   xor     a
 169+ CA4F 32 0E C0                             ld      (UBnKxsgn),a
 170+ CA52 32 11 C0                             ld      (UBnKysgn),a
 171+ CA55 3E 80                                ld      a,$80
 172+ CA57 32 14 C0                             ld      (UBnKzsgn),a
 173+ CA5A CD 02 CD     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 174+ CA5D C9                                   ret
 175+ CA5E
 176+ CA5E              ;divdide by 16 using undocumented instrunctions
 177+ CA5E              ;Input: BC = Dividend, DE = Divisor, HL = 0
 178+ CA5E              ;Output: BC = Quotient, HL = Remainder
 179+ CA5E 47           PROJ256mulAdivQ:        ld      b,a
 180+ CA5F 0E 00                                ld      c,0
 181+ CA61 16 00                                ld      d,0
 182+ CA63 3A 64 94                             ld      a,(varQ)
 183+ CA66 5F                                   ld      e,a
 184+ CA67 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 185+ CA6A 78                                   ld      a,b
 186+ CA6B 06 10                                ld      b,16
 187+ CA6D CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 188+ CA6F 17                                   rla             ; ...
 189+ CA70 ED 6A                                adc     hl,hl       ; ...
 190+ CA72 ED 52                                sbc     hl,de       ; ...
 191+ CA74 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 192+ CA76 19                                   add     hl,de       ; ...
 193+ CA77 0D                                   dec     c       ; ...
 194+ CA78 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 195+ CA7A 79                                   ld      a,c
 196+ CA7B 32 65 94                             ld      (varR),a
 197+ CA7E C9                                   ret
 198+ CA7F              ;
 199+ CA7F                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 200+ CA7F              ;Output: BC = Quotient, HL = Remainder
 201+ CA7F
 202+ CA7F              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 203+ CA7F              ;OUTPUTS:   cahl = quotient cde = divisor
 204+ CA7F 32 0B 94     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 205+ CA82                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 205+ CA82 2A 12 C0    >               ld       hl,(UBnKzlo)
 205+ CA85 22 64 94    >               ld       (varQ),hl
 206+ CA88 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
 207+ CA8B 32 66 94                             ld      (varS),a                        ; S = inkw z sign
 208+ CA8E ED 5B 09 94  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 209+ CA92 7B                                   ld      a,e                             ; num lo
 210+ CA93 F6 01                                or      1                               ; must be at least 1
 211+ CA95 32 09 94                             ld      (varP),a                        ; store
 212+ CA98 5F                                   ld      e,a                             ; update DE too
 213+ CA99 3A 0B 94                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 214+ CA9C 21 66 94                             ld      hl,varS                         ; hl = address of VarS
 215+ CA9F AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 216+ CAA0 E6 80                                and     $80                             ;
 217+ CAA2 32 84 94                             ld      (varT),a                        ; T = Sign bit of A
 218+ CAA5 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 219+ CAA8 3A 0B 94                             ld      a,(varPhi2)                     ;
 220+ CAAB E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 221+ CAAD              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 221+ CAAD FE 40       >                        cp     $40
 221+ CAAF D2 BD CA    >                        jp		nc,DV14
 222+ CAB2                                      ShiftDELeft1                            ; de (or P,P1) > 1
 222+ CAB2 CB 23       >			   sla e
 222+ CAB4 CB 12       >			   rl  d
 223+ CAB6 CB 17                                rl      a                               ; and accumulator as 3rd byte
 224+ CAB8 FD 2C                                inc     iyl
 225+ CABA C2 AD CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 226+ CABD 32 0B 94     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 227+ CAC0 ED 53 09 94                          ld      (varP),de                       ; store off the value so far
 228+ CAC4 3A 66 94                             ld      a,(varS)                        ; zsign
 229+ CAC7 E6 7F                                and     $7F                             ; denom sg7
 230+ CAC9                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 231+ CAC9 2A 64 94                             ld      hl,(varQ)                       ; demon lo
 232+ CACC FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 233+ CACE                                      ShiftHLLeft1
 233+ CACE CB 25       >			   sla l
 233+ CAD0 CB 14       >			   rl  h
 234+ CAD2 CB 17                                rl      a                               ; mulitply QRS by 2
 235+ CAD4 F2 CC CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 236+ CAD7 22 64 94     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 237+ CADA 32 64 94                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 238+ CADD 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 239+ CADF 32 65 94                             ld      (varR),a                        ;  R
 240+ CAE2 3A 0B 94                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 241+ CAE5 CD 5E CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 242+ CAE8 3E 00                                ld      a,0
 243+ CAEA 32 7C 94                             ld      (varKp1),a
 244+ CAED 32 7D 94                             ld      (varKp2),a
 245+ CAF0 32 7E 94                             ld      (varKp3),a                      ; clear out K+1 to K+3
 246+ CAF3 FD 7D                                ld      a,iyl                           ; Y counter for scale
 247+ CAF5                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 247+ CAF5 CB 7F       >                        bit 	7,a
 247+ CAF7 CA 22 CB    >                        jp      z,DV12
 248+ CAFA 3A 65 94                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 249+ CAFD ED 5B 7B 94                          ld      de,(varK)                       ; d= k1
 250+ CB01 2A 7F 94                             ld      hl,(varK2)                      ; h = k3, l = k2
 251+ CB04 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 252+ CB05 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 253+ CB07 CB 12                                rl      d                               ; k1
 254+ CB09 CB 15                                rl      l                               ; k2
 255+ CB0B CB 14                                rl      h                               ; k3
 256+ CB0D FD 2C                                inc     iyl
 257+ CB0F 20 F4                                jr      nz,DVL8                         ;
 258+ CB11 ED 53 7B 94  DVL8Save:               ld      (varK),de
 259+ CB15 22 7F 94                             ld      (varK2),hl                      ; save back K0 to k3
 260+ CB18 3A 84 94                             ld      a,(varT)
 261+ CB1B 4F                                   ld      c,a                             ; get varT into c reg
 262+ CB1C 7C                                   ld      a,h                             ; a= k3 (sign)
 263+ CB1D B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 264+ CB1E 32 8E 94                             ld      (varK3),a                       ; load sign bit back into K3
 265+ CB21 C9                                   ret
 266+ CB22              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 266+ CB22 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 266+ CB23 CA 3A CB    >				jp	z, DV13
 267+ CB26 3A 65 94                             ld      a,(varR)                        ; Reduce Remainder
 268+ CB29 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 269+ CB2B FD 2D                                dec     iyl
 270+ CB2D C2 29 CB                             jp      nz,DVL10                        ; loop y reduce until y is zero
 271+ CB30 32 7B 94                             ld      (varK),a                        ; k Lo
 272+ CB33                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 272+ CB33 3A 84 94    >               ld       a,(varT)
 272+ CB36 32 7E 94    >               ld       (varKp3),a
 273+ CB39 C9                                   ret
 274+ CB3A              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 274+ CB3A 3A 65 94    >               ld       a,(varR)
 274+ CB3D 32 7B 94    >               ld       (varK),a
 275+ CB40                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 275+ CB40 3A 84 94    >               ld       a,(varT)
 275+ CB43 32 7E 94    >               ld       (varKp3),a
 276+ CB46 C9                                   ret
 277+ CB47
 278+ CB47
 279+ CB47 CD 7F CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 280+ CB4A 3A 7E 94                             ld      a,(varKp3)
 281+ CB4D E6 7F                                and     $7F
 282+ CB4F 21 7D 94                             ld      hl,varKp2
 283+ CB52 B6                                   or      (hl)
 284+ CB53 C2 68 CB                             jp      nz,PL44TooBig
 285+ CB56 3A 7C 94                             ld      a,(varKp1)
 286+ CB59 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 287+ CB5B 30 0B                                jr      nc,PL44TooBig
 288+ CB5D                                      ClearCarryFlag                          ; we have a good result regardless
 288+ CB5D B7          >                        or a
 289+ CB5E 2A 7B 94                             ld      hl,(varK)                       ; get K (0 1)
 290+ CB61 3A 7E 94                             ld      a,(varKp3)                      ; if sign bit high?
 291+ CB64 CB 7F                                bit     7,a
 292+ CB66 C8                                   ret     z                               ; no so we can just return
 293+ CB67 C9           PL44:                   ret
 294+ CB68 37           PL44TooBig:             scf
 295+ CB69 C9                                   ret
 296+ CB6A
 297+ CB6A                                      include "./Maths/ADDHLDESignBC.asm"
# file opened: ././Maths/ADDHLDESignBC.asm
   1++CB6A              ;; calcs HLB + DEC where B and C are signs
   2++CB6A              ;; result HL with A as sign
   3++CB6A              ;; special handling if result is zero forcign sign bit to be zero
   4++CB6A 78           ADDHLDESignBC:          ld      a,b
   5++CB6B E6 80                                and     SignOnly8Bit
   6++CB6D A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7++CB6E                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7++CB6E FA 7C CB    >                        jp		m, ADDHLDEsBCOppSGN
   8++CB71 78           ADDHLDEsBCSameSigns:    ld      a,b
   9++CB72 B1                                   or      c
  10++CB73                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10++CB73 FA 78 CB    >                        jp		m, ADDHLDEsBCSameNeg
  11++CB76 19                                   add     hl,de                       ; both positive so a will already be zero
  12++CB77 C9                                   ret
  13++CB78 19           ADDHLDEsBCSameNeg:      add     hl,de
  14++CB79 78                                   ld      a,b
  15++CB7A B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16++CB7B C9                                   ret
  17++CB7C B7           ADDHLDEsBCOppSGN:       or      a
  18++CB7D ED 52                                sbc     hl,de
  19++CB7F 38 02                                jr      c,ADDHLDEsBCOppInvert
  20++CB81 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21++CB82 C9                                   ret
  22++CB83              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22++CB83 AF          >                xor a
  22++CB84 95          >                sub l
  22++CB85 6F          >                ld l,a
  22++CB86 9F          >                sbc a,a
  22++CB87 94          >                sub h
  22++CB88 67          >                ld h,a
  23++CB89 78                                   ld      a,b
  24++CB8A EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25++CB8C C9                                   ret
  26++CB8D
# file closed: ././Maths/ADDHLDESignBC.asm
 298+ CB8D
 299+ CB8D 7C           ADDHLDESignedv3:        ld      a,h
 300+ CB8E E6 80                                and     SignOnly8Bit
 301+ CB90 47                                   ld      b,a                         ;save sign bit in b
 302+ CB91 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 303+ CB92                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 303+ CB92 FA AA CB    >                        jp		m, ADDHLDEOppSGN
 304+ CB95 78           ADDHLDESameSigns:       ld      a,b
 305+ CB96 B2                                   or      d
 306+ CB97                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 306+ CB97 FA 9C CB    >                        jp		m, ADDHLDESameNeg
 307+ CB9A 19                                   add     hl,de
 308+ CB9B C9                                   ret
 309+ CB9C 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 310+ CB9D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 311+ CB9F 67                                   ld      h,a
 312+ CBA0 7A                                   ld      a,d
 313+ CBA1 E6 7F                                and     SignMask8Bit
 314+ CBA3 57                                   ld      d,a
 315+ CBA4 19                                   add     hl,de
 316+ CBA5 3E 80                                ld      a,SignOnly8Bit
 317+ CBA7 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 318+ CBA8 67                                   ld      h,a
 319+ CBA9 C9                                   ret
 320+ CBAA 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 321+ CBAB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 322+ CBAD 67                                   ld      h,a
 323+ CBAE 7A                                   ld      a,d
 324+ CBAF E6 7F                                and     SignMask8Bit
 325+ CBB1 57                                   ld      d,a
 326+ CBB2 B7                                   or      a
 327+ CBB3 ED 52                                sbc     hl,de
 328+ CBB5 38 04                                jr      c,ADDHLDEOppInvert
 329+ CBB7 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 330+ CBB8 B4                                   or      h
 331+ CBB9 67                                   ld      h,a                         ; set the previou sign value
 332+ CBBA C9                                   ret
 333+ CBBB              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 333+ CBBB AF          >                xor a
 333+ CBBC 95          >                sub l
 333+ CBBD 6F          >                ld l,a
 333+ CBBE 9F          >                sbc a,a
 333+ CBBF 94          >                sub h
 333+ CBC0 67          >                ld h,a
 334+ CBC1 78                                   ld      a,b
 335+ CBC2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 336+ CBC4 B4                                   or      h
 337+ CBC5 67                                   ld      h,a                         ; recover sign
 338+ CBC6 C9                                   ret
 339+ CBC7
 340+ CBC7              ; we could cheat, flip the sign of DE and just add but its not very optimised
 341+ CBC7 7C           SUBHLDESignedv3:        ld      a,h
 342+ CBC8 E6 80                                and     SignOnly8Bit
 343+ CBCA 47                                   ld      b,a                         ;save sign bit in b
 344+ CBCB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 345+ CBCC                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 345+ CBCC FA FA CB    >                        jp		m, SUBHLDEOppSGN
 346+ CBCF 78           SUBHLDESameSigns:       ld      a,b
 347+ CBD0 B2                                   or      d
 348+ CBD1                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 348+ CBD1 FA DB CB    >                        jp		m, SUBHLDESameNeg
 349+ CBD4 B7                                   or      a
 350+ CBD5 ED 52                                sbc     hl,de
 351+ CBD7                                      JumpIfNegative SUBHLDESameOvrFlw
 351+ CBD7 FA EE CB    >                        jp		m, SUBHLDESameOvrFlw
 352+ CBDA C9                                   ret
 353+ CBDB 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 354+ CBDC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 355+ CBDE 67                                   ld      h,a
 356+ CBDF 7A                                   ld      a,d
 357+ CBE0 E6 7F                                and     SignMask8Bit
 358+ CBE2 57                                   ld      d,a
 359+ CBE3 B7                                   or      a
 360+ CBE4 ED 52                                sbc     hl,de
 361+ CBE6                                      JumpIfNegative SUBHLDESameOvrFlw
 361+ CBE6 FA EE CB    >                        jp		m, SUBHLDESameOvrFlw
 362+ CBE9 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 363+ CBEA F6 80                                or      SignOnly8Bit
 364+ CBEC 67                                   ld      h,a
 365+ CBED C9                                   ret
 366+ CBEE              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 366+ CBEE AF          >                xor a
 366+ CBEF 95          >                sub l
 366+ CBF0 6F          >                ld l,a
 366+ CBF1 9F          >                sbc a,a
 366+ CBF2 94          >                sub h
 366+ CBF3 67          >                ld h,a
 367+ CBF4 78                                   ld      a,b
 368+ CBF5 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 369+ CBF7 B4                                   or      h
 370+ CBF8 67                                   ld      h,a                         ; recover sign
 371+ CBF9 C9                                   ret
 372+ CBFA B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 373+ CBFB 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 374+ CBFC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 375+ CBFE 67                                   ld      h,a
 376+ CBFF 7A                                   ld      a,d
 377+ CC00 E6 7F                                and     SignMask8Bit
 378+ CC02 57                                   ld      d,a
 379+ CC03 19                                   add     hl,de
 380+ CC04 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 381+ CC05 B4                                   or      h
 382+ CC06 67                                   ld      h,a                         ; set the previou sign value
 383+ CC07 C9                                   ret
 384+ CC08
 385+ CC08
 386+ CC08              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 386+ CC08 CB 7C       >                        bit 	7,h
 386+ CC0A C2 1B CC    >                        jp      nz,SBCHLDEhlNeg
 387+ CC0D              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 387+ CC0D CB 7C       >                        bit 	7,h
 387+ CC0F C2 1B CC    >                        jp      nz,SBCHLDEhlNeg
 388+ CC12 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 389+ CC14 C9                                   ret
 390+ CC15 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 391+ CC17 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 392+ CC18 CB FA                                set     7,d
 393+ CC1A C9                                   ret
 394+ CC1B CB BC        SBCHLDEhlNeg:           res     7,h
 395+ CC1D                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 395+ CC1D CB 7A       >                        bit 	7,d
 395+ CC1F C2 27 CC    >                        jp      nz,SBCHLDEhlNegdeNeg
 396+ CC22 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 397+ CC24 CB FC                                set     7,h
 398+ CC26 C9                                   ret
 399+ CC27 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 400+ CC29 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 401+ CC2A CB FA                                set     7,d
 402+ CC2C CB FC                                set     7,h
 403+ CC2E C9                                   ret
 404+ CC2F
 405+ CC2F              ; Roate around axis
 406+ CC2F              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 407+ CC2F              ; so the axis x1 points to roofv  x , y or z
 408+ CC2F              ;             x2           nosev or sidev  x, y or z
 409+ CC2F              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 410+ CC2F              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 411+ CC2F              ; var RAT2 gives direction
 412+ CC2F              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 413+ CC2F              ;-Set up S R -----------------------------------------
 414+ CC2F              ; optimised we don't deal with sign here just the value of roof axis / 512
 415+ CC2F 2A F2 93     MVS5XRotateXAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 416+ CC32 5E                                   ld      e,(hl)
 417+ CC33 23                                   inc     hl
 418+ CC34 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 419+ CC35 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 420+ CC36 7C                                   ld      a,h
 421+ CC37 E6 80                                and     SignOnly8Bit
 422+ CC39 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 423+ CC3B 7C                                   ld      a,h
 424+ CC3C E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 425+ CC3E CB 3F                                srl     a               ; a = Axis1/2
 426+ CC40 5F                                   ld      e,a             ;
 427+ CC41 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 428+ CC43 57                                   ld      d,a             ; de = signed Axis1 / 512
 429+ CC44 B7                                   or      a               ; clear carry
 430+ CC45 CD C7 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 431+ CC48              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 432+ CC48 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 433+ CC49 7D                                   ld      a,l
 434+ CC4A 32 65 94                             ld      (varR),a
 435+ CC4D 7C                                   ld      a,h
 436+ CC4E 32 66 94                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 437+ CC51              ;-calculate roofv latter half of calc
 438+ CC51 2A F4 93                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 439+ CC54 5E                                   ld      e,(hl)
 440+ CC55 23                                   inc     hl
 441+ CC56 56                                   ld      d,(hl)          ; de = value of roof axis
 442+ CC57 7A                                   ld      a,d
 443+ CC58 E6 80                                and     SignOnly8Bit
 444+ CC5A FD 67                                ld      iyh,a           ; save sign
 445+ CC5C 7A                                   ld      a,d
 446+ CC5D E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 447+ CC5F 57                                   ld      d,a             ; de = abs (nosev)
 448+ CC60                                      ShiftDERight1
 448+ CC60 CB 3A       >			   srl d
 448+ CC62 CB 1B       >			   rr  e
 449+ CC64                                      ShiftDERight1
 449+ CC64 CB 3A       >			   srl d
 449+ CC66 CB 1B       >			   rr  e
 450+ CC68                                      ShiftDERight1
 450+ CC68 CB 3A       >			   srl d
 450+ CC6A CB 1B       >			   rr  e
 451+ CC6C                                      ShiftDERight1           ; de = nosev /16 unsigned
 451+ CC6C CB 3A       >			   srl d
 451+ CC6E CB 1B       >			   rr  e
 452+ CC70 3A 7A 94                             ld      a,(varRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 453+ CC73 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 454+ CC75 E6 80                                and     SignOnly8Bit
 455+ CC77 B2                                   or      d
 456+ CC78 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 457+ CC79              ;;; ld      a,e
 458+ CC79              ;;;     or      iyh
 459+ CC79              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 460+ CC79              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 461+ CC79 E1                                   pop     hl              ; get back RS POP ID 1
 462+ CC7A                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 463+ CC7A              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 464+ CC7A CD 8D CB                             call    ADDHLDESignedv3 ; do add using hl and de
 465+ CC7D E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 466+ CC7E              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 467+ CC7E              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 468+ CC7E 2A F4 93                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 469+ CC81 5E                               ld      e,(hl)
 470+ CC82 23                               inc     hl
 471+ CC83 56                               ld      d,(hl)
 472+ CC84 EB                               ex      de,hl
 473+ CC85 7C                               ld      a,h
 474+ CC86 E6 80                            and     $80
 475+ CC88 FD 67                            ld      iyh,a
 476+ CC8A 7C                               ld      a,h
 477+ CC8B E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 478+ CC8D CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 479+ CC8F 5F                               ld      e,a
 480+ CC90 FD 7C                            ld      a,iyh
 481+ CC92 57                               ld      d,a
 482+ CC93 B7                               or      a               ; clear carry
 483+ CC94 CD C7 CB                         call    SUBHLDESignedv3
 484+ CC97              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 485+ CC97 E5                               push    hl              ; save hl on stack  PUSH ID 3
 486+ CC98 7D                               ld      a,l
 487+ CC99 32 09 94                         ld      (varP),a        ; p = low of resuilt
 488+ CC9C 7C                               ld      a,h
 489+ CC9D E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 490+ CC9F 32 84 94                         ld      (varT),a        ; t = high of result
 491+ CCA2              ;-- Set up TQ
 492+ CCA2 2A F2 93                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 493+ CCA5              ;   ld      hl,(varAxis2)   ; work on nosev again
 494+ CCA5 5E                               ld      e,(hl)
 495+ CCA6 23                               inc     hl
 496+ CCA7 56                               ld      d,(hl)
 497+ CCA8 7A                               ld      a,d
 498+ CCA9 E6 80                            and     $80
 499+ CCAB FD 67                            ld      iyh,a           ; save sign
 500+ CCAD 7A                               ld      a,d
 501+ CCAE E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 502+ CCB0 57                               ld      d,a             ; de = abs (nosev)
 503+ CCB1                                  ShiftDERight1
 503+ CCB1 CB 3A       >			   srl d
 503+ CCB3 CB 1B       >			   rr  e
 504+ CCB5                                  ShiftDERight1
 504+ CCB5 CB 3A       >			   srl d
 504+ CCB7 CB 1B       >			   rr  e
 505+ CCB9                                  ShiftDERight1
 505+ CCB9 CB 3A       >			   srl d
 505+ CCBB CB 1B       >			   rr  e
 506+ CCBD                                  ShiftDERight1           ; de = nosev /16 unsigned
 506+ CCBD CB 3A       >			   srl d
 506+ CCBF CB 1B       >			   rr  e
 507+ CCC1 3A 7A 94                         ld      a,(varRAT2)
 508+ CCC4 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 509+ CCC6 E6 80                            and     $80
 510+ CCC8 B2                               or      d
 511+ CCC9 57                               ld      d,a
 512+ CCCA              ;;; ld      a,e
 513+ CCCA              ;;;     or      iyh
 514+ CCCA              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 515+ CCCA E1                               pop     hl              ; get back RS   POP ID 3
 516+ CCCB              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 517+ CCCB CD C7 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 518+ CCCE              ;-- Update nosev ---------------------------------------
 519+ CCCE EB                               ex      de,hl           ; save hl to de
 520+ CCCF 2A F4 93                         ld      hl,(varAxis2)
 521+ CCD2 73                               ld      (hl),e
 522+ CCD3 23                               inc     hl
 523+ CCD4 72                               ld      (hl),d          ; copy result into nosev
 524+ CCD5              ;-- Update roofv ---------------------------------------
 525+ CCD5 D1                               pop     de              ; get calc saved on stack POP ID 2
 526+ CCD6 2A F2 93                         ld      hl,(varAxis1)
 527+ CCD9 73                               ld      (hl),e
 528+ CCDA 23                               inc     hl
 529+ CCDB 72                               ld      (hl),d          ; copy result into nosev
 530+ CCDC C9                               ret
 531+ CCDD
 532+ CCDD                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCDD              InitialiseOrientation:
   2++CCDD              ZI1:
   3++CCDD              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CCDD              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCDD              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   6++CCDD 21 00 00         ld      hl, 0
   7++CCE0 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCE3 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCE6 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCE9 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCEC 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCEF 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCF2 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCF5                  ;ld      hl,1
  15++CCF5 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CCF8 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CCFB 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCFE 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CD01 C9               ret
  20++CD02
  21++CD02
  22++CD02              LaunchedOrientation:
  23++CD02 CD DD CC         call    InitialiseOrientation
  24++CD05                  FlipMemSign UBnkrotmatNosevX+1
  24++CD05 3A 22 C0    >                    ld  a,(UBnkrotmatNosevX+1)
  24++CD08 EE 80       >                    xor SignOnly8Bit
  24++CD0A 32 22 C0    >                    ld  (UBnkrotmatNosevX+1),a
  25++CD0D                  FlipMemSign UBnkrotmatNosevY+1
  25++CD0D 3A 24 C0    >                    ld  a,(UBnkrotmatNosevY+1)
  25++CD10 EE 80       >                    xor SignOnly8Bit
  25++CD12 32 24 C0    >                    ld  (UBnkrotmatNosevY+1),a
  26++CD15                  FlipMemSign UBnkrotmatNosevZ+1
  26++CD15 3A 26 C0    >                    ld  a,(UBnkrotmatNosevZ+1)
  26++CD18 EE 80       >                    xor SignOnly8Bit
  26++CD1A 32 26 C0    >                    ld  (UBnkrotmatNosevZ+1),a
  27++CD1D C9               ret
  28++CD1E
# file closed: ./Universe/InitialiseOrientation.asm
 533+ CD1E              ;----------------------------------------------------------------------------------------------------------------------------------
 534+ CD1E              OrientateVertex:
 535+ CD1E
 536+ CD1E              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 537+ CD1E              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 538+ CD1E              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 539+ CD1E              ;
 540+ CD1E
 541+ CD1E              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ CD1E              TransposeVertex:
 543+ CD1E              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 544+ CD1E              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 545+ CD1E              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 546+ CD1E              VectorToVertex:
 547+ CD1E              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 548+ CD1E              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 549+ CD1E              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 550+ CD1E
 551+ CD1E              Project:
 552+ CD1E 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 553+ CD21 22 09 94                             ld      (varP),hl
 554+ CD24 3A 0E C0                             ld      a,(UBnKxsgn)
 555+ CD27 CD 47 CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 556+ CD2A D8                                   ret     c                               ; carry means don't print
 557+ CD2B 2A 7B 94                             ld      hl,(varK)                       ; hl = k (0 1)
 558+ CD2E                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 559+ CD2E 3E 80                                ld      a,ViewCenterX
 560+ CD30 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 561+ CD32 22 8E 94                             ld      (varK3),hl                      ; K3 = X position on screen
 562+ CD35 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 563+ CD38 22 09 94                             ld      (varP),hl
 564+ CD3B 3A 11 C0                             ld      a,(UBnKysgn)
 565+ CD3E CD 47 CB                             call    PLS6
 566+ CD41 D8                                   ret     c
 567+ CD42 2A 7B 94                             ld      hl,(varK)                       ; hl = k (0 1)
 568+ CD45 3E 40                                ld      a,ViewCenterY
 569+ CD47 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 570+ CD49 22 94 94                             ld      (varK4),hl                      ; K3 = X position on screen
 571+ CD4C C9                                   ret
 572+ CD4D              ;--------------------------------------------------------------------------------------------------------
 573+ CD4D                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CD4D              ;
   2++CD4D              ; EraseOldLines:
   3++CD4D              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD4D              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD4D              ;	 	loop + 4
   6++CD4D              ; Return
   7++CD4D
   8++CD4D              EraseOldLines:
   9++CD4D              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD4D              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD4D 3A 2B C0    >                        ld     a,(UBnkexplDsp)
  10++CD50 CB 5F       >                        bit 	3,a
  10++CD52 C8          >                        ret		z
  11++CD53 CB DF        	set		3,a
  12++CD55 32 2B C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD58 C3 CC E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD5B              ; We use the ret from the clearLines so not needed here
  15++CD5B
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 574+ CD5B                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CD5B              ;TrimToScreenGrad:
   2++CD5B              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD5B              ;ret
   4++CD5B              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD5B              ;TODO        bit     7,a
   6++CD5B              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD5B              ;TODO        ld      a,h
   8++CD5B              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD5B              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD5B              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD5B
  12++CD5B              ;18                      CLC
  13++CD5B              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD5B              ;85 36                   STA &36			 \ XX15+2
  15++CD5B              ;98                      TYA 			 \ step Y1 hi
  16++CD5B              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD5B              ;85 37                   STA &37			 \ XX15+3
  18++CD5B              ;A9 00                   LDA #0			 \ xleft min
  19++CD5B              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD5B              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD5B              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD5B              ;	.LL119	\ x1 hi +ve from LL118
  23++CD5B              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD5B              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD5B              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD5B              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD5B              ;8A                      TXA 			 \ step Y1 lo
  28++CD5B              ;18                      CLC
  29++CD5B              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD5B              ;85 36                   STA &36			 \ XX15+2
  31++CD5B              ;98                      TYA 			 \ step Y1 hi
  32++CD5B              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD5B              ;85 37                   STA &37			 \ XX15+3
  34++CD5B              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD5B              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD5B              ;E8                      INX 			 \ X = 0
  37++CD5B              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD5B              ;	.LL134	\ Ytrim
  39++CD5B              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD5B              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD5B              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD5B              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD5B              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD5B              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD5B              ;8A                      TXA 			 \ step X1 lo
  46++CD5B              ;18                      CLC
  47++CD5B              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD5B              ;85 34                   STA &34			 \ XX15+0
  49++CD5B              ;98                      TYA 			 \ step X1 hi
  50++CD5B              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD5B              ;85 35                   STA &35			 \ XX15+1
  52++CD5B              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD5B              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD5B              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD5B              ;	.LL135	\ y1 hi +ve from LL134
  56++CD5B              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD5B              ;38                      SEC
  58++CD5B              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD5B              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD5B              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD5B              ;E9 00                   SBC #0			 \ any hi
  62++CD5B              ;85 83                   STA &83			 \ S
  63++CD5B              ;90 16                   BCC LL136		 \ failed, rts
  64++CD5B              ;	.LL139
  65++CD5B              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD5B              ;8A                      TXA 			 \ step X1 lo
  67++CD5B              ;18                      CLC
  68++CD5B              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD5B              ;85 34                   STA &34			 \ XX15+0
  70++CD5B              ;98                      TYA 			 \ step X1 hi
  71++CD5B              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD5B              ;85 35                   STA &35			 \ XX15+1
  73++CD5B              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD5B              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD5B              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD5B              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD5B              ;	.LL136	\ rts
  78++CD5B              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD5B              ;
  80++CD5B
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 575+ CD5B                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CD5B              ;--------------------------------------------------------------------------------------------------------------------
   2++CD5B
   3++CD5B 00           clipDx                  DB      0           ; also XX12+2
   4++CD5C 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD5D 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD5E 00           clipDy                  DB      0           ; also XX12+4
   7++CD5F 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD60 00           clipGradient            DB      0
   9++CD61 00           clipDxySign             DB      0
  10++CD62              varX12p3                equ     clipDxySign
  11++CD62 00           clipXGTY                DB      0
  12++CD63 00           clipFlags               DB      0
  13++CD64 00           SWAP                    DB      0
  14++CD65 00 00        varYX                   DW      0
  15++CD67              ;varRegX                 DB      0
  16++CD67              ;varXX12p2               DB      0
  17++CD67 00           clipXX13                 DB      0
  18++CD68
  19++CD68
  20++CD68              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD68              ;ClipXX15XX12Line:
  22++CD68 ED 4B 77 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD6C DD 2A 7B C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD70 2A 75 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD73 ED 5B 79 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD77 AF                                   xor     a
  27++CD78 32 64 CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD7B 7A                                   ld      a,d                         ; A = X2Hi
  29++CD7C FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD7F                                      ;       push    af
  31++CD7F                                      ;       ld      a,iyh
  32++CD7F                                      ;       ld      (regX),a
  33++CD7F                                      ;       pop     af
  34++CD7F DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD81 20 0A                                jr      nz, .LL107
  36++CD83 DD 7D                                ld      a,ixl
  37++CD85 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD88 20 03                                jr      nz,.LL107
  39++CD8A FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD8D                                      ;        push    af
  41++CD8D                                      ;        ld      a,iyh
  42++CD8D                                      ;        ld      (regX),a
  43++CD8D                                      ;        pop     af
  44++CD8D              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD8D              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD8D FD 7C        .LL107                  ld      a,iyh
  47++CD8F 32 67 CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD92 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD93 B0                                   or      b                           ;
  50++CD94 20 27                                jr      nz,.LL83                    ;
  51++CD96 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD97 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD9A 20 21                                jr      nz,.LL83
  54++CD9C              ; If we get here, (x1, y1) is on-screen
  55++CD9C FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CD9E FE 00                                cp      0
  57++CDA0 20 15                                jr      nz, .LL108
  58++CDA2              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CDA2 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CDA3 32 76 C0                             ld      (UBnkNewY1),a
  61++CDA6 DD 7D                                ld      a,ixl
  62++CDA8 32 78 C0                             ld      (UBnkNewY2),a
  63++CDAB 7D                                   ld      a,l
  64++CDAC 32 75 C0                             ld      (UBnkNewX1),a
  65++CDAF 7B                                   ld      a,e
  66++CDB0 32 77 C0                             ld      (UBnkNewX2),a
  67++CDB3                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CDB3 B7          >                        or a
  68++CDB4 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CDB5              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CDB5 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CDB6 C9                                   ret
  72++CDB7 FD 7C        .LL108:                 ld      a,iyh
  73++CDB9 B7                                   or      a
  74++CDBA 1F                                   rra
  75++CDBB FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CDBD                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CDBD                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CDBD                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CDBD                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CDBD FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CDBF ED 27 80                             test    $80                         ;
  82++CDC2 28 28                                jr      z, .LL115                   ;
  83++CDC4 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CDC5 A2                                   and     d
  85++CDC6                                      JumpIfNegative  .PointsOutofBounds
  85++CDC6 FA B5 CD    >                        jp		m, .PointsOutofBounds
  86++CDC9 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CDCA DD A4                                and     ixh
  88++CDCC                                      JumpIfNegative  .PointsOutofBounds
  88++CDCC FA B5 CD    >                        jp		m, .PointsOutofBounds
  89++CDCF 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CDD0 3D                                   dec     a
  91++CDD1 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CDD3                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CDD3                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CDD3                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CDD3                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CDD3 7A                                   ld      a,d                         ; a = x2 hi
  97++CDD4 3D                                   dec     a
  98++CDD5 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CDD7                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CDD7 F2 B5 CD    >                        jp		p, .PointsOutofBounds
 100++CDDA              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CDDA DD 7C                                ld      a,ixh
 102++CDDC 3D                                   dec     a
 103++CDDD FD 6F                                ld      iyl,a
 104++CDDF 78                                   ld      a,b
 105++CDE0 3D                                   dec     a
 106++CDE1 FD B5                                or      iyl
 107++CDE3                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CDE3 F2 B5 CD    >                        jp		p, .PointsOutofBounds
 108++CDE6 79                                   ld      a,c
 109++CDE7 DD A5                                and     ixl
 110++CDE9                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CDE9 FA B5 CD    >                        jp		m, .PointsOutofBounds
 111++CDEC              ; Clip line: calulate the line's gradient
 112++CDEC              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CDEC              .LL115:                 ClearCarryFlag
 113++CDEC B7          >                        or a
 114++CDED E5 D5        .CalcDX:                push    hl,,de
 115++CDEF EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CDF0 ED 52                                sbc     hl,de
 117++CDF2                                     ; pop     de                          ; we need de back
 118++CDF2 22 5B CD                             ld      (clipDx),hl
 119++CDF5 7C                                   ld      a,h
 120++CDF6 32 5D CD                             ld      (clipDxHighNonABS),a
 121++CDF9                                     ; ld      a,e                         ;a = x2 lo
 122++CDF9                                     ; sbc     a,l                         ;a= a - x1
 123++CDF9                                     ; ld      (clipDx),a
 124++CDF9                                     ; ld      a,d
 125++CDF9                                     ; sbc     a,h
 126++CDF9                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CDF9                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CDF9              .CalcDy:                ClearCarryFlag
 128++CDF9 B7          >                        or a
 129++CDFA DD E5 E1                             ld      hl,ix
 130++CDFD ED 42                                sbc     hl,bc
 131++CDFF 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CE01 22 5E CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CE04 7C           .CalcQuadrant:          ld      a,h
 134++CE05                                     ; ld      a,ixl
 135++CE05                                     ; sbc     c
 136++CE05                                     ; ld      (clipDy),a
 137++CE05                                     ; ld      a,ixh
 138++CE05                                     ; sbc     a,b
 139++CE05                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CE05                                     ; pop     hl
 141++CE05
 142++CE05              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CE05                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CE05 21 5C CD                             ld      hl,clipDxHigh
 145++CE08 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CE09 32 66 94                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CE0C 32 61 CD                             ld      (clipDxySign),a
 148++CE0F 3A 5F CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CE12 ED 27 80                             test    $80
 150++CE15 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CE17 2A 5E CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CE1A                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CE1A AF          >					xor 	a
 152++CE1B 93          >                    sub 	e
 152++CE1C 5F          >                    ld 		e,a
 152++CE1D 9F          >                    sbc 	a,a
 152++CE1E 92          >                    sub 	d
 152++CE1F 57          >                    ld 		d,a
 153++CE20 22 5E CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CE23 2A 5B CD     .LL110:                 ld      hl,(clipDx)
 155++CE26 3A 5C CD                             ld      a,(clipDxHigh)
 156++CE29 ED 27 80                             test    $80                         ; is it a negative X
 157++CE2C 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CE2E                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CE2E                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CE2E AF          >					xor 	a
 159++CE2F 95          >					sub 	l
 159++CE30 6F          >					ld 		l,a
 159++CE31 9F          >					sbc 	a,a
 159++CE32 94          >					sub 	h
 159++CE33 67          >					ld 		h,a
 160++CE34                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CE34              .LL111:               ;  push    de
 162++CE34                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CE34                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CE34 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CE35 B2                                   or      d
 166++CE36 28 0A                                jr      z,.CalculateDelta
 166++CE38
 167++CE38                                      ShiftDERight1
 167++CE38 CB 3A       >			   srl d
 167++CE3A CB 1B       >			   rr  e
 168++CE3C                                      ShiftHLRight1
 168++CE3C CB 3C       >			   srl h
 168++CE3E CB 1D       >			   rr  l
 169++CE40 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CE42              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CE42                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CE42              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CE42 AF           .LL113:                 xor     a
 174++CE43 32 84 94                             ld      (varT),a                    ; t = 0
 175++CE46 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CE47                                      JumpIfALTNusng  e, .LL114           ;
 176++CE47 BB          >                        cp      e
 176++CE48 DA 58 CE    >                        jp		c, .LL114
 177++CE4B              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CE4B 32 64 94     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CE4E 57                                   ld      d,a                         ; d = also Q for calc
 180++CE4F 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CE50 CD A6 AB                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CE53 32 65 94                             ld      (varR),a                    ;
 183++CE56 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CE58              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CE58 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CE59 57                                   ld      d,a
 187++CE5A 32 64 94                             ld      (varQ),a
 188++CE5D 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE5E CD A6 AB                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE61 32 65 94                             ld      (varR),a                    ;
 191++CE64 21 84 94                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE67 35                                   dec     (hl)
 193++CE68 D1           .LL116:                 pop     de                          ; get back X2
 194++CE69 E1                                   pop     hl                          ; get back X1 into hl,
 195++CE6A 3A 65 94                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE6D 32 60 CD                             ld      (clipGradient),a
 197++CE70 FD 6F                                ld      iyl,a
 198++CE72                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE72                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE72                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE72                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE72 3A 66 94                             ld      a,(varS)
 203++CE75 32 61 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE78                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE78 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE7A FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE7C 28 05                                jr      z,.LL138                    ;
 208++CE7E ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE81 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE83              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE83 CD AA CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE86 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE88 ED 27 80                             test    $80
 214++CE8B 28 1A                                jr      z,.LL124
 215++CE8D              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE8D 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE8E B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE8F C2 B5 CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE92 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE93 FA B5 CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE96              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE96              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE96 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE97 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE99 C5                                   push    bc
 226++CE9A DD E1                                pop     ix
 227++CE9C C1                                   pop     bc
 228++CE9D CD AA CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CEA0 3A 64 CD                             ld      a,(SWAP)
 230++CEA3 3D                                   dec     a
 231++CEA4 32 64 CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CEA7 C3 A2 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CEAA
 234++CEAA              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CEAA              ; iyh still holds XX13 iyl still holds gradient
 236++CEAA 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CEAB ED 27 80                             test    $80
 238++CEAE 28 17                                jr      z,.LL119
 239++CEB0 32 66 94     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CEB3 E5 D5 C5                             push    hl,,de,,bc
 241++CEB6 CD 2C CF                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CEB9                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CEB9                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CEB9 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CEBC 2A 65 CD                             ld      hl,(varYX)
 246++CEBF              ;                        ex      hl,de
 247++CEBF                                  ;    ld      hl,bc
 248++CEBF 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CEC0 44 4D                                ld      bc,hl
 250++CEC2 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CEC5               ;                       pop     de
 252++CEC5 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CEC7 FE 00        .LL119:                 cp      0
 254++CEC9 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CECB 3D                                   dec     a
 256++CECC 32 66 94                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CECF E5 D5 C5                             push    hl,,de,,bc
 258++CED2 CD 2C CF                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CED5                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CED5                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CED5 C1 D1 E1                             pop     hl,,de,,bc
 262++CED8                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CED8 2A 65 CD                             ld      hl,(varYX)
 264++CEDB                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CEDB 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CEDC 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CEDE                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CEDE                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CEDE                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CEDE 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CEE1                                    ;  pop     de
 272++CEE1              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CEE1 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CEE2 ED 27 80                             test    $80                         ;
 275++CEE5 28 1A                                jr      z,.LL135                    ;
 276++CEE7 32 66 94                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CEEA 79                                   ld      a,c                         ; Set R = y1_lo
 278++CEEB 32 65 94                             ld      (varR),a                    ;
 279++CEEE E5 D5 C5                             push    hl,,de,,bc
 280++CEF1 CD 53 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CEF4                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CEF4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CEF4 C1 D1 E1                             pop     hl,,de,,bc
 284++CEF7 D5                                   push    de
 285++CEF8 EB                                   ex      hl,de                       ; de = x1
 286++CEF9 2A 65 CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEFC 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CEFD D1                                   pop     de                          ; de = x2 again
 289++CEFE 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CF01 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CF02 E6 80                                and     $80
 292++CF04 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CF05 C8                                   ret     z
 294++CF06 E5                                   push    hl
 295++CF07 60 69                                ld      hl,bc
 296++CF09 01 80 00                             ld      bc,128
 297++CF0C B7                                   or      a
 298++CF0D ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CF0F 22 65 94                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CF12 7C                                   ld      a,h
 301++CF13 E1                                   pop     hl
 302++CF14 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CF17 C0                                   ret     nz
 304++CF18              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CF18 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CF1B CD 53 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CF1E                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CF1E                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CF1E C1 D1 E1                             pop     hl,,de,,bc
 310++CF21 D5                                   push    de
 311++CF22 EB                                   ex      hl,de
 312++CF23 2A 65 CD                             ld      hl,(varYX)
 313++CF26 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CF27 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CF2A D1                                   pop     de
 316++CF2B C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CF2C
 318++CF2C
 319++CF2C              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CF2C              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CF2C              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CF2C              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CF2C 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CF2D 32 65 94                             ld      (varR),a
 325++CF30 CD 9B CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CF33 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CF34 C5                                   push    bc
 328++CF35 47                                   ld      b,a
 329++CF36 3A 84 94                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CF39 FE 00                                cp      0
 331++CF3B 78                                   ld      a,b
 332++CF3C C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CF3D 20 23                                jr      nz, LL121
 334++CF3F              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CF3F 3A 60 CD     LL122:                  ld      a,(clipGradient)
 336++CF42 32 64 94                             ld      (varQ),a; optimise
 337++CF45 CD B9 A1                             call    HLequSRmulQdiv256
 338++CF48 22 65 CD                             ld      (varYX),hl
 339++CF4B F1                                   pop     af
 340++CF4C ED 27 80                             test    $80
 341++CF4F CA 8E CF                             jp      z,LL133
 342++CF52 C9                                   ret
 343++CF53              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CF53              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CF53              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CF53              ;
 347++CF53              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CF53              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CF53              ;                          LL128                Contains an RTS
 350++CF53 CD 9B CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CF56 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CF57 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CF58 47                                   ld      b,a
 354++CF59 3A 84 94                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF5C FE 00                                cp      0
 356++CF5E 78                                   ld      a,b
 357++CF5F C1                                   pop     bc
 358++CF60 20 DD                                jr      nz, LL122
 359++CF62              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF62 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF65 2A 65 94                             ld      hl,(varRS)                  ; hl = RS
 362++CF68 3A 64 94                             ld      a,(varQ)
 363++CF6B 47                                   ld      b,a                         ; b = q
 364++CF6C              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF6C CB 25       >			   sla l
 364++CF6E CB 14       >			   rl  h
 365++CF70 7C                                   ld      a,h
 366++CF71 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF73                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF73 B8          >                        cp      b
 367++CF74 DA 7F CF    >                        jp		c, .LL132
 368++CF77 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF78 98                                   sbc     a,b                         ; q
 370++CF79 67                                   ld      h,a                         ; h (s)
 371++CF7A 7D                                   ld      a,l                         ; r
 372++CF7B DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF7D 37                                   scf                                 ; set carry for next rolls
 374++CF7E 3F                                   ccf
 375++CF7F              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF7F CB 13       >               rl  e
 375++CF81 CB 12       >               rl  d
 376++CF83 38 E7                                jr      c,.LL130                    ;
 377++CF85 ED 53 65 CD                          ld      (varYX),de
 378++CF89 F1                                   pop     af              ; get back sign
 379++CF8A ED 27 80                             test    $80
 380++CF8D C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF8E 2A 65 CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF91                                      NegHL
 382++CF91 AF          >                xor a
 382++CF92 95          >                sub l
 382++CF93 6F          >                ld l,a
 382++CF94 9F          >                sbc a,a
 382++CF95 94          >                sub h
 382++CF96 67          >                ld h,a
 383++CF97 22 65 CD                             ld      (varYX),hl
 384++CF9A C9           LL128:                  ret
 385++CF9B              ; Do the following, in this order:  Q = XX12+2
 386++CF9B              ;                                   A = S EOR XX12+3
 387++CF9B              ;                                   (S R) = |S R|
 388++CF9B              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF9B 3A 60 CD     LL129:                  ld      a,(clipGradient)
 390++CF9E 32 64 94                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CFA1 3A 66 94                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CFA4 E5 F5                                push    hl,,af
 393++CFA6 ED 27 80                             test    $80
 394++CFA9 28 0C                                jr      z,.LL127
 395++CFAB 2A 65 94                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CFAE                                      NegHL
 396++CFAE AF          >                xor a
 396++CFAF 95          >                sub l
 396++CFB0 6F          >                ld l,a
 396++CFB1 9F          >                sbc a,a
 396++CFB2 94          >                sub h
 396++CFB3 67          >                ld h,a
 397++CFB4 22 65 94                             ld      (varRS),hl
 398++CFB7 21 61 CD     .LL127:                 ld      hl,clipDxySign
 399++CFBA F1                                   pop     af
 400++CFBB AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CFBC E1                                   pop     hl
 402++CFBD C9                                   ret
 403++CFBE
# file closed: ././ModelRender/CLIP-LL145.asm
 576+ CFBE              ;--------------------------------------------------------------------------------------------------------
 577+ CFBE                                      include "./Variables/CopyRotmatToTransMat.asm"
# file opened: ././Variables/CopyRotmatToTransMat.asm
   1++CFBE              ; Set TransMatTo
   2++CFBE              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CFBE              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CFBE              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CFBE              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CFBE              CopyRotmatToTransMat:                       ; Tested
   7++CFBE              LL15_CopyRotMat:                            ; unrolled loop
   8++CFBE 21 15 C0             ld      hl,UBnkrotmatSidevX
   9++CFC1 11 30 C0             ld      de,UBnkTransmatSidevX
  10++CFC4                      SixLDIInstrunctions
  10++CFC4 ED A0       >                        ldi
  10++CFC6 ED A0       >                        ldi
  10++CFC8 ED A0       >                        ldi
  10++CFCA ED A0       >                        ldi
  10++CFCC ED A0       >                        ldi
  10++CFCE ED A0       >                        ldi
  11++CFD0 21 1B C0             ld      hl,UBnkrotmatRoofvX
  12++CFD3 11 36 C0             ld      de, UBnkTransmatRoofvX
  13++CFD6                      SixLDIInstrunctions
  13++CFD6 ED A0       >                        ldi
  13++CFD8 ED A0       >                        ldi
  13++CFDA ED A0       >                        ldi
  13++CFDC ED A0       >                        ldi
  13++CFDE ED A0       >                        ldi
  13++CFE0 ED A0       >                        ldi
  14++CFE2 21 21 C0             ld      hl,UBnkrotmatNosevX
  15++CFE5 11 3C C0             ld      de, UBnkTransmatNosevX
  16++CFE8                      SixLDIInstrunctions
  16++CFE8 ED A0       >                        ldi
  16++CFEA ED A0       >                        ldi
  16++CFEC ED A0       >                        ldi
  16++CFEE ED A0       >                        ldi
  16++CFF0 ED A0       >                        ldi
  16++CFF2 ED A0       >                        ldi
  17++CFF4 C9                   ret
  18++CFF5
# file closed: ././Variables/CopyRotmatToTransMat.asm
 578+ CFF5              ;--------------------------------------------------------------------------------------------------------
 579+ CFF5 21 A1 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 580+ CFF8 ED 31                                add     hl,a
 581+ CFFA 3E FF                                ld      a,$FF
 582+ CFFC 77                                   ld      (hl),a
 583+ CFFD C9                                   ret
 584+ CFFE              ;--------------------------------------------------------------------------------------------------------
 585+ CFFE 21 A1 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 586+ D001 ED 31                                add     hl,a
 587+ D003 AF                                   xor     a
 588+ D004 77                                   ld      (hl),a
 589+ D005 C9                                   ret
 590+ D006              ;--------------------------------------------------------------------------------------------------------
 591+ D006 3A 0B C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 592+ D009 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 593+ D00B CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 594+ D00D 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 595+ D00E 21 A1 C0                             ld      hl,UbnkFaceVisArray
 596+ D011 3E FF                                ld      a,$FF
 597+ D013              SetAllFacesVisibleLoop:
 598+ D013 77           EE30:                   ld      (hl),a
 599+ D014 23                                   inc     hl
 600+ D015 10 FC                                djnz    SetAllFacesVisibleLoop
 601+ D017 C9                                   ret
 602+ D018              ;--------------------------------------------------------------------------------------------------------
 603+ D018 3A 0B C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 604+ D01B CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 605+ D01D CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 606+ D01F 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 607+ D020 06 10                                ld      b,16
 608+ D022 21 A1 C0                             ld      hl,UbnkFaceVisArray
 609+ D025 3E 00                                ld      a,$00
 610+ D027 77           SetAllFacesHiddenLoop:  ld      (hl),a
 611+ D028 23                                   inc     hl
 612+ D029 10 FC                                djnz    SetAllFacesHiddenLoop
 613+ D02B C9                                   ret
 614+ D02C
 615+ D02C              ;;;;X = normal scale
 616+ D02C              ;;;;ZtempHi = zhi
 617+ D02C              ;;;;......................................................
 618+ D02C              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 619+ D02C              ;;;;  Loop                                              ::LL90
 620+ D02C              ;;;;     inc X
 621+ D02C              ;;;;     divide X, Y & ZtempHiLo by 2
 622+ D02C              ;;;;  Until ZtempHi = 0
 623+ D02C              ;;;;......................................................
 624+ D02C              ;-LL21---------------------------------------------------------------------------------------------------
 625+ D02C                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++D02C              ;divdide by 16 using undocumented instrunctions
   2++D02C              Norm256mulAdivQ:
   3++D02C 47               ld      b,a
   4++D02D 0E 00            ld      c,0
   5++D02F 16 00            ld      d,0
   6++D031 3A 64 94         ld      a,(varQ)
   7++D034 5F               ld      e,a
   8++D035              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D035              ;Output: BC = Quotient, HL = Remainder
  10++D035              NormDIV16UNDOC:
  11++D035 21 00 00         ld      hl,0
  12++D038 78               ld      a,b
  13++D039 06 10            ld      b,16
  14++D03B              NormDIV16UNDOCLOOP:
  15++D03B CB 31        	sll	    c		; unroll 16 times
  16++D03D 17           	rla	    		; ...
  17++D03E ED 6A        	adc	    hl,hl		; ...
  18++D040 ED 52        	sbc	    hl,de		; ...
  19++D042 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D044 19           	add	    hl,de		; ...
  21++D045 0D           	dec	    c		; ...
  22++D046              NormDIV16UNDOCSKIP:
  23++D046 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D048 79               ld      a,c
  25++D049 32 65 94         ld      (varR),a
  26++D04C C9               ret
  27++D04D
  28++D04D              ; Tested OK
  29++D04D              NormaliseTransMat:
  30++D04D              ;LL21
  31++D04D 21 41 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D050 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D052 79                   ld      a,c
  34++D053 32 64 94             ld      (varQ),a                    ; set up varQ
  35++D056 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D058              LL21Loop:
  37++D058 56                   ld      d,(hl)
  38++D059 2B                   dec     hl
  39++D05A 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D05B                      ShiftDELeft1                        ; De = DE * 2
  40++D05B CB 23       >			   sla e
  40++D05D CB 12       >			   rl  d
  41++D05F 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D060 E5           		push	hl
  43++D061 C5           		push	bc
  44++D062 CD 2C D0             call    Norm256mulAdivQ
  45++D065              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D065 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D066 C1           		pop		bc
  48++D067 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D068 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D069 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D06A 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D06C C9                   ret
  53++D06D
# file closed: ./Universe/NormaliseTransMat.asm
 626+ D06D              ;-LL91---------------------------------------------------------------------------------------------------
 627+ D06D
 628+ D06D              ; Now we have
 629+ D06D              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 630+ D06D              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 631+ D06D              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 632+ D06D              ;
 633+ D06D              ;--------------------------------------------------------------------------------------------------------
 634+ D06D                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D06D              ; TESTEDOK
   2++D06D
   3++D06D              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D06D              ;        ld      a,(XX17)
   5++D06D              ;        ld      ixl,a
   6++D06D              ;        ld      ixh,9
   7++D06D              ;        ld      hl,UBnkTransInv0x
   8++D06D              ;        ld      a,(hl)
   9++D06D              ;ScaleNode:
  10++D06D              ;        ld      b,ixl
  11++D06D              ;ScaleNodeLoop:
  12++D06D              ;        sla      a
  13++D06D              ;        djnz    ScaleNodeLoop
  14++D06D              ;        ld      (hl),a
  15++D06D              ;        inc     hl
  16++D06D              ;        inc     hl
  17++D06D              ;        dec     ixh
  18++D06D              ;        jr      nz,ScaleNode
  19++D06D              ;        ret
  20++D06D
  21++D06D
  22++D06D              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D06D              ; we coudl combine this with move to transmat later as an optimisation
  24++D06D              ; INPUT - All Scaled
  25++D06D              ;  They transmat has already been put into side, roof nose order
  26++D06D              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D06D              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D06D              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D06D              ; OUTPUT
  30++D06D              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D06D              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D06D              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D06D              ; First all side values become compoment 0 of each vector
  34++D06D 2A 30 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D070 ED 5B 36 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D074 ED 4B 3C C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D078 22 48 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D07B ED 53 4A C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D07F ED 43 4C C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D083 2A 32 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D086 ED 5B 38 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D08A ED 4B 3E C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D08E 22 50 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D091 ED 53 52 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D095 ED 43 54 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D099 2A 34 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D09C ED 5B 3A C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D0A0 ED 4B 40 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D0A4 22 58 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D0A7 ED 53 5A C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D0AB ED 43 5C C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D0AF C9                   ret
  53++D0B0
  54++D0B0
# file closed: ./Universe/InverseXX16.asm
 635+ D0B0              ;--------------------------------------------------------------------------------------------------------
 636+ D0B0              ;--------------------------------------------------------------------------------------------------------
 637+ D0B0              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 638+ D0B0              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 639+ D0B0              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 640+ D0B0              ; Returns
 641+ D0B0              ;
 642+ D0B0              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 643+ D0B0              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 644+ D0B0              ;
 645+ D0B0              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 646+ D0B0              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 647+ D0B0              ;
 648+ D0B0              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 649+ D0B0              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 650+ D0B0              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 651+ D0B0 ~                                    ld      c,0
 652+ D0B0 ~                                    ld      a,param3                      ;
 653+ D0B0 ~                                    bit     7,a
 654+ D0B0 ~                                    jr      z,.val2Pos
 655+ D0B0 ~            ;HandleSignebits
 656+ D0B0 ~                                    neg
 657+ D0B0 ~                                    ld      c,$80
 658+ D0B0 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 659+ D0B0 ~                                    ld      a,param2                        ; A = XX16 element
 660+ D0B0 ~                                    bit     7,a
 661+ D0B0 ~                                    jr      z,.val1Pos
 662+ D0B0 ~            ;HandleSignebits
 663+ D0B0 ~                                    neg
 664+ D0B0 ~                                    ld      b,a
 665+ D0B0 ~                                    ld      a,c
 666+ D0B0 ~                                    xor     $80
 667+ D0B0 ~                                    ld      c,a
 668+ D0B0 ~                                    ld      a,b
 669+ D0B0 ~            .val1Pos:               ld      d,a
 670+ D0B0 ~            ;AequAmulQdiv256:
 671+ D0B0 ~                                    mul
 672+ D0B0 ~                                    ld      a,c
 673+ D0B0 ~                                    bit     7,a
 674+ D0B0 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 675+ D0B0 ~                                    jr      z,.resultPos
 676+ D0B0 ~                                    neg
 677+ D0B0 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 678+ D0B0                                      ENDM
 679+ D0B0
 680+ D0B0              AequN1xorN2:            MACRO  param1,param2
 681+ D0B0 ~                                    ld      a,(param1)
 682+ D0B0 ~                                    xor     param2
 683+ D0B0                                      ENDM
 684+ D0B0
 685+ D0B0              N0equN1byN2div256:      MACRO param1,param2,param3
 686+ D0B0 ~                                    ld      a,param3                        ;
 687+ D0B0 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 688+ D0B0 ~                                    ld      a,param2                        ; A = XX16 element
 689+ D0B0 ~                                    ld      d,a
 690+ D0B0 ~                                    mul
 691+ D0B0 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 692+ D0B0 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 693+ D0B0                                      ENDM
 694+ D0B0
 695+ D0B0               ; TESTEDOK
 696+ D0B0              XX12DotOneRow:
 697+ D0B0              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 697+ D0B0 3A 75 C0    >                        ld      a,(UBnkXScaled)                        ;
 697+ D0B3 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 697+ D0B4 7E          >                        ld      a,(hl)                        ; A = XX16 element
 697+ D0B5 57          >                        ld      d,a
 697+ D0B6 ED 30       >                        mul
 697+ D0B8 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 697+ D0B9 32 84 94    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 698+ D0BC 23                                   inc     hl                                  ; move to sign byte
 699+ D0BD              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 699+ D0BD 3A 76 C0    >                        ld      a,(UBnkXScaledSign)
 699+ D0C0 AE          >                        xor     (hl)
 700+ D0C1 32 66 94                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 701+ D0C4 23                                   inc     hl
 702+ D0C5              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 702+ D0C5 3A 77 C0    >                        ld      a,(UBnkYScaled)                        ;
 702+ D0C8 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 702+ D0C9 7E          >                        ld      a,(hl)                        ; A = XX16 element
 702+ D0CA 57          >                        ld      d,a
 702+ D0CB ED 30       >                        mul
 702+ D0CD 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 702+ D0CE 32 64 94    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 703+ D0D1                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 703+ D0D1 3A 84 94    >               ld       a,(varT)
 703+ D0D4 32 65 94    >               ld       (varR),a
 704+ D0D7 23                                   inc     hl
 705+ D0D8                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 705+ D0D8 3A 78 C0    >                        ld      a,(UBnkYScaledSign)
 705+ D0DB AE          >                        xor     (hl)
 706+ D0DC              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 707+ D0DC E5           STequSRplusAQ           push    hl
 708+ D0DD CD 68 A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 709+ D0E0 E1                                   pop     hl
 710+ D0E1 32 84 94                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 711+ D0E4 23                                   inc     hl
 712+ D0E5              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 712+ D0E5 3A 79 C0    >                        ld      a,(UBnkZScaled)                        ;
 712+ D0E8 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 712+ D0E9 7E          >                        ld      a,(hl)                        ; A = XX16 element
 712+ D0EA 57          >                        ld      d,a
 712+ D0EB ED 30       >                        mul
 712+ D0ED 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 712+ D0EE 32 64 94    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 713+ D0F1                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 713+ D0F1 3A 84 94    >               ld       a,(varT)
 713+ D0F4 32 65 94    >               ld       (varR),a
 714+ D0F7 23                                   inc     hl
 715+ D0F8                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 715+ D0F8 3A 7A C0    >                        ld      a,(UBnkZScaledSign)
 715+ D0FB AE          >                        xor     (hl)
 716+ D0FC              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 717+ D0FC CD 68 A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 718+ D0FF              ; Now we exit with A = result S = Sign
 719+ D0FF C9                                   ret
 720+ D100
 721+ D100              ; added where sign is separate byte
 722+ D100              ;;;XX12DotOneRowV2:
 723+ D100              ;;;XX12CalcXV2:
 724+ D100              ;;;        ld      a,(hl)
 725+ D100              ;;;        ld      de,(UBnkXScaled)
 726+ D100              ;;;        ld      b,d
 727+ D100              ;;;        ld      d,a
 728+ D100              ;;;        mul
 729+ D100              ;;;        ld      a,e
 730+ D100              ;;;        ld      (varT),a
 731+ D100              ;;;XX12CalcXSignV2:
 732+ D100              ;;;        inc     hl
 733+ D100              ;;;        ld      a,(hl)
 734+ D100              ;;;        xor     b
 735+ D100              ;;;        ld      (varS),a
 736+ D100              ;;;XX12CalcYV2:
 737+ D100              ;;;        inc     hl
 738+ D100              ;;;        ld      de,(UBnkYScaled)
 739+ D100              ;;;        ld      b,d
 740+ D100              ;;;        ld      d,a
 741+ D100              ;;;        mul
 742+ D100              ;;;        ld      a,e
 743+ D100              ;;;        ld      (varQ),a
 744+ D100              ;;;        ld      a,(varT)
 745+ D100              ;;;        ld      (varR),a
 746+ D100              ;;;XX12CalcYSignV2:
 747+ D100              ;;;        inc     hl
 748+ D100              ;;;        ld      a,(hl)
 749+ D100              ;;;        xor     b
 750+ D100              ;;;        ld      (varS),a
 751+ D100              ;;;XX12CalcXPlusYV2:
 752+ D100              ;;;        push    hl
 753+ D100              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 754+ D100              ;;;        pop     hl
 755+ D100              ;;;        ld      (varT),a                            ; var S already holds sign
 756+ D100              ;;;       ret
 757+ D100
 758+ D100
 759+ D100              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 760+ D100              ;TESTED OK
 761+ D100              XX12EquXX15DotProductXX16:
 762+ D100              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 763+ D100 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 764+ D103 21 30 C0                             ld      hl,UBnkTransmatSidevX
 765+ D106 CD B0 D0                             call    XX12DotOneRow
 766+ D109 32 7B C0                             ld      (UBnkXX12xLo),a
 767+ D10C 3A 66 94                             ld      a,(varS)
 768+ D10F 32 7C C0                             ld      (UBnkXX12xSign),a
 769+ D112 21 36 C0                             ld      hl,UBnkTransmatRoofvX
 770+ D115 CD B0 D0                             call    XX12DotOneRow
 771+ D118 32 7D C0                             ld      (UBnkXX12yLo),a
 772+ D11B 3A 66 94                             ld      a,(varS)
 773+ D11E 32 7E C0                             ld      (UBnkXX12ySign),a
 774+ D121 21 3C C0                             ld      hl,UBnkTransmatNosevX
 775+ D124 CD B0 D0                             call    XX12DotOneRow
 776+ D127 32 7F C0                             ld      (UBnkXX12zLo),a
 777+ D12A 3A 66 94                             ld      a,(varS)
 778+ D12D 32 80 C0                             ld      (UBnkXX12zSign),a
 779+ D130 C9                                   ret
 780+ D131              ;--------------------------------------------------------------------------------------------------------
 781+ D131                                      include "./Variables/CopyXX12ScaledToXX18.asm"
# file opened: ././Variables/CopyXX12ScaledToXX18.asm
   1++D131              CopyXX12ScaledToXX18:
   2++D131              CopyResultToDrawCam:
   3++D131                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D131 3A 7B C0    >               ld       a,(XX12)
   3++D134 32 69 C0    >               ld       (XX18),a
   4++D137                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D137 3A 7C C0    >               ld       a,(XX12+1)
   4++D13A 32 6B C0    >               ld       (XX18+2),a
   5++D13D                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D13D 3A 7D C0    >               ld       a,(XX12+2)
   5++D140 32 6C C0    >               ld       (XX18+3),a
   6++D143                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D143 3A 7E C0    >               ld       a,(XX12+3)
   6++D146 32 6E C0    >               ld       (XX18+5),a
   7++D149                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D149 3A 7F C0    >               ld       a,(XX12+4)
   7++D14C 32 6F C0    >               ld       (XX18+6),a
   8++D14F                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D14F 3A 80 C0    >               ld       a,(XX12+5)
   8++D152 32 71 C0    >               ld       (XX18+8),a
   9++D155 C9                   ret
  10++D156
# file closed: ././Variables/CopyXX12ScaledToXX18.asm
 782+ D156                                      include "./Variables/CopyXX12toXX15.asm"
# file opened: ././Variables/CopyXX12toXX15.asm
   1++D156              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D156 3A 7B C0    >               ld       a,(UBnkXX12xLo)
   1++D159 32 75 C0    >               ld       (UBnkXScaled),a
   2++D15C                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D15C 3A 7C C0    >               ld       a,(UBnkXX12xSign)
   2++D15F 32 76 C0    >               ld       (UBnkXScaledSign),a
   3++D162                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D162 3A 7D C0    >               ld       a,(UBnkXX12yLo)
   3++D165 32 77 C0    >               ld       (UBnkYScaled),a
   4++D168                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D168 3A 7E C0    >               ld       a,(UBnkXX12ySign)
   4++D16B 32 78 C0    >               ld       (UBnkYScaledSign),a
   5++D16E                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D16E 3A 7F C0    >               ld       a,(UBnkXX12zLo)
   5++D171 32 79 C0    >               ld       (UBnkZScaled),a
   6++D174                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D174 3A 80 C0    >               ld       a,(UBnkXX12zSign)
   6++D177 32 7A C0    >               ld       (UBnkZScaledSign),a
   7++D17A C9                                   ret
   8++D17B
# file closed: ././Variables/CopyXX12toXX15.asm
 783+ D17B                                      include "./Variables/CopyXX18toXX15.asm"
# file opened: ././Variables/CopyXX18toXX15.asm
   1++D17B              CopyXX18toXX15:
   2++D17B              CopyDrawCamToScaled:
   3++D17B                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D17B 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D17E 32 75 C0    >               ld       (UBnkXScaled),a
   4++D181                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D181 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D184 32 76 C0    >               ld       (UBnkXScaledSign),a
   5++D187                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D187 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D18A 32 77 C0    >               ld       (UBnkYScaled),a
   6++D18D                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D18D 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D190 32 78 C0    >               ld       (UBnkYScaledSign),a
   7++D193                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D193 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D196 32 79 C0    >               ld       (UBnkZScaled),a
   8++D199                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D199 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D19C 32 7A C0    >               ld       (UBnkZScaledSign),a
   9++D19F C9                   ret
  10++D1A0
# file closed: ././Variables/CopyXX18toXX15.asm
 784+ D1A0                                      include "./Variables/CopyXX18ScaledToXX15.asm"
# file opened: ././Variables/CopyXX18ScaledToXX15.asm
   1++D1A0 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D1A3 11 69 C0                             ld      de,UBnkDrawCam0xLo
   3++D1A6                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D1A6 ED A0       >		                ldi
   3++D1A8 ED A0       >		                ldi
   3++D1AA ED A0       >		                ldi
   3++D1AC ED A0       >		                ldi
   3++D1AE ED A0       >		                ldi
   3++D1B0 ED A0       >		                ldi
   3++D1B2 ED A0       >		                ldi
   3++D1B4 ED A0       >		                ldi
   3++D1B6 ED A0       >		                ldi
   4++D1B8 C9                                   ret
   5++D1B9
   6++D1B9              CopyCameraToXX15Signed:
   7++D1B9 2A 69 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D1BC 3A 6B C0             ld  a,(UBnkDrawCam0xSgn)
   9++D1BF B4                   or  h
  10++D1C0 67                   ld  h,a
  11++D1C1 22 75 C0             ld  (UBnkXScaled),hl
  12++D1C4 2A 6C C0             ld  hl,(UBnkDrawCam0yLo)
  13++D1C7 3A 6E C0             ld  a,(UBnkDrawCam0ySgn)
  14++D1CA B4                   or  h
  15++D1CB 67                   ld  h,a
  16++D1CC 22 77 C0             ld  (UBnkYScaled),hl
  17++D1CF 2A 6F C0             ld  hl,(UBnkDrawCam0zLo)
  18++D1D2 3A 71 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D1D5 B4                   or  h
  20++D1D6 67                   ld  h,a
  21++D1D7 22 79 C0             ld  (UBnkZScaled),hl
  22++D1DA C9                   ret
  23++D1DB
  24++D1DB              CopyXX18ScaledToXX15:
  25++D1DB              CopyDrawCamToScaledMatrix:
  26++D1DB                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D1DB 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
  26++D1DE 32 7A C0    >               ld       (UBnkZScaledSign),a
  27++D1E1                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D1E1 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
  27++D1E4 32 75 C0    >               ld       (UBnkXScaled),a
  28++D1E7                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D1E7 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
  28++D1EA 32 76 C0    >               ld       (UBnkXScaledSign),a
  29++D1ED                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D1ED 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
  29++D1F0 32 77 C0    >               ld       (UBnkYScaled),a
  30++D1F3                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D1F3 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
  30++D1F6 32 78 C0    >               ld       (UBnkYScaledSign),a
  31++D1F9                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D1F9 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
  31++D1FC 32 79 C0    >               ld       (UBnkZScaled),a
  32++D1FF C9                   ret
  33++D200
  34++D200              CopyXX15ToXX18Scaled:
  35++D200              CopyScaledMatrixToDrawCam:
  36++D200                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D200 3A 7A C0    >               ld       a,(UBnkZScaledSign)
  36++D203 32 71 C0    >               ld       (UBnkDrawCam0zSgn),a
  37++D206                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D206 3A 75 C0    >               ld       a,(UBnkXScaled)
  37++D209 32 69 C0    >               ld       (UBnkDrawCam0xLo),a
  38++D20C                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D20C 3A 76 C0    >               ld       a,(UBnkXScaledSign)
  38++D20F 32 6B C0    >               ld       (UBnkDrawCam0xSgn),a
  39++D212                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D212 3A 77 C0    >               ld       a,(UBnkYScaled)
  39++D215 32 6C C0    >               ld       (UBnkDrawCam0yLo),a
  40++D218                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D218 3A 78 C0    >               ld       a,(UBnkYScaledSign)
  40++D21B 32 6E C0    >               ld       (UBnkDrawCam0ySgn),a
  41++D21E                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D21E 3A 79 C0    >               ld       a,(UBnkZScaled)
  41++D221 32 6F C0    >               ld       (UBnkDrawCam0zLo),a
  42++D224 C9                   ret
  43++D225
  44++D225
  45++D225              XX15EquXX15AddXX18:
  46++D225              LL94Z:
  47++D225 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D227 16 00                ld      d,0                                                     ;
  49++D229 3A 79 C0             ld      a,(UBnkZScaled)                                         ;
  50++D22C 6F                   ld      l,a                                                     ;
  51++D22D 3A 7A C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D230 47                   ld      b,a                                                     ;
  53++D231 3A 6F C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D234 5F                   ld      e,a                                                     ;
  55++D235 3A 71 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D238 4F                   ld      c,a                                                     ;
  57++D239 CD 6A CB             call    ADDHLDESignBC                                           ;
  58++D23C 47                   ld      b,a                                                     ;
  59++D23D 7C                   ld      a,h                                                     ;
  60++D23E 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D23F 32 7A C0             ld      (UBnkZScaledSign),a                                     ;
  62++D242 7D                   ld      a,l                                                     ;
  63++D243 32 79 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D246              LL94X:
  65++D246 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D248 16 00                ld      d,0                                                     ;
  67++D24A 3A 75 C0             ld      a,(UBnkXScaled)                                         ;
  68++D24D 6F                   ld      l,a                                                     ;
  69++D24E 3A 76 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D251 47                   ld      b,a                                                     ;
  71++D252 3A 69 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D255 5F                   ld      e,a                                                     ;
  73++D256 3A 6B C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D259 4F                   ld      c,a                                                     ;
  75++D25A CD 6A CB             call    ADDHLDESignBC                                           ;
  76++D25D 47                   ld      b,a                                                     ;
  77++D25E 7C                   ld      a,h                                                     ;
  78++D25F 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D260 32 76 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D263 7D                   ld      a,l                                                     ;
  81++D264 32 75 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D267              LL94Y:
  83++D267 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D269 16 00                ld      d,0                                                     ;
  85++D26B 3A 77 C0             ld      a,(UBnkYScaled)                                         ;
  86++D26E 6F                   ld      l,a                                                     ;
  87++D26F 3A 78 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D272 47                   ld      b,a                                                     ;
  89++D273 3A 6C C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D276 5F                   ld      e,a                                                     ;
  91++D277 3A 6E C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D27A 4F                   ld      c,a                                                     ;
  93++D27B CD 6A CB             call    ADDHLDESignBC                                           ;
  94++D27E 47                   ld      b,a                                                     ;
  95++D27F 7C                   ld      a,h                                                     ;
  96++D280 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D281 32 78 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D284 7D                   ld      a,l                                                     ;
  99++D285 32 77 C0             ld      (UBnkYScaled),a                                         ;
 100++D288 C9                   ret
 101++D289
# file closed: ././Variables/CopyXX18ScaledToXX15.asm
 785+ D289                                      include "./Variables/CopyXX12ToScaled.asm"
# file opened: ././Variables/CopyXX12ToScaled.asm
   1++D289              CopyXX12ToScaled:
   2++D289              CopyResultToScaled:
   3++D289                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D289 3A 7B C0    >               ld       a,(XX12+0)
   3++D28C 32 75 C0    >               ld       (UBnkXScaled),a
   4++D28F                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D28F 3A 7D C0    >               ld       a,(XX12+2)
   4++D292 32 77 C0    >               ld       (UBnkYScaled),a
   5++D295                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D295 3A 7F C0    >               ld       a,(XX12+4)
   5++D298 32 79 C0    >               ld       (UBnkZScaled),a
   6++D29B C9                   ret
   7++D29C
# file closed: ././Variables/CopyXX12ToScaled.asm
 786+ D29C              ;--------------------------------------------------------------------------------------------------------
 787+ D29C                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D29C              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D29C              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D29C              ;;; S = XX12 XSign Xor XX15 XSign
   4++D29C              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D29C              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D29C              ;;; R = T
   7++D29C              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D29C              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D29C              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D29C              ;;; Q = A * Q /256 usigned (zdot)
  11++D29C              ;;; R = T
  12++D29C              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D29C
  14++D29C
  15++D29C
  16++D29C
  17++D29C
  18++D29C              MacroAequDxEdiv256usgn:	MACRO
  19++D29C ~            						mul
  20++D29C ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D29C              						ENDM
  22++D29C              DotProductXX12XX15:
  23++D29C 3A 7B C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D29F                      IfAIsZeroGoto dotxskipzero
  24++D29F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D2A0 CA BD D2    >				jp	z, dotxskipzero
  25++D2A3 5F                   ld          e,a
  26++D2A4 3A 75 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D2A7 57                   ld          d,a                     ; de = xx12 x signed
  28++D2A8                      IfAIsZeroGoto dotxskipzero
  28++D2A8 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D2A9 CA BD D2    >				jp	z, dotxskipzero
  29++D2AC ED 30        		mul
  30++D2AE 42                   ld          b,d                     ; b = result
  31++D2AF 3A 7C C0             ld          a,(UBnkXX12xSign)
  32++D2B2 21 76 C0             ld          hl,UBnkXScaledSign
  33++D2B5 AE                   xor         (hl)
  34++D2B6 E6 80                and         $80                     ; so sign bit only
  35++D2B8 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D2BA C3 C1 D2             jp          dotmuly
  37++D2BD              dotxskipzero:
  38++D2BD AF                   xor         a
  39++D2BE 47                   ld          b,a
  40++D2BF FD 67                ld          iyh,a
  41++D2C1              dotmuly:
  42++D2C1              ; now we have b = XX12 x &d  norm x signed
  43++D2C1 3A 7D C0             ld          a,(UBnkXX12yLo)
  44++D2C4                      IfAIsZeroGoto dotyskipzero
  44++D2C4 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D2C5 CA E4 D2    >				jp	z, dotyskipzero
  45++D2C8 5F                   ld          e,a
  46++D2C9 3A 77 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D2CC                      IfAIsZeroGoto dotyskipzero
  47++D2CC A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D2CD CA E4 D2    >				jp	z, dotyskipzero
  48++D2D0 57                   ld          d,a                     ; de = xx12 x signed
  49++D2D1 ED 30                mul
  50++D2D3 4A                   ld          c,d                     ; c = result
  51++D2D4 DD 69                ld          ixl,c
  52++D2D6 3A 7E C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D2D9 21 78 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D2DC AE                   xor         (hl)                    ; XX15+3
  55++D2DD E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D2DF DD 67                ld          ixh,a
  57++D2E1 C3 E8 D2             jp          dotaddxy
  58++D2E4              dotyskipzero:
  59++D2E4 AF                   xor         a
  60++D2E5 4F                   ld          c,a
  61++D2E6 DD 67                ld          ixh,a
  62++D2E8              dotaddxy:
  63++D2E8              ; Optimise later as this is 16 bit
  64++D2E8 26 00                ld          h,0                     ;
  65++D2EA 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D2EB 16 00                ld          d,0                     ;
  67++D2ED 59                   ld          e,c                     ; de = ylo + yscaled
  68++D2EE FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D2F0 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D2F1 CD 6A CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D2F4 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D2F5 3A 7F C0             ld          a,(UBnkXX12zLo)         ;
  73++D2F8                      IfAIsZeroGoto dotzskipzero
  73++D2F8 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D2F9 CA 1E D3    >				jp	z, dotzskipzero
  74++D2FC 5F                   ld          e,a                     ;
  75++D2FD 3A 79 C0             ld          a,(UBnkZScaled)         ;
  76++D300                      IfAIsZeroGoto dotzskipzero
  76++D300 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D301 CA 1E D3    >				jp	z, dotzskipzero
  77++D304 57                   ld          d,a
  78++D305 ED 30                mul
  79++D307 E5                   push        hl                      ; save prev result
  80++D308 3A 7A C0             ld          a,(UBnkZScaledSign)
  81++D30B 21 80 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D30E AE                   xor         (hl)                    ; hi sign
  83++D30F E6 80                and         $80                     ; a = sign of multiply
  84++D311 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D312 E1                   pop         hl
  86++D313 5A                   ld          e,d
  87++D314 16 00                ld          d,0
  88++D316 CD 6A CB             call ADDHLDESignBC
  89++D319 32 66 94             ld          (varS),a
  90++D31C 7D                   ld          a,l
  91++D31D C9                   ret                                 ; returns with A = value, varS = sign
  92++D31E              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D31E 78                   ld          a,b
  94++D31F 32 66 94             ld          (varS),a
  95++D322 7D                   ld          a,l
  96++D323 C9                   ret
  97++D324              ;;;;       DotProductXX12XX15:
  98++D324              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D324              ;;;;       ld          e,a
 100++D324              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D324              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D324              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D324              ;;;;		mul
 104++D324              ;;;;       ld          b,d                     ; b as var T
 105++D324              ;;;;       ld          a,(UBnkXX12xSign)
 106++D324              ;;;;       ld          hl,UBnkXScaledSign
 107++D324              ;;;;       xor         (hl)
 108++D324              ;;;;       and         $80                     ; so sign bit only
 109++D324              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D324              ;;;; now we have b = XX12 x & norm x signed
 111++D324              ;;;; by here B = xlo & xscaled C = result sign
 112++D324              ;;;;       ld          a,(UBnkXX12yLo)
 113++D324              ;;;;       ld          e,a
 114++D324              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D324              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D324              ;;;;       mul
 117++D324              ;;;;       ld          a,d
 118++D324              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D324              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D324              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D324              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D324              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D324              ;;;;       xor         (hl)                    ; XX15+3
 124++D324              ;;;;       and         $80
 125++D324              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D324              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D324              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D324              ;;;;       ld          e,a                     ; use e as var Q
 129++D324              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D324              ;;;;       ld          d,a
 131++D324              ;;;;       mul
 132++D324              ;;;;       ld          a,d
 133++D324              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D324              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D324              ;;;;       ld          a,(UBnkZScaledSign)
 136++D324              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D324              ;;;;       xor         (hl)                    ; hi sign
 138++D324              ;;;;       and         $80
 139++D324              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D324              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D324
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 788+ D324              ;--------------------------------------------------------------------------------------------------------
 789+ D324              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 790+ D324                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D324              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D324              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D324              ScaleNormal:
   4++D324              LL93:
   5++D324 3A 6B 94             ld      a,(XX17)                    ; scale--
   6++D327 DD 6F        		ld		ixl,a
   7++D329 3A 79 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D32C DD 2D        		dec		ixl
   9++D32E F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D32F              ScaleLoop:
  11++D32F              LL933:
  12++D32F 21 75 C0             ld      hl,XX15
  13++D332 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D334 23                   inc     hl							; looking at XX15 x sign now
  15++D335 23                   inc     hl							; looking at XX15 y Lo now
  16++D336 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D338 23           		inc		hl							; looking at XX15 y sign now
  18++D339 23           		inc		hl							; looking at XX15 z Lo now
  19++D33A CB 3E        		srl		(hl)
  20++D33C 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D33D DD 2D                dec     ixl                         ; reduce scale
  22++D33F F2 2F D3             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D342 C9                   ret
  24++D343
# file closed: ./Universe/ScaleNormal.asm
 791+ D343              ;--------------------------------------------------------------------------------------------------------
 792+ D343                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D343              ScaleObjectDistance:
   2++D343              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D343 3A 11 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D346 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D347              LL90:                                       ; scaling object distance
   6++D347 3A 70 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D34A 47                   ld      b,a                         ; z_hi (yReg)
   8++D34B                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D34B A7          >                 and a
   8++D34C C8          >                 ret    z
   9++D34D              LL90Loop:
  10++D34D              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D34D 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D34E                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D34E 2A 6C C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D351 CB 3C       >                    srl   h
  12++D353 CB 1D       >                    rr    l
  12++D355 22 6C C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D358                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D358 2A 69 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D35B CB 3C       >                    srl   h
  13++D35D CB 1D       >                    rr    l
  13++D35F 22 69 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D362                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D362 2A 6F C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D365 CB 3C       >                    srl   h
  14++D367 CB 1D       >                    rr    l
  14++D369 22 6F C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D36C 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D36D                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D36D FE 00       >				cp	0
  16++D36F C2 4D D3    >				jp	nz,LL90Loop
  17++D372 C9                   ret
  18++D373
# file closed: ./Universe/ScaleObjectDistance.asm
 793+ D373              ;--------------------------------------------------------------------------------------------------------
 794+ D373
 795+ D373              ; Backface cull
 796+ D373              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 797+ D373              ; normal vector = cross product of ship ccordinates
 798+ D373              ;
 799+ D373
 800+ D373                                      include "./Variables/CopyFaceToXX15.asm"
# file opened: ././Variables/CopyFaceToXX15.asm
   1++D373 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D374 47                                   ld      b,a                                                    ;;;
   3++D375 E6 80                                and     $80
   4++D377 32 76 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D37A 78                                   ld      a,b
   6++D37B CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D37D 47                                   ld      b,a
   8++D37E E6 80                                and     $80
   9++D380 32 78 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D383 78                                   ld      a,b
  11++D384 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D386 E6 80                                and     $80
  13++D388 32 7A C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D38B 23                                   inc     hl                          ; move to X ccord
  15++D38C 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D38D 32 75 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D390 23                                   inc     hl                                                                                                                 ;;;
  18++D391 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D392 32 77 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D395 23                                   inc     hl                                                                                                                 ;;;
  21++D396 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D397 32 79 C0                             ld      (UBnkZScaled),a
  23++D39A C9                                   ret
  24++D39B
# file closed: ././Variables/CopyFaceToXX15.asm
 801+ D39B                                      include "./Variables/CopyFaceToXX12.asm"
# file opened: ././Variables/CopyFaceToXX12.asm
   1++D39B 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D39C 47                                   ld      b,a                         ; save sign bits to b
   3++D39D E6 80                                and     $80
   4++D39F 32 7C C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D3A2 78                                   ld      a,b
   6++D3A3 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D3A5 47                                   ld      b,a
   8++D3A6 E6 80                                and     $80
   9++D3A8 32 7E C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D3AB 78                                   ld      a,b
  11++D3AC CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D3AE E6 80                                and     $80
  13++D3B0 32 80 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D3B3 23                                   inc     hl                          ; move to X ccord
  15++D3B4 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D3B5 32 7B C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D3B8 23                                   inc     hl                                                                                                                 ;;;
  18++D3B9 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D3BA 32 7D C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D3BD 23                                   inc     hl                                                                                                                 ;;;
  21++D3BE 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D3BF 32 7F C0                             ld      (UBnkXX12zLo),a
  23++D3C2 C9                                   ret
  24++D3C3
# file closed: ././Variables/CopyFaceToXX12.asm
 802+ D3C3              ;--------------------------------------------------------------
 803+ D3C3              ; Original loginc in EE29 (LL9 4 of 12)
 804+ D3C3              ; Enters with XX4 = z distnace scaled to 1 .. 31
 805+ D3C3              ; get number of faces * 4      FaceCntX4
 806+ D3C3              ; return if no faces
 807+ D3C3              ; get Face Normal scale factor FaceScale (XX17)
 808+ D3C3              ; get ship pos z hi     (XX18)
 809+ D3C3              ; While Z hi <> 0
 810+ D3C3              ;    FaceScale = FaceScale + 1           (XX17)
 811+ D3C3              ;    Ship pos y = ship pos y / 2         (XX18)
 812+ D3C3              ;    ship pos x = ship pos x / 2         (XX18)
 813+ D3C3              ;    ship pos z = ship pos z / 2         (XX18)
 814+ D3C3              ; Loop
 815+ D3C3              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 816+ D3C3              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 817+ D3C3              ; Copy XX12 into XX18
 818+ D3C3              ; For each face
 819+ D3C3              ;     Get Face sign and visibility distance byte
 820+ D3C3              ;     if normal visibility range  < XX4
 821+ D3C3              ;        Get Face data into XX12
 822+ D3C3              ;        if FaceScale (XX17) >= 4
 823+ D3C3              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 824+ D3C3              ;        else
 825+ D3C3              ;           Copy FaceScale scaled to X  (XX17)
 826+ D3C3              ;LabelOverflowLoop:
 827+ D3C3              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 828+ D3C3              ;           While X >= 0
 829+ D3C3              ;              X--                                                                                                  ::LL93
 830+ D3C3              ;              if  x >= 0
 831+ D3C3              ;                  XX15x = XX15x / 2
 832+ D3C3              ;                  XX15y = XX15y / 2
 833+ D3C3              ;                  XX15y = XX15y / 2
 834+ D3C3              ;           loop
 835+ D3C3              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 836+ D3C3              ;           if A > 256 (i.e. was overflow)
 837+ D3C3              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 838+ D3C3              ;               X = 1
 839+ D3C3              ;               Goto LabelOverflowLoop
 840+ D3C3              ;           else
 841+ D3C3              ;              Scaled (XX15) Z = AddZ
 842+ D3C3              ;           endif
 843+ D3C3              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 844+ D3C3              ;           if A > 256 (i.e. was overflow)
 845+ D3C3              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 846+ D3C3              ;               X = 1
 847+ D3C3              ;               Goto LabelOverflowLoop
 848+ D3C3              ;           else
 849+ D3C3              ;              Scaled (XX15) X = AddX
 850+ D3C3              ;           endif
 851+ D3C3              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 852+ D3C3              ;           if A > 256 (i.e. was overflow)
 853+ D3C3              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 854+ D3C3              ;               X = 1
 855+ D3C3              ;               Goto LabelOverflowLoop
 856+ D3C3              ;           else
 857+ D3C3              ;              Scaled (XX15) Y = AddY
 858+ D3C3              ;           endif
 859+ D3C3              ;        endif
 860+ D3C3              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 861+ D3C3              ;        if dot product < 0
 862+ D3C3              ;           set face visible
 863+ D3C3              ;        else
 864+ D3C3              ;           set face invisible
 865+ D3C3              ;        end if
 866+ D3C3              ;     else
 867+ D3C3              ;       Set FaceVisibility to true
 868+ D3C3              ;     end if
 869+ D3C3              ; Next Face
 870+ D3C3
 871+ D3C3 DD 25        ScaleDownXX15byIXH:     dec     ixh
 872+ D3C5 F8                                   ret     m
 873+ D3C6 21 75 C0                             ld      hl,UBnkXScaled
 874+ D3C9 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 875+ D3CB 23                                   inc     hl                          ; looking at XX15 x sign now
 876+ D3CC 23                                   inc     hl                          ; looking at XX15 y Lo now
 877+ D3CD CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 878+ D3CF 23                                   inc     hl                          ; looking at XX15 y sign now
 879+ D3D0 23                                   inc     hl                          ; looking at XX15 z Lo now
 880+ D3D1 CB 3E                                srl     (hl)
 881+ D3D3 C3 C3 D3                             jp      ScaleDownXX15byIXH
 882+ D3D6 C9                                   ret
 883+ D3D7
 884+ D3D7 21 69 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 885+ D3DA CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 886+ D3DC 23                                   inc     hl                          ; looking at XX18 x sign now
 887+ D3DD 23                                   inc     hl                          ; looking at XX18 y Lo now
 888+ D3DE CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 889+ D3E0 23                                   inc     hl                          ; looking at XX18 y sign now
 890+ D3E1 23                                   inc     hl                          ; looking at XX18 z Lo now
 891+ D3E2 CB 3E                                srl     (hl)
 892+ D3E4 C9                                   ret
 893+ D3E5
 894+ D3E5              ;line of sight vector = [x y z] + face normal vector
 895+ D3E5
 896+ D3E5              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 897+ D3E5              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 898+ D3E5              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 899+ D3E5              ;
 900+ D3E5              ;--------------------------------------------------------------
 901+ D3E5              ; line of sight (eye outwards dot face normal vector < 0
 902+ D3E5              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 903+ D3E5              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 904+ D3E5              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 905+ D3E5
 906+ D3E5              RotateXX15ByTransMatXX16:
 907+ D3E5 21 30 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 908+ D3E8 CD 0D 89                             call    XX12ProcessOneRow
 909+ D3EB 47                                   ld      b,a                                 ; get
 910+ D3EC 7D                                   ld      a,l
 911+ D3ED B0                                   or      b
 912+ D3EE 32 7C C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 913+ D3F1 7D                                   ld      a,l
 914+ D3F2 32 7B C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 915+ D3F5
 916+ D3F5 21 36 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 917+ D3F8 CD 0D 89                             call    XX12ProcessOneRow
 918+ D3FB 47                                   ld      b,a                                 ; get
 919+ D3FC 7D                                   ld      a,l
 920+ D3FD B0                                   or      b
 921+ D3FE 32 7E C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 922+ D401 7D                                   ld      a,l
 923+ D402 32 7D C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 924+ D405
 925+ D405 21 3C C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 926+ D408 CD 0D 89                             call    XX12ProcessOneRow
 927+ D40B 47                                   ld      b,a                                 ; get
 928+ D40C 7D                                   ld      a,l
 929+ D40D B0                                   or      b
 930+ D40E 32 80 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 931+ D411 7D                                   ld      a,l
 932+ D412 32 7F C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 933+ D415 C9                                   ret
 934+ D416
 935+ D416                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D416 00           CurrentNormIdx  DB 0
   2++D417              ; SomeFacesVisible:
   3++D417              ; EE29:
   4++D417
   5++D417              ;   Backface cull logic  line of sight vector . face normal vector
   6++D417              ;       line of sight vector . face normal vector
   7++D417              ;       => line of sight vector = [x y z] + face normal vector
   8++D417              ;       Where [x y z] =
   9++D417              ;                                               [ [x y z] . sidev ]
  10++D417              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D417              ;                                               [ [x y z] . nosev ]
  12++D417              ;
  13++D417              ;   so project the [x y z] vector into the face's normal space
  14++D417              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D417              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D417              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D417              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D417              ;
  19++D417              ;                         [ [x y z] . sidev + normal_x ]
  20++D417              ;                       = [ [x y z] . roofv + normal_y ]
  21++D417              ;                         [ [x y z] . nosev + normal_z ]
  22++D417              ;
  23++D417              ; so
  24++D417              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D417              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D417              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D417              ;
  28++D417              ; where face is visible if visibility < 0
  29++D417              ;
  30++D417              ;   so we set XX15 to [x y z] . sidev
  31++D417              ;                     [x y z] . roofv
  32++D417              ;                     [x y z] . nosev
  33++D417              ;
  34++D417
  35++D417
  36++D417
  37++D417 3A 70 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D41A                                      IfAIsZeroGoto .ScaleDone            ;
  38++D41A A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D41B CA 48 D4    >				jp	z, .ScaleDone
  39++D41E 2A 69 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D421 ED 5B 6C C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D425 ED 4B 6F C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D429 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D42B                                      ShiftHLRight1                       ; divide cam position by 2
  43++D42B CB 3C       >			   srl h
  43++D42D CB 1D       >			   rr  l
  44++D42F                                      ShiftDERight1                       ;
  44++D42F CB 3A       >			   srl d
  44++D431 CB 1B       >			   rr  e
  45++D433                                      ShiftBCRight1                       ;
  45++D433 CB 38       >			   srl b
  45++D435 CB 19       >			   rr  c
  46++D437 78                                   ld      a,b                         ; loop if not scaled down
  47++D438                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D438 FE 00       >				cp	0
  47++D43A C2 29 D4    >				jp	nz,.ScaleNormalLoop
  48++D43D 22 69 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D440 ED 53 6C C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D444 ED 43 6F C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D448 FD 7D        .ScaleDone:             ld      a,iyl
  52++D44A 32 6B 94                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D44D C9                                   ret
  54++D44E
  55++D44E              ;;--BackFaceCull:
  56++D44E              ;;--;debug:jp debug
  57++D44E              ;;--; DEBUG  force for now
  58++D44E              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D44E              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D44E              ;;--;
  61++D44E              ;;--; DEBUG
  62++D44E              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D44E              ;;--                       ; break
  64++D44E              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D44E              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D44E              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D44E              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D44E              ;;--
  69++D44E              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D44E              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D44E              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D44E              ;;--                        call    ScaleDrawcam
  73++D44E              ;;--                        call    CopyDrawCamToScaled
  74++D44E              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D44E              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D44E              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D44E              ;;--                        ld      (varV),hl
  78++D44E              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D44E              ;;--                        srl     a                                                       ;
  80++D44E              ;;--                        srl     a                                                       ;
  81++D44E              ;;--                        ld      b,a                                                     ;
  82++D44E              ;;--                        xor     a
  83++D44E              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D44E              ;;--ProcessNormalsLoop:     push    hl
  85++D44E              ;;--                        push    bc
  86++D44E              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D44E              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D44E              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D44E              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D44E              ;;--                        jp      .FaceVisible
  91++D44E              ;;--; This bit needs to be added to force face visible
  92++D44E              ;;--.LL87:                  call    CopyFaceToXX12
  93++D44E              ;;--                        ld      a,(XX17)
  94++D44E              ;;--                        JumpIfALTNusng 4,.LL92
  95++D44E              ;;--.LL143:                 call    CopyXX18toXX15
  96++D44E              ;;--                        jp      .LL89
  97++D44E              ;;--.Ovflw:                 ld      a,(XX18)
  98++D44E              ;;--                        srl     a
  99++D44E              ;;--                        ld      (XX18),a
 100++D44E              ;;--                        ld      a,(XX18+6)
 101++D44E              ;;--                        srl     a
 102++D44E              ;;--                        ld      (XX18+6),a
 103++D44E              ;;--                        ld      a,(XX18+3)
 104++D44E              ;;--                        srl     a
 105++D44E              ;;--                        ld      (XX18+3),a
 106++D44E              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D44E              ;;--.LL92:                   ld      b,a
 108++D44E              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D44E              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D44E              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D44E              ;;--.LL93                   dec     b
 112++D44E              ;;--                        jp      m, .LL94
 113++D44E              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D44E              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D44E              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D44E              ;;--                        dec     b
 117++D44E              ;;--                        jp      p,.LL93Loop
 118++D44E              ;;--; Add normal to XX15
 119++D44E              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D44E              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D44E              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D44E              ;;--                        ld      a,(XX18+8)
 123++D44E              ;;--                        call    SAEquSRPlusAQ
 124++D44E              ;;--                        jp      c,.Ovflw
 125++D44E              ;;--                        ld      (UBnkZScaled),a
 126++D44E              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D44E              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D44E              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D44E              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D44E              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D44E              ;;--                        call    SAEquSRPlusAQ
 132++D44E              ;;--                        jp      c,.Ovflw
 133++D44E              ;;--                        ld      (UBnkXScaled),a
 134++D44E              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D44E              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D44E              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D44E              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D44E              ;;--                        call    SAEquSRPlusAQ
 139++D44E              ;;--                        jp      c,.Ovflw
 140++D44E              ;;--                        ld      (UBnkYScaled),a
 141++D44E              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D44E              ;;--; calculate dot product:
 143++D44E              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D44E              ;;--                        ld      a,(UBnkXScaled)
 145++D44E              ;;--                        call    AequAmulQdiv256
 146++D44E              ;;--                        ld      (varT),a
 147++D44E              ;;--                        ld      a,(UBnkXX12xSign)
 148++D44E              ;;--                        ld      hl,UBnkXScaledSign
 149++D44E              ;;--                        xor     (hl)
 150++D44E              ;;--                        ld      (varS),a
 151++D44E              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D44E              ;;--                        ld      a,(UBnkYScaled)
 153++D44E              ;;--                        call    AequAmulQdiv256
 154++D44E              ;;--                        ld      (varQ),a
 155++D44E              ;;--                        ldCopyByte  varT,varR
 156++D44E              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D44E              ;;--                        ld      hl, UBnkYScaledSign
 158++D44E              ;;--                        xor     (hl)
 159++D44E              ;;--                        call    SAEquSRPlusAQ
 160++D44E              ;;--                        ld      (varT),a
 161++D44E              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D44E              ;;--                        ld      a,  (UBnkZScaled)
 163++D44E              ;;--                        call    AequAmulQdiv256
 164++D44E              ;;--                        ld      (varQ),a
 165++D44E              ;;--                        ldCopyByte  varT, varR
 166++D44E              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D44E              ;;--                        ld      hl, UBnkXX12zSign
 168++D44E              ;;--                        xor     (hl)
 169++D44E              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D44E              ;;--                        test    $80
 171++D44E              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D44E              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D44E              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D44E              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D44E              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D44E              ;;--                        call        SetFaceAVisible
 177++D44E              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D44E              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D44E              ;;--                        pop         bc
 180++D44E              ;;--                        pop         hl                      ; get normal data pointer back
 181++D44E              ;;--                        ld          a,4
 182++D44E              ;;--                        add         hl,a                    ; move to next normal entry
 183++D44E              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D44E              ;;--                        dec         b
 185++D44E              ;;--                        jp          nz,ProcessNormalsLoop
 186++D44E              ;;--                        ret
 187++D44E
 188++D44E
 189++D44E
 190++D44E
 191++D44E              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D44E              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D44E              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D44E              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D44E              ;;;;;                        test    $80
 196++D44E              ;;;;;                        jp      nz, FaceVisible
 197++D44E              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D44E              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D44E              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D44E              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D44E              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D44E              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D44E              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D44E              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D44E              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D44E              ;;;;;                        ShiftDERight1                       ;
 207++D44E              ;;;;;                        ShiftBCRight1                       ;
 208++D44E              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D44E              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D44E              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D44E              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D44E              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D44E              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D44E              ;;;;;.ScaleDone:             ld      a,iyl
 215++D44E              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D44E              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D44E              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D44E              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D44E              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D44E              ;;;;;
 221++D44E              ;;;;;
 222++D44E              ;;;;;
 223++D44E              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D44E              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D44E              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D44E              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D44E              ;;;;;                        ld      (varV),hl
 228++D44E              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D44E              ;;;;;                        srl     a                                                       ;
 230++D44E              ;;;;;                        srl     a                                                       ;
 231++D44E              ;;;;;                        ld      b,a                                                     ;
 232++D44E              ;;;;;                        xor     a
 233++D44E              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D44E              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D44E              ;;;;;                        push    bc
 236++D44E              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D44E              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D44E              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D44E              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D44E              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D44E              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D44E              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D44E              ;;;;;                        jp      .LL89
 244++D44E              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D44E              ;;;;;                        srl     a
 246++D44E              ;;;;;                        ld      (XX18),a
 247++D44E              ;;;;;                        ld      a,(XX18+6)
 248++D44E              ;;;;;                        srl     a
 249++D44E              ;;;;;                        ld      (XX18+6),a
 250++D44E              ;;;;;                        ld      a,(XX18+3)
 251++D44E              ;;;;;                        srl     a
 252++D44E              ;;;;;                        ld      (XX18+3),a
 253++D44E              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D44E              ;;;;;.LL92:                  ld      b,a
 255++D44E              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D44E              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D44E              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D44E              ;;;;;.LL93                   dec     b
 259++D44E              ;;;;;                        jp      m, .LL94
 260++D44E              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D44E              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D44E              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D44E              ;;;;;                        dec     b
 264++D44E              ;;;;;                        jp      p,.LL93Loop
 265++D44E              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D44E              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D44E              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D44E              ;;;;;                        ld      a,(XX18+8)
 269++D44E              ;;;;;                        call    SAEquSRPlusAQ
 270++D44E              ;;;;;                        jp      c,.Ovflw
 271++D44E              ;;;;;                        ld      (UBnkZScaled),a
 272++D44E              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D44E              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D44E              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D44E              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D44E              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D44E              ;;;;;                        call    SAEquSRPlusAQ
 278++D44E              ;;;;;                        jp      c,.Ovflw
 279++D44E              ;;;;;                        ld      (UBnkXScaled),a
 280++D44E              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D44E              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D44E              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D44E              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D44E              ;;;;;                        call    SAEquSRPlusAQ
 285++D44E              ;;;;;                        jp      c,.Ovflw
 286++D44E              ;;;;;                        ld      (UBnkYScaled),a
 287++D44E              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D44E              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D44E              ;;;;;                        ld      a,(UBnkXScaled)
 290++D44E              ;;;;;                        call    AequAmulQdiv256
 291++D44E              ;;;;;                        ld      (varT),a
 292++D44E              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D44E              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D44E              ;;;;;                        xor     (hl)
 295++D44E              ;;;;;                        ld      (varS),a
 296++D44E              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D44E              ;;;;;                        ld      a,(UBnkYScaled)
 298++D44E              ;;;;;                        call    AequAmulQdiv256
 299++D44E              ;;;;;                        ld      (varQ),a
 300++D44E              ;;;;;                        ldCopyByte  varT,varR
 301++D44E              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D44E              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D44E              ;;;;;                        xor     (hl)
 304++D44E              ;;;;;                        call    SAEquSRPlusAQ
 305++D44E              ;;;;;                        ld      (varT),a
 306++D44E              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D44E              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D44E              ;;;;;                        call    AequAmulQdiv256
 309++D44E              ;;;;;                        ld      (varQ),a
 310++D44E              ;;;;;                        ldCopyByte  varT, varR
 311++D44E              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D44E              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D44E              ;;;;;                        xor     (hl)
 314++D44E              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D44E              ;;;;;                        test    $80
 316++D44E              ;;;;;                        jr      nz,.FaceVisible
 317++D44E              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D44E              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D44E              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D44E              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D44E              ;;;;;                        call    SetFaceAVisible
 322++D44E              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D44E              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D44E              ;;;;;                        pop         bc
 325++D44E              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D44E              ;;;;;                        ld          a,4
 327++D44E              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D44E              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D44E              ;;;;;                        dec         b
 330++D44E              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D44E              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D44E              ;;;;;
 333++D44E
 334++D44E              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 334++D44E 3A 0B C3    >                   ld   a,(FaceCtX4Addr)
 334++D451 A7          >                   and a
 334++D452 C8          >                   ret    z
 335++D453                                     ; break
 336++D453 CD BE CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 337++D456 CD 22 87                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 338++D459 CD A0 D1                             call    LoadCraftToCamera           ; XX18 = camera
 339++D45C                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 340++D45C 3A 11 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 341++D45F FD 6F                                ld      iyl,a                       ; iyl = scale factor
 342++D461              ; By this point XX18 = scaled draw cam and iyl = scale factor
 343++D461 CD 17 D4                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 344++D464 CD B9 D1                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 345++D467 CD F8 89     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 346++D46A CD 31 D1                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 347++D46D 21 F3 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 348++D470 22 0E 94                             ld      (varV),hl
 349++D473 3A 0B C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 350++D476 CB 3F                                srl     a                                                       ;
 351++D478 CB 3F                                srl     a                                                       ;
 352++D47A 47                                   ld      b,a                                                     ;
 353++D47B AF                                   xor     a
 354++D47C 32 16 D4                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 355++D47F E5           .ProcessNormalsLoop:     push    hl
 356++D480 C5                                   push    bc
 357++D481 7E           .LL86:                  ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 358++D482 E6 1F                                and     $1F                                                     ;     if normal visibility range  < XX4
 359++D484                                      JumpIfAGTENusng c,.FaceVisible                                  ; commented out for debuggging the skip
 359++D484 B9          >                        cp     c
 359++D485 D2 CA D5    >                        jp		nc,.FaceVisible
 360++D488              ; This bit needs to be added to force face visible
 361++D488 CD 9B D3     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 362++D48B 3A 6B 94                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 363++D48E 47                                   ld      b,a
 364++D48F                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 364++D48F FE 04       >                        cp      4
 364++D491 DA CC D4    >                        jp		c, .ScaleNormByXX17
 365++D494 CD 7B D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 366++D497 C3 5B D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 367++D49A 3A 69 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 368++D49D CB 3F                                srl     a                           ; which is held in XX18
 369++D49F 32 69 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 370++D4A2 3A 6F C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 371++D4A5 CB 3F                                srl     a                           ; .
 372++D4A7 32 6F C0                             ld      (UBnkDrawCam0zLo),a         ; .
 373++D4AA 3A 6C C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 374++D4AD CB 3F                                srl     a                           ; .
 375++D4AF 32 6C C0                             ld      (UBnkDrawCam0yLo),a        ; .
 376++D4B2 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 377++D4B4                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 377++D4B4 3A 75 C0    >                    ld      a,(UBnkXScaled)
 377++D4B7 CB 3F       >                    srl     a
 377++D4B9 32 75 C0    >                    ld      (UBnkXScaled),a
 378++D4BC                                      ShiftMem8Right1 UBnkYScaled         ;
 378++D4BC 3A 77 C0    >                    ld      a,(UBnkYScaled)
 378++D4BF CB 3F       >                    srl     a
 378++D4C1 32 77 C0    >                    ld      (UBnkYScaled),a
 379++D4C4                                      ShiftMem8Right1 UBnkZScaled         ;
 379++D4C4 3A 79 C0    >                    ld      a,(UBnkZScaled)
 379++D4C7 CB 3F       >                    srl     a
 379++D4C9 32 79 C0    >                    ld      (UBnkZScaled),a
 380++D4CC              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 381++D4CC              .ScaleNormByXX17:       ;ld      b,a
 382++D4CC CD 56 D1                             call    CopyXX12toXX15
 383++D4CF 05           .LL93                   dec     b
 384++D4D0 FA EF D4                             jp      m, .ScaledNorm
 385++D4D3              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 385++D4D3 3A 75 C0    >                    ld      a,(UBnkXScaled)
 385++D4D6 CB 3F       >                    srl     a
 385++D4D8 32 75 C0    >                    ld      (UBnkXScaled),a
 386++D4DB                                      ShiftMem8Right1 UBnkYScaled        ;
 386++D4DB 3A 77 C0    >                    ld      a,(UBnkYScaled)
 386++D4DE CB 3F       >                    srl     a
 386++D4E0 32 77 C0    >                    ld      (UBnkYScaled),a
 387++D4E3                                      ShiftMem8Right1 UBnkZScaled        ;
 387++D4E3 3A 79 C0    >                    ld      a,(UBnkZScaled)
 387++D4E6 CB 3F       >                    srl     a
 387++D4E8 32 79 C0    >                    ld      (UBnkZScaled),a
 388++D4EB 05                                   dec     b                          ;
 389++D4EC F2 D3 D4                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 390++D4EF              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 391++D4EF              ; Add normal to XX15
 392++D4EF              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 393++D4EF              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 394++D4EF              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 395++D4EF              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 396++D4EF              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 396++D4EF 3A 79 C0    >               ld       a,(UBnkZScaled)
 396++D4F2 32 65 94    >               ld       (varR),a
 397++D4F5                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 397++D4F5 3A 80 C0    >               ld       a,(UBnkXX12zSign)
 397++D4F8 32 66 94    >               ld       (varS),a
 398++D4FB                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 398++D4FB 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
 398++D4FE 32 64 94    >               ld       (varQ),a
 399++D501 3A 71 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 400++D504 CD 68 A8                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 401++D507 DA 9A D4                             jp      c,.Ovflw
 402++D50A 32 79 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 403++D50D                                      ldCopyByte  varS, UBnkZScaledSign   ;
 403++D50D 3A 66 94    >               ld       a,(varS)
 403++D510 32 7A C0    >               ld       (UBnkZScaledSign),a
 404++D513                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 404++D513 3A 75 C0    >               ld       a,(UBnkXScaled)
 404++D516 32 65 94    >               ld       (varR),a
 405++D519                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 405++D519 3A 7C C0    >               ld       a,(UBnkXX12xSign)
 405++D51C 32 66 94    >               ld       (varS),a
 406++D51F                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 406++D51F 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
 406++D522 32 64 94    >               ld       (varQ),a
 407++D525 3A 6B C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 408++D528 CD 68 A8                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 409++D52B DA 9A D4                             jp      c,.Ovflw
 410++D52E 32 75 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 411++D531                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 411++D531 3A 66 94    >               ld       a,(varS)
 411++D534 32 76 C0    >               ld       (UBnkXScaledSign),a
 412++D537                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 412++D537 3A 77 C0    >               ld       a,(UBnkYScaled)
 412++D53A 32 65 94    >               ld       (varR),a
 413++D53D                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 413++D53D 3A 7E C0    >               ld       a,(UBnkXX12ySign)
 413++D540 32 66 94    >               ld       (varS),a
 414++D543                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 414++D543 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
 414++D546 32 64 94    >               ld       (varQ),a
 415++D549 3A 6E C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 416++D54C CD 68 A8                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 417++D54F DA 9A D4                             jp      c,.Ovflw                    ; .
 418++D552 32 77 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 419++D555                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 419++D555 3A 66 94    >               ld       a,(varS)
 419++D558 32 78 C0    >               ld       (UBnkYScaledSign),a
 420++D55B              ; calculate dot product LL89
 421++D55B              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 421++D55B 3A 7B C0    >               ld       a,(UBnkXX12xLo)
 421++D55E 32 64 94    >               ld       (varQ),a
 422++D561 3A 75 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 423++D564 CD D4 A7                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 424++D567 32 84 94                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 425++D56A 3A 7C C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 426++D56D 21 76 C0                             ld      hl,UBnkXScaledSign          ; .
 427++D570 AE                                   xor     (hl)                        ; .
 428++D571 32 66 94                             ld      (varS),a                    ; .
 429++D574                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 429++D574 3A 7D C0    >               ld       a,(UBnkXX12yLo)
 429++D577 32 64 94    >               ld       (varQ),a
 430++D57A 3A 77 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 431++D57D CD D4 A7                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 432++D580 32 64 94                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 433++D583                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 433++D583 3A 84 94    >               ld       a,(varT)
 433++D586 32 65 94    >               ld       (varR),a
 434++D589 3A 7E C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 435++D58C 21 78 C0                             ld      hl, UBnkYScaledSign         ; .
 436++D58F AE                                   xor     (hl)                        ; .
 437++D590 CD 68 A8                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 438++D593 32 84 94                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 439++D596                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 439++D596 3A 7F C0    >               ld       a,(UBnkXX12zLo)
 439++D599 32 64 94    >               ld       (varQ),a
 440++D59C 3A 79 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 441++D59F CD D4 A7                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 442++D5A2 32 64 94                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 443++D5A5                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 443++D5A5 3A 84 94    >               ld       a,(varT)
 443++D5A8 32 65 94    >               ld       (varR),a
 444++D5AB 3A 7A C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 445++D5AE 21 80 C0                             ld      hl, UBnkXX12zSign           ; .
 446++D5B1 AE                                   xor     (hl)                        ; .
 447++D5B2 CD 68 A8                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 448++D5B5 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 449++D5B7 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 450++D5B9 3A 66 94                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 451++D5BC ED 27 80                             test    $80                         ; this should test S not A
 452++D5BF 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 453++D5C1 3A 16 D4     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 454++D5C4 CD FE CF                             call        SetFaceAHidden                                      ;           set face invisible
 455++D5C7 C3 D0 D5                             jp          .ProcessNormalLoopEnd                                ;        end if
 456++D5CA 3A 16 D4     .FaceVisible:            ld          a,(CurrentNormIdx)
 457++D5CD CD F5 CF                             call        SetFaceAVisible
 458++D5D0 21 16 D4     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 459++D5D3 34                                   inc         (hl)                    ; move index pointer up by one
 460++D5D4 C1                                   pop         bc
 461++D5D5 E1                                   pop         hl                      ; get normal data pointer back
 462++D5D6 3E 04                                ld          a,4
 463++D5D8 ED 31                                add         hl,a                    ; move to next normal entry
 464++D5DA 22 0E 94                             ld          (varV),hl               ; save as we need it again
 465++D5DD 05                                   dec         b
 466++D5DE C2 7F D4                             jp          nz,.ProcessNormalsLoop
 467++D5E1 C9                                   ret
 468++D5E2
# file closed: ././ModelRender/BackfaceCull.asm
 936+ D5E2              ;--------------------------------------------------------------------------------------------------------
 937+ D5E2              ; Process edges
 938+ D5E2              ; .....................................................
 939+ D5E2              TransposeNodeVal:   MACRO arg0?
 940+ D5E2 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 941+ D5E2 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 942+ D5E2 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 943+ D5E2 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 944+ D5E2 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 945+ D5E2 ~            NodeXPositive\1
 945+ D5E2 ~
 946+ D5E2 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 947+ D5E2 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 948+ D5E2 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 949+ D5E2 ~                    ld          h,0                                 ; but we don;t want the sign
 950+ D5E2 ~                    add         hl,bc                               ; its a 16 bit add
 951+ D5E2 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 952+ D5E2 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 953+ D5E2 ~                    ld          (UbnkXPointSign),a
 954+ D5E2 ~                    jp          FinishedThisNode\1
 955+ D5E2 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 956+ D5E2 ~            NodeNegative\1
 956+ D5E2 ~
 957+ D5E2 ~            LL52\1
 957+ D5E2 ~                                                              ;
 958+ D5E2 ~                    ld          hl,(UBnK\0lo)                       ; Coord
 959+ D5E2 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 960+ D5E2 ~                    ld          b,0                                 ; XX12 lo byte only
 961+ D5E2 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 962+ D5E2 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 963+ D5E2 ~            NodeXNegSignChange\1
 963+ D5E2 ~
 964+ D5E2 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 965+ D5E2 ~                    call        negate16hl                          ; Convert back to positive and flip sign
 966+ D5E2 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 967+ D5E2 ~                    xor         $80                                 ; Flip bit 7
 968+ D5E2 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 969+ D5E2 ~            SetAndMop\1
 969+ D5E2 ~
 970+ D5E2 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 971+ D5E2 ~            FinishedThisNode\1
 972+ D5E2                                  ENDM
 973+ D5E2
 974+ D5E2              ;------------------------------------------------------------------------------------------------------------------------------
 975+ D5E2              CopyByteAtNextHL:   MACRO targetaddr
 976+ D5E2 ~                                inc         hl                                  ; vertex byte#1
 977+ D5E2 ~                                ld          a,(hl)                              ;
 978+ D5E2 ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
 979+ D5E2                                  ENDM
 980+ D5E2              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 981+ D5E2
 982+ D5E2              TransposeXX12NodeToXX15:
 983+ D5E2                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 983+ D5E2 3A 0E C0    >               ld       a,(UBnKxsgn)
 983+ D5E5 32 77 C0    >               ld       (UbnkXPointSign),a
 984+ D5E8 ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 985+ D5EC A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 986+ D5ED FA 03 D6             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 987+ D5F0              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 988+ D5F0              NodeXPositiveX:
 989+ D5F0 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 990+ D5F1 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 991+ D5F3 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 992+ D5F6 26 00                ld          h,0                                 ; but we don;t want the sign
 993+ D5F8 09                   add         hl,bc                               ; its a 16 bit add
 994+ D5F9 22 75 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 995+ D5FC AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 996+ D5FD 32 77 C0             ld          (UbnkXPointSign),a
 997+ D600 C3 1F D6             jp          FinishedThisNodeX
 998+ D603              ; If we get here then _sign and vertv_ have different signs so do subtract
 999+ D603              NodeNegativeX:
1000+ D603              LL52X:                                                 ;
1001+ D603 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
1002+ D606 ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1003+ D60A 06 00                ld          b,0                                 ; XX12 lo byte only
1004+ D60C ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1005+ D60E F2 1C D6             jp          p,SetAndMopX                       ; if result is positive skip to write back
1006+ D611              NodeXNegSignChangeX:
1007+ D611              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1008+ D611 CD 61 A5             call        negate16hl                          ; Convert back to positive and flip sign
1009+ D614 3A 77 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1010+ D617 EE 80                xor         $80                                 ; Flip bit 7
1011+ D619 32 77 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1012+ D61C              SetAndMopX:
1013+ D61C 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
1014+ D61F              FinishedThisNodeX:
1015+ D61F
1016+ D61F              LL53:
1017+ D61F
1018+ D61F                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1018+ D61F 3A 11 C0    >               ld       a,(UBnKysgn)
1018+ D622 32 7A C0    >               ld       (UbnkYPointSign),a
1019+ D625 ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1020+ D629 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1021+ D62A FA 40 D6             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1022+ D62D              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1023+ D62D              NodeXPositiveY:
1024+ D62D 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1025+ D62E 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1026+ D630 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1027+ D633 26 00                ld          h,0                                 ; but we don;t want the sign
1028+ D635 09                   add         hl,bc                               ; its a 16 bit add
1029+ D636 22 78 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1030+ D639 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1031+ D63A 32 77 C0             ld          (UbnkXPointSign),a
1032+ D63D C3 5C D6             jp          FinishedThisNodeY
1033+ D640              ; If we get here then _sign and vertv_ have different signs so do subtract
1034+ D640              NodeNegativeY:
1035+ D640              LL52Y:                                                 ;
1036+ D640 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1037+ D643 ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1038+ D647 06 00                ld          b,0                                 ; XX12 lo byte only
1039+ D649 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1040+ D64B F2 59 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
1041+ D64E              NodeXNegSignChangeY:
1042+ D64E              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1043+ D64E CD 61 A5             call        negate16hl                          ; Convert back to positive and flip sign
1044+ D651 3A 7A C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1045+ D654 EE 80                xor         $80                                 ; Flip bit 7
1046+ D656 32 7A C0             ld          (UbnkYPointSign),a                 ; XX15+2
1047+ D659              SetAndMopY:
1048+ D659 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1049+ D65C              FinishedThisNodeY:
1050+ D65C
1051+ D65C
1052+ D65C              TransposeZ:
1053+ D65C              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1054+ D65C 3A 80 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1055+ D65F                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1055+ D65F CB 7F       >                        bit 	7,a
1055+ D661 C2 75 D6    >                        jp      nz,NegativeNodeZ
1056+ D664 3A 7F C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1057+ D667 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1058+ D66A ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1059+ D66C 7D                   ld          a,l
1060+ D66D 32 84 94             ld          (varT),a                            ;                                                                           ;;;
1061+ D670 7C                   ld          a,h
1062+ D671 32 63 94             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1063+ D674 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1064+ D675              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1065+ D675              NegativeNodeZ:
1066+ D675              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1067+ D675 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1068+ D678 ED 4B 7F C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1069+ D67C 06 00                ld          b,0                                 ; upper byte will be garbage
1070+ D67E                      ClearCarryFlag
1070+ D67E B7          >                        or a
1071+ D67F ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1072+ D681 7D                   ld          a,l
1073+ D682 32 84 94             ld          (varT),a                            ; t = result low
1074+ D685 7C                   ld          a,h
1075+ D686 32 63 94             ld          (varU),a                            ; u = result high
1076+ D689 E2 96 D6             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1077+ D68C              LL56Overflow:
1078+ D68C FE 00                cp          0                                   ; is varU 0?
1079+ D68E 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1080+ D690 3A 84 94             ld          a,(varT)                            ; T \ restore z lo
1081+ D693                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1081+ D693 FE 04       >                   cp    4
1081+ D695 D0          >                   ret	 nc
1082+ D696              MakeNodeClose:
1083+ D696              LL140:                                                  ; else make node close
1084+ D696 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1085+ D697 32 63 94             ld          (varU),a                            ; U
1086+ D69A 3E 04                ld          a,4                                 ; lo
1087+ D69C 32 84 94             ld          (varT),a                            ; T
1088+ D69F C9                   ret
1089+ D6A0              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1090+ D6A0              ProcessVisibleNode:
1091+ D6A0              RotateNode:                                                                                                                         ;;;
1092+ D6A0 CD 00 D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1093+ D6A3              LL52LL53LL54LL55
1094+ D6A3              TransposeNode:
1095+ D6A3 CD E2 D5             call        TransposeXX12NodeToXX15
1096+ D6A6
1097+ D6A6              ; ......................................................                                                         ;;;
1098+ D6A6              NodeAdditionsDone:
1099+ D6A6              Scale16BitTo8Bit:
1100+ D6A6              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1101+ D6A6 3A 63 94             ld          a,(varU)                            ; U \ z hi
1102+ D6A9 21 76 C0             ld          hl,UbnkXPointHi
1103+ D6AC B6                   or          (hl)                                ; XX15+1    \ x hi
1104+ D6AD 21 79 C0             ld          hl,UbnkYPointHi
1105+ D6B0 B6                   or          (hl)                                ; XX15+4    \ y hi
1106+ D6B1              AreXYZHiAllZero:
1107+ D6B1 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1108+ D6B3              DivideXYZBy2:
1109+ D6B3                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1109+ D6B3 2A 75 C0    >                    ld    hl,(UbnkXPoint)
1109+ D6B6 CB 3C       >                    srl   h
1109+ D6B8 CB 1D       >                    rr    l
1109+ D6BA 22 75 C0    >                    ld    (UbnkXPoint),hl
1110+ D6BD                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1110+ D6BD 2A 78 C0    >                    ld    hl,(UbnkYPoint)
1110+ D6C0 CB 3C       >                    srl   h
1110+ D6C2 CB 1D       >                    rr    l
1110+ D6C4 22 78 C0    >                    ld    (UbnkYPoint),hl
1111+ D6C7 3A 63 94             ld          a,(varU)                            ; U \ z hi
1112+ D6CA 67                   ld          h,a
1113+ D6CB 3A 84 94             ld          a,(varT)                            ; T \ z lo
1114+ D6CE 6F                   ld          l,a
1115+ D6CF                      ShiftHLRight1
1115+ D6CF CB 3C       >			   srl h
1115+ D6D1 CB 1D       >			   rr  l
1116+ D6D3 7C                   ld          a,h
1117+ D6D4 32 63 94             ld          (varU),a
1118+ D6D7 7D                   ld          a,l
1119+ D6D8 32 84 94             ld          (varT),a                            ; T \ z lo
1120+ D6DB C3 A6 D6             jp          Scale16BitTo8Bit                    ; loop U
1121+ D6DE              NodeScalingDone:
1122+ D6DE              LL60:                                                   ; hi U rolled to 0, exited loop above.
1123+ D6DE              ProjectNodeToScreen:
1124+ D6DE                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1124+ D6DE 3A 84 94    >               ld       a,(varT)
1124+ D6E1 32 64 94    >               ld       (varQ),a
1125+ D6E4 3A 75 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1126+ D6E7 21 64 94             ld          hl,varQ
1127+ D6EA BE                   cp          (hl)                                ; Q
1128+ D6EB                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1128+ D6EB DA F4 D6    >                        jp		c,DoSmallAngle
1129+ D6EE CD 6F A9             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1130+ D6F1 C3 FC D6             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1131+ D6F4              DoSmallAngle:                                           ; small x angle
1132+ D6F4              LL69:
1133+ D6F4              ; TODO check if we need to retain BC as this trashes it
1134+ D6F4              ;Input: BC = Dividend, DE = Divisor, HL = 0
1135+ D6F4              ;Output: BC = Quotient, HL = Remainder
1136+ D6F4 47                   ld      b,a
1137+ D6F5 CD BA A3             call    DIV16UNDOC
1138+ D6F8 79                   ld      a,c
1139+ D6F9 32 65 94             ld      (varR),a
1140+ D6FC               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1141+ D6FC              SkipSmallAngle:
1142+ D6FC              ScaleX:
1143+ D6FC              LL65:                                                   ; both continue for scaling based on z
1144+ D6FC 3A 77 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1145+ D6FF                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1145+ D6FF CB 7F       >                        bit 	7,a
1145+ D701 C2 14 D7    >                        jp      nz,NegativeXPoint
1146+ D704              ; ......................................................
1147+ D704              PositiveXPoint:
1148+ D704 3A 65 94             ld          a,(varR)
1149+ D707 6F                   ld          l,a
1150+ D708 3A 63 94             ld          a,(varU)
1151+ D70B 67                   ld          h,a
1152+ D70C 3E 80                ld          a,ScreenCenterX
1153+ D70E ED 31                add         hl,a
1154+ D710 EB                   ex          de,hl
1155+ D711 C3 24 D7             jp          StoreXPoint
1156+ D714              NegativeXPoint:
1157+ D714              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1158+ D714 3A 65 94             ld          a,(varR)
1159+ D717 6F                   ld          l,a
1160+ D718 3A 63 94             ld          a,(varU)
1161+ D71B 67                   ld          h,a
1162+ D71C 0E 80                ld          c,ScreenCenterX
1163+ D71E 06 00                ld          b,0
1164+ D720                      ClearCarryFlag
1164+ D720 B7          >                        or a
1165+ D721 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1166+ D723 EB                   ex          de,hl
1167+ D724              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1168+ D724 FD 73 00             ld          (iy+0),e                            ; Update X Point
1169+ D727 FD 72 01             ld          (iy+1),d                            ; Update X Point
1170+ D72A FD 23                inc         iy
1171+ D72C FD 23                inc         iy
1172+ D72E              ; ......................................................
1173+ D72E              LL66:
1174+ D72E              ProcessYPoint:
1175+ D72E AF                   xor         a                                   ; y hi = 0
1176+ D72F 32 63 94             ld          (varU),a                            ; U
1177+ D732                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1177+ D732 3A 84 94    >               ld       a,(varT)
1177+ D735 32 64 94    >               ld       (varQ),a
1178+ D738 3A 78 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1179+ D73B 21 64 94             ld          hl,varQ
1180+ D73E BE                   cp          (hl)                                ; Q
1181+ D73F                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1181+ D73F DA 48 D7    >                        jp		c,SmallYHop
1182+ D742              SmallYPoint:
1183+ D742 CD 6F A9             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1184+ D745 C3 4B D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1185+ D748              SmallYHop:
1186+ D748              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1187+ D748 CD 4C A9             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1188+ D74B              SkipYScale:
1189+ D74B              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1190+ D74B 3A 7A C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1191+ D74E CB 7F                bit         7,a
1192+ D750 C2 63 D7             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1193+ D753              PositiveYPoint:
1194+ D753 3A 65 94             ld          a,(varR)
1195+ D756 6F                   ld          l,a
1196+ D757 3A 63 94             ld          a,(varU)
1197+ D75A 67                   ld          h,a
1198+ D75B 3E 60                ld          a,ScreenHeightHalf
1199+ D75D ED 31                add         hl,a
1200+ D75F EB                   ex          de,hl
1201+ D760 C3 73 D7             jp          LL50
1202+ D763              NegativeYPoint:
1203+ D763              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1204+ D763 3A 65 94             ld          a,(varR)
1205+ D766 6F                   ld          l,a
1206+ D767 3A 63 94             ld          a,(varU)
1207+ D76A 67                   ld          h,a
1208+ D76B 0E 60                ld          c,ScreenHeightHalf
1209+ D76D 06 00                ld          b,0
1210+ D76F                      ClearCarryFlag
1210+ D76F B7          >                        or a
1211+ D770 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1212+ D772 EB                   ex          de,hl
1213+ D773              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1214+ D773 FD 73 00             ld          (iy+0),e                            ; Update X Point
1215+ D776 FD 72 01             ld          (iy+1),d                            ; Update X Point
1216+ D779 FD 23                inc         iy
1217+ D77B FD 23                inc         iy
1218+ D77D C9                   ret
1219+ D77E              ;--------------------------------------------------------------------------------------------------------
1220+ D77E              ;;;     Byte 0 = X magnitide with origin at middle of ship
1221+ D77E              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1222+ D77E              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1223+ D77E              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1224+ D77E              CopyNodeToXX15:
1225+ D77E                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1225+ D77E 7E          >               ld       a,(hl)
1225+ D77F 32 75 C0    >               ld       (UBnkXScaled),a
1226+ D782 23                   inc         hl
1227+ D783                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1227+ D783 7E          >               ld       a,(hl)
1227+ D784 32 77 C0    >               ld       (UBnkYScaled),a
1228+ D787 23                   inc         hl
1229+ D788                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1229+ D788 7E          >               ld       a,(hl)
1229+ D789 32 79 C0    >               ld       (UBnkZScaled),a
1230+ D78C 23                   inc         hl
1231+ D78D              PopulateXX15SignBits:
1232+ D78D              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1233+ D78D 7E                   ld          a,(hl)
1234+ D78E 4F                   ld          c,a                                 ; copy sign and visibility to c
1235+ D78F 47                   ld          b,a
1236+ D790 E6 80                and         $80                                 ; keep high 3 bits
1237+ D792 32 76 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1238+ D795 78                   ld          a,b
1239+ D796 E6 40                and         $40
1240+ D798 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1241+ D79A 32 78 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1242+ D79D 78                   ld          a,b
1243+ D79E E6 20                and         $20
1244+ D7A0 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1245+ D7A2 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1246+ D7A4 32 7A C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1247+ D7A7 79                   ld          a,c                                 ; returns a with visibility sign byte
1248+ D7A8 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1249+ D7AA 32 84 94             ld          (varT),a                            ; and store in varT as its needed later
1250+ D7AD C9                   ret
1251+ D7AE
1252+ D7AE              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1253+ D7AE              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1254+ D7AE              ;..............................................................................................................................
1255+ D7AE              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1256+ D7AE              LL48GetScale:
1257+ D7AE 3A FE 93             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1258+ D7B1 5F                   ld          e,a
1259+ D7B2 CD 7E D7             call        CopyNodeToXX15
1260+ D7B5              LL48GetVertices:
1261+ D7B5              LL48GetVertSignAndVisDist:
1262+ D7B5                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1262+ D7B5 BB          >                        cp      e
1262+ D7B6 DA F7 D7    >                        jp		c, NodeIsNotVisible
1263+ D7B9              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1264+ D7B9                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1264+ D7B9 23          >                    inc         hl                                  ; vertex byte#1
1264+ D7BA 7E          >                    ld          a,(hl)                              ;
1264+ D7BB 32 09 94    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1265+ D7BE 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1266+ D7BF E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1267+ D7C1 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1268+ D7C2                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1268+ D7C2 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1268+ D7C5 ED 31       >                    add         hl,a
1268+ D7C7 7E          >                    ld          a,(hl)
1269+ D7C8 E1                   pop         hl                                  ;                                                                           ;;;
1270+ D7C9                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1270+ D7C9 FE 00       >				cp	0
1270+ D7CB C2 FD D7    >				jp	nz,NodeIsVisible
1271+ D7CE              CheckFace2:                                                                                                                         ;;;
1272+ D7CE 7A                   ld          a,d                                                                                                             ;;;
1273+ D7CF ED 23                swapnib                                                                                                                     ;;;
1274+ D7D1 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1275+ D7D3                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1275+ D7D3 FE 00       >				cp	0
1275+ D7D5 C2 FD D7    >				jp	nz,NodeIsVisible
1276+ D7D8              CheckFace3:                                                                                                                         ;;;
1277+ D7D8                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1277+ D7D8 23          >                    inc         hl                                  ; vertex byte#1
1277+ D7D9 7E          >                    ld          a,(hl)                              ;
1277+ D7DA 32 09 94    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1278+ D7DD 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1279+ D7DE E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1280+ D7E0 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1281+ D7E1                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1281+ D7E1 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1281+ D7E4 ED 31       >                    add         hl,a
1281+ D7E6 7E          >                    ld          a,(hl)
1282+ D7E7 E1                   pop         hl                                  ;                                                                           ;;;
1283+ D7E8                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1283+ D7E8 FE 00       >				cp	0
1283+ D7EA C2 FD D7    >				jp	nz,NodeIsVisible
1284+ D7ED              CheckFace4:                                                                                                                         ;;;
1285+ D7ED 7A                   ld          a,d                                                                                                             ;;;
1286+ D7EE ED 23                swapnib                                                                                                                     ;;;
1287+ D7F0 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1288+ D7F2                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1288+ D7F2 FE 00       >				cp	0
1288+ D7F4 C2 FD D7    >				jp	nz,NodeIsVisible
1289+ D7F7              NodeIsNotVisible:                                                                                                                   ;;;
1290+ D7F7 01 04 00             ld          bc,4
1291+ D7FA FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1292+ D7FC                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1293+ D7FC C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1294+ D7FD              NodeIsVisible:
1295+ D7FD              LL49:
1296+ D7FD CD A0 D6             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1297+ D800 C9                   ret
1298+ D801
1299+ D801
1300+ D801              ProjectNodeToEye:
1301+ D801 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1302+ D805 79           	ld			a,c                                 ;  so no need for a negative check
1303+ D806 32 64 94     	ld			(varQ),a		                    ; VarQ = z
1304+ D809 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1305+ D80C CD A3 A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1306+ D80F 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1307+ D812                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1307+ D812 CB 7F       >                        bit 	7,a
1307+ D814 C2 1F D8    >                        jp      nz,EyeNegativeXPoint
1308+ D817              EyePositiveXPoint:									; x was positive result
1309+ D817 2E 80            ld          l,ScreenCenterX						;
1310+ D819 26 00            ld          h,0
1311+ D81B 09               add         hl,bc								; hl = Screen Centre + X
1312+ D81C C3 26 D8         jp          EyeStoreXPoint
1313+ D81F              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1314+ D81F 2E 80            ld          l,ScreenCenterX
1315+ D821 26 00            ld          h,0
1316+ D823                  ClearCarryFlag
1316+ D823 B7          >                        or a
1317+ D824 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1318+ D826              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1319+ D826 EB               ex          de,hl
1320+ D827 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1321+ D82A FD 72 01         ld          (iy+1),d                            ; Update X Point
1322+ D82D              EyeProcessYPoint:
1323+ D82D ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1324+ D831 79           	ld			a,c
1325+ D832 32 64 94     	ld			(varQ),a
1326+ D835 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1327+ D838 CD A3 A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1328+ D83B 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1329+ D83E                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1329+ D83E CB 7F       >                        bit 	7,a
1329+ D840 C2 4B D8    >                        jp      nz,EyeNegativeYPoint
1330+ D843              EyePositiveYPoint:									; Y is positive so above the centre line
1331+ D843 2E 60            ld          l,ScreenCenterY
1332+ D845                  ClearCarryFlag
1332+ D845 B7          >                        or a
1333+ D846 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1334+ D848 C3 50 D8         jp          EyeStoreYPoint
1335+ D84B              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1336+ D84B 2E 60            ld          l,ScreenCenterY
1337+ D84D 26 00            ld          h,0
1338+ D84F 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1339+ D850              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1340+ D850 EB               ex          de,hl
1341+ D851 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1342+ D854 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1343+ D857 C9               ret
1344+ D858
1345+ D858
1346+ D858
1347+ D858              ; Pitch and roll are 2 phases
1348+ D858              ; 1 - we apply our pitch and roll to the ship position
1349+ D858              ;       x -> x + alpha * (y - alpha * x)
1350+ D858              ;       y -> y - alpha * x - beta * z
1351+ D858              ;       z -> z + beta * (y - alpha * x - beta * z)
1352+ D858              ; which can be simplified as:
1353+ D858              ;       1. K2 = y - alpha * x
1354+ D858              ;       2. z = z + beta * K2
1355+ D858              ;       3. y = K2 - beta * z
1356+ D858              ;       4. x = x + alpha * y
1357+ D858              ; 2 - we apply our patch and roll to the ship orientation
1358+ D858              ;      Roll calculations:
1359+ D858              ;
1360+ D858              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1361+ D858              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1362+ D858              ;      Pitch calculations:
1363+ D858              ;
1364+ D858              ;        nosev_y = nosev_y - beta * nosev_z_hi
1365+ D858              ;        nosev_z = nosev_z + beta * nosev_y_hi
1366+ D858
1367+ D858
1368+ D858              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
1369+ D858 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1370+ D858 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
1371+ D858 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
1372+ D858 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
1373+ D858 ~                                    xor $80                             ;
1374+ D858 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1375+ D858 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1376+ D858 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
1377+ D858 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
1378+ D858 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1379+ D858 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1380+ D858                                      ENDM
1381+ D858
1382+ D858              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
1382+ D858             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1382+ D858 3A 22 94    >               ld       a,(ALPHA)
1382+ D85B 32 64 94    >               ld       (varQ),a
1382+ D85E             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
1382+ D85E 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
1382+ D861 22 65 94    >               ld       (varR),hl
1382+ D864             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
1382+ D864 3A 21 C0    >               ld       a,(UBnkrotmatNosevX)
1382+ D867 32 09 94    >               ld       (varP),a
1382+ D86A 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
1382+ D86D EE 80       >                        xor $80                             ;
1382+ D86F CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1382+ D872 ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1382+ D876             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
1382+ D876 2A 21 C0    >               ld       hl,(UBnkrotmatNosevX)
1382+ D879 22 65 94    >               ld       (varR),hl
1382+ D87C 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
1382+ D87F CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1382+ D882 ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1383+ D886 C9                                   ret
1384+ D887              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
1384+ D887             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1384+ D887 3A 22 94    >               ld       a,(ALPHA)
1384+ D88A 32 64 94    >               ld       (varQ),a
1384+ D88D             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
1384+ D88D 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
1384+ D890 22 65 94    >               ld       (varR),hl
1384+ D893             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
1384+ D893 3A 15 C0    >               ld       a,(UBnkrotmatSidevX)
1384+ D896 32 09 94    >               ld       (varP),a
1384+ D899 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
1384+ D89C EE 80       >                        xor $80                             ;
1384+ D89E CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1384+ D8A1 ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1384+ D8A5             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
1384+ D8A5 2A 15 C0    >               ld       hl,(UBnkrotmatSidevX)
1384+ D8A8 22 65 94    >               ld       (varR),hl
1384+ D8AB 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
1384+ D8AE CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1384+ D8B1 ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1385+ D8B5 C9                                   ret
1386+ D8B6              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
1386+ D8B6             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1386+ D8B6 3A 22 94    >               ld       a,(ALPHA)
1386+ D8B9 32 64 94    >               ld       (varQ),a
1386+ D8BC             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
1386+ D8BC 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
1386+ D8BF 22 65 94    >               ld       (varR),hl
1386+ D8C2             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
1386+ D8C2 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX)
1386+ D8C5 32 09 94    >               ld       (varP),a
1386+ D8C8 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
1386+ D8CB EE 80       >                        xor $80                             ;
1386+ D8CD CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1386+ D8D0 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1386+ D8D4             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
1386+ D8D4 2A 1B C0    >               ld       hl,(UBnkrotmatRoofvX)
1386+ D8D7 22 65 94    >               ld       (varR),hl
1386+ D8DA 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
1386+ D8DD CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1386+ D8E0 ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1387+ D8E4 C9                                   ret
1388+ D8E5
1389+ D8E5              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
1389+ D8E5             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1389+ D8E5 3A 14 94    >               ld       a,(BETA)
1389+ D8E8 32 64 94    >               ld       (varQ),a
1389+ D8EB             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
1389+ D8EB 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
1389+ D8EE 22 65 94    >               ld       (varR),hl
1389+ D8F1             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
1389+ D8F1 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ)
1389+ D8F4 32 09 94    >               ld       (varP),a
1389+ D8F7 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
1389+ D8FA EE 80       >                        xor $80                             ;
1389+ D8FC CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1389+ D8FF ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1389+ D903             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
1389+ D903 2A 25 C0    >               ld       hl,(UBnkrotmatNosevZ)
1389+ D906 22 65 94    >               ld       (varR),hl
1389+ D909 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
1389+ D90C CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1389+ D90F ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1390+ D913 C9                                   ret
1391+ D914              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
1391+ D914             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1391+ D914 3A 14 94    >               ld       a,(BETA)
1391+ D917 32 64 94    >               ld       (varQ),a
1391+ D91A             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
1391+ D91A 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
1391+ D91D 22 65 94    >               ld       (varR),hl
1391+ D920             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
1391+ D920 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ)
1391+ D923 32 09 94    >               ld       (varP),a
1391+ D926 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
1391+ D929 EE 80       >                        xor $80                             ;
1391+ D92B CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1391+ D92E ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1391+ D932             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
1391+ D932 2A 19 C0    >               ld       hl,(UBnkrotmatSidevZ)
1391+ D935 22 65 94    >               ld       (varR),hl
1391+ D938 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
1391+ D93B CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1391+ D93E ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1392+ D942 C9                                   ret
1393+ D943              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
1393+ D943             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1393+ D943 3A 14 94    >               ld       a,(BETA)
1393+ D946 32 64 94    >               ld       (varQ),a
1393+ D949             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
1393+ D949 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
1393+ D94C 22 65 94    >               ld       (varR),hl
1393+ D94F             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
1393+ D94F 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ)
1393+ D952 32 09 94    >               ld       (varP),a
1393+ D955 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
1393+ D958 EE 80       >                        xor $80                             ;
1393+ D95A CD DE A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1393+ D95D ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1393+ D961             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
1393+ D961 2A 1F C0    >               ld       hl,(UBnkrotmatRoofvZ)
1393+ D964 22 65 94    >               ld       (varR),hl
1393+ D967 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
1393+ D96A CD DE A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1393+ D96D ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1394+ D971 C9                                   ret
1395+ D972
1396+ D972
1397+ D972              ; 1> (-a)-(-b)=  if ABS(a)> ABS(B), 1A> (ABS(a)-abs(b))*-1 Else 1B> (ABS(b)-abs(a))
1398+ D972              ; 2> (+a)-(+b)=  if ABS(a) > ABS(B),2A>  ABS(a)- abs (B)   else 2B> (ABS(B) - abs(A) * -1
1399+ D972              ; 3> (-a)-(+b)=  3A> (ABS(a) + ABS(b)) * -1
1400+ D972              ; 4> (+a)-(-b)=  4A> ABS(a) + ABS(b)
1401+ D972 47           AHLequUbnkYminusAHL:    ld      b,a                 ; b =sign of subtraction
1402+ D973 EB                                   ex      de,hl               ; de = amount to subtract
1403+ D974 2A 0F C0                             ld      hl,(UBnKylo)        ; hl = unsigned Y position
1404+ D977 3A 11 C0                             ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1405+ D97A 4F                                   ld      c,a                 ; we may need the sign later
1406+ D97B A8                                   xor     b                   ; now we need to see if signs were different or same
1407+ D97C                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1407+ D97C FA 9D D9    >                        jp		m, .SignsDifferent
1408+ D97F CD 5B A5     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1409+ D982 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1410+ D984 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1411+ D987 7C                                   ld      a,h
1412+ D988 B5                                   or      l
1413+ D989 28 02                                jr      z,.HLGTDEZero
1414+ D98B 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1415+ D98C C9                                   ret
1416+ D98D AF           .HLGTDEZero:            xor     a
1417+ D98E C9                                   ret                         ; if the result was zero set sign to zero too
1418+ D98F EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1419+ D990 B7 ED 52                             sub     hl,de               ;
1420+ D993 7C                                   ld      a,h
1421+ D994 B5                                   or      l
1422+ D995 28 04                                jr      z,.HLLTDEZero
1423+ D997 79                                   ld      a,c
1424+ D998 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1425+ D99A C9                                   ret
1426+ D99B AF           .HLLTDEZero:            xor     a
1427+ D99C C9                                   ret
1428+ D99D 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1429+ D99E 7C                                   ld      a,h
1430+ D99F B5                                   or      l
1431+ D9A0 28 F9                                jr      z,.HLLTDEZero
1432+ D9A2 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1433+ D9A3 C9                                   ret
1434+ D9A4
1435+ D9A4              ;----------------------------------------------------------------------------------------------------------
1436+ D9A4 47           AHLequKminusAHL:        ld      b,a                 ; b =sign of subtraction
1437+ D9A5 EB                                   ex      de,hl               ; de = amount to subtract
1438+ D9A6 2A 7C 94                             ld      hl,(varKp1)         ; Ahl = K
1439+ D9A9 3A 7E 94                             ld      a,(varKp3)          ;
1440+ D9AC 4F                                   ld      c,a                 ; we may need the sign later
1441+ D9AD A8                                   xor     b                   ; now we need to see if signs were different or same
1442+ D9AE                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1442+ D9AE FA CF D9    >                        jp		m, .SignsDifferent
1443+ D9B1 CD 5B A5     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1444+ D9B4 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1445+ D9B6 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1446+ D9B9 7C                                   ld      a,h
1447+ D9BA B5                                   or      l
1448+ D9BB 28 02                                jr      z,.HLGTDEZero
1449+ D9BD 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1450+ D9BE C9                                   ret
1451+ D9BF AF           .HLGTDEZero:            xor     a
1452+ D9C0 C9                                   ret                         ; if the result was zero set sign to zero too
1453+ D9C1 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1454+ D9C2 B7 ED 52                             sub     hl,de               ;
1455+ D9C5 7C                                   ld      a,h
1456+ D9C6 B5                                   or      l
1457+ D9C7 28 04                                jr      z,.HLLTDEZero
1458+ D9C9 79                                   ld      a,c
1459+ D9CA EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1460+ D9CC C9                                   ret
1461+ D9CD AF           .HLLTDEZero:            xor     a
1462+ D9CE C9                                   ret
1463+ D9CF 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1464+ D9D0 7C                                   ld      a,h
1465+ D9D1 B5                                   or      l
1466+ D9D2 28 F9                                jr      z,.HLLTDEZero
1467+ D9D4 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1468+ D9D5 C9                                   ret
1469+ D9D6              ;-------------------------------------------------------------------------------------------------------------
1470+ D9D6
1471+ D9D6 47           AHLequUbnkZplusAHL:     ld      b,a                 ; b =sign of subtraction
1472+ D9D7 EB                                   ex      de,hl               ; de = amount to subtract
1473+ D9D8 2A 12 C0                             ld      hl,(UBnKzlo)        ; hl = unsigned Y position
1474+ D9DB 3A 14 C0                             ld      a,(UBnKzsgn)        ; ahl = signed Y corrodinate
1475+ D9DE 4F                                   ld      c,a                 ; we may need the sign later
1476+ D9DF A8                                   xor     b                   ; now we need to see if signs were different or same
1477+ D9E0                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1477+ D9E0 FA EE D9    >                        jp		m, .SignsDifferent
1478+ D9E3 19           .SignsTheSame:          add     hl,de
1479+ D9E4 7C                                   ld      a,h
1480+ D9E5 B5                                   or      l
1481+ D9E6 28 02                                jr      z,.HLGTDEZero
1482+ D9E8 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1483+ D9E9 C9                                   ret
1484+ D9EA AF           .HLGTDEZero:            xor     a
1485+ D9EB C9                                   ret                         ; if the result was zero set sign to zero too
1486+ D9EC AF           .HLLTDEZero:            xor     a
1487+ D9ED C9                                   ret
1488+ D9EE CD 5B A5     .SignsDifferent:        call    compare16HLDE       ; if signs were the saem tehn
1489+ D9F1 38 09                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1490+ D9F3 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1491+ D9F6 7C                                   ld      a,h
1492+ D9F7 B5                                   or      l
1493+ D9F8 28 F0                                jr      z,.HLGTDEZero
1494+ D9FA 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1495+ D9FB C9                                   ret
1496+ D9FC EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1497+ D9FD B7 ED 52                             sub     hl,de               ;
1498+ DA00 7C                                   ld      a,h
1499+ DA01 B5                                   or      l
1500+ DA02 28 E8                                jr      z,.HLLTDEZero
1501+ DA04 79                                   ld      a,c
1502+ DA05 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1503+ DA07 C9                                   ret
1504+ DA08
1505+ DA08
1506+ DA08
1507+ DA08              ; Full version
1508+ DA08              ; 1. K2 = y - alpha * x
1509+ DA08              ; 2. z = z + beta * K2
1510+ DA08              ; 3. y = K2 - beta * z
1511+ DA08              ; 4. x = x + alpha * y
1512+ DA08
1513+ DA08
1514+ DA08                                      MACRO   APPequPosPlusAPP Position, PositionSign
1515+ DA08 ~                                    push    bc
1516+ DA08 ~                                    ld      c,a                         ; save original value of a into c
1517+ DA08 ~                                    ld      a,(PositionSign)
1518+ DA08 ~                                    ld      b,a
1519+ DA08 ~                                    ld      a,c
1520+ DA08 ~                                    xor     b                           ; a = a xor x postition sign
1521+ DA08 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1522+ DA08 ~            ; Signs are the same to we just add and take which ever sign
1523+ DA08 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1524+ DA08 ~                                    ld      hl,(Position)
1525+ DA08 ~                                    add     hl,de
1526+ DA08 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1527+ DA08 ~                                    ld      a,c                         ; and a = original sign as they were both the same
1528+ DA08 ~                                    pop     bc
1529+ DA08 ~                                    ret
1530+ DA08 ~            ; Signs are opposite so we subtract
1531+ DA08 ~            .MV50:                  ld      de,(varPp1)
1532+ DA08 ~                                    ld      hl,(Position)
1533+ DA08 ~                                    or      a
1534+ DA08 ~                                    sbc     hl,de
1535+ DA08 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
1536+ DA08 ~                                    ld      a,c                         ; get back the original sign
1537+ DA08 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
1538+ DA08 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1539+ DA08 ~                                    pop     bc
1540+ DA08 ~                                    ret
1541+ DA08 ~            .MV51:                  NegHL
1542+ DA08 ~                                    ld      (varPp1),hl
1543+ DA08 ~                                    ld      a,c                         ; the original sign will still be good
1544+ DA08 ~                                    pop     bc
1545+ DA08 ~                                    ret
1546+ DA08                                      ENDM
1547+ DA08
1548+ DA08
1549+ DA08              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
1549+ DA08 C5          >                        push    bc
1549+ DA09 4F          >                        ld      c,a                         ; save original value of a into c
1549+ DA0A 3A 0E C0    >                        ld      a,(UBnKxsgn)
1549+ DA0D 47          >                        ld      b,a
1549+ DA0E 79          >                        ld      a,c
1549+ DA0F A8          >                        xor     b                           ; a = a xor x postition sign
1549+ DA10 FA 21 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1549+ DA13             >; Signs are the same to we just add and take which ever sign
1549+ DA13 ED 5B 0A 94 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1549+ DA17 2A 0C C0    >                        ld      hl,(UBnKxlo)
1549+ DA1A 19          >                        add     hl,de
1549+ DA1B 22 0A 94    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1549+ DA1E 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1549+ DA1F C1          >                        pop     bc
1549+ DA20 C9          >                        ret
1549+ DA21             >; Signs are opposite so we subtract
1549+ DA21 ED 5B 0A 94 >.MV50:                  ld      de,(varPp1)
1549+ DA25 2A 0C C0    >                        ld      hl,(UBnKxlo)
1549+ DA28 B7          >                        or      a
1549+ DA29 ED 52       >                        sbc     hl,de
1549+ DA2B 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1549+ DA2D 79          >                        ld      a,c                         ; get back the original sign
1549+ DA2E 22 0A 94    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1549+ DA31 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1549+ DA33 C1          >                        pop     bc
1549+ DA34 C9          >                        ret
1549+ DA35             >.MV51:                  NegHL
1549+ DA35 AF          >                xor a
1549+ DA36 95          >                sub l
1549+ DA37 6F          >                ld l,a
1549+ DA38 9F          >                sbc a,a
1549+ DA39 94          >                sub h
1549+ DA3A 67          >                ld h,a
1549+ DA3B 22 0A 94    >                        ld      (varPp1),hl
1549+ DA3E 79          >                        ld      a,c                         ; the original sign will still be good
1549+ DA3F C1          >                        pop     bc
1549+ DA40 C9          >                        ret
1550+ DA41
1551+ DA41              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
1551+ DA41 C5          >                        push    bc
1551+ DA42 4F          >                        ld      c,a                         ; save original value of a into c
1551+ DA43 3A 11 C0    >                        ld      a,(UBnKysgn)
1551+ DA46 47          >                        ld      b,a
1551+ DA47 79          >                        ld      a,c
1551+ DA48 A8          >                        xor     b                           ; a = a xor x postition sign
1551+ DA49 FA 5A DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1551+ DA4C             >; Signs are the same to we just add and take which ever sign
1551+ DA4C ED 5B 0A 94 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1551+ DA50 2A 0F C0    >                        ld      hl,(UBnKylo)
1551+ DA53 19          >                        add     hl,de
1551+ DA54 22 0A 94    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1551+ DA57 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1551+ DA58 C1          >                        pop     bc
1551+ DA59 C9          >                        ret
1551+ DA5A             >; Signs are opposite so we subtract
1551+ DA5A ED 5B 0A 94 >.MV50:                  ld      de,(varPp1)
1551+ DA5E 2A 0F C0    >                        ld      hl,(UBnKylo)
1551+ DA61 B7          >                        or      a
1551+ DA62 ED 52       >                        sbc     hl,de
1551+ DA64 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1551+ DA66 79          >                        ld      a,c                         ; get back the original sign
1551+ DA67 22 0A 94    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1551+ DA6A EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1551+ DA6C C1          >                        pop     bc
1551+ DA6D C9          >                        ret
1551+ DA6E             >.MV51:                  NegHL
1551+ DA6E AF          >                xor a
1551+ DA6F 95          >                sub l
1551+ DA70 6F          >                ld l,a
1551+ DA71 9F          >                sbc a,a
1551+ DA72 94          >                sub h
1551+ DA73 67          >                ld h,a
1551+ DA74 22 0A 94    >                        ld      (varPp1),hl
1551+ DA77 79          >                        ld      a,c                         ; the original sign will still be good
1551+ DA78 C1          >                        pop     bc
1551+ DA79 C9          >                        ret
1552+ DA7A
1553+ DA7A              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
1553+ DA7A C5          >                        push    bc
1553+ DA7B 4F          >                        ld      c,a                         ; save original value of a into c
1553+ DA7C 3A 14 C0    >                        ld      a,(UBnKzsgn)
1553+ DA7F 47          >                        ld      b,a
1553+ DA80 79          >                        ld      a,c
1553+ DA81 A8          >                        xor     b                           ; a = a xor x postition sign
1553+ DA82 FA 93 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1553+ DA85             >; Signs are the same to we just add and take which ever sign
1553+ DA85 ED 5B 0A 94 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1553+ DA89 2A 12 C0    >                        ld      hl,(UBnKzlo)
1553+ DA8C 19          >                        add     hl,de
1553+ DA8D 22 0A 94    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1553+ DA90 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1553+ DA91 C1          >                        pop     bc
1553+ DA92 C9          >                        ret
1553+ DA93             >; Signs are opposite so we subtract
1553+ DA93 ED 5B 0A 94 >.MV50:                  ld      de,(varPp1)
1553+ DA97 2A 12 C0    >                        ld      hl,(UBnKzlo)
1553+ DA9A B7          >                        or      a
1553+ DA9B ED 52       >                        sbc     hl,de
1553+ DA9D 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1553+ DA9F 79          >                        ld      a,c                         ; get back the original sign
1553+ DAA0 22 0A 94    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1553+ DAA3 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1553+ DAA5 C1          >                        pop     bc
1553+ DAA6 C9          >                        ret
1553+ DAA7             >.MV51:                  NegHL
1553+ DAA7 AF          >                xor a
1553+ DAA8 95          >                sub l
1553+ DAA9 6F          >                ld l,a
1553+ DAAA 9F          >                sbc a,a
1553+ DAAB 94          >                sub h
1553+ DAAC 67          >                ld h,a
1553+ DAAD 22 0A 94    >                        ld      (varPp1),hl
1553+ DAB0 79          >                        ld      a,c                         ; the original sign will still be good
1553+ DAB1 C1          >                        pop     bc
1553+ DAB2 C9          >                        ret
1554+ DAB3
1555+ DAB3              ; rollWork holds Alpha intermidate results
1556+ DAB3 00 00 00     rollWork      DS 3
1557+ DAB6              rollWorkp1    equ rollWork
1558+ DAB6              rollWorkp2    equ rollWork+1
1559+ DAB6              rollWorkp3    equ rollWork+2
1560+ DAB6
1561+ DAB6
1562+ DAB6              ;----------------------------------------------------------------------------------------------------------------------------------
1563+ DAB6              ; based on MVEIT part 4 of 9
1564+ DAB6 3A 23 94     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
1565+ DAB9 21 16 94                             ld      hl,BET1                     ; and pitch
1566+ DABC B6                                   or      (hl)
1567+ DABD CA 77 DB                             jp      z,.NoRotation               ; if both zero then don't compute
1568+ DAC0                                      ;break
1569+ DAC0              ; P[210] = x * alph (we use P[2]P[1] later as result/256
1570+ DAC0 5F                                   ld      e,a                         ; e = roll magnitude
1571+ DAC1 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
1572+ DAC4 CD 3A A2                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
1573+ DAC7 32 0B 94                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
1574+ DACA 22 09 94                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
1575+ DACD              ; A = Flip sign
1576+ DACD 3A 25 94                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
1577+ DAD0 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
1578+ DAD3 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
1579+ DAD4              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
1580+ DAD4 CD 41 DA                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
1581+ DAD7              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
1582+ DAD7 32 B5 DA                             ld      (rollWorkp3),a               ; k2+3 = sign of result
1583+ DADA 22 B3 DA                             ld      (rollWorkp1),hl             ; k2+1,2 = result
1584+ DADD              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
1585+ DADD 3A 16 94                             ld      a,(BET1)                    ; a = magnitude of pitch
1586+ DAE0 5F                                   ld      e,a
1587+ DAE1 CD 3A A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
1588+ DAE4 32 0B 94                             ld      (varPp2),a                   ; save highest byte in P2
1589+ DAE7 22 09 94                             ld      (varP),hl
1590+ DAEA              ; Fetch sign of previosu cal and xor with BETA inverted
1591+ DAEA 3A B5 DA                             ld      a,(rollWorkp3)
1592+ DAED 5F                                   ld      e,a
1593+ DAEE 3A 17 94                             ld      a,(BET2)
1594+ DAF1 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
1595+ DAF2              ; Z = P[210] =Z + APP
1596+ DAF2 CD 7A DA                             call    APPequZPosPlusAPP           ; MVT6
1597+ DAF5 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
1598+ DAF8 22 12 C0                             ld      (UBnKzlo),hl
1599+ DAFB              ; A[P1]P[0] = z * Beta
1600+ DAFB 3A 16 94                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
1601+ DAFE 5F                                   ld      e,a
1602+ DAFF CD 3A A2                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
1603+ DB02 32 0B 94                             ld      (varPp2),a                  ; P2 = high byte of result
1604+ DB05 22 09 94                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
1605+ DB08              ; A xor BET2,Zsign
1606+ DB08 3A B5 DA                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
1607+ DB0B 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
1608+ DB0E 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
1609+ DB0F 3A 17 94                             ld      a,(BET2)                    ;
1610+ DB12 AB                                   xor     e                           ;
1611+ DB13 5F                                   ld      e,a                         ; now xor it with z sign too
1612+ DB14 3A 14 C0                             ld      a,(UBnKzsgn)                ;
1613+ DB17 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
1614+ DB18 F2 27 DB                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
1615+ DB1B 2A 0A 94                             ld      hl,(varPp1)
1616+ DB1E ED 5B B3 DA                          ld      de,(rollWorkp1)
1617+ DB22 B7                                   or      a
1618+ DB23 19                                   add     hl,de
1619+ DB24 C3 41 DB                             jp      .MV44
1620+ DB27 2A B3 DA     .MV43:                  ld      hl,(rollWorkp1)
1621+ DB2A ED 5B 0A 94                          ld      de,(varPp1)
1622+ DB2E B7                                   or      a
1623+ DB2F ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
1624+ DB31 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
1625+ DB33                                      NegHL
1625+ DB33 AF          >                xor a
1625+ DB34 95          >                sub l
1625+ DB35 6F          >                ld l,a
1625+ DB36 9F          >                sbc a,a
1625+ DB37 94          >                sub h
1625+ DB38 67          >                ld h,a
1626+ DB39 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit
1627+ DB3C EE 80                                xor     SignOnly8Bit
1628+ DB3E 32 11 C0                             ld      (UBnKysgn),a
1629+ DB41              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
1630+ DB41 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
1631+ DB44 3A 23 94                             ld      a,(ALP1)                    ; get roll magnitude
1632+ DB47 5F                                   ld      e,a
1633+ DB48 2A 0F C0                             ld      hl,(UBnKylo)
1634+ DB4B CD 3A A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
1635+ DB4E 32 0B 94                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
1636+ DB51 22 09 94                             ld      (varP),hl
1637+ DB54 3A 24 94                             ld      a,(ALP2)
1638+ DB57 5F                                   ld      e,a
1639+ DB58 3A 11 C0                             ld      a,(UBnKysgn)
1640+ DB5B AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
1641+ DB5C CD 08 DA                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
1642+ DB5F 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
1643+ DB62 22 0C C0                             ld      (UBnKxlo),hl
1644+ DB65                                      ;break
1645+ DB65                                      ; if its not a sun then apply to local orientation
1646+ DB65
1647+ DB65 CD 58 D8                             call    ApplyMyRollToNosev
1648+ DB68 CD 87 D8                             call    ApplyMyRollToSidev
1649+ DB6B CD B6 D8                             call    ApplyMyRollToRoofv
1650+ DB6E CD E5 D8                             call    ApplyMyPitchToNosev
1651+ DB71 CD 14 D9                             call    ApplyMyPitchToSidev
1652+ DB74 CD 43 D9                             call    ApplyMyPitchToRoofv
1653+ DB77 3A 60 94     .NoRotation:            ld      a,(DELTA)                   ; get speed
1654+ DB7A 16 00                                ld      d,0
1655+ DB7C 5F                                   ld      e,a                         ; de = speed in low byte
1656+ DB7D 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
1657+ DB80 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
1658+ DB83 47                                   ld      b,a                         ;
1659+ DB84 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
1660+ DB86 CD 6A CB                             call    ADDHLDESignBC               ; update speed
1661+ DB89 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
1662+ DB8C 32 14 C0                             ld      (UBnKzsgn),a                ;
1663+ DB8F C9                                   ret
1664+ DB90              ; .....................................................
1665+ DB90              ; Process Nodes does the following:
1666+ DB90              ; for each node:
1667+ DB90              ;     see if node >
1668+ DB90 00           PNXX20DIV6          DB      0
1669+ DB91 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1670+ DB93 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1671+ DB95 00           PNLASTNORM          DB      0
1672+ DB96              ProcessNodes:
1673+ DB96 AF               xor     a
1674+ DB97 32 F1 C2         ld      (UbnkLineArrayLen),a
1675+ DB9A CD BE CF         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1676+ DB9D CD 22 87         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1677+ DBA0 CD A0 D1         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1678+ DBA3 CD 6D D0         call    InverseXX16                      ;#11; Invert rotation matrix
1679+ DBA6 21 17 C3         ld      hl,UBnkHullVerticies
1680+ DBA9 3A 07 C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1681+ DBAC              GetActualVertexCount:
1682+ DBAC 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1683+ DBAD 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1684+ DBAE 16 06            ld      d,6
1685+ DBB0 CD D3 A3         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1686+ DBB3 41               ld      b,c                              ; c = number of vertices
1687+ DBB4 FD 21 BF C0      ld      iy,UBnkNodeArray
1688+ DBB8              LL48:
1689+ DBB8              PointLoop:
1690+ DBB8 C5           	push	bc                                  ; save counters
1691+ DBB9 E5           	push	hl                                  ; save verticies list pointer
1692+ DBBA FD E5        	push	iy                                  ; save Screen plot array pointer
1693+ DBBC 78               ld      a,b
1694+ DBBD                  ;break
1695+ DBBD CD 7E D7         call    CopyNodeToXX15                      ; copy verices at hl to xx15
1696+ DBC0 3A 76 C0     	ld		a,(UBnkXScaledSign)
1697+ DBC3 CD C7 89     	call    XX12EquNodeDotOrientation
1698+ DBC6 CD 29 8A     	call    TransposeXX12ByShipToXX15
1699+ DBC9 CD A2 87     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1700+ DBCC FD E1        	pop		iy                                  ; get back screen plot array pointer
1701+ DBCE CD 01 D8     	call    ProjectNodeToEye                     ; set up screen plot list entry
1702+ DBD1                 ; ld      hl,UbnkLineArrayLen
1703+ DBD1                ;  inc     (hl)                                ; another node done
1704+ DBD1              ReadyForNextPoint:
1705+ DBD1 FD E5        	push	iy                                  ; copy screen plot pointer to hl
1706+ DBD3 E1           	pop		hl
1707+ DBD4 3E 04        	ld		a,4
1708+ DBD6 ED 31        	add		hl,a
1709+ DBD8 E5           	push	hl                                  ; write it back at iy + 4
1710+ DBD9 FD E1        	pop		iy								    ; and put it in iy again
1711+ DBDB E1           	pop		hl                                  ; get hl back as vertex list
1712+ DBDC 3E 06        	ld		a,6
1713+ DBDE ED 31        	add 	hl,a                                ; and move to next vertex
1714+ DBE0 C1           	pop		bc                                  ; get counter back
1715+ DBE1 10 D5        	djnz	PointLoop
1716+ DBE3              ; ......................................................
1717+ DBE3 C9               ret
1718+ DBE4              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1719+ DBE4              ;  Entering Here we have the following:
1720+ DBE4              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1721+ DBE4              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1722+ DBE4              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1723+ DBE4              ;
1724+ DBE4              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1725+ DBE4              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1726+ DBE4              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1727+ DBE4              ;--------------------------------------------------------------------------------------------------------
1728+ DBE4              AddLaserBeamLine:
1729+ DBE4              ; this code is a bag of shit and needs re-writing
1730+ DBE4              GetGunVertexNode:
1731+ DBE4 3A 05 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1732+ DBE7 21 BF C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1733+ DBEA ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1734+ DBEC FD 2E 00             ld          iyl,0
1735+ DBEF              MoveX1PointToXX15:
1736+ DBEF 4E                   ld          c,(hl)                              ;
1737+ DBF0 23                   inc         hl
1738+ DBF1 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1739+ DBF2 23                   inc         hl
1740+ DBF3 ED 43 75 C0          ld          (UBnkX1),bc
1741+ DBF7 0C                   inc         c
1742+ DBF8 C8                   ret         z                                   ; was c 255?
1743+ DBF9 04                   inc         b
1744+ DBFA C8                   ret         z                                   ; was c 255?
1745+ DBFB              MoveY1PointToXX15:
1746+ DBFB 4E                   ld          c,(hl)                              ;
1747+ DBFC 23                   inc         hl
1748+ DBFD 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1749+ DBFE 23                   inc         hl
1750+ DBFF ED 43 77 C0          ld          (UBnkY1),bc
1751+ DC03              SetX2PointToXX15:
1752+ DC03 01 00 00             ld          bc,0                                ; set X2 to 0
1753+ DC06 ED 43 79 C0          ld          (UBnkX2),bc
1754+ DC0A 3A 12 C0             ld          a,(UBnKzlo)
1755+ DC0D 4F                   ld          c,a
1756+ DC0E              SetY2PointToXX15:
1757+ DC0E ED 43 7B C0          ld          (UBnkY2),bc                         ; set Y2to 0
1758+ DC12 3A 0E C0             ld          a,(UBnKxsgn)
1759+ DC15                      JumpOnBitClear a,7,LL74SkipDec
1759+ DC15 CB 7F       >                        bit 	7,a
1759+ DC17 CA 1F DC    >                        jp      z,LL74SkipDec
1760+ DC1A              LL74DecX2:
1761+ DC1A 3E FF                ld          a,$FF
1762+ DC1C 32 79 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1763+ DC1F              LL74SkipDec:
1764+ DC1F CD 68 CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1765+ DC22 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1766+ DC24              ; Here we are usign hl to replace VarU as index
1767+ DC24 2A 67 94             ld          hl,(varU16)
1768+ DC27 3A 75 C0             ld          a,(UBnKx1Lo)
1769+ DC2A 77                   ld          (hl),a
1770+ DC2B 23                   inc         hl
1771+ DC2C 3A 77 C0             ld          a,(UbnKy1Lo)
1772+ DC2F 77                   ld          (hl),a
1773+ DC30 23                   inc         hl
1774+ DC31 3A 79 C0             ld          a,(UBnkX2Lo)
1775+ DC34 77                   ld          (hl),a
1776+ DC35 23                   inc         hl
1777+ DC36 3A 7B C0             ld          a,(UbnKy2Lo)
1778+ DC39 77                   ld          (hl),a
1779+ DC3A FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1780+ DC3C 23                   inc         hl
1781+ DC3D FD 2C                inc         iyl                                 ; ready for next byte
1782+ DC3F 22 67 94             ld          (varU16),hl
1783+ DC42 C9                   ret
1784+ DC43
1785+ DC43                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++DC43              ;--------------------------------------------------------------------------------------------------------
   2++DC43                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DC43              ;--------------------------------------------------------------------------------------------------------
   2++DC43              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DC43 21 BF C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DC46 ED 31                                add         hl,a                                ; hl = address of Node
   5++DC48 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DC49 11 75 C0                             ld          de,UBnkX1
   7++DC4C ED A0                                ldi                                             ; x1 lo
   8++DC4E ED A0                                ldi                                             ; x1 hi
   9++DC50 ED A0                                ldi                                             ; y1 lo
  10++DC52 ED A0                                ldi                                             ; y1 hi
  11++DC54 C9                                   ret
  12++DC55
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DC55                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DC55              ;--------------------------------------------------------------------------------------------------------
   2++DC55              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DC55 21 BF C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DC58 ED 31                                add         hl,a                                ; hl = address of Node
   5++DC5A 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DC5B 11 79 C0                             ld          de,UBnkX2
   7++DC5E ED A0                                ldi                                             ; x1 lo
   8++DC60 ED A0                                ldi                                             ; x1 hi
   9++DC62 ED A0                                ldi                                             ; y1 lo
  10++DC64 ED A0                                ldi                                             ; y1 hi
  11++DC66 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DC67                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DC67              ;--------------------------------------------------------------------------------------------------------
   2++DC67              GetFaceAtA:         MACRO
   3++DC67 ~                                ld          hl,UbnkFaceVisArray
   4++DC67 ~                                add         hl,a
   5++DC67 ~                                ld          a,(hl)                              ; get face visibility
   6++DC67                                  ENDM
   7++DC67
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DC67              ;--------------------------------------------------------------------------------------------------------
   6++DC67              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DC67               ;   DEFINE NOBACKFACECULL 1
   8++DC67 00           PLEDGECTR           DB          0
   9++DC68
  10++DC68              PrepLines:
  11++DC68              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DC68
  13++DC68              ; TODO add in onced DOEXP is finished
  14++DC68              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DC68              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DC68              ;        or          8
  17++DC68              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DC68              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DC68              ;EE31:                                                   ; no explosion
  20++DC68              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DC68              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DC68              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DC68              ;
  24++DC68              ;--------------------------------------------------------------------------------------------------------
  25++DC68              InitialiseLineRead:
  26++DC68                      ;break
  27++DC68                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DC68 AF          >               xor      a
  27++DC69 32 F1 C2    >               ld       (UbnkLineArrayLen),a
  28++DC6C                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DC6C AF          >               xor      a
  28++DC6D 32 F2 C2    >               ld       (UbnkLineArrayBytes),a
  29++DC70                      ldWriteZero PLEDGECTR
  29++DC70 AF          >               xor      a
  29++DC71 32 67 DC    >               ld       (PLEDGECTR),a
  30++DC74 3A 08 C3             ld          a,(EdgeCountAddr)
  31++DC77 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DC79 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DC7C 21 FF C1             ld          hl,UbnkLineArray                    ; head of array
  34++DC7F 22 67 94             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DC82                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DC82 3A 08 C3    >               ld       a,(EdgeCountAddr)
  35++DC85 32 6B 94    >               ld       (XX17),a
  36++DC88 3A 2B C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  37++DC8B                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DC8B CB 77       >                        bit 	6,a
  37++DC8D CA 95 DC    >                        jp      z,CalculateNewLines
  38++DC90 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DC92 32 2B C0             ld          (UBnkexplDsp),a                     ; INWK+31
  40++DC95              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DC95              ; NOw we can calculate hull after including laser line
  42++DC95              CalculateNewLines:
  43++DC95              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DC95              CheckEdgesForVisibility:
  45++DC95 21 43 C4             ld          hl,UBnkHullEdges
  46++DC98                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DC98 22 0E 94             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DC9B 3A 04 C3             ld          a,(LineX4Addr)
  49++DC9E 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DC9F              LL75Loop:                                               ; count Visible edges
  51++DC9F              IsEdgeInVisibilityRange:
  52++DC9F 2A 0E 94             ld          hl,(varV)
  53++DCA2 E5                   push        hl
  54++DCA3 FD E1                pop         iy
  55++DCA5                      IFDEF NOBACKFACECULL
  56++DCA5 ~                        jp          VisibileEdge; DEBUGTODO
  57++DCA5                      ENDIF
  58++DCA5 3A FE 93             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DCA8 57                   ld          d,a                                 ; d holds copy of XX4
  60++DCA9              ; Get Edge Byte 0
  61++DCA9 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DCAC                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DCAC BA          >                        cp      d
  62++DCAD DA 00 DD    >                        jp		c, LL78EdgeNotVisible
  63++DCB0              EdgeMayBeVisibile:
  64++DCB0              ; Get Edge Byte 1
  65++DCB0              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DCB0 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DCB3 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DCB4 E6 0F                and         $0F                                 ;
  69++DCB6                      GetFaceAtA
  69++DCB6 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
  69++DCB9 ED 31       >                    add         hl,a
  69++DCBB 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DCBC              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DCBC                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DCBC FE 00       >				cp	0
  71++DCBE C2 D2 DC    >				jp	nz,VisibileEdge
  72++DCC1              IsFace2Visibile:
  73++DCC1 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DCC2 ED 23                swapnib                                         ;
  75++DCC4 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DCC6 E5                   push        hl
  77++DCC7                      GetFaceAtA
  77++DCC7 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
  77++DCCA ED 31       >                    add         hl,a
  77++DCCC 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DCCD E1                   pop         hl
  79++DCCE                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DCCE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DCCF CA 00 DD    >				jp	z, LL78EdgeNotVisible
  80++DCD2              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DCD2              ;LL79--Visible edge--------------------------------------
  82++DCD2              ; Get Edge Byte 2
  83++DCD2 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DCD5 CD 43 DC             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DCD8 FD 7E 03             ld          a,(IY+3)
  86++DCDB CD 55 DC             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DCDE CD 68 CD             call        ClipLine
  88++DCE1 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DCE3              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DCE3 ED 5B 67 94          ld          de,(varU16)                         ; clipped edges heap address
  91++DCE7 21 75 C0             ld          hl,UBnkNewX1
  92++DCEA                      FourLDIInstrunctions
  92++DCEA ED A0       >                        ldi
  92++DCEC ED A0       >                        ldi
  92++DCEE ED A0       >                        ldi
  92++DCF0 ED A0       >                        ldi
  93++DCF2 ED 53 67 94          ld          (varU16),de                         ; update U16 with current address
  94++DCF6 21 F1 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DCF9 34                   inc         (hl)
  96++DCFA 7E                   ld          a,(hl)
  97++DCFB                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DCFB FE 32       >                        cp     LineArraySize
  97++DCFD D2 16 DD    >                        jp		nc,CompletedLineGeneration
  98++DD00              ; If we hit here we skip the write of line arryay u16
  99++DD00              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DD00              LL78:
 101++DD00 2A 0E 94             ld          hl,(varV)                           ; varV is current edge address
 102++DD03 3E 04                ld          a,4
 103++DD05 ED 31                add         hl,a
 104++DD07 22 0E 94             ld          (varV),hl
 105++DD0A 21 67 DC             ld          hl,PLEDGECTR                        ;
 106++DD0D 34                   inc         (hl)                                ;
 107++DD0E 7E                   ld          a,(hl)                              ; current edge index ++
 108++DD0F                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DD0F 21 6B 94    >                  ld    hl,XX17
 108++DD12 BE          >                  cp    (hl)
 108++DD13 C2 9F DC    >                  jp      nz,LL75Loop
 109++DD16              CompletedLineGeneration:
 110++DD16              LL81:
 111++DD16              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DD16 3A F1 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DD19 CB 27                sla         a
 114++DD1B CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DD1D 32 F2 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DD20              ExitEdgeDataLoop:
 117++DD20 C9                   ret
 118++DD21
# file closed: ./Universe/PrepLines.asm
1786+ DD21
1787+ DD21              UnivBankSize  EQU $ - StartOfUniv
1788+ DD21
# file closed: ./Universe/univ_ship_data.asm
1113  DD21
1114  DD21                  SLOT    UniverseBankAddr
1115  DD21                  PAGE    BankUNIVDATA1
1116  DD21              	ORG	UniverseBankAddr,BankUNIVDATA1
1117  C000 FF           UNIVDATABlock1      DB $FF
1118  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1119  E000
1120  E000                  SLOT    UniverseBankAddr
1121  E000                  PAGE    BankUNIVDATA2
1122  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1123  C000 FF           UNIVDATABlock2      DB $FF
1124  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1125  E000
1126  E000                  SLOT    UniverseBankAddr
1127  E000                  PAGE    BankUNIVDATA3
1128  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1129  C000 FF           UNIVDATABlock3      DB $FF
1130  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1131  E000
1132  E000                  SLOT    UniverseBankAddr
1133  E000                  PAGE    BankUNIVDATA4
1134  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1135  C000 FF           UNIVDATABlock4      DB $FF
1136  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1137  E000
1138  E000                  SLOT    UniverseBankAddr
1139  E000                  PAGE    BankUNIVDATA5
1140  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1141  C000 FF           UNIVDATABlock5      DB $FF
1142  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1143  E000
1144  E000                  SLOT    UniverseBankAddr
1145  E000                  PAGE    BankUNIVDATA6
1146  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1147  C000 FF           UNIVDATABlock6      DB $FF
1148  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1149  E000
1150  E000                  SLOT    UniverseBankAddr
1151  E000                  PAGE    BankUNIVDATA7
1152  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1153  C000 FF           UNIVDATABlock7      DB $FF
1154  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1155  E000
1156  E000                  SLOT    UniverseBankAddr
1157  E000                  PAGE    BankUNIVDATA8
1158  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1159  C000 FF           UNIVDATABlock8      DB $FF
1160  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1161  E000
1162  E000                  SLOT    UniverseBankAddr
1163  E000                  PAGE    BankUNIVDATA8
1164  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1165  C000 FF           UNIVDATABlock9      DB $FF
1166  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1167  E000
1168  E000                  SLOT    UniverseBankAddr
1169  E000                  PAGE    BankUNIVDATA10
1170  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1171  C000 FF           UNIVDATABlock10     DB $FF
1172  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1173  E000
1174  E000                  SLOT    UniverseBankAddr
1175  E000                  PAGE    BankUNIVDATA11
1176  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1177  C000 FF           UNIVDATABlock11     DB $FF
1178  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1179  E000
1180  E000                  SLOT    UniverseBankAddr
1181  E000                  PAGE    BankUNIVDATA12
1182  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1183  C000 FF           UNIVDATABlock12     DB $FF
1184  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1185  E000
1186  E000                  SLOT    GalaxyDataAddr
1187  E000                  PAGE    BankGalaxyData0
1188  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1189  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 DA 9B 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 8F 9E 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 BF 9B D0 9B                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 D6 9B 00 00
 316+ F41D E6 9B ED 9B                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 DA 9B DF 9B                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D C5 9B CC 9B                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 F4 9B FB 9B                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 59 9C F4 9B                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 27 9C 00 00
 321+ F445 33 9C 3B 9C                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 50 9C 97 9E                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 A9 9B 06 9C                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 00 9C 00 00
 324+ F45D BA 9B 06 9C                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 00 9C 00 00
 325+ F465 B5 9B 06 9C                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 00 9C 00 00
 326+ F46D AF 9B 06 9C                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 00 9C 00 00
 327+ F475 A9 9B 0C 9C                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 00 9C 00 00
 328+ F47D BA 9B 0C 9C                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 00 9C 00 00
 329+ F485 B5 9B 0C 9C                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 00 9C 00 00
 330+ F48D AF 9B 0C 9C                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 00 9C 00 00
 331+ F495 A9 9B 19 9C                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 00 9C 00 00
 332+ F49D BA 9B 19 9C                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 00 9C 00 00
 333+ F4A5 B5 9B 19 9C                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 00 9C 00 00
 334+ F4AD AF 9B 19 9C                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 00 9C 00 00
 335+ F4B5 A9 9B A2 9E                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 00 9C 00 00
 336+ F4BD BA 9B A2 9E                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 00 9C 00 00
 337+ F4C5 B5 9B A2 9E                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 00 9C 00 00
 338+ F4CD AF 9B A2 9E                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 00 9C 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD B7 98     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD CF 98     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 CD A0     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A 63 95                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD EE A0     .LargeSizeName:         call	NamingLoop
 401+ F690 CD EE A0     .SmallSizeName:         call	NamingLoop
 402+ F693 CD EE A0                             call	NamingLoop
 403+ F696 CD EE A0                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A 65 95     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A 66 95                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A 67 95                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A 68 95                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 44 98     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A 2D 98     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 3E 95     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD 69 A2                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 50 94     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 63 95             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 63 95             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 50 94     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 50 94     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 50 94     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 69 94                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A 69 94                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 69 94                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c, nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c, nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                   cp    2
1156+ FBCF D8          >                   ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD E4 A2                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 76 95                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 76 95                             ld      (Distance),a
1229+ FC51 32 77 95                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1233+ FC55 AF           galaxy_system_under_cursor:xor     a
1234+ FC56 32 69 94                             ld		(XSAV),a
1235+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1236+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1237+ FC60 DD E5                                push    ix
1238+ FC62 7D                                   ld      a,l
1239+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1240+ FC66 20 14                                jr      nz,.ItsNotThisX
1241+ FC68 7C                                   ld      a,h
1242+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1243+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1244+ FC6E DD E5                                push    ix
1245+ FC70 E1                                   pop     hl
1246+ FC71 11 63 95                             ld      de,WorkingSeeds
1247+ FC74 CD A2 98                             call    copy_seed
1248+ FC77 3E FF                                ld      a,$FF
1249+ FC79 DD E1                                pop     ix
1250+ FC7B C9                                   ret
1251+ FC7C E1           .ItsNotThisX:           pop     hl
1252+ FC7D ED 34 08 00                          add     hl,8
1253+ FC81 E5                                   push    hl
1254+ FC82 DD E1                                pop     ix
1255+ FC84 3A 69 94                             ld		a,(XSAV)
1256+ FC87 3D                                   dec		a
1257+ FC88 32 69 94                             ld      (XSAV),a
1258+ FC8B FE 00                                cp		0
1259+ FC8D C8                                   ret		z
1260+ FC8E 18 CD                                jr		.GCCounterLoop
1261+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1262+ FC90 21 50 94     SeedGalaxy:             ld      hl,SystemSeed
1263+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1264+ FC96 ED A0                                ldi
1265+ FC98 ED A0                                ldi
1266+ FC9A ED A0                                ldi
1267+ FC9C ED A0                                ldi
1268+ FC9E ED A0                                ldi
1269+ FCA0 ED A0                                ldi
1270+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1271+ FCA6 AF                                   xor		a
1272+ FCA7 32 69 94                             ld		(XSAV),a
1273+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1274+ FCAC D1                                   pop     de
1275+ FCAD 21 50 94                             ld      hl,SystemSeed
1276+ FCB0 CD A2 98                             call    copy_seed
1277+ FCB3 DD E5                                push    ix
1278+ FCB5 E1                                   pop     hl
1279+ FCB6 ED 34 08 00                          add     hl,8
1280+ FCBA E5                                   push    hl
1281+ FCBB DD E1                                pop     ix
1282+ FCBD CD D7 98                             call    next_system_seed
1283+ FCC0 3A 69 94                             ld		a,(XSAV)
1284+ FCC3 3D                                   dec		a
1285+ FCC4 FE 00                                cp		0
1286+ FCC6 C8                                   ret		z
1287+ FCC7 32 69 94                             ld		(XSAV),a
1288+ FCCA 18 DE                                jr      SeedGalaxyLoop
1289+ FCCC C9                                   ret
1290+ FCCD
1291+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1292+ FCCD
# file closed: ./Universe/galaxy_data.asm
1190  FCCD
1191  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1192  FCCD
1193  FCCD
1194  FCCD                  SLOT    GalaxyDataAddr
1195  FCCD                  PAGE    BankGalaxyData1
1196  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
1197  E000 FF           GALAXYDATABlock1         DB $FF
1198  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1199  0000
1200  0000                  SLOT    GalaxyDataAddr
1201  0000                  PAGE    BankGalaxyData2
1202  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1203  E000 FF           GALAXYDATABlock2         DB $FF
1204  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1205  0000                  SLOT    GalaxyDataAddr
1206  0000                  PAGE    BankGalaxyData3
1207  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1208  E000 FF           GALAXYDATABlock3         DB $FF
1209  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1210  0000                  SLOT    GalaxyDataAddr
1211  0000                  PAGE    BankGalaxyData4
1212  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1213  E000 FF           GALAXYDATABlock4         DB $FF
1214  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1215  0000                  SLOT    GalaxyDataAddr
1216  0000                  PAGE    BankGalaxyData5
1217  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1218  E000 FF           GALAXYDATABlock5         DB $FF
1219  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1220  0000                  SLOT    GalaxyDataAddr
1221  0000                  PAGE    BankGalaxyData6
1222  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1223  E000 FF           GALAXYDATABlock6         DB $FF
1224  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1225  0000                  SLOT    GalaxyDataAddr
1226  0000                  PAGE    BankGalaxyData7
1227  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1228  E000 FF           GALAXYDATABlock7         DB $FF
1229  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1230  0000
1231  0000
1232  0000
1233  0000
1234  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1235  0000                  SAVENEX CFG  0,0,0,1
1236  0000                  SAVENEX AUTO
1237  0000                  SAVENEX CLOSE
1238  0000
# file closed: eliteNext.asm
