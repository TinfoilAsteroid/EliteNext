# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal     EQU 0
  15  0000              ScreenGalactic  EQU ScreenLocal + 1
  16  0000              ScreenMarket    EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp EQU ScreenMarket + 1
  18  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent    EQU ScreenStatus + 1
  20  0000              ScreenPlanet    EQU ScreenInvent + 1
  21  0000              ScreenEquip     EQU ScreenPlanet + 1
  22  0000              ScreenLaunch    EQU ScreenEquip + 1
  23  0000              ScreenFront     EQU ScreenLaunch + 1
  24  0000              ScreenAft       EQU ScreenFront+1
  25  0000              ScreenLeft      EQU ScreenAft+2
  26  0000              ScreenRight     EQU ScreenLeft+3
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipModelsAddr	        equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankShipModelsA         equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000              BankShipModelsB         equ 67
  81+ 0000              BankShipModelsC         equ 68
  82+ 0000
  83+ 0000              BankUNIVDATA0           equ 70
  84+ 0000              BankUNIVDATA1           equ 71
  85+ 0000              BankUNIVDATA2           equ 72
  86+ 0000              BankUNIVDATA3           equ 73
  87+ 0000              BankUNIVDATA4           equ 74
  88+ 0000              BankUNIVDATA5           equ 75
  89+ 0000              BankUNIVDATA6           equ 76
  90+ 0000              BankUNIVDATA7           equ 77
  91+ 0000              BankUNIVDATA8           equ 78
  92+ 0000              BankUNIVDATA9           equ 79
  93+ 0000              BankUNIVDATA10          equ 80
  94+ 0000              BankUNIVDATA11          equ 81
  95+ 0000              BankUNIVDATA12          equ 82
  96+ 0000
  97+ 0000              BankGalaxyData0         equ 91
  98+ 0000              BankGalaxyData1         equ 92
  99+ 0000              BankGalaxyData2         equ 93
 100+ 0000              BankGalaxyData3         equ 94
 101+ 0000              BankGalaxyData4         equ 95
 102+ 0000              BankGalaxyData5         equ 96
 103+ 0000              BankGalaxyData6         equ 97
 104+ 0000              BankGalaxyData7         equ 98
 105+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000
  51  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipModelsA: MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsA
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipModelsB: MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsB
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipModelsC: MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsC
  29+ 0000              					 ENDM
  30+ 0000
  31+ 0000              MMUSelectShipModelA: MACRO
  32+ 0000 ~            					 nextreg ShipModelMMU,	    a
  33+ 0000              					 ENDM
  34+ 0000
  35+ 0000              MMUSelectShipModelN: MACRO value
  36+ 0000 ~            					 nextreg ShipModelMMU,	    value
  37+ 0000              					 ENDM
  38+ 0000
  39+ 0000              MMUSelectCmdrData:	 MACRO
  40+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  41+ 0000              					 ENDM
  42+ 0000
  43+ 0000              MMUSelectStockTable: MACRO
  44+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  45+ 0000              					 ENDM
  46+ 0000
  47+ 0000              MMUSelectCpySrcA:    MACRO
  48+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  49+ 0000              					 ENDM
  50+ 0000
  51+ 0000              MMUSelectCpySrcN:    MACRO value
  52+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  53+ 0000              					 ENDM
  54+ 0000
  55+ 0000              MMUSelectUniverseA:  MACRO
  56+ 0000 ~                                 nextreg UniverseMMU,       a
  57+ 0000                                   ENDM
  58+ 0000
  59+ 0000              MMUSelectUniverseN:  MACRO value
  60+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  61+ 0000                                   ENDM
  62+ 0000
  63+ 0000              MMUSelectGalaxyA:    MACRO
  64+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectGalaxyN:    MACRO value
  68+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  69+ 0000                                   ENDM
  70+ 0000              MMUSelectGalaxyACopy:MACRO
  71+ 0000 ~                                 nextreg UniverseMMU,       a
  72+ 0000                                   ENDM
  73+ 0000
  74+ 0000              MMUSelectUniverseAbs:MACRO value
  75+ 0000 ~                                 nextreg UniverseMMU,       value
  76+ 0000                                   ENDM
  77+ 0000
  78+ 0000              MMUSelectMenuGalCht: MACRO
  79+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  80+ 0000              					 ENDM
  81+ 0000
  82+ 0000              MMUSelectMenuShrCht: MACRO
  83+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  84+ 0000              					 ENDM
  85+ 0000
  86+ 0000              MMUSelectMenuInvent: MACRO
  87+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  88+ 0000              					 ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuSystem: MACRO
  91+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuMarket: MACRO
  95+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuStatus: MACRO
  99+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectViewFront:  MACRO
 103+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectScreenA:    MACRO
 107+ 0000 ~                                 nextreg ScreenBankMMU,		a
 108+ 0000              					 ENDM
 109+ 0000
# file closed: ./Macros/MMUMacros.asm
  52  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl   d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla b
  54+ 0000 ~            			   rl  c
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  53  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
  54  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  10+ 0000 ~                                    ld      a,(mem)
  11+ 0000 ~                                    bit 	bitnbr,a
  12+ 0000 ~                                    jp      nz,target
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  16+ 0000 ~                                    ld      a,(mem)
  17+ 0000 ~                                    bit 	bitnbr,a
  18+ 0000 ~                                    jp      z,target
  19+ 0000                                      ENDM
  20+ 0000
  21+ 0000
  22+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    jp      nz,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    ret     nz
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  38+ 0000 ~                                    ld   a,(mem)
  39+ 0000 ~                                    bit 	bitnbr,a
  40+ 0000 ~                                    ret     nz
  41+ 0000                                      ENDM
  42+ 0000
  43+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  44+ 0000 ~                                    bit 	bitnbr,reg
  45+ 0000 ~                                    ret		z
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  49+ 0000 ~                                    ld     a,(mem)
  50+ 0000 ~                                    bit 	bitnbr,a
  51+ 0000 ~                                    ret		z
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              JumpIfAGTEusng:         MACRO
  55+ 0000 ~                                    jp		nc,target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfAGTENusng:        MACRO reg,target
  59+ 0000 ~                                    cp     reg
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000
  64+ 0000              CallIfAGTENusng:        MACRO   reg,target
  65+ 0000 ~                                    cp      reg
  66+ 0000 ~                                    call	nc,target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  70+ 0000 ~                                    ld     a,(mem)
  71+ 0000 ~                                    cp     value
  72+ 0000 ~                                    jp	  nc,target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              JumpIfMemGTEMemusng:    MACRO mem, value, target
  76+ 0000 ~                                    ld   a,(mem)
  77+ 0000 ~                                    ld   hl,value
  78+ 0000 ~                                    cp   (hl)
  79+ 0000 ~                                    jp	  nc,target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000
  83+ 0000              JumpIfALTusng:          MACRO target
  84+ 0000 ~                                    jp		c,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpIfALTNusng:         MACRO value, target
  88+ 0000 ~                                    cp      value
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
  93+ 0000 ~                                    ld      a,(mem)
  94+ 0000 ~                                    cp      value
  95+ 0000 ~                                    jp	  c,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
  99+ 0000 ~                                    ld    a,(mem)
 100+ 0000 ~                                    ld    hl,value
 101+ 0000 ~                                    cp    (hl)
 102+ 0000 ~                                    jp	  c,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfALTMemHLusng:     MACRO target
 106+ 0000 ~                                    cp    (hl)
 107+ 0000 ~                                    jp	  c,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpIfANENusng: MACRO value, target
 111+ 0000 ~                            cp     value
 112+ 0000 ~                            jp      nz,target
 113+ 0000                              ENDM
 114+ 0000
 115+ 0000              JumpIfANEMemusng: MACRO  value, target
 116+ 0000 ~                              ld    hl,value
 117+ 0000 ~                              cp    (hl)
 118+ 0000 ~                              jp      nz,target
 119+ 0000                                ENDM
 120+ 0000
 121+ 0000              JumpIfAEqNusng: MACRO value, target
 122+ 0000 ~                            cp     value
 123+ 0000 ~                            jp      z,target
 124+ 0000                              ENDM
 125+ 0000
 126+ 0000              IfAIsZeroGoto:	MACRO target
 127+ 0000 ~            				cp	0
 128+ 0000 ~            				jp	z,target
 129+ 0000              				ENDM
 130+ 0000
 131+ 0000              IfANotZeroGoto:	MACRO target
 132+ 0000 ~            				cp	0
 133+ 0000 ~            				jp	nz,target
 134+ 0000              				ENDM
 135+ 0000
 136+ 0000              IfResultZeroGoto:	MACRO target
 137+ 0000 ~            					jp	z,target
 138+ 0000              					ENDM
 139+ 0000
 140+ 0000              IfResultNotZeroGoto:MACRO target
 141+ 0000 ~            					jp	nz,target
 142+ 0000              					ENDM
 143+ 0000
 144+ 0000              ReturnIfAIsZero: MACRO
 145+ 0000 ~                             cp     0
 146+ 0000 ~                             ret    z
 147+ 0000                               ENDM
 148+ 0000
 149+ 0000              ReturnIfMemisZero: MACRO mem
 150+ 0000 ~                               ld   a,(mem)
 151+ 0000 ~                               cp     0
 152+ 0000 ~                               ret    z
 153+ 0000                                 ENDM
 154+ 0000
 155+ 0000              ReturnIfANotZero: MACRO
 156+ 0000 ~                              cp     0
 157+ 0000 ~                              ret    nz
 158+ 0000                                ENDM
 159+ 0000
 160+ 0000              ReturnIfMemNotZero: MACRO mem
 161+ 0000 ~                                ld     a,(mem)
 162+ 0000 ~                                cp     0
 163+ 0000 ~                                ret    nz
 164+ 0000                                  ENDM
 165+ 0000
 166+ 0000              ReturnIfAGTEusng: MACRO value
 167+ 0000 ~            				  cp    value
 168+ 0000 ~                              ret	 nc
 169+ 0000                                ENDM
 170+ 0000
 171+ 0000              ReturnIfALTNusng:  MACRO value
 172+ 0000 ~                               cp    value
 173+ 0000 ~                               ret	 c
 174+ 0000                                 ENDM
 175+ 0000
 176+ 0000              ReturnIfAGTENusng: MACRO value
 177+ 0000 ~                               cp    value
 178+ 0000 ~                               ret	 nc
 179+ 0000                                 ENDM
 180+ 0000
 181+ 0000              ReturnIfANENusng: MACRO value
 182+ 0000 ~                              cp      value
 183+ 0000 ~                              ret     nz
 184+ 0000                                ENDM
 185+ 0000
 186+ 0000              ReturnIfAEqNusng: MACRO value
 187+ 0000 ~                              cp      value
 188+ 0000 ~                              ret     z
 189+ 0000                                ENDM
 190+ 0000
 191+ 0000
 192+ 0000              ClearCarryFlag:	MACRO
 193+ 0000 ~            				or a
 194+ 0000              				ENDM
 195+ 0000
 196+ 0000              pushbcde:		MACRO
 197+ 0000 ~            	push	bc
 198+ 0000 ~            	push	de
 199+ 0000              	ENDM
 200+ 0000
 201+ 0000              popdebc:		MACRO
 202+ 0000 ~            	pop		de
 203+ 0000 ~            	pop		bc
 204+ 0000              	ENDM
 205+ 0000
 206+ 0000              pushhlde:		MACRO
 207+ 0000 ~                            push	hl
 208+ 0000 ~                            push	de
 209+ 0000                              ENDM
 210+ 0000
 211+ 0000              popdehl:		MACRO
 212+ 0000 ~                            pop		de
 213+ 0000 ~                            pop		hl
 214+ 0000                              ENDM
 215+ 0000
 216+ 0000              pushbcdeaf:		MACRO
 217+ 0000 ~                            push	bc
 218+ 0000 ~                            push	de
 219+ 0000 ~                            push	af
 220+ 0000                              ENDM
 221+ 0000
 222+ 0000              popafdebc:		MACRO
 223+ 0000 ~                            pop		af
 224+ 0000 ~                            pop		de
 225+ 0000 ~                            pop		bc
 226+ 0000                              ENDM
 227+ 0000
 228+ 0000              NegIY:			MACRO
 229+ 0000 ~                            xor a
 230+ 0000 ~                            sub iyl
 231+ 0000 ~                            ld iyl,a
 232+ 0000 ~                            sbc a,a
 233+ 0000 ~                            sub iyh
 234+ 0000 ~                            ld iyh,a
 235+ 0000                              ENDM
 236+ 0000
 237+ 0000              NegHL:			MACRO
 238+ 0000 ~                            xor a
 239+ 0000 ~                            sub l
 240+ 0000 ~                            ld l,a
 241+ 0000 ~                            sbc a,a
 242+ 0000 ~                            sub h
 243+ 0000 ~                            ld h,a
 244+ 0000                              ENDM
 245+ 0000
 246+ 0000              NegDE:			MACRO
 247+ 0000 ~                            xor a
 248+ 0000 ~                            sub e
 249+ 0000 ~                            ld e,a
 250+ 0000 ~                            sbc a,a
 251+ 0000 ~                            sub d
 252+ 0000 ~                            ld d,a
 253+ 0000                              ENDM
 254+ 0000
 255+ 0000
 256+ 0000              NegBC:			MACRO
 257+ 0000 ~                            xor a
 258+ 0000 ~                            sub c
 259+ 0000 ~                            ld c,a
 260+ 0000 ~                            sbc a,a
 261+ 0000 ~                            sub  b
 262+ 0000 ~                            ld b,a
 263+ 0000                              ENDM
 264+ 0000
 265+ 0000              FourLDIInstrunctions:   MACRO
 266+ 0000 ~                                    ldi
 267+ 0000 ~                                    ldi
 268+ 0000 ~                                    ldi
 269+ 0000 ~                                    ldi
 270+ 0000                                      ENDM
 271+ 0000
 272+ 0000              FiveLDIInstrunctions:   MACRO
 273+ 0000 ~                                    ldi
 274+ 0000 ~                                    ldi
 275+ 0000 ~                                    ldi
 276+ 0000 ~                                    ldi
 277+ 0000 ~                                    ldi
 278+ 0000                                      ENDM
 279+ 0000
 280+ 0000              SixLDIInstrunctions:   MACRO
 281+ 0000 ~                                    ldi
 282+ 0000 ~                                    ldi
 283+ 0000 ~                                    ldi
 284+ 0000 ~                                    ldi
 285+ 0000 ~                                    ldi
 286+ 0000 ~                                    ldi
 287+ 0000                                      ENDM
 288+ 0000
 289+ 0000              EightLDIInstrunctions:  MACRO
 290+ 0000 ~            		                ldi
 291+ 0000 ~            		                ldi
 292+ 0000 ~            		                ldi
 293+ 0000 ~            		                ldi
 294+ 0000 ~            		                ldi
 295+ 0000 ~            		                ldi
 296+ 0000 ~            		                ldi
 297+ 0000 ~            		                ldi
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              NineLDIInstrunctions:  MACRO
 301+ 0000 ~            		                ldi
 302+ 0000 ~            		                ldi
 303+ 0000 ~            		                ldi
 304+ 0000 ~            		                ldi
 305+ 0000 ~            		                ldi
 306+ 0000 ~            		                ldi
 307+ 0000 ~            		                ldi
 308+ 0000 ~            		                ldi
 309+ 0000 ~            		                ldi
 310+ 0000                                      ENDM
 311+ 0000
# file closed: ./Macros/GeneralMacros.asm
  55  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  56  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  57  0000
  58  0000
  59  0000              charactersetaddr		equ 15360
  60  0000              STEPDEBUG               equ 1
  61  0000
  62  0000
  63  0000                                      ORG         $8000
  64  8000 F3                                   di
  65  8001                                      ; "STARTUP"
  66  8001                                      MMUSelectLayer1
  66  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  67  8005 CD 47 E0                             call		l1_cls
  68  8008 3E 07                                ld			a,7
  69  800A CD 53 E0                             call		l1_attr_cls_to_a
  70  800D 3E FF                                ld          a,$FF
  71  800F CD 5D E0                             call        l2_set_border
  72  8012                                      MMUSelectSpriteBank
  72  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  73  8016 CD 54 E1                             call		sprite_load_sprite_data
  74  8019              Initialise:             MMUSelectLayer2
  74  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  75  801D CD D0 E0                             call 		l2_initialise
  76  8020 3E FF                                ld          a,$FF
  77  8022 32 8E 82                             ld          (ScreenTransitionForced),a
  78  8025
  79  8025 AF           TestText:               xor			a
  80  8026 32 2C 92                             ld      (JSTX),a
  81  8029                                      MMUSelectCmdrData
  81  8029 ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  82  802D CD 1F E0                             call		defaultCommander
  83  8030
  84  8030                                      MMUSelectSpriteBank
  84  8030 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  85  8034 CD 4C E1                             call		init_sprites
  86  8037
  87  8037                                      MMUSelectStockTable
  87  8037 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  88  803B CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
  89  803E
  90  803E                                      IFDEF DOUBLEBUFFER
  91  803E                                          MMUSelectLayer2
  91  803E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  92  8042 CD C9 E0                                 call        l2_cls
  93  8045 CD DD E0                                 call  l2_flip_buffers
  94  8048                                      ENDIF
  95  8048
  96  8048                                      ;MMUSelectResetUniv
  97  8048 CD 8F 82                             call		ResetUniv
  97  804B
  98  804B CD AE 82                             call        ResetGalaxy
  99  804E                                      MMUSelectGalaxyN 0
  99  804E ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 100  8052 CD 90 FC                             call        SeedGalaxy
 101  8055
 102  8055                                      MMUSelectLayer2
 102  8055 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 103  8059                                      MMUSelectUniverseN 0
 103  8059 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 104  805D CD C9 E0                             call        l2_cls
 105  8060                                      IFDEF DOUBLEBUFFER
 106  8060                                          MMUSelectLayer2
 106  8060 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 107  8064 CD DD E0                                 call  l2_flip_buffers
 108  8067                                      ENDIF
 109  8067
 110  8067 3A A9 81     InitialiseDemoShip:     ld      a,(currentDemoShip)
 111  806A                                      MMUSelectUniverseN 0                          ; load up register into universe bank
 111  806A ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 112  806E CD 23 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 113  8071                                      MMUSelectShipModelsA
 113  8071 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 114  8075 3A A9 81                             ld		a,(currentDemoShip)
 115  8078 CD 58 E0                             call    CopyShipDataToUBnk
 116  807B 3E 03                                ld      a,3
 117  807D 32 7B 92                             ld      (MenuIdMax),a
 118  8080 3E FF                                ld      a,$FF                               ; Starts Docked
 119  8082 32 81 92                             ld      (DockedFlag),a
 120  8085              ;                        call    InitialiseFrontView
 121  8085 CD D7 82                             call    InitialiseCommander
 122  8088                                      MMUSelectUniverseN 0
 122  8088 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 123  808C CD 88 83                             call    SetInitialShipPosition
 124  808F              ;..................................................................................................................................
 125  808F CD 1C 96     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 126  8092 CD 7A 8F                             call    scan_keyboard
 127  8095 CD 58 81     DemoOfShipsDEBUG:       call    TestForNextShip
 128  8098 3E 00        ScreenTransBlock:       ld      a,$0
 129  809A FE 01                                cp      1
 130  809C CA F5 80                             jp      z,CheckIfViewUpdate                 ; as we are in a transition the whole update AI is skipped
 131  809F CD 3B 83                             call    ViewKeyTest
 132  80A2 CD 7F 81                             call    TestPauseMode
 133  80A5 3A 82 92                             ld      a,(GamePaused)
 134  80A8 FE 00                                cp      0
 135  80AA 20 E3                                jr      nz,MainLoop
 136  80AC 3A 81 92                             ld      a,(DockedFlag)
 137  80AF FE 00                                cp      0
 138  80B1                                      ;call    z,ThrottleTest                      ; only use throttle if flying, may expand the logic to include hyperspace, not sure yet
 139  80B1 CD FC 90                             call    MovementKeyTest
 140  80B4              ;Process cursor keys for respective screen
 141  80B4 3A C3 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 142  80B7                                      IfAIsZeroGoto     UpdateUniverseSpeed
 142  80B7 FE 00       >				cp	0
 142  80B9 CA C4 80    >				jp	z,UpdateUniverseSpeed
 143  80BC 3E 00        HandleBankSelect:       ld      a,$00
 144  80BE                                      MMUSelectScreenA
 144  80BE ED 92 56    >                     nextreg ScreenBankMMU,		a
 145  80C1 CD 00 00     CallCursorRoutine:      call    $0000
 146  80C4              ; need to optimise so not looping over agint for all universe doign ingle updates
 147  80C4              UpdateUniverseSpeed:    MMUSelectUniverseN 0
 147  80C4 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 148  80C8 CD 11 89                             call    TestRollLoop
 149  80CB 3A 6B 92                             ld      a,(DELTA)
 150  80CE 16 00                                ld      d,0
 151  80D0 5F                                   ld      e,a
 152  80D1 2A 11 C0                             ld      hl,(UBnKzlo)
 153  80D4 3A 13 C0                             ld      a,(UBnKzsgn)
 154  80D7 47                                   ld      b,a
 155  80D8 0E 80                                ld      c,$80
 156  80DA CD 3B CB                             call    ADDHLDESignBC
 157  80DD 22 11 C0                             ld      (UBnKzlo),hl
 158  80E0 32 13 C0                             ld      (UBnKzsgn),a
 159  80E3 CD 25 D8                             call    ApplyMyRollAndPitch
 160  80E6 CD AA 81                            call    DEBUGSETNODES
 161  80E9                                    ;  call    DEBUGSETPOS
 162  80E9 CD 3A D8                             call   ProcessNodes
 163  80EC              DrawShipTest:           MMUSelectLayer1
 163  80EC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 164  80F0 3E DF                                ld     a,$DF
 165  80F2 32 ED E8                             ld     (line_gfx_colour),a
 166  80F5 3E 00        CheckIfViewUpdate:      ld      a,$00
 167  80F7 FE 00                                cp      0
 168  80F9 28 21                                jr      z, MenusLoop; This will change as more screens are added TODO
 169  80FB              SpecificCodeWhenInView: ;call   SetAllFacesVisible
 170  80FB CD 98 D3                             call   BackFaceCull				; culling but over aggressive backface assumes all 0 up front TOFIX
 171  80FE CD 0C D9                             call   PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 172  8101                                      MMUSelectLayer2
 172  8101 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173  8105 CD C9 E0                             call   l2_cls
 174  8108                                      MMUSelectUniverseN 0
 174  8108 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 175  810C CD FF 8D                             call   DrawLines                   ; Need to plot all lines
 176  810F CD 17 8B     DrawStars:              call   StarsForward
 177  8112                                      MMUSelectViewFront
 177  8112 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 178  8116 CD D7 83                             call   UpdateConsole
 179  8119 C3 2C 81                             jp LoopRepeatPoint
 180  811C 2A 2A 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 181  811F 7C                                   ld      a,h
 182  8120 B5                                   or      l
 183  8121 CA 2C 81                             jp      z,LoopRepeatPoint
 184  8124 3E 00        ScreenLoopBank:         ld      a,$0
 185  8126                                      MMUSelectScreenA
 185  8126 ED 92 56    >                     nextreg ScreenBankMMU,		a
 186  8129 CD 00 00     ScreenLoopJP:           call    $0000
 187  812C              LoopRepeatPoint:
 188  812C 3E 00        DoubleBufferCheck:      ld      a,00
 189  812E                                      IFDEF DOUBLEBUFFER
 190  812E FE 00                                    cp      0
 191  8130 CA 8F 80                                 jp      z,MainLoop
 192  8133                                          MMUSelectLayer2
 192  8133 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 193  8137 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 194  813A FE 00                                    cp     0
 195  813C C4 DD E0                                 call   nz,l2_flip_buffers
 196  813F                                      ENDIF
 197  813F 3A 8E 82                             ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 198  8142 FE FF                                cp      $FF
 199  8144 CA 8F 80                             jp      z,MainLoop
 200  8147 57           .BruteForceChange:      ld      d,a
 201  8148 1E 10                                ld      e,ScreenMapRow
 202  814A ED 30                                mul
 203  814C DD 21 EE 81                          ld      ix,ScreenKeyMap
 204  8150 DD 19                                add     ix,de                               ; Force screen transition
 205  8152 CD EB 82                             call    SetScreenAIX
 206  8155 C3 8F 80                             jp MainLoop
 207  8158              ;..................................................................................................................................
 208  8158              	;call		keyboard_main_loop
 209  8158
 210  8158 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 211  815A CD F2 8F                             call    is_key_pressed
 212  815D C0                                   ret     nz
 213  815E 3A A9 81                             ld      a,(currentDemoShip)
 214  8161 3C                                   inc     a
 215  8162 FE 2C                                cp      44
 216  8164 20 01                                jr      nz,.TestOK
 217  8166 AF                                   xor     a
 218  8167 32 A9 81     .TestOK:                ld      (currentDemoShip),a
 219  816A                                      MMUSelectUniverseN 0
 219  816A ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 220  816E CD 23 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 221  8171 3A A9 81                             ld      a,(currentDemoShip)
 222  8174                                      MMUSelectShipModelsA
 222  8174 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 223  8178 CD 58 E0                             call    CopyShipDataToUBnk
 224  817B CD 88 83                             call    SetInitialShipPosition
 225  817E C9                                   ret
 226  817F
 227  817F 3A 82 92     TestPauseMode:          ld      a,(GamePaused)
 228  8182 FE 00                                cp      0
 229  8184 20 12                                jr      nz,.TestForResume
 230  8186 3A 78 92     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 231  8189                                      ReturnIfAGTENusng       ScreenFront
 231  8189 FE 09       >                   cp    ScreenFront
 231  818B D0          >                   ret	 nc
 232  818C 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 233  818E CD F2 8F                             call    is_key_pressed
 234  8191 C0                                   ret     nz
 235  8192 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 236  8194 32 82 92                             ld      (GamePaused),a
 237  8197 C9                                   ret
 238  8198 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 239  819A CD F2 8F                             call    is_key_pressed
 240  819D C0                                   ret     nz
 241  819E AF           .ResumePressed:         xor     a
 242  819F 32 82 92                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 243  81A2 C9                                   ret
 244  81A3
 245  81A3 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 246  81A5 CD F2 8F                             call    is_key_pressed
 247  81A8 C9                                   ret
 248  81A9 00           currentDemoShip:        DB 0
 249  81AA
 250  81AA
 251  81AA 21 CD 81     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
 252  81AD 11 0B C0                             ld      de,UBnKxlo
 253  81B0 01 09 00                             ld      bc,9
 254  81B3 ED B0                                ldir
 255  81B5 21 D6 81                             ld      hl,DEBUGROTMATDATA
 256  81B8 11 14 C0                             ld      de,UBnkrotmatSidevX
 257  81BB 01 12 00                             ld      bc,6*3
 258  81BE ED B0                                ldir
 259  81C0
 260  81C0 C9                                   ret
 261  81C1 21 CD 81     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
 262  81C4 11 0B C0                             ld      de,UBnKxlo
 263  81C7 01 06 00                             ld      bc,9 - 3
 264  81CA ED B0                                ldir
 265  81CC C9                                   ret
 266  81CD
 267  81CD              ; FAILS due to sharp angle, OK now
 268  81CD              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
 269  81CD              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
 270  81CD              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
 271  81CD              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
 272  81CD              ; TOP RIGHT CORNER Passes as python and cobra
 273  81CD              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
 274  81CD              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
 275  81CD              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
 276  81CD              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
 277  81CD              ; Looks OK
 278  81CD              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
 279  81CD              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
 280  81CD              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
 281  81CD              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
 282  81CD              ;
 283  81CD              ; Massive horizontal line
 284  81CD              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
 285  81CD              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
 286  81CD              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
 287  81CD              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
 288  81CD              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
 289  81CD              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
 290  81CD              ; Line lost in clipping
 291  81CD              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
 292  81CD              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
 293  81CD              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
 294  81CD              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
 295  81CD              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
 296  81CD              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
 297  81CD              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
 298  81CD              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
 299  81CD              ;
 300  81CD              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
 301  81CD              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
 302  81CD              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
 303  81CD              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
 304  81CD              ; top left off right issue
 305  81CD              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
 306  81CD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 307  81CD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 308  81CD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 309  81CD              ; test middle of screen
 310  81CD              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
 311  81CD              ;
 312  81CD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 313  81CD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 314  81CD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 315  81CD              ; test middle of screen futher away
 316  81CD              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
 317  81CD              ;
 318  81CD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 319  81CD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 320  81CD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 321  81CD
 322  81CD              ; Test left center clip still warping
 323  81CD              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
 324  81CD              ;
 325  81CD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 326  81CD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 327  81CD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 328  81CD              ; Test right center clip - seems to be warping values towards bottom of screen on clip
 329  81CD              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
 330  81CD              ;
 331  81CD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 332  81CD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 333  81CD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 334  81CD              ; Test top center clip test 1 - good test many ships fail
 335  81CD 19 00 00 50  DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
 335  81D1 00 00 20 01
 335  81D5 00
 336  81D6
 337  81D6 FD 50 47 B0  DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 337  81DA 53 9A
 338  81DC 73 B7 98 C8                          db      $73,    $B7,    $98,    $C8,    $80,    $A3
 338  81E0 80 A3
 339  81E2 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 339  81E6 B0 55
 340  81E8              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 341  81E8              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 342  81E8              ;
 343  81E8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 344  81E8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 345  81E8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 346  81E8              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 347  81E8              ; looks better now may have some clipping issues maybe ship data
 348  81E8              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 349  81E8              ;
 350  81E8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 351  81E8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 352  81E8 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 352  81EC B0 55
 353  81EE              ; Test left top center clip
 354  81EE
 355  81EE              ; Test right top center clip
 356  81EE              ; Test left bottom center clip
 357  81EE              ; Test right bottom center clip
 358  81EE
 359  81EE              ; Tests with no clip
 360  81EE              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 361  81EE              ;
 362  81EE              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 363  81EE              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 364  81EE              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 365  81EE              ;
 366  81EE              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 367  81EE              ;
 368  81EE              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 369  81EE              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 370  81EE
 371  81EE
 372  81EE              ;TODO Optimisation
 373  81EE              ; Need this table to handle differnet events
 374  81EE              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 375  81EE              ; cursor key, joystick press
 376  81EE              ; cursor key, joystick press
 377  81EE              ; non cursor keys presses
 378  81EE              ;
 379  81EE              ; First byte is now docked flag
 380  81EE              ;
 381  81EE              ; Padded to 8 bytes to allow a * 8 for addressing
 382  81EE              ; Byte 0 - Docked flag  : 0 = not applicable, 1 = only whilst docked, 2 = only when not docked
 383  81EE              ; Byte 1 - Screen Id
 384  81EE              ; Byte 2,3 - address of keypress table
 385  81EE              ; Byte 4   - Bank with Display code
 386  81EE              ; Byte 5,6 - Function for display
 387  81EE              ; Byte 7,8 - Main loop update routine
 388  81EE              ; Byte 9   - Draw stars Y/N
 389  81EE              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 390  81EE              ; byte 11  - Double Buffering 0 = no, 1 = yes
 391  81EE              ; byte 12,13  - cursor key input
 392  81EE              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 393  81EE 00 00 2A 8F  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 393  81F2 32 FC C3 00
 393  81F6 00 00 00 00
 393  81FA 5A C4 00 00
 394  81FE 00 01 28 8F  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $00,$00
 394  8202 33 43 C1 62
 394  8206 C2 00 00 00
 394  820A 05 C3 00 00
 395  820E 01 02 2C 8F                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,$00,$00,$00
 395  8212 36 43 C3 FA
 395  8216 C3 00 00 00
 395  821A 00 00 00 00
 396  821E 02 03 2C 8F                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 396  8222 36 43 C3 00
 396  8226 00 00 00 00
 396  822A 00 00 00 00
 397  822E 00 04 2E 8F  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,$00,$00,$00
 397  8232 3F 4C CF 90
 397  8236 CF 00 00 00
 397  823A 00 00 00 00
 398  823E 00 05 30 8F                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 398  8242 34 F5 C1 00
 398  8246 00 00 00 00
 398  824A 00 00 00 00
 399  824E 00 06 3E 8F                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 399  8252 35 F0 C2 00
 399  8256 00 00 00 00
 399  825A 00 00 00 00
 400  825E 01 07 26 8F                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,$00,$00,$00
 400  8262 40 EA D3 86
 400  8266 D4 00 00 00
 400  826A 00 00 00 00
 401  826E 01 08 20 8F                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,$00,$00,$00
 401  8272 41 FE C0 6C
 401  8276 C1 00 01 01
 401  827A 00 00 00 00
 402  827E 02 09 F6 8E  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 402  8282 3E 10 C0 00
 402  8286 00 01 00 01
 402  828A 4E C0 00 00
 403  828E              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 404  828E              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 405  828E              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 406  828E              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 407  828E              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 408  828E              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 409  828E FF           ScreenTransitionForced  DB $FF
 410  828F                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 828F              ; Use bank 0 as source and bank 7 as write target
   2+ 828F              ResetUniv:
   3+ 828F                  MODULE ResetUniv
   4+ 828F              ; Move bank 70 into page 0
   5+ 828F                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 828F ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 8293 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 8295 06 0C        	ld		b,12
   8+ 8297              ResetCopyLoop:
   9+ 8297 C5           	push	bc
  10+ 8298              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 8298 ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 829B F5           	push	af
  12+ 829C 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 829F 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 82A2 01 C6 19     	ld		bc,UnivBankSize
  15+ 82A5 CD A1 8E     	call	memcopy_dma
  16+ 82A8 F1           	pop		af
  17+ 82A9 C1           	pop		bc
  18+ 82AA 3C           	inc		a
  19+ 82AB 10 EA        	djnz	ResetCopyLoop
  20+ 82AD C9           	ret
  21+ 82AE                  ENDMODULE
  22+ 82AE
  23+ 82AE              ; Use bank 0 as source and bank 7 as write target
  24+ 82AE              ResetGalaxy:
  25+ 82AE                  MODULE ResetGalaxy
  26+ 82AE              ; Move bank 70 into page 0
  27+ 82AE                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  27+ 82AE ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  28+ 82B2 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  29+ 82B4 06 08        	ld		b,8
  30+ 82B6 0E 01            ld      c,1
  31+ 82B8              ResetCopyLoop:
  32+ 82B8 F5           	push	af
  33+ 82B9 C5           	push	bc
  34+ 82BA              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  34+ 82BA ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 82BD 21 00 E0     	ld		hl,GalaxyDataAddr
  36+ 82C0 11 00 00     	ld		de,dmaCopySrcAddr
  37+ 82C3 01 CD 1C     	ld		bc,GalaxyBankSize
  38+ 82C6 CD A1 8E     	call	memcopy_dma
  39+ 82C9 C1           	pop		bc
  40+ 82CA 21 0F E0         ld      hl, galaxy_pg_cnt
  41+ 82CD 79               ld      a,c
  42+ 82CE C6 30            add     a, $30
  43+ 82D0 77               ld      (hl),a
  44+ 82D1 0C               inc     c
  45+ 82D2 F1               pop     af
  46+ 82D3 3C           	inc		a
  47+ 82D4 10 E2        	djnz	ResetCopyLoop
  48+ 82D6 C9           	ret
  49+ 82D7                  ENDMODULE
# file closed: ./GameEngine/resetUniverse.asm
 411  82D7
 412  82D7
 413  82D7 3A 2F 82     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 414  82DA DD 21 2E 82                          ld      ix,ScreenCmdr
 415  82DE C3 EB 82                             jp      SetScreenAIX
 416  82E1
 417  82E1 3A 7F 82     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 418  82E4 DD 21 7E 82                          ld      ix,ScreenKeyFront
 419  82E8 C3 EB 82                             jp      SetScreenAIX
 420  82EB              ; false ret here as we get it free from jp
 421  82EB
 422  82EB              ;----------------------------------------------------------------------------------------------------------------------------------
 423  82EB 32 78 92     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to ixl
 424  82EE AF                                   xor     a
 425  82EF 3D                                   dec     a                               ; set A to FF
 426  82F0 32 8E 82                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 427  82F3 32 77 92                             ld      (ScreenChanged),a               ; Set screen changed to FF
 428  82F6 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 429  82F9 32 25 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 430  82FC 32 BD 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 431  82FF                                      MMUSelectScreenA
 431  82FF ED 92 56    >                     nextreg ScreenBankMMU,		a
 432  8302 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 433  8305 32 39 83                             ld      (ScreenUpdateAddr+1),a
 434  8308 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 435  830B 32 3A 83                             ld      (ScreenUpdateAddr+2),a
 436  830E DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 437  8311 32 2A 81                             ld      (ScreenLoopJP+1),a
 438  8314 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 439  8317 32 2B 81                             ld      (ScreenLoopJP+2),a
 440  831A DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 441  831D 32 F6 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 442  8320 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 443  8323 32 99 80                             ld      (ScreenTransBlock+1),a          ; Set flag to block transitions as needed e.g. launch screen
 444  8326 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 445  8329 32 2D 81                             ld      (DoubleBufferCheck+1),a
 446  832C DD 7E 0C                             ld      a,(ix+12)
 447  832F 32 C2 80                             ld      (CallCursorRoutine+1),a
 448  8332 DD 7E 0D                             ld      a,(ix+13)
 449  8335 32 C3 80                             ld      (CallCursorRoutine+2),a
 450  8338
 451  8338 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 452  833B              ;----------------------------------------------------------------------------------------------------------------------------------
 453  833B 3A 78 92     ViewKeyTest:            ld      a,(ScreenIndex)
 454  833E 4F                                   ld      c,a
 455  833F 06 0A                                ld      b,ScreenMapLen                  ; For now until add screens are added
 456  8341 DD 21 EE 81                          ld      ix,ScreenKeyMap
 457  8345 DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 458  8348 FE 00                                cp      0
 459  834A 28 14                                jr      z,.NoDocCheck
 460  834C 57           .DocCheck:              ld      d,a
 461  834D 3A 81 92                             ld      a,(DockedFlag)
 462  8350 FE 00                                cp      0
 463  8352 28 07                                jr      z,.NotDockedCheck
 464  8354 7A           .DockedCheck:           ld      a,d
 465  8355 FE 01                                cp      1
 466  8357 20 27                                jr      nz,NotReadNextKey
 467  8359 18 05                                jr      .NoDocCheck
 468  835B 7A           .NotDockedCheck:        ld      a,d
 469  835C FE 02                                cp      2
 470  835E 20 20                                jr      nz,NotReadNextKey
 471  8360 DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 472  8363 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 473  8364 5F                                   ld      e,a
 474  8365 28 19                                jr      z,NotReadNextKey
 475  8367 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 476  836A 32 74 83                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 477  836D DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 478  8370 32 75 83                             ld      (ReadKeyAddr+2),a
 479  8373 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 480  8376 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 481  8377                                      IfAIsZeroGoto NotReadNextKey
 481  8377 FE 00       >				cp	0
 481  8379 CA 80 83    >				jp	z,NotReadNextKey
 482  837C 7B           .ValidScreenChange:     ld      a,e
 483  837D C3 EB 82                             jp      SetScreenAIX
 484  8380              ;--- CODE WILL NOT FALL TO HERE ---
 485  8380 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 486  8383 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 487  8385 10 BE                                djnz    ViewScanLoop
 488  8387 C9                                   ret
 489  8388
 490  8388 21 00 00     SetInitialShipPosition: ld      hl,$0000
 491  838B 22 0B C0                             ld      (UBnKxlo),hl
 492  838E 21 00 00                             ld      hl,$0000
 493  8391 22 0E C0                             ld      (UBnKylo),hl
 494  8394 21 04 0F                             ld      hl,$0F04
 495  8397 22 11 C0                             ld      (UBnKzlo),hl
 496  839A AF                                   xor     a
 497  839B 32 0D C0                             ld      (UBnKxsgn),a
 498  839E 32 10 C0                             ld      (UBnKysgn),a
 499  83A1 32 13 C0                             ld      (UBnKzsgn),a
 500  83A4              ;    call    Reset TODO
 501  83A4 CD AE CC                             call	InitialiseOrientation            ;#00;
 502  83A7 3E 08                                ld      a,8
 503  83A9 32 6B 92                             ld      (DELTA),a
 504  83AC 21 10 00                             ld      hl,16
 505  83AF 22 6C 92                             ld      (DELTA4),hl
 506  83B2 C9                                   ret
 507  83B3
 508  83B3 1E 10        Draw3Lines:             ld      e,16
 509  83B5 C5 D5                                push    bc,,de
 510  83B7                                      MMUSelectLayer2
 510  83B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 511  83BB CD 62 E2                             call    l2_draw_horz_line
 512  83BE D1 C1                                pop     bc,,de
 513  83C0 05                                   dec     b
 514  83C1 C5 D5                                push    bc,,de
 515  83C3 1E 14                                ld      e,20
 516  83C5                                      MMUSelectLayer2
 516  83C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 517  83C9 CD 62 E2                             call    l2_draw_horz_line
 518  83CC D1 C1                                pop     bc,,de
 519  83CE 05                                   dec     b
 520  83CF                                      MMUSelectLayer2
 520  83CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 521  83D3 CD 62 E2                             call    l2_draw_horz_line
 522  83D6 C9                                   ret
 523  83D7
 524  83D7 3A 6B 92     UpdateConsole:          ld      a,(DELTA)
 525  83DA FE 00                                cp      0                           ; don't draw if there is nothing to draw
 526  83DC 28 0C                                jr      z,.UpdateRoll
 527  83DE 01 D1 84                             ld      bc,SpeedoStart
 528  83E1 21 B8 95                             ld      hl,SpeedoMapping
 529  83E4 ED 31                                add     hl,a
 530  83E6 56                                   ld      d,(hl)
 531  83E7 CD B3 83                             call    Draw3Lines
 532  83EA 3A 2E 92     .UpdateRoll:            ld      a,(ALP1)
 533  83ED FE 00                                cp      0
 534  83EF 28 30                                jr      z,.UpdatePitch
 535  83F1 21 E0 8A                             ld      hl,RollMiddle
 536  83F4 3A 2F 92                             ld      a,(ALP2)
 537  83F7 FE 00                                cp      0
 538  83F9 28 18                                jr      z,.PosRoll
 539  83FB 16 00        .NegRoll:               ld      d,0
 540  83FD 3A 2E 92                             ld      a,(ALP1)
 541  8400 CB 27                                sla     a
 542  8402 5F                                   ld      e,a
 543  8403 B7                                   or      a
 544  8404 ED 52                                sbc     hl,de
 545  8406 44 4D                                ld      bc,hl
 546  8408 3E E1                                ld      a,DialMiddleXPos
 547  840A 91                                   sub     c
 548  840B 57                                   ld      d,a
 549  840C 1E FF                                ld      e,$FF
 550  840E CD B3 83                             call    Draw3Lines
 551  8411 18 0E                                jr      .UpdatePitch
 552  8413 01 E0 8A     .PosRoll:               ld      bc,RollMiddle
 553  8416 3A 2E 92                             ld      a,(ALP1)
 554  8419 CB 27                                sla     a
 555  841B 57                                   ld      d,a
 556  841C 1E FF                                ld      e,$FF
 557  841E CD B3 83                             call    Draw3Lines
 558  8421 3A 22 92     .UpdatePitch:           ld      a,(BET1)
 559  8424 FE 00                                cp      0
 560  8426 28 30                                jr      z,.DoneConsole
 561  8428 21 E0 92                             ld      hl,PitchMiddle
 562  842B 3A 23 92                             ld      a,(BET2)
 563  842E FE 00                                cp      0
 564  8430 28 18                                jr      z,.PosPtich
 565  8432 16 00        .NegPitch:              ld      d,0
 566  8434 3A 22 92                             ld      a,(BET1)
 567  8437 CB 27                                sla     a
 568  8439 5F                                   ld      e,a
 569  843A B7                                   or      a
 570  843B ED 52                                sbc     hl,de
 571  843D 44 4D                                ld      bc,hl
 572  843F 3E E1                                ld      a,DialMiddleXPos
 573  8441 91                                   sub     c
 574  8442 57                                   ld      d,a
 575  8443 1E FF                                ld      e,$FF
 576  8445 CD B3 83                             call    Draw3Lines
 577  8448 18 0E                                jr      .DoneConsole
 578  844A 01 E0 92     .PosPtich:              ld      bc,PitchMiddle
 579  844D 3A 22 92                             ld      a,(BET1)
 580  8450 CB 27                                sla     a
 581  8452 57                                   ld      d,a
 582  8453 1E FF                                ld      e,$FF
 583  8455 CD B3 83                             call    Draw3Lines
 584  8458 CD D4 84     .DoneConsole:           call    UpdateRadar
 585  845B C9                                   ret
 586  845C
 587  845C              ScannerX equ 128
 588  845C              ScannerY equ 171
 589  845C
 590  845C              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 591  845C ED 4B 12 C0  UpdateScannerShip:      ld      bc,(UBnKzhi)
 592  8460 79                                   ld      a,c
 593  8461 E6 C0                                and     $C0
 594  8463 C0                                   ret     nz
 595  8464 ED 5B 0C C0                          ld      de,(UBnKxhi)
 596  8468 7B                                   ld      a,e
 597  8469 E6 C0                                and     $C0
 598  846B C0                                   ret     nz
 599  846C 2A 0F C0                             ld      hl,(UbnKyhi)
 600  846F 7D                                   ld      a,l
 601  8470 E6 C0                                and     $C0
 602  8472 C0                                   ret     nz
 603  8473 3E 80                                ld      a,ScannerX
 604  8475                                      JumpOnBitSet d,7,ScannerNegX
 604  8475 CB 7A       >                        bit 	7,d
 604  8477 C2 7E 84    >                        jp      nz,ScannerNegX
 605  847A 83                                   add     a,e
 606  847B C3 7F 84                             jp      ScannerZCoord
 607  847E 93           ScannerNegX:            sub     e
 608  847F 5F           ScannerZCoord:          ld      e,a
 609  8480 CB 39                                srl     c
 610  8482 CB 39                                srl     c
 611  8484 3E AB                                ld      a,ScannerY
 612  8486                                      JumpOnBitSet b,7,ScannerNegZ
 612  8486 CB 78       >                        bit 	7,b
 612  8488 C2 8F 84    >                        jp      nz,ScannerNegZ
 613  848B 91                                   sub     c
 614  848C C3 90 84                             jp      ScannerYCoord
 615  848F 81           ScannerNegZ:            add     a,c
 616  8490 57           ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 617  8491                                      JumpOnBitSet h,7,ScannerStickDown
 617  8491 CB 7C       >                        bit 	7,h
 617  8493 C2 A1 84    >                        jp      nz,ScannerStickDown
 618  8496 95                                   sub     l                       ; a already holds actual Y
 619  8497                                      JumpIfAGTENusng 128,ScannerHeightDone
 619  8497 FE 80       >                        cp     128
 619  8499 D2 A9 84    >                        jp		nc,ScannerHeightDone
 620  849C 3E 80                                ld      a,128
 621  849E C3 A9 84                             jp      ScannerHeightDone
 622  84A1 85           ScannerStickDown:       add     a,l
 623  84A2                                      JumpIfAGTENusng 191,ScannerHeightDone
 623  84A2 FE BF       >                        cp     191
 623  84A4 D2 A9 84    >                        jp		nc,ScannerHeightDone
 624  84A7 3E BF                                ld      a,191
 625  84A9 4B           ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 626  84AA 42                                   ld      b,d
 627  84AB 57                                   ld      d,a
 628  84AC B8                                   cp      b
 629  84AD CA BD 84                             jp      z,Scanner0Height
 630  84B0 1E C2                                ld      e,194 ; Should be coloured based on status but this will do for now
 631  84B2 C5                                   push    bc
 632  84B3 D5                                   push    de
 633  84B4                                      MMUSelectLayer2
 633  84B4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 634  84B8 CD 0D E3                             call    l2_draw_vert_line_to
 635  84BB D1                                   pop     de
 636  84BC C1                                   pop     bc
 637  84BD 42           Scanner0Height:         ld      b,d
 638  84BE C5                                   push    bc
 639  84BF 3E FF                                ld      a,255
 640  84C1                                      MMUSelectLayer2
 640  84C1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 641  84C5 CD FF E0                             call    l2_plot_pixel
 642  84C8 C1                                   pop     bc
 643  84C9 0C                                   inc     c
 644  84CA 3E FF                                ld      a,255
 645  84CC                                      MMUSelectLayer2
 645  84CC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 646  84D0 CD FF E0                             call    l2_plot_pixel
 647  84D3 C9                                   ret
 648  84D4
 649  84D4              UpdateRadar:            MMUSelectUniverseN 0                          ; load up register into universe bank
 649  84D4 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 650  84D8 CD 5C 84                             call    UpdateScannerShip
 651  84DB C9                                   ret
 652  84DC
 653  84DC AF           SeedGalaxy0:            xor     a
 654  84DD                                      MMUSelectGalaxyA
 654  84DD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 655  84E0 DD 21 16 E0                          ld      ix,galaxy_data
 656  84E4 AF                                   xor		a
 657  84E5 32 74 92                             ld		(XSAV),a
 658  84E8 CD 58 96                             call    copy_galaxy_to_system
 659  84EB DD E5        SeedGalaxy0Loop:        push    ix
 660  84ED D1                                   pop     de
 661  84EE 21 5B 92                             ld      hl,SystemSeed
 662  84F1 CD 5E 96                             call    copy_seed
 663  84F4 DD E5                                push    ix
 664  84F6 E1                                   pop     hl
 665  84F7 ED 34 08 00                          add     hl,8
 666  84FB E5                                   push    hl
 667  84FC DD E1                                pop     ix
 668  84FE CD 93 96                             call    next_system_seed
 669  8501 3A 74 92                             ld		a,(XSAV)
 670  8504 3D                                   dec		a
 671  8505 FE 00                                cp		0
 672  8507 C8                                   ret		z
 673  8508 32 74 92                             ld		(XSAV),a
 674  850B 20 DE                                jr      nz,SeedGalaxy0Loop
 675  850D C9                                   ret
 676  850E
 677  850E
 678  850E
 679  850E
 680  850E                  include "./ModelRender/testdrawing.asm"
# file opened: ./ModelRender/testdrawing.asm
   1+ 850E
   2+ 850E              ; Test of render
   3+ 850E              ;  Generate a memory bank for a ship using univ_ship_data to create a block in bank 6
   4+ 850E              ;  need to clear page 70
   5+ 850E              ;  swap in to bank 7
   6+ 850E              ;  use UBnKxlo as INWK 0 (we will add an equ so that its moved over)
   7+ 850E              ;  x cobraMk3 data to map data
   8+ 850E              ;  Use ShipModelTable table indexed by cobraMk3 ship number (CobraTablePointer)
   9+ 850E              ;  Pull ship model table into bank 6
  10+ 850E              ;  use dma transfer to copy data from bank 6 to bank 7
  11+ 850E              ;
  12+ 850E              ScaleRotationMatrix197:
  13+ 850E 06 09        	ld		b,9
  14+ 8510 21 30 C0     	ld		hl,UBnkTransmatSidev
  15+ 8513              ScaleRotationLoop:
  16+ 8513 7E           	ld		a,(hl)
  17+ 8514 5F           	ld		e,a
  18+ 8515 23           	inc		hl                  ; move to hi byte
  19+ 8516 7E           	ld		a,(hl)
  20+ 8517 57           	ld		d,a
  21+ 8518 E6 80            and     SignOnly8Bit        ; strip out sign bit
  22+ 851A DD 6F        	ld		ixl,a				; retain for sign bit
  23+ 851C              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2
  23+ 851C CB 23       >			   sla e
  23+ 851E CB 12       >			   rl  d
  24+ 8520 7A               ld      a,d
  25+ 8521 0E C5        	ld		c,ConstNorm
  26+ 8523 7A           	ld		a,d					; a = D Hi* 2
  27+ 8524 C5           	push	bc
  28+ 8525 E5           	push	hl
  29+ 8526 CD 31 A1     	call	DIV16Amul256dCUNDOC	; result in BC
  30+ 8529 E1           	pop		hl
  31+ 852A 78           	ld		a,b
  32+ 852B DD B5            or      ixl                 ; bring back sign bit
  33+ 852D 77               ld      (hl),a
  34+ 852E 2B               dec     hl
  35+ 852F 71               ld      (hl),c
  36+ 8530 23               inc     hl
  37+ 8531 C1           	pop		bc
  38+ 8532 23               inc     hl                  ; no to next vertex value
  39+ 8533 10 DE        	djnz	ScaleRotationLoop
  40+ 8535 C9           	ret
  41+ 8536
  42+ 8536              ScaleXX16Matrix197:
  43+ 8536 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
  44+ 8538 0E C5        	ld		c,ConstNorm         ; c = 197
  45+ 853A 21 30 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  46+ 853D              ScaleXX16Loop:
  47+ 853D 7E           	ld		a,(hl)              ; set DE = matrix value
  48+ 853E 5F           	ld		e,a                 ;
  49+ 853F 23           	inc		hl                  ;
  50+ 8540 7E           	ld		a,(hl)              ;
  51+ 8541 57           	ld		d,a                 ;
  52+ 8542 E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  53+ 8544 DD 6F        	ld		ixl,a				; retain for sign bit
  54+ 8546              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  54+ 8546 CB 23       >			   sla e
  54+ 8548 CB 12       >			   rl  d
  55+ 854A 7A               ld      a,d                 ; a = high byte after x 2
  56+ 854B C5           	push	bc                  ; save BC  counter and constant 197
  57+ 854C E5           	push	hl                  ; save HL
  58+ 854D CD 31 A1     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  59+ 8550 E1           	pop		hl
  60+ 8551 2B               dec     hl                  ; move back to low byte
  61+ 8552 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  62+ 8553 23               inc     hl                  ; move back to high byte
  63+ 8554 7E               ld      a,(hl)
  64+ 8555 E6 80            and     $80
  65+ 8557 77               ld      (hl),a              ; write back just sign bit
  66+ 8558 C1           	pop		bc                  ; retrieve both counter and constant 197
  67+ 8559 23               inc     hl                  ; no to next vertex value
  68+ 855A 10 E1        	djnz	ScaleXX16Loop
  69+ 855C C9           	ret
  70+ 855D
  71+ 855D              GetXX18Scale:
  72+ 855D 3A 10 C3         ld      a,(QAddr)
  73+ 8560 DD 6F            ld      ixl,a                 ; save Scale in C
  74+ 8562 ED 4B 69 C0      ld      bc,(UBnkDrawCam0xLo)
  75+ 8566 ED 5B 6C C0      ld      de,(UBnkDrawCam0yLo)
  76+ 856A 2A 6F C0         ld      hl,(UBnkDrawCam0zLo)
  77+ 856D              ScalePos:
  78+ 856D 78               ld      a,b
  79+ 856E B2               or      d
  80+ 856F B4               or      h
  81+ 8570 CA 84 85         jp      z,ScalePosDone
  82+ 8573 DD 2C            inc     ixl
  83+ 8575                  ShiftBCRight1
  83+ 8575 CB 38       >			   srl b
  83+ 8577 CB 19       >			   rr  c
  84+ 8579                  ShiftDERight1
  84+ 8579 CB 3A       >			   srl d
  84+ 857B CB 1B       >			   rr  e
  85+ 857D                  ShiftHLRight1
  85+ 857D CB 3C       >			   srl h
  85+ 857F CB 1D       >			   rr  l
  86+ 8581 C3 6D 85         jp      ScalePos
  87+ 8584              ScalePosDone:
  88+ 8584 DD 7D            ld      a,ixl
  89+ 8586 32 76 92         ld      (XX17),a
  90+ 8589 C9               ret
  91+ 858A
  92+ 858A
  93+ 858A              ScaleOrientationXX16:
  94+ 858A              ScaleRotationMatrix:
  95+ 858A                  MODULE  ScaleRotationMatrix
  96+ 858A 06 09        	ld		b,9
  97+ 858C 21 48 C0     	ld		hl,UbnkTransInvRow0x0
  98+ 858F 3A 76 92     	ld		a,(XX17)
  99+ 8592 FE 00        	cp		0
 100+ 8594 C8           	ret		z									; no mulitplier then bail out early
 101+ 8595 DD 6F        	ld		ixl,a								; master copy of 2^multiplier
 102+ 8597              ScaleRotationLoop:
 103+ 8597 5E           	ld		e,(hl)
 104+ 8598 23           	inc		hl
 105+ 8599 56           	ld		d,(hl)
 106+ 859A 7A           	ld		a,d
 107+ 859B E6 80        	and		$80
 108+ 859D DD 67        	ld		ixh,a								; make a copy for sign purposes
 109+ 859F 7A           	ld		a,d									; we need it back now to strip sign
 110+ 85A0 E6 7F        	and		SignMask8Bit
 111+ 85A2 57           	ld		d,a
 112+ 85A3 DD 4D        	ld		c,ixl								; get master copy of multiplier
 113+ 85A5              ScaleLoop:
 114+ 85A5              	ShiftDELeft1
 114+ 85A5 CB 23       >			   sla e
 114+ 85A7 CB 12       >			   rl  d
 115+ 85A9 0D           	dec		c
 116+ 85AA 20 F9        	jr		nz,ScaleLoop						; loop until 0
 117+ 85AC              .NoMultiply:
 118+ 85AC 7A           	ld		a,d
 119+ 85AD DD B4        	or		ixh									; bring sign bit back in to a and
 120+ 85AF 77           	ld		(hl),a								; we don;t need to go though d reg as an optimisation
 121+ 85B0 2B           	dec		hl
 122+ 85B1 73           	ld		(hl),e								; written back DE now
 123+ 85B2 23           	inc		hl
 124+ 85B3 23           	inc		hl									; on to next byte now
 125+ 85B4 10 E1        	djnz	ScaleRotationLoop
 126+ 85B6 C9           	ret
 127+ 85B7                  ENDMODULE
 128+ 85B7
 129+ 85B7              ScaleNodeTo8Bit:								; TODO make signed
 130+ 85B7 ED 4B 79 C0  	ld			bc,(UBnkZScaled)
 131+ 85BB 2A 75 C0     	ld			hl,(UBnkXScaled)
 132+ 85BE ED 5B 77 C0  	ld			de,(UBnkYScaled)
 133+ 85C2              SetABSbc:
 134+ 85C2 78           	ld			a,b
 135+ 85C3 DD 67        	ld			ixh,a
 136+ 85C5 E6 7F        	and			SignMask8Bit
 137+ 85C7 47           	ld			b,a									; bc = ABS bc
 138+ 85C8              SetABShl:
 139+ 85C8 7C           	ld			a,h
 140+ 85C9 DD 6F        	ld			ixl,a
 141+ 85CB E6 7F        	and			SignMask8Bit
 142+ 85CD 67           	ld			h,a									; hl = ABS hl
 143+ 85CE              SetABSde:
 144+ 85CE 7A           	ld			a,d
 145+ 85CF FD 67        	ld			iyh,a
 146+ 85D1 E6 7F        	and			SignMask8Bit
 147+ 85D3 57           	ld			d,a									; de = ABS de
 148+ 85D4              ScaleNodeTo8BitLoop:
 149+ 85D4 78               ld          a,b		                            ; U	\ z hi
 150+ 85D5 B4           	or			h                                   ; XX15+1	\ x hi
 151+ 85D6 B2           	or			d                                   ; XX15+4	\ y hi
 152+ 85D7 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 153+ 85D9                  ShiftHLRight1
 153+ 85D9 CB 3C       >			   srl h
 153+ 85DB CB 1D       >			   rr  l
 154+ 85DD                  ShiftDERight1
 154+ 85DD CB 3A       >			   srl d
 154+ 85DF CB 1B       >			   rr  e
 155+ 85E1              	ShiftBCRight1
 155+ 85E1 CB 38       >			   srl b
 155+ 85E3 CB 19       >			   rr  c
 156+ 85E5 C3 D4 85         jp          ScaleNodeTo8BitLoop
 157+ 85E8              ScaleNodeDone:										; now we have scaled values we have to deal with sign
 158+ 85E8 DD 7C        	ld			a,ixh								; get sign bit and or with b
 159+ 85EA E6 80        	and			SignOnly8Bit
 160+ 85EC B0           	or			b
 161+ 85ED 47           	ld			b,a
 162+ 85EE              SignforHL:
 163+ 85EE DD 7D        	ld			a,ixl								; get sign bit and or with b
 164+ 85F0 E6 80        	and			SignOnly8Bit
 165+ 85F2 B4           	or			h
 166+ 85F3 67           	ld			h,a
 167+ 85F4              SignforDE:
 168+ 85F4 FD 7C        	ld			a,iyh								; get sign bit and or with b
 169+ 85F6 E6 80        	and			SignOnly8Bit
 170+ 85F8 B2           	or			d
 171+ 85F9 57           	ld			d,a
 172+ 85FA              SignsDoneSaveResult:
 173+ 85FA ED 43 79 C0  	ld			(UBnkZScaled),bc
 174+ 85FE 22 75 C0     	ld			(UBnkXScaled),hl
 175+ 8601 ED 53 77 C0  	ld			(UBnkYScaled),de
 176+ 8605 78           	ld			a,b
 177+ 8606 32 6E 92     	ld			(varU),a
 178+ 8609 79           	ld			a,c
 179+ 860A 32 90 92     	ld			(varT),a
 180+ 860D C9           	ret
 181+ 860E
 182+ 860E 00 00        varR16			DW	0
 183+ 8610
 184+ 8610              TestProjectNodeToScreen:
 185+ 8610 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 186+ 8614 79           	ld			a,c                                 ;  so no need for a negative check
 187+ 8615 32 6F 92     	ld			(varQ),a		                    ; VarQ = z
 188+ 8618 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
 189+ 861B CD 31 A1     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 190+ 861E              ;	ld			(varR16),bc							; store result in R for now TODO move to say D reg
 191+ 861E 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 192+ 8621                  JumpOnBitSet a,7,TestNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 192+ 8621 CB 7F       >                        bit 	7,a
 192+ 8623 C2 2E 86    >                        jp      nz,TestNegativeXPoint
 193+ 8626              TestPositiveXPoint:									; x was positive result
 194+ 8626              ;	ld			bc,(varR16)							; calculated X positision
 195+ 8626 2E 80            ld          l,ScreenCenterX						;
 196+ 8628 26 00            ld          h,0
 197+ 862A 09               add         hl,bc								; hl = Screen Centre + X
 198+ 862B C3 35 86         jp          TestStoreXPoint
 199+ 862E              TestNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 200+ 862E              ;	ld			bc,(varR16
 201+ 862E 2E 80            ld          l,ScreenCenterX
 202+ 8630 26 00            ld          h,0
 203+ 8632              ;	ld			c,a
 204+ 8632              ;    ld          b,0
 205+ 8632                  ClearCarryFlag
 205+ 8632 B7          >				or a
 206+ 8633 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 207+ 8635              TestStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 208+ 8635 EB               ex          de,hl
 209+ 8636 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 210+ 8639 FD 72 01         ld          (iy+1),d                            ; Update X Point
 211+ 863C              TestProcessYPoint:
 212+ 863C ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
 213+ 8640 79           	ld			a,c
 214+ 8641 32 6F 92     	ld			(varQ),a
 215+ 8644              ;    ldCopyByte  varT,varQ                          ; T =>  Q	\ zdist lo
 216+ 8644 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
 217+ 8647 CD 31 A1     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 218+ 864A              ;	ld			a,c
 219+ 864A              	;ld			(varR),a
 220+ 864A 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 221+ 864D                  JumpOnBitSet a,7,TestNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 221+ 864D CB 7F       >                        bit 	7,a
 221+ 864F C2 5A 86    >                        jp      nz,TestNegativeYPoint
 222+ 8652              TestPositiveYPoint:									; Y is positive so above the centre line
 223+ 8652              ;	ld			a,(varR)							; in fact this code is already 16 bit aware
 224+ 8652 2E 60            ld          l,ScreenCenterY
 225+ 8654              ;	ld			c,a									; TODO DEBUG just added for testing to force 8 bit
 226+ 8654              ;	ld			b,0
 227+ 8654                  ClearCarryFlag
 227+ 8654 B7          >				or a
 228+ 8655 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 229+ 8657 C3 5F 86         jp          TestStoreYPoint
 230+ 865A              TestNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 231+ 865A              ;	ld			a,(varR)
 232+ 865A 2E 60            ld          l,ScreenCenterY
 233+ 865C 26 00            ld          h,0
 234+ 865E 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 235+ 865F              TestStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 236+ 865F EB               ex          de,hl
 237+ 8660 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 238+ 8663 FD 72 03         ld          (iy+3),d                            ; Update Y Point
 239+ 8666 C9               ret
 240+ 8667
 241+ 8667                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1++8667 21 7B C0     CopyXX12ToXX15:         ld      hl,XX12
   2++866A 11 75 C0                             ld      de,XX15
   3++866D 01 06 00                             ld      bc,6
   4++8670 ED B0                                ldir
   5++8672 C9                                   ret
   6++8673
   7++8673 21 7B C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8++8676 11 81 C0                             ld      de,XX12Save
   9++8679 01 06 00                             ld      bc,6
  10++867C ED B0                                ldir
  11++867E C9                                   ret
  12++867F
  13++867F 21 81 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14++8682 11 7B C0                             ld      de,XX12
  15++8685 01 06 00                             ld      bc,6
  16++8688 ED B0                                ldir
  17++868A C9                                   ret
  18++868B
  19++868B 21 7B C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20++868E 11 87 C0                             ld      de,XX12Save2
  21++8691 01 06 00                             ld      bc,6
  22++8694 ED B0                                ldir
  23++8696 C9                                   ret
  24++8697
  25++8697 21 87 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26++869A 11 7B C0                             ld      de,XX12
  27++869D 01 06 00                             ld      bc,6
  28++86A0 ED B0                                ldir
  29++86A2 C9                                   ret
  30++86A3
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 242+ 86A3
 243+ 86A3                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1++86A3 21 75 C0     CopyXX15ToXX12:         ld		hl,XX15
   2++86A6 11 7B C0                             ld      de,XX12
   3++86A9 01 06 00                             ld      bc,6
   4++86AC ED B0                                ldir
   5++86AE C9                                   ret
   6++86AF
   7++86AF 21 75 C0     CopyXX15ToXX15Save:     ld		hl,XX15
   8++86B2 11 90 C0                             ld      de,XX15Save
   9++86B5 01 06 00                             ld      bc,6
  10++86B8 ED B0                                ldir
  11++86BA C9                                   ret
  12++86BB
  13++86BB 21 90 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  14++86BE 11 75 C0                             ld      de,XX15
  15++86C1 01 06 00                             ld      bc,6
  16++86C4 ED B0                                ldir
  17++86C6 C9                                   ret
  18++86C7
  19++86C7 21 75 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  20++86CA 11 98 C0                             ld      de,XX15Save2
  21++86CD 01 06 00                             ld      bc,6
  22++86D0 ED B0                                ldir
  23++86D2 C9                                   ret
  24++86D3
  25++86D3 21 98 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  26++86D6 11 75 C0                             ld      de,XX15
  27++86D9 01 06 00                             ld      bc,6
  28++86DC ED B0                                ldir
  29++86DE C9                                   ret
  30++86DF
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 244+ 86DF
 245+ 86DF 00 00        XX12PVarQ			DW 0
 246+ 86E1 00 00        XX12PVarR			DW 0
 247+ 86E3 00 00        XX12PVarS			DW 0
 248+ 86E5 00 00        XX12PVarResult1		DW 0
 249+ 86E7 00 00        XX12PVarResult2		DW 0
 250+ 86E9 00 00        XX12PVarResult3		DW 0
 251+ 86EB 00           XX12PVarSign2		DB 0
 252+ 86EC 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 253+ 86ED 00           XX12PVarSign3		DB 0
 254+ 86EE
 255+ 86EE              ; copy from wiring addhlde un iniv ship data
 256+ 86EE              XX12ProcessCalcHLPlusDESignBC:
 257+ 86EE              ; Combinations validated in ClacHLDEsignedBE.asm
 258+ 86EE              ; calcs HLB + DEC where B and C are signs
 259+ 86EE 78           		ld		a,b										; get HL sign byte
 260+ 86EF CB 7F        		bit		7,a										; is high bit set?
 261+ 86F1 20 12        		jr		nz,XX12AddHLNegative					; if it is then the HL is negative
 262+ 86F3              XX12AddHLPositive:										; At here HL is positive
 263+ 86F3 79           		ld		a,c										; so we check DE as well
 264+ 86F4 CB 7F        		bit		7,a
 265+ 86F6 20 03        		jr		nz,XX12HLPosDENeg						; here if HL is negative jump
 266+ 86F8              XX12HLPosDEPos:											; so here we have +HL + +DE
 267+ 86F8 19           		add		hl,de									; which is HL+DE
 268+ 86F9 AF           		xor		a										; and will always return a + sign
 269+ 86FA C9           		ret
 270+ 86FB              XX12HLPosDENeg:											; here we have +HL + -DE
 271+ 86FB              		ClearCarryFlag									;
 271+ 86FB B7          >				or a
 272+ 86FC ED 52        		sbc		hl,de									; so we do HL - DE
 273+ 86FE CB 7C        		bit		7,h
 274+ 8700 C2 19 87     		jp		nz,XX12Pt1FixNegResult					; if the result was negative we need a correction
 275+ 8703 AF           		xor		a										; else sign is +ve
 276+ 8704 C9           		ret
 277+ 8705              XX12AddHLNegative:										; here we enter with -HL
 278+ 8705 79           		ld		a,c
 279+ 8706 CB 7F        		bit		7,a
 280+ 8708 20 0B        		jr		nz,XX12HLNegDENeg						; and now do we have DE as negative
 281+ 870A              XX12HLNegDEPos:											; here we have -HL + +DE
 282+ 870A EB           		ex		de,hl									; so to simplify concept swap DE and HL
 283+ 870B              		ClearCarryFlag									; to make the calc
 283+ 870B B7          >				or a
 284+ 870C ED 52        		sbc		hl,de									; DE - HL
 285+ 870E CB 7C        		bit		7,h										; was the result negative
 286+ 8710 C2 19 87     		jp		nz,XX12Pt1FixNegResult					; if so deal with it
 287+ 8713 AF           		xor 	a										; else it is positive
 288+ 8714 C9           		ret
 289+ 8715              XX12HLNegDENeg:											; now we have -HL + -DE
 290+ 8715 19           		add		hl,de									; which we can translate to (HL + DE) * -1
 291+ 8716 3E 80        		ld		a,$80									; this sets the sign i.e. * -1
 292+ 8718 C9           		ret
 293+ 8719              XX12Pt1FixNegResult:	 								; the result of HLcalcDE was negative
 294+ 8719              		NegHL											; so we 2's compliment it back to an absolute value
 294+ 8719 AF          >                xor a
 294+ 871A 95          >                sub l
 294+ 871B 6F          >                ld l,a
 294+ 871C 9F          >                sbc a,a
 294+ 871D 94          >                sub h
 294+ 871E 67          >                ld h,a
 295+ 871F 3E 80        		ld		a,$80									; and set the sign to a negative
 296+ 8721 C9           		ret
 297+ 8722
 298+ 8722              ; We enter here with hl pointing at XX16 and bc = XX15 value
 299+ 8722              ; so xx12 = XX15 * XX16 row
 300+ 8722              XX12ProcessOneRow:
 301+ 8722              XX12CalcXCell:
 302+ 8722 ED 4B 75 C0          ld		bc,(UBnkXScaled)
 303+ 8726 5E           		ld		e,(hl)								    ; get orientation ZX
 304+ 8727 23           		inc		hl
 305+ 8728 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
 306+ 8729 7A           		ld		a,d
 307+ 872A A8                   xor     b
 308+ 872B E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
 309+ 872D DD 67        		ld		ixh,a								    ; orientation sign to ixh
 310+ 872F 78           		ld		a,b                                     ; now make bc abs bc
 311+ 8730 E6 7F        		and		SignMask8Bit
 312+ 8732 47           		ld		b,a                                     ; bc = abs(bc) now
 313+ 8733 E5           		push	hl
 314+ 8734 16 00                ld      d,0                                     ; d = value
 315+ 8736 60           		ld		h,b
 316+ 8737 69           		ld		l,c
 317+ 8738 CD F7 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 318+ 873B 22 E5 86     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
 319+ 873E DD 7C        		ld		a,ixh
 320+ 8740 32 EC 86     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
 321+ 8743 E1           		pop		hl
 322+ 8744              XX12CalcYCell:
 323+ 8744 ED 4B 77 C0          ld		bc,(UBnkYScaled)
 324+ 8748 23           		inc		hl
 325+ 8749 5E           		ld		e,(hl)							    	; get orientation ZX
 326+ 874A 23           		inc		hl
 327+ 874B 56           		ld		d,(hl)
 328+ 874C 7A           		ld		a,d
 329+ 874D A8                   xor     b
 330+ 874E E6 80        		and		SignOnly8Bit
 331+ 8750 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
 332+ 8752 78           		ld		a,b                                     ; now make bc abs bc
 333+ 8753 E6 7F        		and		SignMask8Bit
 334+ 8755 47           		ld		b,a                                     ; bc = abs(bc) now
 335+ 8756 E5           		push	hl
 336+ 8757 16 00                ld      d,0                                     ; d = value
 337+ 8759 60           		ld		h,b
 338+ 875A 69           		ld		l,c
 339+ 875B CD F7 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 340+ 875E 22 E7 86     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
 341+ 8761 DD 7C        		ld		a,ixh
 342+ 8763 32 EB 86     		ld		(XX12PVarSign2),a					    ; S = sign
 343+ 8766 E1           		pop		hl
 344+ 8767              XX12CalcZCell:
 345+ 8767 ED 4B 79 C0          ld		bc,(UBnkZScaled)
 346+ 876B 23           		inc		hl
 347+ 876C 5E           		ld		e,(hl)								    ; get orientation ZX
 348+ 876D 23           		inc		hl
 349+ 876E 56           		ld		d,(hl)
 350+ 876F 7A           		ld		a,d
 351+ 8770 A8                   xor     b
 352+ 8771 E6 80        		and		SignOnly8Bit
 353+ 8773 DD 67        		ld		ixh,a								    ; orientation sign to ixh
 354+ 8775 78           		ld		a,b                                     ; now make bc abs bc
 355+ 8776 E6 7F        		and		SignMask8Bit
 356+ 8778 47           		ld		b,a                                     ; bc = abs(bc) now
 357+ 8779 16 00                ld      d,0                                     ; d = value
 358+ 877B 60           		ld		h,b
 359+ 877C 69           		ld		l,c
 360+ 877D CD F7 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 361+ 8780 22 E9 86     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
 362+ 8783 DD 7C        		ld		a,ixh
 363+ 8785 32 ED 86     		ld		(XX12PVarSign3),a					    ; S = sign
 364+ 8788              XX12CalcCellResult:
 365+ 8788 2A E5 86     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
 366+ 878B ED 5B E7 86  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
 367+ 878F ED 4B EB 86  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
 368+ 8793              XX12MSBOnly:
 369+ 8793 6C           		ld		l,h									    ; now move results into lower byte so / 256
 370+ 8794 5A           		ld		e,d									    ; for both results
 371+ 8795 AF           		xor		a									    ;
 372+ 8796 67           		ld		h,a									    ;
 373+ 8797 57           		ld		d,a									    ; so set high byte to 0
 374+ 8798 CD 3B CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
 375+ 879B 47           		ld		b,a									    ; move sign into b ready for next calc
 376+ 879C 3A ED 86     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
 377+ 879F 4F           		ld		c,a									    ; goes into c to align with DE
 378+ 87A0 ED 5B E9 86  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
 379+ 87A4 5A           		ld		e,d                                     ; d = result /256
 380+ 87A5 16 00        		ld		d,0									    ; and only us high byte
 381+ 87A7 CD 3B CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
 382+ 87AA C9           		ret											    ; hl = result, a = sign
 383+ 87AB              								    ; hl = result, a = sign
 384+ 87AB
 385+ 87AB
 386+ 87AB
 387+ 87AB              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 388+ 87AB              ;...X cell
 389+ 87AB 21 48 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 390+ 87AE CD 22 87             call    XX12ProcessOneRow                   ; hl = result, a = sign
 391+ 87B1 47           		ld		b,a                                 ; b = sign
 392+ 87B2 7C           		ld		a,h                                 ; a = high byte
 393+ 87B3 B0           		or		b
 394+ 87B4 32 7C C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 395+ 87B7 7D           		ld		a,l                                 ; the result will be in the lower byte now
 396+ 87B8 32 7B C0             ld      (UBnkXX12xLo),a						; that is result done for
 397+ 87BB              ;...Y cell
 398+ 87BB 21 50 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 399+ 87BE CD 22 87             call    XX12ProcessOneRow
 400+ 87C1 47           		ld		b,a
 401+ 87C2 7C           		ld		a,h
 402+ 87C3              ;		ld		a,l
 403+ 87C3 B0           		or		b
 404+ 87C4 32 7E C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 405+ 87C7 7D           		ld		a,l                                 ; the result will be in the lower byte now
 406+ 87C8 32 7D C0             ld      (UBnkXX12yLo),a						; that is result done for
 407+ 87CB              ;...Z cell
 408+ 87CB 21 58 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 409+ 87CE CD 22 87             call    XX12ProcessOneRow
 410+ 87D1 47           		ld		b,a
 411+ 87D2 7C                   ld		a,h
 412+ 87D3              ;		ld		a,l
 413+ 87D3 B0           		or		b
 414+ 87D4 32 80 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 415+ 87D7 7D           		ld		a,l                                 ; the result will be in the lower byte now
 416+ 87D8 32 7F C0             ld      (UBnkXX12zLo),a						; that is result done for
 417+ 87DB C9                   ret
 418+ 87DC
 419+ 87DC              TransposeXX12ByShipToXX15:
 420+ 87DC 2A 7B C0             ld		hl,(UBnkXX12xLo)					; get X into HL
 421+ 87DF 7C           		ld		a,h			                        ; get XX12 Sign
 422+ 87E0 E6 80        		and		$80									; check sign bit on high byte
 423+ 87E2 47           		ld		b,a									; and put it in of 12xlo in b
 424+ 87E3                      ;110921 debugld      h,0
 425+ 87E3 7C                   ld      a,h
 426+ 87E4 E6 7F                and     $7F
 427+ 87E6 67                   ld      h,a
 428+ 87E7                      ;110921 debugld      h,0
 429+ 87E7 ED 5B 0B C0  		ld		de,(UBnKxlo)						;
 430+ 87EB 3A 0D C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
 431+ 87EE E6 80        		and		$80									; make sure we only have bit 7
 432+ 87F0 4F           		ld		c,a									; and put sign of unkxsgn c
 433+ 87F1 CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 434+ 87F4 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 435+ 87F5 67           		ld		h,a
 436+ 87F6 22 75 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
 437+ 87F9              ; ..................................
 438+ 87F9 2A 7D C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
 439+ 87FC 7C           		ld		a,h
 440+ 87FD E6 80        		and		$80
 441+ 87FF 47           		ld		b,a
 442+ 8800                      ;110921 debugld      h,0
 443+ 8800 7C                   ld      a,h
 444+ 8801 E6 7F                and     $7F
 445+ 8803 67                   ld      h,a
 446+ 8804                      ;110921 debugld      h,0
 447+ 8804 ED 5B 0E C0  		ld		de,(UBnKylo)
 448+ 8808 3A 10 C0     		ld		a,(UBnKysgn)
 449+ 880B E6 80        		and		$80									; make sure we only have bit 7
 450+ 880D 4F           		ld		c,a
 451+ 880E CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 452+ 8811 B4           		or		h									; combine sign in A with H
 453+ 8812 67           		ld		h,a
 454+ 8813 22 77 C0     		ld		(UBnkYScaled),hl
 455+ 8816              ; ..................................
 456+ 8816 2A 7F C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
 457+ 8819 7C           		ld		a,h
 458+ 881A E6 80        		and		$80
 459+ 881C 47           		ld		b,a
 460+ 881D                      ;110921 debugld      h,0
 461+ 881D 7C                   ld      a,h
 462+ 881E E6 7F                and     $7F
 463+ 8820 67                   ld      h,a
 464+ 8821                      ;110921 debugld      h,0
 465+ 8821 ED 5B 11 C0  		ld		de,(UBnKzlo)
 466+ 8825 3A 13 C0     		ld		a,(UBnKzsgn)
 467+ 8828 E6 80        		and		$80									; make sure we only have bit 7
 468+ 882A 4F           		ld		c,a
 469+ 882B CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 470+ 882E B4           		or		h									; combine sign in A with H
 471+ 882F 67           		ld		h,a
 472+ 8830 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 473+ 8832 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
 474+ 8834 E6 7F                and     $7F                                 ; a = value unsigned
 475+ 8836 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 476+ 8838 7D                   ld      a,l                                 ; get low byte now
 477+ 8839              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
 477+ 8839 FE 04       >                        cp      4
 477+ 883B DA 4A 88    >                        jp		c,ClampZto4
 478+ 883E              NoClampZto4:
 479+ 883E 22 79 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
 480+ 8841 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 481+ 8842 32 90 92             ld      (varT),a
 482+ 8845 7C           		ld		a,h
 483+ 8846 32 6E 92             ld      (varU),a
 484+ 8849 C9           		ret
 485+ 884A              ClampZto4:											; This is where we limit 4 to a minimum of 4
 486+ 884A 21 04 00     		ld		hl,4
 487+ 884D 22 79 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
 488+ 8850 7D           		ld		a,l
 489+ 8851 32 90 92             ld      (varT),a                            ;                                                                           ;;;
 490+ 8854 7C           		ld		a,h
 491+ 8855 32 6E 92             ld      (varU),a 						; compatibility for now
 492+ 8858 C9           		ret
 493+ 8859
 494+ 8859
 495+ 8859              RescaleXXValue:
 496+ 8859 5E           		ld		e,(hl)
 497+ 885A 23           		inc		hl
 498+ 885B 56           		ld		d,(hl)
 499+ 885C 7A           		ld		a,d
 500+ 885D E6 80        		and		$80
 501+ 885F 47           		ld		b,a
 502+ 8860 7A           		ld		a,d
 503+ 8861 E6 7F        		and		$7F
 504+ 8863 4F           		ld		c,a
 505+ 8864 7B           		ld		a,e
 506+ 8865 CB 7F        		bit		7,a
 507+ 8867 CA 6B 88     		jp		z,XX15XLT128
 508+ 886A              XX15XGT128:
 509+ 886A 0C           		inc		c
 510+ 886B              XX15XLT128:
 511+ 886B 59           		ld		e,c
 512+ 886C 50           		ld		d,b
 513+ 886D 72           		ld		(hl),d
 514+ 886E 2B           		dec		hl
 515+ 886F 73           		ld		(hl),e
 516+ 8870 23           		inc		hl
 517+ 8871 23           		inc		hl
 518+ 8872 C9           		ret
 519+ 8873
 520+ 8873
 521+ 8873              NegZeroBodge:
 522+ 8873 21 20 C0         ld     hl,UBnkrotmatNosevX
 523+ 8876 06 09            ld     b,9
 524+ 8878              NegBodgeLoop:
 525+ 8878 7E               ld      a,(hl)
 526+ 8879 23               inc     hl
 527+ 887A FE 00            cp      0
 528+ 887C 20 07            jr      nz,NegBodgeSkip1
 529+ 887E 7E               ld      a,(hl)
 530+ 887F FE 80            cp      $80
 531+ 8881 20 02            jr      nz,NegBodgeSkip1
 532+ 8883 AF               xor     a
 533+ 8884 77               ld      (hl),a
 534+ 8885              NegBodgeSkip1:
 535+ 8885 23               inc     hl
 536+ 8886 10 F0            djnz    NegBodgeLoop
 537+ 8888 C9               ret
 538+ 8889
 539+ 8889 B0           RollLoop: DB $B0
 540+ 888A
 541+ 888A              TestRender:
 542+ 888A              	;include "Tests/PlotTest2.asm"
 543+ 888A              ; Initialise banks is include in main initialise subrotines now
 544+ 888A              ; Prototype for .TITLE
 545+ 888A              TestLines:
 546+ 888A              ;include "Tests/LineHLtoDETest.asm"
 547+ 888A              TestCalcs:
 548+ 888A
 549+ 888A              ;include "Tests/CalcHLDEsignedBE.asm"
 550+ 888A
 551+ 888A
 552+ 888A 3E 5A        	ld	a,90
 553+ 888C 4F           	ld	c,a
 554+ 888D 16 6C        	ld	d,108
 555+ 888F CD 30 A5     	call AequAdivDmul96
 556+ 8892
 557+ 8892 3E 5A        	ld	a,90
 558+ 8894 06 6C        	ld	b,108
 559+ 8896 21 00 24     	ld	hl,$2400
 560+ 8899 22 70 92     	ld	(varR),hl
 561+ 889C CD B0 A7     	call	TidySub1
 562+ 889F
 563+ 889F              	;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 564+ 889F
 565+ 889F              TestTIDY:
 566+ 889F 21 00 00     	ld	hl,$0000
 567+ 88A2 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 568+ 88A5 21 00 8D     	ld	hl,$8D00
 569+ 88A8 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 570+ 88AB 21 00 E0     	ld	hl,$E000
 571+ 88AE 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 572+ 88B1
 573+ 88B1 21 00 00     	ld	hl,$0000
 574+ 88B4 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 575+ 88B7 21 00 B4     	ld	hl,$B400
 576+ 88BA 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 577+ 88BD 21 00 CF     	ld	hl,$CF00
 578+ 88C0 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 579+ 88C3
 580+ 88C3 21 00 28     	ld	hl,$2800
 581+ 88C6 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 582+ 88C9 21 00 00     	ld	hl,$0000
 583+ 88CC 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 584+ 88CF 21 00 00     	ld	hl,$0000
 585+ 88D2 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 586+ 88D5 CD CF 89     	call	TestPitchPos
 587+ 88D8              ;	call	TestRollPos
 588+ 88D8              ;	call	TIDY
 589+ 88D8
 590+ 88D8
 591+ 88D8 21 00 00     	ld	hl,$0
 592+ 88DB 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 593+ 88DE 21 CE 63     	ld	hl,$63CE
 594+ 88E1 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 595+ 88E4 21 C6 1D     	ld	hl,$1DC6
 596+ 88E7 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 597+ 88EA
 598+ 88EA 21 00 00     	ld	hl,$0
 599+ 88ED 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 600+ 88F0 21 7D 64     	ld	hl,$647D
 601+ 88F3 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 602+ 88F6 21 9B 23     	ld	hl,$239B
 603+ 88F9 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 604+ 88FC
 605+ 88FC 21 00 60     	ld	hl,$6000
 606+ 88FF 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 607+ 8902 21 00 00     	ld	hl,$0
 608+ 8905 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 609+ 8908 21 00 00     	ld	hl,$0
 610+ 890B 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 611+ 890E CD 00 A8     	call	TIDY
 612+ 8911
 613+ 8911
 614+ 8911              TestRollLoop:
 615+ 8911 3A 89 88         ld      a,(RollLoop)
 616+ 8914 3D               dec     a
 617+ 8915                  JumpIfALTNusng $40 , ItsRoll
 617+ 8915 FE 40       >                        cp      $40
 617+ 8917 DA 23 89    >                        jp		c,ItsRoll
 618+ 891A 32 89 88         ld      (RollLoop),a
 619+ 891D CD CF 89       	call	TestPitchPos
 620+ 8920 C3 39 89         jp     SkipTidyUp
 621+ 8923              ItsRoll;
 622+ 8923 FE 00            cp      0
 623+ 8925 20 0B            jr      nz,DontReset
 624+ 8927 3E 60            ld      a,$60
 625+ 8929 32 89 88         ld      (RollLoop),a
 626+ 892C CD 95 89         call    TestRollPos
 627+ 892F C3 39 89         jp      SkipTidyUp
 628+ 8932              DontReset
 629+ 8932 32 89 88         ld      (RollLoop),a
 630+ 8935 CD 95 89         call    TestRollPos
 631+ 8938 C9               ret
 632+ 8939
 633+ 8939              SkipTidyUp:
 634+ 8939
 635+ 8939
 636+ 8939
 637+ 8939 00 00        DebugPoint: DW 0
 638+ 893B
 639+ 893B              SubColor1:
 640+ 893B 7C           	ld		a,h
 641+ 893C D6 1F        	sub		$1F
 642+ 893E 67           	ld		h,a
 643+ 893F C9           	ret
 644+ 8940              SubColor2:
 645+ 8940 7C           	ld		a,h
 646+ 8941 D6 2F        	sub		$2F
 647+ 8943 67           	ld		h,a
 648+ 8944 C9           	ret
 649+ 8945
 650+ 8945                  ; V1 /512 => Part 1 = V1 - (1 /512) ; Oart 2 = V2 / 16 Answer = p1 + p2
 651+ 8945
 652+ 8945              SetupShip:
 653+ 8945 47               ld  b,a
 654+ 8946 CB 47            bit  0,a
 655+ 8948 28 0B            jr   z,ShipRoot
 656+ 894A FE 05            cp  5
 657+ 894C 28 14            jr  z,ShipUp
 658+ 894E FE 03            cp  3
 659+ 8950 28 23            jr  z,ShipSide
 659+ 8952
 660+ 8952 18 31            jr  ShipNose
 661+ 8954 C9               ret
 662+ 8955
 663+ 8955              ShipRoot:
 664+ 8955 21 00 00         ld hl,0
 665+ 8958 22 75 C0         ld (UBnkXScaled),hl
 666+ 895B 22 77 C0         ld (UBnkYScaled),hl
 667+ 895E 22 79 C0         ld (UBnkZScaled),hl
 668+ 8961 C9               ret
 669+ 8962
 670+ 8962              ShipUp:
 671+ 8962 21 00 00         ld hl,0
 672+ 8965 22 75 C0         ld (UBnkXScaled),hl
 673+ 8968 21 14 00         ld hl,20
 674+ 896B 22 77 C0         ld (UBnkYScaled),hl
 675+ 896E 21 00 00         ld hl,0
 676+ 8971 22 79 C0         ld (UBnkZScaled),hl
 677+ 8974 C9               ret
 678+ 8975
 679+ 8975              ShipSide:
 680+ 8975 21 14 00         ld hl,20
 681+ 8978 22 75 C0         ld (UBnkXScaled),hl
 682+ 897B 21 00 00         ld hl,0
 683+ 897E 22 77 C0         ld (UBnkYScaled),hl
 684+ 8981 22 79 C0         ld (UBnkZScaled),hl
 685+ 8984 C9               ret
 686+ 8985
 687+ 8985              ShipNose:
 688+ 8985 21 00 00         ld hl,0
 689+ 8988 22 75 C0         ld (UBnkXScaled),hl
 690+ 898B 22 77 C0         ld (UBnkYScaled),hl
 691+ 898E 21 14 00         ld hl,20
 692+ 8991 22 79 C0         ld (UBnkZScaled),hl
 693+ 8994 C9               ret
 694+ 8995
 695+ 8995              TestRollPos:
 696+ 8995 21 14 C0     	ld	hl,UBnkrotmatSidevX
 697+ 8998 22 9A 91     	ld	(varAxis1),hl
 698+ 899B 21 16 C0     	ld	hl,UBnkrotmatSidevY
 699+ 899E 22 9C 91     	ld	(varAxis2),hl
 700+ 89A1 AF           	xor	a
 701+ 89A2 32 86 92     	ld	(varRAT2),a
 702+ 89A5 CD 00 CC     	call MVS5XRotateXAxis
 703+ 89A8 21 1A C0     	ld	hl,UBnkrotmatRoofvX
 704+ 89AB 22 9A 91     	ld	(varAxis1),hl
 705+ 89AE 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 706+ 89B1 22 9C 91     	ld	(varAxis2),hl
 707+ 89B4 AF           	xor	a
 708+ 89B5 32 86 92     	ld	(varRAT2),a
 709+ 89B8 CD 00 CC     	call MVS5XRotateXAxis
 710+ 89BB 21 20 C0     	ld	hl,UBnkrotmatNosevX
 711+ 89BE 22 9A 91     	ld	(varAxis1),hl
 712+ 89C1 21 22 C0     	ld	hl,UBnkrotmatNosevY
 713+ 89C4 22 9C 91     	ld	(varAxis2),hl
 714+ 89C7 AF           	xor	a
 715+ 89C8 32 86 92     	ld	(varRAT2),a
 716+ 89CB CD 00 CC     	call MVS5XRotateXAxis
 717+ 89CE C9           	ret
 718+ 89CF
 719+ 89CF              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 720+ 89CF              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 721+ 89CF
 722+ 89CF              TestPitchPos:
 723+ 89CF 21 16 C0         ld	hl,UBnkrotmatSidevY
 724+ 89D2 22 9A 91         ld	(varAxis1),hl
 725+ 89D5 21 18 C0         ld	hl,UBnkrotmatSidevZ
 726+ 89D8 22 9C 91         ld	(varAxis2),hl
 727+ 89DB AF               xor	a
 728+ 89DC 32 86 92         ld	(varRAT2),a
 729+ 89DF CD 00 CC         call MVS5XRotateXAxis
 730+ 89E2              ; Do Y
 731+ 89E2 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 732+ 89E5 22 9A 91     	ld	(varAxis1),hl
 733+ 89E8 21 1E C0     	ld	hl,UBnkrotmatRoofvZ
 734+ 89EB 22 9C 91     	ld	(varAxis2),hl
 735+ 89EE AF           	xor	a
 736+ 89EF 32 86 92     	ld	(varRAT2),a
 737+ 89F2 CD 00 CC     	call MVS5XRotateXAxis
 738+ 89F5              ; Do Z
 739+ 89F5 21 22 C0     	ld	hl,UBnkrotmatNosevY
 740+ 89F8 22 9A 91     	ld	(varAxis1),hl
 741+ 89FB 21 24 C0     	ld	hl,UBnkrotmatNosevZ
 742+ 89FE 22 9C 91     	ld	(varAxis2),hl
 743+ 8A01 AF           	xor	a
 744+ 8A02 32 86 92     	ld	(varRAT2),a
 745+ 8A05 CD 00 CC     	call MVS5XRotateXAxis
 746+ 8A08 C9           	ret
 747+ 8A09
 748+ 8A09
 749+ 8A09              TestReplot:
 750+ 8A09 3A 06 C3         ld      a,(VertexCtX6Addr)                  ; get Hull byte#8 = number of vertices *6                                   ;;;
 751+ 8A0C 4F               ld      c,a									; XX20 also c = number of vertices * 6 (or XX20)
 752+ 8A0D 16 06            ld      d,6
 753+ 8A0F CD 61 A1         call    asm_div8                            ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 754+ 8A12 41               ld      b,c									; c = number of vertices
 755+ 8A13 FD 21 BF C0  	ld		iy,UBnkNodeArray
 756+ 8A17              RePointLoop:
 757+ 8A17 C5           	push	bc
 758+ 8A18 FD E5        	push	iy
 759+ 8A1A FD 7E 00     	ld		a,(iy+0)
 760+ 8A1D 4F           	ld		c,a
 761+ 8A1E FD 7E 02     	ld		a,(iy+2)
 762+ 8A21 47           	ld		b,a
 763+ 8A22 26 DF        	ld 		h,$DF
 764+ 8A24 FD 7E 01     	ld		a,(iy+1)
 765+ 8A27 57           	ld		d,a
 766+ 8A28 FD 7E 03     	ld		a,(iy+3)
 767+ 8A2B 5F           	ld		e,a
 768+ 8A2C B2           	or		d
 769+ 8A2D 28 0C        	jr		z,RePlotAsIs
 770+ 8A2F 7A           	ld 		a,d
 771+ 8A30 FE 00        	cp		0
 772+ 8A32 C4 3B 89     	call	nz,SubColor1
 773+ 8A35 7A           	ld 		a,d
 774+ 8A36 FE 00        	cp		0
 775+ 8A38 C4 3B 89     	call	nz,SubColor1
 776+ 8A3B              RePlotAsIs:
 777+ 8A3B 7C           	ld		a,h
 778+ 8A3C              	MMUSelectLayer2
 778+ 8A3C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 779+ 8A40 CD FF E0     	call    l2_plot_pixel
 780+ 8A43 E1           	pop		hl
 781+ 8A44 3E 04        	ld		a,4
 782+ 8A46 ED 31        	add		hl,a
 783+ 8A48 E5           	push	hl
 784+ 8A49 FD E1        	pop		iy								; this is very expensive need to optimise TODO
 785+ 8A4B C1           	pop		bc
 786+ 8A4C 10 C9        	djnz	RePointLoop
 787+ 8A4E C9           	ret
 788+ 8A4F
 789+ 8A4F                  ;ProcessFaceNormDebug:
 790+ 8A4F              ;    push    hl
 791+ 8A4F              ;    push    bc
 792+ 8A4F              ;    push    de
 793+ 8A4F              ;    push    ix
 794+ 8A4F              ;    push    iy
 795+ 8A4F              ;    ld      hl,UBnkHullNormals
 796+ 8A4F              ;    call    CopyFaceToXX12
 797+ 8A4F              ;    call    CopyXX15ToXX15Save
 798+ 8A4F              ;    call    CopyXX12ToXX15
 799+ 8A4F              ;    call    RotateXX15ByTransMatXX16
 800+ 8A4F              ;    call    CopyXX15ToXX12
 801+ 8A4F              ;    call    CopyXX15SaveToXX15
 802+ 8A4F              ;    call    DotproductXX12XX15
 803+ 8A4F              ;    ld      a,(varS)
 804+ 8A4F              ;    JumpOnBitClear a,7,ItsGreen
 805+ 8A4F              ;
 806+ 8A4F              ;    ld      a,193
 807+ 8A4F              ;    jp      DoPlotNorm
 808+ 8A4F              ;ItsGreen:
 809+ 8A4F              ;	ld		a,28
 810+ 8A4F              ;DoPlotNorm:
 811+ 8A4F              ;    pop     iy
 812+ 8A4F              ;    pop     ix
 813+ 8A4F              ;    pop     de
 814+ 8A4F              ;    pop     bc
 815+ 8A4F              ;    pop     hl
 816+ 8A4F              ;    ret
 817+ 8A4F              ;
 818+ 8A4F              ;ProcessNormalLine:
 819+ 8A4F              ;    push    hl
 820+ 8A4F              ;    push    bc
 821+ 8A4F              ;    push    de
 822+ 8A4F              ;    push    ix
 823+ 8A4F              ;    push    iy
 824+ 8A4F              ;;    call    CopyXX15ToXX15Save                                      ; save current XX15
 825+ 8A4F              ;    ld      hl,UBnkHullNormals
 826+ 8A4F              ;    call    CopyFaceToXX15                                          ;        Get Face data into XX12
 827+ 8A4F              ;  ;  call    CopyXX12ToXX15
 828+ 8A4F              ;  ; ld      a,(QAddr)
 829+ 8A4F              ;  ;  xor       a
 830+ 8A4F              ;  ;  ld      (XX17),a
 831+ 8A4F              ;  ;  call    ScaleNormal
 832+ 8A4F              ;	ld		a,(UBnkXScaledSign)
 833+ 8A4F              ;	call    XX12EquNodeDotOrientation
 834+ 8A4F              ;    ld      a,(UBnkXX12zSign)
 835+ 8A4F              ;    ld      (VarBackface),a
 836+ 8A4F              ;    call    CopyXX12ToXX12Save
 837+ 8A4F              ;	call    TransposeXX12ByShipToXX15
 838+ 8A4F              ;    call    ScaleNodeTo8Bit
 839+ 8A4F              ;    call    CopyXX15ToXX12
 840+ 8A4F              ;    call    CopyXX12ToXX12Save2
 841+ 8A4F              ;    call    CopyXX15SaveToXX15 ; Copy from previous
 842+ 8A4F              ;    call    CopyXX12SaveToXX12
 843+ 8A4F              ;    ld      a,1
 844+ 8A4F              ;    ld      (XX17),a
 845+ 8A4F              ;    call    ScaleNormal
 846+ 8A4F              ;   ; call    DotproductXX12XX15
 847+ 8A4F              ;    ld      a,(VarBackface)
 848+ 8A4F              ;    JumpOnBitClear a,7,PlotRed
 849+ 8A4F              ;    JumpIfALTNUsng 51,PlotRed
 850+ 8A4F              ;PlotGreen:
 851+ 8A4F              ;    ld      a,$7C
 852+ 8A4F              ;    jp      ReadyToDrawLine
 853+ 8A4F              ;PlotRed:
 854+ 8A4F              ;    ld      a,$E0
 855+ 8A4F              ;ReadyToDrawLine:
 856+ 8A4F              ;    ld      (line_gfx_colour),a
 857+ 8A4F              ;    call    CopyXX12Save2ToXX12
 858+ 8A4F              ;    call    CopyXX12ToXX15
 859+ 8A4F              ;    ld		iy,UBnkNodeArray2
 860+ 8A4F              ;    call    TestProjectNodeToScreen
 861+ 8A4F              ;    ld		a,(iy+0)
 862+ 8A4F              ;	ld		e,a
 863+ 8A4F              ;	ld		a,(iy+2)
 864+ 8A4F              ;	ld		d,a
 865+ 8A4F              ;    ld      hl,(DebugPoint)
 866+ 8A4F              ;	MMUSelectLayer2
 867+ 8A4F              ;
 868+ 8A4F              ;	call    LineHLtoDE
 869+ 8A4F              ;
 870+ 8A4F              ;Skipit:
 871+ 8A4F              ;    pop     iy
 872+ 8A4F              ;
 873+ 8A4F              ;    pop     ix
 874+ 8A4F              ;    pop     de
 875+ 8A4F              ;    pop     bc
 876+ 8A4F              ;    pop     hl
 877+ 8A4F              ;    ret
 878+ 8A4F
# file closed: ./ModelRender/testdrawing.asm
 681  8A4F                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8A4F              ;note: DIV16Amul256dCUNDOC as per
   2+ 8A4F              ;                                   BC = A0
   3+ 8A4F              ;                                   DE = 0C
   4+ 8A4F              ;                                   so BC = a * 256 / C
   5+ 8A4F
   6+ 8A4F              ; We can cheat here, Speed is always 0 or positive
   7+ 8A4F              ; z postion will always be positive if we can see it
   8+ 8A4F
   9+ 8A4F EB           InitStartAtHL:          ex      de,hl
  10+ 8A50 CD 1C 96                             call    doRND
  11+ 8A53 EB                                   ex      de,hl
  12+ 8A54 F6 08                                or      8
  13+ 8A56 77                                   ld      (hl),a
  14+ 8A57 E6 7F                                and     $7F
  15+ 8A59 23                                   inc     hl
  16+ 8A5A 77                                   ld      (hl),a
  17+ 8A5B EB                                   ex      de,hl
  18+ 8A5C CD 1C 96                             call    doRND
  19+ 8A5F EB                                   ex      de,hl
  20+ 8A60 0F                                   rrca
  21+ 8A61 E6 80                                and     $80
  22+ 8A63 B6                                   or      (hl)
  23+ 8A64 77                                   ld      (hl),a
  24+ 8A65 23                                   inc     hl
  25+ 8A66 EB                                   ex      de,hl
  26+ 8A67 CD 1C 96                             call    doRND
  27+ 8A6A EB                                   ex      de,hl
  28+ 8A6B F6 04                                or      4
  29+ 8A6D 77                                   ld      (hl),a
  30+ 8A6E 23                                   inc     hl
  31+ 8A6F E6 7F                                and     $7F
  32+ 8A71 77                                   ld      (hl),a
  33+ 8A72 EB                                   ex      de,hl
  34+ 8A73 CD 1C 96                             call    doRND
  35+ 8A76 EB                                   ex      de,hl
  36+ 8A77 0F                                   rrca
  37+ 8A78 E6 80                                and     $80
  38+ 8A7A B6                                   or      (hl)
  39+ 8A7B 77                                   ld      (hl),a
  40+ 8A7C 23                                   inc     hl
  41+ 8A7D EB                                   ex      de,hl
  42+ 8A7E CD 1C 96                             call    doRND
  43+ 8A81 EB                                   ex      de,hl
  44+ 8A82 F6 90                                or      144
  45+ 8A84 77                                   ld      (hl),a
  46+ 8A85 23                                   inc     hl
  47+ 8A86 F6 70                                or      %01110000
  48+ 8A88 E6 7F                                and     $7f     ; bodge
  49+ 8A8A 77                                   ld      (hl),a
  50+ 8A8B 23                                   inc     hl
  51+ 8A8C C9                                   ret
  52+ 8A8D
  53+ 8A8D              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8A8D 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8A8E E6 80                                and     SignOnly8Bit
  56+ 8A90 47                                   ld      b,a                         ;save sign bit in b
  57+ 8A91 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8A92                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8A92 FA C0 8A    >                        jp		m, .SUBHLDEOppSGN
  59+ 8A95 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8A96 B2                                   or      d
  61+ 8A97                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8A97 FA A1 8A    >                        jp		m, .SUBHLDESameNeg
  62+ 8A9A B7                                   or      a
  63+ 8A9B ED 52                                sbc     hl,de
  64+ 8A9D                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8A9D FA B4 8A    >                        jp		m, .SUBHLDESameOvrFlw
  65+ 8AA0 C9                                   ret
  66+ 8AA1 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8AA2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8AA4 67                                   ld      h,a
  69+ 8AA5 7A                                   ld      a,d
  70+ 8AA6 E6 7F                                and     SignMask8Bit
  71+ 8AA8 57                                   ld      d,a
  72+ 8AA9 B7                                   or      a
  73+ 8AAA ED 52                                sbc     hl,de
  74+ 8AAC                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8AAC FA B4 8A    >                        jp		m, .SUBHLDESameOvrFlw
  75+ 8AAF 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8AB0 F6 80                                or      SignOnly8Bit
  77+ 8AB2 67                                   ld      h,a
  78+ 8AB3 C9                                   ret
  79+ 8AB4              .SUBHLDESameOvrFlw:     NegHL
  79+ 8AB4 AF          >                xor a
  79+ 8AB5 95          >                sub l
  79+ 8AB6 6F          >                ld l,a
  79+ 8AB7 9F          >                sbc a,a
  79+ 8AB8 94          >                sub h
  79+ 8AB9 67          >                ld h,a
  80+ 8ABA 78                                   ld      a,b
  81+ 8ABB EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8ABD B4                                   or      h
  83+ 8ABE 67                                   ld      h,a                         ; recover sign
  84+ 8ABF C9                                   ret
  85+ 8AC0 B7           .SUBHLDEOppSGN:         or      a
  86+ 8AC1 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8AC2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8AC4 67                                   ld      h,a
  89+ 8AC5 7A                                   ld      a,d
  90+ 8AC6 E6 7F                                and     SignMask8Bit
  91+ 8AC8 57                                   ld      d,a
  92+ 8AC9 19                                   add     hl,de
  93+ 8ACA 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8ACB B4                                   or      h
  95+ 8ACC 67                                   ld      h,a                         ; set the previou sign value
  96+ 8ACD C9                                   ret
  97+ 8ACE
  98+ 8ACE 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8ACF E6 80                                and     SignOnly8Bit
 100+ 8AD1 47                                   ld      b,a                         ;save sign bit in b
 101+ 8AD2 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8AD3                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8AD3 FA EB 8A    >                        jp		m, .ADDHLDEOppSGN
 103+ 8AD6 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8AD7 B2                                   or      d
 105+ 8AD8                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8AD8 FA DD 8A    >                        jp		m, .ADDHLDESameNeg
 106+ 8ADB 19                                   add     hl,de
 107+ 8ADC C9                                   ret
 108+ 8ADD 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8ADE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8AE0 67                                   ld      h,a
 111+ 8AE1 7A                                   ld      a,d
 112+ 8AE2 E6 7F                                and     SignMask8Bit
 113+ 8AE4 57                                   ld      d,a
 114+ 8AE5 19                                   add     hl,de
 115+ 8AE6 3E 80                                ld      a,SignOnly8Bit
 116+ 8AE8 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8AE9 67                                   ld      h,a
 118+ 8AEA C9                                   ret
 119+ 8AEB 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8AEC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8AEE 67                                   ld      h,a
 122+ 8AEF 7A                                   ld      a,d
 123+ 8AF0 E6 7F                                and     SignMask8Bit
 124+ 8AF2 57                                   ld      d,a
 125+ 8AF3 B7                                   or      a
 126+ 8AF4 ED 52                                sbc     hl,de
 127+ 8AF6 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8AF8 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8AF9 B4                                   or      h
 130+ 8AFA 67                                   ld      h,a                         ; set the previou sign value
 131+ 8AFB C9                                   ret
 132+ 8AFC              .ADDHLDEOppInvert:      NegHL
 132+ 8AFC AF          >                xor a
 132+ 8AFD 95          >                sub l
 132+ 8AFE 6F          >                ld l,a
 132+ 8AFF 9F          >                sbc a,a
 132+ 8B00 94          >                sub h
 132+ 8B01 67          >                ld h,a
 133+ 8B02 78                                   ld      a,b
 134+ 8B03 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8B05 B4                                   or      h
 136+ 8B06 67                                   ld      h,a                         ; recover sign
 137+ 8B07 C9                                   ret
 138+ 8B08              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8B08 06 0B        InitialiseStars:        ld      b,$0B
 140+ 8B0A 78                                   ld      a,b
 141+ 8B0B 32 6D 93                             ld      (NubmerOfStarsNOSTM),a
 142+ 8B0E 21 BA 94                             ld      hl,varDust
 143+ 8B11 CD 4F 8A     InitStarsLoop:          call    InitStartAtHL
 144+ 8B14 10 FB                                djnz    InitStarsLoop
 145+ 8B16 C9                                   ret
 146+ 8B17              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8B17              StarsForward:          ; break
 148+ 8B17 3A 6D 93                             ld      a,(NubmerOfStarsNOSTM)
 149+ 8B1A 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8B1B FD 21 BA 94                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8B1F C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8B20 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8B23 5F                                   ld      e,a
 154+ 8B24 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8B26 3A 6B 92                             ld      a,(DELTA)
 156+ 8B29 47                                   ld      b,a
 157+ 8B2A 0E 00                                ld      c,0                                 ; bc = delta * 256
 158+ 8B2C CD A5 A1                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 159+ 8B2F                                      ShiftHLRight1
 159+ 8B2F CB 3C       >			   srl h
 159+ 8B31 CB 1D       >			   rr  l
 160+ 8B33                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 160+ 8B33 CB 3C       >			   srl h
 160+ 8B35 CB 1D       >			   rr  l
 161+ 8B37 7D                                   ld      a,l                                 ;
 162+ 8B38 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 163+ 8B3A DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 164+ 8B3C FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 164+ 8B40 66 05
 165+ 8B42 ED 5B 6C 92                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 166+ 8B46 CD 8D 8A                             call    StarsSUBHLDESigned
 167+ 8B49                                      JumpOnBitSet h,7,ResetStar
 167+ 8B49 CB 7C       >                        bit 	7,h
 167+ 8B4B C2 A0 8C    >                        jp      nz,ResetStar
 168+ 8B4E FD 75 04 FD                          ld      (iy+4),hl
 168+ 8B52 74 05
 169+ 8B54 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 169+ 8B58 66 01
 170+ 8B5A 7C                                   ld      a,h                                 ;
 171+ 8B5B E6 7F                                and     $7F                                 ;
 172+ 8B5D 57                                   ld      d,a                                 ; d = abs(x hi)
 173+ 8B5E DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 174+ 8B60 ED 30                                mul                                         ; de =  abs(x hi) * Q
 175+ 8B62 7C                                   ld      a,h                                 ;
 176+ 8B63 E6 80                                and     $80                                 ;
 177+ 8B65 B2                                   or      d                                   ; set sign bit in d
 178+ 8B66 57                                   ld      d,a                                 ;
 179+ 8B67 CD CE 8A                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 180+ 8B6A 7C                                   ld      a,h
 181+ 8B6B E6 7F                                and     $7F
 182+ 8B6D                                      JumpIfAGTENusng $70, ResetStar
 182+ 8B6D FE 70       >                        cp     $70
 182+ 8B6F D2 A0 8C    >                        jp		nc,ResetStar
 183+ 8B72 FD 75 00 FD                          ld      (iy+0),hl                           ;
 183+ 8B76 74 01
 184+ 8B78 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 184+ 8B7C 66 03
 185+ 8B7E 7C                                   ld      a,h                                 ;
 186+ 8B7F E6 7F                                and     $7F                                 ;
 187+ 8B81 57                                   ld      d,a                                 ; d = abs(y hi)
 188+ 8B82 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 189+ 8B84 ED 30                                mul                                         ; de =  abs(y hi) * Q
 190+ 8B86 7C                                   ld      a,h                                 ;
 191+ 8B87 E6 80                                and     $80                                 ;
 192+ 8B89 B2                                   or      d                                   ; set sign bit in d
 193+ 8B8A 57                                   ld      d,a                                 ;
 194+ 8B8B CD CE 8A                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 195+ 8B8E 7C                                   ld      a,h
 196+ 8B8F E6 7F                                and     $7F
 197+ 8B91                                      JumpIfAGTENusng $60, ResetStar
 197+ 8B91 FE 60       >                        cp     $60
 197+ 8B93 D2 A0 8C    >                        jp		nc,ResetStar
 198+ 8B96 7C                                   ld      a,h
 199+ 8B97 E6 80                                and     $80
 200+ 8B99 20 06                                jr      nz,.NoSecondCheck
 201+ 8B9B 7C                                   ld      a,h
 202+ 8B9C                                      JumpIfAGTENusng $20, ResetStar
 202+ 8B9C FE 20       >                        cp     $20
 202+ 8B9E D2 A0 8C    >                        jp		nc,ResetStar
 203+ 8BA1 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 203+ 8BA5 74 03
 204+ 8BA7              ; Now roll
 205+ 8BA7              ;  6. x = x - alpha * y / 256
 206+ 8BA7 2A 2E 92     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 207+ 8BAA 7D                                   ld      a,l
 208+ 8BAB FE 00                                cp      0
 209+ 8BAD 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 210+ 8BAF                                      ;break
 211+ 8BAF                                      ;ld      a,$80
 212+ 8BAF                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 213+ 8BAF E5                                   push    hl
 214+ 8BB0 7C                                   ld      a,h
 215+ 8BB1 E6 80                                and     $80
 216+ 8BB3 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 217+ 8BB4 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 218+ 8BB5 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 219+ 8BB8 5F                                   ld      e,a
 220+ 8BB9 E6 80                                and     $80
 221+ 8BBB 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 222+ 8BBC 7B           .rxEEquABSignX:         ld      a,e
 223+ 8BBD E6 7F                                and     $7F
 224+ 8BBF 5F                                   ld      e,a                                 ; save abs x hi in e
 225+ 8BC0 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 226+ 8BC2 79                                   ld      a,c
 227+ 8BC3 A8                                   xor     b                                   ; handle muliple sign bits
 228+ 8BC4 B2                                   or      d
 229+ 8BC5 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 230+ 8BC6 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 230+ 8BCA 66 01
 231+ 8BCC CD 8D 8A                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 232+ 8BCF FD 75 00 FD                          ld      (iy+0),hl
 232+ 8BD3 74 01
 233+ 8BD5              ;  5. y = y + alpha * x / 256
 234+ 8BD5              .YRoll:                 ;break
 235+ 8BD5 E1                                   pop     hl                                  ; h = sign, l = magnitude
 236+ 8BD6 7C                                   ld      a,h
 237+ 8BD7 E6 80                                and     $80
 238+ 8BD9 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 239+ 8BDA 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 240+ 8BDB FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 241+ 8BDE 5F                                   ld      e,a
 242+ 8BDF E6 80                                and     $80
 243+ 8BE1 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 244+ 8BE2 7B           .ryEEquABSignX:         ld      a,e
 245+ 8BE3 E6 7F                                and     $7F
 246+ 8BE5 5F                                   ld      e,a                                 ; save abs x hi in e
 247+ 8BE6 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 248+ 8BE8 79                                   ld      a,c
 249+ 8BE9 A8                                   xor     b                                   ; handle muliple sign bits
 250+ 8BEA B2                                   or      d
 251+ 8BEB 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 252+ 8BEC FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 252+ 8BF0 66 03
 253+ 8BF2 CD CE 8A                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 254+ 8BF5 FD 75 02 FD                          ld      (iy+2),hl
 254+ 8BF9 74 03
 255+ 8BFB 3A 22 92     .NoRoll:                ld      a,(BET1)
 256+ 8BFE FE 00                                cp      0
 257+ 8C00 28 22                                jr      z,.NoPitch
 258+ 8C02              ;  8. y = y - beta * 256
 259+ 8C02 57           .YPitch:                ld      d,a                                 ; d = BET1
 260+ 8C03 FD 7E 02                             ld      a,(iy+2)
 261+ 8C06 5F                                   ld      e,a                                 ; e = Y HI
 262+ 8C07 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 263+ 8C09 5F                                   ld      e,a
 264+ 8C0A ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 265+ 8C0C                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 265+ 8C0C CB 23       >			   sla e
 265+ 8C0E CB 12       >			   rl  d
 266+ 8C10 3A 24 92                             ld      a,(BET2FLIP)                        ; get inverted Sign
 267+ 8C13 B2                                   or      d
 268+ 8C14 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 269+ 8C15 FD 6E 02 FD                          ld      hl,(iy+2)
 269+ 8C19 66 03
 270+ 8C1B CD CE 8A                             call    StarsADDHLDESigned
 271+ 8C1E FD 75 02 FD                          ld      (iy+2),hl
 271+ 8C22 74 03
 272+ 8C24              ; now work out screen pos
 273+ 8C24              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 274+ 8C24              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 275+ 8C24              ;        pop     de
 276+ 8C24               ;       call    ProjectStarXToScreen
 277+ 8C24                                      ;pop     de
 278+ 8C24              .NoPitch:
 279+ 8C24 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 280+ 8C27 6F                                   ld      l,a
 281+ 8C28 E6 7F                                and     $7F
 282+ 8C2A                                      JumpOnBitSet l,7,StarNegXPt
 282+ 8C2A CB 7D       >                        bit 	7,l
 282+ 8C2C C2 35 8C    >                        jp      nz,StarNegXPt
 283+ 8C2F C6 80                                add     a,$80
 284+ 8C31 4F                                   ld      c,a
 285+ 8C32 C3 3A 8C                             jp      StarDoneX
 286+ 8C35 47           StarNegXPt:             ld      b,a
 287+ 8C36 3E 80                                ld      a,$80
 288+ 8C38 90                                   sub     b
 289+ 8C39 4F                                   ld      c,a
 290+ 8C3A FD 7E 03     StarDoneX:              ld      a,(iy+3)
 291+ 8C3D 6F                                   ld      l,a
 292+ 8C3E E6 7F                                and     $7F
 293+ 8C40                                      JumpOnBitSet l,7,StarNegYPt
 293+ 8C40 CB 7D       >                        bit 	7,l
 293+ 8C42 C2 4B 8C    >                        jp      nz,StarNegYPt
 294+ 8C45 C6 60                                add     a,$60
 295+ 8C47 47                                   ld      b,a
 296+ 8C48 C3 50 8C                             jp      StarDoneY
 297+ 8C4B 47           StarNegYPt:             ld      b,a
 298+ 8C4C 3E 60                                ld      a,$60
 299+ 8C4E 90                                   sub     b
 300+ 8C4F 47                                   ld      b,a
 301+ 8C50 3E FC        StarDoneY:              ld      a,$FC
 302+ 8C52 C5                                   push    bc
 303+ 8C53              .DrawStar:              MMUSelectLayer2
 303+ 8C53 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ 8C57 CD FF E0                             call    l2_plot_pixel
 305+ 8C5A FD 7E 05                             ld      a,(iy+5)
 306+ 8C5D C1                                   pop    bc
 307+ 8C5E                                      JumpIfAGTENusng $60,EndofStarsLoop
 307+ 8C5E FE 60       >                        cp     $60
 307+ 8C60 D2 90 8C    >                        jp		nc,EndofStarsLoop
 308+ 8C63 3E D8                                ld      a,$D8
 309+ 8C65 0C                                   inc     c
 310+ 8C66 C5                                   push    bc
 311+ 8C67                                      MMUSelectLayer2
 311+ 8C67 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 312+ 8C6B CD FF E0                             call    l2_plot_pixel
 313+ 8C6E FD 7E 05                             ld      a,(iy+5)
 314+ 8C71 C1                                   pop    bc
 315+ 8C72                                      JumpIfAGTENusng $37,EndofStarsLoop
 315+ 8C72 FE 37       >                        cp     $37
 315+ 8C74 D2 90 8C    >                        jp		nc,EndofStarsLoop
 316+ 8C77 3E B4                                ld      a,$B4
 317+ 8C79 04                                   inc     b
 318+ 8C7A C5                                   push    bc
 319+ 8C7B                                      MMUSelectLayer2
 319+ 8C7B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 320+ 8C7F CD FF E0                             call    l2_plot_pixel
 321+ 8C82 FD 7E 05                             ld      a,(iy+5)
 322+ 8C85 C1                                   pop    bc
 323+ 8C86 3E B4                                ld      a,$B4
 324+ 8C88 0D                                   dec     c
 325+ 8C89                                      MMUSelectLayer2
 325+ 8C89 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ 8C8D CD FF E0                             call    l2_plot_pixel
 327+ 8C90 C1           EndofStarsLoop:         pop     bc                                      ;  0
 328+ 8C91 FD E5                                push    iy                                      ; +1
 329+ 8C93 E1                                   pop     hl                                      ;  0
 330+ 8C94 ED 34 06 00                          add     hl,6
 331+ 8C98 E5           NextStarLoop2:          push    hl                                      ; +1
 332+ 8C99 FD E1                                pop     iy                                      ;  0
 333+ 8C9B 05                                   dec     b
 334+ 8C9C C2 1F 8B                             jp      nz,StarProcessLoop
 335+ 8C9F C9                                   ret
 336+ 8CA0              ResetStar:              ;break
 337+ 8CA0                                      ;pop     de
 338+ 8CA0 C1                                   pop     bc                                      ; 0
 339+ 8CA1 3A 6D 93                             ld      a,(NubmerOfStarsNOSTM)
 340+ 8CA4 90                                   sub     b
 341+ 8CA5 57                                   ld      d,a
 342+ 8CA6 1E 06                                ld      e,6
 343+ 8CA8 ED 30                                mul
 344+ 8CAA 21 BA 94                             ld      hl,varDust
 345+ 8CAD 19                                   add     hl,de
 346+ 8CAE CD 4F 8A                             call    InitStartAtHL
 347+ 8CB1 C3 98 8C                             jp      NextStarLoop2
 348+ 8CB4              ;----------------------------------------------------------------------------------------------------------------------------------
 349+ 8CB4 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 350+ 8CB7 FD 7E 01                             ld      a,(iy+1)
 351+ 8CBA 6F                                   ld      l,a
 352+ 8CBB E6 7F                                and     $7F
 353+ 8CBD 47                                   ld      b,a
 354+ 8CBE CD 48 A1                             call    DIV16BCDivDEUNDOC
 355+ 8CC1 7D                                   ld      a,l
 356+ 8CC2                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 356+ 8CC2 CB 7F       >                        bit 	7,a
 356+ 8CC4 C2 CF 8C    >                        jp      nz,StarXNegativePoint
 357+ 8CC7              ;StarXPositivePoint:									; x was positive result
 358+ 8CC7 2E 80                                ld          l,ScreenCenterX						;
 359+ 8CC9 26 00                                ld          h,0
 360+ 8CCB 09                                   add         hl,bc								; hl = Screen Centre + X
 361+ 8CCC C3 D6 8C                             jp          StarStoreXPoint
 362+ 8CCF              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 363+ 8CCF 2E 80                                ld          l,ScreenCenterX
 364+ 8CD1 26 00                                ld          h,0
 365+ 8CD3                                      ClearCarryFlag
 365+ 8CD3 B7          >				or a
 366+ 8CD4 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 367+ 8CD6              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 368+ 8CD6 7D                                   ld          a,l
 369+ 8CD7 32 4A 95                             ld          (varStarX),a
 370+ 8CDA C9                                   ret
 371+ 8CDB
 372+ 8CDB FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 373+ 8CDE FD 7E 03                             ld          a,(iy+3)
 374+ 8CE1 6F                                   ld          l,a
 375+ 8CE2 E6 7F                                and         $7F
 376+ 8CE4 47                                   ld          b,a
 377+ 8CE5 CD 48 A1                             call        DIV16BCDivDEUNDOC
 378+ 8CE8 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 379+ 8CE9                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 379+ 8CE9 CB 7F       >                        bit 	7,a
 379+ 8CEB C2 F6 8C    >                        jp      nz,StarNegativeYPoint
 380+ 8CEE                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 381+ 8CEE 2E 60                               ld          l,ScreenCenterY
 382+ 8CF0                                      ClearCarryFlag
 382+ 8CF0 B7          >				or a
 383+ 8CF1 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 384+ 8CF3 C3 FB 8C                             jp          StarStoreYPoint
 385+ 8CF6              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 386+ 8CF6 2E 60                                ld          l,ScreenCenterY
 387+ 8CF8 26 00                                ld          h,0
 388+ 8CFA 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 389+ 8CFB              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 390+ 8CFB 7D                                   ld          a,l
 391+ 8CFC 32 4B 95                             ld          (varStarY),a
 392+ 8CFF C9                                   ret
 393+ 8D00
 394+ 8D00
# file closed: ./Universe/StarRoutines.asm
 682  8D00              ;    include "Universe/move_object-MVEIT.asm"
 683  8D00                  include "./ModelRender/draw_object.asm"
# file opened: ./ModelRender/draw_object.asm
   1+ 8D00              JumpIfObjectIsPlanet:   MACRO target
   2+ 8D00 ~                                    ld a,(UbnkHullCopy)
   3+ 8D00 ~                                    bit 7,a
   4+ 8D00 ~                                    jp  nz,target
   5+ 8D00                                      ENDM
   6+ 8D00
   7+ 8D00              SetMaxVisibility:       MACRO
   8+ 8D00 ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8D00 ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8D00                                      ENDM
  11+ 8D00
  12+ 8D00              JumpIfObjectOutsideFov: MACRO target
  13+ 8D00 ~            LL10CheckXInFoV:
  14+ 8D00 ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8D00 ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8D00 ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8D00 ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8D00 ~                                    bit     7,h
  19+ 8D00 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8D00 ~            LL10CheckYInFoV:
  21+ 8D00 ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8D00 ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8D00 ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8D00 ~                                    bit     7,h
  25+ 8D00 ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8D00                                      ENDM
  27+ 8D00
  28+ 8D00              LL10AddGunNode:         MACRO
  29+ 8D00 ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8D00 ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8D00 ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8D00 ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8D00 ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8D00 ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8D00 ~            MakeBothGunNodesVisible:
  36+ 8D00 ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8D00 ~                                    inc     hl                              ;
  38+ 8D00 ~                                    ld      (hl),a                          ;
  39+ 8D00                                      ENDM
  40+ 8D00
  41+ 8D00              JumpIfTooFarAway:       MACRO   target
  42+ 8D00 ~                                    ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8D00 ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8D00 ~                                    ld      a,h                             ;
  45+ 8D00 ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8D00                                      ENDM
  47+ 8D00
  48+ 8D00              DisplayObject:
  49+ 8D00              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8D00                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8D00              ; .................................................................................................................................
  52+ 8D00              LL9NotPlanet:
  53+ 8D00                  SetMaxVisibility
  53+ 8D00 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8D02 32 A6 91    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8D05              ;LL9TestRemoveShip:
  55+ 8D05              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8D05              ; .................................................................................................................................
  57+ 8D05              LL9NoEraseLines:
  58+ 8D05                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8D05 3A 2A C0    >                        ld      a,(UBnkexplDsp)
  58+ 8D08 CB 6F       >                        bit 	5,a
  58+ 8D0A C2 35 8D    >                        jp      nz,DoExplosionOrClear7
  59+ 8D0D                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8D0D CB 7F       >                        bit 	7,a
  59+ 8D0F CA 35 8D    >                        jp      z,DoExplosionOrClear7
  60+ 8D12 E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8D14 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8D17              ;...............................................................................................................................................................................
  63+ 8D17              LL9ZeroAccelRotCtr:
  64+ 8D17                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8D17 AF          >               xor      a
  64+ 8D18 32 27 C0    >               ld       (UBnkAccel),a
  65+ 8D1B 32 29 C0     	ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  66+ 8D1E CD 02 CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  67+ 8D21              ;...............................................................................................................................................................................
  68+ 8D21              LL9SetExploRad:
  69+ 8D21              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  69+ 8D21 3E 12       >               ld       a,18
  69+ 8D23 32 F6 C2    >               ld       (UbnKEdgeHeapCounter),a
  70+ 8D26              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  70+ 8D26 3A 05 C3    >               ld       a,(ExplosionCtAddr)
  70+ 8D29 32 F4 C2    >               ld       (UbnkEdgeHeapBytes),a
  71+ 8D2C CD 41 96         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  72+ 8D2F 3A 13 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  73+ 8D32 C3 3D 8D     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  74+ 8D35              ;...............................................................................................................................................................................
  75+ 8D35              DoExplosionOrClear7:	                                                                                   ;;;;
  76+ 8D35              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  77+ 8D35              EE49:
  78+ 8D35              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  78+ 8D35 3A 13 C0    >                        ld      a,(UBnKzsgn)
  78+ 8D38 CB 7F       >                        bit 	7,a
  78+ 8D3A C2 AB 8D    >                        jp      nz,TestToRemove
  79+ 8D3D              ;...............................................................................................................................................................................
  80+ 8D3D              ObjectInFront:
  81+ 8D3D              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  82+ 8D3D                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  82+ 8D3D 3A 12 C0    >                        ld     a,(UBnKzhi)
  82+ 8D40 FE C0       >                        cp     FarInFront
  82+ 8D42 D2 AB 8D    >                        jp	  nc,TestToRemove
  83+ 8D45              LL10CheckFov:
  84+ 8D45                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8D45             >LL10CheckXInFoV:
  84+ 8D45 2A 0B C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  84+ 8D48 ED 5B 11 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  84+ 8D4C B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  84+ 8D4D ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  84+ 8D4F CB 7C       >                        bit     7,h
  84+ 8D51 CA AB 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8D54             >LL10CheckYInFoV:
  84+ 8D54 2A 0E C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  84+ 8D57 B7          >                        or		a							    ; clear carry flag                                                ;         .
  84+ 8D58 ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  84+ 8D5A CB 7C       >                        bit     7,h
  84+ 8D5C CA AB 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8D5F              LookAtGunNode:
  86+ 8D5F                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  86+ 8D5F 3A 04 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  86+ 8D62 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  86+ 8D63 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  86+ 8D65 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  86+ 8D67 21 BF C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  86+ 8D6A 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  86+ 8D6B             >MakeBothGunNodesVisible:
  86+ 8D6B 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  86+ 8D6C 23          >                        inc     hl                              ;
  86+ 8D6D 77          >                        ld      (hl),a                          ;
  87+ 8D6E              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  88+ 8D6E                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8D6E 2A 11 C0    >                        ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  88+ 8D71             >                        ShiftHLDiv8                             ; z position / 8
  88+ 8D71 CB 3C       >			   srl h
  88+ 8D73 CB 1D       >			   rr  l
  88+ 8D75 CB 3C       >			   srl h
  88+ 8D77 CB 1D       >			   rr  l
  88+ 8D79 CB 3C       >			   srl h
  88+ 8D7B CB 1D       >			   rr  l
  88+ 8D7D 7C          >                        ld      a,h                             ;
  88+ 8D7E             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8D7E FE 00       >				cp	0
  88+ 8D80 C2 96 8D    >				jp	nz,SkipToAsFar
  89+ 8D83              LL10CloseEnoughToDraw:
  90+ 8D83              ; if zhi /16
  91+ 8D83 7C               ld      a,h                             ; get zHi shifted again
  92+ 8D84 CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  93+ 8D86 CB 3F            srl     a                               ;
  94+ 8D88 CB 3F            srl     a                               ;
  95+ 8D8A CB 3F            srl     a                               ; zhi is now max 31
  96+ 8D8C 32 8D C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  97+ 8D8F              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  98+ 8D8F              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
  99+ 8D8F              ObjectDrawForwards:
 100+ 8D8F CD 3E 8E         call    DrawForwards
 101+ 8D92 C9               ret
 102+ 8D93 C3 8F 8D         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 103+ 8D96              ;...............................................................................................................................................................................
 104+ 8D96              SkipToAsFar:
 105+ 8D96              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 106+ 8D96              LL13:                                       ; hopped to as far
 107+ 8D96              LL13DrawIfNearerThanDotDist:
 108+ 8D96              ; if dot_distance >= z_hi then we can still draw ship
 109+ 8D96                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 109+ 8D96 3A 0B C3    >                        ld   a,(DotAddr)
 109+ 8D99 21 12 C0    >                        ld   hl,UBnKzhi
 109+ 8D9C BE          >                        cp   (hl)
 109+ 8D9D D2 8F 8D    >                        jp	  nc,ObjectDrawForwards
 110+ 8DA0              LL13DrawIfExplodingTest:
 111+ 8DA0              ; if exploding then draw ship
 112+ 8DA0 3A 2A C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 113+ 8DA3 E6 20            and     $20                             ; mask bit 5 exploding
 114+ 8DA5 C2 8F 8D         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 115+ 8DA8              LL13TooFarPlotPoint:
 116+ 8DA8 C3 BD 8D         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 117+ 8DAB              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ 8DAB              ;...............................................................................................................................................................................
 119+ 8DAB              ;;;LL14
 120+ 8DAB              ;;;   if bit5 of INWK31 is set								  ::LL14
 121+ 8DAB              ;;;      clear bit 3 of INWK31
 122+ 8DAB              ;;;      goto DO Explosion (DOEXP )
 123+ 8DAB              ;;;   end if
 124+ 8DAB              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 125+ 8DAB              ;;;      clear bt 3 of INK31
 126+ 8DAB              ;;;      goto Clear Lines from X19
 127+ 8DAB              ;;;   else
 128+ 8DAB              ;;;      return from subroutine
 129+ 8DAB              ;;;
 130+ 8DAB              TestToRemove:                                                                                             ;;;;
 131+ 8DAB              LL14:										; Test to remove object                                        ;;;;
 132+ 8DAB              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 132+ 8DAB 3A 2A C0    >                        ld      a,(UBnkexplDsp)
 132+ 8DAE CB 6F       >                        bit 	5,a
 132+ 8DB0 C2 02 CD    >                        jp      nz,EraseOldLines
 133+ 8DB3              ; Ship is exploding
 134+ 8DB3              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 135+ 8DB3 E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 136+ 8DB5 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31
 137+ 8DB8 C3 BB 8D     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 138+ 8DBB              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 139+ 8DBB
 140+ 8DBB              DOEXP: ; TODO
 141+ 8DBB B7           	or a
 142+ 8DBC C9           	ret
 143+ 8DBD
# file closed: ./ModelRender/draw_object.asm
 684  8DBD                  include "./ModelRender/draw_ship_point.asm"
# file opened: ./ModelRender/draw_ship_point.asm
   1+ 8DBD
   2+ 8DBD
   3+ 8DBD              ShipPlotPoint:
   4+ 8DBD              SHPPT:	                                    ; ship plot as point from LL10
   5+ 8DBD CD 02 CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 8DC0              SHPPT_ProjectToK3K4:
   7+ 8DC0 CD D3 CC         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 8DC3              SHPTOnScreenTest:
   9+ 8DC3 2A 91 92     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 8DC6 ED 5B 97 92  	ld		de,(varK4)
  11+ 8DCA 7C           	ld		a,h
  12+ 8DCB B2           	or		d								;
  13+ 8DCC 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 8DCE 7B           	ld		a,e								; k4 or Y lo
  15+ 8DCF              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 8DCF FE 80       >                        cp     ViewHeight
  15+ 8DD1 D2 F5 8D    >                        jp		nc,SHPTFinishup
  16+ 8DD4              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 8DD4 3E 01        	ld		a,1
  18+ 8DD6 32 F1 C2     	ld		(UbnkLineArrayLen),a
  19+ 8DD9 3E 04        	ld		a,4
  20+ 8DDB 32 F1 C2     	ld		(UbnkLineArrayLen),a
  21+ 8DDE 55           	ld		d,l                             ; de = Y lo X hi
  22+ 8DDF 21 FF C1     	ld		hl,UbnkLineArray				; head of array
  23+ 8DE2 72           	ld		(hl),d
  24+ 8DE3 23           	inc		hl
  25+ 8DE4 73           	ld		(hl),e
  26+ 8DE5 23           	inc		hl
  27+ 8DE6 72           	ld		(hl),d
  28+ 8DE7 23           	inc		hl
  29+ 8DE8 73           	ld		(hl),e
  30+ 8DE9 23           	inc		hl								; write out point as a line for clean up later
  31+ 8DEA              SHPTIsOnScreen:
  32+ 8DEA 43           	ld		b,e
  33+ 8DEB 4A           	ld		c,d								; bc = XY
  34+ 8DEC 3E FF        	ld		a,ShipColour
  35+ 8DEE              	MMUSelectLayer2
  35+ 8DEE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 8DF2 CD FF E0         call    l2_plot_pixel
  37+ 8DF5              SHPTFinishup:
  38+ 8DF5 3A 2A C0         ld      a,(UBnkexplDsp)
  39+ 8DF8 E6 F7            and     $F7                             ;  clear bit3
  40+ 8DFA 32 2A C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 8DFD C9               ret                                     ; now it will return to the caller of
  42+ 8DFE
  43+ 8DFE              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 8DFE                  INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++8DFE              ; ---------------------------------------------------------------------------------------------------------------------------------
   2++8DFE 00           DrawLinesCounter		db	0
   3++8DFF              ; Initial tests look OK
   4++8DFF              LL155:;
   5++8DFF              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   6++8DFF                    ;break                                                                             ; ObjectInFront:
   7++8DFF 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   8++8E01 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
   9++8E03 3A F1 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  10++8E06                                      ReturnIfAIsZero   						; No lines then bail out.
  10++8E06 FE 00       >                 cp     0
  10++8E08 C8          >                 ret    z
  11++8E09 FD 67                                ld		iyh,a			                ; number of lines still to draw
  12++8E0B 21 FF C1                             ld		hl,UbnkLineArray
  13++8E0E              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  14++8E0E 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  15++8E0F 23                                   inc     hl
  16++8E10 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  17++8E11 23                                   inc     hl
  18++8E12              ;;DEBUGTEST        push bc
  19++8E12              ;;DEBUGTEST        push hl
  20++8E12              ;;DEBUGTEST        push de
  21++8E12              ;;DEBUGTEST        ld  a,$3F
  22++8E12              ;;DEBUGTEST        MMUSelectLayer2
  23++8E12              ;;DEBUGTEST        call    l2_plot_pixel
  24++8E12              ;;DEBUGTEST        pop de
  25++8E12              ;;DEBUGTEST        pop hl
  26++8E12              ;;DEBUGTEST        pop bc
  27++8E12 5E                                   ld      e,(hl)                          ; c = varX1
  28++8E13 23                                   inc     hl
  29++8E14 56                                   ld      d,(hl)                          ; de = point2 Y,X
  30++8E15              ;;DEBUGTEST       push bc
  31++8E15              ;;DEBUGTEST       push hl
  32++8E15              ;;DEBUGTEST       push de
  33++8E15              ;;DEBUGTEST       push de
  34++8E15              ;;DEBUGTEST       pop  bc
  35++8E15              ;;DEBUGTEST       ld  a,$3F
  36++8E15              ;;DEBUGTEST       MMUSelectLayer2
  37++8E15              ;;DEBUGTEST       call    l2_plot_pixel
  38++8E15              ;;DEBUGTEST       pop de
  39++8E15              ;;DEBUGTEST       pop hl
  40++8E15              ;;DEBUGTEST       pop bc
  41++8E15 23                                   inc     hl
  42++8E16 E5                                   push	hl
  43++8E17 FD E5                                push    iy
  44++8E19 60                                   ld      h,b
  45++8E1A 69                                   ld      l,c
  46++8E1B                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  47++8E1B FD 7D                                ld		a,iyl							; get colour back before calling line draw
  48++8E1D                                      MMUSelectLayer2
  48++8E1D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  49++8E21 CD F0 E8                             call    LineHLtoDE
  50++8E24 FD E1                                pop     iy
  51++8E26 E1                                   pop	    hl
  52++8E27 FD 25                                dec     iyh
  53++8E29 20 E3                                jr		nz,DrawXX19ClippedLines
  54++8E2B C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  55++8E2C
# file closed: ././ModelRender/DrawLines.asm
  45+ 8E2C
  46+ 8E2C              ;
  47+ 8E2C              ;DrawLineBCtoDE:
  48+ 8E2C              ;LIONBCDE:
  49+ 8E2C              ;    -- Set colour etc
  50+ 8E2C              ;    call    l2_draw_diagonal:
  51+ 8E2C              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  52+ 8E2C
# file closed: ./ModelRender/draw_ship_point.asm
 685  8E2C                  include "./ModelRender/drawforwards-LL17.asm"
# file opened: ./ModelRender/drawforwards-LL17.asm
   1+ 8E2C              SetLastFaceVisible: MACRO
   2+ 8E2C ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 8E2C ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 8E2C                                  ENDM
   5+ 8E2C
   6+ 8E2C 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 8E2E 32 B0 C0                         ld      (UbnkFaceVisArray+15),a
   8+ 8E31 C9                               ret
   9+ 8E32
  10+ 8E32              CheckIfExplodingCall:
  11+ 8E32              ; DEBUG TODO turn into MACRO later
  12+ 8E32              ; Sets Z flag to true if only some faces are visible
  13+ 8E32              ; Clears Z flag if exploding so all faces should be rendered
  14+ 8E32 3A 2A C0             ld      a,(explDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 8E35              ;;DEBUG
  16+ 8E35 F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 8E37 32 2A C0             ld      (explDsp),a
  18+ 8E3A              ;;DEBUG
  19+ 8E3A 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 8E3B E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 8E3D C9                   ret
  22+ 8E3E
  23+ 8E3E
  24+ 8E3E              DrawForwardsIXL:
  25+ 8E3E              DrawForwards:
  26+ 8E3E              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 8E3E              ; Copy the three orientation vectors into XX16
  28+ 8E3E CD 73 CF     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 8E41              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 8E41 CD 22 D0     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 8E44              ; ......................................................                                                                            ;;;
  32+ 8E44              LastNormalAlwaysVisible:
  33+ 8E44 CD 2C 8E             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 8E47              ; HEre original does LDY 12
  35+ 8E47              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 8E47              CheckIfExplodingState:
  37+ 8E47 CD 32 8E             call    CheckIfExplodingCall
  38+ 8E4A 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 8E4C              ; ......................................................                                                                            ;;; else
  40+ 8E4C              ItIsExploding:
  41+ 8E4C              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 8E4C CD BB CF             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 8E4F 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 8E51                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 8E51 AF          >               xor      a
  44+ 8E52 32 A6 91    >               ld       (LastNormalVisible),a
  45+ 8E55              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 8E55 C3 5B 8E             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 8E58              ; ......................................................                                                                            ;;;
  48+ 8E58              CullBackFaces:
  49+ 8E58              EE29Entry:
  50+ 8E58 CD 98 D3             call    BackFaceCull
  51+ 8E5B              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 8E5B              TransposeMatrix:
  53+ 8E5B              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 8E5B CD 3B D0             call    InverseXX16
  55+ 8E5E
  56+ 8E5E
  57+ 8E5E CD 3A D8             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 8E61              DrawResults:
  59+ 8E61 CD 0C D9             call    PrepLines                   ; LL72, process lines and clip
  60+ 8E64 CD FF 8D             call    DrawLines                   ; Need to plot all lines
  61+ 8E67 C9                   ret
  62+ 8E68
# file closed: ./ModelRender/drawforwards-LL17.asm
 686  8E68
 687  8E68                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 8E68
   2+ 8E68 00           memfillvalue		DB 0
   3+ 8E69 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 8E6D 7D
   4+ 8E6E 68 8E        memfill_astrt  		DW memfillvalue
   5+ 8E70 00 40        memfill_length 		DB $00,$40
   6+ 8E72 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 8E75 00 00        memfill_bstrt  		DB $00,$00
   8+ 8E77 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 8E7B              memfill_cmd_len	  	EQU $ - memfill
  10+ 8E7B
  11+ 8E7B              memfill_dma:
  12+ 8E7B              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 8E7B              .set_fill_value:
  14+ 8E7B 32 68 8E     	ld 		(memfillvalue),a
  15+ 8E7E              .set_target:
  16+ 8E7E 22 75 8E     	ld		(memfill_bstrt),hl
  17+ 8E81              .set_length:
  18+ 8E81 ED 53 70 8E  	ld		(memfill_length),de
  19+ 8E85              .write_dma:
  20+ 8E85 21 69 8E     	ld 		hl, memfill
  21+ 8E88 06 12        	ld 		b, memfill_cmd_len
  22+ 8E8A 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 8E8C ED B3        	otir
  24+ 8E8E C9           	ret
  25+ 8E8F
# file closed: ./Hardware/memfill_dma.asm
 688  8E8F                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 8E8F
   2+ 8E8F 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 8E93 7D
   3+ 8E94 00 00        memcopy_astrt  		DB $00,$00
   4+ 8E96 00 40        memcopy_length 		DB $00,$40
   5+ 8E98 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 8E9B 00 00        memcopy_bstrt  		DB $00,$00
   7+ 8E9D 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 8EA1              memcopy_cmd_len	  	equ $ - memcopy
   9+ 8EA1
  10+ 8EA1              memcopy_dma:
  11+ 8EA1              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 8EA1              .set_target:
  13+ 8EA1 22 9B 8E     	ld		(memcopy_bstrt),hl
  14+ 8EA4              .set_source:
  15+ 8EA4 ED 53 94 8E  	ld		(memcopy_astrt),de
  16+ 8EA8              .set_length:
  17+ 8EA8 ED 43 96 8E  	ld		(memcopy_length),bc
  18+ 8EAC              .write_dma:
  19+ 8EAC 21 8F 8E     	ld 		hl, memcopy
  20+ 8EAF 06 12        	ld 		b, memcopy_cmd_len
  21+ 8EB1 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 8EB3 ED B3        	otir
  23+ 8EB5 C9           	ret
  24+ 8EB6
# file closed: ./Hardware/memcopy_dma.asm
 689  8EB6                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 8EB6              ;
   2+ 8EB6              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 8EB6              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 8EB6              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 8EB6              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 8EB6              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 8EB6              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 8EB6              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 8EB6              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 8EB6              ;
  11+ 8EB6              ; Keyboard
  12+ 8EB6              ;
  13+ 8EB6              ;   0      1       2       3       4       5        6       7       8       9
  14+ 8EB6              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 8EB6              ;   10     11      12      13      14      15       16      17      18      19
  16+ 8EB6              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 8EB6              ;   20     21      22      23      24      25       26      27      28      29
  18+ 8EB6              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 8EB6              ;   30     31      32      33      34      35       36      37      38      39
  20+ 8EB6              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 8EB6              ;
  22+ 8EB6              ; Default map
  23+ 8EB6              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 8EB6              ;   0          1           2             3              4           5           6           7           8           9
  25+ 8EB6              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 8EB6              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 8EB6              ;                                                                                                       Find System
  28+ 8EB6              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 8EB6              ;   10         11          12            13             14          15          16          17          18          19
  30+ 8EB6              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 8EB6              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 8EB6              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 8EB6              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 8EB6              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 8EB6              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 8EB6              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 8EB6              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 8EB6              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 8EB6              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 8EB6              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 8EB6              ;              ResumeGame
  42+ 8EB6
  43+ 8EB6              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 8EB6
  45+ 8EB6              c_Pressed_Front         equ 0  * 2
  46+ 8EB6              c_Pressed_Aft           equ 1  * 2
  47+ 8EB6              c_Pressed_Left          equ 2  * 2
  48+ 8EB6              c_Pressed_Right         equ 3  * 2
  49+ 8EB6              c_Pressed_RollLeft      equ 4  * 2
  50+ 8EB6              c_Pressed_RollRight     equ 5  * 2
  51+ 8EB6              c_Pressed_Dive          equ 6  * 2
  52+ 8EB6              c_Pressed_Climb         equ 7  * 2
  53+ 8EB6              c_Pressed_Accellerate   equ 8  * 2
  54+ 8EB6              c_Pressed_Decellerate   equ 9  * 2
  55+ 8EB6              c_Pressed_FireLaser     equ 10 * 2
  56+ 8EB6              c_Pressed_TargetMissle  equ 11 * 2
  57+ 8EB6              c_Pressed_FireMissile   equ 12 * 2
  58+ 8EB6              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 8EB6              c_Pressed_ECM           equ 14 * 2
  60+ 8EB6              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 8EB6              c_Pressed_EscapePod     equ 16 * 2
  62+ 8EB6              c_Pressed_DockingComp   equ 17 * 2
  63+ 8EB6              c_Pressed_Hyperspace    equ 18 * 2
  64+ 8EB6              c_Pressed_Distance      equ 19 * 2
  65+ 8EB6              c_Pressed_HomeCursor    equ 20 * 2
  66+ 8EB6              c_Pressed_Launch        equ 21 * 2
  67+ 8EB6              c_Pressed_BuyCargo      equ 22 * 2
  68+ 8EB6              c_Pressed_SellCargo     equ 23 * 2
  69+ 8EB6              c_Pressed_Equip         equ 24 * 2
  70+ 8EB6              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 8EB6              c_Pressed_LocalChart    equ 26 * 2
  72+ 8EB6              c_Pressed_MarketPrices  equ 27 * 2
  73+ 8EB6              c_Pressed_Status        equ 28 * 2
  74+ 8EB6              c_Pressed_Inventory     equ 29 * 2
  75+ 8EB6              c_Pressed_GameSkip      equ 30 * 2
  76+ 8EB6              c_Pressed_Save          equ 31 * 2
  77+ 8EB6              c_Pressed_Freeze        equ 32 * 2
  78+ 8EB6              c_Pressed_Resume        equ 33 * 2
  79+ 8EB6              c_Pressed_Recentre      equ 34 * 2
  80+ 8EB6              c_Pressed_Quit          equ 35 * 2
  81+ 8EB6              c_Pressed_PlanetData    equ 36 * 2
  82+ 8EB6              c_Pressed_CursorUp      equ 37 * 2
  83+ 8EB6              c_Pressed_CursorDown    equ 38 * 2
  84+ 8EB6              c_Pressed_Find          equ 39 * 2
  85+ 8EB6
  86+ 8EB6              ; half row 1
  87+ 8EB6              VK_CAPS  				equ 0
  88+ 8EB6              VK_Z  					equ 1
  89+ 8EB6              VK_X  					equ 2
  90+ 8EB6              VK_C  					equ 3
  91+ 8EB6              VK_V  					equ 4
  92+ 8EB6              ; half row 2
  93+ 8EB6              VK_A  					equ 5
  94+ 8EB6              VK_S  					equ 6
  95+ 8EB6              VK_D  					equ 7
  96+ 8EB6              VK_F  					equ 8
  97+ 8EB6              VK_G  					equ 9
  98+ 8EB6              ; half row 3
  99+ 8EB6              VK_Q  					equ 10
 100+ 8EB6              VK_W  					equ 11
 101+ 8EB6              VK_E  					equ 12
 102+ 8EB6              VK_R  					equ 13
 103+ 8EB6              VK_T  					equ 14
 104+ 8EB6              ; half row 4
 105+ 8EB6              VK_1  					equ 15
 106+ 8EB6              VK_2  					equ 16
 107+ 8EB6              VK_3  					equ 17
 108+ 8EB6              VK_4  					equ 18
 109+ 8EB6              VK_5  					equ 19
 110+ 8EB6              ; half row 5
 111+ 8EB6              VK_0 					equ 20
 112+ 8EB6              VK_9 					equ 21
 113+ 8EB6              VK_8 					equ 22
 114+ 8EB6              VK_7 					equ 23
 115+ 8EB6              VK_6 					equ 24
 116+ 8EB6              ; half row 6
 117+ 8EB6              VK_P  					equ 25
 118+ 8EB6              VK_O  					equ 26
 119+ 8EB6              VK_I  					equ 27
 120+ 8EB6              VK_U  					equ 28
 121+ 8EB6              VK_Y  					equ 29
 122+ 8EB6              ; half row 7
 123+ 8EB6              VK_ENTER 				equ 30
 124+ 8EB6              VK_L  					equ 31
 125+ 8EB6              VK_K  					equ 32
 126+ 8EB6              VK_J  					equ 33
 127+ 8EB6              VK_H  					equ 34
 128+ 8EB6              ; half row 8
 129+ 8EB6              VK_SPACE 				equ 35
 130+ 8EB6              VK_SYM  				equ 36
 131+ 8EB6              VK_M  					equ 37
 132+ 8EB6              VK_N  					equ 38
 133+ 8EB6              VK_B  					equ 39
 134+ 8EB6
 135+ 8EB6              ;KeyboardMapping
 136+ 8EB6              KeyCode_Front        	equ VK_1
 137+ 8EB6              KeyCode_Aft          	equ VK_2
 138+ 8EB6              KeyCode_Left         	equ VK_3
 139+ 8EB6              KeyCode_Right        	equ VK_4
 140+ 8EB6              KeyCode_RollLeft     	equ VK_O
 141+ 8EB6              KeyCode_RollRight    	equ VK_P
 142+ 8EB6              KeyCode_Dive         	equ VK_Q
 143+ 8EB6              KeyCode_Climb        	equ VK_A
 144+ 8EB6              KeyCode_Accellerate  	equ VK_W
 145+ 8EB6              KeyCode_Decellerate  	equ VK_S
 146+ 8EB6              KeyCode_FireLaser    	equ VK_SPACE
 147+ 8EB6              KeyCode_TargetMissle 	equ VK_T
 148+ 8EB6              KeyCode_FireMissile  	equ VK_F
 149+ 8EB6              KeyCode_Find        	equ VK_F
 150+ 8EB6              KeyCode_UnarmMissile 	equ VK_R
 151+ 8EB6              KeyCode_ECM          	equ VK_E
 152+ 8EB6              KeyCode_EnergyBomb   	equ VK_U
 153+ 8EB6              KeyCode_EscapePod    	equ VK_CAPS
 154+ 8EB6              KeyCode_DockingComp  	equ VK_N
 155+ 8EB6              KeyCode_Hyperspace   	equ VK_H
 156+ 8EB6              KeyCode_Distance     	equ VK_J
 157+ 8EB6              KeyCode_HomeCursor   	equ VK_G
 158+ 8EB6              KeyCode_Launch       	equ VK_L
 159+ 8EB6              KeyCode_BuyCargo     	equ VK_B
 160+ 8EB6              KeyCode_SellCargo    	equ VK_V
 161+ 8EB6              KeyCode_Equip        	equ VK_C
 162+ 8EB6              KeyCode_GalacticChrt 	equ VK_5
 163+ 8EB6              KeyCode_LocalChart   	equ VK_6
 164+ 8EB6              KeyCode_MarketPrices 	equ VK_7
 165+ 8EB6              KeyCode_Status       	equ VK_8
 166+ 8EB6              KeyCode_Inventory    	equ VK_9
 167+ 8EB6              KeyCode_GameSkip     	equ VK_Z
 168+ 8EB6              KeyCode_Save         	equ VK_O
 169+ 8EB6              KeyCode_Freeze       	equ VK_B
 170+ 8EB6              KeyCode_Resume       	equ VK_L
 171+ 8EB6              KeyCode_Recentre     	equ VK_D
 172+ 8EB6              KeyCode_Quit         	equ VK_Y
 173+ 8EB6              KeyCode_PlanetData   	equ VK_0
 174+ 8EB6              KeyCode_CursorUp        equ VK_Q
 175+ 8EB6              KeyCode_CursorDown      equ VK_A
 176+ 8EB6
 177+ 8EB6 00 00 00...  Keys					DS	40
 178+ 8EDE              c_KeyBoardLen 			equ $ - Keys
 179+ 8EDE 00 00 00...  RawKeys					DS	8
 180+ 8EE6 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 8EEA FE FB FE F7
 180+ 8EEE FE EF FE DF
 180+ 8EF2 FE BF FE 7F
 181+ 8EF6              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 8EF6              ; of updating this table with the respective location to look up
 183+ 8EF6              ; key list sequence is in table above
 184+ 8EF6 C5 8E C6 8E  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 8EFA C7 8E C8 8E
 184+ 8EFE D0 8E
 185+ 8F00 CF 8E C0 8E                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 8F04 BB 8E C1 8E
 185+ 8F08 BC 8E
 186+ 8F0A D9 8E C4 8E                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 8F0E BE 8E C3 8E
 186+ 8F12 C2 8E
 187+ 8F14 D2 8E B6 8E                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 8F18 DC 8E D8 8E
 187+ 8F1C D7 8E
 188+ 8F1E BF 8E D5 8E                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 8F22 DD 8E BA 8E
 188+ 8F26 B9 8E
 189+ 8F28 C9 8E CE 8E                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 8F2C CD 8E CC 8E
 189+ 8F30 CB 8E
 190+ 8F32 B7 8E D0 8E                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 8F36 DD 8E D5 8E
 190+ 8F3A BD 8E
 191+ 8F3C D3 8E CA 8E                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 8F40 C0 8E BB 8E
 191+ 8F44 BE 8E
 192+ 8F46
 193+ 8F46 23 5A 58 43  ASCII_Map:           DB "#","Z","X","C","V"
 193+ 8F4A 56
 194+ 8F4B 41 53 44 46                       DB "A","S","D","F","G"
 194+ 8F4F 47
 195+ 8F50 51 57 45 52                       DB "Q","W","E","R","T"
 195+ 8F54 54
 196+ 8F55 31 32 33 34                       DB "1","2","3","4","5"
 196+ 8F59 35
 197+ 8F5A 30 39 38 37                       DB "0","9","8","7","6"
 197+ 8F5E 36
 198+ 8F5F 50 4F 49 55                       DB "P","O","I","U","Y"
 198+ 8F63 59
 199+ 8F64 3E 4C 4B 4A                       DB ">","L","K","J","H"
 199+ 8F68 48
 200+ 8F69 20 5E 4D 4E                       DB " ","^","M","N","B"
 200+ 8F6D 42
 201+ 8F6E
 202+ 8F6E
 203+ 8F6E              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 8F6E              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 8F6E              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 8F6E              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 8F6E              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 8F6E              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 8F6E              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 8F6E              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 8F6E              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 8F6E              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 8F6E              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 8F6E              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 8F6E              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 8F6E              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 8F6E              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 8F6E              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 8F6E              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 8F6E              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 8F6E              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 8F6E              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 8F6E              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 8F6E              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 8F6E              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 8F6E              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 8F6E              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 8F6E              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 8F6E              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 8F6E              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 8F6E              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 8F6E              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 8F6E              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 8F6E              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 8F6E              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 8F6E              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 8F6E              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 8F6E              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 8F6E              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 8F6E              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 8F6E              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 8F6E              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 8F6E
 244+ 8F6E
 245+ 8F6E              init_keyboard:
 246+ 8F6E 21 B6 8E     	ld		hl,Keys
 247+ 8F71 11 28 00     	ld		de, c_KeyBoardLen
 248+ 8F74 3E 00        	ld		a,0
 249+ 8F76 CD 7B 8E     	call	memfill_dma
 250+ 8F79 C9           	ret
 251+ 8F7A
 252+ 8F7A              scan_keyboard:
 253+ 8F7A 21 DE 8E     	ld		hl,RawKeys
 254+ 8F7D 11 E6 8E     	ld		de,KeyAddrTab
 255+ 8F80 AF           	xor		a
 256+ 8F81 FD 2E 08     	ld		iyl,8
 257+ 8F84 DD 21 B6 8E      ld      ix,Keys
 258+ 8F88              .PortReadLoop:
 259+ 8F88 1A           	ld		a,(de)							; Set up BC as port to read
 260+ 8F89 4F           	ld		c,a
 261+ 8F8A 13           	inc		de
 262+ 8F8B 1A               ld      a,(de)
 263+ 8F8C 47           	ld		b,a
 264+ 8F8D 13           	inc		de
 265+ 8F8E ED 78        	in		a,(c)							; read port to a
 266+ 8F90 77           	ld		(hl),a							; set raw keys to value
 267+ 8F91 23           	inc		hl								; and ready for next element
 268+ 8F92 06 05        	ld		b,5								; loop all bits (there are only 5 keys to a group)
 269+ 8F94              .ProcessBitsLoop:
 270+ 8F94 CB 47        	bit		0,a								; is bit set
 271+ 8F96 28 07            jr      z,.SetKeyPressed
 272+ 8F98 08               ex      af,af'
 273+ 8F99 AF               xor     a
 274+ 8F9A C3 A6 8F         jp      .SetKey
 275+ 8F9D 20 0B        	jr		nz,.SkipKeySet
 276+ 8F9F              .SetKeyPressed:
 277+ 8F9F 08           	ex		af,af'
 278+ 8FA0 DD 7E 00         ld      a,(ix+0)
 279+ 8FA3 3C               inc     a
 280+ 8FA4 E6 03            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 281+ 8FA6              .SetKey:
 282+ 8FA6 DD 77 00     	ld		(ix+0),a							; Key Pressed
 283+ 8FA9 08           	ex		af,af'
 284+ 8FAA              .SkipKeySet:
 285+ 8FAA DD 23        	inc		ix								; move to next key
 286+ 8FAC CB 3F        	srl		a								; move next key into bit 0
 287+ 8FAE 10 E4        	djnz	.ProcessBitsLoop				; Process all key group bits
 288+ 8FB0 FD 2D            dec     iyl
 289+ 8FB2 20 D4            jr      nz,.PortReadLoop				; Read next input port
 290+ 8FB4 C9           	ret
 291+ 8FB5
 292+ 8FB5              GetKeyStateAddressDE: MACRO
 293+ 8FB5 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 294+ 8FB5 ~                                  add     hl,a
 295+ 8FB5 ~                                  ld      a,(hl)
 296+ 8FB5 ~                                  ld      e,a
 297+ 8FB5 ~                                  inc     hl
 298+ 8FB5 ~                                  ld      a,(hl)
 299+ 8FB5 ~                                  ld      d,a                             ; now de = address in keypress list
 300+ 8FB5                                    ENDM
 301+ 8FB5
 302+ 8FB5
 303+ 8FB5              ; call with a = c_Pressed key, will then read mapping
 304+ 8FB5              wait_for_key_a_press:
 305+ 8FB5                  GetKeyStateAddressDE
 305+ 8FB5 21 F6 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 305+ 8FB8 ED 31       >                      add     hl,a
 305+ 8FBA 7E          >                      ld      a,(hl)
 305+ 8FBB 5F          >                      ld      e,a
 305+ 8FBC 23          >                      inc     hl
 305+ 8FBD 7E          >                      ld      a,(hl)
 305+ 8FBE 57          >                      ld      d,a                             ; now de = address in keypress list
 306+ 8FBF D5               push    de
 307+ 8FC0              wait_for_key_press_loop:
 308+ 8FC0 CD 7A 8F         call    scan_keyboard
 309+ 8FC3 E1               pop     hl                              ; get key address into hl
 310+ 8FC4 E5               push    hl
 311+ 8FC5 7E               ld      a,(hl)
 312+ 8FC6                  JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 312+ 8FC6 FE 01       >                cp     1
 312+ 8FC8 C2 C0 8F    >                jp      nz,wait_for_key_press_loop
 313+ 8FCB E1               pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 314+ 8FCC C9               ret
 315+ 8FCD
 316+ 8FCD              wait_for_key_a_held:
 317+ 8FCD                  GetKeyStateAddressDE
 317+ 8FCD 21 F6 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 317+ 8FD0 ED 31       >                      add     hl,a
 317+ 8FD2 7E          >                      ld      a,(hl)
 317+ 8FD3 5F          >                      ld      e,a
 317+ 8FD4 23          >                      inc     hl
 317+ 8FD5 7E          >                      ld      a,(hl)
 317+ 8FD6 57          >                      ld      d,a                             ; now de = address in keypress list
 318+ 8FD7 D5               push    de
 319+ 8FD8              wait_for_key_a_held_loop:
 320+ 8FD8 CD 7A 8F         call    scan_keyboard
 321+ 8FDB E1               pop     hl
 322+ 8FDC E5               push    hl
 323+ 8FDD 7E               ld      a,(hl)
 324+ 8FDE                  JumpIfALTNusng  2,wait_for_key_a_held_loop
 324+ 8FDE FE 02       >                        cp      2
 324+ 8FE0 DA D8 8F    >                        jp		c,wait_for_key_a_held_loop
 325+ 8FE3 E1               pop     hl
 326+ 8FE4 C9               ret
 327+ 8FE5
 328+ 8FE5              get_key_a_state:                            ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 329+ 8FE5                  GetKeyStateAddressDE
 329+ 8FE5 21 F6 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 329+ 8FE8 ED 31       >                      add     hl,a
 329+ 8FEA 7E          >                      ld      a,(hl)
 329+ 8FEB 5F          >                      ld      e,a
 329+ 8FEC 23          >                      inc     hl
 329+ 8FED 7E          >                      ld      a,(hl)
 329+ 8FEE 57          >                      ld      d,a                             ; now de = address in keypress list
 330+ 8FEF EB               ex      de,hl
 331+ 8FF0 7E               ld      a,(hl)                          ; a = keystate
 332+ 8FF1 C9               ret
 333+ 8FF2
 334+ 8FF2              is_key_pressed:                             ; returns z is set if pressed
 335+ 8FF2                  GetKeyStateAddressDE
 335+ 8FF2 21 F6 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 8FF5 ED 31       >                      add     hl,a
 335+ 8FF7 7E          >                      ld      a,(hl)
 335+ 8FF8 5F          >                      ld      e,a
 335+ 8FF9 23          >                      inc     hl
 335+ 8FFA 7E          >                      ld      a,(hl)
 335+ 8FFB 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 8FFC EB               ex      de,hl
 337+ 8FFD 7E               ld      a,(hl)                          ; a = keystate
 338+ 8FFE FE 01            cp      1
 339+ 9000 C9               ret
 340+ 9001
 341+ 9001              is_key_held:                                ; returns z is set if held
 342+ 9001                  GetKeyStateAddressDE
 342+ 9001 21 F6 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 9004 ED 31       >                      add     hl,a
 342+ 9006 7E          >                      ld      a,(hl)
 342+ 9007 5F          >                      ld      e,a
 342+ 9008 23          >                      inc     hl
 342+ 9009 7E          >                      ld      a,(hl)
 342+ 900A 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 900B EB               ex      de,hl
 344+ 900C 7E               ld      a,(hl)                          ; a = keystate
 345+ 900D E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 900F FE 02            cp      2
 347+ 9011 C9               ret
 348+ 9012
 349+ 9012              is_any_key_pressed:
 350+ 9012 21 B6 8E         ld      hl,Keys
 351+ 9015 06 28            ld      b,40
 352+ 9017 0E 00            ld      c,0
 353+ 9019              .KeyReadLoop:
 354+ 9019 7E               ld      a,(hl)
 355+ 901A FE 01            cp      1
 356+ 901C CA 26 90         jp      z,.KeyPressed
 357+ 901F 23               inc     hl
 358+ 9020 0C               inc     c
 359+ 9021 10 F6            djnz    .KeyReadLoop
 360+ 9023 3E FF            ld      a,$FF
 361+ 9025 C9               ret
 362+ 9026              .KeyPressed:
 363+ 9026 79               ld      a,c
 364+ 9027 C9               ret
 365+ 9028
 366+ 9028              is_any_key_held:
 367+ 9028 21 B6 8E         ld      hl,Keys
 368+ 902B 06 28            ld      b,40
 369+ 902D 0E 00            ld      c,0
 370+ 902F              .KeyReadLoop:
 371+ 902F 7E               ld      a,(hl)
 372+ 9030 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 9032 FE 02            cp      2
 374+ 9034 CA 3E 90         jp      z,.KeyPressed
 375+ 9037 23               inc     hl
 376+ 9038 0C               inc     c
 377+ 9039 10 F4            djnz    .KeyReadLoop
 378+ 903B 3E FF            ld      a,$FF
 379+ 903D C9               ret
 380+ 903E              .KeyPressed:
 381+ 903E 79               ld      a,c
 382+ 903F C9               ret
 383+ 9040
 384+ 9040
 385+ 9040 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 905E 00                                   DB  0               ; end of string marker as a safety
 387+ 905F 00           InputCursor             DB  0
 388+ 9060 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 9061 00           InputChanged            DB  0
 390+ 9062              InputLimit              EQU 20
 391+ 9062
 392+ 9062              keyboard_copy_input_to_de:
 393+ 9062 21 40 90         ld      hl,InputString
 394+ 9065 3A 5F 90         ld      a,(InputCursor)
 395+ 9068 FE 00            cp      0
 396+ 906A 28 05            jr      z,.NoString
 397+ 906C 4F               ld      c,a
 398+ 906D 06 00            ld      b,0
 399+ 906F ED B0            ldir
 400+ 9071              .NoString
 401+ 9071 3E 00            ld      a,0
 402+ 9073 12               ld      (de),a
 403+ 9074 C9               ret
 404+ 9075
 405+ 9075              initInputText:
 406+ 9075 AF               xor     a
 407+ 9076 32 5F 90         ld      (InputCursor),a
 408+ 9079 32 60 90         ld      (EnterPressed),a
 409+ 907C 32 61 90         ld      (InputChanged),a
 410+ 907F 21 40 90         ld      hl,InputString
 411+ 9082 06 1E            ld      b,30
 412+ 9084              .wipeloop:
 413+ 9084 77               ld      (hl),a
 414+ 9085 23               inc     hl
 415+ 9086 10 FC            djnz    .wipeloop
 416+ 9088 C9               ret
 417+ 9089
 418+ 9089              InputName:
 419+ 9089 AF               xor     a
 420+ 908A 32 61 90         ld      (InputChanged),a
 421+ 908D CD 12 90         call    is_any_key_pressed
 422+ 9090 FE FF            cp      $FF
 423+ 9092 C8               ret     z
 424+ 9093              .KeyPressed:
 425+ 9093 4F               ld      c,a
 426+ 9094 3A 5F 90         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 427+ 9097 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 428+ 9099 28 0B            jr      z,.DeleteOrEnterOnly            ;
 429+ 909B 21 46 8F         ld      hl,ASCII_Map
 430+ 909E 79               ld      a,c
 431+ 909F ED 31            add     hl,a
 432+ 90A1 7E               ld      a,(hl)
 433+ 90A2 FE 41            cp      "A"
 434+ 90A4 30 15            jr      nc,.AlphaPressed
 435+ 90A6              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 436+ 90A6 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 437+ 90A8 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 438+ 90AA FE 3E            cp      ">"         ; ENTER
 439+ 90AC 28 24            jr      z,.EnterPressed
 440+ 90AE FE 23            cp      "#"         ; CAPS
 441+ 90B0 28 33            jr      z,.CapsPressed
 442+ 90B2 FE 5E            cp      "^"         ; SYMBOLSHIFT
 443+ 90B4 28 2F            jr      z,.SymbolPressed
 444+ 90B6 FE 20            cp      " "         ; space
 445+ 90B8 28 2B            jr      z,.SpacePressed
 446+ 90BA C9               ret
 447+ 90BB              .AlphaPressed:
 448+ 90BB 47               ld      b,a
 449+ 90BC 3A 5F 90         ld      a,(InputCursor)
 450+ 90BF 4F               ld      c,a
 451+ 90C0 21 40 90         ld      hl,InputString
 452+ 90C3 ED 31            add     hl,a
 453+ 90C5 78               ld      a,b
 454+ 90C6 70               ld      (hl),b
 455+ 90C7 79               ld      a,c
 456+ 90C8 21 5F 90         ld      hl,InputCursor
 457+ 90CB 34               inc     (hl)
 458+ 90CC 3E FF            ld      a,$FF
 459+ 90CE 32 61 90         ld      (InputChanged),a
 460+ 90D1 C9               ret
 461+ 90D2              .EnterPressed:
 462+ 90D2 3A 5F 90         ld      a,(InputCursor)
 463+ 90D5 3C               inc     a
 464+ 90D6 21 40 90         ld      hl,InputString
 465+ 90D9 ED 31            add     hl,a
 466+ 90DB AF               xor     a
 467+ 90DC 77               ld      (hl),a
 468+ 90DD 3D               dec     a
 469+ 90DE 32 60 90         ld      (EnterPressed),a
 470+ 90E1 32 61 90         ld      (InputChanged),a
 471+ 90E4 C9               ret
 472+ 90E5              .CheckShiftDelete:
 473+ 90E5              .CapsPressed:                               ; act as a delete key for now
 474+ 90E5              .SymbolPressed:
 475+ 90E5              .SpacePressed:
 476+ 90E5 3A 5F 90         ld      a,(InputCursor)
 477+ 90E8 FE 00            cp      0
 478+ 90EA C8               ret     z
 479+ 90EB 3D               dec     a
 480+ 90EC 32 5F 90         ld      (InputCursor),a
 481+ 90EF 21 40 90         ld      hl,InputString
 482+ 90F2 ED 31            add     hl,a
 483+ 90F4 AF               xor     a
 484+ 90F5 77               ld      (hl),a
 485+ 90F6 3E FF            ld      a,$FF
 486+ 90F8 32 61 90         ld      (InputChanged),a
 487+ 90FB C9               ret
 488+ 90FC
 489+ 90FC              MovementKeyTest:
 490+ 90FC              ;DBG1:jp dbg1
 491+ 90FC              ;dbx1:
 492+ 90FC AF               xor     a
 493+ 90FD 32 79 92         ld      (CursorKeysPressed),a
 494+ 9100 3A 7B 92         ld      a,(MenuIdMax)
 495+ 9103 E6 FC            and     $FC
 496+ 9105 20 28            jr      nz,CursorKeys
 497+ 9107              ClimbDiveKeys:
 498+ 9107 2A 04 8F         ld      hl,(addr_Pressed_Climb)
 499+ 910A 7E               ld      a,(hl)
 500+ 910B                  IfAIsZeroGoto ScanDiveKey
 500+ 910B FE 00       >				cp	0
 500+ 910D CA 1B 91    >				jp	z,ScanDiveKey
 501+ 9110 3A 79 92         ld      a,(CursorKeysPressed)
 502+ 9113 F6 80            or      $80
 503+ 9115 32 79 92         ld      (CursorKeysPressed),a
 504+ 9118 C3 54 91         jp      ScanLeftKey
 505+ 911B              ScanDiveKey:
 506+ 911B 2A 02 8F         ld      hl,(addr_Pressed_Dive)
 507+ 911E 7E               ld      a,(hl)
 508+ 911F                  IfAIsZeroGoto ScanLeftKey
 508+ 911F FE 00       >				cp	0
 508+ 9121 CA 54 91    >				jp	z,ScanLeftKey
 509+ 9124 3A 79 92         ld      a,(CursorKeysPressed)
 510+ 9127 F6 40            or      $40
 511+ 9129 32 79 92         ld      (CursorKeysPressed),a
 512+ 912C C3 54 91         jp      ScanLeftKey
 513+ 912F              CursorKeys:
 514+ 912F 2A 40 8F         ld      hl,(addr_Pressed_CursorUp)
 515+ 9132 7E               ld      a,(hl)
 516+ 9133                  IfAIsZeroGoto ScanCursorDownKey
 516+ 9133 FE 00       >				cp	0
 516+ 9135 CA 43 91    >				jp	z,ScanCursorDownKey
 517+ 9138 3A 79 92         ld      a,(CursorKeysPressed)
 518+ 913B F6 80            or      $80
 519+ 913D 32 79 92         ld      (CursorKeysPressed),a
 520+ 9140 C3 54 91         jp      ScanLeftKey
 521+ 9143              ScanCursorDownKey
 522+ 9143 2A 42 8F         ld      hl,(addr_Pressed_CursorDown)
 523+ 9146 7E               ld      a,(hl)
 524+ 9147                  IfAIsZeroGoto ScanLeftKey
 524+ 9147 FE 00       >				cp	0
 524+ 9149 CA 54 91    >				jp	z,ScanLeftKey
 525+ 914C 3A 79 92         ld      a,(CursorKeysPressed)
 526+ 914F F6 40            or      $40
 527+ 9151 32 79 92         ld      (CursorKeysPressed),a
 528+ 9154              ScanLeftKey:
 529+ 9154 2A FE 8E         ld      hl,(addr_Pressed_RollLeft)
 530+ 9157 7E               ld      a,(hl)
 531+ 9158                  IfAIsZeroGoto ScanRightKey
 531+ 9158 FE 00       >				cp	0
 531+ 915A CA 66 91    >				jp	z,ScanRightKey
 532+ 915D 3A 79 92         ld      a,(CursorKeysPressed)
 533+ 9160 F6 20            or      $20
 534+ 9162 32 79 92         ld      (CursorKeysPressed),a
 535+ 9165 C9               ret
 536+ 9166              ScanRightKey:
 537+ 9166 2A 00 8F         ld      hl,(addr_Pressed_RollRight)
 538+ 9169 7E               ld      a,(hl)
 539+ 916A                  IfAIsZeroGoto ScanHomeKey
 539+ 916A FE 00       >				cp	0
 539+ 916C CA 78 91    >				jp	z,ScanHomeKey
 540+ 916F 3A 79 92         ld      a,(CursorKeysPressed)
 541+ 9172 F6 10            or      $10
 542+ 9174 32 79 92         ld      (CursorKeysPressed),a
 543+ 9177 C9               ret
 544+ 9178              ScanHomeKey:
 545+ 9178 2A 1E 8F         ld      hl,(addr_Pressed_HomeCursor)
 546+ 917B 7E               ld      a,(hl)
 547+ 917C                  IfAIsZeroGoto ScanRecentreKey
 547+ 917C FE 00       >				cp	0
 547+ 917E CA 8A 91    >				jp	z,ScanRecentreKey
 548+ 9181 3A 79 92         ld      a,(CursorKeysPressed)
 549+ 9184 F6 08            or      $08
 550+ 9186 32 79 92         ld      (CursorKeysPressed),a
 551+ 9189 C9               ret
 552+ 918A              ScanRecentreKey:
 553+ 918A 2A 3A 8F         ld      hl,(addr_Pressed_Recentre)
 554+ 918D 7E               ld      a,(hl)
 555+ 918E                  ReturnIfAIsZero
 555+ 918E FE 00       >                 cp     0
 555+ 9190 C8          >                 ret    z
 556+ 9191 3A 79 92         ld      a,(CursorKeysPressed)
 557+ 9194 F6 04            or      $04
 558+ 9196 32 79 92         ld      (CursorKeysPressed),a
 559+ 9199 C9               ret
 560+ 919A
 561+ 919A
# file closed: ./Hardware/keyboard.asm
 690  919A
 691  919A                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 919A              ;Contants
   2+ 919A
   3+ 919A              SignMask8Bit		equ %01111111
   4+ 919A              SignMask16Bit		equ %0111111111111111
   5+ 919A              SignOnly8Bit		equ $80
   6+ 919A              SignOnly16Bit		equ $8000
   7+ 919A
   8+ 919A              ConstPi				equ $80
   9+ 919A              ConstNorm           equ 197
  10+ 919A
  11+ 919A              ;Text Tokens
  12+ 919A              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 919A              BrabenBellToken 	equ $0D
  14+ 919A              AcorToken			equ $0C
  15+ 919A
  16+ 919A              ; Intro Screen
  17+ 919A              TitleShip			equ	$8C
  18+ 919A              RotationUnity		equ $60
  19+ 919A              DBCheckCode			equ $DB
  20+ 919A              MaxVisibility		equ $1F
  21+ 919A              FarInFront			equ $C0
  22+ 919A
  23+ 919A              ; Universe Managment
  24+ 919A              MaxNumberOfStars	equ 18
  25+ 919A              FreeListSize		equ	$12
  26+ 919A              ShipTypeSize		equ	32 			;??????? just a guess for now
  27+ 919A              ShipSST				equ 4			; its a space station
  28+ 919A              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  29+ 919A              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  30+ 919A              ShipCountMax		equ	2			; For now just 2 ships to debug
  31+ 919A              LineLimitPerShip	equ 70			; Max lines per ship
  32+ 919A              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  33+ 919A              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  34+ 919A              PlayerDocked		equ	$FF
  35+ 919A
  36+ 919A              ; Memory page managment	(Refers to a memory slot as a place to access data)
  37+ 919A              ShipDataSlot		equ	6			; this may move into rom swap out space later
  38+ 919A              UniverseObjectSlot	equ	7
  39+ 919A
  40+ 919A              KeyForwardsView		equ	$20
  41+ 919A
  42+ 919A              ; Ship Data
  43+ 919A              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  44+ 919A              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  45+ 919A              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  46+ 919A              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  47+ 919A              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  48+ 919A              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  49+ 919A              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  50+ 919A              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  51+ 919A              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  52+ 919A              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  53+ 919A              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  54+ 919A              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  55+ 919A              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  56+ 919A              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  57+ 919A              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  58+ 919A              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  59+ 919A              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  60+ 919A              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  61+ 919A              ;;;;00 00			 EQUW 0     \ type 18 is
  62+ 919A              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  63+ 919A              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  64+ 919A              ;;;;00 00			 EQUW 0     \ type 21 is
  65+ 919A              ;;;;00 00			 EQUW 0     \ type 22 is
  66+ 919A              ;;;;00 00			 EQUW 0     \ type 23 is
  67+ 919A              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  68+ 919A              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  69+ 919A              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  70+ 919A              ;;;;00 00			 EQUW 0     \ type 27 is
  71+ 919A              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  72+ 919A              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  73+ 919A              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  74+ 919A              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  75+ 919A              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  76+ 919A              ;;;;			\ NEWB examples
  77+ 919A              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  78+ 919A              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  79+ 919A              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  80+ 919A              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  81+ 919A              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  82+ 919A
# file closed: ./Variables/constant_equates.asm
 692  919A                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 919A              ;	PAGE 0 Map to variable anmes
   2+ 919A              ;	PAGE 0 Map to variable anmes
   3+ 919A              ;
   4+ 919A              ;
   5+ 919A              ;
   6+ 919A              ;	06		T1
   7+ 919A              ;	07
   8+ 919A              ;	08		SC1					Screen Hi
   9+ 919A              ;	09							XX16 Matrix
  10+ 919A              ;	0A							XX16+1
  11+ 919A              ;	0B							XX16+2
  12+ 919A              ;	0C							XX16+3
  13+ 919A              ;	0D                          XX16+4
  14+ 919A              ;	0E                          XX16+5
  15+ 919A              ;	0F							XX16+6
  16+ 919A              ;	10		varP				XX16+7
  17+ 919A              ;	11		varP				XX16+8
  18+ 919A              ;	12                          XX16+9
  19+ 919A              ;	13                          XX16+10
  20+ 919A              ;	14							XX16+11
  21+ 919A              ;	15                          XX16+12
  22+ 919A              ;	16                          XX16+13
  23+ 919A              ;	17                          XX16+14
  24+ 919A              ;	17                          XX16+14
  25+ 919A              ;	18                          XX16+15
  26+ 919A              ;	19
  27+ 919A              ;	1A
  28+ 919A              ;	1B
  29+ 919A              ;	1C
  30+ 919A              ;	1D
  31+ 919A              ;	1E							XX0
  32+ 919A              ;	1F                          XX0+1
  33+ 919A              ;	20		INF                 XX0+2
  34+ 919A              ;	21      INF+1               XX0+3
  35+ 919A              ;	22      varV                XX0+4
  36+ 919A              ;	23      varV +1             XX0+5
  37+ 919A              ;	24		XXlo                XX0+6
  38+ 919A              ;	25		XXHi
  39+ 919A              ;	26		YYlo
  40+ 919A              ;	27		YYHi
  41+ 919A              ;	28
  42+ 919A              ;	29
  43+ 919A              ;	2A		BETA (pitch done)
  44+ 919A              ;	2B		BET1 lower7 magnitude
  45+ 919A              ;	2C		XC
  46+ 919A              ;	2D		YC
  47+ 919A              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 919A              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 919A              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 919A              ;	30		ECM Active
  51+ 919A              ;	31		ALP1
  52+ 919A              ;	32		ALP2
  53+ 919A              ;	33		ALP2FLIP
  54+ 919A
  55+ 919A              ;	36		Z1					XX15+2yscaled
  56+ 919A              ;	37		                    XX15+3ysign
  57+ 919A              ;	38		                    XX15+4zscaled
  58+ 919A              ;	39							XX15+5zsign
  59+ 919A              ;	3A		XX12				xplot for star
  60+ 919A              ;	3B
  61+ 919A              ;	3C
  62+ 919A              ;	3D
  63+ 919A              ;	3E
  64+ 919A              ;	3F
  65+ 919A              ;	40		varKlo
  66+ 919A              ;	41		varKmid
  67+ 919A              ;	42		varKHi
  68+ 919A              ;	43		varKVeryHi+Sign
  69+ 919A              ;	44
  70+ 919A              ;	45		MSTG				MissileTarget
  71+ 919A              ;	46		INWK				; Inner working space of 37 bytes
  72+ 919A              ;	47		INWK
  73+ 919A              ;	48		INWK
  74+ 919A              ;	49		INWK
  75+ 919A              ;	4A		INWK
  76+ 919A              ;	4B		INWK
  77+ 919A              ;	4C		INWK
  78+ 919A              ;	4D		INWK
  79+ 919A              ;	4E		INWK
  80+ 919A              ;	4F		INWK+9
  81+ 919A              ;	50		INWK
  82+ 919A              ;	51		INWK
  83+ 919A              ;	52		INWK
  84+ 919A              ;	53		INWK
  85+ 919A              ;	54		INWK
  86+ 919A              ;	55		INWK
  87+ 919A              ;	56		INWK
  88+ 919A              ;	57		INWK
  89+ 919A              ;	58		INWK
  90+ 919A              ;	59		INWK
  91+ 919A              ;	5A		INWK
  92+ 919A              ;	5B		INWK
  93+ 919A              ;	5C		INWK
  94+ 919A              ;	5D		INWK
  95+ 919A              ;	5E		INWK
  96+ 919A              ;	5F		INWK
  97+ 919A              ;	60		INWK
  98+ 919A              ;	61		INWK
  99+ 919A              ;	62		INWK
 100+ 919A              ;	63		INWK
 101+ 919A              ;	64		INWK
 102+ 919A              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 919A              ;	66		INWK
 104+ 919A              ;	67		INWK				XX19
 105+ 919A              ;	68		INWK
 106+ 919A              ;	69		INWK
 107+ 919A              ;	6A		INWK36
 108+ 919A              ;	6B
 109+ 919A              ;	6C		QQ15				Current Seed
 110+ 919A              ;	6D		QQ15+1
 111+ 919A              ;	6E		QQ15+2
 112+ 919A              ;	6F		QQ15+3
 113+ 919A              ;	70		QQ15+4
 114+ 919A              ;	71
 115+ 919A              ;	72		XX18   xlo			QQ17
 116+ 919A              ;	73		XX18+1 xhi
 117+ 919A              ;	74		XX18+2 xsgn
 118+ 919A              ;	75		XX18   ylo
 119+ 919A              ;	76		XX18+1 yhi
 120+ 919A              ;	77		XX18+2 ysgn
 121+ 919A              ;	78		XX18   zlo
 122+ 919A              ;	79		XX18+1 zhi
 123+ 919A              ;	7A		XX18+2 zsgn
 124+ 919A              ;	7B		BET2				Pitch Sign
 125+ 919A              ;	7C		BET2FLIP
 126+ 919A              ;	7D		DELTA
 127+ 919A              ;	7E		DELT4Lo
 128+ 919A              ;	7F		DELT4Hi
 129+ 919A              ;	80
 130+ 919A              ;	81		varQ
 131+ 919A              ;	82		varR
 132+ 919A              ;	83		varS
 133+ 919A              ;	84		XSAV
 134+ 919A              ;	85		YSAV
 135+ 919A              ;	86		XX17
 136+ 919A              ;	87		MenuIdMax		QQ11
 137+ 919A              ;	88		ZZDust
 138+ 919A              ;	89
 139+ 919A              ;	8A		MCNT			Move Count
 140+ 919A              ;	8B		ALPHA
 141+ 919A              ;	8C		TYPE
 142+ 919A              ;	8D
 143+ 919A              ;	8E		DockedFlag		QQ12
 144+ 919A              ;	8F
 145+ 919A              ;	96		XX4				Nbr of Normals Visible
 146+ 919A              ;
 147+ 919A              ;   9F      POINT
 148+ 919A              ;	D0
 149+ 919A              ;	D1		varT
 150+ 919A              ;array list of each face during draw flagged visible or not
 151+ 919A              ;	D2      XX2
 152+ 919A              ;	D3      XX2+1
 153+ 919A              ;	D4      XX2+2
 154+ 919A              ;	D5      XX2+3
 155+ 919A              ;	D6      XX2+4
 156+ 919A              ;	D7      XX2+5
 157+ 919A              ;	D8      XX2+6
 158+ 919A              ;	D9      XX2+7
 159+ 919A              ;	DA      XX2+8
 160+ 919A              ;	DB      XX2+9
 161+ 919A              ;	DC      XX2+10
 162+ 919A              ;	DD      XX2+11
 163+ 919A              ;	DE      XX2+12
 164+ 919A              ;	DF		XX2+13
 165+ 919A              ;	E0		XX2+14
 166+ 919A              ;	E1		XX2+15
 167+ 919A              ;	E2
 168+ 919A              ;	E3
 169+ 919A              ;	E4
 170+ 919A              ;	E5
 171+ 919A              ;	E6
 172+ 919A              ;	E7
 173+ 919A              ;	E8
 174+ 919A              ;	E9
 175+ 919A              ;	EA
 176+ 919A              ;	EB
 177+ 919A              ;	EC
 178+ 919A              ;	ED
 179+ 919A              ;	EE
 180+ 919A              ;	8F
 181+ 919A
 182+ 919A 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 919C 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 919E              ; Variables to simulate 6502 registers until code fixed
 185+ 919E              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 919E 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 919F 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 91A0 00           regA		DB	0
 189+ 91A1
 190+ 91A1
 191+ 91A1 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 91A2 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 91A4 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 91A6
 195+ 91A6
 196+ 91A6
 197+ 91A6              ;XX16		DS	16				; 16 byte Matrix
 198+ 91A6
 199+ 91A6              P0INWK							; page 0 & 46
 200+ 91A6              p0INWK31						; page 0 & 65
 201+ 91A6              P0INWK36						; PAGE 0 &6A
 202+ 91A6
 203+ 91A6 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 91A7              LastNormalVisible	equ	XX4
 205+ 91A7              varXX4              equ XX4
 206+ 91A7
 207+ 91A7
 208+ 91A7
 209+ 91A7 00           PATG		DB	0				; 6502 &03C9
 210+ 91A8 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 91AA
 212+ 91AA
 213+ 91AA 00 00 00...  UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 91CE 00 00 00...  HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 920E
 216+ 920E              ; Present System Variables
 217+ 920E
 218+ 920E 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 920F 20           RandomSeed1				DB	32	; 01
 220+ 9210 0C           RandomSeed2				DB	12			; 02
 221+ 9211 42           RandomSeed3				DB	66			; 03
 222+ 9212
 223+ 9212 00           varT1					DB	0				; 06
 224+ 9213 00           SClo					DB 0				; 07
 225+ 9214 00           SChi					DB 0				; 08
 226+ 9215 00           varP					DB 0 				; 10	XX16+7
 227+ 9216 00           varPhi					DB 0 				; 11	XX16+8
 228+ 9217 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 9218              varPp1                  equ varPhi
 230+ 9218              varPp2                  equ varPhi2
 231+ 9218 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 9219 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 921A              UnivPointer				equ	UnivPointerLo
 234+ 921A 00           varV					DB 0				; 22                          XX0+4
 235+ 921B 00           varVHi					DB 0				; 23                          XX0+5
 236+ 921C 00           varXXlo                 DB 0                ; 24
 237+ 921D 00           varXXHi                 DB 0                ; 25
 238+ 921E              varXX					equ	varXXlo
 239+ 921E 00           YYlo                    DB 0                ; 26
 240+ 921F 00           YYHi                    DB 0                ; 27
 241+ 9220              varYY					equ	YYlo
 242+ 9220              											;	28
 243+ 9220              											;	29
 244+ 9220              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 9220 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 9221 00           JSTY                    DB  0               ; Joystick analog
 247+ 9222 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 9223 00           BET2                    DB  0               ;            climb sign
 249+ 9224 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 9225 1F           BET1MAXC                DB  31              ; max climb
 251+ 9226 E1           BET1MAXD                DB  -31             ; max dive
 252+ 9227 00           XC						DB	0               ; 2C
 253+ 9228 00           YC						DB 	0               ; 2D
 254+ 9229 00           OuterHyperCount			DB 	0				; 2E		TODO Replace with 16 bit counter later
 255+ 922A 00           InnerHyperCount			DB 	0				; 2F
 256+ 922B 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 922C 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 922E
 259+ 922E 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude
 260+ 922F 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 9230 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 9231 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 9232 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 9233
 265+ 9233 00 00        MissileTarget			DW	0				; 45
 266+ 9235 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 267+ 925A
 268+ 925A              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 269+ 925A              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 270+ 925A              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 271+ 925A 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 272+ 925B              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 273+ 925B
 274+ 925B
 275+ 925B 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 276+ 9260              											;	6D		QQ15+1
 277+ 9260              											;	6E		QQ15+2
 278+ 9260              											;	6F		QQ15+3
 279+ 9260              											;	70		QQ15+4
 280+ 9260              											;	71		QQ15+5
 281+ 9260 00           QQ17					DB	0				;   72
 282+ 9261 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 283+ 9262 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 284+ 9263 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 285+ 9264 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 286+ 9265 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 287+ 9266 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 288+ 9267 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 289+ 9268 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 290+ 9269 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 291+ 926A
 292+ 926A 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 293+ 926B 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 294+ 926C 00           DELT4Lo					DB 	0				; 7E
 295+ 926D 00           DELT4Hi					DB 	0				; 7F
 296+ 926E              DELTA4                  equ                 DELT4Lo
 297+ 926E
 298+ 926E
 299+ 926E              ; Not thise must be in this order else 16 bit fetches will fail
 300+ 926E 00           varU                    DB  0               ;   80
 301+ 926F 00           varQ					DB  0 				;	81
 302+ 9270 00           varR					DB  0 				;	82
 303+ 9271 00           varS					DB  0 				;	83
 304+ 9272              varRS                   equ varR
 305+ 9272
 306+ 9272 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 307+ 9274
 308+ 9274 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 309+ 9275 00           YSAV                    DB  0               ; 85
 310+ 9276 00           XX17					DB	0				; 86
 311+ 9277              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 312+ 9277              varXX17                 equ  XX17
 313+ 9277 00           ScreenChanged           DB  0
 314+ 9278 00           ScreenIndex             DB  0
 315+ 9279 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 316+ 927A                                                          ; 7    6    5    4     3    2        1    0
 317+ 927A                                                          ; Up   Down Left Right Home Recentre
 318+ 927A 00           InvertedYAxis           DB  0
 319+ 927B 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 320+ 927C              											; Bit 7 Set  ShortRangeChart    $80
 321+ 927C              											; Bit 6 Set  Galactic Chart     $40
 322+ 927C              											; Bit 5 Set  Market Place       $20
 323+ 927C              											; Bit 4 Set  Status Screen      $10
 324+ 927C              											; Bit 3 Set  Display Inventory  $08
 325+ 927C                                                          ; Bit 2 Set  Planet Data        $04
 326+ 927C                                                          ; View bit combinations if the ones above not matched
 327+ 927C                                                          ; bits 1 0
 328+ 927C                                                          ;      1 1  Front view , i.e. $03
 329+ 927C                                                          ;      1 0  Aft View          $02
 330+ 927C                                                          ;      0 1  Left View         $01
 331+ 927C                                                          ;      0 0  Right view        $00
 332+ 927C              											; Bit 0 Set  Data On System
 333+ 927C              											; 0  Space View (Not a menu)
 334+ 927C 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 335+ 927D 00           XX13                    DB  0               ;   89
 336+ 927E 00           MCNT					DB 	0				; 8A
 337+ 927F 00           TYPE					DB	0				; 8C used for ship type in drawing
 338+ 9280 00           ALPHA					DB	0				; 8D
 339+ 9281 00           DockedFlag				DB	0				; 8E
 340+ 9282 00           GamePaused              DB  0
 341+ 9283 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 342+ 9284 00           varCNT                  DB  0               ; 93
 343+ 9285 00           varRAT                  DB  0               ; 99
 344+ 9286 00           varRAT2                 DB  0               ; 9A
 345+ 9287
 346+ 9287 00           varK					DB	0				; 40
 347+ 9288 00           varKp1					DB	0				; 41
 348+ 9289 00           varKp2					DB	0				; 42
 349+ 928A 00           varKp3					DB	0				; 43
 350+ 928B
 351+ 928B 00           varK2                   DB  0               ; 9B
 352+ 928C 00           varK2p1                 DB  0               ; 9C K2 plus 1
 353+ 928D 00           varK2p2                 DB  0               ; 9D K2 plus 2
 354+ 928E 00           varK2p3                 DB  0               ; 9E K2 plus 3
 355+ 928F
 356+ 928F 00           Point                   DB  0               ; 9F      POINT
 357+ 9290
 358+ 9290 00           varT					DB	0				; D1
 359+ 9291
 360+ 9291 00 00 00 00  varK3					DS	4				; D2
 361+ 9295 00           varK3p2					DB	0				; 42
 362+ 9296 00           varK3p3					DB	0				; 43
 363+ 9297              varK3p1					equ varK3+1			; D3
 364+ 9297 00 00 00 00  varK4					DS	4				; E0
 365+ 929B              varK4p1					equ varK4+1			; D3
 366+ 929B
 367+ 929B              ;PlayerData:
 368+ 929B 00           PlayerForwardSheild0	DB	0 ; ?????
 369+ 929C 00           PlayerForwardSheild1    DB	0
 370+ 929D 00           PlayerForwardSheild2    DB	0
 371+ 929E
 372+ 929E
 373+ 929E              ;Heap
 374+ 929E
 375+ 929E 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 376+ 92A0 00 00 00...  HeapData				DS	50
 377+ 92D2              ; Contains 				X 16 bit, Y 16 bit
 378+ 92D2              ;RuntimeData:
 379+ 92D2              HeapHead				equ HeapStart
 380+ 92D2
 381+ 92D2 00 00 00...  FRIN					DS FreeListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 382+ 92E4              FreeUniverseSlotList    EQU FRIN
 383+ 92E4 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 384+ 92E5 00           MANY					DB	0				; &031E array of ship types???
 385+ 92E6 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 386+ 92E7 00           						DB	0				; &0321	Speculative?
 387+ 92E8 00           						DB	0				; &0322	Speculative?
 388+ 92E9 00           						DB	0				; &0323	Speculative?
 389+ 92EA 00           						DB	0				; &0324	Speculative?
 390+ 92EB 00           						DB	0				; &0325	Speculative?
 391+ 92EC 00           						DB	0				; &0326	Speculative?
 392+ 92ED 00           						DB	0				; &0327	Speculative?
 393+ 92EE 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 394+ 92EF 00           						DB	0				; &0329	MANY + 11 Speculative?
 395+ 92F0 00           				        DB	0				; &032A	MANY + 12 Speculative?
 396+ 92F1 00           				        DB	0				; &032B	MANY + 13 Speculative?
 397+ 92F2 00           				        DB	0				; &032C	MANY + 14 Speculative?
 398+ 92F3 00           				        DB	0				; &032D	MANY + 15 Speculative?
 399+ 92F4 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 400+ 92F5 00           				        DB	0				; &032F	MANY + 17 Speculative?
 401+ 92F6 00           				        DB	0				; &0330	MANY + 18 Speculative?
 402+ 92F7 00           				        DB	0				; &0331	MANY + 19 Speculative?
 403+ 92F8 00           						DB	0				; &0332	MANY + 20 Speculative?
 404+ 92F9 00           				        DB	0				; &0333	MANY + 21 Speculative?
 405+ 92FA 00           				        DB	0				; &0334	MANY + 22 Speculative?
 406+ 92FB 00           				        DB	0				; &0335	MANY + 23 Speculative?
 407+ 92FC 00           				        DB	0				; &0336	MANY + 24 Speculative?
 408+ 92FD 00           				        DB	0				; &0337	MANY + 25 Speculative?
 409+ 92FE 00           				        DB	0				; &0338	MANY + 26 Speculative?
 410+ 92FF 00           				        DB	0				; &0339	MANY + 27 Speculative?
 411+ 9300 00           				        DB	0				; &033A	MANY + 28 Speculative?
 412+ 9301 00           				        DB	0				; &033B	MANY + 29 Speculative?
 413+ 9302 00           				        DB	0				; &033C	MANY + 30 Thargoids
 414+ 9303 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 415+ 9304 00           JunkCount				DB  0				; $033E
 416+ 9305 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 417+ 9306 00           CabinTemp				DB	0				; $0342
 418+ 9307 00           MissileArmedStatus		DB	0				; 0344 MSAR
 419+ 9308 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 420+ 9309 00           GunTemperature			DB	0				; 0347	GNTMP
 421+ 930A 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 422+ 930B 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 423+ 930C 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 424+ 930D 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 425+ 930E 00           JoystickX				DB	0				; 034C JSTX
 426+ 930F 00           JoystickY				DB	0				; 034D JSTY
 427+ 9310 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 428+ 9311 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 429+ 9312 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 430+ 931A 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 431+ 931B 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 432+ 931C              											; Bit mask XXXX10XX - Thargoid plan mission
 433+ 931C 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 434+ 931D 00           PresentSystemY			DB  0
 435+ 931E 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 436+ 9324 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 437+ 9325 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 438+ 9326              ;036C to D???
 439+ 9326 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 440+ 932D              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 441+ 932D              ;  #&5 Does J reverse both joystick channels
 442+ 932D              ;  #&4 Does Y reverse joystick Y channel			03CB
 443+ 932D              ;  #&3 Does F toggle flashing information			03CA
 444+ 932D              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 445+ 932D              ;  #&1 Does A toggle keyboard auto-recentering ?
 446+ 932D              ;  #&0 Caps-lock toggles keyboard flight damping
 447+ 932D 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 448+ 932E 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 449+ 932F 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 450+ 933F 00           AlienItemsAvaliability  DB	0				; 039D
 451+ 9340 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 452+ 9341 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 453+ 9343 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 454+ 9344              											;
 455+ 9344 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 456+ 9345 00           ForeShield				DB	0				; 03A5
 457+ 9346 00           AftShield				DB	0				; 03A6
 458+ 9347 00           PlayerEnergy			DB	0				; 03A7
 459+ 9348 00           CompassX				DB	0				; 03A8
 460+ 9349 00           CompassY				DB	0				; 03A9
 461+ 934A 00           MarketPrice				DB	0				; 03AA QQ24
 462+ 934B 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 463+ 934C 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 464+ 934D 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 465+ 934E 00           GovPresentSystem		DB	0				; 03AE Govenment
 466+ 934F 00           TekPresentSystem		DB	0				; 03AF Technology
 467+ 9350 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 468+ 9352              											; this is ship lines stack pointer so may be redundant with paging
 469+ 9352              											; LS = line stack so we will have one for now to remove later
 470+ 9352 00 00 00...  WorkingSeeds			DS	6
 471+ 9358 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 472+ 935E 00           DisplayEcononmy			DB	0				; 03B8
 473+ 935F 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 474+ 9360 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 475+ 9361 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 476+ 9363 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 477+ 9365 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 478+ 9367 00 00        DisplayRadius			DW	0
 479+ 9369 00           TargetPlanetX			DB	0               ; 03C1
 480+ 936A 00           TargetPlanetY			DB	0               ; 03C2
 481+ 936B 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 482+ 936C 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 483+ 936D 00           NubmerOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 484+ 936E
 485+ 936E 00           CompassColor			DB	0				; 03C5
 486+ 936F 00           SoundToggle				DB	0				; 03C6
 487+ 9370 00           KeyboardRecenterToggle	DB	0				; 03C8
 488+ 9371 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 489+ 9372 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 490+ 9373 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 491+ 9374 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 492+ 9375 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 493+ 9376 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 494+ 9377
 495+ 9377              ; Working Data
 496+ 9377
 497+ 9377              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 498+ 9377              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 499+ 9377              ; $0925 =	EQUW page9+37* 1
 500+ 9377              ; $094A =	EQUW page9+37* 2
 501+ 9377              ; $096F =	EQUW page9+37* 3
 502+ 9377              ; $0994 =	EQUW page9+37* 4
 503+ 9377              ; $09B9 =	EQUW page9+37* 5
 504+ 9377              ; $09DE =	EQUW page9+37* 6
 505+ 9377              ; $0A03 =	EQUW page9+37* 7
 506+ 9377              ; $0A28 =	EQUW page9+37* 8
 507+ 9377              ; $0A4D =	EQUW page9+37* 9
 508+ 9377              ; $0A72 =	EQUW page9+37*10
 509+ 9377              ; $0A97 =	EQUW page9+37*11
 510+ 9377              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 511+ 9377
 512+ 9377
 513+ 9377
 514+ 9377              ; 0b00 is start address of data to save
 515+ 9377 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 516+ 9378
 517+ 9378 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 518+ 937A 00 00        CommanderLoadAddress	DW	0				;0C03
 519+ 937C 00 00        LengthOfFile			DW	0				;0C0B
 520+ 937E 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 521+ 9380
 522+ 9380 00 00 00...  EdgesBuffer				DS 50
 523+ 93B2              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 524+ 93B2              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 525+ 93B2
 526+ 93B2 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 527+ 93F8              ShipLineStackTop		equ $ - ShipLineStack
 528+ 93F8
 529+ 93F8 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 530+ 94B8              ; LSX vector overlaps with LSO
 531+ 94B8 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 532+ 94B9 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 533+ 94BA
 534+ 94BA              ; Star Positions are 16 bit 3d coordinates
 535+ 94BA 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 536+ 9526 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 537+ 954A 00           varStarX                DB  0
 538+ 954B 00           varStarY                DB  0
 539+ 954C 00 00 00...  varDustX                DS MaxNumberOfStars *2
 540+ 9570 00 00 00...  varDustY                DS MaxNumberOfStars *2
 541+ 9594 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 542+ 95B8
 543+ 95B8
 544+ 95B8              SpeedoStart             equ $84D1
 545+ 95B8 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 545+ 95BC 04 04 05 06
 545+ 95C0 06 07 08 09
 545+ 95C4 0A 0A 0B 0C
 545+ 95C8 0D 0E 0E 0F
 545+ 95CC 10 10 11 12
 545+ 95D0 13 14 14 15
 545+ 95D4 16 17 18 18
 545+ 95D8 19 1A 1A 1B
 545+ 95DC 1C 1C 1D 1E
 545+ 95E0 1F
 546+ 95E1
 547+ 95E1              DialMiddleXPos          equ $E1
 548+ 95E1              RollMiddle              equ $8AE0
 549+ 95E1              PitchMiddle             equ $92E0
 550+ 95E1
 551+ 95E1              MakeInnocentMacro:		MACRO
 552+ 95E1 ~            						xor		a
 553+ 95E1 ~            						ld		(FugitiveInnocentStatus),a
 554+ 95E1              						ENDM
 555+ 95E1
 556+ 95E1              NoEscapePodMacro:		MACRO
 557+ 95E1 ~            						xor		a
 558+ 95E1 ~            						ld		(EscapePod),a
 559+ 95E1              						ENDM
 560+ 95E1
 561+ 95E1              MaxFuelLevel            EQU     $46
 562+ 95E1              MaxFuelMacro:			MACRO
 563+ 95E1 ~            						ld		a,MaxFuelLevel
 564+ 95E1 ~            						ld		(Fuel),a
 565+ 95E1              						ENDM
 566+ 95E1
 567+ 95E1              MaxThrottle:            MACRO
 568+ 95E1 ~                                    ld      a,(SHIPMAXSPEED)
 569+ 95E1 ~                                    ld      (DELTA),a
 570+ 95E1 ~                                    ld      d,a
 571+ 95E1 ~                                    ld      e,4
 572+ 95E1 ~                                    mul
 573+ 95E1 ~                                    ld      (DELT4Lo),de
 574+ 95E1                                      ENDM
 575+ 95E1
 576+ 95E1              ZeroThrottle:           MACRO
 577+ 95E1 ~                                    xor     a
 578+ 95E1 ~                                    ld      (DELTA),a
 579+ 95E1 ~                                    ld      (DELT4Lo),a
 580+ 95E1 ~                                    ld      (DELT4Lo+1),a
 581+ 95E1                                      ENDM
 582+ 95E1
# file closed: ./Variables/general_variables.asm
 693  95E1                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 95E1 00           AutoDocking				DB	0				; $033F
   2+ 95E2 00           PlayerECM				DB	0				; $0340
   3+ 95E3 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 95E4 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 95E5 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 95E9 19           Fuel					DB	25				; 0365  QQ14
   7+ 95EA 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 95EE 46           CargoBaySize			DB	70				; 036E
   9+ 95EF 00           CargoRunningLoad        DB  0
  10+ 95F0 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 95F4 00 00 00 00
  10+ 95F8 00 00 00 00
  10+ 95FC 00 00 00 00
  11+ 9600              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9600              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9600              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9600              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9600
  16+ 9600              QQ20                    equ CargoTonnes
  17+ 9600 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  18+ 961A              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  19+ 961A              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  20+ 961A              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  21+ 961A              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  22+ 961A              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  23+ 961A              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  24+ 961A 01           FuelScoopsBarrelStatus	DB	1				; 0381
  25+ 961B
# file closed: ./Variables/EquipmentVariables.asm
 694  961B
 695  961B                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 961B              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 961B              doRND2:
   3+ 961B A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 961C              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 961C              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 961C 3A 0E 92     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 961F CB 17                                rl		a								; Rotate L including carry
   8+ 9621 4F                                   ld		c,a								; c =  double lo
   9+ 9622 21 10 92     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9625 8E                                   adc		a,(hl)							; RAND+2
  11+ 9626 32 0E 92     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9629 08           .SaveBtoSeed2:          ex		af,af'
  13+ 962A 79                                   ld		a,c
  14+ 962B 32 10 92                             ld		(RandomSeed2),a
  15+ 962E 08                                   ex		af,af'
  16+ 962F 3A 0F 92                             ld		a,(RandomSeed1)
  17+ 9632 4F                                   ld		c,a								; C = Seed1
  18+ 9633 21 11 92     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9636 8E                                   adc		a,(hl)
  20+ 9637 32 0F 92                             ld		(RandomSeed1),a
  21+ 963A 08                                   ex		af,af'
  22+ 963B 79                                   ld		a,c
  23+ 963C 32 11 92                             ld		(RandomSeed3),a
  24+ 963F 08                                   ex		af,af'
  25+ 9640 C9                                   ret
  26+ 9641
  27+ 9641              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9641 06 04        	ld		b,4
  29+ 9643 21 FF C1     	ld		hl,UbnkLineArray				; line data
  30+ 9646              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9646              EE55:
  32+ 9646 CD 1C 96     	call	doRND							; get random
  33+ 9649 77           	ld		(hl),a							; (XX19),Y
  34+ 964A 23           	inc		hl
  35+ 964B 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 964D C9               ret
  37+ 964E
# file closed: ./Variables/random_number.asm
 696  964E                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 964E 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9652 58 59 53 45
   1+ 9656 45 44
   2+ 9658 21 1E 93     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 965B 11 5B 92                             ld		de,SystemSeed
   4+ 965E ED A0        copy_seed:		        ldi
   5+ 9660 ED A0                                ldi
   6+ 9662 ED A0                                ldi
   7+ 9664 ED A0                                ldi
   8+ 9666 ED A0                                ldi
   9+ 9668 ED A0                                ldi
  10+ 966A C9                                   ret
  11+ 966B
  12+ 966B 21 5B 92     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 966E 11 1E 93                             ld		de,GalaxySeeds
  14+ 9671 18 EB                                jr		copy_seed
  15+ 9673
  16+ 9673 21 1E 93     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9676 11 52 93                             ld		de,WorkingSeeds
  18+ 9679 18 E3                                jr		copy_seed
  19+ 967B
  20+ 967B 21 52 93     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 967E 11 1E 93                             ld		de,GalaxySeeds
  22+ 9681 18 DB                                jr		copy_seed
  23+ 9683
  24+ 9683 21 52 93     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9686 11 5B 92                             ld		de,SystemSeed
  26+ 9689 18 D3                                jr		copy_seed
  27+ 968B
  28+ 968B 21 5B 92     copy_system_to_working: ld		hl,SystemSeed
  29+ 968E 11 52 93                             ld		de,WorkingSeeds
  30+ 9691 18 CB                                jr		copy_seed
  31+ 9693
  32+ 9693              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 9693 CD 96 96     		call	.NextStep					; This logic means we hard code x4
  34+ 9696              .NextStep:
  35+ 9696 CD 99 96     		call	process_seed				; This logic means we hard code x2
  36+ 9699              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9699 3A 5B 92     		ld		a,(SystemSeed)				; QQ15
  38+ 969C B7           		or		a							; clear carry flag
  39+ 969D 21 5D 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 96A0 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 96A1 47           		ld		b,a							; partial sum lo
  42+ 96A2 3A 5C 92     		ld		a,(SystemSeed+1)
  43+ 96A5 21 5E 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 96A8 8E           		adc		a,(hl)						; note add with carry
  45+ 96A9 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 96AA 3A 5D 92     		ld		a,(SystemSeed+2)
  47+ 96AD 32 5B 92     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 96B0 3A 5E 92     		ld		a,(SystemSeed+3)
  49+ 96B3 32 5C 92     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 96B6 3A 60 92     		ld		a,(SystemSeed+5)
  51+ 96B9 32 5E 92     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 96BC 3A 5F 92     		ld		a,(SystemSeed+4)
  53+ 96BF 32 5D 92     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 96C2 B7           		or		a
  55+ 96C3 78           		ld		a,b
  56+ 96C4 21 5D 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 96C7 86           		add	    a,(hl)
  58+ 96C8 32 5F 92     		ld		(SystemSeed+4),a
  59+ 96CB 79           		ld		a,c
  60+ 96CC 21 5E 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 96CF 8E           		adc		a,(hl)
  62+ 96D0 32 60 92     		ld		(SystemSeed+5),a
  63+ 96D3 C9           		ret
  64+ 96D4
  65+ 96D4              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 96D4 CD D7 96     		call	.NextStep					; This logic means we hard code x4
  67+ 96D7              .NextStep:
  68+ 96D7 CD DA 96     		call	working_seed				; This logic means we hard code x2
  69+ 96DA              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 96DA              ; x = a + c
  71+ 96DA 3A 52 93     		ld		a,(WorkingSeeds)			; QQ15
  72+ 96DD B7           		or		a							; clear carry flag
  73+ 96DE 21 54 93     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 96E1 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 96E2 47           		ld		b,a							; partial sum lo [x]
  76+ 96E3              ; y = b + d	+ carry
  77+ 96E3 3A 53 93     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 96E6 21 55 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 96E9 8E           		adc		a,(hl)						; note add with carry
  80+ 96EA 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 96EB 3A 54 93     		ld		a,(WorkingSeeds+2)
  82+ 96EE 32 52 93     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 96F1 3A 55 93     		ld		a,(WorkingSeeds+3)
  84+ 96F4 32 53 93     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 96F7 3A 57 93     		ld		a,(WorkingSeeds+5)
  86+ 96FA 32 55 93     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 96FD 3A 56 93     		ld		a,(WorkingSeeds+4)
  88+ 9700 32 54 93     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9703 B7           		or		a
  90+ 9704 78           		ld		a,b
  91+ 9705 21 54 93     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9708 86           		add	    a,(hl)
  93+ 9709 32 56 93     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 970C 79           		ld		a,c
  95+ 970D 21 55 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9710 8E           		adc		a,(hl)
  97+ 9711 32 57 93     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9714 C9           		ret
  99+ 9715
 100+ 9715 32           working_distX	DB 50
 101+ 9716 32           working_distY	DB 50
 102+ 9717 00           current_distY	DB 0
 103+ 9718
 104+ 9718 AF           find_present_system:    xor		a
 105+ 9719 32 74 92                             ld		(XSAV),a
 106+ 971C              .CounterLoop:
 107+ 971C 3A 5C 92     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 108+ 971F 4F           	ld		c,a
 109+ 9720              .calcLocaldy:
 110+ 9720 3A 1D 93     	ld		a,(PresentSystemY)
 111+ 9723 47           	ld		b,a								; so b holds Y ccord
 112+ 9724 79           	ld		a,c
 113+ 9725 90           	sub		b
 114+ 9726 CB 7F        	bit		7,a
 115+ 9728 28 02        	jr		z,.positivedy
 116+ 972A              .negativedy:
 117+ 972A ED 44        	neg
 118+ 972C              .positivedy:
 119+ 972C 32 17 97     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 120+ 972F ED 5B 15 97  	ld		de,(working_distX)
 121+ 9733 BA           	cp		d
 122+ 9734 30 24        	jr		nc,.toofar
 123+ 9736              .calcLocaldx:
 124+ 9736 3A 5E 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 125+ 9739 4F           	ld		c,a
 126+ 973A 3A 1C 93     	ld		a,(PresentSystemX)
 127+ 973D 47           	ld		b,a								; so b holds Y ccord
 128+ 973E 79           	ld		a,c
 129+ 973F 90           	sub		b
 130+ 9740 CB 7F        	bit		7,a
 131+ 9742 28 02        	jr		z,.positivedx
 132+ 9744              .negativedx:
 133+ 9744 ED 44        	neg
 134+ 9746              .positivedx:
 135+ 9746 4F           	ld		c,a
 136+ 9747 BB           	cp		e
 137+ 9748 30 10        	jr		nc,.toofar
 138+ 974A              .Nearer:									; we have a closer system
 139+ 974A 3A 17 97     	ld		a,(current_distY)
 140+ 974D 47           	ld		b,a								; we have c to recall Y into b
 141+ 974E ED 43 15 97  	ld		(working_distX),bc
 142+ 9752 C5           	push	bc
 143+ 9753 CD 8B 96     	call 	copy_system_to_working
 144+ 9756 C1           	pop		bc
 145+ 9757 78           	ld		a,b								;
 146+ 9758 B1           	or		c								;
 147+ 9759 C8           	ret		z								; if we have distance 0 then bang on
 148+ 975A              .toofar:
 149+ 975A CD 93 96     	call	next_system_seed
 150+ 975D 3A 74 92     	ld		a,(XSAV)
 151+ 9760 3D           	dec		a
 152+ 9761 FE 00        	cp		0
 153+ 9763 C8           	ret		z
 154+ 9764 32 74 92     	ld		(XSAV),a
 155+ 9767 18 B3        	jr		.CounterLoop
 156+ 9769
 157+ 9769
 158+ 9769              get_planet_data_working_seed:
 159+ 9769 3A 53 93     		ld		a, (WorkingSeeds+1)
 160+ 976C E6 07        		and		7
 161+ 976E 32 5E 93     		ld		(DisplayEcononmy),a
 162+ 9771 3A 54 93     		ld		a, (WorkingSeeds+2)
 163+ 9774 CB 3F        		srl	a
 164+ 9776 CB 3F        		srl	a
 165+ 9778 CB 3F        		srl	a
 166+ 977A CB 3F        		srl	a								; c/8
 167+ 977C E6 07        		and		7
 168+ 977E 32 5F 93     		ld		(DisplayGovernment),a
 169+ 9781 CB 3F        		srl	a
 170+ 9783 FE 00        		cp		0
 171+ 9785 20 08        		jr		nz,.CanBeRich
 172+ 9787              .Fedual:
 173+ 9787 3A 5E 93     		ld		a,(DisplayEcononmy)
 174+ 978A F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 175+ 978C 32 5E 93     		ld		(DisplayEcononmy),a
 176+ 978F              .CanBeRich:
 177+ 978F 3A 5E 93     		ld		a,(DisplayEcononmy)
 178+ 9792 EE 07        		xor		7							; flip economy so Rich is now 7
 179+ 9794 32 60 93     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 180+ 9797 47           		ld		b,a
 181+ 9798 3A 55 93     		ld		a,(WorkingSeeds+3)
 182+ 979B E6 03        		and		3
 183+ 979D 80           		add		a,b
 184+ 979E 32 60 93     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 185+ 97A1 3A 5F 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 186+ 97A4 CB 3F        		srl		a 							; gov/2
 187+ 97A6 47           		ld		b,a
 188+ 97A7 3A 60 93     		ld		a,(DisplayTekLevel)
 189+ 97AA 80           		add		a,b
 190+ 97AB 32 60 93     		ld		(DisplayTekLevel),a			; Tek += gov /2
 191+ 97AE CB 27        		sla		a
 192+ 97B0 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 193+ 97B2 47           		ld		b,a
 194+ 97B3 3A 5E 93     		ld		a,(DisplayEcononmy)
 195+ 97B6 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 196+ 97B7 47           		ld		b,a
 197+ 97B8 3A 5F 93     		ld		a,(DisplayGovernment)
 198+ 97BB 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 199+ 97BC 32 61 93     		ld		(DisplayPopulation),a
 200+ 97BF 3A 5E 93     		ld		a,(DisplayEcononmy)
 201+ 97C2 EE 07        		xor		7							; Onto productivity
 202+ 97C4 C6 03        		add		3							;  (Flipped eco +3)
 203+ 97C6 57           		ld		d,a
 204+ 97C7 3A 5F 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 205+ 97CA C6 04        		add		4
 206+ 97CC 5F           		ld		e,a
 207+ 97CD ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 208+ 97CF 3A 61 93     		ld		a,(DisplayPopulation)		; then we use d for radius
 209+ 97D2 57           		ld		d,a
 210+ 97D3 ED 30        		mul
 211+ 97D5 CB 23        		sla		e
 212+ 97D7 CB 1A        		rr		d
 213+ 97D9 CB 23        		sla		e
 214+ 97DB CB 1A        		rr		d
 215+ 97DD CB 23        		sla		e
 216+ 97DF CB 1A        		rr		d							; de * 8
 217+ 97E1 ED 53 63 93  		ld		(DisplayProductivity),de
 218+ 97E5              .DoRadius:
 219+ 97E5 3A 55 93     		ld		a,(WorkingSeeds+3)
 220+ 97E8 4F           		ld		c,a
 221+ 97E9 3A 57 93     		ld		a,(WorkingSeeds+5)
 222+ 97EC E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 223+ 97EE C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 224+ 97F0 47           		ld		b,a							;
 225+ 97F1 ED 43 67 93  		ld		(DisplayRadius),bc
 226+ 97F5 C9           		ret
 227+ 97F6
# file closed: ./Variables/galaxy_seed.asm
 697  97F6                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 97F6 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 97FA 65 00
   2+ 97FC 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9800 00
   3+ 9801 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9805 74 61 72 79
   3+ 9809 00
   4+ 980A 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 980E 6E 67 00
   5+ 9811 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9815 6F 6D 00
   6+ 9818
   7+ 9818 F6 97 FC 97  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 981C 01 98 0A 98
   7+ 9820 11 98
   8+ 9822              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9822
  10+ 9822 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9826 65 64 00
  11+ 9829 47 72 65 65  ConditionName2		DB "Green",0
  11+ 982D 6E 00
  12+ 982F 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9833 6F 77 00
  13+ 9836 52 65 64 00  ConditionName4		DB "Red",0
  14+ 983A
  15+ 983A 22 98 29 98  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 983E 2F 98 36 98
  16+ 9842              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9842
  18+ 9842 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9846 53 45 49 54
  18+ 984A 49 4C 45 54
  18+ 984E 53 54 4F 4E
  18+ 9852 4C 4F 4E 55
  18+ 9856 54 48 4E 4F
  18+ 985A 41 4C 4C 45
  18+ 985E 58 45 47 45
  18+ 9862 5A 41 43 45
  18+ 9866 42 49 53 4F
  18+ 986A 55 53 45 53
  18+ 986E 41 52 4D 41
  18+ 9872 49 4E 44 49
  18+ 9876 52 45 41 3F
  18+ 987A 45 52 41 54
  18+ 987E 45 4E 42 45
  18+ 9882 52 41 4C 41
  18+ 9886 56 45 54 49
  18+ 988A 45 44 4F 52
  18+ 988E 51 55 41 4E
  18+ 9892 54 45 49 53
  18+ 9896 52 49 4F 4E
  18+ 989A 00
  19+ 989B
  20+ 989B 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 989F 10 00 20 00
  20+ 98A3 40 00 80 00
  20+ 98A7 00 02 00 0A
  20+ 98AB 00 19 00 49
  20+ 98AF FF FF
  21+ 98B1
  22+ 98B1 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 98B5 6C 65 73 73
  22+ 98B9 00
  23+ 98BA 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 98BE 6C 79 20 48
  23+ 98C2 61 72 6D 6C
  23+ 98C6 65 73 73 00
  24+ 98CA 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 98CE 00
  25+ 98CF 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 98D3 61 67 65 00
  26+ 98D7 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 98DB 65 20 41 76
  26+ 98DF 65 72 61 67
  26+ 98E3 65 00
  27+ 98E5 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 98E9 65 74 65 6E
  27+ 98ED 74 00
  28+ 98EF 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 98F3 65 72 6F 75
  28+ 98F7 73 00
  29+ 98F9 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 98FD 6C 79 00
  30+ 9900 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9904 20 45 20 4C
  30+ 9908 20 49 20 54
  30+ 990C 20 45 20 2D
  30+ 9910 2D 2D 00
  31+ 9913 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9917 6C 6F 62 73
  31+ 991B 67 6F 64 00
  32+ 991F 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9923 65 72 00
  33+ 9926
  34+ 9926 B1 98 BA 98  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 992A CA 98 CF 98
  34+ 992E D7 98 E5 98
  34+ 9932 EF 98 F9 98
  34+ 9936 00 99 13 99
  34+ 993A 1F 99
  35+ 993C              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 993C
  37+ 993C
  38+ 993C              getTableText:
  39+ 993C              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 993C              ; ">Note for ranking first 2 bytes are target rank"
  41+ 993C D5           	push	de								; save DE as we will likley need it in caller
  42+ 993D ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 993F ED 31        	add		hl,a
  44+ 9941 5E           	ld		e,(hl)
  45+ 9942 23           	inc		hl
  46+ 9943 56           	ld		d,(hl)							; de = indexed address
  47+ 9944 EB           	ex		de,hl							; flip it to hl
  48+ 9945 D1           	pop		de								; retrieve de
  49+ 9946 C9           	ret										; return with hl as start entry
  50+ 9947
  51+ 9947
  52+ 9947              ;               CF      ZF      Result
  53+ 9947              ;               -----------------------------------
  54+ 9947              ;               0       0       HL > DE
  55+ 9947              ;               0       1       HL == DE
  56+ 9947              ;               1       0       HL < DE
  57+ 9947              ;               1       1       Impossible
  58+ 9947              getRankIndex:
  59+ 9947              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9947              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9947 7A           	ld		a,d
  62+ 9948 B3           	or		e
  63+ 9949 FE 00        	cp		0
  64+ 994B C8           	ret		z								; quicks skip for 0 kills
  65+ 994C AF           	xor 	a
  66+ 994D 21 9B 98     	ld		hl,RankingTable
  67+ 9950              .testLoop:
  68+ 9950 4E           	ld		c,(hl)
  69+ 9951 23           	inc		hl
  70+ 9952 46           	ld		b,(hl)							; bc = ranking
  71+ 9953 E5           	push	hl
  72+ 9954 60           	ld		h,b
  73+ 9955 69           	ld		l,c
  74+ 9956 CD E9 A2     	call	compare16HLDE
  75+ 9959 38 06        	jr		c,.HLLTDE
  76+ 995B              .HLGTEDE									; Found the correct rank
  77+ 995B E1           	pop		hl
  78+ 995C 23           	inc		hl								; move to next value
  79+ 995D 23           	inc		hl
  80+ 995E 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 995F 18 EF        	jr		.testLoop
  82+ 9961              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9961 E1           	pop		hl
  84+ 9962 C9           	ret
  85+ 9963
# file closed: ./Tables/text_tables.asm
 698  9963                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9963 58 00        WordDummy					DB  "X",0
   2+ 9965 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9969 74 00
   3+ 996B 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 996F 74 00
   4+ 9971 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9975 00
   5+ 9976 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 997A 00
   6+ 997B 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 997F 65 00
   7+ 9981 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9985 70 65 00
   8+ 9988 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 998C 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9990 6F 00
  10+ 9992 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9996 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 999A 00
  12+ 999B 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 999F 70 73 00
  13+ 99A2 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 99A6 4D 2E 00
  14+ 99A9 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 99AD 65 6D 00
  15+ 99B0 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 99B4 67 79 00
  16+ 99B7 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 99BB 00
  17+ 99BC 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 99C0 72 00
  18+ 99C2 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 99C6 65 00
  19+ 99C8 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 99CC 00
  20+ 99CD 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 99D1 61 72 79 00
  21+ 99D5 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 99D9 6E 67 00
  22+ 99DC 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 99E0 6F 6D 00
  23+ 99E3 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 99E7 00
  24+ 99E8 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 99EC 6C 64 00
  25+ 99EF 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 99F3 69 6E 67 00
  26+ 99F7 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 99FB 75 74 65 72
  26+ 99FF 73 00
  27+ 9A01 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9A05 72 73 70 61
  27+ 9A09 63 65 00
  28+ 9A0C 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9A10 63 74 69 63
  28+ 9A14 00
  29+ 9A15 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9A19 61 00
  30+ 9A1B 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9A1F 6E 00
  31+ 9A21 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9A25 6E 64 65 72
  31+ 9A29 00
  32+ 9A2A 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9A2E 74 69 76 65
  32+ 9A32 00
  33+ 9A33 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9A37 00
  34+ 9A38 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9A3C 69 6C 65 73
  34+ 9A40 00
  35+ 9A41 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9A45 6F 61 63 74
  35+ 9A49 69 76 65 73
  35+ 9A4D 00
  36+ 9A4E 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9A52 65 73 00
  37+ 9A55 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9A59 6F 72 2F 57
  37+ 9A5D 69 6E 65 73
  37+ 9A61 00
  38+ 9A62 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9A66 72 69 65 73
  38+ 9A6A 00
  39+ 9A6B 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9A6F 6F 74 69 63
  39+ 9A73 73 00
  40+ 9A75 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9A79 69 6E 65 72
  40+ 9A7D 79 00
  41+ 9A7F 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9A83 79 73 00
  42+ 9A86 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9A8A 61 72 6D 73
  42+ 9A8E 00
  43+ 9A8F 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9A93 00
  44+ 9A94 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9A98 72 61 6C 73
  44+ 9A9C 00
  45+ 9A9D 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9AA1 00
  46+ 9AA2 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9AA6 69 6E 75 6D
  46+ 9AAA 00
  47+ 9AAB 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9AAF 53 74 6F 6E
  47+ 9AB3 65 73 00
  48+ 9AB6 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9ABA 6E 20 49 74
  48+ 9ABE 65 6D 73 00
  49+ 9AC2 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9AC6 65 73 00
  50+ 9AC9 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9ACD 67 72 61 6D
  50+ 9AD1 73 00
  51+ 9AD3 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9AD7 73 00
  52+ 9AD9 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9ADD 74 00
  53+ 9ADF 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9AE3 65 00
  54+ 9AE5 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9AE9 74 00
  55+ 9AEB 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9AEF 00
  56+ 9AF0 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9AF3 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9AF7 61 6E 63 65
  57+ 9AFB 00
  58+ 9AFC 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9B00 6F 6D 79 00
  59+ 9B04 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9B08 72 6E 6D 65
  59+ 9B0C 6E 74 00
  60+ 9B0F 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9B13 4C 65 76 65
  60+ 9B17 6C 00
  61+ 9B19 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9B1D 6C 61 74 69
  61+ 9B21 6F 6E 00
  62+ 9B24 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9B28 69 6F 6E 00
  63+ 9B2C 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9B30 69 6F 6E 00
  64+ 9B34 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9B38 73 00
  65+ 9B3A 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9B3E 75 63 74 69
  65+ 9B42 76 69 74 79
  65+ 9B46 00
  66+ 9B47 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9B4B 61 67 65 00
  67+ 9B4F 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9B53 75 73 00
  68+ 9B56 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9B59 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9B5D 00
  70+ 9B5E 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9B62 00
  71+ 9B63 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9B67 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9B6B 6C 79 00
  73+ 9B6E 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9B72 00
  74+ 9B73 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9B77 73 74 72 69
  74+ 9B7B 61 6C 00
  75+ 9B7E 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9B82 63 75 6C 74
  75+ 9B86 75 72 61 6C
  75+ 9B8A 00
  76+ 9B8B 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9B8F 63 68 79 00
  77+ 9B93 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9B97 61 6C 00
  78+ 9B9A 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9B9E 69 2D 47 6F
  78+ 9BA2 76 65 72 6E
  78+ 9BA6 6D 65 6E 74
  78+ 9BAA 00
  79+ 9BAB 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9BAF 61 74 6F 72
  79+ 9BB3 73 68 69 70
  79+ 9BB7 00
  80+ 9BB8 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9BBC 75 6E 69 73
  80+ 9BC0 74 00
  81+ 9BC2 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9BC6 65 64 65 72
  81+ 9BCA 61 63 79 00
  82+ 9BCE 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9BD2 63 72 61 63
  82+ 9BD6 79 00
  83+ 9BD8 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9BDC 6F 72 61 74
  83+ 9BE0 65 20 53 74
  83+ 9BE4 61 74 65 00
  84+ 9BE8 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9BEC 65 00
  85+ 9BEE 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9BF2 74 00
  86+ 9BF4 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9BF8 73 00
  87+ 9BFA 30 00        Word0						DB  "0",0				   ;86
  88+ 9BFC 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9C00 65 74 00
  89+ 9C03 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9C07 65 73 00
  90+ 9C0A 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9C0E 75 63 74 00
  91+ 9C12 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9C16 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9C1A 65 00
  93+ 9C1C 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9C20 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9C24 00
  95+ 9C25 74 00        Wordt						DB  "t",0                  ;94
  96+ 9C27 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9C2A 67 00        Wordg						DB  "g",0                  ;96
  98+ 9C2C 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9C30 69 74 69 74
  98+ 9C34 79 00
  99+ 9C36 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9C3A 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9C3E 6B 00
 101+ 9C40 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9C44 70 00
 102+ 9C46 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9C4A 00
 103+ 9C4B 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9C4F 69 6C 65 00
 104+ 9C53 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9C57 72 64 72 69
 104+ 9C5B 76 65 00
 105+ 9C5E 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9C62 74 61 72 79
 105+ 9C66 00
 106+ 9C67
 107+ 9C67 63 99 65 99  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9C6B 6B 99 71 99
 108+ 9C6F 76 99 7B 99  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9C73 81 99 88 99
 109+ 9C77 8C 99 92 99  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9C7B 96 99 9B 99
 110+ 9C7F A2 99 A9 99  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9C83 B0 99 B7 99
 111+ 9C87 BC 99 C2 99  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9C8B C8 99 CD 99
 112+ 9C8F D5 99 DC 99  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9C93 E3 99 E8 99
 113+ 9C97 EF 99 F7 99  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9C9B 01 9A 0C 9A
 114+ 9C9F 15 9A 1B 9A  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9CA3 21 9A 2A 9A
 115+ 9CA7 33 9A 38 9A  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9CAB 41 9A 4E 9A
 116+ 9CAF 55 9A 62 9A  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9CB3 6B 9A 75 9A
 117+ 9CB7 7F 9A 86 9A  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9CBB 8F 9A 94 9A
 118+ 9CBF 9D 9A A2 9A  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9CC3 AB 9A B6 9A
 119+ 9CC7 C2 9A C9 9A  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9CCB D3 9A D9 9A
 120+ 9CCF DF 9A E5 9A  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9CD3 EB 9A F0 9A
 121+ 9CD7 F3 9A FC 9A  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9CDB 04 9B 0F 9B
 122+ 9CDF 19 9B 24 9B  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9CE3 2C 9B 34 9B
 123+ 9CE7 3A 9B 47 9B  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9CEB 4F 9B 56 9B
 124+ 9CEF 59 9B        					DW  WordMCR																	;68
 125+ 9CF1 5E 9B 63 9B  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9CF5 67 9B 6E 9B
 126+ 9CF9 73 9B 7E 9B                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9CFD 8B 9B 93 9B  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9D01 9A 9B AB 9B
 128+ 9D05 B8 9B C2 9B                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9D09 CE 9B D8 9B
 129+ 9D0D E8 9B EE 9B  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9D11 F4 9B FA 9B
 130+ 9D15 FC 9B 03 9C  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9D19 0A 9C 12 9C
 131+ 9D1D 16 9C 1C 9C                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9D21 20 9C
 132+ 9D23 25 9C 27 9C  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9D27 2A 9C
 133+ 9D29 2C 9C 36 9C  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9D2D 3A 9C 40 9C
 134+ 9D31 46 9C 4B 9C                      DW  WordShip,           WordMissile       ; 101
 135+ 9D35
 136+ 9D35              ; Phrases
 137+ 9D35 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9D39 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9D3C 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9D3F 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9D42 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9D45 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9D48 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9D4B 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9D4E 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9D52 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9D56 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9D5A 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9D5E 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9D62 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9D65 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9D68 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9D6B 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9D6E 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9D71 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9D74 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9D77 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9D7A 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9D7D 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9D80 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9D83 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9D87 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9D8A 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9D8C
 165+ 9D8C 00           TextDummy					DB  0
 166+ 9D8D
 167+ 9D8D 35 9D 39 9D  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9D91 3C 9D
 168+ 9D93 3F 9D 42 9D  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9D97 45 9D
 169+ 9D99 48 9D 4B 9D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9D9D 4E 9D 52 9D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9DA1 56 9D 5A 9D
 171+ 9DA5 5E 9D 62 9D  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9DA9 65 9D
 172+ 9DAB 68 9D 6B 9D  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9DAF 71 9D 6E 9D
 172+ 9DB3 7A 9D 74 9D
 172+ 9DB7 77 9D 7D 9D
 173+ 9DBB 80 9D        					DW  TextLightYears		                                            ; 21 23
 174+ 9DBD 83 9D 87 9D  					DW  Text0LightYears, TextMarketPrices
 175+ 9DC1 8C 9D        					DW  TextDummy;  25
 176+ 9DC3 00 00 00...  TextBuffer			DS	33
 177+ 9DE4
 178+ 9DE4              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9DE4              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9DE4
 181+ 9DE4              CapitaliseString:
 182+ 9DE4              ; ">CapitaliseString hl = address"
 183+ 9DE4              .CapLoop:
 184+ 9DE4 23           	inc		hl
 185+ 9DE5 7E           	ld		a,(hl)
 186+ 9DE6 FE 00        	cp		0
 187+ 9DE8 C8           	ret		z
 188+ 9DE9 FE 5B        	cp		'Z'+1
 189+ 9DEB 30 F7        	jr		nc,.CapLoop
 190+ 9DED FE 41        	cp		'A'
 191+ 9DEF 38 F3        	jr		c,.CapLoop
 192+ 9DF1              .LowerCase:
 193+ 9DF1 C6 20        	add		a,'a'-'A'
 194+ 9DF3 77           	ld		(hl),a
 195+ 9DF4 18 EE        	jr		.CapLoop
 196+ 9DF6
 197+ 9DF6              WordIndexToAddress:
 198+ 9DF6 21 67 9C     	ld		hl,WordIdx
 199+ 9DF9 ED 31        	add		hl,a
 200+ 9DFB ED 31        	add		hl,a
 201+ 9DFD D5           	push	de
 202+ 9DFE 5E           	ld		e,(hl)
 203+ 9DFF 23           	inc		hl
 204+ 9E00 56           	ld		d,(hl)
 205+ 9E01 EB           	ex		de,hl
 206+ 9E02 D1           	pop		de
 207+ 9E03 C9           	ret
 208+ 9E04
 209+ 9E04
 210+ 9E04              expandTokenToString:
 211+ 9E04              ; ">expandTokenToString a = texttoken"
 212+ 9E04 21 8D 9D     	ld		hl,TextTokens
 213+ 9E07 CD 3C 99     	call	getTableText
 214+ 9E0A 11 C3 9D     	ld		de,TextBuffer
 215+ 9E0D              .ReadLoop:
 216+ 9E0D 7E           	ld		a,(hl)
 217+ 9E0E FE 00        	cp		0
 218+ 9E10 28 1B        	jr		z,.ReadDone
 219+ 9E12 E5           	push	hl
 220+ 9E13 D5           	push	de
 221+ 9E14 21 67 9C     	ld		hl,WordIdx
 222+ 9E17 CD 3C 99     	call	getTableText
 223+ 9E1A D1           	pop		de
 224+ 9E1B              .WordExpandLoop:
 225+ 9E1B 7E           	ld		a,(hl)
 226+ 9E1C FE 00        	cp		0
 227+ 9E1E 28 05        	jr		z,.AddSpace
 228+ 9E20              ;.GetChar:
 229+ 9E20 12           	ld		(de),a
 230+ 9E21 13           	inc		de
 231+ 9E22 23           	inc		hl
 232+ 9E23 18 F6        	jr		.WordExpandLoop
 233+ 9E25              .AddSpace:
 234+ 9E25 3E 20        	ld		a,' '
 235+ 9E27 12           	ld		(de),a
 236+ 9E28 13           	inc		de
 237+ 9E29 E1           	pop		hl
 238+ 9E2A 23           	inc		hl
 239+ 9E2B 18 E0        	jr		.ReadLoop
 240+ 9E2D              .ReadDone:
 241+ 9E2D 1B           	dec		de
 242+ 9E2E AF           	xor		a
 243+ 9E2F 12           	ld		(de),a
 244+ 9E30 C9           	ret
 245+ 9E31
# file closed: ./Tables/dictionary.asm
 699  9E31                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9E31 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9E35 53 45 49 54
   1+ 9E39 49 4C 45 54
   1+ 9E3D 53 54 4F 4E
   1+ 9E41 4C 4F 4E 55
   1+ 9E45 54 48 4E 4F
   2+ 9E49 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9E4C 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9E50 45 5A 41 43
   3+ 9E54 45 42 49 53
   3+ 9E58 4F 55 53 45
   3+ 9E5C 53 41 52 4D
   3+ 9E60 41 49 4E 44
   3+ 9E64 49 52 45 41
   4+ 9E68 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9E6C 54 45 4E 42
   4+ 9E70 45 52 41 4C
   4+ 9E74 41 56 45 54
   4+ 9E78 49 45 44 4F
   4+ 9E7C 52 51 55 41
   4+ 9E80 4E 54 45 49
   4+ 9E84 53 52 49 4F
   4+ 9E88 4E
   5+ 9E89
   6+ 9E89              ; TODO Moveinto galaxy data module
   7+ 9E89 00 00 00...  name_expanded	DS 32
   8+ 9EA9 00           				DB 0
   9+ 9EAA
  10+ 9EAA
  11+ 9EAA
  12+ 9EAA              NamingLoop:
  13+ 9EAA 3A 57 93     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9EAD E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9EAF FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9EB1 28 12        	jr		z,.SkipPhrase
  17+ 9EB3 C6 0C        	add		a,12
  18+ 9EB5 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 9EB7 21 31 9E     	ld		hl,name_digrams
  20+ 9EBA ED 31        	add		hl,a
  21+ 9EBC ED A0        	ldi
  22+ 9EBE 7E           	ld		a,(hl)
  23+ 9EBF FE 3F        	cp		'?'
  24+ 9EC1 28 02        	jr		z,.SkipPhrase
  25+ 9EC3              .AddExtra:
  26+ 9EC3 ED A0        	ldi
  27+ 9EC5              .SkipPhrase:
  28+ 9EC5 D5           	push	de
  29+ 9EC6 CD DA 96     	call	working_seed
  30+ 9EC9 D1           	pop		de
  31+ 9ECA C9           	ret
  32+ 9ECB
  33+ 9ECB              ;GetDigramGalaxySeed:
  34+ 9ECB              ;	call	copy_galaxy_to_working
  35+ 9ECB              ;	jr		GetDigramWorkingSeed
  36+ 9ECB              ;GetDigramSystemSeed:
  37+ 9ECB              ;	call	copy_system_to_working
  38+ 9ECB              ;GetDigramWorkingSeed:
  39+ 9ECB              ;; ">GetDigram a = digram seed"
  40+ 9ECB              ;	ld		de,name_expanded
  41+ 9ECB              ;	ld		b,3
  42+ 9ECB              ;	ld		a,(WorkingSeeds)
  43+ 9ECB              ;	and		$40
  44+ 9ECB              ;	jr		z,.SmallSizeName
  45+ 9ECB              ;.LargeSizeName:
  46+ 9ECB              ;	call	NamingLoop
  47+ 9ECB              ;.SmallSizeName:
  48+ 9ECB              ;	call	NamingLoop
  49+ 9ECB              ;	call	NamingLoop
  50+ 9ECB              ;	call	NamingLoop
  51+ 9ECB              ;.DoneName:
  52+ 9ECB              ;	ex		de,hl
  53+ 9ECB              ;	ld		(hl),0
  54+ 9ECB              ;	ex		de,hl
  55+ 9ECB              ;	ret
  56+ 9ECB
  57+ 9ECB
  58+ 9ECB
  59+ 9ECB              ;GetDigramWorkingSeed:
  60+ 9ECB              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9ECB              ;	ld		b,5					; working seed
  62+ 9ECB              ;	ld		de,name_expanded
  63+ 9ECB              ;.ExpansionLoop:
  64+ 9ECB              ;	push	bc
  65+ 9ECB              ;	ld		hl,WorkingSeeds
  66+ 9ECB              ;	ld		a,b
  67+ 9ECB              ;	add		hl,a
  68+ 9ECB              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9ECB              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9ECB              ;	cp		0					; 0 = skip 2 chars
  71+ 9ECB              ;	jr		z,.SkipPhrase
  72+ 9ECB              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9ECB              ;	call	TT27
  74+ 9ECB              ;.SkipPhrase:
  75+ 9ECB              ;	push	de
  76+ 9ECB              ;	call	next_working_seed
  77+ 9ECB              ;	pop		de
  78+ 9ECB              ;	pop		bc
  79+ 9ECB              ;	djnz	GetDigramWorkingSeed
  80+ 9ECB              ;.DoneName:
  81+ 9ECB              ;	ex		de,hl
  82+ 9ECB              ;	ld		(hl),0
  83+ 9ECB              ;	ex		de,hl
  84+ 9ECB              ;	ret
  85+ 9ECB              ;
  86+ 9ECB              ;ExpandToken:
  87+ 9ECB              ;	DE = target
  88+ 9ECB              ;	a = token
  89+ 9ECB              ;
  90+ 9ECB              ;PlanetDigram:
  91+ 9ECB              ;	cp		&A0							; >- 160
  92+ 9ECB              ;	jr		c,MorePage4
  93+ 9ECB              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9ECB              ;	asl		2							; Multiply by 2
  95+ 9ECB              ;	ld		hl, name_digrams2
  96+ 9ECB              ;	add		hl,a
  97+ 9ECB              ;	ld		a,(hl)
  98+ 9ECB              ;	call	ProcessTextToken
  99+ 9ECB              ;	inc		hl
 100+ 9ECB              ;	ld		a,(hl)
 101+ 9ECB              ;	cp		'?'
 102+ 9ECB              ;	ret		z
 103+ 9ECB              ;	call	ProcessTextToken
 104+ 9ECB              ;	ret
 105+ 9ECB              ;MorePage4:
 106+ 9ECB              ;	sub		$A0
 107+ 9ECB              ;ExtraTokenCheck:
 108+ 9ECB              ;	push	de							; save target address
 109+ 9ECB              ;	push	bc
 110+ 9ECB              ;	ld		b,a
 111+ 9ECB              ;	ld		hl,varV
 112+ 9ECB              ;	ld		(VarV),0400
 113+ 9ECB              ;	ld		(varV),a
 114+ 9ECB              ;	ld
 115+ 9ECB              ;
 116+ 9ECB              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9ECB              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9ECB              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9ECB              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9ECB              ;0A                      ASL A		      \ *= 2
 121+ 9ECB              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9ECB              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9ECB              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9ECB              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9ECB              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9ECB              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9ECB              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9ECB              ;
 129+ 9ECB              ;	.TT47	\ more page4, subtract #160
 130+ 9ECB              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9ECB              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9ECB              ;AA                      TAX 		\ copy of word index
 133+ 9ECB              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9ECB              ;85 22                   STA &22		\ V
 135+ 9ECB              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9ECB              ;85 23                   STA &23		\ V+1
 137+ 9ECB              ;A0 00                   LDY #0
 138+ 9ECB              ;8A                      TXA 		\ token = word index
 139+ 9ECB              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9ECB              ;	.TT51	\ counters Y letter, X token
 141+ 9ECB              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9ECB              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9ECB              ;C8                      INY 		\ letter count
 144+ 9ECB              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9ECB              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9ECB              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9ECB              ;	.TT49	\ word ended
 148+ 9ECB              ;C8                      INY
 149+ 9ECB              ;D0 02                   BNE TT59    	\ next word
 150+ 9ECB              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9ECB              ;	.TT59	\ next word
 152+ 9ECB              ;CA                      DEX 		\ token count
 153+ 9ECB              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9ECB              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9ECB              ;98                      TYA
 156+ 9ECB              ;48                      PHA 		\ store Yindex
 157+ 9ECB              ;A5 23                   LDA &23		\ V+1
 158+ 9ECB              ;48                      PHA 		\ correct pointer hi
 159+ 9ECB              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9ECB              ;49 23                   EOR #&23	\ decode '#'
 161+ 9ECB              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9ECB              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9ECB              ;85 23                   STA &23		\ V+1
 164+ 9ECB              ;68                      PLA
 165+ 9ECB              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9ECB              ;C8                      INY 		\ next letter
 167+ 9ECB              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9ECB              ;E6 23                   INC &23		\ V+1
 169+ 9ECB              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9ECB              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9ECB              ;	.TT48 	\ rts
 172+ 9ECB              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9ECB              ;
 174+ 9ECB              ;
 175+ 9ECB              ;
 176+ 9ECB              ;
 177+ 9ECB              ;
 178+ 9ECB              ;
 179+ 9ECB              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9ECB              ;;AA                      TAX		\ copy token to count down
 181+ 9ECB              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9ECB              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9ECB              ;CA                      DEX
 184+ 9ECB              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9ECB              ;CA                      DEX
 186+ 9ECB              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9ECB              ;CA                      DEX
 188+ 9ECB              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9ECB              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9ECB              ;CA                      DEX
 191+ 9ECB              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9ECB              ;CA                      DEX
 193+ 9ECB              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9ECB              ;CA                      DEX
 195+ 9ECB              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9ECB              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9ECB              ;85 72                   STA &72	 	\ QQ17
 198+ 9ECB              ;60                      RTS
 199+ 9ECB              ;CA                      DEX 		\ skip Acc ==7
 200+ 9ECB              ;CA                      DEX
 201+ 9ECB              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9ECB              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9ECB              ;60                      RTS
 204+ 9ECB              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9ECB              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9ECB              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9ECB              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9ECB              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9ECB              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9ECB              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9ECB              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9ECB              ;		\ Token  < 14 or > 31
 213+ 9ECB              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9ECB              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9ECB              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9ECB              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9ECB              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9ECB              ;	.TT42	\ Uppercase to lowercase
 219+ 9ECB              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9ECB              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9ECB              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9ECB              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9ECB              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9ECB              ;	.TT44	\ print character as is with TT26
 225+ 9ECB              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9ECB              ;
 227+ 9ECB              ;	.TT41	\ QQ17 bit7 set
 228+ 9ECB              ;24 72                   BIT &72		\ QQ17
 229+ 9ECB              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9ECB              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9ECB              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9ECB              ;48                      PHA 		\ else store token Acc
 233+ 9ECB              ;8A                      TXA 		\ QQ17 copy
 234+ 9ECB              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9ECB              ;85 72                   STA &72	 	\ QQ17
 236+ 9ECB              ;68                      PLA 		\ restore token
 237+ 9ECB              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9ECB              ;
 239+ 9ECB              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9ECB              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9ECB              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9ECB              ;
 243+ 9ECB              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9ECB              ;A9 15                   LDA #21		\ on right
 245+ 9ECB              ;85 2C                   STA &2C		\ XC
 246+ 9ECB              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9ECB              ;
 248+ 9ECB              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9ECB              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9ECB              ;F0 63                   BEQ TT48	\ rts
 251+ 9ECB              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9ECB              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9ECB              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9ECB              ;48                      PHA 		\ push token
 255+ 9ECB              ;8A                      TXA 		\ QQ17 copy
 256+ 9ECB              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9ECB              ;85 72                   STA &72	 	\ QQ17
 258+ 9ECB              ;68                      PLA 		\ pull token
 259+ 9ECB              ;	.TT74	\ TT26, print character.
 260+ 9ECB              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9ECB              ;
 262+ 9ECB              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9ECB              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9ECB              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9ECB              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9ECB              ;0A                      ASL A		      \ *= 2
 267+ 9ECB              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9ECB              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9ECB              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9ECB              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9ECB              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9ECB              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9ECB              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9ECB              ;
 275+ 9ECB              ;	.TT47	\ more page4, subtract #160
 276+ 9ECB              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9ECB              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9ECB              ;AA                      TAX 		\ copy of word index
 279+ 9ECB              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9ECB              ;85 22                   STA &22		\ V
 281+ 9ECB              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9ECB              ;85 23                   STA &23		\ V+1
 283+ 9ECB              ;A0 00                   LDY #0
 284+ 9ECB              ;8A                      TXA 		\ token = word index
 285+ 9ECB              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9ECB              ;	.TT51	\ counters Y letter, X token
 287+ 9ECB              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9ECB              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9ECB              ;C8                      INY 		\ letter count
 290+ 9ECB              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9ECB              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9ECB              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9ECB              ;	.TT49	\ word ended
 294+ 9ECB              ;C8                      INY
 295+ 9ECB              ;D0 02                   BNE TT59    	\ next word
 296+ 9ECB              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9ECB              ;	.TT59	\ next word
 298+ 9ECB              ;CA                      DEX 		\ token count
 299+ 9ECB              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9ECB              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9ECB              ;98                      TYA
 302+ 9ECB              ;48                      PHA 		\ store Yindex
 303+ 9ECB              ;A5 23                   LDA &23		\ V+1
 304+ 9ECB              ;48                      PHA 		\ correct pointer hi
 305+ 9ECB              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9ECB              ;49 23                   EOR #&23	\ decode '#'
 307+ 9ECB              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9ECB              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9ECB              ;85 23                   STA &23		\ V+1
 310+ 9ECB              ;68                      PLA
 311+ 9ECB              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9ECB              ;C8                      INY 		\ next letter
 313+ 9ECB              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9ECB              ;E6 23                   INC &23		\ V+1
 315+ 9ECB              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9ECB              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9ECB              ;	.TT48 	\ rts
 318+ 9ECB              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9ECB              ;
 320+ 9ECB              ;
 321+ 9ECB              ;
# file closed: ./Tables/name_digrams.asm
 700  9ECB              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 701  9ECB
 702  9ECB              ; Include all maths libraries to test assembly
 703  9ECB                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ 9ECB              addhldesigned:
   2+ 9ECB CB 7C                bit     7,h
   3+ 9ECD 20 03                jr      nz,.noneghl
   4+ 9ECF CD EF A2             call    negate16hl
   5+ 9ED2              .noneghl:
   6+ 9ED2 CB 7A                bit     7,d
   7+ 9ED4 20 03                jr      nz,.nonegde
   8+ 9ED6 CD F6 A2             call    negate16de
   9+ 9ED9              .nonegde:
  10+ 9ED9 19                   add     hl,de                       ; do 2'd c add
  11+ 9EDA AF                   xor     a                           ; assume positive
  12+ 9EDB CB 7C                bit     7,h
  13+ 9EDD C8                   ret     z                           ; if not set then can exit early
  14+ 9EDE CD EF A2             call    negate16hl
  15+ 9EE1 3E FF                ld      a,$FF
  16+ 9EE3 C9                   ret
  17+ 9EE4
# file closed: ./Maths/addhldesigned.asm
 704  9EE4                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ 9EE4
   2+ 9EE4              ; a = value to add
   3+ 9EE4              ; b = offset (equivalent to regX)
   4+ 9EE4              ; returns INWK [x] set to new value
   5+ 9EE4              addINWKbasigned:
   6+ 9EE4 21 0B C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ 9EE7 4F           		ld      c,a                         ; preserve a
   8+ 9EE8 78           		ld		a,b
   9+ 9EE9 ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ 9EEB 79                   ld      a,c                         ; get back a value
  11+ 9EEC E6 80                and     $80                         ; get sign bit from a
  12+ 9EEE 47                   ld      b,a                         ; now b = sign bit of a
  13+ 9EEF 79                   ld      a,c                         ; a = original value
  14+ 9EF0 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ 9EF2              ; hl = unsigned version of INWK0[b]
  16+ 9EF2              ; a = value to add, also in c which will optimise later code
  17+ 9EF2              ; b = sign bit of a ( in old code was varT)
  18+ 9EF2              addhlcsigned:
  19+ 9EF2 5E                   ld      e,(hl)                      ; de = INKK value
  20+ 9EF3 23                   inc     hl
  21+ 9EF4 56                   ld      d,(hl)
  22+ 9EF5 23                   inc     hl                          ; now pointing a sign
  23+ 9EF6 7E                   ld      a,(hl)                      ; a = sign bit
  24+ 9EF7 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ 9EF8 A8                   xor     b                           ; a = resultant sign
  26+ 9EF9 CB 7F                bit     7,a                         ; is it negative?
  27+ 9EFB 28 28                jr      z,.postivecalc
  28+ 9EFD              .negativecalc:
  29+ 9EFD 7C                   ld      a,h
  30+ 9EFE E6 7F                and     SignMask8Bit
  31+ 9F00 67                   ld      h,a                         ; strip high bit
  32+ 9F01 DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ 9F03 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ 9F05 ED 42                sbc     hl,bc
  35+ 9F07 DD 45                ld      b,ixl                       ; get sign back
  36+ 9F09 EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ 9F0A 7E                   ld      a,(hl)                      ;
  38+ 9F0B E6 7F                and     SignMask8Bit
  39+ 9F0D DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ 9F0F F6 80                or      $80                         ; set bit 0
  41+ 9F11 A8                   xor     b                           ; flip bit on sign (var T)
  42+ 9F12 77                   ld      (hl),a
  43+ 9F13 2B                   dec     hl
  44+ 9F14 72                   ld      (hl),d
  45+ 9F15 2B                   dec     hl
  46+ 9F16 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ 9F17 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ 9F18 D8                   ret     c                           ; if carry was set then we can exit now
  49+ 9F19              .nocarry:
  50+ 9F19 CD EF A2             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ 9F1C B0                   or      b                           ; b is still varT
  52+ 9F1D EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ 9F1E 73                   ld      (hl),e
  54+ 9F1F 23                   inc     hl
  55+ 9F20 72                   ld      (hl),d
  56+ 9F21 23                   inc     hl
  57+ 9F22 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ 9F23 EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ 9F24 C9                   ret
  60+ 9F25              .postivecalc:
  61+ 9F25 DD 68                ld      ixl,b
  62+ 9F27 06 00                ld      b,0
  63+ 9F29 19                   add     hl,de
  64+ 9F2A EB                   ex      de,hl
  65+ 9F2B DD B5                or      ixl                         ; we don;t need to recover b here
  66+ 9F2D 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ 9F2E 2B                   dec     hl
  68+ 9F2F 72                   ld      (hl),d
  69+ 9F30 2B                   dec     hl
  70+ 9F31 73                   ld      (hl),e
  71+ 9F32 C9                   ret
  72+ 9F33
  73+ 9F33              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ 9F33              ;MVT1
  75+ 9F33              ;    S = bits 6 to 0 of A
  76+ 9F33              ;    A = sign bit => T
  77+ 9F33              ;    xor sign bit with ink[x] Sign
  78+ 9F33              ;    if negative thn its not an add
  79+ 9F33              ;
  80+ 9F33              ;        and h, 7F
  81+ 9F33              ;        b = 0
  82+ 9F33              ;        c = varS
  83+ 9F33              ;        subtract INW[X]hilo, bc
  84+ 9F33              ;        retain carry
  85+ 9F33              ;        get INKW[x]Sign
  86+ 9F33              ;        and 7F
  87+ 9F33              ;        subtract carry (so will go negtive if negative)
  88+ 9F33              ;        xor bit 7 of h with T to flip bit
  89+ 9F33              ;        write to INKW[x]Sign
  90+ 9F33              ;
  91+ 9F33              ;    else
  92+ 9F33              ;MV10.
  93+ 9F33              ;        add INWK[x]hi,lo, varS
  94+ 9F33              ;        or      sign bit
  95+ 9F33
  96+ 9F33
# file closed: ./Maths/addhlasigned.asm
 705  9F33                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ 9F33              ; Note its big endian
   2+ 9F33 2A E5 95     addDEtoCash:            ld      hl,(Cash)
   3+ 9F36 19                                   add     hl,de
   4+ 9F37 22 E5 95                             ld      (Cash),hl
   5+ 9F3A 11 00 00                             ld      de,0
   6+ 9F3D 2A E7 95                             ld      hl,(Cash+2)
   7+ 9F40 ED 5A                                adc     hl,de
   8+ 9F42 22 E7 95                             ld      (Cash+2),hl
   9+ 9F45 C9                                   ret
  10+ 9F46
  11+ 9F46 2A E5 95     subDEfromCash:          ld      hl,(Cash)
  12+ 9F49 7C                                   ld      a,h
  13+ 9F4A B5                                   or      l
  14+ 9F4B 2A E7 95                             ld      hl,(Cash+2)
  15+ 9F4E B4                                   or      h
  16+ 9F4F B5                                   or      l
  17+ 9F50 C8                                   ret     z               ; No cash return
  18+ 9F51 B7                                   or      a
  19+ 9F52 2A E5 95                             ld      hl,(Cash)
  20+ 9F55 ED 52                                sbc     hl,de
  21+ 9F57 22 E5 95                             ld      (Cash),hl
  22+ 9F5A 11 00 00                             ld      de,0
  23+ 9F5D 2A E7 95                             ld      hl,(Cash+2)
  24+ 9F60 ED 52                                sbc     hl,de
  25+ 9F62 22 E7 95                             ld      (Cash+2),hl
  26+ 9F65                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9F65 CB 7C       >                        bit 	7,h
  26+ 9F67 C2 6B 9F    >                        jp      nz,.ZeroCash
  27+ 9F6A C9                                   ret
  28+ 9F6B 21 00 00     .ZeroCash:              ld      hl,0
  29+ 9F6E 22 E5 95                             ld      (Cash),hl
  30+ 9F71 22 E7 95                             ld      (Cash+2),hl
  31+ 9F74 C9                                   ret
  32+ 9F75
# file closed: ./Maths/Utilities/AddDEtoCash.asm
 706  9F75                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 9F75              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 9F75 2A 70 92                             ld  hl,(varRS)
   3+ 9F78 3A 6F 92                             ld  a,(varQ)
   4+ 9F7B C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 9F7D 11 00 00                             ld  de,0        ; de = XY
   6+ 9F80 47                                   ld  b,a         ; b = Q
   7+ 9F81                                      ShiftHLRight1
   7+ 9F81 CB 3C       >			   srl h
   7+ 9F83 CB 1D       >			   rr  l
   8+ 9F85 CB 20                                sla b
   9+ 9F87 30 03                                jr  nc,.LL126
  10+ 9F89 EB           .LL125:                 ex de,hl
  11+ 9F8A 19                                   add hl,de
  12+ 9F8B EB                                   ex  de,hl       ; de = de + rs
  13+ 9F8C              .LL126:                 ShiftHLRight1
  13+ 9F8C CB 3C       >			   srl h
  13+ 9F8E CB 1D       >			   rr  l
  14+ 9F90 CB 20                                sla b
  15+ 9F92 38 F5                                jr      c,.LL125
  16+ 9F94 20 F6                                jr      nz,.LL126
  17+ 9F96 EB                                   ex      de,hl   ; hl = result
  18+ 9F97 D1 C1                                pop     bc,,de
  19+ 9F99 C9                                   ret
  20+ 9F9A
  21+ 9F9A
  22+ 9F9A                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  23+ 9F9A DD 67        madXAequQmulAaddRS:     ld      ixh,a
  24+ 9F9C E6 7F                                and		$7F
  25+ 9F9E 5F                                   ld      e,a
  26+ 9F9F 3A 6F 92                             ld      a,(varQ)
  27+ 9FA2 DD 6F                                ld		ixl,a
  28+ 9FA4 E6 7F                                and		$7F
  29+ 9FA6 57                                   ld      d,a
  30+ 9FA7              madDEequDmulA
  31+ 9FA7 ED 30            mul                                 ;de = d * e
  32+ 9FA9 DD 7C        	ld		a,ixh
  33+ 9FAB DD AD        	xor		ixl
  34+ 9FAD E6 80        	and		$80
  35+ 9FAF B2           	or		d
  36+ 9FB0 57           	ld		d,a
  37+ 9FB1              madDEaddRS:
  38+ 9FB1 2A 70 92     	ld		hl,(varR)
  39+ 9FB4                  ;ld      a,(varR)
  40+ 9FB4                  ;ld      l,a
  41+ 9FB4                  ;ld      a,(varS)
  42+ 9FB4                  ;ld      h,a
  43+ 9FB4 CD BD 9F     	call	madXAAddHLDESigned
  44+ 9FB7              ;
  45+ 9FB7              ;   add     hl,de                       ; hl = R.S + DE
  46+ 9FB7 EB               ex      de,hl                       ; de = R.S + DE
  47+ 9FB8                  ClearCarryFlag
  47+ 9FB8 B7          >				or a
  48+ 9FB9 DD 6B            ld      ixl,e
  49+ 9FBB 7A               ld      a,d
  50+ 9FBC C9               ret
  51+ 9FBD
  52+ 9FBD
  53+ 9FBD 7C           madXAAddHLDESigned:     ld      a,h
  54+ 9FBE E6 80                                and     SignOnly8Bit
  55+ 9FC0 47                                   ld      b,a                         ;save sign bit in b
  56+ 9FC1 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  57+ 9FC2                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  57+ 9FC2 FA DA 9F    >                        jp		m, .ADDHLDEOppSGN
  58+ 9FC5 78           .ADDHLDESameSigns:       ld      a,b
  59+ 9FC6 B2                                   or      d
  60+ 9FC7                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  60+ 9FC7 FA CC 9F    >                        jp		m, .ADDHLDESameNeg
  61+ 9FCA 19                                   add     hl,de
  62+ 9FCB C9                                   ret
  63+ 9FCC 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  64+ 9FCD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  65+ 9FCF 67                                   ld      h,a
  66+ 9FD0 7A                                   ld      a,d
  67+ 9FD1 E6 7F                                and     SignMask8Bit
  68+ 9FD3 57                                   ld      d,a
  69+ 9FD4 19                                   add     hl,de
  70+ 9FD5 3E 80                                ld      a,SignOnly8Bit
  71+ 9FD7 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  72+ 9FD8 67                                   ld      h,a
  73+ 9FD9 C9                                   ret
  74+ 9FDA 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  75+ 9FDB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  76+ 9FDD 67                                   ld      h,a
  77+ 9FDE 7A                                   ld      a,d
  78+ 9FDF E6 7F                                and     SignMask8Bit
  79+ 9FE1 57                                   ld      d,a
  80+ 9FE2 B7                                   or      a
  81+ 9FE3 ED 52                                sbc     hl,de
  82+ 9FE5 38 04                                jr      c,.ADDHLDEOppInvert
  83+ 9FE7 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  84+ 9FE8 B4                                   or      h
  85+ 9FE9 67                                   ld      h,a                         ; set the previou sign value
  86+ 9FEA C9                                   ret
  87+ 9FEB              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  87+ 9FEB AF          >                xor a
  87+ 9FEC 95          >                sub l
  87+ 9FED 6F          >                ld l,a
  87+ 9FEE 9F          >                sbc a,a
  87+ 9FEF 94          >                sub h
  87+ 9FF0 67          >                ld h,a
  88+ 9FF1 78                                   ld      a,b
  89+ 9FF2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  90+ 9FF4 B4                                   or      h
  91+ 9FF5 67                                   ld      h,a                         ; recover sign
  92+ 9FF6 C9                                   ret
  93+ 9FF7
  94+ 9FF7              ; multiplication of two 16-bit numbers into a 16-bit product
  95+ 9FF7              ; enter : de = 16-bit multiplicand
  96+ 9FF7              ;         hl = 16-bit multiplicand
  97+ 9FF7              ; exit  : hl = 16-bit product
  98+ 9FF7              ;         carry reset
  99+ 9FF7              ;
 100+ 9FF7              ; uses  : af, bc, de, hl
 101+ 9FF7 C5           mulDEbyHL:              push    bc
 102+ 9FF8 7A                                   ld a,d                      ; a = xh
 103+ 9FF9 54                                   ld d,h                      ; d = yh
 104+ 9FFA 67                                   ld h,a                      ; h = xh
 105+ 9FFB 4B                                   ld c,e                      ; c = xl
 106+ 9FFC 45                                   ld b,l                      ; b = yl
 107+ 9FFD ED 30                                mul                         ; yh * yl
 108+ 9FFF EB                                   ex de,hl
 109+ A000 ED 30                                mul                         ; xh * yl
 110+ A002 19                                   add hl,de                   ; add cross products
 111+ A003 59                                   ld e,c
 112+ A004 50                                   ld d,b
 113+ A005 ED 30                                mul                         ; yl * xl
 114+ A007 7D                                   ld a,l                      ; cross products lsb
 115+ A008 82                                   add a,d                     ; add to msb final
 116+ A009 67                                   ld h,a
 117+ A00A 6B                                   ld l,e                      ; hl = final
 118+ A00B                                      ; 83 cycles, 19 bytes
 119+ A00B AF                                   xor a                       ; reset carry
 120+ A00C C1                                   pop     bc
 121+ A00D C9                                   ret
 122+ A00E              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 123+ A00E              ; enter : de = 16-bit multiplicand
 124+ A00E              ;         hl = 16-bit multiplicand
 125+ A00E              ; exit  : hl = 16-bit product
 126+ A00E              ;         carry reset
 127+ A00E              ;
 128+ A00E              ; uses  : af, bc, de, hl
 129+ A00E 00           mulDEbyHLSignByte       DB      0
 130+ A00F AF           mulDEbyHLSgnTo2c:       xor     a
 131+ A010 32 0E A0                             ld      (mulDEbyHLSignByte),a
 132+ A013 7A           .SignDE:                ld      a,d
 133+ A014 ED 27 80                             test    $80
 134+ A017 28 08                                jr      z,.SignHL
 135+ A019 E6 7F        .NegativeDE:            and     $7F
 136+ A01B 57                                   ld      d,a
 137+ A01C 3E 80                                ld      a,$80
 138+ A01E 32 0E A0                             ld      (mulDEbyHLSignByte),a
 139+ A021 7C           .SignHL:                ld      a,h
 140+ A022 ED 27 80                             test    $80
 141+ A025 28 0B                                jr      z,.AbsoluteMultiply
 142+ A027 E6 7F        .NegativeHL:            and     $7F
 143+ A029 67                                   ld      h,a
 144+ A02A 3A 0E A0                             ld      a,(mulDEbyHLSignByte)
 145+ A02D EE 80                                xor     $80
 146+ A02F 32 0E A0                             ld      (mulDEbyHLSignByte),a
 147+ A032 CD F7 9F     .AbsoluteMultiply:      call    mulDEbyHL
 148+ A035 3A 0E A0     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 149+ A038 ED 27 80                             test    $80
 150+ A03B C8                                   ret     z
 151+ A03C AF           .Negateghl: 				xor 	a
 152+ A03D 95                                   sub 	l
 153+ A03E 6F                                   ld 		l,a
 154+ A03F 9F                                   sbc 	a,a
 155+ A040 94                                   sub 	h
 156+ A041 67                                   ld 		h,a
 157+ A042 C9                                   ret
 158+ A043
 159+ A043 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 160+ A044 32 0E A0                             ld      (mulDEbyHLSignByte),a
 161+ A047 7A           .SignDE:                ld      a,d
 162+ A048 ED 27 80                             test    $80
 163+ A04B 28 08                                jr      z,.AbsoluteMultiply
 164+ A04D E6 7F        .NegativeDE:            and     $7F
 165+ A04F 57                                   ld      d,a
 166+ A050 3E 80                                ld      a,$80
 167+ A052 32 0E A0                             ld      (mulDEbyHLSignByte),a
 168+ A055 CD F7 9F     .AbsoluteMultiply:      call    mulDEbyHL
 169+ A058 3A 0E A0     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 170+ A05B ED 27 80                             test    $80
 171+ A05E C8                                   ret     z
 172+ A05F AF           .Negateghl:             xor 	a
 173+ A060 95                                   sub 	l
 174+ A061 6F                                   ld 		l,a
 175+ A062 9F                                   sbc 	a,a
 176+ A063 94                                   sub 	h
 177+ A064 67                                   ld 		h,a
 178+ A065 C9                                   ret
 179+ A066
 180+ A066
# file closed: ./Maths/multiply.asm
 707  A066                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A066              ; "ASM_SQUA : TESTGOOD"
   2+ A066              ; "AP = A^2 A = low,P = hi"
   3+ A066
   4+ A066              inline_squde: MACRO
   5+ A066 ~            			ld	e,a
   6+ A066 ~            			ld  d,a
   7+ A066 ~            			mul
   8+ A066              			ENDM
   9+ A066
  10+ A066              inline_squa: MACRO
  11+ A066 ~            			ld	e,a
  12+ A066 ~            			ld  d,a
  13+ A066 ~            			mul
  14+ A066 ~            			ld	a,e
  15+ A066              			ENDM
  16+ A066
  17+ A066
  18+ A066              asm_squa:
  19+ A066 E6 7F        	and SignMask8Bit
  20+ A068              ; "ASM SQUA2 : TESTGOOD"
  21+ A068              ; "AP = A^2 A = low,P = hi singed"
  22+ A068              asm_squa2:
  23+ A068 5F           	ld e, a
  24+ A069 57           	ld d,a
  25+ A06A ED 30        	mul
  26+ A06C ED 53 15 92  	ld (varP),de
  27+ A070 7B           	ld a,e
  28+ A071 C9           	ret
# file closed: ./Maths/asm_square.asm
 708  A072                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A072              ; "ASM SQRT : TESTGOOD"
   2+ A072              ; "16-bit integer square root"
   3+ A072              ; "call with de = number to square root"
   4+ A072              ; "returns   hl = square root"
   5+ A072              ; "corrupts  bc, de"
   6+ A072              asm_sqrt:
   7+ A072 01 00 80     	ld bc,$8000
   8+ A075 61           	ld h,c
   9+ A076 69           	ld l,c
  10+ A077              .sqrloop:
  11+ A077 CB 38        	srl b
  12+ A079 CB 19        	rr c
  13+ A07B 09           	add hl,bc
  14+ A07C EB           	ex de,hl
  15+ A07D ED 52        	sbc hl,de
  16+ A07F 38 04        	jr c,.sqrbit
  17+ A081 EB           	ex de,hl
  18+ A082 09           	add hl,bc
  19+ A083 18 05        	jr .sqrfi
  20+ A085              .sqrbit:
  21+ A085 19           	add hl,de
  22+ A086 EB           	ex de,hl
  23+ A087 B7           	or a
  24+ A088 ED 42        	sbc hl,bc
  25+ A08A              .sqrfi:
  26+ A08A CB 3C        	srl h
  27+ A08C CB 1D        	rr l
  28+ A08E CB 38        	srl b
  29+ A090 CB 19        	rr c
  30+ A092 30 E3        	jr nc,.sqrloop
  31+ A094 C9           	ret
  32+ A095
  33+ A095
  34+ A095              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A095 3A 6F 92     	ld		a,(varQ)
  36+ A098 5F           	ld		e,a
  37+ A099 3A 70 92     	ld		a,(varR)
  38+ A09C 57           	ld		d,a
  39+ A09D CD 72 A0     	call	asm_sqrt
  40+ A0A0 7D               ld      a,l
  41+ A0A1 32 6F 92     	ld		(varQ),a
  42+ A0A4 C9           	ret
  43+ A0A5
# file closed: ./Maths/asm_sqrt.asm
 709  A0A5                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A0A5              ; Divide 8-bit values
   2+ A0A5              ; In: Divide E by divider C
   3+ A0A5              ; Out: A = result, B = rest
   4+ A0A5              ;
   5+ A0A5              ;;;Div8:
   6+ A0A5              ;;;    xor a
   7+ A0A5              ;;;    ld b,8
   8+ A0A5              ;;;Div8_Loop:
   9+ A0A5              ;;;    rl e
  10+ A0A5              ;;;    rla
  11+ A0A5              ;;;    sub c
  12+ A0A5              ;;;    jr nc,Div8_NoAdd
  13+ A0A5              ;;;    add a,c
  14+ A0A5              ;;;Div8_NoAdd:
  15+ A0A5              ;;;    djnz Div8_Loop
  16+ A0A5              ;;;    ld b,a
  17+ A0A5              ;;;    ld a,e
  18+ A0A5              ;;;    rla
  19+ A0A5              ;;;    cpl
  20+ A0A5              ;;;    ret
  21+ A0A5
  22+ A0A5              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A0A5              ;;Outputs: DE is the result
  24+ A0A5              ;;         A is a copy of E
  25+ A0A5              ;;         HL is the remainder
  26+ A0A5              ;;         BC is not changed
  27+ A0A5              ;; so DE = DE /BC
  28+ A0A5              ;140 bytes
  29+ A0A5              ;145cc
  30+ A0A5
  31+ A0A5              MacroDEDivBC:       MACRO
  32+ A0A5 ~                                rla
  33+ A0A5 ~                                adc     hl,hl
  34+ A0A5 ~                                sbc     hl,bc
  35+ A0A5 ~                                jr      nc,$+3
  36+ A0A5 ~                                add     hl,bc
  37+ A0A5                                  ENDM
  38+ A0A5
  39+ A0A5              DEequDEDivBC:
  40+ A0A5 AF               xor a
  41+ A0A6 ED 62            sbc hl,hl
  42+ A0A8 7A               ld a,d
  43+ A0A9                  MacroDEDivBC
  43+ A0A9 17          >                    rla
  43+ A0AA ED 6A       >                    adc     hl,hl
  43+ A0AC ED 42       >                    sbc     hl,bc
  43+ A0AE 30 01       >                    jr      nc,$+3
  43+ A0B0 09          >                    add     hl,bc
  44+ A0B1                  MacroDEDivBC
  44+ A0B1 17          >                    rla
  44+ A0B2 ED 6A       >                    adc     hl,hl
  44+ A0B4 ED 42       >                    sbc     hl,bc
  44+ A0B6 30 01       >                    jr      nc,$+3
  44+ A0B8 09          >                    add     hl,bc
  45+ A0B9                  MacroDEDivBC
  45+ A0B9 17          >                    rla
  45+ A0BA ED 6A       >                    adc     hl,hl
  45+ A0BC ED 42       >                    sbc     hl,bc
  45+ A0BE 30 01       >                    jr      nc,$+3
  45+ A0C0 09          >                    add     hl,bc
  46+ A0C1                  MacroDEDivBC
  46+ A0C1 17          >                    rla
  46+ A0C2 ED 6A       >                    adc     hl,hl
  46+ A0C4 ED 42       >                    sbc     hl,bc
  46+ A0C6 30 01       >                    jr      nc,$+3
  46+ A0C8 09          >                    add     hl,bc
  47+ A0C9                  MacroDEDivBC
  47+ A0C9 17          >                    rla
  47+ A0CA ED 6A       >                    adc     hl,hl
  47+ A0CC ED 42       >                    sbc     hl,bc
  47+ A0CE 30 01       >                    jr      nc,$+3
  47+ A0D0 09          >                    add     hl,bc
  48+ A0D1                  MacroDEDivBC
  48+ A0D1 17          >                    rla
  48+ A0D2 ED 6A       >                    adc     hl,hl
  48+ A0D4 ED 42       >                    sbc     hl,bc
  48+ A0D6 30 01       >                    jr      nc,$+3
  48+ A0D8 09          >                    add     hl,bc
  49+ A0D9                  MacroDEDivBC
  49+ A0D9 17          >                    rla
  49+ A0DA ED 6A       >                    adc     hl,hl
  49+ A0DC ED 42       >                    sbc     hl,bc
  49+ A0DE 30 01       >                    jr      nc,$+3
  49+ A0E0 09          >                    add     hl,bc
  50+ A0E1                  MacroDEDivBC
  50+ A0E1 17          >                    rla
  50+ A0E2 ED 6A       >                    adc     hl,hl
  50+ A0E4 ED 42       >                    sbc     hl,bc
  50+ A0E6 30 01       >                    jr      nc,$+3
  50+ A0E8 09          >                    add     hl,bc
  51+ A0E9 17               rla
  52+ A0EA 2F               cpl
  53+ A0EB 57               ld d,a
  54+ A0EC
  55+ A0EC 7B               ld a,e
  56+ A0ED                  MacroDEDivBC
  56+ A0ED 17          >                    rla
  56+ A0EE ED 6A       >                    adc     hl,hl
  56+ A0F0 ED 42       >                    sbc     hl,bc
  56+ A0F2 30 01       >                    jr      nc,$+3
  56+ A0F4 09          >                    add     hl,bc
  57+ A0F5                  MacroDEDivBC
  57+ A0F5 17          >                    rla
  57+ A0F6 ED 6A       >                    adc     hl,hl
  57+ A0F8 ED 42       >                    sbc     hl,bc
  57+ A0FA 30 01       >                    jr      nc,$+3
  57+ A0FC 09          >                    add     hl,bc
  58+ A0FD                  MacroDEDivBC
  58+ A0FD 17          >                    rla
  58+ A0FE ED 6A       >                    adc     hl,hl
  58+ A100 ED 42       >                    sbc     hl,bc
  58+ A102 30 01       >                    jr      nc,$+3
  58+ A104 09          >                    add     hl,bc
  59+ A105                  MacroDEDivBC
  59+ A105 17          >                    rla
  59+ A106 ED 6A       >                    adc     hl,hl
  59+ A108 ED 42       >                    sbc     hl,bc
  59+ A10A 30 01       >                    jr      nc,$+3
  59+ A10C 09          >                    add     hl,bc
  60+ A10D                  MacroDEDivBC
  60+ A10D 17          >                    rla
  60+ A10E ED 6A       >                    adc     hl,hl
  60+ A110 ED 42       >                    sbc     hl,bc
  60+ A112 30 01       >                    jr      nc,$+3
  60+ A114 09          >                    add     hl,bc
  61+ A115                  MacroDEDivBC
  61+ A115 17          >                    rla
  61+ A116 ED 6A       >                    adc     hl,hl
  61+ A118 ED 42       >                    sbc     hl,bc
  61+ A11A 30 01       >                    jr      nc,$+3
  61+ A11C 09          >                    add     hl,bc
  62+ A11D                  MacroDEDivBC
  62+ A11D 17          >                    rla
  62+ A11E ED 6A       >                    adc     hl,hl
  62+ A120 ED 42       >                    sbc     hl,bc
  62+ A122 30 01       >                    jr      nc,$+3
  62+ A124 09          >                    add     hl,bc
  63+ A125                  MacroDEDivBC
  63+ A125 17          >                    rla
  63+ A126 ED 6A       >                    adc     hl,hl
  63+ A128 ED 42       >                    sbc     hl,bc
  63+ A12A 30 01       >                    jr      nc,$+3
  63+ A12C 09          >                    add     hl,bc
  64+ A12D 17               rla
  65+ A12E 2F               cpl
  66+ A12F 5F               ld e,a
  67+ A130 C9               ret
  68+ A131
  69+ A131
  70+ A131
  71+ A131              ;divdide by 16 using undocumented instrunctions
  72+ A131              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A131              ;Output: BC = Quotient, HL = Remainder
  74+ A131              ; Our use
  75+ A131              ; BC = A0
  76+ A131              ; DE = 0C
  77+ A131              ; so BC = a * 256 / C
  78+ A131              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A131 B9          >                        cp     c
  78+ A132 D2 5D A1    >                        jp		nc,DEV16ATooLarge
  79+ A135 47                                   ld      b,a
  80+ A136 59                                   ld      e,c
  81+ A137 0E 00                                ld      c,0
  82+ A139 16 00                                ld      d,0
  83+ A13B C3 48 A1                             jp      DIV16UNDOC
  84+ A13E 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A13F 0E 00                                ld      c,0
  86+ A141 21 6F 92                             ld      hl,varQ
  87+ A144 7E                                   ld      a,(hl)
  88+ A145 16 00                                ld      d,0
  89+ A147 5F                                   ld      e,a
  90+ A148              DIV16BCDivDEUNDOC:
  91+ A148 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A14B 78                                   ld      a,b
  93+ A14C 06 10                                ld      b,16
  94+ A14E CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A150 17                                   rla			; ...
  96+ A151 ED 6A                                adc	hl,hl		; ...
  97+ A153 ED 52                                sbc	hl,de		; ...
  98+ A155 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A157 19                                   add	hl,de		; ...
 100+ A158 0D                                   dec	c		; ...
 101+ A159 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A15B 47                                   ld   b,a
 103+ A15C C9                                   ret
 104+ A15D 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A160 C9                                   ret
 106+ A161
 107+ A161              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A161 06 08        asm_div8:               ld b,8
 109+ A163 AF                                   xor a
 110+ A164 CB 21        div8_loop:	            sla c
 111+ A166 17                                   rla
 112+ A167 BA                                   cp d
 113+ A168 38 02                                jr c,div8_skip
 113+ A16A
 114+ A16A 0C                                   inc c
 115+ A16B 92                                   sub d
 116+ A16C 10 F6        div8_skip:	            djnz div8_loop
 117+ A16E C9                                   ret
 118+ A16F              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A16F 06 10        asm_div16:              ld b,16
 120+ A171 AF                                   xor a
 121+ A172 CB 25        div16_loop:	            sla l
 122+ A174 CB 14                                rl	h
 123+ A176              ;    add hl,hl
 124+ A176 17                                   rla
 125+ A177 B9                                   cp c
 126+ A178 38 02                                jr c,div16_skip
 127+ A17A 2C                                   inc l
 128+ A17B 91                                   sub c
 129+ A17C 10 F4        div16_skip:		        djnz div16_loop
 130+ A17E C9                                   ret
 131+ A17F              ;
 132+ A17F              ; Divide 16-bit values (with 16-bit result)
 133+ A17F              ; In: Divide BC by divider DE
 134+ A17F              ; Out: BC = result, HL = rest
 135+ A17F              ;
 136+ A17F              HLDivC_Iteration: 	MACRO
 137+ A17F ~            					add	hl,hl		; unroll 16 times
 138+ A17F ~            					rla				; ...
 139+ A17F ~            					cp	c			; ...
 140+ A17F ~            					jr	1F
 141+ A17F ~            					sub	c			; ...
 142+ A17F ~            1:
 143+ A17F ~            					inc	l			; ...
 144+ A17F              					ENDM
 145+ A17F
 146+ A17F
 147+ A17F
 148+ A17F              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A17F 21 00 00     Div1616:            ld hl,0
 150+ A182 78                               ld a,b
 151+ A183 06 08                            ld b,8
 152+ A185 17           .Div16_Loop1:       rla
 153+ A186 ED 6A                            adc hl,hl
 154+ A188 ED 52                            sbc hl,de
 155+ A18A 30 01                            jr nc,.Div16_NoAdd1
 156+ A18C 19                               add hl,de
 157+ A18D 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A18F 17                               rla
 159+ A190 2F                               cpl
 160+ A191 47                               ld b,a
 161+ A192 79                               ld a,c
 162+ A193 48                               ld c,b
 163+ A194 06 08                            ld b,8
 164+ A196 17           .Div16_Loop2:       rla
 165+ A197 ED 6A                            adc hl,hl
 166+ A199 ED 52                            sbc hl,de
 167+ A19B 30 01                            jr nc,.Div16_NoAdd2
 168+ A19D 19                               add hl,de
 169+ A19E 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A1A0 17                               rla
 171+ A1A1 2F                               cpl
 172+ A1A2 41                               ld b,c
 173+ A1A3 4F                               ld c,a
 174+ A1A4 C9                               ret
 175+ A1A5
 176+ A1A5
 177+ A1A5
 178+ A1A5              BCDIVDE_Iteration: MACRO
 179+ A1A5 ~            				   rla
 180+ A1A5 ~            				   adc	hl,hl
 181+ A1A5 ~            				   add	hl,de
 182+ A1A5 ~            				   jr	c,1F
 183+ A1A5 ~            				   sbc	hl,de
 184+ A1A5 ~            1:
 185+ A1A5              				   ENDM
 186+ A1A5
 187+ A1A5
 188+ A1A5              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A1A5              ;BC/DE ==> BC, remainder in HL
 190+ A1A5              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A1A5              ;min: 738cc
 192+ A1A5              ;max: 898cc
 193+ A1A5              ;avg: 818cc
 194+ A1A5              ;144 bytes
 195+ A1A5 AF           BC_Div_DE:              xor a
 196+ A1A6 67                                   ld h,a
 197+ A1A7 6F                                   ld l,a
 198+ A1A8 93                                   sub e
 199+ A1A9 5F                                   ld e,a
 200+ A1AA 9F                                   sbc a,a
 201+ A1AB 92                                   sub d
 202+ A1AC 57                                   ld d,a
 203+ A1AD 78                                   ld a,b
 204+ A1AE                                      BCDIVDE_Iteration
 204+ A1AE 17          >				   rla
 204+ A1AF ED 6A       >				   adc	hl,hl
 204+ A1B1 19          >				   add	hl,de
 204+ A1B2 38 02       >				   jr	c,1F
 204+ A1B4 ED 52       >				   sbc	hl,de
 204+ A1B6             >1:
 205+ A1B6                                      BCDIVDE_Iteration
 205+ A1B6 17          >				   rla
 205+ A1B7 ED 6A       >				   adc	hl,hl
 205+ A1B9 19          >				   add	hl,de
 205+ A1BA 38 02       >				   jr	c,1F
 205+ A1BC ED 52       >				   sbc	hl,de
 205+ A1BE             >1:
 206+ A1BE                                      BCDIVDE_Iteration
 206+ A1BE 17          >				   rla
 206+ A1BF ED 6A       >				   adc	hl,hl
 206+ A1C1 19          >				   add	hl,de
 206+ A1C2 38 02       >				   jr	c,1F
 206+ A1C4 ED 52       >				   sbc	hl,de
 206+ A1C6             >1:
 207+ A1C6                                      BCDIVDE_Iteration
 207+ A1C6 17          >				   rla
 207+ A1C7 ED 6A       >				   adc	hl,hl
 207+ A1C9 19          >				   add	hl,de
 207+ A1CA 38 02       >				   jr	c,1F
 207+ A1CC ED 52       >				   sbc	hl,de
 207+ A1CE             >1:
 208+ A1CE                                      BCDIVDE_Iteration
 208+ A1CE 17          >				   rla
 208+ A1CF ED 6A       >				   adc	hl,hl
 208+ A1D1 19          >				   add	hl,de
 208+ A1D2 38 02       >				   jr	c,1F
 208+ A1D4 ED 52       >				   sbc	hl,de
 208+ A1D6             >1:
 209+ A1D6                                      BCDIVDE_Iteration
 209+ A1D6 17          >				   rla
 209+ A1D7 ED 6A       >				   adc	hl,hl
 209+ A1D9 19          >				   add	hl,de
 209+ A1DA 38 02       >				   jr	c,1F
 209+ A1DC ED 52       >				   sbc	hl,de
 209+ A1DE             >1:
 210+ A1DE                                      BCDIVDE_Iteration
 210+ A1DE 17          >				   rla
 210+ A1DF ED 6A       >				   adc	hl,hl
 210+ A1E1 19          >				   add	hl,de
 210+ A1E2 38 02       >				   jr	c,1F
 210+ A1E4 ED 52       >				   sbc	hl,de
 210+ A1E6             >1:
 211+ A1E6                                      BCDIVDE_Iteration
 211+ A1E6 17          >				   rla
 211+ A1E7 ED 6A       >				   adc	hl,hl
 211+ A1E9 19          >				   add	hl,de
 211+ A1EA 38 02       >				   jr	c,1F
 211+ A1EC ED 52       >				   sbc	hl,de
 211+ A1EE             >1:
 212+ A1EE 17                                   rla
 213+ A1EF 47                                   ld b,a
 214+ A1F0
 215+ A1F0 79                                   ld a,c
 216+ A1F1                                      BCDIVDE_Iteration
 216+ A1F1 17          >				   rla
 216+ A1F2 ED 6A       >				   adc	hl,hl
 216+ A1F4 19          >				   add	hl,de
 216+ A1F5 38 02       >				   jr	c,1F
 216+ A1F7 ED 52       >				   sbc	hl,de
 216+ A1F9             >1:
 217+ A1F9                                      BCDIVDE_Iteration
 217+ A1F9 17          >				   rla
 217+ A1FA ED 6A       >				   adc	hl,hl
 217+ A1FC 19          >				   add	hl,de
 217+ A1FD 38 02       >				   jr	c,1F
 217+ A1FF ED 52       >				   sbc	hl,de
 217+ A201             >1:
 218+ A201                                      BCDIVDE_Iteration
 218+ A201 17          >				   rla
 218+ A202 ED 6A       >				   adc	hl,hl
 218+ A204 19          >				   add	hl,de
 218+ A205 38 02       >				   jr	c,1F
 218+ A207 ED 52       >				   sbc	hl,de
 218+ A209             >1:
 219+ A209                                      BCDIVDE_Iteration
 219+ A209 17          >				   rla
 219+ A20A ED 6A       >				   adc	hl,hl
 219+ A20C 19          >				   add	hl,de
 219+ A20D 38 02       >				   jr	c,1F
 219+ A20F ED 52       >				   sbc	hl,de
 219+ A211             >1:
 220+ A211                                      BCDIVDE_Iteration
 220+ A211 17          >				   rla
 220+ A212 ED 6A       >				   adc	hl,hl
 220+ A214 19          >				   add	hl,de
 220+ A215 38 02       >				   jr	c,1F
 220+ A217 ED 52       >				   sbc	hl,de
 220+ A219             >1:
 221+ A219                                      BCDIVDE_Iteration
 221+ A219 17          >				   rla
 221+ A21A ED 6A       >				   adc	hl,hl
 221+ A21C 19          >				   add	hl,de
 221+ A21D 38 02       >				   jr	c,1F
 221+ A21F ED 52       >				   sbc	hl,de
 221+ A221             >1:
 222+ A221                                      BCDIVDE_Iteration
 222+ A221 17          >				   rla
 222+ A222 ED 6A       >				   adc	hl,hl
 222+ A224 19          >				   add	hl,de
 222+ A225 38 02       >				   jr	c,1F
 222+ A227 ED 52       >				   sbc	hl,de
 222+ A229             >1:
 223+ A229                                      BCDIVDE_Iteration
 223+ A229 17          >				   rla
 223+ A22A ED 6A       >				   adc	hl,hl
 223+ A22C 19          >				   add	hl,de
 223+ A22D 38 02       >				   jr	c,1F
 223+ A22F ED 52       >				   sbc	hl,de
 223+ A231             >1:
 224+ A231 17                                   rla
 225+ A232 4F                                   ld c,a
 226+ A233 C9                                   ret
 227+ A234
 228+ A234              ;Inputs:
 229+ A234              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A234              ;Outputs:
 231+ A234              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A234              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A234              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A234              ;Otherwise:
 235+ A234              ;min: 1107cc
 236+ A234              ;max: 1319cc
 237+ A234              ;avg: 1201cc
 238+ A234 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A235 AA                                   xor d
 240+ A236 F5                                   push af   ;sign bit is the result sign bit
 241+ A237              ; Now make sure the inputs are positive
 242+ A237 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A238 F2 41 A2                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A23B AF                                   xor a
 245+ A23C 91                                   sub c
 246+ A23D 4F                                   ld c,a
 247+ A23E 9F                                   sbc a,a
 248+ A23F 90                                   sub b
 249+ A240 47                                   ld b,a
 250+ A241 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A242 B2                                   or d
 252+ A243 FA 4C A2                             jp m,BC_Div_DE_88_lbl2
 253+ A246 AF                                   xor a
 254+ A247 93                                   sub e
 255+ A248 5F                                   ld e,a
 256+ A249 9F                                   sbc a,a
 257+ A24A 92                                   sub d
 258+ A24B 57                                   ld d,a
 259+ A24C B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A24D 28 1D                                jr z,div_fixed88_overflow
 261+ A24F 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A251 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A252 83                                   add a,e
 264+ A253 7A                                   ld a,d
 265+ A254 8C                                   adc a,h
 266+ A255 38 15                                jr c,div_fixed88_overflow
 267+ A257 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A258 79                                   ld a,c
 269+ A259 CD 74 A2                             call div_fixed88_sub
 270+ A25C 4F                                   ld c,a
 271+ A25D 78                                   ld a,b      ;A is now 0
 272+ A25E CD 74 A2                             call div_fixed88_sub
 273+ A261 51                                   ld d,c
 274+ A262 5F                                   ld e,a
 275+ A263 F1                                   pop af
 276+ A264 F0                                   ret p
 277+ A265 AF                                   xor a
 278+ A266 93                                   sub e
 279+ A267 5F                                   ld e,a
 280+ A268 9F                                   sbc a,a
 281+ A269 92                                   sub d
 282+ A26A 57                                   ld d,a
 283+ A26B C9                                   ret
 284+ A26C
 285+ A26C 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A26F F1                                   pop af
 287+ A270 F0                                   ret p
 288+ A271 13                                   inc de
 289+ A272 1C                                   inc e
 290+ A273 C9                                   ret
 291+ A274
 292+ A274              ;min: 456cc
 293+ A274              ;max: 536cc
 294+ A274              ;avg: 496cc
 295+ A274 06 08        div_fixed88_sub:        ld b,8
 296+ A276 17           BC_Div_DE_88_lbl3:      rla
 297+ A277 ED 6A                                adc hl,hl
 298+ A279 19                                   add hl,de
 299+ A27A 38 02                                jr c,$+4
 300+ A27C ED 52                                sbc hl,de
 301+ A27E 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A280 8F                                   adc a,a
 303+ A281 C9                                   ret
 304+ A282
# file closed: ./Maths/asm_divide.asm
 710  A282                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A282              asm_tis2:
   2+ A282              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A282              ; ">DOES NOT DO SIGNED YET"
   4+ A282 F5           	push af
   5+ A283 E6 7F            and SignMask8Bit
   6+ A285 57           	ld d,a				;; d = A
   7+ A286 3A 6F 92     	ld a,(varQ)
   8+ A289 5F           	ld e,a
   9+ A28A 7A           	ld a,d
  10+ A28B BB           	cp e
  11+ A28C 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A28E 1E 60        	ld e, 96
  13+ A290 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A292 EB           	ex de,hl
  15+ A293 3A 6F 92     	ld a,(varQ)
  16+ A296 4F           	ld c,a
  17+ A297 CD 6F A1     	call asm_div16
  18+ A29A F1           	pop af
  19+ A29B E6 80        	and $80
  20+ A29D B5           	or l
  21+ A29E C9           	ret
  22+ A29F              .tis2_set96:
  23+ A29F F1           	pop af
  24+ A2A0 E6 80        	and $80
  25+ A2A2 F6 96        	or $96
  26+ A2A4 C9           	ret
  27+ A2A5
  28+ A2A5
  29+ A2A5              asm_unit_vector:
  30+ A2A5              squareregfx:
  31+ A2A5 3A 75 C0     	ld a,(UBnkXScaled)
  32+ A2A8 57           	ld d,a
  33+ A2A9 5F           	ld e,a
  34+ A2AA ED 30        	mul
  35+ A2AC EB           	ex de,hl
  36+ A2AD              squareregfy:
  37+ A2AD 3A 77 C0     	ld a, (UBnkYScaled)
  38+ A2B0 57           	ld d,a
  39+ A2B1 5F           	ld e,a
  40+ A2B2 ED 30        	mul
  41+ A2B4 19           	add hl,de
  42+ A2B5              squareregfz:
  43+ A2B5 3A 79 C0     	ld a, (UBnkZScaled)
  44+ A2B8 57           	ld d,a
  45+ A2B9 5F           	ld e,a
  46+ A2BA ED 30        	mul
  47+ A2BC 19           	add hl,de
  48+ A2BD EB           	ex de,hl			; de de to number to root
  49+ A2BE              hlequsquareroot:
  50+ A2BE CD 72 A0     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A2C1 E5           	push hl				; save it for work 3 copies
  52+ A2C2 E5           	push hl				; save it for work
  53+ A2C3 E5           	push hl				; save it for work
  54+ A2C4              normfx:
  55+ A2C4 3A 75 C0     	ld a,(UBnkXScaled)
  56+ A2C7 E1           	pop hl				; get copy #1
  57+ A2C8 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A2C9 4F           	ld c,a
  59+ A2CA CD 82 A2     	call asm_tis2
  60+ A2CD 32 75 C0     	ld (UBnkXScaled),a
  61+ A2D0              normfy:
  62+ A2D0 3A 77 C0     	ld a,(UBnkYScaled)
  63+ A2D3 E1           	pop hl				; get copy #2
  64+ A2D4 7D           	ld a,l
  65+ A2D5 4F           	ld c,a
  66+ A2D6 CD 82 A2     	call asm_tis2
  67+ A2D9 32 77 C0     	ld (UBnkYScaled),a
  68+ A2DC              normfz:
  69+ A2DC 3A 79 C0     	ld a,(UBnkZScaled)
  70+ A2DF E1           	pop hl				; get copy #2
  71+ A2E0 7D           	ld a,l
  72+ A2E1 4F           	ld c,a
  73+ A2E2 CD 82 A2     	call asm_tis2
  74+ A2E5 32 79 C0     	ld (UBnkZScaled),a
  75+ A2E8              asm_unit_vector_end:
  76+ A2E8 C9           	ret
  77+ A2E9
# file closed: ./Maths/asm_unitvector.asm
 711  A2E9                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A2E9              compare16HLDE:
   2+ A2E9              ; Input:
   3+ A2E9              ;       HL = 1st value
   4+ A2E9              ;       DE = 2nd value
   5+ A2E9              ; Output:
   6+ A2E9              ;       CF, ZF = results of comparison:
   7+ A2E9              ;
   8+ A2E9              ;               CF      ZF      Result
   9+ A2E9              ;               -----------------------------------
  10+ A2E9              ;               0       0       HL > DE
  11+ A2E9              ;               0       1       HL == DE
  12+ A2E9              ;               1       0       HL < DE
  13+ A2E9              ;               1       1       Impossible
  14+ A2E9              ;
  15+ A2E9 E5           		push    hl
  16+ A2EA A7           		and     a
  17+ A2EB ED 52        		sbc     hl,de
  18+ A2ED E1           		pop     hl
  19+ A2EE C9           		ret
  20+ A2EF
# file closed: ./Maths/compare16.asm
 712  A2EF                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A2EF              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A2EF              ;; 16-bit negate
   3+ A2EF              negate16:
   4+ A2EF              negate16hl:
   5+ A2EF                      ; Input:
   6+ A2EF                      ;       HL = value
   7+ A2EF                      ; Output:
   8+ A2EF                      ;       HL = -value
   9+ A2EF                      ; Destroys:
  10+ A2EF                      ;       AF
  11+ A2EF                      ;
  12+ A2EF AF           	xor 	a
  13+ A2F0 95           	sub 	l
  14+ A2F1 6F           	ld 		l,a
  15+ A2F2 9F           	sbc 	a,a
  16+ A2F3 94           	sub 	h
  17+ A2F4 67           	ld 		h,a
  18+ A2F5 C9           	ret
  19+ A2F6
  20+ A2F6              negate16de:
  21+ A2F6 AF           	xor 	a
  22+ A2F7 93           	sub 	e
  23+ A2F8 5F           	ld 		e,a
  24+ A2F9 9F           	sbc 	a,a
  25+ A2FA 92           	sub 	d
  26+ A2FB 57           	ld 		d,a
  27+ A2FC C9           	ret
  28+ A2FD
  29+ A2FD              negate16bc:
  30+ A2FD AF           	xor 	a
  31+ A2FE 91           	sub 	c
  32+ A2FF 4F           	ld 		c,a
  33+ A300 9F           	sbc 	a,a
  34+ A301 90           	sub 	b
  35+ A302 47           	ld 		b,a
  36+ A303 C9           	ret
  37+ A304
  38+ A304
  39+ A304              macronegate16hl:	MACRO
  40+ A304 ~            					xor 	a
  41+ A304 ~            					sub 	l
  42+ A304 ~            					ld 		l,a
  43+ A304 ~            					sbc 	a,a
  44+ A304 ~            					sub 	h
  45+ A304 ~            					ld 		h,a
  46+ A304              					ENDM
  47+ A304
  48+ A304              macronegate16de:	MACRO
  49+ A304 ~            					xor 	a
  50+ A304 ~                                sub 	e
  51+ A304 ~                                ld 		e,a
  52+ A304 ~                                sbc 	a,a
  53+ A304 ~                                sub 	d
  54+ A304 ~                                ld 		d,a
  55+ A304              					ENDM
  56+ A304              macronegate16bc:	MACRO
  57+ A304 ~            					xor 	a
  58+ A304 ~                                sub 	c
  59+ A304 ~                                ld 		c,a
  60+ A304 ~                                sbc 	a,a
  61+ A304 ~                                sub 	b
  62+ A304 ~                                ld 		b,a
  63+ A304              					ENDM
  64+ A304
  65+ A304              macronegate16ix:	MACRO
  66+ A304 ~            					xor 	a
  67+ A304 ~                                sub 	ixl
  68+ A304 ~                                ld 		ixl,a
  69+ A304 ~                                sbc 	a,a
  70+ A304 ~                                sub 	ixh
  71+ A304 ~                                ld 		ixh,a
  72+ A304              					ENDM
# file closed: ./Maths/negate16.asm
 713  A304                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A304 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A306                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A306 BA          >                        cp     d
   2+ A307 D2 1C A3    >                        jp		nc,TISXAccGTEQ
   3+ A30A 4F                                   ld			c,a
   4+ A30B CD 61 A1                             call		asm_div8
   5+ A30E 79                                   ld			a,c							; a = result
   6+ A30F CB 3F                                srl			a							; result / 4
   7+ A311 47                                   ld			b,a							; t = t /4
   8+ A312 CB 3F                                srl			a							; result / 8
   9+ A314 80                                   add			a,b							; result /8 + result /4
  10+ A315 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A316 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A318 E6 80                                and			$80							; recover sign only
  13+ A31A B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A31B C9                                   ret
  15+ A31C              TISXAccGTEQ:
  16+ A31C              ;TI4:										;\ clean to +/- unity
  17+ A31C DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A31E E6 80                                and			$80							; copy of Acc
  19+ A320 F6 60                                or			$60							; unity
  20+ A322 C9                                   ret
  21+ A323
  22+ A323
  23+ A323
  24+ A323
  25+ A323              normaliseXX1596fast:			; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  26+ A323 3A 75 C0     	ld		a,(XX15)		    ; XX15+0
  27+ A326 DD 67        	ld		ixh,a               ; ixh = signed x component
  28+ A328 E6 7F        	and		$7F                 ; a = unsigned version
  29+ A32A              N96SQX:
  30+ A32A              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  30+ A32A 5F          >			ld	e,a
  30+ A32B 57          >			ld  d,a
  30+ A32C ED 30       >			mul
  31+ A32E 62           	ld		h,d					; h == varR d = varO e= varA
  32+ A32F 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  33+ A330              N96SQY:
  34+ A330 3A 76 C0     	ld		a,(XX15+1)
  35+ A333 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  36+ A335 E6 7F        	and		$7F                 ; = abs
  37+ A337              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  37+ A337 5F          >			ld	e,a
  37+ A338 57          >			ld  d,a
  37+ A339 ED 30       >			mul
  38+ A33B 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  39+ A33C              N96SQZ:
  40+ A33C 3A 77 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  41+ A33F FD 67        	ld		iyh,a               ; iyh = signed
  42+ A341 E6 7F        	and		$7F                 ; unsigned
  43+ A343              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  43+ A343 5F          >			ld	e,a
  43+ A344 57          >			ld  d,a
  43+ A345 ED 30       >			mul
  44+ A347              N96SQADD:
  45+ A347 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  46+ A348 EB           	ex		de,hl				; hl => de ready for square root
  47+ A349              N96SQRT:
  48+ A349 CD 72 A0     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  49+ A34C              N96NORMX:
  50+ A34C 3A 75 C0     	ld		a,(XX15+0)
  51+ A34F E6 7F        	and		$7F
  52+ A351 4F           	ld		c,a
  53+ A352 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  54+ A353 CD 30 A5     	call	AequAdivDmul96	; does not use HL so we can retain it
  55+ A356 47           	ld		b,a				;++SGN
  56+ A357 DD 7C        	ld		a,ixh			;++SGN
  57+ A359 E6 80        	and		$80				;++SGN
  58+ A35B B0           	or		b				;++SGN
  59+ A35C 32 75 C0     	ld		(XX15+0),a
  60+ A35F              N96NORMY:
  61+ A35F 3A 76 C0     	ld		a,(XX15+1)
  62+ A362 E6 7F        	and		$7F
  63+ A364 4F           	ld		c,a
  64+ A365 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  65+ A366 CD 30 A5     	call	AequAdivDmul96     	; does not use HL so we can retain it
  66+ A369 47           	ld		b,a				;++SGN
  67+ A36A DD 7D        	ld		a,ixl			;++SGN
  68+ A36C E6 80        	and		$80				;++SGN
  69+ A36E B0           	or		b				;++SGN
  70+ A36F 32 76 C0     	ld		(XX15+1),a
  71+ A372              N96NORMZ:
  72+ A372 3A 77 C0     	ld		a,(XX15+2)
  73+ A375 E6 7F        	and		$7F
  74+ A377 4F           	ld		c,a
  75+ A378 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  76+ A379 CD 30 A5     	call	AequAdivDmul96	; does not use HL so we can retain it
  77+ A37C 47           	ld		b,a				;++SGN
  78+ A37D FD 7C        	ld		a,iyh			;++SGN
  79+ A37F E6 80        	and		$80				;++SGN
  80+ A381 B0           	or		b				;++SGN
  81+ A382 32 77 C0     	ld		(XX15+2),a
  82+ A385 C9           	ret
  83+ A386
  84+ A386              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  85+ A386 3A 75 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  86+ A389                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  86+ A389 5F          >			ld	e,a
  86+ A38A 57          >			ld  d,a
  86+ A38B ED 30       >			mul
  87+ A38D 7A                                   ld		a,d
  88+ A38E 32 70 92                             ld		(varR),a			; R	 \ hi sum later use b
  89+ A391 7B                                   ld		a,e
  90+ A392 32 6F 92                             ld		(varQ),a			; Q	 \ lo sum later use c
  91+ A395 32 15 92                             ld		(varP),a			; P	 \ lo sum later just drop
  92+ A398 3A 76 C0                             ld		a,(XX15+1)
  93+ A39B                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  93+ A39B 5F          >			ld	e,a
  93+ A39C 57          >			ld  d,a
  93+ A39D ED 30       >			mul
  94+ A39F 7A                                   ld		a,d
  95+ A3A0 32 90 92                             ld		(varT),a			; T	 \ hi sum
  96+ A3A3 7B                                   ld		a,e
  97+ A3A4 32 15 92                             ld		(varP),a			; P	 \ lo sum
  98+ A3A7 21 6F 92                             ld		hl,varQ
  99+ A3AA 8E                                   adc		a,(hl)				; +Q
 100+ A3AB 32 6F 92                             ld		(varQ),a			; =>Q
 101+ A3AE 3A 90 92                             ld		a,(varT)			;
 102+ A3B1 21 70 92                             ld		hl,varR
 103+ A3B4 8E                                   adc		a,(hl)				;  R
 104+ A3B5 32 70 92                             ld		(varR),a			; R
 105+ A3B8 3A 77 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 106+ A3BB                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 106+ A3BB 5F          >			ld	e,a
 106+ A3BC 57          >			ld  d,a
 106+ A3BD ED 30       >			mul
 107+ A3BF 7A                                   ld		a,d
 108+ A3C0 32 90 92                             ld		(varT),a			; T	 \ hi sum
 109+ A3C3 7B                                   ld		a,e
 110+ A3C4 32 15 92                             ld		(varP),a			; P	 \ lo sum
 111+ A3C7 21 6F 92                             ld		hl,varQ
 112+ A3CA 8E                                   adc		a,(hl)				; +Q
 113+ A3CB 32 6F 92                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 114+ A3CE 3A 90 92                             ld		a,(varT)			; T temp Hi
 115+ A3D1 21 70 92                             ld		hl,varR
 116+ A3D4 8E                                   adc		a,(hl)				; +R
 117+ A3D5 32 70 92                             ld		(varR),a			; R
 118+ A3D8 CD 95 A0                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 119+ A3DB 3A 75 C0                             ld		a,(XX15+0)
 120+ A3DE CD 2A A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 121+ A3E1 32 75 C0                             ld		(XX15+0),a
 122+ A3E4 3A 76 C0                             ld		a,(XX15+1)
 123+ A3E7 CD 2A A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 124+ A3EA 32 76 C0                             ld		(XX15+1),a
 125+ A3ED 3A 76 C0                             ld		a,(XX15+1)
 126+ A3F0 CD 2A A5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 127+ A3F3 32 76 C0                             ld		(XX15+1),a
 128+ A3F6 C9                                   ret
 129+ A3F7
 130+ A3F7
# file closed: ./Maths/normalise96.asm
 714  A3F7                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A3F7              ;Number in hl to decimal ASCII
   2+ A3F7              ;Thanks to z80 Bits
   3+ A3F7              ;inputs:	hl = number to ASCII
   4+ A3F7              ;example: hl=300 outputs '00300'
   5+ A3F7              ;destroys: af, bc, hl, de used
   6+ A3F7              DispHLtoDE:
   7+ A3F7              ; "DispHL, writes HL to DE address"
   8+ A3F7 01 F0 D8     	ld	bc,-10000
   9+ A3FA CD 10 A4     	call	Num1
  10+ A3FD 01 18 FC     	ld	bc,-1000
  11+ A400 CD 10 A4     	call	Num1
  12+ A403 01 9C FF     	ld	bc,-100
  13+ A406 CD 10 A4     	call	Num1
  14+ A409 0E F6        	ld	c,-10
  15+ A40B CD 10 A4     	call	Num1
  16+ A40E 0E FF        	ld	c,-1
  17+ A410              Num1:
  18+ A410 3E 2F        	ld	a,'0'-1
  19+ A412              .Num2:
  20+ A412 3C           	inc	a
  21+ A413 09           	add	hl,bc
  22+ A414 38 FC        	jr	c,.Num2
  23+ A416 ED 42        	sbc	hl,bc
  24+ A418 12           	ld	(de),a
  25+ A419 13           	inc	de
  26+ A41A C9           	ret
  27+ A41B
  28+ A41B              DispAtoDE:
  29+ A41B 26 00        	ld h,0
  30+ A41D 6F           	ld l,a
  31+ A41E C3 F7 A3     	jp DispHLtoDE
  32+ A421
  33+ A421              DispPriceAtoDE:
  34+ A421 26 00        	ld h,0
  35+ A423 6F           	ld l,a
  36+ A424 01 9C FF     	ld	bc,-100
  37+ A427 CD 37 A4     	call	.NumLeadBlank1
  38+ A42A 0E F6        	ld	c,-10
  39+ A42C CD 10 A4     	call	Num1
  40+ A42F 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A431 12           	ld		(de),a					; we can optimse that later TODO
  42+ A432 13           	inc		de						; with just an inc De
  43+ A433 0E FF        	ld	c,-1
  44+ A435 18 D9        	jr		Num1
  45+ A437              .NumLeadBlank1:
  46+ A437 3E 2F        	ld	a,'0'-1
  47+ A439              .NumLeadBlank2:
  48+ A439 3C           	inc	a
  49+ A43A 09           	add	hl,bc
  50+ A43B 38 FC        	jr	c,.NumLeadBlank2
  51+ A43D FE 30        	cp	'0'
  52+ A43F 20 02        	jr	nz,.DontBlank
  53+ A441              .Blank:
  54+ A441 3E 20        	ld	a,' '
  55+ A443              .DontBlank:
  56+ A443 ED 42        	sbc	hl,bc
  57+ A445 12           	ld	(de),a
  58+ A446 13           	inc	de
  59+ A447 C9           	ret
  60+ A448
  61+ A448              DispQtyAtoDE:
  62+ A448 FE 00        	cp	0
  63+ A44A 28 23        	jr	z,.NoStock
  64+ A44C 26 00        	ld h,0
  65+ A44E 6F           	ld l,a
  66+ A44F 01 9C FF     	ld	bc,-100
  67+ A452 CD 5E A4     	call	.NumLeadBlank1
  68+ A455 0E F6        	ld	c,-10
  69+ A457 CD 5E A4     	call	.NumLeadBlank1
  70+ A45A 0E FF        	ld	c,-1
  71+ A45C 18 B2        	jr		Num1
  72+ A45E              .NumLeadBlank1:
  73+ A45E 3E 2F        	ld	a,'0'-1
  74+ A460              .NumLeadBlank2:
  75+ A460 3C           	inc	a
  76+ A461 09           	add	hl,bc
  77+ A462 38 FC        	jr	c,.NumLeadBlank2
  78+ A464 FE 30        	cp	'0'
  79+ A466 20 02        	jr	nz,.DontBlank
  80+ A468              .Blank:
  81+ A468 3E 20        	ld	a,' '
  82+ A46A              .DontBlank:
  83+ A46A ED 42        	sbc	hl,bc
  84+ A46C 12           	ld	(de),a
  85+ A46D 13           	inc	de
  86+ A46E C9           	ret
  87+ A46F              .NoStock:
  88+ A46F 3E 20        	ld	a,' '
  89+ A471 12           	ld	(de),a
  90+ A472 13           	inc	de
  91+ A473 12           	ld	(de),a
  92+ A474 13           	inc	de
  93+ A475 3E 2D        	ld	a,'-'
  94+ A477 12           	ld	(de),a
  95+ A478 13           	inc de
  96+ A479 C9           	ret
  97+ A47A
  98+ A47A
  99+ A47A              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A47A              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A47A              ;### Output     IY=last char in destination string
 102+ A47A              ;### Destroyed AF,BC,DE,HL,IX
 103+ A47A 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A47E 0A 00 00 00
 103+ A482 64 00 00 00
 103+ A486 E8 03 00 00
 103+ A48A 10 27 00 00
 104+ A48E A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A492 40 42 0F 00
 104+ A496 80 96 98 00
 104+ A49A 00 E1 F5 05
 104+ A49E 00 CA 9A 3B
 105+ A4A2 00 00 00 00  clcn32z ds 4
 106+ A4A6
 107+ A4A6              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A4A6 CD B5 A4     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A4A9 FD 7E 00                             ld      a,(IY+0)
 110+ A4AC FD 77 01                             ld      (IY+1),a
 111+ A4AF 3E 2E                                ld      a,"."
 112+ A4B1 FD 77 00                             ld      (IY+0),a
 113+ A4B4 C9                                   ret
 114+ A4B5
 115+ A4B5 DD 22 A2 A4  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A4B9 ED 53 A4 A4                          ld (clcn32z+2),de
 117+ A4BD DD 21 9E A4                          ld ix,clcn32t+36
 118+ A4C1 06 09                                ld b,9
 119+ A4C3 0E 00                                ld c,0
 120+ A4C5 3E 30        .clcn321:               ld a,'0'
 121+ A4C7 B7                                   or a
 122+ A4C8 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A4CB DD 56 01                             ld d,(ix+1)
 124+ A4CE 2A A2 A4                             ld hl,(clcn32z)
 125+ A4D1 ED 52                                sbc hl,de
 126+ A4D3 22 A2 A4                             ld (clcn32z),hl
 127+ A4D6 DD 5E 02                             ld e,(ix+2)
 128+ A4D9 DD 56 03                             ld d,(ix+3)
 129+ A4DC 2A A4 A4                             ld hl,(clcn32z+2)
 130+ A4DF ED 52                                sbc hl,de
 131+ A4E1 22 A4 A4                             ld (clcn32z+2),hl
 132+ A4E4 38 04                                jr c,.clcn325
 133+ A4E6 0C                                   inc c
 134+ A4E7 3C                                   inc a
 135+ A4E8 18 DE                                jr .clcn322
 136+ A4EA DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A4ED DD 56 01                             ld d,(ix+1)
 138+ A4F0 2A A2 A4                             ld hl,(clcn32z)
 139+ A4F3 19                                   add hl,de
 140+ A4F4 22 A2 A4                             ld (clcn32z),hl
 141+ A4F7 DD 5E 02                             ld e,(ix+2)
 142+ A4FA DD 56 03                             ld d,(ix+3)
 143+ A4FD 2A A4 A4                             ld hl,(clcn32z+2)
 144+ A500 ED 5A                                adc hl,de
 145+ A502 22 A4 A4                             ld (clcn32z+2),hl
 146+ A505 11 FC FF                             ld de,-4
 147+ A508 DD 19                                add ix,de
 148+ A50A 0C                                   inc c
 149+ A50B 0D                                   dec c
 150+ A50C 28 05                                jr z,.clcn323
 151+ A50E FD 77 00                             ld (iy+0),a
 152+ A511 FD 23                                inc iy
 153+ A513 10 B0        .clcn323:               djnz .clcn321
 154+ A515 3A A2 A4                             ld a,(clcn32z)
 155+ A518 C6 30                                add A,'0'
 156+ A51A FD 77 00                             ld (iy+0),a
 157+ A51D FD 36 01 00                          ld (iy+1),0
 158+ A521 C9                                   ret
 159+ A522
# file closed: ./Maths/binary_to_decimal.asm
 715  A522              ;INCLUDE "badd_ll38.asm"
 716  A522              ;;INCLUDE "XX12equXX15byXX16.asm"
 717  A522                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A522
   2+ A522              ; USES 			A DE BC
   3+ A522              ; DOES NOT USE 	HL
   4+ A522              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A522 CB 7F        	bit			7,a
   6+ A524 28 04        	jr			z,AequAdivQmul96
   7+ A526 ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A528 CB FF        	set			7,a
   9+ A52A              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A52A              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A52A              TIS2:
  12+ A52A 4F           	ld			c,a							; copy of Acc
  13+ A52B 3A 6F 92     	ld			a,(varQ)
  14+ A52E 57           	ld			d,a							; d = varQ
  15+ A52F 79           	ld			a,c							; recover a
  16+ A530              AequAdivDmul96:
  17+ A530 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A531 E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A533              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A533 BA          >                        cp     d
  19+ A534 D2 54 A5    >                        jp		nc,TIS2AccGTEQ
  20+ A537 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A539              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A539 CB 27        	sla			a
  23+ A53B              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A53B BA          >                        cp      d
  23+ A53C DA 5A A5    >                        jp		c,TIS2SkipSub
  24+ A53F 9A           	sbc			a,d							; do subtraction with carry
  25+ A540 37           	scf
  26+ A541 CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A543 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A545              TIS2SKIPCont:
  29+ A545 78           	ld			a,b							; T
  30+ A546 CB 3F        	srl			a							; result / 2
  31+ A548 CB 3F        	srl			a							; result / 4
  32+ A54A 47           	ld			b,a							; t = t /4
  33+ A54B CB 3F        	srl			a							; result / 8
  34+ A54D 80           	add			a,b							; result /8 + result /4
  35+ A54E 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A54F 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A550 E6 80        	and			$80							; recover sign only
  38+ A552 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A553 C9           	ret
  40+ A554              TIS2AccGTEQ:
  41+ A554              ;TI4:										;\ clean to +/- unity
  42+ A554 79           	ld			a,c
  43+ A555 E6 80        	and			$80							; copy of Acc
  44+ A557 F6 60        	or			$60							; unity
  45+ A559 C9           	ret
  46+ A55A              TIS2SkipSub:
  47+ A55A B7           	or			a
  48+ A55B CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A55D 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A55F C3 45 A5     	jp			TIS2SKIPCont
  51+ A562
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 718  A562                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A562              fmltu:
   2+ A562              AequAmulQdiv256:
   3+ A562              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A562 57           	ld	d,a
   5+ A563 3A 6F 92     	ld	a,(varQ)
   6+ A566 5F           	ld	e,a
   7+ A567 ED 30        	mul
   8+ A569 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A56A C9           	ret
  10+ A56B
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 719  A56B                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A56B              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A56B              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A56B 21 94 95     		ld		hl,varDustZ
   4+ A56E FD 7D        		ld		a,iyl
   5+ A570 ED 31        		add		hl,a
   6+ A572 7E           		ld		a,(hl)
   7+ A573 C3 7F A5     		jp		DV41
   8+ A576              DV42:										; travel step of dust particle front/rear
   9+ A576 21 94 95     		ld		hl,varDustZ
  10+ A579 3A 9F 91     		ld		a,(regY)
  11+ A57C ED 31        		add		hl,a
  12+ A57E 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A57F              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A57F 5F           		ld		e,a							; using E as Q var replacement
  15+ A580 3A 6B 92     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A583              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A583 06 08        		ld		b,8							; counter
  18+ A585 CB 27        		sla		a							;
  19+ A587 57           		ld		d,a							; use d for - p = delta * 2
  20+ A588 AF           		xor		a
  21+ A589              DVL4:										; counter x loop (b reg)
  22+ A589 CB 17        		rl		a							; a = a * 2
  23+ A58B 38 03        		jr		c,DV8						; jump on carry
  24+ A58D BB           		cp		e							; var Q
  25+ A58E 38 02        		jr		c,DV5						; skip subtraction
  26+ A590              DV8:
  27+ A590 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A591 37           		scf									;  carry gets set
  29+ A592              DV5:										; skipped subtraction
  30+ A592 CB 12        		rl		d							; d (P hi)
  31+ A594 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A596              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A596              ; Note we are not going to call LL28+4 but inline code here:
  34+ A596 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A598 4F           		ld		c,a							; use c as R var
  36+ A599              .RollRemainder:
  37+ A599 CB 27        		sla		a
  38+ A59B 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A59D B8           		cp		b							; a < q?
  40+ A59E 30 01        		jr		nc,.DontSBC
  41+ A5A0              .DoSBC:										; a is < q
  42+ A5A0 98           		sbc		a,b							; 	a -= q
  43+ A5A1              .DontSBC:
  44+ A5A1 CB 11        		rl		c							; r << 1
  45+ A5A3 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A5A5 79           		ld		a,c
  47+ A5A6 32 70 92     		ld		(varR),a					; for backwards compat
  48+ A5A9 7A           		ld		a,d
  49+ A5AA 32 15 92     		ld		(varP),a
  50+ A5AD C9           		ret									; R (c) left with remainder
  51+ A5AE              .Reduce:									; a geneated a carry
  52+ A5AE 98           		sbc		a,b							; a = a - (q +1)
  53+ A5AF 37           		scf									; set carry flag for rl
  54+ A5B0 CB 11        		rl		c							; r << 1 briging in carry
  55+ A5B2 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A5B4 79           		ld		a,c
  57+ A5B5 32 70 92     		ld		(varR),a					; for backwards compat
  58+ A5B8 7A           		ld		a,d
  59+ A5B9 32 15 92     		ld		(varP),a
  60+ A5BC C9           		ret
  61+ A5BD              .AnswerTooBig:
  62+ A5BD 0E FF        		ld		c,$FF						; arse its too big
  63+ A5BF 79           		ld		a,c
  64+ A5C0 32 70 92     		ld		(varR),a					; for backwards compat
  65+ A5C3 7A           		ld		a,d
  66+ A5C4 32 15 92     		ld		(varP),a
  67+ A5C7 C9           		ret
  68+ A5C8
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 720  A5C8                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A5C8
   2+ A5C8              asm_defmutl:
   3+ A5C8              AequDmulEdiv256usgn:
   4+ A5C8              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A5C8 ED 30        	mul
   6+ A5CA 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A5CB C9           	ret
   8+ A5CC
   9+ A5CC
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 721  A5CC              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 722  A5CC              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 723  A5CC              ;INCLUDE "APequPmulX-MU11.asm"
 724  A5CC                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A5CC              APequQmulA:
   2+ A5CC              asm_mult1:
   3+ A5CC              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A5CC FE 00        	cp	0
   5+ A5CE 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A5D0 5F           	ld	e,a
   7+ A5D1 3A 6F 92     	ld	a,(varQ)
   8+ A5D4 57           	ld	d,a
   9+ A5D5 FE 00        	cp	0				; compare a
  10+ A5D7 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A5D9 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A5DA E6 80        	and $80				; get the resultant sign and save into b
  13+ A5DC 47           	ld	b,a
  14+ A5DD 7A           	ld	a,d
  15+ A5DE E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A5E0 57           	ld	d,a
  17+ A5E1 7B           	ld	a,e
  18+ A5E2 E6 7F        	and SignMask8Bit
  19+ A5E4 5F           	ld	e,a
  20+ A5E5 ED 30        	mul					; zxn de = d * e
  21+ A5E7 7B           	ld	a,e
  22+ A5E8 32 15 92     	ld	(varP),a		; p = lo
  23+ A5EB 7A           	ld	a,d				; a = hi
  24+ A5EC B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A5ED 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A5EE C9           	ret
  27+ A5EF              .mul0:
  28+ A5EF AF           	xor	a
  29+ A5F0 32 15 92     	ld	(varP),a
  30+ A5F3 57           	ld	d,a
  31+ A5F4 5F           	ld  e,a
  32+ A5F5 C9           	ret
  33+ A5F6
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 725  A5F6                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A5F6              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A5F6              ; Calculate the following between sign-magnitude numbers:
   3+ A5F6              ;   (S A) = (S R) + (A Q)
   4+ A5F6              ; where the sign bytes only contain the sign bits, not magnitudes.
   5+ A5F6              ; note goes wrong at <-127 >128 so need 16 bit version
   6+ A5F6              ; so need to fix the issue with carry flag not returning a fault correctly
   7+ A5F6              LL38:
   8+ A5F6              ;	ld		d,a
   9+ A5F6              ;	ld		a,(varQ)
  10+ A5F6              ;	ld		e,a
  11+ A5F6              ;	ld		a,(varS)
  12+ A5F6              ;	ld		h,a
  13+ A5F6              ;	ld		a,(varR)
  14+ A5F6              ;	ld		l,a
  15+ A5F6              ;	call	ADDHLDESignedv3
  16+ A5F6              ;	ld		a,h
  17+ A5F6              ;	ld		(varS),a
  18+ A5F6              ;	ld		a,l
  19+ A5F6              ;	ret
  20+ A5F6
  21+ A5F6              ; Calculate sign for Q from A and varS
  22+ A5F6 21 71 92     	ld		hl,varS							;
  23+ A5F9 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  24+ A5FA FA 05 A6     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  25+ A5FD 3A 6F 92     	ld		a,(varQ)						; Q	\ else addition, S already correct
  26+ A600 21 70 92     	ld		hl,varR
  27+ A603 86           	add		a,(hl)							; a = Q + R
  28+ A604 C9           	ret										; Done
  29+ A605              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  30+ A605 3A 70 92     	ld		a,(varR)						;
  31+ A608 21 6F 92     	ld		hl,varQ                         ;
  32+ A60B              	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do t
  32+ A60B BE          >                        cp    (hl)
  32+ A60C DA 23 A6    >                        jp	  c,LL39SwapSubtraction
  33+ A60F              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  33+ A60F B7          >				or a
  34+ A610 9E           	sbc		a,(hl)							; A = R - Q
  35+ A611              	JumpIfNegative LL39SignCorrection				; if there was underflow we have to correct sign
  35+ A611 FA 16 A6    >                        jp		m, LL39SignCorrection
  36+ A614 B7           	or		a								; Clear carry flag to say result is correct
  37+ A615 C9           	ret
  38+ A616              LL39SignCorrection:
  39+ A616 ED 44            neg                                     ; flip A 2'c value to positive
  40+ A618 08           	ex		af,af'							; save A temporarily
  41+ A619 3A 71 92     	ld		a,(varS)						; Flip Sign bit in varS
  42+ A61C EE 80        	xor		$80							    ;
  43+ A61E 32 71 92     	ld		(varS),a                        ; flip sign bit of a
  44+ A621 08           	ex		af,af'                          ; get back a which is the result
  45+ A622 C9           	ret
  46+ A623              LL39SwapSubtraction:
  47+ A623 C5           	push	bc
  48+ A624 47           	ld		b,a
  49+ A625 7E           	ld		a,(hl)
  50+ A626 90           	sub		b
  51+ A627 C1           	pop		bc
  52+ A628 08           	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  53+ A629 3A 71 92     	ld		a,(varS)
  54+ A62C EE 80        	xor		$80
  55+ A62E 32 71 92     	ld		(varS),a
  56+ A631 08           	ex		af,af'
  57+ A632 C9           	ret
  58+ A633
  59+ A633              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  60+ A633              ;;;;; Calculate the following between sign-magnitude numbers:
  61+ A633              ;;;;;   (S A) = (S R) + (A Q)
  62+ A633              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  63+ A633              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  64+ A633              ;;;;LL38:
  65+ A633              ;;;;; Calculate sign for Q from A and varS
  66+ A633              ;;;;	ld		hl,varS							;
  67+ A633              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  68+ A633              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  69+ A633              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  70+ A633              ;;;;	ld		hl,varR
  71+ A633              ;;;;	add		a,(hl)							; a = Q + R
  72+ A633              ;;;;	ret										; Done
  73+ A633              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  74+ A633              ;;;;	ld		hl,varQ                         ;
  75+ A633              ;;;;	ld		a,(hl)
  76+ A633              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
  77+ A633              ;;;;	ld		a,(varR)						;
  78+ A633              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  79+ A633              ;;;;	sbc		a,(hl)							; A = R - Q
  80+ A633              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
  81+ A633              ;;;;	or		a								; Clear carry flag to say result is correct
  82+ A633              ;;;;	ret
  83+ A633              ;;;;.SignCorrection:
  84+ A633              ;;;;    neg                                     ; flip A 2'c value to positive
  85+ A633              ;;;;	ex		af,af'							; save A temporarily
  86+ A633              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
  87+ A633              ;;;;	xor		$80							    ;
  88+ A633              ;;;;	ld		(varS),a                        ; flip sign bit of a
  89+ A633              ;;;;	ex		af,af'                          ; get back a which is the result
  90+ A633              ;;;;	ret
  91+ A633              ;;;;LL39Sub16Bit:
  92+ A633              ;;;;	ld		e,a
  93+ A633              ;;;;	ld		d,0
  94+ A633              ;;;;	ld		a,(varR)
  95+ A633              ;;;;	ld		l,a
  96+ A633              ;;;;	ld		h,0
  97+ A633              ;;;;	ClearCarryFlag
  98+ A633              ;;;;	sbc		hl,de
  99+ A633              ;;;;	jr		c,.SignCorrection16bit
 100+ A633              ;;;;	bit		7,h
 101+ A633              ;;;;	jr		z,.GoodToReturn
 102+ A633              ;;;;.Needtonegate:
 103+ A633              ;;;;	macronegate16hl
 104+ A633              ;;;;.GoodToReturn
 105+ A633              ;;;;	ld		a,l
 106+ A633              ;;;;	or		a
 107+ A633              ;;;;	ret
 108+ A633              ;;;;.SignCorrection16bit:
 109+ A633              ;;;;	macronegate16hl
 110+ A633              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 111+ A633              ;;;;	xor		$80							    ;
 112+ A633              ;;;;	ld		(varS),a                        ; flip sign bit of a
 113+ A633              ;;;;	ld		a,l
 114+ A633              ;;;;	ret
 115+ A633
 116+ A633
# file closed: ./Maths/Utilities/badd_ll38.asm
 726  A633                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A633              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A633              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A633              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A633
   5+ A633
   6+ A633              moveship4Yreg:
   7+ A633 3A 9F 91     		ld		a,(regY)
   8+ A636 47           		ld		b,a
   9+ A637              moveship4breg:
  10+ A637              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A637              MVS4PitchAlphaRollBeta:
  12+ A637              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A637 3A 80 92     		ld		a,(ALPHA)					;  ALPHA
  14+ A63A 32 6F 92     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A63D 21 0D C0     		ld		hl,UBnKxsgn
  16+ A640 78           		ld		a,b							; from
  17+ A641 ED 31        		add		hl,a
  18+ A643 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A644 32 70 92     		ld		(varR),a					; R  \ lo
  20+ A647 23           		inc		hl
  21+ A648 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A649 32 71 92     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A64C 2B           		dec		hl
  24+ A64D 2B           		dec		hl
  25+ A64E 2B           		dec		hl							;
  26+ A64F 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A650 32 15 92     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A653 23           		inc		hl
  29+ A654 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A655 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A657 CD 9A 9F     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A65A 23                   inc     hl
  33+ A65B 23                   inc     hl
  34+ A65C 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A65D 2B                   dec     hl
  36+ A65E 3A 9E 91             ld      a,(regX)
  37+ A661 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A662 32 15 92             ld      (varP),a                    ;  P
  39+ A665 2B                   dec     hl
  40+ A666 2B                   dec     hl
  41+ A667 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A668 32 70 92             ld      (varR),a                    ;  R	\ lo
  43+ A66B 23                   inc     hl
  44+ A66C 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A66D 32 71 92             ld      (varS),a                    ; S	\ hi
  46+ A670 23                   inc     hl
  47+ A671 23                   inc     hl
  48+ A672 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A673 CD 9A 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A676 2B                   dec     hl
  51+ A677 2B                   dec     hl
  52+ A678 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A679 3A 9E 91             ld      a,(regX)
  54+ A67C 2B                   dec     hl
  55+ A67D 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A67E 32 15 92             ld      (varP),a                    ; P
  57+ A681 3A 20 92             ld      a,(BETA)                    ; BETA
  58+ A684 32 6F 92             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A687 23                   inc     hl
  60+ A688 23                   inc     hl
  61+ A689 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A68A 32 70 92             ld      (varR),a                    ; R	\ lo
  63+ A68D 23                   inc     hl
  64+ A68E 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A68F 32 71 92             ld      (varS),a                    ; S	\ hi
  66+ A692 23                   inc     hl
  67+ A693 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A694 32 15 92             ld      (varP),a                    ; P	\ lo
  69+ A697 23                   inc     hl
  70+ A698 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A699 EE 80                xor     $80                         ; flip sign hi
  72+ A69B CD 9A 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A69E 2B                   dec     hl
  74+ A69F 2B                   dec     hl
  75+ A6A0 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A6A1 3A 9E 91             ld      a,(regX)
  77+ A6A4 2B                   dec     hl
  78+ A6A5 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A6A6 32 15 92             ld      (varP),a                    ; P
  80+ A6A9 23                   inc     hl
  81+ A6AA 23                   inc     hl
  82+ A6AB 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A6AC 32 70 92             ld      (varR),a                    ; R	\ lo
  84+ A6AF 23                   inc     hl
  85+ A6B0 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A6B1 32 71 92             ld      (varS),a                    ; S	\ hi
  87+ A6B4 2B                   dec     hl
  88+ A6B5 2B                   dec     hl
  89+ A6B6 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A6B7 CD 9A 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A6BA 23                   inc     hl
  92+ A6BB 23                   inc     hl
  93+ A6BC 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A6BD 3A 9E 91             ld      a,(regX)
  95+ A6C0 2B                   dec     hl
  96+ A6C1 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A6C2 C9                   ret
  98+ A6C3
  99+ A6C3
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 727  A6C3              ;INCLUDE "MoveShip5-MVS5.asm"
 728  A6C3              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 729  A6C3              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 730  A6C3              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 731  A6C3                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A6C3              ;;;LL28:
   2+ A6C3              ;;;    ld      c,a                         ;
   3+ A6C3              ;;;    ld      a,(varQ)                    ;
   4+ A6C3              ;;;    ld      b,a                         ;
   5+ A6C3              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A6C3              ;;;RequAmul256divB:                        ;
   7+ A6C3              ;;;LL28Breg:
   8+ A6C3              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A6C3              ;;;	cp		b							; Check A >= Q
  10+ A6C3              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A6C3              ;;;.CalcRemainder:
  12+ A6C3              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A6C3              ;;;.RollRemainder:
  14+ A6C3              ;;;	sla		a
  15+ A6C3              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A6C3              ;;;	cp		b							; a < q?
  17+ A6C3              ;;;	jr		nc,.DontSBC
  18+ A6C3              ;;;.DoSBC:									; a is < q
  19+ A6C3              ;;;	sbc		a,b							; 	a -= q
  20+ A6C3              ;;;.DontSBC:
  21+ A6C3              ;;;	rl		c							; r << 1
  22+ A6C3              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A6C3              ;;;    ld      a,c
  24+ A6C3              ;;;    ld      (varR),a
  25+ A6C3              ;;;	ret									; R (c) left with remainder
  26+ A6C3              ;;;.Reduce:								; a geneated a carry
  27+ A6C3              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A6C3              ;;;	scf									; set carry flag for rl
  29+ A6C3              ;;;	rl		c							; r << 1 briging in carry
  30+ A6C3              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A6C3              ;;;    ld      a,c
  32+ A6C3              ;;;    ld      (varR),a
  33+ A6C3              ;;;	ret
  34+ A6C3              ;;;.AnswerTooBig:
  35+ A6C3              ;;;	ld	    c,$FF							; arse its too big
  36+ A6C3              ;;;    ld      a,c
  37+ A6C3              ;;;    ld      (varR),a
  38+ A6C3              ;;;	ret
  39+ A6C3
  40+ A6C3              BCequAmul256DivC:
  41+ A6C3 59             ld    e,c
  42+ A6C4 67             ld    h,a
  43+ A6C5 2E 00          ld    l,0
  44+ A6C7              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A6C7 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A6C8 B7             or a                                   ; from this time on the carry is cleared
  47+ A6C9 C8             ret z
  48+ A6CA 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A6CD 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A6CF              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A6CF ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A6D1 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A6D2 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A6D4 C9             ret
  55+ A6D5
  56+ A6D5              HL_Div_C:
  57+ A6D5              ; Integer divides HL by C
  58+ A6D5              ; Result in HL, remainder in A
  59+ A6D5              ; Clobbers F, B
  60+ A6D5 06 10                ld b,16
  61+ A6D7 AF                   xor a
  62+ A6D8              HL_Div_C_Loop:
  63+ A6D8 29                   add hl,hl
  64+ A6D9 17                   rla
  65+ A6DA B9                   cp c
  66+ A6DB 38 02                jr c,HL_DivC_Skip
  67+ A6DD 91                   sub c
  68+ A6DE 2C                   inc l
  69+ A6DF              HL_DivC_Skip:
  70+ A6DF 10 F7                djnz HL_Div_C_Loop
  71+ A6E1 7D                   ld   a,l
  72+ A6E2 32 70 92             ld  (varR),a
  73+ A6E5 C9                   ret
  74+ A6E6
  75+ A6E6
  76+ A6E6
  77+ A6E6              ; Entry point if varQ is populated with demoninator
  78+ A6E6              RequAmul256divQ:
  79+ A6E6              BFRDIV:
  80+ A6E6 F5           		push	af
  81+ A6E7 3A 6F 92     		ld		a,(varQ)
  82+ A6EA 4F           		ld		c,a
  83+ A6EB F1           		pop		af
  84+ A6EC FE 00        		cp		0
  85+ A6EE CA 05 A7     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A6F1              RequAmul256divC:
  87+ A6F1 2E 00        		ld		l,0
  88+ A6F3 67           		ld		h,a
  89+ A6F4              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A6F4 06 10        		ld b,16
  91+ A6F6 AF           		xor a
  92+ A6F7              LOOPPOINT:
  93+ A6F7 29           		add hl,hl
  94+ A6F8 17           		rla
  95+ A6F9 B9           		cp c
  96+ A6FA 38 02        		jr c,SKIPINCSUB
  97+ A6FC 2C           		inc l
  98+ A6FD 91           		sub c
  99+ A6FE              SKIPINCSUB:
 100+ A6FE 10 F7        		djnz LOOPPOINT
 101+ A700 7D           		ld		a,l
 102+ A701 32 70 92     		ld 		(varR),a
 103+ A704 C9           		ret
 104+ A705              HLDIVC_0_BY:
 105+ A705 32 70 92     		ld		(varR),a
 106+ A708 C9           		ret
 107+ A709              ;	push	af
 108+ A709              ;	ld		a,b
 109+ A709              ;	ld		(varQ),a
 110+ A709              ;	pop		af
 111+ A709              ;RequAmul256divQ:
 112+ A709              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A709              ;	ld		hl,varQ
 114+ A709              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A709              ;	ld		b,$FE						; b = X
 116+ A709              ;	ld		c,a							; c = R	div roll counter
 117+ A709              ;LL31:									; roll R
 118+ A709              ;	sla		a
 119+ A709              ;	jr		c,LL29						; hop to Reduce
 120+ A709              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A709              ;	sbc		a,(hl)						; a = a - Q
 122+ A709              ;	rl		c							; rotate R left
 123+ A709              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A709              ;	jr		LL2Good
 125+ A709              ;LL29:									; Reduce
 126+ A709              ;	sbc		a,(hl)
 127+ A709              ;	scf
 128+ A709              ;	rl		c							; roll a carry flag into R
 129+ A709              ;	jr		c,LL31						;  loop R
 130+ A709              ;	jr		LL2Good
 131+ A709              ;LL2:
 132+ A709              ;	ld		c,$FF
 133+ A709              ;LL2Good:
 134+ A709              ;	ld		a,c
 135+ A709              ;	ld		(varR),a
 136+ A709              ;	ret
 137+ A709
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 732  A709                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A709              RequAdivQ:
   2+ A709              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A709              LL61:										; Handling division R=A/Q for case further down
   4+ A709 4F           	ld		c,a								; c = A
   5+ A70A 3A 6F 92     	ld		a,(varQ)						; test for divide by 0
   6+ A70D FE 00        	cp		0
   7+ A70F 28 16        	jr		z,LL84							; divide by zero error
   8+ A711 57           	ld		d,a								; now we can do C/D
   9+ A712 06 08            ld b,8
  10+ A714 AF               xor a
  11+ A715              LL63:										; roll divide loop
  12+ A715 CB 21            sla c
  13+ A717 17               rla
  14+ A718 BA               cp d
  15+ A719 38 02            jr c,LL64
  16+ A71B 0C               inc c
  17+ A71C 92               sub d
  18+ A71D              LL64:
  19+ A71D 10 F6            djnz LL63
  20+ A71F 32 6E 92     	ld	(varU),a							; store remainder in U
  21+ A722 79           	ld	a,c
  22+ A723 32 70 92     	ld	(varR),a							; store remainder in R
  23+ A726 C9               ret
  24+ A727              LL84:										; div error  R=U=#5
  25+ A727 3E 32        	ld		a,50
  26+ A729 32 70 92     	ld		(varR),a
  27+ A72C 32 6E 92     	ld		(varU),a
  28+ A72F C9           	ret
  29+ A730
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 733  A730              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 734  A730                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A730              asm_mult12:
   2+ A730              RSequQmulA:
   3+ A730              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A730 CD CC A5     	call APequQmulA
   5+ A733 08           	ex 	af,af'
   6+ A734 7A           	ld	a,d
   7+ A735 32 71 92     	ld	(varS),a
   8+ A738 7B           	ld	a,e
   9+ A739 32 70 92     	ld	(varR),a
  10+ A73C 08           	ex 	af,af'
  11+ A73D C9           	ret
  12+ A73E
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 735  A73E              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 736  A73E                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ A73E              ;rotmap0xLo: DB	0				; INWK +9
   2+ A73E              ;rotmap0xHi: DB	0				; INWK +10
   3+ A73E              ;rotmat0yLo: DB	0				; INWK +11
   4+ A73E              ;rotmat0yHi: DB	0				; INWK +12
   5+ A73E              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A73E              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A73E              ;rotmap1xLo: DB	0				; INWK +15
   8+ A73E              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A73E              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A73E              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A73E              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A73E              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A73E              ;rotmat2xLo: DB	0				; INWK +21
  14+ A73E              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A73E              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A73E              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A73E              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A73E              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A73E              ;
  20+ A73E              ;rotmatFx	equ	rotmat0xHi
  21+ A73E              ;rotmatFy	equ	rotmat0yHi
  22+ A73E              ;rotmatFz	equ	rotmat0zHi
  23+ A73E              ;rotmatUx	equ	rotmat1xHi
  24+ A73E              ;rotmatUy	equ	rotmat1yHi
  25+ A73E              ;rotmatUz	equ	rotmat1zHi
  26+ A73E              ;
  27+ A73E              ;inwkarray			equ		INWK+10
  28+ A73E
  29+ A73E                  include "Universe/CopyRotMattoXX15.asm"
# file opened: ./Universe/CopyRotMattoXX15.asm
   1++A73E              CopyRotMatNoseVtoXX15:
   2++A73E                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A73E 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A741 32 75 C0    >               ld       (XX15VecX),a
   3++A744                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A744 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A747 32 76 C0    >               ld       (XX15VecY),a
   4++A74A                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A74A 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A74D 32 77 C0    >               ld       (XX15VecZ),a
   5++A750 C9                   ret
   6++A751
   7++A751              CopyRotMatRoofVtoXX15:
   8++A751                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A751 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A754 32 75 C0    >               ld       (XX15VecX),a
   9++A757                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A757 3A 1D C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A75A 32 76 C0    >               ld       (XX15VecY),a
  10++A75D                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A75D 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A760 32 77 C0    >               ld       (XX15VecZ),a
  11++A763 C9                   ret
  12++A764
  13++A764              CopyRotMatSideVtoXX15:
  14++A764                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A764 3A 15 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A767 32 75 C0    >               ld       (XX15VecX),a
  15++A76A                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A76A 3A 17 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A76D 32 76 C0    >               ld       (XX15VecY),a
  16++A770                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A770 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A773 32 77 C0    >               ld       (XX15VecZ),a
  17++A776 C9                   ret
  18++A777
# file closed: ./Universe/CopyRotMattoXX15.asm
  30+ A777
  31+ A777                  include "Universe/CopyXX15toRotMat.asm"
# file opened: ./Universe/CopyXX15toRotMat.asm
   1++A777              CopyXX15toRotMatNoseV:
   2++A777                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A777 3A 75 C0    >               ld       a,(XX15VecX)
   2++A77A 32 21 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A77D                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A77D 3A 76 C0    >               ld       a,(XX15VecY)
   3++A780 32 23 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A783                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A783 3A 77 C0    >               ld       a,(XX15VecZ)
   4++A786 32 25 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A789 C9                   ret
   6++A78A
   7++A78A              CopyXX15toRotMatRoofV:
   8++A78A                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A78A 3A 75 C0    >               ld       a,(XX15VecX)
   8++A78D 32 1B C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A790                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A790 3A 76 C0    >               ld       a,(XX15VecY)
   9++A793 32 1D C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A796                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A796 3A 77 C0    >               ld       a,(XX15VecZ)
  10++A799 32 1F C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++A79C C9                   ret
  12++A79D
  13++A79D              CopyXX15toRotMatSideV:
  14++A79D                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++A79D 3A 75 C0    >               ld       a,(XX15VecX)
  14++A7A0 32 15 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++A7A3                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++A7A3 3A 76 C0    >               ld       a,(XX15VecY)
  15++A7A6 32 17 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++A7A9                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++A7A9 3A 77 C0    >               ld       a,(XX15VecZ)
  16++A7AC 32 19 C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++A7AF C9                   ret
  18++A7B0
# file closed: ./Universe/CopyXX15toRotMat.asm
  32+ A7B0
  33+ A7B0              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ A7B0              		; b = regX on entry
  35+ A7B0              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ A7B0 08           		ex		af,af'
  37+ A7B1 78           		ld		a,b
  38+ A7B2 32 6F 92     		ld		(varQ),a
  39+ A7B5 08           		ex		af,af'
  40+ A7B6 EE 80        		xor		$80							;	 flip sign of Acc
  41+ A7B8 CD 9A 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ A7BB              ; USES 				A BC E
  43+ A7BB              ; DOES NOT USE		D HL
  44+ A7BB              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ A7BB 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ A7BC E6 80        		and		$80							; ..
  47+ A7BE 5F           		ld		e,a							; ..
  48+ A7BF 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ A7C0 E6 7F        		and		$7F							; ..
  50+ A7C2 06 FE        		ld		b,$FE						; slide counter T1
  51+ A7C4              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ A7C4 CB 27        		sla		a
  53+ A7C6              		JumpIfALTNusng $60, TIS1SkipSub
  53+ A7C6 FE 60       >                        cp      $60
  53+ A7C8 DA D5 A7    >                        jp		c,TIS1SkipSub
  54+ A7CB DE 60        		sbc		a,$60							; subtract 96
  55+ A7CD 37           		scf
  56+ A7CE CB 10        		rl		b							;  T1
  57+ A7D0 38 F2        		jr		c,TIS1RollTLoop
  58+ A7D2              TIS1KIPCont:
  59+ A7D2 78           		ld		a,b							;   T1
  60+ A7D3 B3           		or		e							;   restore T sign
  61+ A7D4 C9           		ret
  62+ A7D5              TIS1SkipSub:
  63+ A7D5 B7           	or			a
  64+ A7D6 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ A7D8 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ A7DA C3 D2 A7     	jp			TIS1KIPCont
  67+ A7DD
  68+ A7DD              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ A7DD              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ A7DD
  71+ A7DD
  72+ A7DD
  73+ A7DD
  74+ A7DD              TidyRotYSmall:
  75+ A7DD CD 09 A9     		call	CalcRoofvZ
  76+ A7E0 32 1F C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ A7E3 C3 17 A8     		jp		NormaliseRoofV
  78+ A7E6
  79+ A7E6              TidyRotXSmall:
  80+ A7E6 AF           		xor		a
  81+ A7E7 47           		ld		b,a
  82+ A7E8 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ A7EB E6 60        		and		%01100000
  84+ A7ED CA DD A7     		jp		z,TidyRotYSmall
  85+ A7F0 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ A7F3 47           		ld		b,a							; b = regX for now
  87+ A7F4 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ A7F7 CD CF A8     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ A7FA 32 1D C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ A7FD C3 17 A8     		jp		NormaliseRoofV
  91+ A800              TIDY:
  92+ A800              ORTHOGALISE:
  93+ A800              ;-- NormaliseNosev
  94+ A800 CD 3E A7     		call	CopyRotMatNoseVtoXX15
  95+ A803 CD 23 A3     		call	normaliseXX1596fast			; normalise z hi
  96+ A806 CD 77 A7     		call	CopyXX15toRotMatNoseV
  97+ A809              .CheckNXSmall:
  98+ A809 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
  99+ A80C E6 60        		and		%01100000					; check top two magnitude bits
 100+ A80E CA E6 A7     		jp		z,TidyRotXSmall
 101+ A811              .RotXIsBig:
 102+ A811 CD 95 A8             call	CalcRoofvX
 103+ A814 32 1B C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 104+ A817              NormaliseRoofV:
 105+ A817 CD 51 A7     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 106+ A81A CD 23 A3     		call	normaliseXX1596fast			; normalise roof
 107+ A81D              ;calc sidev x
 108+ A81D CD 8A A7     		call	CopyXX15toRotMatRoofV		; get back normalised version
 109+ A820 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
 110+ A823 32 6F 92     		ld		(varQ),a					; q = nosev_y
 111+ A826 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 112+ A829 CD 30 A7     		call	RSequQmulA
 113+ A82C 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 114+ A82F 47           		ld		b,a							; b = regX for now
 115+ A830 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 116+ A833 CD B0 A7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 117+ A836                      IfAIsZeroGoto NormSideXNoNeg
 117+ A836 FE 00       >				cp	0
 117+ A838 CA 3D A8    >				jp	z,NormSideXNoNeg
 118+ A83B EE 80        		xor		$80							; flip a to get -sidev_x
 119+ A83D              NormSideXNoNeg:
 120+ A83D 32 15 C0     		ld		(UBnkrotmatSidevX+1),a
 121+ A840              ;calc sidev y
 122+ A840 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 123+ A843 32 6F 92     		ld		(varQ),a
 124+ A846 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 125+ A849 CD 30 A7     		call	RSequQmulA
 126+ A84C 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 127+ A84F 47           		ld		b,a							; b = regX for now
 128+ A850 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 129+ A853 CD B0 A7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 130+ A856                      IfAIsZeroGoto NormSideYNoNeg
 130+ A856 FE 00       >				cp	0
 130+ A858 CA 5D A8    >				jp	z,NormSideYNoNeg
 131+ A85B EE 80        		xor		$80							; flip a to get -sidev_y
 132+ A85D              NormSideYNoNeg:
 133+ A85D 32 23 C0     		ld		(UBnkrotmatNosevY+1),a
 134+ A860              ;calc sidev z
 135+ A860 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 136+ A863 32 6F 92     		ld		(varQ),a
 137+ A866 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 138+ A869 CD 30 A7     		call	RSequQmulA
 139+ A86C 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 140+ A86F 47           		ld		b,a							; b = regX for now
 141+ A870 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 142+ A873 CD B0 A7     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 143+ A876                      IfAIsZeroGoto NormSideZNoNeg
 143+ A876 FE 00       >				cp	0
 143+ A878 CA 7D A8    >				jp	z,NormSideZNoNeg
 144+ A87B EE 80        		xor		$80							; flip a to get -sidev_y
 145+ A87D              NormSideZNoNeg:
 146+ A87D 32 17 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 147+ A880              .ClearLoBytes:
 148+ A880 21 20 C0     		ld		hl,UBnkrotmatNosevX
 149+ A883 06 09        		ld		b,9
 150+ A885 AF                   xor     a
 151+ A886              .ClearLoLoop:
 152+ A886 77           		ld		(hl),a						; zero out lo bytes
 153+ A887 23           		inc		hl
 154+ A888 23           		inc		hl
 155+ A889 10 FB        		djnz	.ClearLoLoop
 156+ A88B CD 64 A7     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 157+ A88E CD 23 A3     		call	normaliseXX1596fast			; normalise roof
 158+ A891              ;calc sidev x
 159+ A891 CD 9D A7     		call	CopyXX15toRotMatSideV		; get back normalised version
 160+ A894
 161+ A894 C9           		ret
 162+ A895
 163+ A895
 164+ A895
 165+ A895              ;;;;;;;;.CheckNYSmall:
 166+ A895              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 167+ A895              ;;;;;;;;		and		$7F
 168+ A895              ;;;;;;;;		cp		0
 169+ A895              ;;;;;;;;		jp		z,Tidy1RZ
 170+ A895              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 171+ A895              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 172+ A895              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 173+ A895              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 174+ A895              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 175+ A895              ;;;;;;;;.DoNZ:
 176+ A895              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 177+ A895              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 178+ A895              ;;;;;;;;NormaliseRoofv:
 179+ A895              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 180+ A895              ;;;;;;;;		push	bc
 181+ A895              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 182+ A895              ;;;;;;;;		pop		bc
 183+ A895              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 184+ A895              ;;;;;;;;ProcessSidev:
 185+ A895              ;;;;;;;;; -- SIDEV X
 186+ A895              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 187+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 188+ A895              ;;;;;;;;		push	bc
 189+ A895              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 190+ A895              ;;;;;;;;		pop		bc
 191+ A895              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 192+ A895              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 193+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 194+ A895              ;;;;;;;;		push	bc
 195+ A895              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 196+ A895              ;;;;;;;;		pop		bc
 197+ A895              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 198+ A895              ;;;;;;;;; -- SIDEV Y
 199+ A895              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 200+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 201+ A895              ;;;;;;;;		push	bc
 202+ A895              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 203+ A895              ;;;;;;;;		pop		bc
 204+ A895              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 205+ A895              ;;;;;;;;		ld		b,a
 206+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 207+ A895              ;;;;;;;;		push	bc
 208+ A895              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 209+ A895              ;;;;;;;;		pop		bc
 210+ A895              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 211+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 212+ A895              ;;;;;;;;		push	bc
 213+ A895              ;;;;;;;;; -- SIDEV Z
 214+ A895              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 215+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 216+ A895              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 217+ A895              ;;;;;;;;		pop		bc
 218+ A895              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 219+ A895              ;;;;;;;;		ld		b,a
 220+ A895              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 221+ A895              ;;;;;;;;		push	bc
 222+ A895              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 223+ A895              ;;;;;;;;		pop		bc
 224+ A895              ;;;;;;;;		ld		(sidev_z+1),a
 225+ A895              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 226+ A895              ;;;;;;;;		ld		hl,sidev_z
 227+ A895              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 228+ A895              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 229+ A895              ;;;;;;;;NormaliseSideV:
 230+ A895              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 231+ A895              ;;;;;;;;		push	bc
 232+ A895              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 233+ A895              ;;;;;;;;		pop		bc
 234+ A895              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 235+ A895              ;;;;;;;;
 236+ A895
 237+ A895
 238+ A895              CalcRoofvX:
 239+ A895              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 240+ A895              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 240+ A895 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 240+ A898 32 6F 92    >               ld       (varQ),a
 241+ A89B 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 242+ A89E CD 30 A7     		call	RSequQmulA						; rs = nosez hi * roofz hi
 243+ A8A1              		ldCopyByte UBnkrotmatNosevY+1,varQ
 243+ A8A1 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 243+ A8A4 32 6F 92    >               ld       (varQ),a
 244+ A8A7 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 245+ A8AA CD 9A 9F     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 246+ A8AD 7A           		ld		a,d
 247+ A8AE E6 80        		and 	$80
 248+ A8B0 FD 67        		ld		iyh,a
 249+ A8B2              ;DEBUG		ld		c,a
 250+ A8B2 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 251+ A8B5 4F           		ld		c,a								; temp save
 252+ A8B6 E6 80        		and		$80
 253+ A8B8 FD AC        		xor		iyh								; flip from saved multiply sign result
 254+ A8BA FD 67        		ld		iyh,a							; save nosesev sign to iyh
 255+ A8BC 79           		ld		a,c								; recover a
 256+ A8BD E6 7F        		and		$7F								; a is unsigned nosev x
 257+ A8BF 42           		ld		b,d
 258+ A8C0 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 259+ A8C1 57           		ld		d,a								; de = nosev x hi
 260+ A8C2 1E 00        		ld		e,0
 261+ A8C4 CD A5 A1     		call	BC_Div_DE
 262+ A8C7 FD 7C        		ld		a,iyh							; get back sign from nosevx
 263+ A8C9 EE 80        		xor		$80								; flip sign
 264+ A8CB E6 80        		and		$80								; keep sign bit only
 265+ A8CD B0           		or		b
 266+ A8CE C9           		ret
 267+ A8CF
 268+ A8CF
 269+ A8CF              CalcRoofvY:
 270+ A8CF              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 271+ A8CF              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 271+ A8CF 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 271+ A8D2 32 6F 92    >               ld       (varQ),a
 272+ A8D5 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 273+ A8D8 CD 30 A7     		call	RSequQmulA
 274+ A8DB              		ldCopyByte UBnkrotmatNosevX+1,varQ
 274+ A8DB 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 274+ A8DE 32 6F 92    >               ld       (varQ),a
 275+ A8E1 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 276+ A8E4 CD 9A 9F     		call	madXAequQmulAaddRS
 277+ A8E7 7A           		ld		a,d
 278+ A8E8 E6 80        		and 	$80
 279+ A8EA FD 67        		ld		iyh,a
 280+ A8EC 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 281+ A8EF 4F           		ld		c,a								; temp save
 282+ A8F0 E6 80        		and		$80
 283+ A8F2 FD AC        		xor		iyh								; flip from saved multiply sign result
 284+ A8F4 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 285+ A8F6 79           		ld		a,c								; recover a
 286+ A8F7 E6 7F        		and		$7F								; a is unsigned nosev x
 287+ A8F9 42           		ld		b,d
 288+ A8FA 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 289+ A8FB 57           		ld		d,a								; de = nosev x hi
 290+ A8FC 1E 00        		ld		e,0
 291+ A8FE CD A5 A1     		call	BC_Div_DE
 292+ A901 FD 7C        		ld		a,iyh
 293+ A903 EE 80        		xor		$80
 294+ A905 E6 80        		and		$80
 295+ A907 B0           		or		b
 296+ A908 C9           		ret
 297+ A909
 298+ A909              CalcRoofvZ:
 299+ A909              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 300+ A909              		ldCopyByte UBnkrotmatNosevY+1,varQ
 300+ A909 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 300+ A90C 32 6F 92    >               ld       (varQ),a
 301+ A90F 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 302+ A912 CD 30 A7     		call	RSequQmulA						; rs = NOSEy * ROOFy
 303+ A915              		ldCopyByte UBnkrotmatNosevX+1,varQ
 303+ A915 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 303+ A918 32 6F 92    >               ld       (varQ),a
 304+ A91B 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 305+ A91E CD 9A 9F     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 306+ A921 7A           		ld		a,d
 307+ A922 E6 80        		and 	$80
 308+ A924 FD 67        		ld		iyh,a
 309+ A926 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 310+ A929 4F           		ld		c,a								; temp save
 311+ A92A E6 80        		and		$80
 312+ A92C FD AC        		xor		iyh								; flip from saved multiply sign result
 313+ A92E FD 67        		ld		iyh,a							; save nosesev sign to iyh
 314+ A930 79           		ld		a,c								; recover a
 315+ A931 E6 7F        		and		$7F								; a is unsigned nosev x
 316+ A933 42           		ld		b,d
 317+ A934 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 318+ A935 57           		ld		d,a								; de = nosev x hi
 319+ A936 1E 00        		ld		e,0
 320+ A938 CD A5 A1     		call	BC_Div_DE
 321+ A93B FD 7C        		ld		a,iyh
 322+ A93D EE 80        		xor		$80
 323+ A93F E6 80        		and		$80
 324+ A941 B0           		or		b
 325+ A942 C9           		ret
 326+ A943
 327+ A943
 328+ A943
 329+ A943              ;;ProcessSidev:
 330+ A943              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 331+ A943              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 332+ A943              ;;		push	bc
 333+ A943              ;;		call	RSequQmulA					; RS = Q * A MULT12
 334+ A943              ;;		pop		bc
 335+ A943              ;;		ld		a,(UBnkrotmatNosevY+1)
 336+ A943              ;;		ld		b,a							; set x (b) to value of nosev_z
 337+ A943              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 338+ A943              ;;		push	bc
 339+ A943              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 340+ A943              ;;		pop		bc
 341+ A943              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 342+ A943              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 343+ A943              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 344+ A943              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 345+ A943              ;;		push	bc
 346+ A943              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 347+ A943              ;;		pop		bc
 348+ A943              ;;		ld		a,(UBnkrotmatNosevZ+1)
 349+ A943              ;;		ld		b,a
 350+ A943              ;;		ld		a,(UBnkrotmatNosevY+1)
 351+ A943              ;;		push	bc
 352+ A943              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 353+ A943              ;;		pop		bc
 354+ A943              ;;		xor		$80							; a *= -1
 355+ A943              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 356+ A943              ;;		ld		a,(UBnkrotmatRoofvY+1)
 357+ A943              ;;		push	bc
 358+ A943              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 359+ A943              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 360+ A943              ;;		call	RSequQmulA					; RS = Q * A MULT12
 361+ A943              ;;		pop		bc
 362+ A943              ;;		ld		a,(UBnkrotmatNosevX+1)
 363+ A943              ;;		ld		b,a
 364+ A943              ;;		ld		a,(UBnkrotmatRoofvY+1)
 365+ A943              ;;		push	bc
 366+ A943              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 367+ A943              ;;		pop		bc
 368+ A943              ;;		xor		$80
 369+ A943              ;;		ld		(UBnkrotmatSidevZ+1),a
 370+ A943              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 371+ A943              ;;		ld		hl,UBnkrotmatSidevZ
 372+ A943              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 373+ A943              ;;		ld		hl,UBnkrotmatNosevX
 374+ A943
 375+ A943
 376+ A943
 377+ A943
 378+ A943
 379+ A943
 380+ A943              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 381+ A943              ;;;;;;;;.ProcessRoofv:
 382+ A943              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 383+ A943              ;;;;;;;;		push	bc
 384+ A943              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 385+ A943              ;;;;;;;;		pop		bc
 386+ A943              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 387+ A943              ;;;;;;;;.ProcessSidev:
 388+ A943              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 389+ A943              ;;;;;;;;		push	bc
 390+ A943              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 391+ A943              ;;;;;;;;		pop		bc
 392+ A943              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 393+ A943
# file closed: ./Maths/Utilities/tidy.asm
 737  A943                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A943
   2+ A943              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A943 BA          >                        cp     d
   2+ A944 D2 62 A9    >                        jp		nc,.Ll28Exit255
   3+ A947 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A949 CB 27        .LL31:                  sla     a
   5+ A94B 38 0D                                jr      c,.LL29
   6+ A94D                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A94D BA          >                        cp      d
   6+ A94E DA 53 A9    >                        jp		c,.SkipSub
   7+ A951 92                                   sub     d
   8+ A952                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A952 B7          >				or a
   9+ A953 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A954 CB 13                                rl      e
  11+ A956 38 F1                                jr      c,.LL31
  12+ A958 7B                                   ld      a,e
  13+ A959 C9                                   ret
  14+ A95A 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A95B 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A95C CB 13                                rl      e                           ; rotate counter e left
  17+ A95E 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A960 7B                                   ld      a,e                         ; stick result in a
  19+ A961 C9                                   ret
  20+ A962 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A964 C9                                   ret
  22+ A965
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 738  A965                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A965              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A965              TIS1:
   3+ A965 08           		ex		af,af'
   4+ A966 3A 9E 91     		ld		a,(regX)
   5+ A969 47           		ld		b,a
   6+ A96A 08           		ex		af,af'
   7+ A96B              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A96B 08           		ex		af,af'
   9+ A96C 78           		ld		a,b
  10+ A96D 32 6F 92     		ld		(varQ),a
  11+ A970 08           		ex		af,af'
  12+ A971 EE 80        		xor		$80							;	 flip sign of Acc
  13+ A973 CD 9A 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A976              ; USES 				A BC E
  15+ A976              ; DOES NOT USE		D HL
  16+ A976              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A976 47           		ld		b,a
  18+ A977 E6 80        		and		$80							;	hi sign
  19+ A979 5F           		ld		e,a							;   e = varT
  20+ A97A 78           		ld		a,b
  21+ A97B E6 7F        		and		$7F							;	hi A7
  22+ A97D 06 FE        		ld		b,$FE						;   slide counter
  23+ A97F 48           		ld		c,b							;   c == T1 ::  T1
  24+ A980              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A980 CB 27        		sla		a
  26+ A982 FE 60        		cp		$60							; max 96
  27+ A984 30 02        		jr		nc,.DV4
  28+ A986 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A988              .DV4:										; skip subtraction
  30+ A988 CB 11        		rl		c							;  T1
  31+ A98A 38 F4        		jr		c,.DVL3
  32+ A98C 79           		ld		a,c							;   T1
  33+ A98D B3           		or		e							;   restore T sign
  34+ A98E C9           		ret
  35+ A98F
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 739  A98F              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 740  A98F              ;INCLUDE "XHiYLoequPA-gc3.asm"
 741  A98F              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 742  A98F              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 743  A98F              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 744  A98F                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 745  A98F
 746  A98F
 747  A98F                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ A98F              M_GETSETDRV             equ $89
   2+ A98F              F_OPEN                  equ $9a
   3+ A98F              F_CLOSE                 equ $9b
   4+ A98F              F_READ                  equ $9d
   5+ A98F              F_WRITE                 equ $9e
   6+ A98F              F_SEEK                  equ $9f
   7+ A98F
   8+ A98F              FA_READ                 equ $01
   9+ A98F              FA_APPEND               equ $06
  10+ A98F              FA_OVERWRITE            equ $0C
  11+ A98F
  12+ A98F F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ A993 DD E5
  13+ A995 AF                                   xor	    a	; set drive. 0 is default
  14+ A996 CF                                   rst	    $08
  15+ A997 89                                   db	    $89
  16+ A998 32 A2 A9                             ld	    (DefaultDrive),a
  17+ A99B DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ A99F C1 F1
  18+ A9A1 C9                                   ret
  19+ A9A2 00           DefaultDrive:	        db	0
  20+ A9A3
  21+ A9A3              ; *******************************************************************************************************
  22+ A9A3              ;	Function:	Open a file read for reading/writing
  23+ A9A3              ;	In:		ix = filename
  24+ A9A3              ;			b  = Open filemode
  25+ A9A3              ;	ret		a  = handle, 0 on error
  26+ A9A3              ; *******************************************************************************************************
  27+ A9A3 E5 DD E5     fOpen:	                push	hl,,ix
  28+ A9A6 DD E5                                push	ix
  29+ A9A8 3A A2 A9                             ld	    a,(DefaultDrive)
  30+ A9AB CF                                   rst	    $08
  31+ A9AC 9A                                   db	    F_OPEN
  32+ A9AD DD E1 E1                             pop	    hl,,ix
  33+ A9B0 C9                                   ret
  34+ A9B1
  35+ A9B1              ; *******************************************************************************************************
  36+ A9B1              ;	Function	Read bytes from the open file
  37+ A9B1              ;	In:		ix  = address to read into
  38+ A9B1              ;			bc  = amount to read
  39+ A9B1              ;	ret:		carry set = error
  40+ A9B1              ; *******************************************************************************************************
  41+ A9B1 B7           fRead:                  or   	a             ; is it zero?
  42+ A9B2 C8                                   ret  	z             ; if so return
  43+ A9B3 E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ A9B6 E1                                   pop		hl
  45+ A9B7 CF                                   rst	    $08
  46+ A9B8 9D                                   db	    F_READ
  47+ A9B9 E1                                   pop	    hl
  48+ A9BA C9                                   ret
  49+ A9BB
  50+ A9BB              ; *******************************************************************************************************
  51+ A9BB              ;	Function	Read bytes from the open file
  52+ A9BB              ;	In:		ix  = address to read into
  53+ A9BB              ;			bc  = amount to read
  54+ A9BB              ;	ret:		carry set = error
  55+ A9BB              ; *******************************************************************************************************
  56+ A9BB B7           fWrite:                 or   	a             ; is it zero?
  57+ A9BC C8                                   ret  	z             ; if so return
  58+ A9BD E5 DD E5                             push	hl,,ix
  59+ A9C0 E1                                   pop	    hl
  60+ A9C1 CF                                   rst	    $08
  61+ A9C2 9E                                   db	    F_WRITE
  62+ A9C3 E1                                   pop	    hl
  63+ A9C4 C9                                   ret
  64+ A9C5
  65+ A9C5              ; *******************************************************************************************************
  66+ A9C5              ;	Function:	Close open file
  67+ A9C5              ;	In:		a  = handle
  68+ A9C5              ;	ret		a  = handle, 0 on error
  69+ A9C5              ; *******************************************************************************************************
  70+ A9C5 B7           fClose:		            or   	a             ; is it zero?
  71+ A9C6 C8                                   ret  	z             ; if so return
  72+ A9C7 CF                                   rst	    $08
  73+ A9C8 9B                                   db	    F_CLOSE
  74+ A9C9 C9                                   ret
  75+ A9CA
  76+ A9CA              ; *******************************************************************************************************
  77+ A9CA              ;	Function	Read bytes from the open file
  78+ A9CA              ;	In:		a   = file handle
  79+ A9CA              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ A9CA              ;			BCDE = bytes to seek
  81+ A9CA              ;	ret:		BCDE = file pos from start
  82+ A9CA              ; *******************************************************************************************************
  83+ A9CA DD E5 E5     fSeek:                  push	ix,,hl
  84+ A9CD CF                                   rst	    $08
  85+ A9CE 9F                                   db	    F_SEEK
  86+ A9CF E1 DD E1                             pop	    ix,,hl
  87+ A9D2 C9                                   ret
  88+ A9D3
  89+ A9D3              ; *******************************************************************************************************
  90+ A9D3              ; Init the file system
  91+ A9D3              ; *******************************************************************************************************
  92+ A9D3 CD 8F A9     InitFileSystem:         call    GetDefaultDrive
  93+ A9D6 C9                                   ret
  94+ A9D7
  95+ A9D7              ; *******************************************************************************************************
  96+ A9D7              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ A9D7              ; In:		hl = file data pointer
  98+ A9D7              ;		ix = address to load to
  99+ A9D7              ; *******************************************************************************************************
 100+ A9D7 CD 8F A9     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ A9DA C5 D5 F5                             push	bc,,de,,af
 102+ A9DD                                      ; get file size
 103+ A9DD 4E                                   ld	    c,(hl)
 104+ A9DE 2C                                   inc	    l
 105+ A9DF 46                                   ld	    b,(hl)
 106+ A9E0 2C                                   inc	    l
 107+ A9E1 C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ A9E4 E5                                   push	hl				; get name into ix
 109+ A9E5 DD E1                                pop	    ix
 110+ A9E7 06 01                                ld      b,FA_READ		; mode open for reading
 111+ A9E9 CD A3 A9                             call    fOpen
 112+ A9EC 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ A9EE FE 00                                cp	    0				; was file handle 0?
 114+ A9F0 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ A9F2 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ A9F5 F5                                   push	af				; remember handle
 117+ A9F6 CD B1 A9                             call	fRead			; read data from A to address IX of length BC
 118+ A9F9 38 0C                                jr	    c,.error_reading
 119+ A9FB F1                                   pop	    af			    ; get handle back
 120+ A9FC CD C5 A9                             call	fClose			; close file
 121+ A9FF 38 07                                jr	    c,.error_closing
 122+ AA01 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ AA04 C9                                   ret
 124+ AA05              ;
 125+ AA05              ; On error, display error code an lock up so we can see it
 126+ AA05              ;
 127+ AA05 DD E1        .error_opening:         pop	ix
 128+ AA07 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ AA08
 130+ AA08              .error_closing:
 131+ AA08 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ AA09 D1                                   pop	de
 133+ AA0A C1                                   pop	bc
 134+ AA0B C9                                   ret
 135+ AA0C
 136+ AA0C              ; *******************************************************************************************************
 137+ AA0C              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ AA0C              ; In:		hl = file data pointer
 139+ AA0C              ;		ix = address to save from
 140+ AA0C              ;		bc = size
 141+ AA0C              ; *******************************************************************************************************
 142+ AA0C CD 8F A9     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ AA0F C5 E5                                push	bc,,hl   			; store size& save address
 144+ AA11 E5                                   push	hl		        	; get name into ix
 145+ AA12 DD E1                                pop	    ix
 146+ AA14 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ AA16 CD A3 A9                             call    fOpen
 148+ AA19 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ AA1B FE 00                                cp	    0			        ; was file handle 0?
 150+ AA1D 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ AA1F DD E1                                pop	    ix			        ; get save address back
 152+ AA21 C1                                   pop	    bc			        ; get size back
 153+ AA22 F5                                   push	af			        ; remember handle
 154+ AA23 CD BB A9                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AA26 38 04                                jr	c,.error
 156+ AA28 F1                                   pop	af			            ; get handle back
 157+ AA29 CD C5 A9                             call	fClose			    ; close file
 158+ AA2C C9           .error:                 ret
 159+ AA2D              ;
 160+ AA2D              ; On error, display error code an lock up so we can see it
 161+ AA2D              ;
 162+ AA2D DD E1        .error_opening:         pop	ix
 163+ AA2F C1                                   pop	bc	; don't pop a, need error code
 164+ AA30 C9                                   ret
 165+ AA31
# file closed: ./Drive/drive_access.asm
 748  AA31
 749  AA31                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AA31 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AA35 41 4E 44 45
   1+ AA39 52 00
   2+ AA3B 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AA3F 4E 54 4F 52
   2+ AA43 59 00
   3+ AA45 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AA49 65 6E 74 20
   3+ AA4D 53 79 73 74
   3+ AA51 65 6D 20 20
   3+ AA55 20 3A 00
   4+ AA58 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AA5C 72 73 70 61
   4+ AA60 63 65 20 53
   4+ AA64 79 73 74 65
   4+ AA68 6D 3A 00
   5+ AA6B 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AA6F 69 74 69 6F
   5+ AA73 6E 20 20 20
   5+ AA77 3A 00
   6+ AA79 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AA7D 20 20 20 20
   6+ AA81 20 20 20 20
   6+ AA85 3A 00
   7+ AA87 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AA8B 20 20 20 20
   7+ AA8F 20 20 20 20
   7+ AA93 3A 00
   8+ AA95 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AA99 6C 20 53 74
   8+ AA9D 61 74 75 73
   8+ AAA1 3A 00
   9+ AAA3 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AAA7 6E 67 20 20
   9+ AAAB 20 20 20 20
   9+ AAAF 3A 00
  10+ AAB1 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AAB5 50 4D 45 4E
  10+ AAB9 54 3A 00
  11+ AABC
  12+ AABC 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AAC0 20 4C 69 67
  12+ AAC4 68 74 20 59
  12+ AAC8 65 61 72 73
  12+ AACC 00
  13+ AACD 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AAD1 58 58 58 58
  13+ AAD5 58 58 00
  14+ AAD8 2E           txt_cash_decimal        DB "."
  15+ AAD9 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AADD 00
  16+ AADE
  17+ AADE              txt_status_colour		equ $FF
  18+ AADE
  19+ AADE              print_boiler_text_l2:
  20+ AADE              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AADE              BoilerTextLoop:
  22+ AADE C5           	push		bc			; Save Message Count loop value
  23+ AADF 4E           	ld			c,(hl)		; Get Row into b
  24+ AAE0 23           	inc			hl
  25+ AAE1 46           	ld			b,(hl)		; Get Col into b
  26+ AAE2 23           	inc			hl
  27+ AAE3 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AAE4 23           	inc			hl
  29+ AAE5 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AAE6 23           	inc			hl
  31+ AAE7 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AAE8 EB           	ex			de,hl		; now hl = address of text data
  33+ AAE9 1E FF        	ld			e,txt_status_colour
  34+ AAEB                  MMUSelectLayer2
  34+ AAEB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AAEF CD 80 E0     	call		l1_print_at
  36+ AAF2 E1           	pop			hl
  37+ AAF3 C1           	pop			bc
  38+ AAF4 10 E8        	djnz		BoilerTextLoop
  39+ AAF6 C9           	ret
  40+ AAF7
  41+ AAF7
  42+ AAF7              print_boiler_text:
  43+ AAF7              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AAF7              .BoilerTextLoop:
  45+ AAF7 C5           	push		bc			; Save Message Count loop value
  46+ AAF8 4E           	ld			c,(hl)		; Get Row into b
  47+ AAF9 23           	inc			hl
  48+ AAFA 46           	ld			b,(hl)		; Get Col into b
  49+ AAFB 23           	inc			hl
  50+ AAFC 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AAFD 23           	inc			hl
  52+ AAFE 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AAFF 23           	inc			hl
  54+ AB00 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AB01 EB           	ex			de,hl		; now hl = address of text data
  56+ AB02 1E FF        	ld			e,txt_status_colour
  57+ AB04 C5           	push		bc
  58+ AB05 D1           	pop			de
  59+ AB06 CD 80 E0     	call		l1_print_at
  60+ AB09 E1           	pop			hl
  61+ AB0A C1           	pop			bc
  62+ AB0B 10 EA        	djnz		.BoilerTextLoop
  63+ AB0D C9           	ret
  64+ AB0E
  65+ AB0E              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AB0E
   2++AB0E
   3++AB0E 3A E9 95     	ld		a,(Fuel)
   4++AB11 11 BC AA     	ld		de,txt_fuel_level
   5++AB14 0E 9C        	ld	c, -100
   6++AB16 CD 20 AB     	call	.Num1
   7++AB19 0E F6        	ld	c,-10
   8++AB1B CD 20 AB     	call	.Num1
   9++AB1E 0E FF        	ld	c,-1
  10++AB20              .Num1:
  11++AB20 06 2F        	ld	b,'0'-1
  12++AB22              .Num2:
  13++AB22 04           	inc		b
  14++AB23 81           	add		a,c
  15++AB24 38 FC        	jr		c,.Num2
  16++AB26 91           	sub 	c
  17++AB27 C5           	push	bc
  18++AB28 F5           	push	af
  19++AB29 79           	ld		a,c
  20++AB2A FE FF        	cp		-1
  21++AB2C CC 35 AB     	call	z,.InsertDot
  22++AB2F 78           	ld		a,b
  23++AB30 12           	ld		(de),a
  24++AB31 13           	inc		de
  25++AB32 F1           	pop		af
  26++AB33 C1           	pop		bc
  27++AB34 C9           	ret
  28++AB35              .InsertDot:
  29++AB35 3E 2E        	ld		a,'.'
  30++AB37 12           	ld		(de),a
  31++AB38 13           	inc		de
  32++AB39 C9           	ret
  33++AB3A
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AB3A
  67+ AB3A 2A E5 95     GetCash:                ld      hl,(Cash)
  68+ AB3D EB                                   ex      de,hl
  69+ AB3E DD 2A E7 95                          ld      ix,(Cash+2)
  70+ AB42 FD 21 CD AA                          ld		iy,txt_cash_amount
  71+ AB46 CD B5 A4                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AB49 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AB4C 32 D9 AA                             ld		(txt_cash_fraction),a
  74+ AB4F 21 CE AA     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AB52 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AB53 FE 00                                cp		0
  77+ AB55 C8                                   ret		z
  78+ AB56 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AB5A C9                                   ret
  80+ AB5B
# file closed: ./Menus/common_menu.asm
 750  AB5B              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 751  AB5B              ;INCLUDE "./title_page.asm"
 752  AB5B
 753  AB5B              ; Blocks dependent on variables in Universe Banks
 754  AB5B              ; Bank 49
 755  AB5B              ;    SEG RESETUNIVSEG
 756  AB5B              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 757  AB5B              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 758  AB5B
 759  AB5B              ;	ORG ResetUniverseAddr
 760  AB5B              ;INCLUDE "./GameEngine/resetUniverse.asm"
 761  AB5B              ; Bank 50
 762  AB5B
 763  AB5B
 764  AB5B
 765  AB5B                  SLOT    MenuShrChtAddr
 766  AB5B                  PAGE    BankMenuShrCht
 767  AB5B              	ORG     MenuShrChtAddr,BankMenuShrCht
 768  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 C3 9D  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD 80 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 1C 93                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A E9 95                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 5A E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 69 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B 1C 93                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 25 93     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 69 93                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 89 9E                             ld		hl,name_expanded
  65+ C127 CD E4 9D                             call	CapitaliseString
  66+ C12A 21 89 9E                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 69 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B 1C 93                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 25 93     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 69 93                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 25 93     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 1C 93                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 69 93                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 65 93                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD B5 A4                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD E9 A2                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD E9 A2                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD E9 A2                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c,.NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c,.NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 8B 96     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 25 93                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 89 9E                             ld		hl,name_expanded
 258+ C2C2 CD E4 9D                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 89 9E                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 89 9E                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 35 92                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 8B 96     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 25 93     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 89 9E     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD E4 9D                             call	CapitaliseString
 333+ C34C 21 89 9E     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 74 92                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 7B 8E                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 25 93                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 5B 92                             ld      de,SystemSeed
 359+ C388 CD 5E 96                             call    copy_seed
 360+ C38B 3A 5C 92                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 1D 93     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 5E 92     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 1C 93                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 5C 92     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 1D 93                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 5E 92                             ld		a,(SystemSeed+3)
 390+ C3C5 21 1C 93                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 60 92                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 14 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 74 92                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 74 92                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 47 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 53 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 7B 92                             ld      (MenuIdMax),a
 420+ C41E 2A 1C 93                             ld		hl,(PresentSystemX)
 421+ C421 22 69 93                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 04 9E                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 58 96     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A 79 92     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A 6A 93     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 6A 93                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A 6A 93     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 6A 93                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A 69 93     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 69 93                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A 69 93     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 69 93                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A 1C 93     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 69 93                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A 25 93     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B 69 93                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 69 93                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: ./Menus/short_range_chart_menu.asm
 769  C4DA              ; Bank 51
 770  C4DA
 771  C4DA                  SLOT    MenuGalChtAddr
 772  C4DA                  PAGE    BankMenuGalCht
 773  C4DA              	ORG     MenuGalChtAddr
 774  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 C3 9D  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD 80 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B 1C 93  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A E9 95     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 5A E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B 69 93  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 74 92     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A 25 93         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 5B 92         ld      de,SystemSeed
  66+ C0F0 CD 5E 96     	call    copy_seed
  67+ C0F3 3A 5E 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 5C 92     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 5F 92     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 74 92     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 74 92     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 47 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 53 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 7B 92         ld      (MenuIdMax),a
 106+ C168 2A 1C 93         ld      hl,(PresentSystemX)
 107+ C16B 22 69 93         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 04 9E     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A 25 93         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B 69 93      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD 80 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 62 90         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 5F 90         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD 80 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD F2 8F                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 75 90                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD 89 90     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 61 90                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 60 90     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 60 90                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A 25 93                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 40 90                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 69 93                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD 80 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD 80 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A 79 92                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A 6A 93     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 6A 93                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A 6A 93     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 6A 93                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A 69 93     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 69 93                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A 69 93     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 69 93                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A 1C 93     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 69 93                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A 25 93     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B 69 93                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 69 93                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B 69 93  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A 25 93                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B 69 93                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 89 9E                             ld		hl,name_expanded
 356+ C3B5 CD E4 9D                             call	CapitaliseString
 357+ C3B8 21 89 9E                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A 25 93     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B 1C 93                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B 69 93                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 65 93                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD B5 A4                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD E9 A2                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD E9 A2                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD E9 A2                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 74 92                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A 25 93     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A 1C 93                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 58 93                             ld      de,PresentSystemSeeds
 442+ C479 CD 5E 96                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 74 92                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 74 92                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
 775  C495              ; Bank 52
 776  C495
 777  C495                  SLOT    MenuInventAddr
 778  C495                  PAGE    BankMenuInvent
 779  C495              	ORG     MenuInventAddr
 780  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD 80 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A E9 95     	ld		a,(Fuel)
   4++C136 11 BC AA     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 F0 95                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 3C 99                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 67 9C                             ld		hl, WordIdx
 118+ C17A CD 3C 99                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD 80 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD 80 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 3C 99                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 67 9C                             ld		hl,WordIdx
 148+ C1C1 CD 3C 99                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD 80 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A E7 95     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A E5 95                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 47 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 53 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 7B 92                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 BC AA                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 781  C281
 782  C281              ; Bank 53
 783  C281
 784  C281                  SLOT    MenuSystemAddr
 785  C281                  PAGE    BankMenuSystem
 786  C281              	ORG     MenuSystemAddr
 787  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 C3 9D  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 89 9E  						DW $0280,name_expanded
   5+ C018 08 0B F3 9A  						DW $0B08,WordDistance
   6+ C01C 08 13 FC 9A  						DW $1308,WordEconomy
   7+ C020 08 1B 04 9B  						DW $1B08,WordGovernment
   8+ C024 08 23 0F 9B  						DW $2308,WordTechLevel
   9+ C028 08 2B 19 9B  						DW $2B08,WordPopulation
  10+ C02C 08 3B 34 9B  						DW $3B08,WordGross
  11+ C030 38 3B 3A 9B  						DW $3B38,WordProductivity
  12+ C034 08 43 47 9B  						DW $4308,WordAverage
  13+ C038 48 43 4F 9B  						DW $4348,WordRadius
  14+ C03C 60 0B C3 9D  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 C3 9D  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 25 93     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 1C 93                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD 80 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 47 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 53 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 7B 92                             ld		(MenuIdMax),a
 134+ C316 3A 25 93     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 69 93  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 1C 93  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 69 93  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A 1C 93                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 52 93     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 04 9E                             call	expandTokenToString
 170+ C37B 3A 25 93     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 89 9E                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 89 9E                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 65 93  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD A6 A4                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD 80 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 04 9E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 04 9E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD F6 9D                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD 80 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD 80 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD A6 A4                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD 80 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 25 93     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD 80 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD B5 A4                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD 80 E0                             call	l1_print_at
 272+ C48F 3A 25 93     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD B5 A4                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD 80 E0                             call	l1_print_at
 289+ C4BC 3A 25 93     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD CD E0                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 788  C4F7
 789  C4F7              ; Bank 54
 790  C4F7
 791  C4F7                  SLOT    MenuMarketAddr
 792  C4F7                  PAGE    BankMenuMarket
 793  C4F7                  ORG     MenuMarketAddr
 794  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 C3 9D  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 89 9E  						DW $0220,name_expanded
   4+ C018 80 0B E3 99  						DW $0B80,WordUnit
   5+ C01C B0 0B 2C 9C  						DW $0BB0,WordQuantity
   6+ C020 08 13 0A 9C  						DW $1308,WordProduct
   7+ C024 60 13 12 9C  						DW $1360,WordUoM
   8+ C028 80 13 16 9C  						DW $1380,WordPrice
   9+ C02C B0 13 3A 9C  						DW $13B0,WordStock
  10+ C030 E0 13 36 9C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD 80 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A E7 95     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A E5 95                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A EF 95                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD 80 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD 80 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD 80 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 F0 95                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 67 9C                             ld		hl,WordIdx
 273+ C2C5 CD 3C 99                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD 80 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 67 9C                             ld		hl,WordIdx
 281+ C2DF CD 3C 99                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD 80 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD 80 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD 80 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD 80 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 47 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 53 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 7B 92                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 25 93     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 04 9E                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD 80 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD 80 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD F2 8F                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD F2 8F                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD F2 8F                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD F2 8F                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 F0 95                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 EF 95                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD 33 9F                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 F0 95                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A EE 95     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A E7 95     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A E5 95                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 F0 95                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 EF 95                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD 46 9F                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 795  C4FD
 796  C4FD              ; Bank 66
 797  C4FD
 798  C4FD                  SLOT    DispMarketAddr
 799  C4FD                  PAGE    BankDispMarket
 800  C4FD                  ORG     DispMarketAddr
 801  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 C3 9D  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 89 9E  						DW $0220,name_expanded
   4+ C018 80 0B E3 99  						DW $0B80,WordUnit
   5+ C01C B0 0B 2C 9C  						DW $0BB0,WordQuantity
   6+ C020 08 13 0A 9C  						DW $1308,WordProduct
   7+ C024 60 13 12 9C  						DW $1360,WordUoM
   8+ C028 80 13 16 9C  						DW $1380,WordPrice
   9+ C02C B0 13 3A 9C  						DW $13B0,WordStock
  10+ C030 E0 13 36 9C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD 80 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A E7 95     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A E5 95                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	    ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A EF 95                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:       call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD 80 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD 80 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD 80 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 F0 95                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 67 9C                             ld		hl,WordIdx
 256+ C2A5 CD 3C 99                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD 80 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 67 9C                             ld		hl,WordIdx
 264+ C2BF CD 3C 99                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD 80 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD 80 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD 80 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD 80 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 47 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 53 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 7B 92                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A 25 93     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 04 9E                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD 80 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD 80 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 802  C3D3
 803  C3D3              ; Bank 55
 804  C3D3
 805  C3D3                  SLOT    StockTableAddr
 806  C3D3                  PAGE    BankStockTable
 807  C3D3                  ORG     StockTableAddr
 808  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 58 96                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 40 93                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 5E 93                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 40 93                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 5E 93                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
 809  E113
 810  E113              ; Bank 57
 811  E113
 812  E113                  SLOT    LAYER2Addr
 813  E113                  PAGE    BankLAYER2
 814  E113                  ORG     LAYER2Addr
 815  E000
 816  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 817  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
 818  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
 819  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 820  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 821  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
 822  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 823  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 824  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 825  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c,l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c,l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 08 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >				or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                xor a
 100+ E589 FD 95       >                sub iyl
 100+ E58B FD 6F       >                ld iyl,a
 100+ E58D 9F          >                sbc a,a
 100+ E58E FD 94       >                sub iyh
 100+ E590 FD 67       >                ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                xor a
 102+ E59E FD 95       >                sub iyl
 102+ E5A0 FD 6F       >                ld iyl,a
 102+ E5A2 9F          >                sbc a,a
 102+ E5A3 FD 94       >                sub iyh
 102+ E5A5 FD 67       >                ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                   cp    ixl
 118+ E5C8 D0          >                   ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE FE 00       >				cp	0
 135+ E5E0 CA F9 E5    >				jp	z,l2S_ErrZero
 136+ E5E3              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E3              	lddeiy
 137+ E5E3 FD 54       >                ld		d,iyh
 137+ E5E5 FD 5D       >                ld		e,iyl
 138+ E5E7 EB           	ex		de,hl
 139+ E5E8 16 00        	ld		d,0
 140+ E5EA 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5ED 5F           	ld		e,a
 142+ E5EE              	ClearCarryFlag
 142+ E5EE B7          >				or a
 143+ E5EF ED 52        	sbc		hl,de
 144+ E5F1 EB           	ex		de,hl
 145+ E5F2              	ldiyde
 145+ E5F2 FD 62       >                ld		iyh,d
 145+ E5F4 FD 6B       >                ld		iyl,e
 146+ E5F6              l2S_adjustRow:									; move Y down by one
 147+ E5F6 04           	inc		b
 148+ E5F7 18 BC        	jr		l2S_Loop
 149+ E5F9              l2S_ErrZero:
 150+ E5F9 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FC EB           	ex		de,hl
 152+ E5FD 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E600              	ClearCarryFlag
 153+ E600 B7          >				or a
 154+ E601 ED 52        	sbc		hl,de
 155+ E603 EB           	ex		de,hl
 156+ E604              	ldiyde
 156+ E604 FD 62       >                ld		iyh,d
 156+ E606 FD 6B       >                ld		iyl,e
 157+ E608              l2S_adjustCol2:
 158+ E608 00           	nop										; update X and Y
 159+ E609 04           	inc		b
 160+ E60A 18 A9        	jr		l2S_Loop
 161+ E60C
 162+ E60C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60C 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60F 21 00 00                             ld		hl,0                            ;
 165+ E612 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E615 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E618 78           l2D_preSort:            ld		a,b								;
 168+ E619                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E619 BA          >                        cp      d
 168+ E61A DA 22 E6    >                        jp		c,l2D_noYSort
 169+ E61D              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61D 60          >                ld		h,b
 169+ E61E 69          >                ld		l,c
 170+ E61F EB                                   ex		de,hl                           ;
 171+ E620                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E620 44          >                ld		b,h
 171+ E621 4D          >                ld		c,l
 172+ E622 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E624 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E626 79           l2D_setXLen:            ld		a,c                             ;
 175+ E627                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E627 BB          >                        cp      e
 175+ E628 DA 34 E6    >                        jp		c,l2D_PosXLen
 176+ E62B 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62C 93                                   sub     e                               ;
 178+ E62D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E630 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E632 18 07                                jr		l2D_XINCDEC
 181+ E634 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E635 91                                   sub		c                               ;
 183+ E636 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E639 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63B 32 AA E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63E 32 DB E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E641 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E642 90                                   sub		b
 189+ E643 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E646              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E646 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E649 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64D                                      ClearCarryFlag
 193+ E64D B7          >				or a
 194+ E64E ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E650 EB                                   ex		de,hl
 196+ E651 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E653 FD 6B                                ld		iyl,e
 198+ E655 F2 7A E6                             jp		p,l2D_fracIsPositive
 199+ E658              l2D_fracIsNegative:     NegIY
 199+ E658 AF          >                xor a
 199+ E659 FD 95       >                sub iyl
 199+ E65B FD 6F       >                ld iyl,a
 199+ E65D 9F          >                sbc a,a
 199+ E65E FD 94       >                sub iyh
 199+ E660 FD 67       >                ld iyh,a
 200+ E662                                      ShiftIYRight1
 200+ E662 FD 7C       >			   ld 	a,iyh
 200+ E664 CB 3F       >			   srl 	a
 200+ E666 FD 67       >			   ld	iyh,a
 200+ E668 FD 7D       >			   ld 	a,iyl
 200+ E66A 1F          >			   rra
 200+ E66B FD 6F       >			   ld	iyl,a
 201+ E66D                                      NegIY
 201+ E66D AF          >                xor a
 201+ E66E FD 95       >                sub iyl
 201+ E670 FD 6F       >                ld iyl,a
 201+ E672 9F          >                sbc a,a
 201+ E673 FD 94       >                sub iyh
 201+ E675 FD 67       >                ld iyh,a
 202+ E677 C3 85 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E67A              l2D_fracIsPositive:     ShiftIYRight1
 203+ E67A FD 7C       >			   ld 	a,iyh
 203+ E67C CB 3F       >			   srl 	a
 203+ E67E FD 67       >			   ld	iyh,a
 203+ E680 FD 7D       >			   ld 	a,iyl
 203+ E682 1F          >			   rra
 203+ E683 FD 6F       >			   ld	iyl,a
 204+ E685              l2D_SkipCalcInc:
 205+ E685 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E687 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E68A CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68D D1 C1                                pop     bc,,de
 209+ E68F DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E691                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E691 B8          >                        cp     b
 210+ E692 D2 98 E6    >                        jp		nc,l2D_CheckXPos
 211+ E695 C3 9C E6                             jp		l2D_Continue
 212+ E698 79           l2D_CheckXPos:          ld		a,c
 213+ E699                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E699 DD BD       >                  cp      ixl
 213+ E69B C8          >                  ret     z
 214+ E69C              l2D_Continue:
 215+ E69C FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69E CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6A0 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A2 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A5 16 00                                ld		d,0
 220+ E6A7 5F                                   ld		e,a
 221+ E6A8 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6AA 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AB 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AD FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AF FD B5                                or		iyl
 226+ E6B1                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B1 FE 00       >				cp	0
 226+ E6B3 CA CC E6    >				jp	z,l2D_ErrZero
 227+ E6B6              l2D_ErrPositive:		lddeiy
 227+ E6B6 FD 54       >                ld		d,iyh
 227+ E6B8 FD 5D       >                ld		e,iyl
 228+ E6BA EB                                   ex		de,hl
 229+ E6BB 16 00                                ld		d,0
 230+ E6BD 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6C0 5F                                   ld		e,a
 232+ E6C1                                      ClearCarryFlag
 232+ E6C1 B7          >				or a
 233+ E6C2 ED 52                                sbc		hl,de
 234+ E6C4 EB                                   ex		de,hl
 235+ E6C5                                      ldiyde
 235+ E6C5 FD 62       >                ld		iyh,d
 235+ E6C7 FD 6B       >                ld		iyl,e
 236+ E6C9 04           l2D_adjustRow:			inc		b
 237+ E6CA 18 B9                                jr		l2D_Loop
 238+ E6CC 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CF EB                                   ex		de,hl
 240+ E6D0 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D3                                      ClearCarryFlag
 241+ E6D3 B7          >				or a
 242+ E6D4 ED 52                                sbc		hl,de
 243+ E6D6 EB                                   ex		de,hl
 244+ E6D7                                      ldiyde
 244+ E6D7 FD 62       >                ld		iyh,d
 244+ E6D9 FD 6B       >                ld		iyl,e
 245+ E6DB 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DC 04                                   inc		b
 247+ E6DD 18 A6                                jr		l2D_Loop
 248+ E6DF              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DF
 250+ E6DF
 251+ E6DF
 252+ E6DF
 253+ E6DF              ;Loin:				; BBC version of line draw
 254+ E6DF              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DF              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DF              ;	ld		ixh,0							; ixh = s
 257+ E6DF              ;	ld		iyh,0							; iyh = swap
 258+ E6DF              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DF              ;LoinCalcDeltaX:
 260+ E6DF              ;	ld		a,e
 261+ E6DF              ;	sub		c								; a = deltaX
 262+ E6DF              ;	JumpIfPositive LoinPosDx
 263+ E6DF              ;LoinNegDx:
 264+ E6DF              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DF              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DF              ;LoinPosDx:
 267+ E6DF              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DF              ;LoinCalcDeltaY:
 269+ E6DF              ;	ld		a,d
 270+ E6DF              ;	sub		b								; a= deltaY
 271+ E6DF              ;	JumpIfPositive LoinPosDy
 272+ E6DF              ;LoinNegDy:
 273+ E6DF              ;	neg
 274+ E6DF              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DF              ;LoinPosDy:
 276+ E6DF              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DF              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DF              ;LoinSTPx:									; step along X
 279+ E6DF              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DF              ;LoinSTPxSwapCoords:
 281+ E6DF              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DF              ;	ld		a,l								; save l flags
 283+ E6DF              ;	ex		de,hl							; save de to hl
 284+ E6DF              ;	lddebc									; Point2 = point1
 285+ E6DF              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DF              ;	ld		l,a								; get back l flags
 287+ E6DF              ;LoinSTPxCorrectOrder:
 288+ E6DF              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DF              ;	ld		a,iyl							; get delta Y back
 290+ E6DF              ;	ld		iy1,$FE							; roll counter
 291+ E6DF              ;LionSTPxRollQ:
 292+ E6DF              ;	sla		a								; highest bit of delta-Y
 293+ E6DF              ;	jp		c,LoinSTPxSteep
 294+ E6DF              ;	cp		ixl								; compare with DeltaX
 295+ E6DF              ;	jp		cs,LoinSTPxShallow
 296+ E6DF              ;LoinSTPxSteep:								;; LI4
 297+ E6DF              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DF              ;	scf										; force carry flag set
 299+ E6DF              ;LoinSTPxShallow:							;; LI5
 300+ E6DF              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DF              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DF              ;	inc		ihl								; DeltaX += 1
 303+ E6DF              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DF              ;	ld		a,d
 305+ E6DF              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DF              ;	ld		a,iyh							; swap flag
 307+ E6DF              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DF              ;LoinSTPxX1Dec:
 309+ E6DF              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DF              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DF              ;	sub		b
 312+ E6DF              ;	if
 313+ E6DF              ;
 314+ E6DF              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DF              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DF              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DF              ;86 81                   STX &81		\ Q
 318+ E6DF              ;.LIL1	\ roll Q
 319+ E6DF              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DF              ;B0 04                   BCS LI4		\ steep
 321+ E6DF              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DF              ;90 03                   BCC LI5		\ shallow
 323+ E6DF              ;.LI4	\ steep
 324+ E6DF              ;E5 1B                   SBC &1B		\ P
 325+ E6DF              ;38                      SEC
 326+ E6DF              ;.LI5	\ shallow
 327+ E6DF              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DF              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DF              ;A6 1B                   LDX &1B		\ P
 330+ E6DF              ;E8                      INX 		\ Xreg is width
 331+ E6DF              ;A5 37                   LDA &37		\ Y2
 332+ E6DF              ;E5 35                   SBC &35		\ Y1
 333+ E6DF              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DF              ;A5 90                   LDA &90		\ SWAP
 335+ E6DF              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DF              ;CA                      DEX
 337+ E6DF              ;.LIL2	\ counter X width
 338+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DF              ;.LI6	\ Xreg correct
 342+ E6DF              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DF              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DF              ;66 82                   ROR &82		\ R
 345+ E6DF              ;A5 07                   LDA &07		\ SC
 346+ E6DF              ;69 08                   ADC #8		\ next column
 347+ E6DF              ;85 07                   STA &07		\ SC
 348+ E6DF              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DF              ;A5 83                   LDA &83		\ S
 350+ E6DF              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DF              ;85 83                   STA &83		\ S
 352+ E6DF              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DF              ;88                      DEY
 354+ E6DF              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DF              ;C6 08                   DEC &08		\ SC+1
 356+ E6DF              ;A0 07                   LDY #7
 357+ E6DF              ;.LIC2	\ skip Y adjustment
 358+ E6DF              ;CA                      DEX
 359+ E6DF              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DF              ;60                      RTS
 362+ E6DF              ;
 363+ E6DF              ;.DOWN	\ Line is going to the right and down
 364+ E6DF              ;A5 90                   LDA &90		\ SWAP
 365+ E6DF              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DF              ;CA                      DEX
 367+ E6DF              ;.LIL3	\ counter X width
 368+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DF              ;.LI9	\ no swap
 372+ E6DF              ;46 82                   LSR &82		\ R
 373+ E6DF              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DF              ;66 82                   ROR &82		\ R
 375+ E6DF              ;A5 07                   LDA &07		\ SC
 376+ E6DF              ;69 08                   ADC #8		\ next column
 377+ E6DF              ;85 07                   STA &07		\ SC
 378+ E6DF              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DF              ;A5 83                   LDA &83		\ S
 380+ E6DF              ;65 81                   ADC &81		\ Q
 381+ E6DF              ;85 83                   STA &83		\ S
 382+ E6DF              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DF              ;C8                      INY
 384+ E6DF              ;C0 08                   CPY #8
 385+ E6DF              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DF              ;E6 08                   INC &08		\ SC+1
 387+ E6DF              ;A0 00                   LDY #0
 388+ E6DF              ;.LIC3	\ skipped Y adjustment
 389+ E6DF              ;CA                      DEX
 390+ E6DF              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DF              ;60                      RTS
 393+ E6DF              ;
 394+ E6DF              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DF              ;A4 35                   LDY &35		\ Y1
 396+ E6DF              ;98                      TYA
 397+ E6DF              ;A6 34                   LDX &34		\ X1
 398+ E6DF              ;C4 37                   CPY &37		\ Y2
 399+ E6DF              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DF              ;C6 90                   DEC &90		\ SWAP
 401+ E6DF              ;A5 36                   LDA &36		\ X2
 402+ E6DF              ;85 34                   STA &34		\ X1
 403+ E6DF              ;86 36                   STX &36		\ X2
 404+ E6DF              ;AA                      TAX
 405+ E6DF              ;A5 37                   LDA &37		\ Y2
 406+ E6DF              ;85 35                   STA &35		\ Y1
 407+ E6DF              ;84 37                   STY &37		\ Y2
 408+ E6DF              ;A8                      TAY
 409+ E6DF              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DF              ;4A                      LSR A
 411+ E6DF              ;4A                      LSR A
 412+ E6DF              ;4A                      LSR A
 413+ E6DF              ;09 60                   ORA #&60
 414+ E6DF              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DF              ;8A                      TXA 		\ X1
 416+ E6DF              ;29 F8                   AND #&F8
 417+ E6DF              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DF              ;8A                      TXA
 419+ E6DF              ;29 07                   AND #7		\ mask index
 420+ E6DF              ;AA                      TAX
 421+ E6DF              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DF              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DF              ;A5 35                   LDA &35		\ Y1
 424+ E6DF              ;29 07                   AND #7
 425+ E6DF              ;A8                      TAY
 426+ E6DF              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DF              ;A2 01                   LDX #1		\ roll counter
 428+ E6DF              ;86 1B                   STX &1B	    	\ P
 429+ E6DF              ;.LIL4	\ roll P
 430+ E6DF              ;0A                      ASL A
 431+ E6DF              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DF              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DF              ;90 03                   BCC LI14	\ less than Q
 434+ E6DF              ;.LI13	\ do subtraction
 435+ E6DF              ;E5 81                   SBC &81		\ Q
 436+ E6DF              ;38                      SEC
 437+ E6DF              ;.LI14	\ less than Q
 438+ E6DF              ;26 1B                   ROL &1B		\ P
 439+ E6DF              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DF              ;A6 81                   LDX &81		\ Q
 441+ E6DF              ;E8                      INX 		\ adjust height
 442+ E6DF              ;A5 36                   LDA &36		\ X2
 443+ E6DF              ;E5 34                   SBC &34		\ X1
 444+ E6DF              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DF              ;18                      CLC
 446+ E6DF              ;A5 90                   LDA &90		\ SWAP
 447+ E6DF              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DF              ;CA                      DEX
 449+ E6DF              ;.LIL5	\ skipped first point, counter X
 450+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DF              ;.LI17	\ skipped first point
 454+ E6DF              ;88                      DEY
 455+ E6DF              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DF              ;C6 08                   DEC &08		\ SC+1
 457+ E6DF              ;A0 07                   LDY #7		\ new char
 458+ E6DF              ;	.LI16	\ skipped hi adjust
 459+ E6DF              ;A5 83                   LDA &83		\ S
 460+ E6DF              ;65 1B                   ADC &1B		\ P
 461+ E6DF              ;85 83                   STA &83		\ S
 462+ E6DF              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DF              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DF              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DF              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DF              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DF              ;69 08                   ADC #8		\ next char below
 468+ E6DF              ;85 07                   STA &07		\ SC
 469+ E6DF              ;.LIC5	\ same column
 470+ E6DF              ;CA                      DEX
 471+ E6DF              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DF              ;60                      RTS
 474+ E6DF              ;
 475+ E6DF              ;.LFT	\ going left
 476+ E6DF              ;A5 90                   LDA &90		\ SWAP
 477+ E6DF              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DF              ;CA                      DEX 		\ reduce height
 479+ E6DF              ;.LIL6	\ counter X height
 480+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DF              ;.LI18
 484+ E6DF              ;88                      DEY
 485+ E6DF              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DF              ;C6 08                   DEC &08		\ SC+1
 487+ E6DF              ;A0 07                   LDY #7		\ rest char row
 488+ E6DF              ;.LI19	\ skipped hi adjust
 489+ E6DF              ;A5 83                   LDA &83		\ S
 490+ E6DF              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DF              ;85 83                   STA &83		\ S
 492+ E6DF              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DF              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DF              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DF              ;26 82                   ROL &82		\ R
 496+ E6DF              ;A5 07                   LDA &07		\ SC
 497+ E6DF              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DF              ;85 07                   STA &07		\ SC
 499+ E6DF              ;18                      CLC
 500+ E6DF              ;.LIC6	\ no overflow
 501+ E6DF              ;CA                      DEX 		\ height
 502+ E6DF              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DF              ;.HL6
 505+ E6DF              ;60                      RTS 		\ end Line drawing
 506+ E6DF
 507+ E6DF
 508+ E6DF              ;;l2_draw_diagonalopt:
 509+ E6DF              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DF              ;;	push	af
 511+ E6DF              ;;	ld		a,b
 512+ E6DF              ;;	cp		d
 513+ E6DF              ;;	jr		z,.RegularDiagnonal
 514+ E6DF              ;;.CheckHorz:
 515+ E6DF              ;;	ld		a,c
 516+ E6DF              ;;	cp		e
 517+ E6DF              ;;	jr		z,.horizontalLine
 518+ E6DF              ;;.RegularDiagnonal:
 519+ E6DF              ;;	pop		af
 520+ E6DF              ;;	call diag
 521+ E6DF
 522+ E6DF
 523+ E6DF              ;;l2_signed_mul2a:
 524+ E6DF              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DF              ;;	TEST	$80
 526+ E6DF              ;;	jr		nz, .negativecalc
 527+ E6DF              ;;.positivecalc:
 528+ E6DF              ;;	ccf
 529+ E6DF              ;;	rla
 530+ E6DF              ;;	ret
 531+ E6DF              ;;.negativecalc:
 532+ E6DF              ;;	neg
 533+ E6DF              ;;	ccf
 534+ E6DF              ;;	rla
 535+ E6DF              ;;	neg
 536+ E6DF              ;;	ret
 537+ E6DF              ;;
 538+ E6DF              ;;l2_signed_mul2atohl:
 539+ E6DF              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DF              ;;	TEST	$80
 541+ E6DF              ;;	jr		nz, .negativecalc
 542+ E6DF              ;;.positivecalc:
 543+ E6DF              ;;	ld		hl,0
 544+ E6DF              ;;	ld		l,a
 545+ E6DF              ;;	add		hl,a
 546+ E6DF              ;;	ret
 547+ E6DF              ;;.negativecalc:
 548+ E6DF              ;;	neg
 549+ E6DF              ;;	ld		hl,0
 550+ E6DF              ;;	ld		l,a
 551+ E6DF              ;;	neghl
 552+ E6DF              ;;	ret
 553+ E6DF              ;;
 554+ E6DF              ;;l2_e2fractionby2:
 555+ E6DF              ;;	ld 		hl,(l2fraction)
 556+ E6DF              ;;	push	de
 557+ E6DF              ;;	ld		d,h
 558+ E6DF              ;;	ld		e,l
 559+ E6DF              ;;	add		hl,de
 560+ E6DF              ;;	pop		de
 561+ E6DF              ;;	ld		(l2e2),hl
 562+ E6DF              ;;	ret
 563+ E6DF
 564+ E6DF
 565+ E6DF
 566+ E6DF
 567+ E6DF
 568+ E6DF              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DF              ;;//.catchLoop:
 570+ E6DF              ;;//	jp .catchLoop
 571+ E6DF              ;;//.continue:
 572+ E6DF              ;;//    ld      A,D
 573+ E6DF              ;;//    sub     H
 574+ E6DF              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DF              ;;//.DXNegative:
 576+ E6DF              ;;//    neg
 577+ E6DF              ;;//.DXPositive:
 578+ E6DF              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DF              ;;//    ld      A,E
 580+ E6DF              ;;//    sub     L
 581+ E6DF              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DF              ;;//.DYNegative:
 583+ E6DF              ;;//    neg
 584+ E6DF              ;;//.DYPositive:
 585+ E6DF              ;;//    sub     B               ;|delta_y|
 586+ E6DF              ;;//	push	af
 587+ E6DF              ;;//	jr		c,.DeltaX
 588+ E6DF              ;;//.DeltaY
 589+ E6DF              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DF              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DF              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DF              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DF              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DF              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DF              ;;//.DeltaX:
 596+ E6DF              ;;//	ld		a,d
 597+ E6DF              ;;//	sub		h
 598+ E6DF              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DF              ;;//.TestDX:
 600+ E6DF              ;;//	ex		de,hl
 601+ E6DF              ;;//.TestDY:
 602+ E6DF              ;;//	ld		a,e
 603+ E6DF              ;;//	sub		l
 604+ E6DF              ;;//    ld      A,$01
 605+ E6DF              ;;//    jr      NC,.StoreA
 606+ E6DF              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DF              ;;//.StoreA:
 608+ E6DF              ;;//        ld      (l2way),A
 609+ E6DF              ;;//.InitLine:
 610+ E6DF              ;;//        ld      B,H
 611+ E6DF              ;;//        ld      C,L
 612+ E6DF              ;;//        ld      A,E
 613+ E6DF              ;;//        sub     L
 614+ E6DF              ;;//        jr      NC,.EndInit
 615+ E6DF              ;;//        ld      A,L
 616+ E6DF              ;;//        ld      L,E
 617+ E6DF              ;;//        ld      E,A
 618+ E6DF              ;;//.EndInit:
 619+ E6DF              ;;//        ld      A,E
 620+ E6DF              ;;//        sub     L
 621+ E6DF              ;;//        rla
 622+ E6DF              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DF              ;;//        add     A,H
 624+ E6DF              ;;//        sub     D
 625+ E6DF              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DF              ;;//        add     A,H
 627+ E6DF              ;;//        sub     D
 628+ E6DF              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DF              ;;//.Loop:
 630+ E6DF              ;;//        ld      A,B
 631+ E6DF              ;;//        sub     D
 632+ E6DF              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DF              ;;//        pop     AF
 634+ E6DF              ;;//        bit     7,A
 635+ E6DF              ;;//        push    AF
 636+ E6DF              ;;//        push    AF
 637+ E6DF              ;;//        push    BC
 638+ E6DF              ;;//        jr      Z,.DrawPoint
 639+ E6DF              ;;//        ld      A,B
 640+ E6DF              ;;//        ld      B,C
 641+ E6DF              ;;//        ld      C,A
 642+ E6DF              ;;//.DrawPoint:
 643+ E6DF              ;;//		push	hl
 644+ E6DF              ;;//		pushbcdeaf
 645+ E6DF              ;;//		ld		b,e
 646+ E6DF              ;;//		ld		c,d
 647+ E6DF              ;;//	ld 		a,(l2linecolor)
 648+ E6DF              ;;//	call	l2_plot_pixel
 649+ E6DF              ;;//		popafdebc
 650+ E6DF              ;;//		pop		hl
 651+ E6DF              ;;//        pop     BC
 652+ E6DF              ;;//        pop     AF
 653+ E6DF              ;;//.TestD:
 654+ E6DF              ;;//        bit     7,E
 655+ E6DF              ;;//        jr      NZ,.Case1
 656+ E6DF              ;;//.Case2:                          ;d >= 0
 657+ E6DF              ;;//        ld      A,E
 658+ E6DF              ;;//        add     A,H
 659+ E6DF              ;;//        ld      E,A
 660+ E6DF              ;;//        ld      A,(l2way)
 661+ E6DF              ;;//        add     A,C
 662+ E6DF              ;;//        ld      C,A
 663+ E6DF              ;;//        jr      .EndLoop
 664+ E6DF              ;;//.Case1:                          ;d < 0
 665+ E6DF              ;;//        ld      A,E
 666+ E6DF              ;;//        add     A,L
 667+ E6DF              ;;//        ld      E,A
 668+ E6DF              ;;//.EndLoop:
 669+ E6DF              ;;//        inc     B
 670+ E6DF              ;;//        jr      .Loop
 671+ E6DF              ;;//.EndLine:
 672+ E6DF              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DF              ;;//        pop     HL              ;can be removed
 674+ E6DF              ;;//        pop     DE              ;can be removed
 675+ E6DF              ;;//        ret
 676+ E6DF
 677+ E6DF              ;;	ld		(.l2yadjust),a
 678+ E6DF              ;;	call	calcdeltax:
 679+ E6DF              ;;	ld		(.l2xadjust),a
 680+ E6DF              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DF              ;;	push	hl
 682+ E6DF              ;;	push	de
 683+ E6DF              ;;	ld		hl,(l2deltaX)
 684+ E6DF              ;;	ld		de,(l2deltaY)
 685+ E6DF              ;;	add		hl,de
 686+ E6DF              ;;	ld		(l2fraction),hl
 687+ E6DF              ;;	pop		de
 688+ E6DF              ;;	pop		hl
 689+ E6DF              ;;.mainloop:
 690+ E6DF              ;;	push	bc
 691+ E6DF              ;;	push	de
 692+ E6DF              ;;	ld 		a,(l2linecolor)
 693+ E6DF              ;;	call	l2_plot_pixel
 694+ E6DF              ;;	pop		de
 695+ E6DF              ;;	pop		bc
 696+ E6DF              ;;.arewefinishedtest
 697+ E6DF              ;;	ld		a,b
 698+ E6DF              ;;	cp		d
 699+ E6DF              ;;	jr		nz,.notthereyet
 700+ E6DF              ;;	ld		a,c
 701+ E6DF              ;;	cp		e
 702+ E6DF              ;;	ret		z
 703+ E6DF              ;;.notthereyet:
 704+ E6DF              ;;	push	de
 705+ E6DF              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DF              ;;	pop		de
 707+ E6DF              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DF              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DF              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DF              ;;	or		a							;
 711+ E6DF              ;;	sbc		hl,de						;
 712+ E6DF              ;;	pop		de
 713+ E6DF              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DF              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DF              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DF              ;;.dodycalc:
 717+ E6DF              ;;	ld		hl,(l2fraction)
 718+ E6DF              ;;	push	de
 719+ E6DF              ;;	ld		de,(l2deltaY)
 720+ E6DF              ;;	add		hl,de
 721+ E6DF              ;;	ld		(l2fraction),de
 722+ E6DF              ;;	pop		de
 723+ E6DF              ;;.l2yadjust:
 724+ E6DF              ;;	nop
 725+ E6DF              ;;.skipdycalc:
 726+ E6DF              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DF              ;;	ld		hl,(l2e2)
 728+ E6DF              ;;	push	de							;
 729+ E6DF              ;;	ld		de,(l2deltaX)				;
 730+ E6DF              ;;	or		a							; clear carry flag
 731+ E6DF              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DF              ;;	pop		de
 733+ E6DF              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DF              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DF              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DF              ;;.dodxcalc:
 737+ E6DF              ;;	ld		hl,(l2fraction)
 738+ E6DF              ;;	push	de
 739+ E6DF              ;;	ld		de,(l2deltaX)
 740+ E6DF              ;;	add		hl,de
 741+ E6DF              ;;	ld		(l2fraction),de
 742+ E6DF              ;;	pop		de
 743+ E6DF              ;;.l2xadjust:
 744+ E6DF              ;;	nop
 745+ E6DF              ;;.skipdxcalc:
 746+ E6DF              ;;	jr 		.mainloop
 747+ E6DF
 748+ E6DF
 749+ E6DF              ;;/l2_draw_diagonalold:
 750+ E6DF              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DF              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DF              ;;/.sortycoords:
 753+ E6DF              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DF              ;;/	cp		d
 755+ E6DF              ;;/	jr		nc, .nocoordswap
 756+ E6DF              ;;/.swapcoords:
 757+ E6DF              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DF              ;;/	lddebc
 759+ E6DF              ;;/	ldbchl
 760+ E6DF              ;;/.nocoordswap:
 761+ E6DF              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DF              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DF              ;;/	ld		(l2deltaY),a
 764+ E6DF              ;;/	neg									; DEBUG
 765+ E6DF              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DF              ;;/	neg									; DEBUG
 767+ E6DF              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DF              ;;/    ld		a,c
 769+ E6DF              ;;/	cp		e
 770+ E6DF              ;;/	jr		c, .x1GTx0
 771+ E6DF              ;;/.x1LTx0
 772+ E6DF              ;;/	ld		a,c
 773+ E6DF              ;;/	sub		e
 774+ E6DF              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DF              ;;/	neg									; DEBUG
 776+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DF              ;;/	neg									; DEBUG
 778+ E6DF              ;;/	ld		a,l2incbstep
 779+ E6DF              ;;/	jr		.setlayershift0
 780+ E6DF              ;;/.x1GTx0:
 781+ E6DF              ;;/	ld		a,e
 782+ E6DF              ;;/	sub		c
 783+ E6DF              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DF              ;;/	neg									; DEBUG
 785+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DF              ;;/	neg									; DEBUG
 787+ E6DF              ;;/	ld		a,l2decbstep
 788+ E6DF              ;;/.setlayershift0:
 789+ E6DF              ;;/	ld		a,0
 790+ E6DF              ;;/	pushbcde
 791+ E6DF              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DF              ;;/	popdebc
 793+ E6DF              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DF              ;;/.dymuliplyby2:
 795+ E6DF              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DF              ;;/	call	l2_signed_mul2a
 797+ E6DF              ;;/	ld		(l2deltaYsq),a
 798+ E6DF              ;;/	neg									; DEBUG
 799+ E6DF              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DF              ;;/	neg									; DEBUG
 801+ E6DF              ;;/.dxmuliplyby2:
 802+ E6DF              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DF              ;;/	call	l2_signed_mul2a
 804+ E6DF              ;;/	ld		(l2deltaXsq),a
 805+ E6DF              ;;/	neg									; DEBUG
 806+ E6DF              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DF              ;;/	neg									; DEBUG
 808+ E6DF              ;;/.plotfirstpixel:
 809+ E6DF              ;;/	pushbcde
 810+ E6DF              ;;/	ld a,(l2linecolor)
 811+ E6DF              ;;/	call	l2_plot_pixel
 812+ E6DF              ;;/	popdebc
 813+ E6DF              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DF              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DF              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DF              ;;/	cp		(hl)
 817+ E6DF              ;;/	jp		m,	.signset
 818+ E6DF              ;;/.signclear:
 819+ E6DF              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DF              ;;/	jr		.dxGTdybranch
 821+ E6DF              ;;/.signset:
 822+ E6DF              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DF              ;;/.dxGTdybranch:
 824+ E6DF              ;;/	ld		a,(l2deltaYsq)
 825+ E6DF              ;;/	ld		hl,l2deltaX
 826+ E6DF              ;;/	sub		(hl)
 827+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DF              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DF              ;;/	ld		a,c
 830+ E6DF              ;;/	cp		e
 831+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DF              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DF              ;;/	ld		a,(l2fraction)
 834+ E6DF              ;;/	TEST	$80
 835+ E6DF              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DF              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DF              ;;/	ld		hl,l2deltaXsq
 838+ E6DF              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DF              ;;/	ld		(l2fraction),a
 840+ E6DF              ;;/.BranchAskipYstep:
 841+ E6DF              ;;/.l2stepx1:
 842+ E6DF              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DF              ;;/	ld		hl,l2deltaYsq
 845+ E6DF              ;;/	add		a,(hl)
 846+ E6DF              ;;/	ld		(l2fraction),a
 847+ E6DF              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DF              ;;/	pushbcde
 849+ E6DF              ;;/	ld a,(l2linecolor)
 850+ E6DF              ;;/	call	l2_plot_pixel
 851+ E6DF              ;;/	popdebc
 852+ E6DF              ;;/.BranchAloop:
 853+ E6DF              ;;/	jr		.BranchAwhile
 854+ E6DF              ;;/.dxLTEdybranch:
 855+ E6DF              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DF              ;;/	ld		hl, l2deltaY
 857+ E6DF              ;;/	sub		(hl)
 858+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DF              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DF              ;;/	ld		a,b
 861+ E6DF              ;;/	cp		d
 862+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DF              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DF              ;;/	ld		a,(l2fraction)
 865+ E6DF              ;;/	TEST	$80
 866+ E6DF              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DF              ;;/.l2stepx2
 868+ E6DF              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DF              ;;/	ld		hl,l2deltaYsq
 871+ E6DF              ;;/	sub		(hl)
 872+ E6DF              ;;/	ld		(l2fraction),a
 873+ E6DF              ;;/.BranchBskipYstep:
 874+ E6DF              ;;/	ld		hl, l2deltaYsq
 875+ E6DF              ;;/	add		a,(hl)
 876+ E6DF              ;;/	ld		(l2fraction),a
 877+ E6DF              ;;/	inc		b							; ++l2_vy0;
 878+ E6DF              ;;/.BranchBplotBCColA:
 879+ E6DF              ;;/	pushbcde
 880+ E6DF              ;;/	ld a,(l2linecolor)
 881+ E6DF              ;;/	call	l2_plot_pixel
 882+ E6DF              ;;/	popdebc
 883+ E6DF              ;;/.BranchBloop:
 884+ E6DF              ;;/	jr		.BranchBwhile
 885+ E6DF
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 826  E6DF                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DF
   2+ E6DF
   3+ E6DF
   4+ E6DF 00 00        l2trianglebc	        DW 0
   5+ E6E1 00 00        l2trianglede	        DW 0
   6+ E6E3 00 00        l2trianglehl	        DW 0
   7+ E6E5
   8+ E6E5              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E5 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E9 CD 0C E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EC F1                                   pop		af
  12+ E6ED D1                                   pop		de						; swap DE and HL
  13+ E6EE E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EF C1                                   pop		bc
  15+ E6F0 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F2 F5                                   push	af
  17+ E6F3 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F6 F1                                   pop		af
  19+ E6F7 C1                                   pop		bc						; Now bc = original de
  20+ E6F8 D1                                   pop		de						; de = original hl
  21+ E6F9 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FC C9                                   ret
  23+ E6FD
  24+ E6FD
  25+ E6FD
  26+ E6FD
  27+ E6FD
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 827  E6FD                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FD              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FD              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FD              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FD DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FF 7D                                   ld		a,l
   6+ E700 32 24 E3                             ld		(l2linecolor),a
   7+ E703 79                                   ld		a,c
   8+ E704 BB                                   cp		e
   9+ E705 30 08                                jr		nc, .x2gtex1
  10+ E707 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E70A DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70D 18 06                                jr		.storepoints
  13+ E70F DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E712 DD 2E 01                             ld		ixl,1
  15+ E715 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E718 DD 7C                                ld		a,ixh
  17+ E71A 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E71B 54                                   ld		d,h
  19+ E71C CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71F E1 D1 C1                             pop		bc,,de,,hl
  21+ E722 C5 E5                                push	bc,,hl
  22+ E724 54                                   ld		d,h                             ; now its bc -> he
  23+ E725 DD 7D                                ld		a,ixl
  24+ E727 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E72A E1 C1                                pop		bc,,hl
  26+ E72C 50           .SaveForLoop:           ld		d,b
  27+ E72D 5C                                   ld		e,h								; save loop counters
  28+ E72E D5                                   push	de								; de = y0ycommon
  29+ E72F 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E732 78                                   ld		a,b
  31+ E733 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E735 7E                                   ld		a,(hl)							;
  33+ E736 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E737 21 2C E4                             ld      hl,l2targetArray2
  35+ E73A 78                                   ld      a,b
  36+ E73B ED 31                                add     hl,a
  37+ E73D              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73D 7E                                   ld		a,(hl)
  39+ E73E 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73F 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E742 5F                                   ld		e,a								; de = to colour
  42+ E743 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E744 25                                   dec		h
  44+ E745 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E746 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E749 E1                                   pop		hl
  47+ E74A C1                                   pop		bc
  48+ E74B 04                                   inc		b								; down a rowc
  49+ E74C D1                                   pop		de								; de = from to (and b also = current)
  50+ E74D 14                                   inc		d
  51+ E74E 7B                                   ld		a,e								; while e >= d
  52+ E74F BA                                   cp		d
  53+ E750 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E752 C9                                   ret
  55+ E753
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 828  E753                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E753
   2+ E753 00 00        l2_circle_pos		DW 0
   3+ E755 00           l2_circle_colour	DB 0
   4+ E756 00           l2_circle_radius	DB 0
   5+ E757 00           l2_circle_x			DB 0
   6+ E758 00           l2_circle_y			DB 0
   7+ E759 00           l2_circle_d			DB 0
   8+ E75A
   9+ E75A              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E75A 7B           l2_draw_circle:     ld		a,e
  11+ E75B 32 01 E8                         ld		(.PlotPixel+1),a
  12+ E75E 7A                               ld		a,d								; get radius
  13+ E75F A7                               and		a
  14+ E760 C8                               ret		z
  15+ E761 FE 01                            cp		1
  16+ E763 CA 0D E8                         jp		z,CircleSinglepixel
  17+ E766 ED 43 90 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E76A DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76C DD 2E 00                         ld		ixl,0
  20+ E76F 26 00        .calcd:	            ld		h,0
  21+ E771 6F                               ld		l,a
  22+ E772 29                               add		hl,hl							; hl = r * 2
  23+ E773 EB                               ex		de,hl							; de = r * 2
  24+ E774 21 03 00                         ld		hl,3
  25+ E777 A7                               and		a
  26+ E778 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E77A 44                               ld		b,h
  28+ E77B 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77C 21 01 00     .calcdelta:         ld		hl,1
  30+ E77F 16 00                            ld		d,0
  31+ E781 DD 5D                            ld		e,ixl
  32+ E783 A7                               and		a
  33+ E784 ED 52                            sbc		hl,de
  34+ E786 11 01 00     .Setde1:            ld		de,1
  35+ E789 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E78B DD BD                            cp		ixl
  37+ E78D D8                               ret		c
  38+ E78E D9           .ProcessLoop:	    exx
  39+ E78F 11 00 00     .Plot1:             ld		de,0
  40+ E792 7B                               ld		a,e
  41+ E793 DD 85                            add		a,ixl
  42+ E795 4F                               ld		c,a
  43+ E796 7A                               ld		a,d
  44+ E797 DD 84                            add		a,ixh
  45+ E799 47                               ld		b,a
  46+ E79A CD 00 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79D 7B           .Plot2:             ld 		a,e
  48+ E79E DD 95                            sub 	ixl
  49+ E7A0 4F                               ld 		c,a
  50+ E7A1 7A                               ld 		a,d
  51+ E7A2 DD 84                            add 	a,ixh
  52+ E7A4 47                               ld		b,a
  53+ E7A5 CD 00 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A8 7B           .Plot3:             ld 		a,e
  55+ E7A9 DD 85                            add		a,ixl
  56+ E7AB 4F                               ld 		c,a
  57+ E7AC 7A                               ld 		a,d
  58+ E7AD DD 94                            sub 	ixh
  59+ E7AF 47                               ld 		b,a
  60+ E7B0 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B3 7B           .Plot4:             ld 		a,e
  62+ E7B4 DD 95                            sub 	ixl
  63+ E7B6 4F                               ld 		c,a
  64+ E7B7 7A                               ld 		a,d
  65+ E7B8 DD 94                            sub 	ixh
  66+ E7BA 47                               ld 		b,a
  67+ E7BB CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BE 7A           .Plot5:	            ld 		a,d
  69+ E7BF DD 85                            add 	a,ixl
  70+ E7C1 47                               ld 		b,a
  71+ E7C2 7B                               ld 		a,e
  72+ E7C3 DD 84                            add 	a,ixh
  73+ E7C5 4F                               ld 		c,a
  74+ E7C6 CD 00 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C9 7A           .Plot6:	            ld 		a,d
  76+ E7CA DD 95                            sub 	ixl
  77+ E7CC 47                               ld 		b,a
  78+ E7CD 7B                               ld 		a,e
  79+ E7CE DD 84                            add 	a,ixh
  80+ E7D0 4F                               ld 		c,a
  81+ E7D1 CD 00 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D4 7A           .Plot7:	            ld 		a,d
  83+ E7D5 DD 85                            add 	a,ixl
  84+ E7D7 47                               ld 		b,a
  85+ E7D8 7B                               ld 		a,e
  86+ E7D9 DD 94                            sub 	ixh
  87+ E7DB 4F                               ld 		c,a
  88+ E7DC CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DF 7A           .Plot8:	            ld 		a,d
  90+ E7E0 DD 95                            sub 	ixl
  91+ E7E2 47                               ld		b,a
  92+ E7E3 7B                               ld 		a,e
  93+ E7E4 DD 94                            sub 	ixh
  94+ E7E6 4F                               ld 		c,a
  95+ E7E7 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7EA D9                               exx
  97+ E7EB CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7ED 28 03                            jr z,   .draw_circle_1
  99+ E7EF 19                               add hl,de			; Delta=Delta+D1
 100+ E7F0 18 05                            jr      .draw_circle_2		;
 101+ E7F2 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F3 03                               inc     bc
 103+ E7F4 03                               inc     bc				; D2=D2+2
 104+ E7F5 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F7 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F8 03                               inc bc
 107+ E7F9 13                               inc de				; D1=D1+2
 108+ E7FA 13                               inc de
 109+ E7FB DD 2C                            inc ixl				; X=X+1
 110+ E7FD C3 89 E7                         jp      .CircleLoop
 111+ E800 3A 55 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E803 D5 C5 E5                         push	de,,bc,,hl
 113+ E806 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E809 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80C C9                               ret
 116+ E80D 7B           CircleSinglepixel:  ld		a,e
 117+ E80E CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E811 C9                               ret
 119+ E812
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 829  E812                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E812
   2+ E812 00           l2_circle_dblx		DB 0
   3+ E813 00           l2_circle_dbly		DB 0
   4+ E814
   5+ E814              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E814 7B           l2_draw_circle_fill:    ld		a,e
   7+ E815 32 AB E8                             ld		(.LineColour+1),a
   8+ E818 7A                                   ld		a,d								; get radius
   9+ E819 A7                                   and		a
  10+ E81A C8                                   ret		z
  11+ E81B FE 01                                cp		1
  12+ E81D CA 0D E8                             jp		z,CircleSinglepixel
  13+ E820 ED 43 4A E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E824 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E826 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E829 26 00        .calcd:	                ld		h,0
  17+ E82B 6F                                   ld		l,a
  18+ E82C 29                                   add		hl,hl							; hl = r * 2
  19+ E82D EB                                   ex		de,hl							; de = r * 2
  20+ E82E 21 03 00                             ld		hl,3
  21+ E831 A7                                   and		a
  22+ E832 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E834 44                                   ld		b,h
  24+ E835 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E836 21 01 00     .calcdelta              ld		hl,1
  26+ E839 16 00                                ld		d,0
  27+ E83B DD 5D                                ld		e,ixl
  28+ E83D A7                                   and		a
  29+ E83E ED 52                                sbc		hl,de
  30+ E840 11 01 00     .Setde1	                ld		de,1
  31+ E843 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E845 DD BD                                cp		ixl
  33+ E847 D8                                   ret		c
  34+ E848 D9           .ProcessLoop:	        exx
  35+ E849 11 00 00     .Line1:                 ld		de,0
  36+ E84C 7B                                   ld 		a,e
  37+ E84D DD 95                                sub 	ixl
  38+ E84F 4F                                   ld 		c,a
  39+ E850 7A                                   ld 		a,d
  40+ E851 DD 84                                add 	a,ixh
  41+ E853 47                                   ld		b,a
  42+ E854                                      ;; TODO ADD DOUBLE X CALC
  43+ E854 D5                                   push	de
  44+ E855 DD 55                                ld		d,ixl
  45+ E857 CB 22                                sla		d
  46+ E859 CD A6 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85C D1                                   pop		de
  48+ E85D 7B           .Line2:                 ld 		a,e
  49+ E85E DD 95                                sub		ixl
  50+ E860 4F                                   ld 		c,a
  51+ E861 7A                                   ld 		a,d
  52+ E862 DD 94                                sub 	ixh
  53+ E864 47                                   ld 		b,a
  54+ E865                                      ;; TODO ADD DOUBLE X CALC
  55+ E865 D5                                   push	de
  56+ E866 DD 55                                ld		d,ixl
  57+ E868 CB 22                                sla		d
  58+ E86A CD A6 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86D D1                                   pop		de
  60+ E86E 7B           .Line3:	                ld 		a,e
  61+ E86F DD 94                                sub		ixh
  62+ E871 4F                                   ld 		c,a
  63+ E872 7A                                   ld 		a,d
  64+ E873 DD 85                                add 	a,ixl
  65+ E875 47                                   ld 		b,a
  66+ E876                                      ;; TODO ADD DOUBLE Y CALC
  67+ E876 D5                                   push	de
  68+ E877 DD 54                                ld		d,ixh
  69+ E879 CB 22                                sla		d
  70+ E87B CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87E D1                                   pop		de
  72+ E87F 7B           .Line4:	                ld 		a,e
  73+ E880 DD 94                                sub		ixh
  74+ E882 4F                                   ld 		c,a
  75+ E883 7A                                   ld 		a,d
  76+ E884 DD 95                                sub 	ixl
  77+ E886 47                                   ld 		b,a
  78+ E887                                      ;; TODO ADD DOUBLE Y CALC
  79+ E887 D5                                   push	de
  80+ E888 DD 54                                ld		d,ixh
  81+ E88A CB 22                                sla		d
  82+ E88C CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88F D1                                   pop		de
  84+ E890 D9                                   exx
  85+ E891 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E893 28 03                                jr z,.draw_circle_1
  87+ E895 19                                   add hl,de			; Delta=Delta+D1
  88+ E896 18 05                                jr .draw_circle_2		;
  89+ E898 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E899 03                                   inc bc
  91+ E89A 03                                   inc bc				; D2=D2+2
  92+ E89B DD 25                                dec ixh				; Y=Y-1
  93+ E89D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89E 03                                   inc bc
  95+ E89F 13                                   inc de				; D1=D1+2
  96+ E8A0 13                                   inc de
  97+ E8A1 DD 2C                                inc ixl				; X=X+1
  98+ E8A3 C3 43 E8                             jp .CircleLoop
  99+ E8A6 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8AA 3A 55 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AD 5F                                   ld      e,a
 102+ E8AE CD 62 E2                             call 	l2_draw_horz_line
 103+ E8B1 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B5 C9                                   ret
 105+ E8B6
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 830  E8B6                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B6              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B6 08           l2_draw_any_line:       ex		af,af'
   3+ E8B7 79                                   ld		a,c
   4+ E8B8 BB                                   cp		e
   5+ E8B9 28 08                                jr		z,.HorizontalLine
   6+ E8BB 78                                   ld		a,b
   7+ E8BC BA                                   cp		d
   8+ E8BD 28 0A                                jr		z,.VerticalLine
   9+ E8BF              ; use jp and get a free ret instruction optimisation
  10+ E8BF 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8C0 C3 0C E6                             jp		l2_draw_diagonal
  12+ E8C3
  13+ E8C3 08           .HorizontalLine:        ex		af,af'
  14+ E8C4 53                                   ld		d,e				; set d as target right pixel
  15+ E8C5 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C6 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C9 08           .VerticalLine:          ex		af,af'
  18+ E8CA 5F                                   ld		e,a				; e holds colour on this call
  19+ E8CB C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CE
  21+ E8CE
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 831  E8CE                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CE              ; ClearLines (LL155)
   2+ E8CE              ;   y = 0
   3+ E8CE              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CE              ;   exit if XX20 < 4
   5+ E8CE              ;   ++y
   6+ E8CE              ;   do
   7+ E8CE              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CE              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CE              ;		++y
  10+ E8CE              ;	until Y > XX20
  11+ E8CE
  12+ E8CE              clearLines:
  13+ E8CE              layer2_clearLines:
  14+ E8CE 3A F1 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8D1 47                                   ld		b,a
  16+ E8D2 21 FF C1                             ld		hl,UbnkLineArray
  17+ E8D5 C5           clearLinesLoop:         push	bc
  18+ E8D6 7E                                   ld		a,(hl)
  19+ E8D7 23                                   inc		hl
  20+ E8D8 4F                                   ld		c,a
  21+ E8D9 7E                                   ld		a,(hl)
  22+ E8DA 23                                   inc		hl
  23+ E8DB 47                                   ld		b,a
  24+ E8DC 7E                                   ld		a,(hl)
  25+ E8DD 23                                   inc		hl
  26+ E8DE 5F                                   ld		e,a
  27+ E8DF 7E                                   ld		a,(hl)
  28+ E8E0 23                                   inc		hl
  29+ E8E1 57                                   ld		d,a
  30+ E8E2 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E4 E5                                   push	hl
  32+ E8E5 CD B6 E8                             call    l2_draw_any_line
  33+ E8E8 E1                                   pop		hl
  34+ E8E9 C1                                   pop		bc
  35+ E8EA 10 E9                                djnz	clearLinesLoop
  36+ E8EC C9                                   ret
  37+ E8ED
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 832  E8ED                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8ED              ; ******************************************************************************
   2+ E8ED              ;
   3+ E8ED              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8ED              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8ED              ;
   6+ E8ED              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8ED              ;
   8+ E8ED              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8ED              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8ED              ;	before using line drawing.
  11+ E8ED              ;
  12+ E8ED              ;	The routine checks the range of specified coordinates which is the
  13+ E8ED              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8ED              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8ED              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8ED              ;	visible part will be drawn.
  17+ E8ED              ;
  18+ E8ED              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8ED              ;
  20+ E8ED              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8ED              ;
  22+ E8ED              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8ED              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8ED              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8ED              ;
  26+ E8ED              ;	OUT:	None.
  27+ E8ED              ;
  28+ E8ED              ;	Registers	used	by routine:
  29+ E8ED              ;		   N	:	B, loop counter
  30+ E8ED              ;		   i	:	line	balance variable
  31+ E8ED              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8ED              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8ED              ;	  (x0,y0)	:	(h,l)
  34+ E8ED              ;	  direc_x	:	d, horisontal step increment
  35+ E8ED              ;	  direc_y	:	e, vertical step increment
  36+ E8ED              ;		 ddx	:	b, horisontal step increment
  37+ E8ED              ;		 ddy	:	c, vertical step increment
  38+ E8ED              ;
  39+ E8ED              ;		DE, A work registers.
  40+ E8ED              ;
  41+ E8ED              ; The algorithm in pseudo-code:
  42+ E8ED              ;
  43+ E8ED              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8ED              ;	x = ABS x: y =	ABS y
  45+ E8ED              ;
  46+ E8ED              ;	if x	>= y
  47+ E8ED              ;		if x+y=0 then return
  48+ E8ED              ;		H = x
  49+ E8ED              ;		L = y
  50+ E8ED              ;		ddx = direc_x
  51+ E8ED              ;		ddy = 0
  52+ E8ED              ;	else
  53+ E8ED              ;		H = y
  54+ E8ED              ;		L = x
  55+ E8ED              ;		ddx = 0
  56+ E8ED              ;		ddy = direc_y
  57+ E8ED              ;	endif
  58+ E8ED              ;
  59+ E8ED              ;	B = H
  60+ E8ED              ;	i = INT(B/2)
  61+ E8ED              ;	FOR N=B TO 1 STEP -1
  62+ E8ED              ;		i = i + L
  63+ E8ED              ;		if i	< H
  64+ E8ED              ;			ix =	ddx
  65+ E8ED              ;			iy =	ddy
  66+ E8ED              ;		else
  67+ E8ED              ;			i = i - H
  68+ E8ED              ;			ix =	direc_x
  69+ E8ED              ;			iy =	direc_y
  70+ E8ED              ;		endif
  71+ E8ED              ;		x0 =	x0 +	ix
  72+ E8ED              ;		y0 =	y0 +	iy
  73+ E8ED              ;		plot	(x0,y0)
  74+ E8ED              ;	NEXT	N
  75+ E8ED              ;
  76+ E8ED              ;
  77+ E8ED              ;	Registers	changed after return:
  78+ E8ED              ;		..BCDEHL/IXIY/af......	same
  79+ E8ED              ;		AF....../..../..bcdehl	different
  80+ E8ED              ;
  81+ E8ED DF           line_gfx_colour db $DF
  82+ E8EE 00 00        line_gfx_coords	dw 0
  83+ E8F0              LineHLtoDE:
  84+ E8F0 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8F1 FE C0                                cp	192
  86+ E8F3 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F5 7A                                   ld	a,d
  88+ E8F6 FE C0                                cp	192
  89+ E8F8 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8FA 22 EE E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FD E5                                   push	hl
  92+ E8FE D5                                   push	de
  93+ E8FF 6C                                   ld	l,h				; L = x0
  94+ E900 62                                   ld	h,d				; H = x1
  95+ E901 7C           distanceX:		        ld	a,h
  96+ E902 95                                   sub	l
  97+ E903 6F                                   ld	l,a
  98+ E904 26 00                                ld	h,0
  99+ E906 30 02                                jr	nc, distanceXDone
 100+ E908 26 FF                                ld	h,-1
 101+ E90A D1           distanceXDone:          pop	de
 102+ E90B E3                                   ex	(sp),hl			; L = y0
 103+ E90C 63                                   ld	h,e				; H = y1
 104+ E90D 7C           distanceY:		        ld	a,h
 105+ E90E 95                                   sub	l
 106+ E90F 6F                                   ld	l,a
 107+ E910 26 00                                ld	h,0
 108+ E912 30 02                                jr	nc, distanceYDone
 109+ E914 26 FF                                ld	h,-1
 110+ E916 D1           distanceYDone:          pop	de
 111+ E917 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E918 CD 1C E9                             call	DrawLineRelative			; draw line...
 113+ E91B C9           exit_line:              ret
 114+ E91C
 115+ E91C              ; ***************************************************************************
 116+ E91C              ;
 117+ E91C              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91C              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91C              ;
 120+ E91C              ; OUT: h - l distance in	HL
 121+ E91C              ;
 122+ E91C
 123+ E91C D5           DrawLineRelative:       push	de
 124+ E91D E5                                   push	hl
 125+ E91E D9                                   exx
 126+ E91F E1                                   pop	hl					; get relative	horisontal movement
 127+ E920 CD 8B E9                             call	sgn
 128+ E923 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E924 CD 98 E9                             call	absValue
 130+ E927 45                                   ld	b,l					; x = ABS(x)
 131+ E928 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E929 CD 8B E9                             call	sgn
 133+ E92C 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92D CD 98 E9                             call	absValue
 135+ E930 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E931              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E931 C5                                   push	bc
 138+ E932 D9                                   exx
 139+ E933 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E934 7C                                   ld	a,h
 141+ E935 BD                                   cp	l
 142+ E936 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E938 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E939 28 4F                                jr	z, exit_draw		;		return
 145+ E93B D9           y_lessorequal_x:        exx						;	else
 146+ E93C 42                                   ld	b,d					;		ddx = direc_x
 147+ E93D 0E 00                                ld	c,0					;		ddy = 0
 148+ E93F D9                                   exx
 149+ E940 18 08                                jr	init_drawloop		; else
 150+ E942 7C           x_smaller_y:	        ld	a,h
 151+ E943 65                                   ld	h,l					;	H = y
 152+ E944 6F                                   ld	l,a					;	L = x
 153+ E945 D9                                   exx
 154+ E946 06 00                                ld	b,0					;	ddx = 0
 155+ E948 4B                                   ld	c,e					;	ddy = direc_y
 156+ E949 D9                                   exx
 157+ E94A 44           init_drawloop:	        ld	b,h
 158+ E94B 4C                                   ld	c,h					; B = H
 159+ E94C CB 39                                srl	c					; i = INT(B/2)
 160+ E94E              										; FOR N=B	TO 1	STEP	-1
 161+ E94E 79           drawloop:		        ld	a,c
 162+ E94F 85                                   add	a,l
 163+ E950 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E952 BC                                   cp	h
 165+ E953 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E955 4F                                   ld	c,a					;		i = i + L
 167+ E956 D9                                   exx
 168+ E957 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E958 D9                                   exx
 170+ E959 18 05                                jr	check_plot			;	else
 171+ E95B 94           i_greater:		        sub	h					;		i = i - H
 172+ E95C 4F                                   ld	c,a
 173+ E95D D9                                   exx
 174+ E95E D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95F D9                                   exx						;	endif
 176+ E960 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E961 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E962 2A EE E8                             ld	hl,(line_gfx_coords)
 179+ E965 7D                                   ld	a,l
 180+ E966 83                                   add	a,e					;
 181+ E967 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E968 7A                                   ld	a,d
 183+ E969 3C                                   inc	a
 184+ E96A 84                                   add	a,h
 185+ E96B 38 04                                jr	c, check_range		;	check out	of range
 186+ E96D 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96F 18 02                                jr	plot_point
 188+ E971 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E973
 190+ E973 3D           plot_point:             dec	a
 191+ E974 C5                                   push	bc
 192+ E975 F5                                   push	af
 193+ E976 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E977 4D                                   ld		c,l
 195+ E978 3A ED E8                             ld		a,(line_gfx_colour)
 196+ E97B ED 43 EE E8                          ld      (line_gfx_coords),bc
 197+ E97F CD FF E0                             call	l2_plot_pixel
 197+ E982
 198+ E982 F1                                   pop		af
 199+ E983 C1                                   pop		bc
 200+ E984 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E985 10 C7                                djnz	drawloop		; NEXT N
 202+ E987 18 01                                jr	exit_draw
 203+ E989
 204+ E989 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E98A C9           exit_draw:		        ret
 206+ E98B
 207+ E98B
 208+ E98B              ; ******************************************************************************
 209+ E98B              ;
 210+ E98B              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E98B              ;
 212+ E98B              ;	IN:		HL =	integer
 213+ E98B              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E98B              ;
 215+ E98B              ;	Registers	changed after return:
 216+ E98B              ;	..BCDEHL/IXIY	same
 217+ E98B              ;	AF....../....	different
 218+ E98B              ;
 219+ E98B 7C           sgn:				    ld	a,h
 220+ E98C B5                                   or	l
 221+ E98D C8                                   ret	z				; integer	is zero, return 0...
 222+ E98E CB 7C                                bit	7,h
 223+ E990 20 03                                jr	nz, negative_int
 224+ E992 3E 01                                ld	a,1
 225+ E994 C9                                   ret
 226+ E995 3E FF        negative_int:		    ld	a,-1
 227+ E997 C9                                   ret
 228+ E998
 229+ E998
 230+ E998              ; ******************************************************************************
 231+ E998              ;
 232+ E998              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E998              ;
 234+ E998              ;	IN:		HL =	integer
 235+ E998              ;	OUT:		HL =	converted	integer
 236+ E998              ;
 237+ E998              ;	Registers	changed after return:
 238+ E998              ;	A.BCDE../IXIY	same
 239+ E998              ;	.F....HL/....	different
 240+ E998              ;
 241+ E998 CB 7C        absValue:			    bit	7,h
 242+ E99A C8                                   ret	z				; integer	is positive...
 243+ E99B D5                                   push	de
 244+ E99C EB                                   ex	de,hl
 245+ E99D 21 00 00                             ld	hl,0
 246+ E9A0 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E9A1 ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A3 D1                                   pop	de
 249+ E9A4 C9                                   ret
 250+ E9A5
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 833  E9A5              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 834  E9A5                  SLOT    CMDRDATAAddr
 835  E9A5                  PAGE    BankCmdrData
 836  E9A5                  ORG     CMDRDATAAddr, BankCmdrData
 837  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 12 93     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 1E 93                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 1C 93                             ld		(PresentSystemX),a
  19+ E03A 32 69 93                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 1D 93                             ld		(PresentSystemY),a
  22+ E042 32 6A 93                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 35 92                             ld		hl,IndexedWork
  25+ E048 CD 58 96                             call	copy_galaxy_to_system
  26+ E04B CD 18 97                             call	find_present_system
  27+ E04E CD 7B 96                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 E5 95                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 E7 95                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 E9 95                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 25 93                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 00 96                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 0A 96                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 1B 93                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 EB 95                             ld		(LaserList+1),a
  48+ E080 32 EC 95                             ld		(LaserList+2),a
  49+ E083 32 ED 95                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 EA 95                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 03 96                             ld		(ECMPresent),a
  54+ E08F 32 1A 96                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 06 96                             ld		(EnergyBomb),a
  56+ E095 32 07 96                             ld		(ExtraEnergyUnit),a
  57+ E098 32 08 96                             ld		(DockingComputer),a
  58+ E09B 32 09 96                             ld		(GalacticHyperDrive),a
  59+ E09E 32 05 96                             ld		(EscapePod),a
  60+ E0A1 32 2E 93                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 41 93                             ld		(KillTally),a
  62+ E0A7 3D                                   dec		a								; now a = 255
  63+ E0A8 32 45 93                             ld		(ForeShield),a
  64+ E0AB 32 46 93                             ld		(AftShield),a
  65+ E0AE 32 47 93                             ld		(PlayerEnergy),a
  66+ E0B1 3E 14                                ld		a,20
  67+ E0B3 32 EE 95                             ld		(CargoBaySize),a
  68+ E0B6 CD BA E0                             call	ZeroCargo						; Clear out cargo
  69+ E0B9                                      ; more to DO
  70+ E0B9 C9                                   ret
  71+ E0BA
# file closed: ./Commander/CommanderData.asm
 838  E0BA                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0BA              ZeroCargo:
   2+ E0BA AF           		xor		a							;zero-out cargo, including gems.
   3+ E0BB 06 10        		ld		b,16						;all the way up to alien items
   4+ E0BD 21 F0 95     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C0              .ZeroLoop:
   6+ E0C0 77                   ld      (hl),a
   7+ E0C1 23           		inc		hl
   8+ E0C2 10 FC        		djnz	.ZeroLoop
   9+ E0C4 C9           		ret
  10+ E0C5
# file closed: ./Commander/zero_player_cargo.asm
 839  E0C5              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 840  E0C5                  SLOT    LAYER1Addr
 841  E0C5                  PAGE    BankLAYER1
 842  E0C5                  ORG     LAYER1Addr, BankLAYER1
 843  E000
 844  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 7B 8E                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 845  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls:                 xor		a
   2+ E048 21 00 40     l1_cls_to_a:            ld		hl,	$4000
   3+ E04B 11 00 18                             ld		de, $1800
   4+ E04E CD 7B 8E                             call	memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_attr_cls:            xor		a
   8+ E053 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
   9+ E056 11 00 03                             ld		de, $0300
  10+ E059 CD 7B 8E                             call	memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D 01 FE FE     l2_set_border:          ld	    bc, 0xFEFE
  14+ E060 ED 79                                out		(c),a
  15+ E062 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 846  E063                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E063              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E063 D5 E5        l1_print_char:          push	de,,hl
   3+ E065 ED 94                                pixelad								; hl = address of de
   4+ E067 E5                                   push	hl							; save hl for loop
   5+ E068 26 00                                ld		h,0
   6+ E06A 6F                                   ld		l,a
   7+ E06B 29                                   add		hl,hl						; * 2
   8+ E06C 29                                   add		hl,hl						; * 4
   9+ E06D 29                                   add		hl,hl						; * 8 to get byte address
  10+ E06E ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E072 EB                                   ex		de,hl						; save address into de
  12+ E073 E1                                   pop		hl							; get back hl for loop
  13+ E074 06 08                                ld		b,8							; do 8 rows
  14+ E076 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E077 13                                   inc		de							; next byte
  16+ E078 77                                   ld		(hl),a						; poke to screen
  17+ E079 ED 93                                pixeldn								; Down 1 row
  18+ E07B 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E07D E1 D1                                pop		de,,hl					    ; restore hl
  20+ E07F C9                                   ret
  21+ E080
  22+ E080              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E080              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E080              l1_print_at:
  25+ E080 7E           .PrintLoop:             ld		a,(hl)
  26+ E081 FE 00                                cp		0
  27+ E083 C8                                   ret		z
  28+ E084                                      CallIfAGTENusng " ", l1_print_char
  28+ E084 FE 20       >                        cp      " "
  28+ E086 D4 63 E0    >                        call	nc,l1_print_char
  29+ E089 23                                   inc		hl							; move 1 message character right
  30+ E08A 7B                                   ld		a,e
  31+ E08B C6 08                                add		a,8
  32+ E08D 5F                                   ld		e,a							; move 1 screen character right
  33+ E08E 18 F0                                jr		.PrintLoop
  34+ E090              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E090 C9                                   ret
  36+ E091
  37+ E091              ;l1_print_at_wrap:
  38+ E091              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E091              ;	ld      iyh,e
  40+ E091              ;.PrintLoop:
  41+ E091              ;	ld		a,(hl)
  42+ E091              ;	cp		0
  43+ E091              ;	ret		z
  44+ E091              ;.CountWordCharLen
  45+ E091              ;; Need to change to word wrap, so it will loop through string as before
  46+ E091              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E091              ;; if that is > 238 then force a premature line wrap
  48+ E091              ;
  49+ E091              ;
  50+ E091              ;    push    iy
  51+ E091              ;    call	l1_print_char
  52+ E091              ;    pop     iy
  53+ E091              ;	inc		hl							; move 1 message character right
  54+ E091              ;	ld		a,e
  55+ E091              ;    cp      238
  56+ E091              ;    jr      nc,.NextLine
  57+ E091              ;	add		a,8
  58+ E091              ;	ld		e,a							; move 1 screen character right
  59+ E091              ;	jr		.PrintLoop
  60+ E091              ;.Clearstackandfinish:
  61+ E091              ;	pop		de
  62+ E091              ;	ret
  63+ E091              ;.NextLine:
  64+ E091              ;    ld      a,(hl)
  65+ E091              ;    cp      " "
  66+ E091              ;    ld      e,iyh
  67+ E091              ;    ld      a,d
  68+ E091              ;    add     a,8
  69+ E091              ;    ld      d,a
  70+ E091              ;    jr		.PrintLoop
  71+ E091
  72+ E091              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E091 E5           L1LenWordAtHL:          push    hl
  74+ E092 D5                                   push    de
  75+ E093 7E           .CountLoop:             ld      a,(hl)
  76+ E094 FE 00                                cp      0
  77+ E096 28 0F                                jr      z,.CountDone
  78+ E098 FE 20                                cp      32
  79+ E09A 28 0B                                jr      z,.CountDone
  80+ E09C 7B                                   ld      a,e
  81+ E09D C6 08                                add     a,8
  82+ E09F 5F                                   ld      e,a
  83+ E0A0 FE EE                                cp      238
  84+ E0A2 30 07                                jr      nc,.TooLong
  85+ E0A4 23                                   inc     hl
  86+ E0A5 18 EC                                jr      .CountLoop
  87+ E0A7 D1           .CountDone:             pop     de
  88+ E0A8 E1                                   pop     hl
  89+ E0A9 AF                                   xor     a
  90+ E0AA C9                                   ret
  91+ E0AB D1           .TooLong                pop     de
  92+ E0AC E1                                   pop     hl
  93+ E0AD 3E FF                                ld      a,$FF
  94+ E0AF C9                                   ret
  95+ E0B0
  96+ E0B0 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0B1 FE 00                                cp      0
  98+ E0B3 C8                                   ret     z
  99+ E0B4 FE 20                                cp      32
 100+ E0B6 28 0F                                jr      z,.ItsASpace
 101+ E0B8 FD E5                                push    iy
 102+ E0BA CD 63 E0                             call	l1_print_char
 103+ E0BD FD E1                                pop     iy
 104+ E0BF 7B                                   ld      a,e
 105+ E0C0 C6 08                                add     a,8
 106+ E0C2 5F                                   ld      e,a
 107+ E0C3 23                                   inc     hl
 108+ E0C4 C3 B0 E0                             jp      L1PrintWordAtHL
 109+ E0C7 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0C8 7B                                   ld      a,e
 111+ E0C9 C6 08                                add     a,8
 112+ E0CB 5F                                   ld      e,a
 113+ E0CC C9                                   ret
 114+ E0CD
 115+ E0CD
 116+ E0CD              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E0CD              ; Now has full word level wrapping
 118+ E0CD FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E0CF 7E           .PrintLoop:             ld		a,(hl)
 120+ E0D0 FE 00                                cp		0
 121+ E0D2 C8                                   ret		z
 122+ E0D3 CD 91 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E0D6 FE FF                                cp      $FF
 124+ E0D8 28 06                                jr      z,.WrapNextLine
 125+ E0DA CD B0 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E0DD              ; Need to change to word wrap, so it will loop through string as before
 127+ E0DD              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E0DD              ; if that is > 238 then force a premature line wrap
 129+ E0DD 18 F0                                jr		.PrintLoop
 130+ E0DF              .Clearstackandfinish:   ;op		de
 131+ E0DF C9                                   ret
 132+ E0E0              .WrapNextLine:
 133+ E0E0 FD 5C        .NextLine:              ld      e,iyh
 134+ E0E2 7A                                   ld      a,d
 135+ E0E3 C6 08                                add     a,8
 136+ E0E5 57                                   ld      d,a
 137+ E0E6 18 E7                                jr		.PrintLoop
 138+ E0E8
 139+ E0E8
# file closed: ./Layer1Graphics/layer1_print_at.asm
 847  E0E8              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 848  E0E8                  SLOT    ShipModelsAddr
 849  E0E8                  PAGE    BankShipModelsA
 850  E0E8              	ORG     ShipModelsAddr, BankShipModelsA
 851  E000                  DEFINE  SHIPBANKA 1
 852  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000                              DEFINE SHIPEQUATES
   3+ E000              ScoopDebrisOffset	    equ	0
   4+ E000              MissileLockLoOffset	    equ 1
   5+ E000              MissileLockHiOffset	    equ 2
   6+ E000              EdgeAddyOffset		    equ 3
   7+ E000              ;
   8+ E000              LineX4Offset		    equ 5
   9+ E000              GunVertexOffset		    equ 6
  10+ E000              ExplosionCtOffset	    equ 7
  11+ E000              VertexCtX6Offset	    equ 8
  12+ E000              EdgeCountOffset		    equ 9
  13+ E000              BountyLoOffset		    equ 10
  14+ E000              BountyHiOffset		    equ 11
  15+ E000              FaceCtX4Offset		    equ 12
  16+ E000              DotOffset			    equ 13
  17+ E000              EnergyOffset		    equ 14
  18+ E000              SpeedOffset			    equ 15
  19+ E000              ;EdgeHiOffset		    equ	16
  20+ E000              FaceAddyOffset		    equ 16
  21+ E000              ;
  22+ E000              QOffset				    equ 18
  23+ E000              LaserOffset			    equ 19
  24+ E000              VerticiesAddyOffset     equ 20
  25+ E000
  26+ E000              CobraTablePointer       equ 43
  27+ E000              ;29 faulty
  28+ E000              BankThreshold           equ 16
  29+ E000
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000              GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000              GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000 ~            GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000 ~            GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025              CopyVerticesDataToUBnk:
  70+ E025              CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025 ~            CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025 ~            CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 14 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 06 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD A1 8E                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036              CopyEdgeDataToUBnk:
  89+ E036              CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036 ~            CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036 ~            CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 40 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 03 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD A1 8E                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047              CopyNormalDataToUBnk:
 108+ E047              CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047 ~            CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047 ~            CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F0 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 0A C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD A1 8E                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058              CopyShipDataToUBnk:
 127+ E058              CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058 ~            CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058 ~            CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FD C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 16 00                             ld          bc,22                       ; its now 22 bytes
 146+ E06F ED B0                                ldir                                    ; Copy over 22 bytes
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B 3B           ShipModelBankA           DB BankShipModelsA
 162+ E07C 43                                    DB BankShipModelsB
 163+ E07D 44                                    DB BankShipModelsC
 164+ E07E                                       ENDIF
 165+ E07E                                       IFDEF SHIPBANKB
 166+ E07E ~            ShipModelBankB           DB BankShipModelsA
 167+ E07E ~                                     DB BankShipModelsB
 168+ E07E ~                                     DB BankShipModelsC
 169+ E07E                                       ENDIF
 170+ E07E                                       IFDEF SHIPBANKC
 171+ E07E ~            ShipModelBankC           DB BankShipModelsA
 172+ E07E ~                                     DB BankShipModelsB
 173+ E07E ~                                     DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E 2E E1        ShipModelTableA:         DW Adder
 177+ E080 60 E2                                 DW Anaconda
 178+ E082 64 E3                                 DW Asp_Mk_2
 179+ E084 8C E4                                 DW Asteroid
 180+ E086 64 E5                                 DW Boa
 181+ E088 58 E6                                 DW Boulder
 182+ E08A FC E6                                 DW Bushmaster
 183+ E08C CA E7                                 DW CargoType5
 184+ E08E 74 E8                                 DW Chameleon
 185+ E090 9E E9                                 DW CobraMk3
 186+ E092 28 EB                                 DW Cobra_Mk_1
 187+ E094 F0 EB                                 DW Cobra_Mk_3_P
 188+ E096 7A ED                                 DW Constrictor
 189+ E098 7E EE                                 DW Coriolis
 190+ E09A 9C EF                                 DW Cougar
 191+ E09C A0 F0                                 DW Dodo
 192+ E09E 1E E1                                 DW Dragon
 193+ E0A0 F6 E1                                 DW Escape_Pod
 194+ E0A2 4C E2                                 DW Fer_De_Lance
 195+ E0A4 68 E3                                 DW Gecko
 196+ E0A6 2E E4                                 DW Ghavial
 197+ E0A8 14 E5                                 DW Iguana
 198+ E0AA 08 E6                                 DW Krait
 199+ E0AC F0 E6                                 DW Logo
 200+ E0AE 44 E1        ShipVertexTableA:        DW AdderVertices
 201+ E0B0 76 E2                                 DW AnacondaVertices
 202+ E0B2 7A E3                                 DW Asp_Mk_2Vertices
 203+ E0B4 A2 E4                                 DW AsteroidVertices
 204+ E0B6 7A E5                                 DW BoaVertices
 205+ E0B8 6E E6                                 DW BoulderVertices
 206+ E0BA 12 E7                                 DW BushmasterVertices
 207+ E0BC E0 E7                                 DW CargoType5Vertices
 208+ E0BE 8A E8                                 DW ChameleonVertices
 209+ E0C0 B4 E9                                 DW CobraMk3Vertices
 210+ E0C2 3E EB                                 DW Cobra_Mk_1Vertices
 211+ E0C4 06 EC                                 DW Cobra_Mk_3_PVertices
 212+ E0C6 90 ED                                 DW ConstrictorVertices
 213+ E0C8 94 EE                                 DW CoriolisVertices
 214+ E0CA B2 EF                                 DW CougarVertices
 215+ E0CC B6 F0                                 DW DodoVertices
 216+ E0CE B0 E1        ShipEdgeTableA:          DW AdderEdges
 217+ E0D0 D0 E2                                 DW AnacondaEdges
 218+ E0D2 EC E3                                 DW Asp_Mk_2Edges
 219+ E0D4 D8 E4                                 DW AsteroidEdges
 220+ E0D6 C8 E5                                 DW BoaEdges
 221+ E0D8 98 E6                                 DW BoulderEdges
 222+ E0DA 5A E7                                 DW BushmasterEdges
 223+ E0DC 1C E8                                 DW CargoType5Edges
 224+ E0DE F6 E8                                 DW ChameleonEdges
 225+ E0E0 5C EA                                 DW CobraMk3Edges
 226+ E0E2 80 EB                                 DW Cobra_Mk_1Edges
 227+ E0E4 AE EC                                 DW Cobra_Mk_3_PEdges
 228+ E0E6 F6 ED                                 DW ConstrictorEdges
 229+ E0E8 F4 EE                                 DW CoriolisEdges
 230+ E0EA 24 F0                                 DW CougarEdges
 231+ E0EC 46 F1                                 DW DodoEdges
 232+ E0EE 24 E2        ShipNormalTableA:        DW AdderNormals
 233+ E0F0 34 E3                                 DW AnacondaNormals
 234+ E0F2 5C E4                                 DW Asp_Mk_2Normals
 235+ E0F4 2C E5                                 DW AsteroidNormals
 236+ E0F6 28 E6                                 DW BoaNormals
 237+ E0F8 D4 E6                                 DW BoulderNormals
 238+ E0FA A6 E7                                 DW BushmasterNormals
 239+ E0FC 58 E8                                 DW CargoType5Normals
 240+ E0FE 6A E9                                 DW ChameleonNormals
 241+ E100 F4 EA                                 DW CobraMk3Normals
 242+ E102 C8 EB                                 DW Cobra_Mk_1Normals
 243+ E104 46 ED                                 DW Cobra_Mk_3_PNormals
 244+ E106 56 EE                                 DW ConstrictorNormals
 245+ E108 64 EF                                 DW CoriolisNormals
 246+ E10A 88 F0                                 DW CougarNormals
 247+ E10C CE F1                                 DW DodoNormals
 248+ E10E 32 01        ShipModelSizeTableA:     DW AdderLen
 249+ E110 04 01                                 DW AnacondaLen
 250+ E112 28 01                                 DW Asp_Mk_2Len
 251+ E114 D8 00                                 DW AsteroidLen
 252+ E116 F4 00                                 DW BoaLen
 253+ E118 A4 00                                 DW BoulderLen
 254+ E11A CE 00                                 DW BushmasterLen
 255+ E11C AA 00                                 DW CargoType5Len
 256+ E11E 2A 01                                 DW ChameleonLen
 257+ E120 8A 01                                 DW CobraMk3Len
 258+ E122 C8 00                                 DW Cobra_Mk_1Len
 259+ E124 8A 01                                 DW Cobra_Mk_3_PLen
 260+ E126 04 01                                 DW ConstrictorLen
 261+ E128 1E 01                                 DW CoriolisLen
 262+ E12A 04 01                                 DW CougarLen
 263+ E12C 5E 01                                 DW DodoLen
 264+ E12E                                       ENDIF
 265+ E12E                                       IFDEF SHIPBANKB
 266+ E12E ~            ShipModelTableB:         DW Dragon
 267+ E12E ~                                     DW Escape_Pod
 268+ E12E ~                                     DW Fer_De_Lance
 269+ E12E ~                                     DW Gecko
 270+ E12E ~                                     DW Ghavial
 271+ E12E ~                                     DW Iguana
 272+ E12E ~                                     DW Krait
 273+ E12E ~                                     DW Logo
 274+ E12E ~                                     DW Mamba
 275+ E12E ~                                     DW Missile
 276+ E12E ~                                     DW Monitor
 277+ E12E ~                                     DW Moray
 278+ E12E ~                                     DW Ophidian
 279+ E12E ~                                     DW Plate
 280+ E12E ~                                     DW Python
 281+ E12E ~                                     DW Python_P
 282+ E12E ~            ShipVertexTableB:        DW DragonVertices
 283+ E12E ~                                     DW Escape_PodVertices
 284+ E12E ~                                     DW Fer_De_LanceVertices
 285+ E12E ~                                     DW GeckoVertices
 286+ E12E ~                                     DW GhavialVertices
 287+ E12E ~                                     DW IguanaVertices
 288+ E12E ~                                     DW KraitVertices
 289+ E12E ~                                     DW LogoVertices
 290+ E12E ~                                     DW MambaVertices
 291+ E12E ~                                     DW MissileVertices
 292+ E12E ~                                     DW MonitorVertices
 293+ E12E ~                                     DW MorayVertices
 294+ E12E ~                                     DW OphidianVertices
 295+ E12E ~                                     DW PlateVertices
 296+ E12E ~                                     DW PythonVertices
 297+ E12E ~                                     DW Python_PVertices
 298+ E12E ~            ShipEdgeTableB:          DW DragonEdges
 299+ E12E ~                                     DW Escape_PodEdges
 300+ E12E ~                                     DW Fer_De_LanceEdges
 301+ E12E ~                                     DW GeckoEdges
 302+ E12E ~                                     DW GhavialEdges
 303+ E12E ~                                     DW IguanaEdges
 304+ E12E ~                                     DW KraitEdges
 305+ E12E ~                                     DW LogoEdges
 306+ E12E ~                                     DW MambaEdges
 307+ E12E ~                                     DW MissileEdges
 308+ E12E ~                                     DW MonitorEdges
 309+ E12E ~                                     DW MorayEdges
 310+ E12E ~                                     DW OphidianEdges
 311+ E12E ~                                     DW PlateEdges
 312+ E12E ~                                     DW PythonEdges
 313+ E12E ~                                     DW Python_PEdges
 314+ E12E ~            ShipNormalTableB:        DW DragonNormals
 315+ E12E ~                                     DW Escape_PodNormals
 316+ E12E ~                                     DW Fer_De_LanceNormals
 317+ E12E ~                                     DW GeckoNormals
 318+ E12E ~                                     DW GhavialNormals
 319+ E12E ~                                     DW IguanaNormals
 320+ E12E ~                                     DW KraitNormals
 321+ E12E ~                                     DW LogoNormals
 322+ E12E ~                                     DW MambaNormals
 323+ E12E ~                                     DW MissileNormals
 324+ E12E ~                                     DW MonitorNormals
 325+ E12E ~                                     DW MorayNormals
 326+ E12E ~                                     DW OphidianNormals
 327+ E12E ~                                     DW PlateNormals
 328+ E12E ~                                     DW PythonNormals
 329+ E12E ~                                     DW Python_PNormals
 330+ E12E ~            ShipModelSizeTableB:     DW DragonLen
 331+ E12E ~                                     DW Escape_PodLen
 332+ E12E ~                                     DW Fer_De_LanceLen
 333+ E12E ~                                     DW GeckoLen
 334+ E12E ~                                     DW GhavialLen
 335+ E12E ~                                     DW IguanaLen
 336+ E12E ~                                     DW KraitLen
 337+ E12E ~                                     DW LogoLen
 338+ E12E ~                                     DW MambaLen
 339+ E12E ~                                     DW MissileLen
 340+ E12E ~                                     DW MonitorLen
 341+ E12E ~                                     DW MorayLen
 342+ E12E ~                                     DW OphidianLen
 343+ E12E ~                                     DW PlateLen
 344+ E12E ~                                     DW PythonLen
 345+ E12E ~                                     DW Python_PLen
 346+ E12E                                       ENDIF
 347+ E12E                                       IFDEF SHIPBANKC
 348+ E12E ~            ShipModelTableC:         DW Rattler
 349+ E12E ~                                     DW Rock_Hermit
 350+ E12E ~                                     DW ShuttleType9
 351+ E12E ~                                     DW Shuttle_Mk_2
 352+ E12E ~                                     DW Sidewinder
 353+ E12E ~                                     DW Splinter
 354+ E12E ~                                     DW TestVector
 355+ E12E ~                                     DW Thargoid
 356+ E12E ~                                     DW Thargon
 357+ E12E ~                                     DW TransportType10
 358+ E12E ~                                     DW Viper
 359+ E12E ~                                     DW Worm
 360+ E12E ~                                     DW 0
 361+ E12E ~                                     DW 0
 362+ E12E ~                                     DW 0
 363+ E12E ~                                     DW 0
 364+ E12E ~            ShipVertexTableC:        DW RattlerVertices
 365+ E12E ~                                     DW Rock_HermitVertices
 366+ E12E ~                                     DW ShuttleType9Vertices
 367+ E12E ~                                     DW Shuttle_Mk_2Vertices
 368+ E12E ~                                     DW SidewinderVertices
 369+ E12E ~                                     DW SplinterVertices
 370+ E12E ~                                     DW TestVectorVertices
 371+ E12E ~                                     DW ThargoidVertices
 372+ E12E ~                                     DW ThargonVertices
 373+ E12E ~                                     DW TransportType10Vertices
 374+ E12E ~                                     DW ViperVertices
 375+ E12E ~                                     DW WormVertices
 376+ E12E ~                                     DW 0
 377+ E12E ~                                     DW 0
 378+ E12E ~                                     DW 0
 379+ E12E ~                                     DW 0
 380+ E12E ~            ShipEdgeTableC:          DW RattlerEdges
 381+ E12E ~                                     DW Rock_HermitEdges
 382+ E12E ~                                     DW ShuttleType9Edges
 383+ E12E ~                                     DW Shuttle_Mk_2Edges
 384+ E12E ~                                     DW SidewinderEdges
 385+ E12E ~                                     DW SplinterEdges
 386+ E12E ~                                     DW TestVectorEdges
 387+ E12E ~                                     DW ThargoidEdges
 388+ E12E ~                                     DW ThargonEdges
 389+ E12E ~                                     DW TransportType10Edges
 390+ E12E ~                                     DW ViperEdges
 391+ E12E ~                                     DW WormEdges
 392+ E12E ~                                     DW 0
 393+ E12E ~                                     DW 0
 394+ E12E ~                                     DW 0
 395+ E12E ~                                     DW 0
 396+ E12E ~            ShipNormalTableC:        DW RattlerNormals
 397+ E12E ~                                     DW Rock_HermitNormals
 398+ E12E ~                                     DW ShuttleType9Normals
 399+ E12E ~                                     DW Shuttle_Mk_2Normals
 400+ E12E ~                                     DW SidewinderNormals
 401+ E12E ~                                     DW SplinterNormals
 402+ E12E ~                                     DW TestVectorNormals
 403+ E12E ~                                     DW ThargoidNormals
 404+ E12E ~                                     DW ThargonNormals
 405+ E12E ~                                     DW TransportType10Normals
 406+ E12E ~                                     DW ViperNormals
 407+ E12E ~                                     DW WormNormals
 408+ E12E ~                                     DW 0
 409+ E12E ~                                     DW 0
 410+ E12E ~                                     DW 0
 411+ E12E ~                                     DW 0
 412+ E12E ~            ShipModelSizeTableC:     DW RattlerLen
 413+ E12E ~                                     DW Rock_HermitLen
 414+ E12E ~                                     DW ShuttleType9Len
 415+ E12E ~                                     DW Shuttle_Mk_2Len
 416+ E12E ~                                     DW SidewinderLen
 417+ E12E ~                                     DW SplinterLen
 418+ E12E ~                                     DW TestVectorLen
 419+ E12E ~                                     DW ThargoidLen
 420+ E12E ~                                     DW ThargonLen
 421+ E12E ~                                     DW TransportType10Len
 422+ E12E ~                                     DW ViperLen
 423+ E12E ~                                     DW WormLen
 424+ E12E ~                                     DW 0
 425+ E12E ~                                     DW 0
 426+ E12E ~                                     DW 0
 427+ E12E ~                                     DW 0
 428+ E12E                                       ENDIF
 429+ E12E
 430+ E12E
 431+ E12E                                      IFNDEF SHIPMODELTABLES
 432+ E12E                                      DEFINE SHIPMODELTABLES
 433+ E12E              ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E12E              ShipModelBank:          EQU ShipModelBankA
 435+ E12E              ShipModelTable:         EQU ShipModelTableA
 436+ E12E              ShipVertexTable:        EQU ShipVertexTableA
 437+ E12E              ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E12E              ShipNormalTable:        EQU ShipNormalTableA
 439+ E12E                                      ENDIF
 440+ E12E
 441+ E12E                                      IFDEF SHIPBANKA
 442+ E12E                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E12E 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E131 B0 E1                                DW AdderEdges
   3++E133 74                                   DB AdderEdgesSize
   4++E134 00 16                                DB $00, $16
   5++E136 6C                                   DB AdderVertSize
   6++E137 1D                                   DB AdderEdgesCnt
   7++E138 00 28                                DB $00, $28
   8++E13A 3C                                   DB AdderNormalsSize
   9++E13B 17 48 18                             DB $17, $48, $18
  10++E13E 24 E2                                DW AdderNormals
  11++E140 02 21                                DB $02, $21
  12++E142 44 E1                                DW AdderVertices
  13++E144 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  13++E148 01 BC
  14++E14A 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  14++E14E 01 23
  15++E150 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  15++E154 23 45
  16++E156 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  16++E15A 45 66
  17++E15C 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  17++E160 56 7E
  18++E162 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  18++E166 78 AE
  19++E168 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  19++E16C 89 AA
  20++E16E 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  20++E172 9A BC
  21++E174 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  21++E178 78 9D
  22++E17A 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  22++E17E 46 7D
  23++E180 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  23++E184 09 BD
  24++E186 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  24++E18A 02 4D
  25++E18C 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  25++E190 1A CE
  26++E192 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  26++E196 13 5E
  27++E198 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  27++E19C 00 00
  28++E19E 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  28++E1A2 00 00
  29++E1A4 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  29++E1A8 00 00
  30++E1AA 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  30++E1AE 00 00
  31++E1B0              AdderVertSize:          equ $ - AdderVertices
  32++E1B0 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  33++E1B4 07 23 04 08                          DB $07, $23, $04, $08
  34++E1B8 1F 45 08 0C                          DB $1F, $45, $08, $0C
  35++E1BC 1F 56 0C 10                          DB $1F, $56, $0C, $10
  36++E1C0 1F 7E 10 14                          DB $1F, $7E, $10, $14
  37++E1C4 1F 8A 14 18                          DB $1F, $8A, $14, $18
  38++E1C8 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  39++E1CC 07 BC 1C 00                          DB $07, $BC, $1C, $00
  40++E1D0 1F 46 0C 24                          DB $1F, $46, $0C, $24
  41++E1D4 1F 7D 24 20                          DB $1F, $7D, $24, $20
  42++E1D8 1F 89 20 18                          DB $1F, $89, $20, $18
  43++E1DC 1F 0B 00 28                          DB $1F, $0B, $00, $28
  44++E1E0 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  45++E1E4 1F 02 04 2C                          DB $1F, $02, $04, $2C
  46++E1E8 1F 24 08 2C                          DB $1F, $24, $08, $2C
  47++E1EC 1F 1C 00 30                          DB $1F, $1C, $00, $30
  48++E1F0 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  49++E1F4 1F 13 04 34                          DB $1F, $13, $04, $34
  50++E1F8 1F 35 08 34                          DB $1F, $35, $08, $34
  51++E1FC 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  52++E200 1F 1E 30 34                          DB $1F, $1E, $30, $34
  53++E204 1F 9D 20 28                          DB $1F, $9D, $20, $28
  54++E208 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  55++E20C 1F AE 14 30                          DB $1F, $AE, $14, $30
  56++E210 1F 5E 10 34                          DB $1F, $5E, $10, $34
  57++E214 05 00 38 3C                          DB $05, $00, $38, $3C
  58++E218 03 00 3C 40                          DB $03, $00, $3C, $40
  59++E21C 04 00 40 44                          DB $04, $00, $40, $44
  60++E220 03 00 44 38                          DB $03, $00, $44, $38
  61++E224              AdderEdgesSize:         equ $ - AdderEdges
  62++E224              AdderEdgesCnt:          equ AdderEdgesSize/4
  63++E224 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  64++E228 5F 00 27 0A                          DB $5F, $00, $27, $0A
  65++E22C 1F 45 32 0D                          DB $1F, $45, $32, $0D
  66++E230 5F 45 32 0D                          DB $5F, $45, $32, $0D
  67++E234 1F 1E 34 00                          DB $1F, $1E, $34, $00
  68++E238 5F 1E 34 00                          DB $5F, $1E, $34, $00
  69++E23C 3F 00 00 A0                          DB $3F, $00, $00, $A0
  70++E240 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E244 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E248 9F 1E 34 00                          DB $9F, $1E, $34, $00
  73++E24C DF 1E 34 00                          DB $DF, $1E, $34, $00
  74++E250 9F 45 32 0D                          DB $9F, $45, $32, $0D
  75++E254 DF 45 32 0D                          DB $DF, $45, $32, $0D
  76++E258 1F 00 1C 00                          DB $1F, $00, $1C, $00
  77++E25C 5F 00 1C 00                          DB $5F, $00, $1C, $00
  78++E260
  79++E260              AdderNormalsSize:       equ $ - AdderNormals
  80++E260              AdderLen:                equ $ - Adder
  81++E260
# file closed: ./Data/Ships/Adder.asm
 443+ E260                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E260 07 27 10     Anaconda:	DB $07, $27, $10
   2++E263 D0 E2        	DW AnacondaEdges
   3++E265 64           	DB AnacondaEdgesSize
   4++E266 30 2E        	DB $30, $2E
   5++E268 5A           	DB AnacondaVertSize
   6++E269 19           	DB AnacondaEdgesCnt
   7++E26A 00 00        	DB $00, $00
   8++E26C 30           	DB AnacondaNormalsSize
   9++E26D 24 FC 0E     	DB $24, $FC, $0E
  10++E270 34 E3        	DW AnacondaNormals
  11++E272 01 3F        	DB $01, $3F
  12++E274 76 E2        	DW AnacondaVertices
  13++E276
  14++E276 00 07 3A 3E  AnacondaVertices:	DB $00, $07, $3A, $3E, $01, $55
  14++E27A 01 55
  15++E27C 2B 0D 25 FE  	DB $2B, $0D, $25, $FE, $01, $22
  15++E280 01 22
  16++E282 1A 2F 03 FE  	DB $1A, $2F, $03, $FE, $02, $33
  16++E286 02 33
  17++E288 1A 2F 03 7E  	DB $1A, $2F, $03, $7E, $03, $44
  17++E28C 03 44
  18++E28E 2B 0D 25 7E  	DB $2B, $0D, $25, $7E, $04, $55
  18++E292 04 55
  19++E294 00 30 31 3E  	DB $00, $30, $31, $3E, $15, $66
  19++E298 15 66
  20++E29A 45 0F 0F BE  	DB $45, $0F, $0F, $BE, $12, $77
  20++E29E 12 77
  21++E2A0 2B 27 28 DF  	DB $2B, $27, $28, $DF, $23, $88
  21++E2A4 23 88
  22++E2A6 2B 27 28 5F  	DB $2B, $27, $28, $5F, $34, $99
  22++E2AA 34 99
  23++E2AC 45 0F 0F 3E  	DB $45, $0F, $0F, $3E, $45, $AA
  23++E2B0 45 AA
  24++E2B2 2B 35 17 BF  	DB $2B, $35, $17, $BF, $FF, $FF
  24++E2B6 FF FF
  25++E2B8 45 01 20 DF  	DB $45, $01, $20, $DF, $27, $88
  25++E2BC 27 88
  26++E2BE 00 00 FE 1F  	DB $00, $00, $FE, $1F, $FF, $FF
  26++E2C2 FF FF
  27++E2C4 45 01 20 5F  	DB $45, $01, $20, $5F, $49, $AA
  27++E2C8 49 AA
  28++E2CA 2B 35 17 3F  	DB $2B, $35, $17, $3F, $FF, $FF
  28++E2CE FF FF
  29++E2D0
  30++E2D0              AnacondaVertSize: equ $ - AnacondaVertices
  31++E2D0
  32++E2D0 1E 01 00 04  AnacondaEdges:	DB $1E, $01, $00, $04
  33++E2D4 1E 02 04 08  	DB $1E, $02, $04, $08
  34++E2D8 1E 03 08 0C  	DB $1E, $03, $08, $0C
  35++E2DC 1E 04 0C 10  	DB $1E, $04, $0C, $10
  36++E2E0 1E 05 00 10  	DB $1E, $05, $00, $10
  37++E2E4 1D 15 00 14  	DB $1D, $15, $00, $14
  38++E2E8 1D 12 04 18  	DB $1D, $12, $04, $18
  39++E2EC 1D 23 08 1C  	DB $1D, $23, $08, $1C
  40++E2F0 1D 34 0C 20  	DB $1D, $34, $0C, $20
  41++E2F4 1D 45 10 24  	DB $1D, $45, $10, $24
  42++E2F8 1E 16 14 28  	DB $1E, $16, $14, $28
  43++E2FC 1E 17 18 28  	DB $1E, $17, $18, $28
  44++E300 1E 27 18 2C  	DB $1E, $27, $18, $2C
  45++E304 1E 28 1C 2C  	DB $1E, $28, $1C, $2C
  46++E308 1F 38 1C 30  	DB $1F, $38, $1C, $30
  47++E30C 1F 39 20 30  	DB $1F, $39, $20, $30
  48++E310 1E 49 20 34  	DB $1E, $49, $20, $34
  49++E314 1E 4A 24 34  	DB $1E, $4A, $24, $34
  50++E318 1E 5A 24 38  	DB $1E, $5A, $24, $38
  51++E31C 1E 56 14 38  	DB $1E, $56, $14, $38
  52++E320 1E 6B 28 38  	DB $1E, $6B, $28, $38
  53++E324 1F 7B 28 30  	DB $1F, $7B, $28, $30
  54++E328 1F 78 2C 30  	DB $1F, $78, $2C, $30
  55++E32C 1F 9A 30 34  	DB $1F, $9A, $30, $34
  56++E330 1F AB 30 38  	DB $1F, $AB, $30, $38
  57++E334
  58++E334              AnacondaEdgesSize: equ $ - AnacondaEdges
  59++E334
  60++E334
  61++E334              AnacondaEdgesCnt: equ AnacondaEdgesSize/4
  62++E334
  63++E334
  64++E334 7E 00 33 31  AnacondaNormals:	DB $7E, $00, $33, $31
  65++E338 BE 33 12 57  	DB $BE, $33, $12, $57
  66++E33C FE 4D 39 13  	DB $FE, $4D, $39, $13
  67++E340 5F 00 5A 10  	DB $5F, $00, $5A, $10
  68++E344 7E 4D 39 13  	DB $7E, $4D, $39, $13
  69++E348 3E 33 12 57  	DB $3E, $33, $12, $57
  70++E34C 3E 00 6F 14  	DB $3E, $00, $6F, $14
  71++E350 9F 61 48 18  	DB $9F, $61, $48, $18
  72++E354 DF 6C 44 22  	DB $DF, $6C, $44, $22
  73++E358 5F 6C 44 22  	DB $5F, $6C, $44, $22
  74++E35C 1F 61 48 18  	DB $1F, $61, $48, $18
  75++E360 1F 00 5E 12  	DB $1F, $00, $5E, $12
  76++E364
  77++E364              AnacondaNormalsSize: equ $ - AnacondaNormals
  78++E364              AnacondaLen: equ $ - Anaconda
  79++E364
# file closed: ./Data/Ships/Anaconda.asm
 444+ E364                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E364 00 0E 10     Asp_Mk_2:	DB $00, $0E, $10
   2++E367 EC E3        	DW Asp_Mk_2Edges
   3++E369 70           	DB Asp_Mk_2EdgesSize
   4++E36A 20 1A        	DB $20, $1A
   5++E36C 72           	DB Asp_Mk_2VertSize
   6++E36D 1C           	DB Asp_Mk_2EdgesCnt
   7++E36E 00 C8        	DB $00, $C8
   8++E370 30           	DB Asp_Mk_2NormalsSize
   9++E371 28 96 28     	DB $28, $96, $28
  10++E374 5C E4        	DW Asp_Mk_2Normals
  11++E376 01 29        	DB $01, $29
  12++E378 7A E3        	DW Asp_Mk_2Vertices
  13++E37A
  14++E37A 00 12 00 56  Asp_Mk_2Vertices:	DB $00, $12, $00, $56, $01, $22
  14++E37E 01 22
  15++E380 00 09 2D 7F  	DB $00, $09, $2D, $7F, $12, $BB
  15++E384 12 BB
  16++E386 2B 00 2D 3F  	DB $2B, $00, $2D, $3F, $16, $BB
  16++E38A 16 BB
  17++E38C 45 03 00 5F  	DB $45, $03, $00, $5F, $16, $79
  17++E390 16 79
  18++E392 2B 0E 1C 5F  	DB $2B, $0E, $1C, $5F, $01, $77
  18++E396 01 77
  19++E398 2B 00 2D BF  	DB $2B, $00, $2D, $BF, $25, $BB
  19++E39C 25 BB
  20++E39E 45 03 00 DF  	DB $45, $03, $00, $DF, $25, $8A
  20++E3A2 25 8A
  21++E3A4 2B 0E 1C DF  	DB $2B, $0E, $1C, $DF, $02, $88
  21++E3A8 02 88
  22++E3AA 1A 07 49 5F  	DB $1A, $07, $49, $5F, $04, $79
  22++E3AE 04 79
  23++E3B0 1A 07 49 DF  	DB $1A, $07, $49, $DF, $04, $8A
  23++E3B4 04 8A
  24++E3B6 2B 0E 1C 1F  	DB $2B, $0E, $1C, $1F, $34, $69
  24++E3BA 34 69
  25++E3BC 2B 0E 1C 9F  	DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3C0 34 5A
  26++E3C2 00 09 2D 3F  	DB $00, $09, $2D, $3F, $35, $6B
  26++E3C6 35 6B
  27++E3C8 11 00 2D AA  	DB $11, $00, $2D, $AA, $BB, $BB
  27++E3CC BB BB
  28++E3CE 11 00 2D 29  	DB $11, $00, $2D, $29, $BB, $BB
  28++E3D2 BB BB
  29++E3D4 00 04 2D 6A  	DB $00, $04, $2D, $6A, $BB, $BB
  29++E3D8 BB BB
  30++E3DA 00 04 2D 28  	DB $00, $04, $2D, $28, $BB, $BB
  30++E3DE BB BB
  31++E3E0 00 07 49 4A  	DB $00, $07, $49, $4A, $04, $04
  31++E3E4 04 04
  32++E3E6 00 07 53 4A  	DB $00, $07, $53, $4A, $04, $04
  32++E3EA 04 04
  33++E3EC
  34++E3EC              Asp_Mk_2VertSize: equ $ - Asp_Mk_2Vertices
  35++E3EC
  36++E3EC 16 12 00 04  Asp_Mk_2Edges:	DB $16, $12, $00, $04
  37++E3F0 16 01 00 10  	DB $16, $01, $00, $10
  38++E3F4 16 02 00 1C  	DB $16, $02, $00, $1C
  39++E3F8 1F 1B 04 08  	DB $1F, $1B, $04, $08
  40++E3FC 1F 16 08 0C  	DB $1F, $16, $08, $0C
  41++E400 10 79 0C 20  	DB $10, $79, $0C, $20
  42++E404 1F 04 20 24  	DB $1F, $04, $20, $24
  43++E408 10 8A 18 24  	DB $10, $8A, $18, $24
  44++E40C 1F 25 14 18  	DB $1F, $25, $14, $18
  45++E410 1F 2B 04 14  	DB $1F, $2B, $04, $14
  46++E414 1F 17 0C 10  	DB $1F, $17, $0C, $10
  47++E418 1F 07 10 20  	DB $1F, $07, $10, $20
  48++E41C 1F 28 18 1C  	DB $1F, $28, $18, $1C
  49++E420 1F 08 1C 24  	DB $1F, $08, $1C, $24
  50++E424 1F 6B 08 30  	DB $1F, $6B, $08, $30
  51++E428 1F 5B 14 30  	DB $1F, $5B, $14, $30
  52++E42C 16 36 28 30  	DB $16, $36, $28, $30
  53++E430 16 35 2C 30  	DB $16, $35, $2C, $30
  54++E434 16 34 28 2C  	DB $16, $34, $28, $2C
  55++E438 1F 5A 18 2C  	DB $1F, $5A, $18, $2C
  56++E43C 1F 4A 24 2C  	DB $1F, $4A, $24, $2C
  57++E440 1F 69 0C 28  	DB $1F, $69, $0C, $28
  58++E444 1F 49 20 28  	DB $1F, $49, $20, $28
  59++E448 0A BB 34 3C  	DB $0A, $BB, $34, $3C
  60++E44C 09 BB 3C 38  	DB $09, $BB, $3C, $38
  61++E450 08 BB 38 40  	DB $08, $BB, $38, $40
  62++E454 08 BB 40 34  	DB $08, $BB, $40, $34
  63++E458 0A 04 48 44  	DB $0A, $04, $48, $44
  64++E45C
  65++E45C              Asp_Mk_2EdgesSize: equ $ - Asp_Mk_2Edges
  66++E45C
  67++E45C
  68++E45C              Asp_Mk_2EdgesCnt: equ Asp_Mk_2EdgesSize/4
  69++E45C
  70++E45C
  71++E45C 5F 00 23 05  Asp_Mk_2Normals:	DB $5F, $00, $23, $05
  72++E460 7F 08 26 07  	DB $7F, $08, $26, $07
  73++E464 FF 08 26 07  	DB $FF, $08, $26, $07
  74++E468 36 00 18 01  	DB $36, $00, $18, $01
  75++E46C 1F 00 2B 13  	DB $1F, $00, $2B, $13
  76++E470 BF 06 1C 02  	DB $BF, $06, $1C, $02
  77++E474 3F 06 1C 02  	DB $3F, $06, $1C, $02
  78++E478 5F 3B 40 1F  	DB $5F, $3B, $40, $1F
  79++E47C DF 3B 40 1F  	DB $DF, $3B, $40, $1F
  80++E480 1F 50 2E 32  	DB $1F, $50, $2E, $32
  81++E484 9F 50 2E 32  	DB $9F, $50, $2E, $32
  82++E488 3F 00 00 5A  	DB $3F, $00, $00, $5A
  83++E48C
  84++E48C              Asp_Mk_2NormalsSize: equ $ - Asp_Mk_2Normals
  85++E48C              Asp_Mk_2Len: equ $ - Asp_Mk_2
  86++E48C
# file closed: ./Data/Ships/Asp_Mk_2.asm
 445+ E48C                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E48C 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E48F D8 E4                                DW AsteroidEdges
   3++E491 54                                   DB AsteroidEdgesSize
   4++E492 00 22                                DB $00, $22
   5++E494 36                                   DB AsteroidVertSize
   6++E495 15                                   DB AsteroidEdgesCnt
   7++E496 00 05                                DB $00, $05
   8++E498 38                                   DB AsteroidNormalsSize
   9++E499 32 3C 1E                             DB $32, $3C, $1E
  10++E49C 2C E5                                DW AsteroidNormals
  11++E49E 01 00                                DB $01, $00
  12++E4A0 A2 E4                                DW AsteroidVertices
  13++E4A2 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  13++E4A6 FF FF
  14++E4A8 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  14++E4AC FF FF
  15++E4AE 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  15++E4B2 FF FF
  16++E4B4 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  16++E4B8 FF FF
  17++E4BA 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  17++E4BE 65 DC
  18++E4C0 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  18++E4C4 FF FF
  19++E4C6 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  19++E4CA 10 32
  20++E4CC 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  20++E4D0 FF FF
  21++E4D2 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  21++E4D6 98 BA
  22++E4D8              AsteroidVertSize:       equ $ - AsteroidVertices
  23++E4D8 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  24++E4DC 1F D6 00 10                          DB $1F, $D6, $00, $10
  25++E4E0 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  26++E4E4 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  27++E4E8 1F A3 04 08                          DB $1F, $A3, $04, $08
  28++E4EC 1F 32 04 18                          DB $1F, $32, $04, $18
  29++E4F0 1F 31 08 18                          DB $1F, $31, $08, $18
  30++E4F4 1F 41 08 14                          DB $1F, $41, $08, $14
  31++E4F8 1F 10 14 18                          DB $1F, $10, $14, $18
  32++E4FC 1F 60 00 14                          DB $1F, $60, $00, $14
  33++E500 1F 54 0C 14                          DB $1F, $54, $0C, $14
  34++E504 1F 20 00 18                          DB $1F, $20, $00, $18
  35++E508 1F 65 10 14                          DB $1F, $65, $10, $14
  36++E50C 1F A8 04 20                          DB $1F, $A8, $04, $20
  37++E510 1F 87 04 1C                          DB $1F, $87, $04, $1C
  38++E514 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  39++E518 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  40++E51C 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  41++E520 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  42++E524 1F BA 08 20                          DB $1F, $BA, $08, $20
  43++E528 1F 98 1C 20                          DB $1F, $98, $1C, $20
  44++E52C
  45++E52C              AsteroidEdgesSize:      equ $ - AsteroidEdges
  46++E52C              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  47++E52C 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  48++E530 5F 09 42 51                          DB $5F, $09, $42, $51
  49++E534 9F 48 40 1F                          DB $9F, $48, $40, $1F
  50++E538 DF 40 49 2F                          DB $DF, $40, $49, $2F
  51++E53C 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  52++E540 1F 87 0F 23                          DB $1F, $87, $0F, $23
  53++E544 1F 26 4C 46                          DB $1F, $26, $4C, $46
  54++E548 BF 42 3B 27                          DB $BF, $42, $3B, $27
  55++E54C FF 43 0F 50                          DB $FF, $43, $0F, $50
  56++E550 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  57++E554 FF 46 50 28                          DB $FF, $46, $50, $28
  58++E558 7F 3A 66 33                          DB $7F, $3A, $66, $33
  59++E55C 3F 51 09 43                          DB $3F, $51, $09, $43
  60++E560 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  61++E564              AsteroidNormalsSize:    equ $ - AsteroidNormals
  62++E564              AsteroidLen:            equ $ - Asteroid
  63++E564
# file closed: ./Data/Ships/Asteroid.asm
 446+ E564                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E564 05 13 24     Boa:	DB $05, $13, $24
   2++E567 C8 E5        	DW BoaEdges
   3++E569 60           	DB BoaEdgesSize
   4++E56A 00 26        	DB $00, $26
   5++E56C 4E           	DB BoaVertSize
   6++E56D 18           	DB BoaEdgesCnt
   7++E56E 00 00        	DB $00, $00
   8++E570 30           	DB BoaNormalsSize
   9++E571 28 FA 18     	DB $28, $FA, $18
  10++E574 28 E6        	DW BoaNormals
  11++E576 00 1C        	DB $00, $1C
  12++E578 7A E5        	DW BoaVertices
  13++E57A
  14++E57A 00 00 5D 1F  BoaVertices:	DB $00, $00, $5D, $1F, $FF, $FF
  14++E57E FF FF
  15++E580 00 28 57 38  	DB $00, $28, $57, $38, $02, $33
  15++E584 02 33
  16++E586 26 19 63 78  	DB $26, $19, $63, $78, $01, $44
  16++E58A 01 44
  17++E58C 26 19 63 F8  	DB $26, $19, $63, $F8, $12, $55
  17++E590 12 55
  18++E592 26 28 3B BF  	DB $26, $28, $3B, $BF, $23, $69
  18++E596 23 69
  19++E598 26 28 3B 3F  	DB $26, $28, $3B, $3F, $03, $6B
  19++E59C 03 6B
  20++E59E 3E 00 43 3F  	DB $3E, $00, $43, $3F, $04, $8B
  20++E5A2 04 8B
  21++E5A4 18 41 4F 7F  	DB $18, $41, $4F, $7F, $14, $8A
  21++E5A8 14 8A
  22++E5AA 18 41 4F FF  	DB $18, $41, $4F, $FF, $15, $7A
  22++E5AE 15 7A
  23++E5B0 3E 00 43 BF  	DB $3E, $00, $43, $BF, $25, $79
  23++E5B4 25 79
  24++E5B6 00 07 6B 36  	DB $00, $07, $6B, $36, $02, $AA
  24++E5BA 02 AA
  25++E5BC 0D 09 6B 76  	DB $0D, $09, $6B, $76, $01, $AA
  25++E5C0 01 AA
  26++E5C2 0D 09 6B F6  	DB $0D, $09, $6B, $F6, $12, $CC
  26++E5C6 12 CC
  27++E5C8
  28++E5C8
  29++E5C8              BoaVertSize: equ $ - BoaVertices
  30++E5C8
  31++E5C8
  32++E5C8
  33++E5C8 1F 6B 00 14  BoaEdges:	DB $1F, $6B, $00, $14
  34++E5CC 1F 8A 00 1C  	DB $1F, $8A, $00, $1C
  35++E5D0 1F 79 00 24  	DB $1F, $79, $00, $24
  36++E5D4 1D 69 00 10  	DB $1D, $69, $00, $10
  37++E5D8 1D 8B 00 18  	DB $1D, $8B, $00, $18
  38++E5DC 1D 7A 00 20  	DB $1D, $7A, $00, $20
  39++E5E0 1F 36 10 14  	DB $1F, $36, $10, $14
  40++E5E4 1F 0B 14 18  	DB $1F, $0B, $14, $18
  41++E5E8 1F 48 18 1C  	DB $1F, $48, $18, $1C
  42++E5EC 1F 1A 1C 20  	DB $1F, $1A, $1C, $20
  43++E5F0 1F 57 20 24  	DB $1F, $57, $20, $24
  44++E5F4 1F 29 10 24  	DB $1F, $29, $10, $24
  45++E5F8 18 23 04 10  	DB $18, $23, $04, $10
  46++E5FC 18 03 04 14  	DB $18, $03, $04, $14
  47++E600 18 25 0C 24  	DB $18, $25, $0C, $24
  48++E604 18 15 0C 20  	DB $18, $15, $0C, $20
  49++E608 18 04 08 18  	DB $18, $04, $08, $18
  50++E60C 18 14 08 1C  	DB $18, $14, $08, $1C
  51++E610 16 02 04 28  	DB $16, $02, $04, $28
  52++E614 16 01 08 2C  	DB $16, $01, $08, $2C
  53++E618 16 12 0C 30  	DB $16, $12, $0C, $30
  54++E61C 0E 0C 28 2C  	DB $0E, $0C, $28, $2C
  55++E620 0E 1C 2C 30  	DB $0E, $1C, $2C, $30
  56++E624 0E 2C 30 28  	DB $0E, $2C, $30, $28
  57++E628
  58++E628              BoaEdgesSize: equ $ - BoaEdges
  59++E628
  60++E628
  61++E628              BoaEdgesCnt: equ BoaEdgesSize/4
  62++E628
  63++E628
  64++E628 3F 2B 25 3C  BoaNormals:	DB $3F, $2B, $25, $3C
  65++E62C 7F 00 2D 59  	DB $7F, $00, $2D, $59
  66++E630 BF 2B 25 3C  	DB $BF, $2B, $25, $3C
  67++E634 1F 00 28 00  	DB $1F, $00, $28, $00
  68++E638 7F 3E 20 14  	DB $7F, $3E, $20, $14
  69++E63C FF 3E 20 14  	DB $FF, $3E, $20, $14
  70++E640 1F 00 17 06  	DB $1F, $00, $17, $06
  71++E644 DF 17 0F 09  	DB $DF, $17, $0F, $09
  72++E648 5F 17 0F 09  	DB $5F, $17, $0F, $09
  73++E64C 9F 1A 0D 0A  	DB $9F, $1A, $0D, $0A
  74++E650 5F 00 1F 0C  	DB $5F, $00, $1F, $0C
  75++E654 1F 1A 0D 0A  	DB $1F, $1A, $0D, $0A
  76++E658
  77++E658              BoaNormalsSize: equ $ - BoaNormals
  78++E658              BoaLen: equ $ - Boa
  79++E658
# file closed: ./Data/Ships/Boa.asm
 447+ E658                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E658 00 03 84     Boulder:	            DB $00, $03, $84
   2++E65B 98 E6                                DW BoulderEdges
   3++E65D 3C                                   DB BoulderEdgesSize
   4++E65E 00 0E                                DB $00, $0E
   5++E660 2A                                   DB BoulderVertSize
   6++E661 0F                                   DB BoulderEdgesCnt
   7++E662 00 01                                DB $00, $01
   8++E664 28                                   DB BoulderNormalsSize
   9++E665 14 14 1E                             DB $14, $14, $1E
  10++E668 D4 E6                                DW BoulderNormals
  11++E66A 02 00                                DB $02, $00
  12++E66C 6E E6                                DW BoulderVertices
  13++E66E 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  13++E672 01 59
  14++E674 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  14++E678 12 56
  15++E67A 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  15++E67E 23 67
  16++E680 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  16++E684 34 78
  17++E686 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  17++E68A 04 89
  18++E68C 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  18++E690 FF FF
  19++E692 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  19++E696 FF FF
  20++E698              BoulderVertSize:        equ $ - BoulderVertices
  21++E698 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  22++E69C 1F 26 04 08                          DB $1F, $26, $04, $08
  23++E6A0 1F 37 08 0C                          DB $1F, $37, $08, $0C
  24++E6A4 1F 48 0C 10                          DB $1F, $48, $0C, $10
  25++E6A8 1F 09 10 00                          DB $1F, $09, $10, $00
  26++E6AC 1F 01 00 14                          DB $1F, $01, $00, $14
  27++E6B0 1F 12 04 14                          DB $1F, $12, $04, $14
  28++E6B4 1F 23 08 14                          DB $1F, $23, $08, $14
  29++E6B8 1F 34 0C 14                          DB $1F, $34, $0C, $14
  30++E6BC 1F 04 10 14                          DB $1F, $04, $10, $14
  31++E6C0 1F 59 00 18                          DB $1F, $59, $00, $18
  32++E6C4 1F 56 04 18                          DB $1F, $56, $04, $18
  33++E6C8 1F 67 08 18                          DB $1F, $67, $08, $18
  34++E6CC 1F 78 0C 18                          DB $1F, $78, $0C, $18
  35++E6D0 1F 89 10 18                          DB $1F, $89, $10, $18
  36++E6D4              BoulderEdgesSize:       equ $ - BoulderEdges
  37++E6D4              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  38++E6D4 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  39++E6D8 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  40++E6DC 5F 20 2F 18                          DB $5F, $20, $2F, $18
  41++E6E0 FF 03 27 07                          DB $FF, $03, $27, $07
  42++E6E4 FF 05 04 01                          DB $FF, $05, $04, $01
  43++E6E8 1F 31 54 08                          DB $1F, $31, $54, $08
  44++E6EC 3F 70 15 15                          DB $3F, $70, $15, $15
  45++E6F0 7F 4C 23 52                          DB $7F, $4C, $23, $52
  46++E6F4 3F 16 38 89                          DB $3F, $16, $38, $89
  47++E6F8 3F 28 6E 26                          DB $3F, $28, $6E, $26
  48++E6FC              BoulderNormalsSize:     equ $ - BoulderNormals
  49++E6FC              BoulderLen:             equ $ - Boulder
  50++E6FC
# file closed: ./Data/Ships/Boulder.asm
 448+ E6FC                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E6FC 00 10 9A     Bushmaster:	DB $00, $10, $9A
   2++E6FF 5A E7        	DW BushmasterEdges
   3++E701 4C           	DB BushmasterEdgesSize
   4++E702 00 1E        	DB $00, $1E
   5++E704 48           	DB BushmasterVertSize
   6++E705 13           	DB BushmasterEdgesCnt
   7++E706 00 96        	DB $00, $96
   8++E708 24           	DB BushmasterNormalsSize
   9++E709 14 4A 23     	DB $14, $4A, $23
  10++E70C A6 E7        	DW BushmasterNormals
  11++E70E 02 21        	DB $02, $21
  12++E710 12 E7        	DW BushmasterVertices
  13++E712
  14++E712 00 00 3C 1F  BushmasterVertices:	DB $00, $00, $3C, $1F, $23, $01
  14++E716 23 01
  15++E718 32 00 14 1F  	DB $32, $00, $14, $1F, $57, $13
  15++E71C 57 13
  16++E71E 32 00 14 9F  	DB $32, $00, $14, $9F, $46, $02
  16++E722 46 02
  17++E724 00 14 00 1F  	DB $00, $14, $00, $1F, $45, $01
  17++E728 45 01
  18++E72A 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  18++E72E FF FF
  19++E730 00 0E 28 3F  	DB $00, $0E, $28, $3F, $88, $45
  19++E734 88 45
  20++E736 28 00 28 3F  	DB $28, $00, $28, $3F, $88, $57
  20++E73A 88 57
  21++E73C 28 00 28 BF  	DB $28, $00, $28, $BF, $88, $46
  21++E740 88 46
  22++E742 00 04 28 2A  	DB $00, $04, $28, $2A, $88, $88
  22++E746 88 88
  23++E748 0A 00 28 2A  	DB $0A, $00, $28, $2A, $88, $88
  23++E74C 88 88
  24++E74E 00 04 28 6A  	DB $00, $04, $28, $6A, $88, $88
  24++E752 88 88
  25++E754 0A 00 28 AA  	DB $0A, $00, $28, $AA, $88, $88
  25++E758 88 88
  26++E75A              BushmasterVertSize: equ $ - BushmasterVertices
  27++E75A
  28++E75A 1F 13 00 04  BushmasterEdges:	DB $1F, $13, $00, $04
  29++E75E 1F 02 00 08  	DB $1F, $02, $00, $08
  30++E762 1F 01 00 0C  	DB $1F, $01, $00, $0C
  31++E766 1F 23 00 10  	DB $1F, $23, $00, $10
  32++E76A 1F 45 0C 14  	DB $1F, $45, $0C, $14
  33++E76E 1F 04 08 0C  	DB $1F, $04, $08, $0C
  34++E772 1F 15 04 0C  	DB $1F, $15, $04, $0C
  35++E776 1F 46 08 1C  	DB $1F, $46, $08, $1C
  36++E77A 1F 57 04 18  	DB $1F, $57, $04, $18
  37++E77E 1F 26 08 10  	DB $1F, $26, $08, $10
  38++E782 1F 37 04 10  	DB $1F, $37, $04, $10
  39++E786 1F 48 14 1C  	DB $1F, $48, $14, $1C
  40++E78A 1F 58 14 18  	DB $1F, $58, $14, $18
  41++E78E 1F 68 10 1C  	DB $1F, $68, $10, $1C
  42++E792 1F 78 10 18  	DB $1F, $78, $10, $18
  43++E796 0A 88 20 24  	DB $0A, $88, $20, $24
  44++E79A 0A 88 24 28  	DB $0A, $88, $24, $28
  45++E79E 0A 88 28 2C  	DB $0A, $88, $28, $2C
  46++E7A2 0A 88 2C 20  	DB $0A, $88, $2C, $20
  47++E7A6
  48++E7A6              BushmasterEdgesSize: equ $ - BushmasterEdges
  49++E7A6
  50++E7A6
  51++E7A6              BushmasterEdgesCnt: equ BushmasterEdgesSize/4
  52++E7A6
  53++E7A6
  54++E7A6 9F 17 58 1D  BushmasterNormals:	DB $9F, $17, $58, $1D
  55++E7AA 1F 17 58 1D  	DB $1F, $17, $58, $1D
  56++E7AE DF 0E 5D 12  	DB $DF, $0E, $5D, $12
  57++E7B2 5F 0E 5D 12  	DB $5F, $0E, $5D, $12
  58++E7B6 BF 1F 59 0D  	DB $BF, $1F, $59, $0D
  59++E7BA 3F 1F 59 0D  	DB $3F, $1F, $59, $0D
  60++E7BE FF 2A 55 07  	DB $FF, $2A, $55, $07
  61++E7C2 7F 2A 55 07  	DB $7F, $2A, $55, $07
  62++E7C6 3F 00 00 60  	DB $3F, $00, $00, $60
  63++E7CA
  64++E7CA
  65++E7CA              BushmasterNormalsSize: equ $ - BushmasterNormals
  66++E7CA              BushmasterLen: equ $ - Bushmaster
  67++E7CA
# file closed: ./Data/Ships/Bushmaster.asm
 449+ E7CA                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E7CA              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E7CA              ; Corrected pointers
   3++E7CA              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E7CA              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E7CA              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E7CA              ;;;				 Example of cargo
   7++E7CA              ;;;
   8++E7CA              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E7CA              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E7CA              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E7CA              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E7CA              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E7CA              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E7CA              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E7CA              ;;;		Edges
  16++E7CA              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E7CA              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E7CA              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E7CA              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E7CA              ;;;	  	Normals (Faces)
  21++E7CA              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E7CA              ;;;		Byte 1 = X Lo
  23++E7CA              ;;;		Byte 2 = Y Lo
  24++E7CA              ;;;		Byte 3 = Z Lo
  25++E7CA
  26++E7CA 00 90 01     CargoType5              DB $00, $90, $01
  27++E7CD 1C E8                                DW CargoType5Edges
  28++E7CF 3C                                   DB CargoType5EdgesSize
  29++E7D0 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E7D4 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E7D8 11 0F
  31++E7DA 58 E8                                DW CargoType5Normals
  32++E7DC 02 00                                DB $02,$00
  33++E7DE E0 E7                                DW CargoType5Vertices
  34++E7E0              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  35++E7E0 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  35++E7E4 10 55
  36++E7E6 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  36++E7EA 10 22
  37++E7EC 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  37++E7F0 20 33
  38++E7F2 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  38++E7F6 30 44
  39++E7F8 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  39++E7FC 40 55
  40++E7FE 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  40++E802 51 66
  41++E804 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  41++E808 21 66
  42++E80A 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  42++E80E 32 66
  43++E810 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  43++E814 43 66
  44++E816 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  44++E81A 54 66
  45++E81C              CargoType5VertSize      equ $  - CargoType5Vertices
  46++E81C 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  46++E820 1F 20 04 08
  47++E824 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  47++E828 1F 40 0C 10
  48++E82C 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  48++E830 1F 51 00 14
  49++E834 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  49++E838 1F 32 08 1C
  50++E83C 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  50++E840 1F 54 10 24
  51++E844 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  51++E848 1F 62 18 1C
  52++E84C 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  52++E850 1F 64 20 24
  53++E854 1F 65 24 14                          DB $1F,$65,$24,$14
  54++E858              CargoType5EdgesSize     equ $  - CargoType5Edges
  55++E858              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  56++E858 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  57++E85C 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  57++E860 5F 00 12 30
  58++E864 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  58++E868 7F 00 12 30
  59++E86C 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  59++E870 9F 60 00 00
  60++E874              CargoType5NormalsSize   equ $  - CargoType5Normals
  61++E874              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
 450+ E874                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E874 03 0F A0     Chameleon:	DB $03, $0F, $A0
   2++E877 F6 E8        	DW ChameleonEdges
   3++E879 74           	DB ChameleonEdgesSize
   4++E87A 00 1A        	DB $00, $1A
   5++E87C 6C           	DB ChameleonVertSize
   6++E87D 1D           	DB ChameleonEdgesCnt
   7++E87E 00 C8        	DB $00, $C8
   8++E880 34           	DB ChameleonNormalsSize
   9++E881 0A 64 1D     	DB $0A, $64, $1D
  10++E884 6A E9        	DW ChameleonNormals
  11++E886 01 23        	DB $01, $23
  12++E888 8A E8        	DW ChameleonVertices
  13++E88A
  14++E88A
  15++E88A 12 00 6E 9F  ChameleonVertices:	DB $12, $00, $6E, $9F, $25, $01
  15++E88E 25 01
  16++E890 12 00 6E 1F  	DB $12, $00, $6E, $1F, $34, $01
  16++E894 34 01
  17++E896 28 00 00 9F  	DB $28, $00, $00, $9F, $8B, $25
  17++E89A 8B 25
  18++E89C 08 18 00 9F  	DB $08, $18, $00, $9F, $68, $22
  18++E8A0 68 22
  19++E8A2 08 18 00 1F  	DB $08, $18, $00, $1F, $69, $33
  19++E8A6 69 33
  20++E8A8 28 00 00 1F  	DB $28, $00, $00, $1F, $9A, $34
  20++E8AC 9A 34
  21++E8AE 08 18 00 5F  	DB $08, $18, $00, $5F, $7A, $44
  21++E8B2 7A 44
  22++E8B4 08 18 00 DF  	DB $08, $18, $00, $DF, $7B, $55
  22++E8B8 7B 55
  23++E8BA 00 18 28 1F  	DB $00, $18, $28, $1F, $36, $02
  23++E8BE 36 02
  24++E8C0 00 18 28 5F  	DB $00, $18, $28, $5F, $57, $14
  24++E8C4 57 14
  25++E8C6 20 00 28 BF  	DB $20, $00, $28, $BF, $BC, $88
  25++E8CA BC 88
  26++E8CC 00 18 28 3F  	DB $00, $18, $28, $3F, $9C, $68
  26++E8D0 9C 68
  27++E8D2 20 00 28 3F  	DB $20, $00, $28, $3F, $AC, $99
  27++E8D6 AC 99
  28++E8D8 00 18 28 7F  	DB $00, $18, $28, $7F, $BC, $7A
  28++E8DC BC 7A
  29++E8DE 08 00 28 AA  	DB $08, $00, $28, $AA, $CC, $CC
  29++E8E2 CC CC
  30++E8E4 00 08 28 2A  	DB $00, $08, $28, $2A, $CC, $CC
  30++E8E8 CC CC
  31++E8EA 08 00 28 2A  	DB $08, $00, $28, $2A, $CC, $CC
  31++E8EE CC CC
  32++E8F0 00 08 28 6A  	DB $00, $08, $28, $6A, $CC, $CC
  32++E8F4 CC CC
  33++E8F6
  34++E8F6              ChameleonVertSize: equ $ - ChameleonVertices
  35++E8F6
  36++E8F6
  37++E8F6
  38++E8F6 1F 01 00 04  ChameleonEdges:	DB $1F, $01, $00, $04
  39++E8FA 1F 02 00 20  	DB $1F, $02, $00, $20
  40++E8FE 1F 15 00 24  	DB $1F, $15, $00, $24
  41++E902 1F 03 04 20  	DB $1F, $03, $04, $20
  42++E906 1F 14 04 24  	DB $1F, $14, $04, $24
  43++E90A 1F 34 04 14  	DB $1F, $34, $04, $14
  44++E90E 1F 25 00 08  	DB $1F, $25, $00, $08
  45++E912 1F 26 0C 20  	DB $1F, $26, $0C, $20
  46++E916 1F 36 10 20  	DB $1F, $36, $10, $20
  47++E91A 1F 75 1C 24  	DB $1F, $75, $1C, $24
  48++E91E 1F 74 18 24  	DB $1F, $74, $18, $24
  49++E922 1F 39 10 14  	DB $1F, $39, $10, $14
  50++E926 1F 4A 14 18  	DB $1F, $4A, $14, $18
  51++E92A 1F 28 08 0C  	DB $1F, $28, $08, $0C
  52++E92E 1F 5B 08 1C  	DB $1F, $5B, $08, $1C
  53++E932 1F 8B 08 28  	DB $1F, $8B, $08, $28
  54++E936 1F 9A 14 30  	DB $1F, $9A, $14, $30
  55++E93A 1F 68 0C 2C  	DB $1F, $68, $0C, $2C
  56++E93E 1F 7B 1C 34  	DB $1F, $7B, $1C, $34
  57++E942 1F 69 10 2C  	DB $1F, $69, $10, $2C
  58++E946 1F 7A 18 34  	DB $1F, $7A, $18, $34
  59++E94A 1F 8C 28 2C  	DB $1F, $8C, $28, $2C
  60++E94E 1F BC 28 34  	DB $1F, $BC, $28, $34
  61++E952 1F 9C 2C 30  	DB $1F, $9C, $2C, $30
  62++E956 1F AC 30 34  	DB $1F, $AC, $30, $34
  63++E95A 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E95E 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E962 0A CC 40 44  	DB $0A, $CC, $40, $44
  66++E966 0A CC 44 38  	DB $0A, $CC, $44, $38
  67++E96A
  68++E96A              ChameleonEdgesSize: equ $ - ChameleonEdges
  69++E96A
  70++E96A
  71++E96A              ChameleonEdgesCnt: equ ChameleonEdgesSize/4
  72++E96A
  73++E96A
  74++E96A 1F 00 5A 1F  ChameleonNormals:	DB $1F, $00, $5A, $1F
  75++E96E 5F 00 5A 1F  	DB $5F, $00, $5A, $1F
  76++E972 9F 39 4C 0B  	DB $9F, $39, $4C, $0B
  77++E976 1F 39 4C 0B  	DB $1F, $39, $4C, $0B
  78++E97A 5F 39 4C 0B  	DB $5F, $39, $4C, $0B
  79++E97E DF 39 4C 0B  	DB $DF, $39, $4C, $0B
  80++E982 1F 00 60 00  	DB $1F, $00, $60, $00
  81++E986 5F 00 60 00  	DB $5F, $00, $60, $00
  82++E98A BF 39 4C 0B  	DB $BF, $39, $4C, $0B
  83++E98E 3F 39 4C 0B  	DB $3F, $39, $4C, $0B
  84++E992 7F 39 4C 0B  	DB $7F, $39, $4C, $0B
  85++E996 FF 39 4C 0B  	DB $FF, $39, $4C, $0B
  86++E99A 3F 00 00 60  	DB $3F, $00, $00, $60
  87++E99E
  88++E99E              ChameleonNormalsSize: equ $ - ChameleonNormals
  89++E99E              ChameleonLen: equ $ - Chameleon
  90++E99E
# file closed: ./Data/Ships/Chameleon.asm
 451+ E99E                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E99E              ; Corrected pointers
   2++E99E              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E99E              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E99E              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E99E 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9A1 5C EA                                DW CobraMk3Edges
   7++E9A3 98                                   DB CobraMkEdgesSize
   8++E9A4 54 2A                                DB $54,$2A
   9++E9A6 A8                                   DB CobraMkVertSize
  10++E9A7 26                                   DB CobraMkEdgesCnt
  11++E9A8 00 00                                DB $00,$00
  12++E9AA 34                                   DB CobraMk3NormalsSize
  13++E9AB 32 96 1C                             DB $32,$96,$1C
  14++E9AE F4 EA                                DW CobraMk3Normals
  15++E9B0 01 13                                DB $01,$13
  16++E9B2 B4 E9                                DW CobraMk3Vertices
  17++E9B4                                  ; missiles = 3
  18++E9B4 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  18++E9B8 FF FF
  19++E9BA 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  19++E9BE FF FF
  20++E9C0 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  20++E9C4 FF FF
  21++E9C6 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  21++E9CA 73 AA
  22++E9CC 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  22++E9D0 84 CC
  23++E9D2 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  23++E9D6 FF FF
  24++E9D8 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  24++E9DC FF FF
  25++E9DE 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  25++E9E2 98 CC
  26++E9E4 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  26++E9E8 97 AA
  27++E9EA 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  27++E9EE 65 99
  28++E9F0 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  28++E9F4 A9 BB
  29++E9F6 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  29++E9FA B9 CC
  30++E9FC 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  30++EA00 99 99
  31++EA02 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  31++EA06 99 99
  32++EA08 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  32++EA0C 99 99
  33++EA0E 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  33++EA12 99 99
  34++EA14 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  34++EA18 99 99
  35++EA1A 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  35++EA1E 99 99
  36++EA20 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  36++EA24 99 99
  37++EA26 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  37++EA2A 99 99
  38++EA2C 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  38++EA30 B0 BB
  39++EA32 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  39++EA36 B0 BB
  40++EA38 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  40++EA3C 99 99
  41++EA3E 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  41++EA42 99 99
  42++EA44 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  42++EA48 99 99
  43++EA4A 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  43++EA4E 99 99
  44++EA50 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  44++EA54 99 99
  45++EA56 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  45++EA5A 99 99
  46++EA5C              CobraMkVertSize         equ $  - CobraMk3Vertices
  47++EA5C 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  47++EA60 1F C4 00 10
  48++EA64 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  48++EA68 1F A7 0C 20
  49++EA6C 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  49++EA70 1F 98 18 1C
  50++EA74 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  50++EA78 1F 95 14 24
  51++EA7C 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  51++EA80 1F 51 08 14
  52++EA84 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  52++EA88 1F 73 0C 14
  53++EA8C 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  53++EA90 1F 10 04 08
  54++EA94 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  54++EA98 1F A9 20 28
  55++EA9C 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  55++EAA0 1F C9 1C 2C
  56++EAA4 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  56++EAA8 1F CB 00 2C
  57++EAAC 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  57++EAB0 1D 42 00 18
  58++EAB4 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  58++EAB8 14 99 30 34
  59++EABC 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  59++EAC0 14 99 38 3C
  60++EAC4 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  60++EAC8 13 99 3C 40
  61++EACC 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  61++EAD0 13 99 34 48
  62++EAD4 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  62++EAD8 1E 65 08 24
  63++EADC 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  63++EAE0 06 99 5C 60
  64++EAE4 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  64++EAE8 06 99 64 68
  65++EAEC 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  65++EAF0 08 99 64 6C
  66++EAF4              CobraMkEdgesSize        equ $  - CobraMk3Edges
  67++EAF4              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  68++EAF4              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  69++EAF4 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  70++EAF8 9F 12 37 10                          DB $9F,$12,$37,$10
  71++EAFC 1F 12 37 10                          DB $1F,$12,$37,$10
  72++EB00 9F 10 34 0E                          DB $9F,$10,$34,$0E
  73++EB04 1F 10 34 0E                          DB $1F,$10,$34,$0E
  74++EB08 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  75++EB0C 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  76++EB10 9F 3D 66 00                          DB $9F,$3D,$66,$00
  77++EB14 1F 3D 66 00                          DB $1F,$3D,$66,$00
  78++EB18 3F 00 00 50                          DB $3F,$00,$00,$50
  79++EB1C DF 07 2A 09                          DB $DF,$07,$2A,$09
  80++EB20 5F 00 1E 06                          DB $5F,$00,$1E,$06
  81++EB24 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  82++EB28              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  83++EB28              CobraMk3Len             equ $  - CobraMk3
  84++EB28
# file closed: ./Data/Ships/CobraMk3.asm
 452+ EB28                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB28 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB2B 80 EB                                DW Cobra_Mk_1Edges
   3++EB2D 48                                   DB Cobra_Mk_1EdgesSize
   4++EB2E 28 1A                                DB $28, $1A
   5++EB30 42                                   DB Cobra_Mk_1VertSize
   6++EB31 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB32 00 4B                                DB $00, $4B
   8++EB34 28                                   DB Cobra_Mk_1NormalsSize
   9++EB35 13 51 1A                             DB $13, $51, $1A
  10++EB38 C8 EB                                DW Cobra_Mk_1Normals
  11++EB3A 02 22                                DB $02, $22
  12++EB3C 3E EB                                DW Cobra_Mk_1Vertices
  13++EB3E
  14++EB3E 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB42 01 23
  15++EB44 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB48 01 45
  16++EB4A 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB4E 23 88
  17++EB50 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB54 45 99
  18++EB56 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB5A 26 78
  19++EB5C 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB60 46 79
  20++EB62 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB66 13 78
  21++EB68 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB6C 15 79
  22++EB6E 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB72 02 46
  23++EB74 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB78 01 11
  24++EB7A 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EB7E 01 11
  25++EB80
  26++EB80              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  27++EB80 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  28++EB84 1F 23 00 08                          DB $1F, $23, $00, $08
  29++EB88 1F 38 08 18                          DB $1F, $38, $08, $18
  30++EB8C 1F 17 18 1C                          DB $1F, $17, $18, $1C
  31++EB90 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  32++EB94 1F 45 0C 04                          DB $1F, $45, $0C, $04
  33++EB98 1F 28 08 10                          DB $1F, $28, $08, $10
  34++EB9C 1F 67 10 14                          DB $1F, $67, $10, $14
  35++EBA0 1F 49 14 0C                          DB $1F, $49, $14, $0C
  36++EBA4 14 02 00 20                          DB $14, $02, $00, $20
  37++EBA8 14 04 20 04                          DB $14, $04, $20, $04
  38++EBAC 10 26 10 20                          DB $10, $26, $10, $20
  39++EBB0 10 46 20 14                          DB $10, $46, $20, $14
  40++EBB4 1F 78 10 18                          DB $1F, $78, $10, $18
  41++EBB8 1F 79 14 1C                          DB $1F, $79, $14, $1C
  42++EBBC 14 13 00 18                          DB $14, $13, $00, $18
  43++EBC0 14 15 04 1C                          DB $14, $15, $04, $1C
  44++EBC4 02 01 28 24                          DB $02, $01, $28, $24
  45++EBC8
  46++EBC8              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  47++EBC8              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  48++EBC8 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  49++EBCC 5F 00 1B 03                          DB $5F, $00, $1B, $03
  50++EBD0 9F 08 2E 08                          DB $9F, $08, $2E, $08
  51++EBD4 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  52++EBD8 1F 08 2E 08                          DB $1F, $08, $2E, $08
  53++EBDC 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  54++EBE0 1F 00 31 00                          DB $1F, $00, $31, $00
  55++EBE4 3F 00 00 9A                          DB $3F, $00, $00, $9A
  56++EBE8 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  57++EBEC 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  58++EBF0
  59++EBF0              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  60++EBF0              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  61++EBF0
# file closed: ./Data/Ships/Cobra_Mk_1.asm
 453+ EBF0                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EBF0 01 23 41     Cobra_Mk_3_P:	DB $01, $23, $41
   2++EBF3 AE EC        	DW Cobra_Mk_3_PEdges
   3++EBF5 98           	DB Cobra_Mk_3_PEdgesSize
   4++EBF6 54 2A        	DB $54, $2A
   5++EBF8 A8           	DB Cobra_Mk_3_PVertSize
   6++EBF9 26           	DB Cobra_Mk_3_PEdgesCnt
   7++EBFA 00 AF        	DB $00, $AF
   8++EBFC 34           	DB Cobra_Mk_3_PNormalsSize
   9++EBFD 32 96 1C     	DB $32, $96, $1C
  10++EC00 46 ED        	DW Cobra_Mk_3_PNormals
  11++EC02 01 12        	DB $01, $12
  12++EC04 06 EC        	DW Cobra_Mk_3_PVertices
  13++EC06
  14++EC06 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC0A FF FF
  15++EC0C 20 00 4C 9F  	DB $20, $00, $4C, $9F, $FF, $FF
  15++EC10 FF FF
  16++EC12 00 1A 18 1F  	DB $00, $1A, $18, $1F, $FF, $FF
  16++EC16 FF FF
  17++EC18 78 03 08 FF  	DB $78, $03, $08, $FF, $73, $AA
  17++EC1C 73 AA
  18++EC1E 78 03 08 7F  	DB $78, $03, $08, $7F, $84, $CC
  18++EC22 84 CC
  19++EC24 58 10 28 BF  	DB $58, $10, $28, $BF, $FF, $FF
  19++EC28 FF FF
  20++EC2A 58 10 28 3F  	DB $58, $10, $28, $3F, $FF, $FF
  20++EC2E FF FF
  21++EC30 80 08 28 7F  	DB $80, $08, $28, $7F, $98, $CC
  21++EC34 98 CC
  22++EC36 80 08 28 FF  	DB $80, $08, $28, $FF, $97, $AA
  22++EC3A 97 AA
  23++EC3C 00 1A 28 3F  	DB $00, $1A, $28, $3F, $65, $99
  23++EC40 65 99
  24++EC42 20 18 28 FF  	DB $20, $18, $28, $FF, $A9, $BB
  24++EC46 A9 BB
  25++EC48 20 18 28 7F  	DB $20, $18, $28, $7F, $B9, $CC
  25++EC4C B9 CC
  26++EC4E 24 08 28 B4  	DB $24, $08, $28, $B4, $99, $99
  26++EC52 99 99
  27++EC54 08 0C 28 B4  	DB $08, $0C, $28, $B4, $99, $99
  27++EC58 99 99
  28++EC5A 08 0C 28 34  	DB $08, $0C, $28, $34, $99, $99
  28++EC5E 99 99
  29++EC60 24 08 28 34  	DB $24, $08, $28, $34, $99, $99
  29++EC64 99 99
  30++EC66 24 0C 28 74  	DB $24, $0C, $28, $74, $99, $99
  30++EC6A 99 99
  31++EC6C 08 10 28 74  	DB $08, $10, $28, $74, $99, $99
  31++EC70 99 99
  32++EC72 08 10 28 F4  	DB $08, $10, $28, $F4, $99, $99
  32++EC76 99 99
  33++EC78 24 0C 28 F4  	DB $24, $0C, $28, $F4, $99, $99
  33++EC7C 99 99
  34++EC7E 00 00 4C 06  	DB $00, $00, $4C, $06, $B0, $BB
  34++EC82 B0 BB
  35++EC84 00 00 5A 1F  	DB $00, $00, $5A, $1F, $B0, $BB
  35++EC88 B0 BB
  36++EC8A 50 06 28 E8  	DB $50, $06, $28, $E8, $99, $99
  36++EC8E 99 99
  37++EC90 50 06 28 A8  	DB $50, $06, $28, $A8, $99, $99
  37++EC94 99 99
  38++EC96 58 00 28 A6  	DB $58, $00, $28, $A6, $99, $99
  38++EC9A 99 99
  39++EC9C 50 06 28 28  	DB $50, $06, $28, $28, $99, $99
  39++ECA0 99 99
  40++ECA2 58 00 28 26  	DB $58, $00, $28, $26, $99, $99
  40++ECA6 99 99
  41++ECA8 50 06 28 68  	DB $50, $06, $28, $68, $99, $99
  41++ECAC 99 99
  42++ECAE
  43++ECAE              Cobra_Mk_3_PVertSize: equ $ - Cobra_Mk_3_PVertices
  44++ECAE
  45++ECAE
  46++ECAE 1F B0 00 04  Cobra_Mk_3_PEdges:	DB $1F, $B0, $00, $04
  47++ECB2 1F C4 00 10  	DB $1F, $C4, $00, $10
  48++ECB6 1F A3 04 0C  	DB $1F, $A3, $04, $0C
  49++ECBA 1F A7 0C 20  	DB $1F, $A7, $0C, $20
  50++ECBE 1F C8 10 1C  	DB $1F, $C8, $10, $1C
  51++ECC2 1F 98 18 1C  	DB $1F, $98, $18, $1C
  52++ECC6 1F 96 18 24  	DB $1F, $96, $18, $24
  53++ECCA 1F 95 14 24  	DB $1F, $95, $14, $24
  54++ECCE 1F 97 14 20  	DB $1F, $97, $14, $20
  55++ECD2 1F 51 08 14  	DB $1F, $51, $08, $14
  56++ECD6 1F 62 08 18  	DB $1F, $62, $08, $18
  57++ECDA 1F 73 0C 14  	DB $1F, $73, $0C, $14
  58++ECDE 1F 84 10 18  	DB $1F, $84, $10, $18
  59++ECE2 1F 10 04 08  	DB $1F, $10, $04, $08
  60++ECE6 1F 20 00 08  	DB $1F, $20, $00, $08
  61++ECEA 1F A9 20 28  	DB $1F, $A9, $20, $28
  62++ECEE 1F B9 28 2C  	DB $1F, $B9, $28, $2C
  63++ECF2 1F C9 1C 2C  	DB $1F, $C9, $1C, $2C
  64++ECF6 1F BA 04 28  	DB $1F, $BA, $04, $28
  65++ECFA 1F CB 00 2C  	DB $1F, $CB, $00, $2C
  66++ECFE 1D 31 04 14  	DB $1D, $31, $04, $14
  67++ED02 1D 42 00 18  	DB $1D, $42, $00, $18
  68++ED06 06 B0 50 54  	DB $06, $B0, $50, $54
  69++ED0A 14 99 30 34  	DB $14, $99, $30, $34
  70++ED0E 14 99 48 4C  	DB $14, $99, $48, $4C
  71++ED12 14 99 38 3C  	DB $14, $99, $38, $3C
  72++ED16 14 99 40 44  	DB $14, $99, $40, $44
  73++ED1A 13 99 3C 40  	DB $13, $99, $3C, $40
  74++ED1E 11 99 38 44  	DB $11, $99, $38, $44
  75++ED22 13 99 34 48  	DB $13, $99, $34, $48
  76++ED26 13 99 30 4C  	DB $13, $99, $30, $4C
  77++ED2A 1E 65 08 24  	DB $1E, $65, $08, $24
  78++ED2E 06 99 58 60  	DB $06, $99, $58, $60
  79++ED32 06 99 5C 60  	DB $06, $99, $5C, $60
  80++ED36 08 99 58 5C  	DB $08, $99, $58, $5C
  81++ED3A 06 99 64 68  	DB $06, $99, $64, $68
  82++ED3E 06 99 68 6C  	DB $06, $99, $68, $6C
  83++ED42 08 99 64 6C  	DB $08, $99, $64, $6C
  84++ED46
  85++ED46              Cobra_Mk_3_PEdgesSize: equ $ - Cobra_Mk_3_PEdges
  86++ED46
  87++ED46
  88++ED46              Cobra_Mk_3_PEdgesCnt: equ Cobra_Mk_3_PEdgesSize/4
  89++ED46
  90++ED46
  91++ED46 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  92++ED4A 9F 12 37 10  	DB $9F, $12, $37, $10
  93++ED4E 1F 12 37 10  	DB $1F, $12, $37, $10
  94++ED52 9F 10 34 0E  	DB $9F, $10, $34, $0E
  95++ED56 1F 10 34 0E  	DB $1F, $10, $34, $0E
  96++ED5A 9F 0E 2F 00  	DB $9F, $0E, $2F, $00
  97++ED5E 1F 0E 2F 00  	DB $1F, $0E, $2F, $00
  98++ED62 9F 3D 66 00  	DB $9F, $3D, $66, $00
  99++ED66 1F 3D 66 00  	DB $1F, $3D, $66, $00
 100++ED6A 3F 00 00 50  	DB $3F, $00, $00, $50
 101++ED6E DF 07 2A 09  	DB $DF, $07, $2A, $09
 102++ED72 5F 00 1E 06  	DB $5F, $00, $1E, $06
 103++ED76 5F 07 2A 09  	DB $5F, $07, $2A, $09
 104++ED7A
 105++ED7A              Cobra_Mk_3_PNormalsSize: equ $ - Cobra_Mk_3_PNormals
 106++ED7A              Cobra_Mk_3_PLen: equ $ - Cobra_Mk_3_P
 107++ED7A
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
 454+ ED7A                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++ED7A              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++ED7A              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++ED7A              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++ED7A F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++ED7D F6 ED                                DW ConstrictorEdges
   6++ED7F 60                                   DB ConstrictorEdgesSize
   7++ED80 00 2E                                DB $00,$2E
   8++ED82 66                                   DB ConstrictorVertSize
   9++ED83 18                                   DB ConstrictorEdgesCnt
  10++ED84 18 00                                DB $18,$00
  11++ED86 28                                   DB ConstrictorNormalsSize
  12++ED87 2D C8 37                             DB $2D,$C8,$37
  13++ED8A 56 EE                                DW ConstrictorNormals
  14++ED8C 02 2F                                DB $02,$2F
  15++ED8E 90 ED                                DW ConstrictorVertices
  16++ED90                                  ; missiles = 3
  17++ED90 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  17++ED94 02 99
  18++ED96 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  18++ED9A 01 99
  19++ED9C 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  19++EDA0 14 99
  20++EDA2 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  20++EDA6 45 89
  21++EDA8 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  21++EDAC 56 88
  22++EDAE 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  22++EDB2 67 88
  23++EDB4 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  23++EDB8 37 89
  24++EDBA 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  24++EDBE 23 99
  25++EDC0 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  25++EDC4 FF FF
  26++EDC6 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  26++EDCA FF FF
  27++EDCC 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  27++EDD0 99 99
  28++EDD2 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  28++EDD6 99 99
  29++EDD8 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  29++EDDC 99 99
  30++EDDE 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  30++EDE2 99 99
  31++EDE4 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  31++EDE8 99 99
  32++EDEA 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  32++EDEE 99 99
  33++EDF0 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  33++EDF4 9F 01
  34++EDF6              ConstrictorVertSize     equ $  - ConstrictorVertices
  35++EDF6 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  35++EDFA 1F 19 04 08
  36++EDFE 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  36++EE02 1F 02 00 20
  37++EE06 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  37++EE0A 1F 23 1C 20
  38++EE0E 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  38++EE12 1F 49 08 0C
  39++EE16 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  39++EE1A 1F 37 18 20
  40++EE1E 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  40++EE22 1F 56 10 24
  41++EE26 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  41++EE2A 1F 58 0C 10
  42++EE2E 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  42++EE32 1F 78 14 18
  43++EE36 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  43++EE3A 1F 06 20 24
  44++EE3E 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  44++EE42 05 99 30 38
  45++EE46 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  45++EE4A 0A 99 2C 3C
  46++EE4E 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  46++EE52 12 99 2C 34
  47++EE56              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  48++EE56              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  49++EE56 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  49++EE5A 9F 18 4B 14
  50++EE5E 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  50++EE62 1F 2C 4B 00
  51++EE66 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  51++EE6A 9F 2C 4B 00
  52++EE6E 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  52++EE72 1F 2C 4B 00
  53++EE76 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  53++EE7A 5F 00 1B 00
  54++EE7E              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  55++EE7E              ConstrictorLen          equ $  - Constrictor
  56++EE7E
# file closed: ./Data/Ships/Constrictor.asm
 455+ EE7E                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EE7E 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EE81 F4 EE                                DW CoriolisEdges
   3++EE83 70                                   DB CoriolisEdgesSize
   4++EE84 00 36                                DB $00, $36
   5++EE86 60                                   DB CoriolisVertSize
   6++EE87 1C                                   DB CoriolisEdgesCnt
   7++EE88 00 00                                DB $00, $00
   8++EE8A 38                                   DB CoriolisNormalsSize
   9++EE8B 78 F0 00                             DB $78, $F0, $00
  10++EE8E 64 EF                                DW CoriolisNormals
  11++EE90 00 06                                DB $00, $06
  12++EE92 94 EE                                DW CoriolisVertices
  13++EE94 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  13++EE98 10 62
  14++EE9A 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  14++EE9E 20 83
  15++EEA0 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  15++EEA4 30 74
  16++EEA6 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  16++EEAA 10 54
  17++EEAC A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  17++EEB0 51 A6
  18++EEB2 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  18++EEB6 62 B8
  19++EEB8 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  19++EEBC 73 C8
  20++EEBE A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  20++EEC2 54 97
  21++EEC4 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  21++EEC8 A6 DB
  22++EECA 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  22++EECE B8 DC
  23++EED0 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  23++EED4 97 DC
  24++EED6 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  24++EEDA 95 DA
  25++EEDC 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  25++EEE0 00 00
  26++EEE2 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  26++EEE6 00 00
  27++EEE8 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  27++EEEC 00 00
  28++EEEE 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  28++EEF2 00 00
  29++EEF4              CoriolisVertSize:       equ $ - CoriolisVertices
  30++EEF4 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  31++EEF8 1F 20 00 04                          DB $1F, $20, $00, $04
  32++EEFC 1F 30 04 08                          DB $1F, $30, $04, $08
  33++EF00 1F 40 08 0C                          DB $1F, $40, $08, $0C
  34++EF04 1F 51 0C 10                          DB $1F, $51, $0C, $10
  35++EF08 1F 61 00 10                          DB $1F, $61, $00, $10
  36++EF0C 1F 62 00 14                          DB $1F, $62, $00, $14
  37++EF10 1F 82 14 04                          DB $1F, $82, $14, $04
  38++EF14 1F 83 04 18                          DB $1F, $83, $04, $18
  39++EF18 1F 73 08 18                          DB $1F, $73, $08, $18
  40++EF1C 1F 74 08 1C                          DB $1F, $74, $08, $1C
  41++EF20 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  42++EF24 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  43++EF28 1F DB 20 24                          DB $1F, $DB, $20, $24
  44++EF2C 1F DC 24 28                          DB $1F, $DC, $24, $28
  45++EF30 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  46++EF34 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  47++EF38 1F A6 10 20                          DB $1F, $A6, $10, $20
  48++EF3C 1F B6 14 20                          DB $1F, $B6, $14, $20
  49++EF40 1F B8 14 24                          DB $1F, $B8, $14, $24
  50++EF44 1F C8 18 24                          DB $1F, $C8, $18, $24
  51++EF48 1F C7 18 28                          DB $1F, $C7, $18, $28
  52++EF4C 1F 97 1C 28                          DB $1F, $97, $1C, $28
  53++EF50 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  54++EF54 1E 00 30 34                          DB $1E, $00, $30, $34
  55++EF58 1E 00 34 38                          DB $1E, $00, $34, $38
  56++EF5C 1E 00 38 3C                          DB $1E, $00, $38, $3C
  57++EF60 1E 00 3C 30                          DB $1E, $00, $3C, $30
  58++EF64              CoriolisEdgesSize:      equ $ - CoriolisEdges
  59++EF64              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  60++EF64 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  61++EF68 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  62++EF6C 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  63++EF70 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  64++EF74 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  65++EF78 5F 00 A0 00                          DB $5F, $00, $A0, $00
  66++EF7C 1F A0 00 00                          DB $1F, $A0, $00, $00
  67++EF80 9F A0 00 00                          DB $9F, $A0, $00, $00
  68++EF84 1F 00 A0 00                          DB $1F, $00, $A0, $00
  69++EF88 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  70++EF8C 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  71++EF90 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  72++EF94 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  73++EF98 3F 00 00 A0                          DB $3F, $00, $00, $A0
  74++EF9C              CoriolisNormalsSize:    equ $ - CoriolisNormals
  75++EF9C              CoriolisLen:            equ $ - Coriolis
  76++EF9C
# file closed: ./Data/Ships/Coriolis.asm
 456+ EF9C                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EF9C 03 13 24     Cougar:	                DB $03, $13, $24
   2++EF9F 24 F0                                DW CougarEdges
   3++EFA1 64                                   DB CougarEdgesSize
   4++EFA2 00 2A                                DB $00, $2A
   5++EFA4 72                                   DB CougarVertSize
   6++EFA5 19                                   DB CougarEdgesCnt
   7++EFA6 00 00                                DB $00, $00
   8++EFA8 18                                   DB CougarNormalsSize
   9++EFA9 22 FC 28                             DB $22, $FC, $28
  10++EFAC 88 F0                                DW CougarNormals
  11++EFAE 02 34                                DB $02, $34
  12++EFB0 B2 EF                                DW CougarVertices
  13++EFB2 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  13++EFB6 02 44
  14++EFB8 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  14++EFBC 01 22
  15++EFBE 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  15++EFC2 01 55
  16++EFC4 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  16++EFC8 04 55
  17++EFCA 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  17++EFCE 12 35
  18++EFD0 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  18++EFD4 23 44
  19++EFD6 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  19++EFDA 34 55
  20++EFDC 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  20++EFE0 01 11
  21++EFE2 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  21++EFE6 01 11
  22++EFE8 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  22++EFEC 34 44
  23++EFEE 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  23++EFF2 34 44
  24++EFF4 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  24++EFF8 00 44
  25++EFFA 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  25++EFFE 00 44
  26++F000 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  26++F004 00 00
  27++F006 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  27++F00A 44 44
  28++F00C 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  28++F010 55 55
  29++F012 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  29++F016 55 55
  30++F018 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  30++F01C 55 55
  31++F01E 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  31++F022 55 55
  32++F024              CougarVertSize:         equ $ - CougarVertices
  33++F024 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  34++F028 1F 01 04 1C                          DB $1F, $01, $04, $1C
  35++F02C 1F 01 1C 20                          DB $1F, $01, $1C, $20
  36++F030 1F 01 20 08                          DB $1F, $01, $20, $08
  37++F034 1E 05 08 0C                          DB $1E, $05, $08, $0C
  38++F038 1E 45 0C 18                          DB $1E, $45, $0C, $18
  39++F03C 1E 15 08 10                          DB $1E, $15, $08, $10
  40++F040 1E 35 10 18                          DB $1E, $35, $10, $18
  41++F044 1F 34 18 28                          DB $1F, $34, $18, $28
  42++F048 1F 34 28 24                          DB $1F, $34, $28, $24
  43++F04C 1F 34 24 14                          DB $1F, $34, $24, $14
  44++F050 1F 24 14 00                          DB $1F, $24, $14, $00
  45++F054 1B 04 00 0C                          DB $1B, $04, $00, $0C
  46++F058 1B 12 04 10                          DB $1B, $12, $04, $10
  47++F05C 1B 23 14 10                          DB $1B, $23, $14, $10
  48++F060 1A 01 04 08                          DB $1A, $01, $04, $08
  49++F064 1A 34 14 18                          DB $1A, $34, $14, $18
  50++F068 14 00 30 34                          DB $14, $00, $30, $34
  51++F06C 12 00 34 2C                          DB $12, $00, $34, $2C
  52++F070 12 44 2C 38                          DB $12, $44, $2C, $38
  53++F074 14 44 38 30                          DB $14, $44, $38, $30
  54++F078 12 55 3C 40                          DB $12, $55, $3C, $40
  55++F07C 14 55 40 48                          DB $14, $55, $40, $48
  56++F080 12 55 48 44                          DB $12, $55, $48, $44
  57++F084 14 55 44 3C                          DB $14, $55, $44, $3C
  58++F088              CougarEdgesSize:        equ $ - CougarEdges
  59++F088              CougarEdgesCnt:         equ CougarEdgesSize/4
  60++F088 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  61++F08C DF 10 2E 04                          DB $DF, $10, $2E, $04
  62++F090 5F 00 1B 05                          DB $5F, $00, $1B, $05
  63++F094 5F 10 2E 04                          DB $5F, $10, $2E, $04
  64++F098 1F 10 2E 04                          DB $1F, $10, $2E, $04
  65++F09C 3E 00 00 A0                          DB $3E, $00, $00, $A0
  66++F0A0              CougarNormalsSize:      equ $ - CougarNormals
  67++F0A0              CougarLen:              equ $ - Cougar
  68++F0A0
# file closed: ./Data/Ships/Cougar.asm
 457+ F0A0                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0A0 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0A3 46 F1                                DW DodoEdges
   3++F0A5 88                                   DB DodoEdgesSize
   4++F0A6 00 36                                DB $00, $36
   5++F0A8 90                                   DB DodoVertSize
   6++F0A9 22                                   DB DodoEdgesCnt
   7++F0AA 00 00                                DB $00, $00
   8++F0AC 30                                   DB DodoNormalsSize
   9++F0AD 7D F0 00                             DB $7D, $F0, $00
  10++F0B0 CE F1                                DW DodoNormals
  11++F0B2 00 00                                DB $00, $00
  12++F0B4 B6 F0                                DW DodoVertices
  13++F0B6
  14++F0B6 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0BA 01 55
  15++F0BC 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0C0 01 22
  16++F0C2 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0C6 02 33
  17++F0C8 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0CC 03 44
  18++F0CE 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F0D2 04 55
  19++F0D4 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F0D8 15 66
  20++F0DA E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F0DE 12 77
  21++F0E0 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F0E4 23 88
  22++F0E6 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F0EA 34 99
  23++F0EC E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F0F0 45 AA
  24++F0F2 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F0F6 16 77
  25++F0F8 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F0FC 27 88
  26++F0FE 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F102 38 99
  27++F104 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F108 49 AA
  28++F10A 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F10E 56 AA
  29++F110 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F114 67 BB
  30++F116 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F11A 78 BB
  31++F11C 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F120 89 BB
  32++F122 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F126 9A BB
  33++F128 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F12C 6A BB
  34++F12E 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F132 00 00
  35++F134 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F138 00 00
  36++F13A 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F13E 00 00
  37++F140 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F144 00 00
  38++F146
  39++F146              DodoVertSize:           equ $ - DodoVertices
  40++F146
  41++F146
  42++F146
  43++F146 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  44++F14A 1F 02 04 08                          DB $1F, $02, $04, $08
  45++F14E 1F 03 08 0C                          DB $1F, $03, $08, $0C
  46++F152 1F 04 0C 10                          DB $1F, $04, $0C, $10
  47++F156 1F 05 10 00                          DB $1F, $05, $10, $00
  48++F15A 1F 16 14 28                          DB $1F, $16, $14, $28
  49++F15E 1F 17 28 18                          DB $1F, $17, $28, $18
  50++F162 1F 27 18 2C                          DB $1F, $27, $18, $2C
  51++F166 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  52++F16A 1F 38 1C 30                          DB $1F, $38, $1C, $30
  53++F16E 1F 39 30 20                          DB $1F, $39, $30, $20
  54++F172 1F 49 20 34                          DB $1F, $49, $20, $34
  55++F176 1F 4A 34 24                          DB $1F, $4A, $34, $24
  56++F17A 1F 5A 24 38                          DB $1F, $5A, $24, $38
  57++F17E 1F 56 38 14                          DB $1F, $56, $38, $14
  58++F182 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  59++F186 1F 8B 40 44                          DB $1F, $8B, $40, $44
  60++F18A 1F 9B 44 48                          DB $1F, $9B, $44, $48
  61++F18E 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  62++F192 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  63++F196 1F 15 00 14                          DB $1F, $15, $00, $14
  64++F19A 1F 12 04 18                          DB $1F, $12, $04, $18
  65++F19E 1F 23 08 1C                          DB $1F, $23, $08, $1C
  66++F1A2 1F 34 0C 20                          DB $1F, $34, $0C, $20
  67++F1A6 1F 45 10 24                          DB $1F, $45, $10, $24
  68++F1AA 1F 67 28 3C                          DB $1F, $67, $28, $3C
  69++F1AE 1F 78 2C 40                          DB $1F, $78, $2C, $40
  70++F1B2 1F 89 30 44                          DB $1F, $89, $30, $44
  71++F1B6 1F 9A 34 48                          DB $1F, $9A, $34, $48
  72++F1BA 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  73++F1BE 1E 00 50 54                          DB $1E, $00, $50, $54
  74++F1C2 14 00 54 5C                          DB $14, $00, $54, $5C
  75++F1C6 17 00 5C 58                          DB $17, $00, $5C, $58
  76++F1CA 14 00 58 50                          DB $14, $00, $58, $50
  77++F1CE
  78++F1CE              DodoEdgesSize:          equ $ - DodoEdges
  79++F1CE
  80++F1CE
  81++F1CE              DodoEdgesCnt:           equ DodoEdgesSize/4
  82++F1CE
  83++F1CE
  84++F1CE 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  85++F1D2 1F 67 8E 58                          DB $1F, $67, $8E, $58
  86++F1D6 5F A9 37 59                          DB $5F, $A9, $37, $59
  87++F1DA 5F 00 B0 58                          DB $5F, $00, $B0, $58
  88++F1DE DF A9 37 59                          DB $DF, $A9, $37, $59
  89++F1E2 9F 67 8E 58                          DB $9F, $67, $8E, $58
  90++F1E6 3F 00 B0 58                          DB $3F, $00, $B0, $58
  91++F1EA 3F A9 37 59                          DB $3F, $A9, $37, $59
  92++F1EE 7F 67 8E 58                          DB $7F, $67, $8E, $58
  93++F1F2 FF 67 8E 58                          DB $FF, $67, $8E, $58
  94++F1F6 BF A9 37 59                          DB $BF, $A9, $37, $59
  95++F1FA 3F 00 00 C4                          DB $3F, $00, $00, $C4
  96++F1FE
  97++F1FE              DodoNormalsSize:        equ $ - DodoNormals
  98++F1FE              DodoLen:                equ $ - Dodo
  99++F1FE
# file closed: ./Data/Ships/Dodo.asm
 458+ F1FE                                      ENDIF
 459+ F1FE                                      IFDEF SHIPBANKB
 460+ F1FE ~                                    include "Data/Ships/Dragon.asm"
 461+ F1FE ~                                    include "Data/Ships/Escape_Pod.asm"
 462+ F1FE ~                                    include "Data/Ships/Fer_De_Lance.asm"
 463+ F1FE ~                                    include "Data/Ships/Gecko.asm"
 464+ F1FE ~                                    include "Data/Ships/Ghavial.asm"
 465+ F1FE ~                                    include "Data/Ships/Iguana.asm"
 466+ F1FE ~                                    include "Data/Ships/Krait.asm"
 467+ F1FE ~                                    include "Data/Ships/Logo.asm"
 468+ F1FE ~                                    include "Data/Ships/Mamba.asm"
 469+ F1FE ~                                    include "Data/Ships/Missile.asm"
 470+ F1FE ~                                    include "Data/Ships/Monitor.asm"
 471+ F1FE ~                                    include "Data/Ships/Moray.asm"
 472+ F1FE ~                                    include "Data/Ships/Ophidian.asm"
 473+ F1FE ~                                    include "Data/Ships/Plate.asm"
 474+ F1FE ~                                    include "Data/Ships/Python.asm"
 475+ F1FE ~                                    include "Data/Ships/Python_P.asm"
 476+ F1FE                                      ENDIF
 477+ F1FE                                      IFDEF SHIPBANKC
 478+ F1FE ~                                    include "Data/Ships/Rattler.asm"
 479+ F1FE ~                                    include "Data/Ships/Rock_Hermit.asm"
 480+ F1FE ~                                    include "Data/Ships/ShuttleType9.asm"
 481+ F1FE ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 482+ F1FE ~                                    include "Data/Ships/Sidewinder.asm"
 483+ F1FE ~                                    include "Data/Ships/Splinter.asm"
 484+ F1FE ~                                    include "Data/Ships/TestVector.asm"
 485+ F1FE ~                                    include "Data/Ships/Thargoid.asm"
 486+ F1FE ~                                    include "Data/Ships/Thargon.asm"
 487+ F1FE ~                                    include "Data/Ships/TransportType10.asm"
 488+ F1FE ~                                    include "Data/Ships/Viper.asm"
 489+ F1FE ~                                    include "Data/Ships/Worm.asm"
 490+ F1FE                                      ENDIF
 491+ F1FE
 492+ F1FE
 493+ F1FE              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ F1FE              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ F1FE
 496+ F1FE
 497+ F1FE              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ F1FE              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ F1FE              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ F1FE              ; hull byte#1-2 area for missile lock, lo, hi
 501+ F1FE              ; hull byte#3   edges data info offset lo
 502+ F1FE              ; hull byte#4   faces data info offset lo
 503+ F1FE              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ F1FE              ; hull byte#6   gun vertex*4
 505+ F1FE              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ F1FE              ; hull byte#8   vertices*6
 507+ F1FE              ; hull byte#9	edge Count
 508+ F1FE              ; hull bytes#10-11 bounty lo hi
 509+ F1FE              ; hull byte#12  faces*4
 510+ F1FE              ; hull byte#13  dot beyond distance
 511+ F1FE              ; hull byte#14  energy
 512+ F1FE              ; hull byte#15  speed (end of 4th row)
 513+ F1FE              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ F1FE              ; hull byte#17  faces offset hi
 515+ F1FE              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ F1FE              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ F1FE              ; hull byte#20  Added Vertices for 20,21
 518+ F1FE
 519+ F1FE              ; Optimised version to be applied to add data brought in to here:
 520+ F1FE              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ F1FE              ; hull byte#1-2 area for missile lock, lo, hi
 522+ F1FE              ; hull byte#3   edges data info offset lo
 523+ F1FE              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ F1FE              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ F1FE              ; hull byte#6   gun vertex*4
 526+ F1FE              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ F1FE              ; hull byte#8   vertices*6
 528+ F1FE              ; hull byte#9	edge Count
 529+ F1FE              ; hull bytes#10-11 bounty lo hi
 530+ F1FE              ; hull byte#12  faces*4
 531+ F1FE              ; hull byte#13  dot beyond distance
 532+ F1FE              ; hull byte#14  energy
 533+ F1FE              ; hull byte#15  speed (end of 4th row)
 534+ F1FE              ; hull byte#16  faces data info offset lo (was 4)
 535+ F1FE              ; hull byte#17  faces offset hi
 536+ F1FE              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ F1FE              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ F1FE              ; hull byte#20  Added Vertices for 20,21
 539+ F1FE              ;
 540+ F1FE              ; Vertex Data Structure
 541+ F1FE              ; Byte 0 X1Lo
 542+ F1FE              ; Byte 1 X1Hi
 543+ F1FE              ; Byte 2 Y1Lo
 544+ F1FE              ; Byte 3 Y1Hi
 545+ F1FE              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ F1FE              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ F1FE              ;
 548+ F1FE              ;
 549+ F1FE              ; Edge Data Structure
 550+ F1FE              ; Byte 0
 551+ F1FE              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ F1FE              ; Byte 2 - Index to Vertex 1
 553+ F1FE              ; Byte 3 - Index to Vertex 2
 554+ F1FE              ;
 555+ F1FE              ; Normal/Faces Data Structure
 556+ F1FE              ;
 557+ F1FE              ;
 558+ F1FE              ;
 559+ F1FE              ; Original Data:
 560+ F1FE              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ F1FE              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ F1FE              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ F1FE              ;		\ hull byte#3   edges data info offset lo
 564+ F1FE              ;		\ hull byte#4   faces data info offset lo
 565+ F1FE              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ F1FE              ;		\ hull byte#6   gun vertex*4
 567+ F1FE              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ F1FE              ;		\ hull byte#8   vertices*6
 569+ F1FE              ;		\ hull bytes#10-11 bounty lo hi
 570+ F1FE              ;		\ hull byte#12  faces*4
 571+ F1FE              ;		\ hull byte#13  dot beyond distance
 572+ F1FE              ;		\ hull byte#14  energy
 573+ F1FE              ;		\ hull byte#15  speed (end of 4th row)
 574+ F1FE              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ F1FE              ;		\ hull byte#17  faces offset hi
 576+ F1FE              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ F1FE              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ F1FE              ; Corrected pointers
 579+ F1FE              ; &565D \ Cargo cannister = Type 5
 580+ F1FE              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ F1FE              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ F1FE              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ F1FE              ; Mapping Orginal to new
 584+ F1FE              ; 0    => 0
 585+ F1FE              ; 1-2  => 1-2
 586+ F1FE              ; 3    => EQU Edges
 587+ F1FE              ; 4    => EQU Normals
 588+ F1FE              ; 5    => EQU EdgesCnt
 589+ F1FE              ; 6    => 6
 590+ F1FE              ; 7    => 7
 591+ F1FE              ; 8    => EQU VertSize
 592+ F1FE              ; 9    => EQU EdgesCnt
 593+ F1FE              ; 10-11=> 10-11
 594+ F1FE              ; 12   => EQU  NormalsSize
 595+ F1FE              ; 13   => 13
 596+ F1FE              ; 14   => 14
 597+ F1FE              ; 15   => 15
 598+ F1FE              ; 16   => EQU Edges
 599+ F1FE              ; 17   => EQU Normals
 600+ F1FE              ; 18   => 18
 601+ F1FE              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 853  F1FE              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 854  F1FE                  SLOT    ShipModelsAddr
 855  F1FE                  PAGE    BankShipModelsB
 856  F1FE              	ORG     ShipModelsAddr, BankShipModelsB
 857  E000                  UNDEFINE SHIPBANKA
 858  E000                  DEFINE   SHIPBANKB 1
 859  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            ;
   8+ E000 ~            LineX4Offset		    equ 5
   9+ E000 ~            GunVertexOffset		    equ 6
  10+ E000 ~            ExplosionCtOffset	    equ 7
  11+ E000 ~            VertexCtX6Offset	    equ 8
  12+ E000 ~            EdgeCountOffset		    equ 9
  13+ E000 ~            BountyLoOffset		    equ 10
  14+ E000 ~            BountyHiOffset		    equ 11
  15+ E000 ~            FaceCtX4Offset		    equ 12
  16+ E000 ~            DotOffset			    equ 13
  17+ E000 ~            EnergyOffset		    equ 14
  18+ E000 ~            SpeedOffset			    equ 15
  19+ E000 ~            ;EdgeHiOffset		    equ	16
  20+ E000 ~            FaceAddyOffset		    equ 16
  21+ E000 ~            ;
  22+ E000 ~            QOffset				    equ 18
  23+ E000 ~            LaserOffset			    equ 19
  24+ E000 ~            VerticiesAddyOffset     equ 20
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000              GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000 ~            GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025 ~            CopyVerticesDataToUBnk:
  70+ E025 ~            CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025              CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025 ~            CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 14 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 06 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD A1 8E                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036 ~            CopyEdgeDataToUBnk:
  89+ E036 ~            CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036              CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036 ~            CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 40 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 03 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD A1 8E                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047 ~            CopyNormalDataToUBnk:
 108+ E047 ~            CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047              CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047 ~            CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F0 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 0A C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD A1 8E                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058 ~            CopyShipDataToUBnk:
 127+ E058 ~            CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058              CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058 ~            CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FD C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 16 00                             ld          bc,22                       ; its now 22 bytes
 146+ E06F ED B0                                ldir                                    ; Copy over 22 bytes
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B ~            ShipModelBankA           DB BankShipModelsA
 162+ E07B ~                                     DB BankShipModelsB
 163+ E07B ~                                     DB BankShipModelsC
 164+ E07B                                       ENDIF
 165+ E07B                                       IFDEF SHIPBANKB
 166+ E07B 3B           ShipModelBankB           DB BankShipModelsA
 167+ E07C 43                                    DB BankShipModelsB
 168+ E07D 44                                    DB BankShipModelsC
 169+ E07E                                       ENDIF
 170+ E07E                                       IFDEF SHIPBANKC
 171+ E07E ~            ShipModelBankC           DB BankShipModelsA
 172+ E07E ~                                     DB BankShipModelsB
 173+ E07E ~                                     DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E ~            ShipModelTableA:         DW Adder
 177+ E07E ~                                     DW Anaconda
 178+ E07E ~                                     DW Asp_Mk_2
 179+ E07E ~                                     DW Asteroid
 180+ E07E ~                                     DW Boa
 181+ E07E ~                                     DW Boulder
 182+ E07E ~                                     DW Bushmaster
 183+ E07E ~                                     DW CargoType5
 184+ E07E ~                                     DW Chameleon
 185+ E07E ~                                     DW CobraMk3
 186+ E07E ~                                     DW Cobra_Mk_1
 187+ E07E ~                                     DW Cobra_Mk_3_P
 188+ E07E ~                                     DW Constrictor
 189+ E07E ~                                     DW Coriolis
 190+ E07E ~                                     DW Cougar
 191+ E07E ~                                     DW Dodo
 192+ E07E ~                                     DW Dragon
 193+ E07E ~                                     DW Escape_Pod
 194+ E07E ~                                     DW Fer_De_Lance
 195+ E07E ~                                     DW Gecko
 196+ E07E ~                                     DW Ghavial
 197+ E07E ~                                     DW Iguana
 198+ E07E ~                                     DW Krait
 199+ E07E ~                                     DW Logo
 200+ E07E ~            ShipVertexTableA:        DW AdderVertices
 201+ E07E ~                                     DW AnacondaVertices
 202+ E07E ~                                     DW Asp_Mk_2Vertices
 203+ E07E ~                                     DW AsteroidVertices
 204+ E07E ~                                     DW BoaVertices
 205+ E07E ~                                     DW BoulderVertices
 206+ E07E ~                                     DW BushmasterVertices
 207+ E07E ~                                     DW CargoType5Vertices
 208+ E07E ~                                     DW ChameleonVertices
 209+ E07E ~                                     DW CobraMk3Vertices
 210+ E07E ~                                     DW Cobra_Mk_1Vertices
 211+ E07E ~                                     DW Cobra_Mk_3_PVertices
 212+ E07E ~                                     DW ConstrictorVertices
 213+ E07E ~                                     DW CoriolisVertices
 214+ E07E ~                                     DW CougarVertices
 215+ E07E ~                                     DW DodoVertices
 216+ E07E ~            ShipEdgeTableA:          DW AdderEdges
 217+ E07E ~                                     DW AnacondaEdges
 218+ E07E ~                                     DW Asp_Mk_2Edges
 219+ E07E ~                                     DW AsteroidEdges
 220+ E07E ~                                     DW BoaEdges
 221+ E07E ~                                     DW BoulderEdges
 222+ E07E ~                                     DW BushmasterEdges
 223+ E07E ~                                     DW CargoType5Edges
 224+ E07E ~                                     DW ChameleonEdges
 225+ E07E ~                                     DW CobraMk3Edges
 226+ E07E ~                                     DW Cobra_Mk_1Edges
 227+ E07E ~                                     DW Cobra_Mk_3_PEdges
 228+ E07E ~                                     DW ConstrictorEdges
 229+ E07E ~                                     DW CoriolisEdges
 230+ E07E ~                                     DW CougarEdges
 231+ E07E ~                                     DW DodoEdges
 232+ E07E ~            ShipNormalTableA:        DW AdderNormals
 233+ E07E ~                                     DW AnacondaNormals
 234+ E07E ~                                     DW Asp_Mk_2Normals
 235+ E07E ~                                     DW AsteroidNormals
 236+ E07E ~                                     DW BoaNormals
 237+ E07E ~                                     DW BoulderNormals
 238+ E07E ~                                     DW BushmasterNormals
 239+ E07E ~                                     DW CargoType5Normals
 240+ E07E ~                                     DW ChameleonNormals
 241+ E07E ~                                     DW CobraMk3Normals
 242+ E07E ~                                     DW Cobra_Mk_1Normals
 243+ E07E ~                                     DW Cobra_Mk_3_PNormals
 244+ E07E ~                                     DW ConstrictorNormals
 245+ E07E ~                                     DW CoriolisNormals
 246+ E07E ~                                     DW CougarNormals
 247+ E07E ~                                     DW DodoNormals
 248+ E07E ~            ShipModelSizeTableA:     DW AdderLen
 249+ E07E ~                                     DW AnacondaLen
 250+ E07E ~                                     DW Asp_Mk_2Len
 251+ E07E ~                                     DW AsteroidLen
 252+ E07E ~                                     DW BoaLen
 253+ E07E ~                                     DW BoulderLen
 254+ E07E ~                                     DW BushmasterLen
 255+ E07E ~                                     DW CargoType5Len
 256+ E07E ~                                     DW ChameleonLen
 257+ E07E ~                                     DW CobraMk3Len
 258+ E07E ~                                     DW Cobra_Mk_1Len
 259+ E07E ~                                     DW Cobra_Mk_3_PLen
 260+ E07E ~                                     DW ConstrictorLen
 261+ E07E ~                                     DW CoriolisLen
 262+ E07E ~                                     DW CougarLen
 263+ E07E ~                                     DW DodoLen
 264+ E07E                                       ENDIF
 265+ E07E                                       IFDEF SHIPBANKB
 266+ E07E 1E E1        ShipModelTableB:         DW Dragon
 267+ E080 F6 E1                                 DW Escape_Pod
 268+ E082 4C E2                                 DW Fer_De_Lance
 269+ E084 68 E3                                 DW Gecko
 270+ E086 2E E4                                 DW Ghavial
 271+ E088 14 E5                                 DW Iguana
 272+ E08A 08 E6                                 DW Krait
 273+ E08C F0 E6                                 DW Logo
 274+ E08E AA E8                                 DW Mamba
 275+ E090 DA E9                                 DW Missile
 276+ E092 DA EA                                 DW Monitor
 277+ E094 DE EB                                 DW Moray
 278+ E096 B8 EC                                 DW Ophidian
 279+ E098 EE ED                                 DW Plate
 280+ E09A 2A EE                                 DW Python
 281+ E09C 1E EF                                 DW Python_P
 282+ E09E 34 E1        ShipVertexTableB:        DW DragonVertices
 283+ E0A0 0C E2                                 DW Escape_PodVertices
 284+ E0A2 62 E2                                 DW Fer_De_LanceVertices
 285+ E0A4 7E E3                                 DW GeckoVertices
 286+ E0A6 44 E4                                 DW GhavialVertices
 287+ E0A8 2A E5                                 DW IguanaVertices
 288+ E0AA 1E E6                                 DW KraitVertices
 289+ E0AC 06 E7                                 DW LogoVertices
 290+ E0AE C0 E8                                 DW MambaVertices
 291+ E0B0 F0 E9                                 DW MissileVertices
 292+ E0B2 F0 EA                                 DW MonitorVertices
 293+ E0B4 F4 EB                                 DW MorayVertices
 294+ E0B6 CE EC                                 DW OphidianVertices
 295+ E0B8 04 EE                                 DW PlateVertices
 296+ E0BA 40 EE                                 DW PythonVertices
 297+ E0BC 34 EF                                 DW Python_PVertices
 298+ E0BE 6A E1        ShipEdgeTableB:          DW DragonEdges
 299+ E0C0 24 E2                                 DW Escape_PodEdges
 300+ E0C2 D4 E2                                 DW Fer_De_LanceEdges
 301+ E0C4 C6 E3                                 DW GeckoEdges
 302+ E0C6 8C E4                                 DW GhavialEdges
 303+ E0C8 84 E5                                 DW IguanaEdges
 304+ E0CA 84 E6                                 DW KraitEdges
 305+ E0CC 02 E8                                 DW LogoEdges
 306+ E0CE 56 E9                                 DW MambaEdges
 307+ E0D0 56 EA                                 DW MissileEdges
 308+ E0D2 56 EB                                 DW MonitorEdges
 309+ E0D4 48 EC                                 DW MorayEdges
 310+ E0D6 46 ED                                 DW OphidianEdges
 311+ E0D8 16 EE                                 DW PlateEdges
 312+ E0DA 82 EE                                 DW PythonEdges
 313+ E0DC 76 EF                                 DW Python_PEdges
 314+ E0DE BE E1        ShipNormalTableB:        DW DragonNormals
 315+ E0E0 3C E2                                 DW Escape_PodNormals
 316+ E0E2 40 E3                                 DW Fer_De_LanceNormals
 317+ E0E4 0A E4                                 DW GeckoNormals
 318+ E0E6 E4 E4                                 DW GhavialNormals
 319+ E0E8 E0 E5                                 DW IguanaNormals
 320+ E0EA D8 E6                                 DW KraitNormals
 321+ E0EC 96 E8                                 DW LogoNormals
 322+ E0EE C6 E9                                 DW MambaNormals
 323+ E0F0 B6 EA                                 DW MissileNormals
 324+ E0F2 B2 EB                                 DW MonitorNormals
 325+ E0F4 94 EC                                 DW MorayNormals
 326+ E0F6 BE ED                                 DW OphidianNormals
 327+ E0F8 26 EE                                 DW PlateNormals
 328+ E0FA EA EE                                 DW PythonNormals
 329+ E0FC DE EF                                 DW Python_PNormals
 330+ E0FE D8 00        ShipModelSizeTableB:     DW DragonLen
 331+ E100 56 00                                 DW Escape_PodLen
 332+ E102 1C 01                                 DW Fer_De_LanceLen
 333+ E104 C6 00                                 DW GeckoLen
 334+ E106 E6 00                                 DW GhavialLen
 335+ E108 F4 00                                 DW IguanaLen
 336+ E10A E8 00                                 DW KraitLen
 337+ E10C BA 01                                 DW LogoLen
 338+ E10E 30 01                                 DW MambaLen
 339+ E110 00 01                                 DW MissileLen
 340+ E112 04 01                                 DW MonitorLen
 341+ E114 DA 00                                 DW MorayLen
 342+ E116 36 01                                 DW OphidianLen
 343+ E118 3C 00                                 DW PlateLen
 344+ E11A F4 00                                 DW PythonLen
 345+ E11C F4 00                                 DW Python_PLen
 346+ E11E                                       ENDIF
 347+ E11E                                       IFDEF SHIPBANKC
 348+ E11E ~            ShipModelTableC:         DW Rattler
 349+ E11E ~                                     DW Rock_Hermit
 350+ E11E ~                                     DW ShuttleType9
 351+ E11E ~                                     DW Shuttle_Mk_2
 352+ E11E ~                                     DW Sidewinder
 353+ E11E ~                                     DW Splinter
 354+ E11E ~                                     DW TestVector
 355+ E11E ~                                     DW Thargoid
 356+ E11E ~                                     DW Thargon
 357+ E11E ~                                     DW TransportType10
 358+ E11E ~                                     DW Viper
 359+ E11E ~                                     DW Worm
 360+ E11E ~                                     DW 0
 361+ E11E ~                                     DW 0
 362+ E11E ~                                     DW 0
 363+ E11E ~                                     DW 0
 364+ E11E ~            ShipVertexTableC:        DW RattlerVertices
 365+ E11E ~                                     DW Rock_HermitVertices
 366+ E11E ~                                     DW ShuttleType9Vertices
 367+ E11E ~                                     DW Shuttle_Mk_2Vertices
 368+ E11E ~                                     DW SidewinderVertices
 369+ E11E ~                                     DW SplinterVertices
 370+ E11E ~                                     DW TestVectorVertices
 371+ E11E ~                                     DW ThargoidVertices
 372+ E11E ~                                     DW ThargonVertices
 373+ E11E ~                                     DW TransportType10Vertices
 374+ E11E ~                                     DW ViperVertices
 375+ E11E ~                                     DW WormVertices
 376+ E11E ~                                     DW 0
 377+ E11E ~                                     DW 0
 378+ E11E ~                                     DW 0
 379+ E11E ~                                     DW 0
 380+ E11E ~            ShipEdgeTableC:          DW RattlerEdges
 381+ E11E ~                                     DW Rock_HermitEdges
 382+ E11E ~                                     DW ShuttleType9Edges
 383+ E11E ~                                     DW Shuttle_Mk_2Edges
 384+ E11E ~                                     DW SidewinderEdges
 385+ E11E ~                                     DW SplinterEdges
 386+ E11E ~                                     DW TestVectorEdges
 387+ E11E ~                                     DW ThargoidEdges
 388+ E11E ~                                     DW ThargonEdges
 389+ E11E ~                                     DW TransportType10Edges
 390+ E11E ~                                     DW ViperEdges
 391+ E11E ~                                     DW WormEdges
 392+ E11E ~                                     DW 0
 393+ E11E ~                                     DW 0
 394+ E11E ~                                     DW 0
 395+ E11E ~                                     DW 0
 396+ E11E ~            ShipNormalTableC:        DW RattlerNormals
 397+ E11E ~                                     DW Rock_HermitNormals
 398+ E11E ~                                     DW ShuttleType9Normals
 399+ E11E ~                                     DW Shuttle_Mk_2Normals
 400+ E11E ~                                     DW SidewinderNormals
 401+ E11E ~                                     DW SplinterNormals
 402+ E11E ~                                     DW TestVectorNormals
 403+ E11E ~                                     DW ThargoidNormals
 404+ E11E ~                                     DW ThargonNormals
 405+ E11E ~                                     DW TransportType10Normals
 406+ E11E ~                                     DW ViperNormals
 407+ E11E ~                                     DW WormNormals
 408+ E11E ~                                     DW 0
 409+ E11E ~                                     DW 0
 410+ E11E ~                                     DW 0
 411+ E11E ~                                     DW 0
 412+ E11E ~            ShipModelSizeTableC:     DW RattlerLen
 413+ E11E ~                                     DW Rock_HermitLen
 414+ E11E ~                                     DW ShuttleType9Len
 415+ E11E ~                                     DW Shuttle_Mk_2Len
 416+ E11E ~                                     DW SidewinderLen
 417+ E11E ~                                     DW SplinterLen
 418+ E11E ~                                     DW TestVectorLen
 419+ E11E ~                                     DW ThargoidLen
 420+ E11E ~                                     DW ThargonLen
 421+ E11E ~                                     DW TransportType10Len
 422+ E11E ~                                     DW ViperLen
 423+ E11E ~                                     DW WormLen
 424+ E11E ~                                     DW 0
 425+ E11E ~                                     DW 0
 426+ E11E ~                                     DW 0
 427+ E11E ~                                     DW 0
 428+ E11E                                       ENDIF
 429+ E11E
 430+ E11E
 431+ E11E                                      IFNDEF SHIPMODELTABLES
 432+ E11E ~                                    DEFINE SHIPMODELTABLES
 433+ E11E ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E11E ~            ShipModelBank:          EQU ShipModelBankA
 435+ E11E ~            ShipModelTable:         EQU ShipModelTableA
 436+ E11E ~            ShipVertexTable:        EQU ShipVertexTableA
 437+ E11E ~            ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E11E ~            ShipNormalTable:        EQU ShipNormalTableA
 439+ E11E                                      ENDIF
 440+ E11E
 441+ E11E                                      IFDEF SHIPBANKA
 442+ E11E ~                                    include "Data/Ships/Adder.asm"
 443+ E11E ~                                    include "Data/Ships/Anaconda.asm"
 444+ E11E ~                                    include "Data/Ships/Asp_Mk_2.asm"
 445+ E11E ~                                    include "Data/Ships/Asteroid.asm"
 446+ E11E ~                                    include "Data/Ships/Boa.asm"
 447+ E11E ~                                    include "Data/Ships/Boulder.asm"
 448+ E11E ~                                    include "Data/Ships/Bushmaster.asm"
 449+ E11E ~                                    include "Data/Ships/CargoType5.asm"
 450+ E11E ~                                    include "Data/Ships/Chameleon.asm"
 451+ E11E ~                                    include "Data/Ships/CobraMk3.asm"
 452+ E11E ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 453+ E11E ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 454+ E11E ~                                    include "Data/Ships/Constrictor.asm"
 455+ E11E ~                                    include "Data/Ships/Coriolis.asm"
 456+ E11E ~                                    include "Data/Ships/Cougar.asm"
 457+ E11E ~                                    include "Data/Ships/Dodo.asm"
 458+ E11E                                      ENDIF
 459+ E11E                                      IFDEF SHIPBANKB
 460+ E11E                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E11E 00 66 50     Dragon:	DB $00, $66, $50
   2++E121 6A E1        	DW DragonEdges
   3++E123 54           	DB DragonEdgesSize
   4++E124 00 3C        	DB $00, $3C
   5++E126 36           	DB DragonVertSize
   6++E127 15           	DB DragonEdgesCnt
   7++E128 00 00        	DB $00, $00
   8++E12A 38           	DB DragonNormalsSize
   9++E12B 20 F7 14     	DB $20, $F7, $14
  10++E12E BE E1        	DW DragonNormals
  11++E130 00 47        	DB $00, $47
  12++E132 34 E1        	DW DragonVertices
  13++E134
  14++E134
  15++E134 00 00 FA 1F  DragonVertices:	DB $00, $00, $FA, $1F, $6B, $05
  15++E138 6B 05
  16++E13A D8 00 7C 1F  	DB $D8, $00, $7C, $1F, $67, $01
  16++E13E 67 01
  17++E140 D8 00 7C 3F  	DB $D8, $00, $7C, $3F, $78, $12
  17++E144 78 12
  18++E146 00 28 FA 3F  	DB $00, $28, $FA, $3F, $CD, $23
  18++E14A CD 23
  19++E14C 00 28 FA 7F  	DB $00, $28, $FA, $7F, $CD, $89
  19++E150 CD 89
  20++E152 D8 00 7C BF  	DB $D8, $00, $7C, $BF, $9A, $34
  20++E156 9A 34
  21++E158 D8 00 7C 9F  	DB $D8, $00, $7C, $9F, $AB, $45
  21++E15C AB 45
  22++E15E 00 50 00 1F  	DB $00, $50, $00, $1F, $FF, $FF
  22++E162 FF FF
  23++E164 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  23++E168 FF FF
  24++E16A
  25++E16A              DragonVertSize: equ $ - DragonVertices
  26++E16A
  27++E16A
  28++E16A
  29++E16A 1F 01 04 1C  DragonEdges:	DB $1F, $01, $04, $1C
  30++E16E 1F 12 08 1C  	DB $1F, $12, $08, $1C
  31++E172 1F 23 0C 1C  	DB $1F, $23, $0C, $1C
  32++E176 1F 34 14 1C  	DB $1F, $34, $14, $1C
  33++E17A 1F 45 18 1C  	DB $1F, $45, $18, $1C
  34++E17E 1F 50 00 1C  	DB $1F, $50, $00, $1C
  35++E182 1F 67 04 20  	DB $1F, $67, $04, $20
  36++E186 1F 78 08 20  	DB $1F, $78, $08, $20
  37++E18A 1F 89 10 20  	DB $1F, $89, $10, $20
  38++E18E 1F 9A 14 20  	DB $1F, $9A, $14, $20
  39++E192 1F AB 18 20  	DB $1F, $AB, $18, $20
  40++E196 1F B6 00 20  	DB $1F, $B6, $00, $20
  41++E19A 1F 06 00 04  	DB $1F, $06, $00, $04
  42++E19E 1F 17 04 08  	DB $1F, $17, $04, $08
  43++E1A2 1F 4A 14 18  	DB $1F, $4A, $14, $18
  44++E1A6 1F 5B 00 18  	DB $1F, $5B, $00, $18
  45++E1AA 1F 2C 08 0C  	DB $1F, $2C, $08, $0C
  46++E1AE 1F 8C 08 10  	DB $1F, $8C, $08, $10
  47++E1B2 1F 3D 0C 14  	DB $1F, $3D, $0C, $14
  48++E1B6 1F 9D 10 14  	DB $1F, $9D, $10, $14
  49++E1BA 1F CD 0C 10  	DB $1F, $CD, $0C, $10
  50++E1BE
  51++E1BE
  52++E1BE              DragonEdgesSize: equ $ - DragonEdges
  53++E1BE
  54++E1BE
  55++E1BE              DragonEdgesCnt: equ DragonEdgesSize/4
  56++E1BE
  57++E1BE
  58++E1BE 1F 10 5A 1C  DragonNormals:	DB $1F, $10, $5A, $1C
  59++E1C2 1F 21 5A 00  	DB $1F, $21, $5A, $00
  60++E1C6 3F 19 5B 0E  	DB $3F, $19, $5B, $0E
  61++E1CA BF 19 5B 0E  	DB $BF, $19, $5B, $0E
  62++E1CE 9F 21 5A 00  	DB $9F, $21, $5A, $00
  63++E1D2 9F 10 5A 1C  	DB $9F, $10, $5A, $1C
  64++E1D6 5F 10 5A 1C  	DB $5F, $10, $5A, $1C
  65++E1DA 5F 21 5A 00  	DB $5F, $21, $5A, $00
  66++E1DE 7F 19 5B 0E  	DB $7F, $19, $5B, $0E
  67++E1E2 FF 19 5B 0E  	DB $FF, $19, $5B, $0E
  68++E1E6 DF 21 5A 00  	DB $DF, $21, $5A, $00
  69++E1EA DF 10 5A 1C  	DB $DF, $10, $5A, $1C
  70++E1EE 3F 30 00 52  	DB $3F, $30, $00, $52
  71++E1F2 BF 30 00 52  	DB $BF, $30, $00, $52
  72++E1F6
  73++E1F6              DragonNormalsSize: equ $ - DragonNormals
  74++E1F6              DragonLen: equ $ - Dragon
  75++E1F6
# file closed: ./Data/Ships/Dragon.asm
 461+ E1F6                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E1F6 20 01 00     Escape_Pod:	DB $20, $01, $00
   2++E1F9 24 E2        	DW Escape_PodEdges
   3++E1FB 18           	DB Escape_PodEdgesSize
   4++E1FC 00 16        	DB $00, $16
   5++E1FE 18           	DB Escape_PodVertSize
   6++E1FF 06           	DB Escape_PodEdgesCnt
   7++E200 00 00        	DB $00, $00
   8++E202 10           	DB Escape_PodNormalsSize
   9++E203 08 11 08     	DB $08, $11, $08
  10++E206 3C E2        	DW Escape_PodNormals
  11++E208 04 00        	DB $04, $00
  12++E20A 0C E2        	DW Escape_PodVertices
  13++E20C
  14++E20C
  15++E20C 07 00 24 9F  Escape_PodVertices:	DB $07, $00, $24, $9F, $12, $33
  15++E210 12 33
  16++E212 07 0E 0C FF  	DB $07, $0E, $0C, $FF, $02, $33
  16++E216 02 33
  17++E218 07 0E 0C BF  	DB $07, $0E, $0C, $BF, $01, $33
  17++E21C 01 33
  18++E21E 15 00 00 1F  	DB $15, $00, $00, $1F, $01, $22
  18++E222 01 22
  19++E224
  20++E224              Escape_PodVertSize: equ $ - Escape_PodVertices
  21++E224
  22++E224
  23++E224
  24++E224 1F 23 00 04  Escape_PodEdges:	DB $1F, $23, $00, $04
  25++E228 1F 03 04 08  	DB $1F, $03, $04, $08
  26++E22C 1F 01 08 0C  	DB $1F, $01, $08, $0C
  27++E230 1F 12 0C 00  	DB $1F, $12, $0C, $00
  28++E234 1F 13 00 08  	DB $1F, $13, $00, $08
  29++E238 1F 02 0C 04  	DB $1F, $02, $0C, $04
  30++E23C
  31++E23C              Escape_PodEdgesSize: equ $ - Escape_PodEdges
  32++E23C
  33++E23C
  34++E23C              Escape_PodEdgesCnt: equ Escape_PodEdgesSize/4
  35++E23C
  36++E23C
  37++E23C 3F 34 00 7A  Escape_PodNormals:	DB $3F, $34, $00, $7A
  38++E240 1F 27 67 1E  	DB $1F, $27, $67, $1E
  39++E244 5F 27 67 1E  	DB $5F, $27, $67, $1E
  40++E248 9F 70 00 00  	DB $9F, $70, $00, $00
  41++E24C
  42++E24C
  43++E24C              Escape_PodNormalsSize: equ $ - Escape_PodNormals
  44++E24C              Escape_PodLen: equ $ - Escape_Pod
  45++E24C
# file closed: ./Data/Ships/Escape_Pod.asm
 462+ E24C                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E24C 00 06 40     Fer_De_Lance:	DB $00, $06, $40
   2++E24F D4 E2        	DW Fer_De_LanceEdges
   3++E251 6C           	DB Fer_De_LanceEdgesSize
   4++E252 00 1A        	DB $00, $1A
   5++E254 72           	DB Fer_De_LanceVertSize
   6++E255 1B           	DB Fer_De_LanceEdgesCnt
   7++E256 00 00        	DB $00, $00
   8++E258 28           	DB Fer_De_LanceNormalsSize
   9++E259 28 A0 1E     	DB $28, $A0, $1E
  10++E25C 40 E3        	DW Fer_De_LanceNormals
  11++E25E 01 12        	DB $01, $12
  12++E260 62 E2        	DW Fer_De_LanceVertices
  13++E262
  14++E262
  15++E262 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  15++E266 01 59
  16++E268 28 0E 04 FF  	DB $28, $0E, $04, $FF, $12, $99
  16++E26C 12 99
  17++E26E 0C 0E 34 FF  	DB $0C, $0E, $34, $FF, $23, $99
  17++E272 23 99
  18++E274 0C 0E 34 7F  	DB $0C, $0E, $34, $7F, $34, $99
  18++E278 34 99
  19++E27A 28 0E 04 7F  	DB $28, $0E, $04, $7F, $45, $99
  19++E27E 45 99
  20++E280 28 0E 04 BC  	DB $28, $0E, $04, $BC, $01, $26
  20++E284 01 26
  21++E286 0C 02 34 BC  	DB $0C, $02, $34, $BC, $23, $67
  21++E28A 23 67
  22++E28C 0C 02 34 3C  	DB $0C, $02, $34, $3C, $34, $78
  22++E290 34 78
  23++E292 28 0E 04 3C  	DB $28, $0E, $04, $3C, $04, $58
  23++E296 04 58
  24++E298 00 12 14 2F  	DB $00, $12, $14, $2F, $06, $78
  24++E29C 06 78
  25++E29E 03 0B 61 CB  	DB $03, $0B, $61, $CB, $00, $00
  25++E2A2 00 00
  26++E2A4 1A 08 12 89  	DB $1A, $08, $12, $89, $00, $00
  26++E2A8 00 00
  27++E2AA 10 0E 04 AB  	DB $10, $0E, $04, $AB, $00, $00
  27++E2AE 00 00
  28++E2B0 03 0B 61 4B  	DB $03, $0B, $61, $4B, $00, $00
  28++E2B4 00 00
  29++E2B6 1A 08 12 09  	DB $1A, $08, $12, $09, $00, $00
  29++E2BA 00 00
  30++E2BC 10 0E 04 2B  	DB $10, $0E, $04, $2B, $00, $00
  30++E2C0 00 00
  31++E2C2 00 0E 14 6C  	DB $00, $0E, $14, $6C, $99, $99
  31++E2C6 99 99
  32++E2C8 0E 0E 2C CC  	DB $0E, $0E, $2C, $CC, $99, $99
  32++E2CC 99 99
  33++E2CE 0E 0E 2C 4C  	DB $0E, $0E, $2C, $4C, $99, $99
  33++E2D2 99 99
  34++E2D4
  35++E2D4              Fer_De_LanceVertSize: equ $ - Fer_De_LanceVertices
  36++E2D4
  37++E2D4
  38++E2D4
  39++E2D4 1F 19 00 04  Fer_De_LanceEdges:	DB $1F, $19, $00, $04
  40++E2D8 1F 29 04 08  	DB $1F, $29, $04, $08
  41++E2DC 1F 39 08 0C  	DB $1F, $39, $08, $0C
  42++E2E0 1F 49 0C 10  	DB $1F, $49, $0C, $10
  43++E2E4 1F 59 00 10  	DB $1F, $59, $00, $10
  44++E2E8 1C 01 00 14  	DB $1C, $01, $00, $14
  45++E2EC 1C 26 14 18  	DB $1C, $26, $14, $18
  46++E2F0 1C 37 18 1C  	DB $1C, $37, $18, $1C
  47++E2F4 1C 48 1C 20  	DB $1C, $48, $1C, $20
  48++E2F8 1C 05 00 20  	DB $1C, $05, $00, $20
  49++E2FC 0F 06 14 24  	DB $0F, $06, $14, $24
  50++E300 0B 67 18 24  	DB $0B, $67, $18, $24
  51++E304 0B 78 1C 24  	DB $0B, $78, $1C, $24
  52++E308 0F 08 20 24  	DB $0F, $08, $20, $24
  53++E30C 0E 12 04 14  	DB $0E, $12, $04, $14
  54++E310 0E 23 08 18  	DB $0E, $23, $08, $18
  55++E314 0E 34 0C 1C  	DB $0E, $34, $0C, $1C
  56++E318 0E 45 10 20  	DB $0E, $45, $10, $20
  57++E31C 08 00 28 2C  	DB $08, $00, $28, $2C
  58++E320 09 00 2C 30  	DB $09, $00, $2C, $30
  59++E324 0B 00 28 30  	DB $0B, $00, $28, $30
  60++E328 08 00 34 38  	DB $08, $00, $34, $38
  61++E32C 09 00 38 3C  	DB $09, $00, $38, $3C
  62++E330 0B 00 34 3C  	DB $0B, $00, $34, $3C
  63++E334 0C 99 40 44  	DB $0C, $99, $40, $44
  64++E338 0C 99 40 48  	DB $0C, $99, $40, $48
  65++E33C 08 99 44 48  	DB $08, $99, $44, $48
  66++E340
  67++E340              Fer_De_LanceEdgesSize: equ $ - Fer_De_LanceEdges
  68++E340
  69++E340
  70++E340              Fer_De_LanceEdgesCnt: equ Fer_De_LanceEdgesSize/4
  71++E340
  72++E340
  73++E340 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  74++E344 9F 44 00 18  	DB $9F, $44, $00, $18
  75++E348 BF 3F 00 25  	DB $BF, $3F, $00, $25
  76++E34C 3F 00 00 68  	DB $3F, $00, $00, $68
  77++E350 3F 3F 00 25  	DB $3F, $3F, $00, $25
  78++E354 1F 44 00 18  	DB $1F, $44, $00, $18
  79++E358 BC 0C 2E 13  	DB $BC, $0C, $2E, $13
  80++E35C 3C 00 2D 16  	DB $3C, $00, $2D, $16
  81++E360 3C 0C 2E 13  	DB $3C, $0C, $2E, $13
  82++E364 5F 00 1C 00  	DB $5F, $00, $1C, $00
  83++E368
  84++E368
  85++E368              Fer_De_LanceNormalsSize: equ $ - Fer_De_LanceNormals
  86++E368              Fer_De_LanceLen: equ $ - Fer_De_Lance
  87++E368
# file closed: ./Data/Ships/Fer_De_Lance.asm
 463+ E368                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E368 00 26 49     Gecko:	DB $00, $26, $49
   2++E36B C6 E3        	DW GeckoEdges
   3++E36D 44           	DB GeckoEdgesSize
   4++E36E 00 1A        	DB $00, $1A
   5++E370 48           	DB GeckoVertSize
   6++E371 11           	DB GeckoEdgesCnt
   7++E372 00 37        	DB $00, $37
   8++E374 24           	DB GeckoNormalsSize
   9++E375 12 46 1E     	DB $12, $46, $1E
  10++E378 0A E4        	DW GeckoNormals
  11++E37A 03 10        	DB $03, $10
  12++E37C 7E E3        	DW GeckoVertices
  13++E37E
  14++E37E 0A 04 2F DF  GeckoVertices:	DB $0A, $04, $2F, $DF, $03, $45
  14++E382 03 45
  15++E384 0A 04 2F 5F  	DB $0A, $04, $2F, $5F, $01, $23
  15++E388 01 23
  16++E38A 10 08 17 BF  	DB $10, $08, $17, $BF, $05, $67
  16++E38E 05 67
  17++E390 10 08 17 3F  	DB $10, $08, $17, $3F, $01, $78
  17++E394 01 78
  18++E396 42 00 03 BF  	DB $42, $00, $03, $BF, $45, $66
  18++E39A 45 66
  19++E39C 42 00 03 3F  	DB $42, $00, $03, $3F, $12, $88
  19++E3A0 12 88
  20++E3A2 14 0E 17 FF  	DB $14, $0E, $17, $FF, $34, $67
  20++E3A6 34 67
  21++E3A8 14 0E 17 7F  	DB $14, $0E, $17, $7F, $23, $78
  21++E3AC 23 78
  22++E3AE 08 06 21 D0  	DB $08, $06, $21, $D0, $33, $33
  22++E3B2 33 33
  23++E3B4 08 06 21 51  	DB $08, $06, $21, $51, $33, $33
  23++E3B8 33 33
  24++E3BA 08 0D 10 F0  	DB $08, $0D, $10, $F0, $33, $33
  24++E3BE 33 33
  25++E3C0 08 0D 10 71  	DB $08, $0D, $10, $71, $33, $33
  25++E3C4 33 33
  26++E3C6
  27++E3C6              GeckoVertSize: equ $ - GeckoVertices
  28++E3C6
  29++E3C6
  30++E3C6
  31++E3C6 1F 03 00 04  GeckoEdges:	DB $1F, $03, $00, $04
  32++E3CA 1F 12 04 14  	DB $1F, $12, $04, $14
  33++E3CE 1F 18 14 0C  	DB $1F, $18, $14, $0C
  34++E3D2 1F 07 0C 08  	DB $1F, $07, $0C, $08
  35++E3D6 1F 56 08 10  	DB $1F, $56, $08, $10
  36++E3DA 1F 45 10 00  	DB $1F, $45, $10, $00
  37++E3DE 1F 28 14 1C  	DB $1F, $28, $14, $1C
  38++E3E2 1F 37 1C 18  	DB $1F, $37, $1C, $18
  39++E3E6 1F 46 18 10  	DB $1F, $46, $18, $10
  40++E3EA 1D 05 00 08  	DB $1D, $05, $00, $08
  41++E3EE 1E 01 04 0C  	DB $1E, $01, $04, $0C
  42++E3F2 1D 34 00 18  	DB $1D, $34, $00, $18
  43++E3F6 1E 23 04 1C  	DB $1E, $23, $04, $1C
  44++E3FA 14 67 08 18  	DB $14, $67, $08, $18
  45++E3FE 14 78 0C 1C  	DB $14, $78, $0C, $1C
  46++E402 10 33 20 28  	DB $10, $33, $20, $28
  47++E406 11 33 24 2C  	DB $11, $33, $24, $2C
  48++E40A
  49++E40A              GeckoEdgesSize: equ $ - GeckoEdges
  50++E40A
  51++E40A
  52++E40A              GeckoEdgesCnt: equ GeckoEdgesSize/4
  53++E40A
  54++E40A
  55++E40A 1F 00 1F 05  GeckoNormals:	DB $1F, $00, $1F, $05
  56++E40E 1F 04 2D 08  	DB $1F, $04, $2D, $08
  57++E412 5F 19 6C 13  	DB $5F, $19, $6C, $13
  58++E416 5F 00 54 0C  	DB $5F, $00, $54, $0C
  59++E41A DF 19 6C 13  	DB $DF, $19, $6C, $13
  60++E41E 9F 04 2D 08  	DB $9F, $04, $2D, $08
  61++E422 BF 58 10 D6  	DB $BF, $58, $10, $D6
  62++E426 3F 00 00 BB  	DB $3F, $00, $00, $BB
  63++E42A 3F 58 10 D6  	DB $3F, $58, $10, $D6
  64++E42E
  65++E42E              GeckoNormalsSize: equ $ - GeckoNormals
  66++E42E              GeckoLen: equ $ - Gecko
  67++E42E
# file closed: ./Data/Ships/Gecko.asm
 464+ E42E                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E42E 03 26 00     Ghavial:	DB $03, $26, $00
   2++E431 8C E4        	DW GhavialEdges
   3++E433 58           	DB GhavialEdgesSize
   4++E434 00 22        	DB $00, $22
   5++E436 48           	DB GhavialVertSize
   6++E437 16           	DB GhavialEdgesCnt
   7++E438 00 64        	DB $00, $64
   8++E43A 30           	DB GhavialNormalsSize
   9++E43B 0A 72 10     	DB $0A, $72, $10
  10++E43E E4 E4        	DW GhavialNormals
  11++E440 00 27        	DB $00, $27
  12++E442 44 E4        	DW GhavialVertices
  13++E444
  14++E444 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  14++E448 67 01
  15++E44A 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  15++E44E 6B 05
  16++E450 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  16++E454 23 01
  17++E456 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  17++E45A 45 03
  18++E45C 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  18++E460 78 12
  19++E462 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  19++E466 89 23
  20++E468 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  20++E46C AB 45
  21++E46E 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  21++E472 9A 34
  22++E474 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  22++E478 FF FF
  23++E47A 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  23++E47E 00 00
  24++E480 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  24++E484 00 00
  25++E486 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  25++E48A 00 00
  26++E48C
  27++E48C              GhavialVertSize: equ $ - GhavialVertices
  28++E48C
  29++E48C
  30++E48C 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  31++E490 1F 12 10 08  	DB $1F, $12, $10, $08
  32++E494 1F 23 14 08  	DB $1F, $23, $14, $08
  33++E498 1F 30 0C 08  	DB $1F, $30, $0C, $08
  34++E49C 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  35++E4A0 1F 45 18 0C  	DB $1F, $45, $18, $0C
  36++E4A4 1F 50 0C 04  	DB $1F, $50, $0C, $04
  37++E4A8 1F 67 00 20  	DB $1F, $67, $00, $20
  38++E4AC 1F 78 10 20  	DB $1F, $78, $10, $20
  39++E4B0 1F 89 14 20  	DB $1F, $89, $14, $20
  40++E4B4 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  41++E4B8 1F AB 18 20  	DB $1F, $AB, $18, $20
  42++E4BC 1F B6 04 20  	DB $1F, $B6, $04, $20
  43++E4C0 1F 06 04 00  	DB $1F, $06, $04, $00
  44++E4C4 1F 17 00 10  	DB $1F, $17, $00, $10
  45++E4C8 1F 28 10 14  	DB $1F, $28, $10, $14
  46++E4CC 1F 39 14 1C  	DB $1F, $39, $14, $1C
  47++E4D0 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  48++E4D4 1F 5B 18 04  	DB $1F, $5B, $18, $04
  49++E4D8 09 00 24 28  	DB $09, $00, $24, $28
  50++E4DC 09 00 28 2C  	DB $09, $00, $28, $2C
  51++E4E0 09 00 2C 24  	DB $09, $00, $2C, $24
  52++E4E4
  53++E4E4              GhavialEdgesSize: equ $ - GhavialEdges
  54++E4E4
  55++E4E4
  56++E4E4              GhavialEdgesCnt: equ GhavialEdgesSize/4
  57++E4E4
  58++E4E4
  59++E4E4 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  60++E4E8 1F 33 24 0C  	DB $1F, $33, $24, $0C
  61++E4EC 3F 33 1C 19  	DB $3F, $33, $1C, $19
  62++E4F0 3F 00 30 2A  	DB $3F, $00, $30, $2A
  63++E4F4 BF 33 1C 19  	DB $BF, $33, $1C, $19
  64++E4F8 9F 33 24 0C  	DB $9F, $33, $24, $0C
  65++E4FC 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  66++E500 5F 1C 38 07  	DB $5F, $1C, $38, $07
  67++E504 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  68++E508 7F 00 33 26  	DB $7F, $00, $33, $26
  69++E50C FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  70++E510 DF 1C 38 07  	DB $DF, $1C, $38, $07
  71++E514
  72++E514              GhavialNormalsSize: equ $ - GhavialNormals
  73++E514              GhavialLen: equ $ - Ghavial
  74++E514
# file closed: ./Data/Ships/Ghavial.asm
 465+ E514                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E514 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E517 84 E5        	DW IguanaEdges
   3++E519 5C           	DB IguanaEdgesSize
   4++E51A 00 1A        	DB $00, $1A
   5++E51C 5A           	DB IguanaVertSize
   6++E51D 17           	DB IguanaEdgesCnt
   7++E51E 00 96        	DB $00, $96
   8++E520 28           	DB IguanaNormalsSize
   9++E521 0A 5A 21     	DB $0A, $5A, $21
  10++E524 E0 E5        	DW IguanaNormals
  11++E526 01 23        	DB $01, $23
  12++E528 2A E5        	DW IguanaVertices
  13++E52A
  14++E52A
  15++E52A 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  15++E52E 23 01
  16++E530 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  16++E534 46 02
  17++E536 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  17++E53A 45 01
  18++E53C 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  18++E540 57 13
  19++E542 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  19++E546 67 23
  20++E548 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  20++E54C 89 46
  21++E54E 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  21++E552 88 45
  22++E554 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  22++E558 89 57
  23++E55A 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  23++E55E 99 67
  24++E560 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  24++E564 11 00
  25++E566 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  25++E56A 33 22
  26++E56C 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  26++E570 99 88
  27++E572 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  27++E576 88 88
  28++E578 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  28++E57C 99 88
  29++E57E 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  29++E582 99 99
  30++E584
  31++E584              IguanaVertSize: equ $ - IguanaVertices
  32++E584
  33++E584
  34++E584
  35++E584 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  36++E588 1F 01 00 08  	DB $1F, $01, $00, $08
  37++E58C 1F 13 00 0C  	DB $1F, $13, $00, $0C
  38++E590 1F 23 00 10  	DB $1F, $23, $00, $10
  39++E594 1F 46 04 14  	DB $1F, $46, $04, $14
  40++E598 1F 45 08 18  	DB $1F, $45, $08, $18
  41++E59C 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  42++E5A0 1F 67 10 20  	DB $1F, $67, $10, $20
  43++E5A4 1F 48 14 18  	DB $1F, $48, $14, $18
  44++E5A8 1F 58 18 1C  	DB $1F, $58, $18, $1C
  45++E5AC 1F 69 14 20  	DB $1F, $69, $14, $20
  46++E5B0 1F 79 1C 20  	DB $1F, $79, $1C, $20
  47++E5B4 1F 04 04 08  	DB $1F, $04, $04, $08
  48++E5B8 1F 15 08 0C  	DB $1F, $15, $08, $0C
  49++E5BC 1F 26 04 10  	DB $1F, $26, $04, $10
  50++E5C0 1F 37 0C 10  	DB $1F, $37, $0C, $10
  51++E5C4 1F 89 14 1C  	DB $1F, $89, $14, $1C
  52++E5C8 1E 01 08 24  	DB $1E, $01, $08, $24
  53++E5CC 1E 23 10 28  	DB $1E, $23, $10, $28
  54++E5D0 0A 88 2C 30  	DB $0A, $88, $2C, $30
  55++E5D4 0A 88 34 30  	DB $0A, $88, $34, $30
  56++E5D8 0A 99 2C 38  	DB $0A, $99, $2C, $38
  57++E5DC 0A 99 34 38  	DB $0A, $99, $34, $38
  58++E5E0
  59++E5E0              IguanaEdgesSize: equ $ - IguanaEdges
  60++E5E0
  61++E5E0
  62++E5E0              IguanaEdgesCnt: equ IguanaEdgesSize/4
  63++E5E0
  64++E5E0
  65++E5E0 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  66++E5E4 DF 33 4D 19  	DB $DF, $33, $4D, $19
  67++E5E8 1F 33 4D 19  	DB $1F, $33, $4D, $19
  68++E5EC 5F 33 4D 19  	DB $5F, $33, $4D, $19
  69++E5F0 9F 2A 55 00  	DB $9F, $2A, $55, $00
  70++E5F4 DF 2A 55 00  	DB $DF, $2A, $55, $00
  71++E5F8 1F 2A 55 00  	DB $1F, $2A, $55, $00
  72++E5FC 5F 2A 55 00  	DB $5F, $2A, $55, $00
  73++E600 BF 17 00 5D  	DB $BF, $17, $00, $5D
  74++E604 3F 17 00 5D  	DB $3F, $17, $00, $5D
  75++E608
  76++E608
  77++E608              IguanaNormalsSize: equ $ - IguanaNormals
  78++E608              IguanaLen: equ $ - Iguana
  79++E608
# file closed: ./Data/Ships/Iguana.asm
 466+ E608                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E608
   2++E608 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E60B 84 E6                                DW KraitEdges
   4++E60D 54                                   DB KraitEdgesSize
   5++E60E 00 12                                DB $00, $12
   6++E610 66                                   DB KraitVertSize
   7++E611 15                                   DB KraitEdgesCnt
   8++E612 64 00                                DB $64,$00
   9++E614 18                                   DB KraitNormalsSize
  10++E615 14 50 1E                             DB $14, $50, $1E
  11++E618 D8 E6                                DW KraitNormals
  12++E61A 02 10                                DB $02, $10
  13++E61C 1E E6                                DW KraitVertices
  14++E61E 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  14++E622 01 23
  15++E624 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  15++E628 03 45
  16++E62A 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  16++E62E 12 45
  17++E630 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  17++E634 01 44
  18++E636 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  18++E63A 23 55
  19++E63C 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  19++E640 01 11
  20++E642 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  20++E646 23 33
  21++E648 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  21++E64C 00 33
  22++E64E 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  22++E652 00 33
  23++E654 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  23++E658 33 33
  24++E65A 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  24++E65E 00 00
  25++E660 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  25++E664 44 44
  26++E666 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  26++E66A 44 44
  27++E66C 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  27++E670 44 44
  28++E672 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  28++E676 55 55
  29++E678 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  29++E67C 55 55
  30++E67E 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  30++E682 55 55
  31++E684              KraitVertSize           equ $  - KraitVertices
  32++E684 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  32++E688 1F 12 00 08
  33++E68C 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  33++E690 1F 23 00 10
  34++E694 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  34++E698 1F 25 10 08
  35++E69C 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  35++E6A0 1F 04 0C 04
  36++E6A4 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  36++E6A8 1C 23 10 18
  37++E6AC 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  37++E6B0 09 00 1C 28
  38++E6B4 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  38++E6B8 09 33 1C 24
  39++E6BC 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  39++E6C0 08 44 2C 34
  40++E6C4 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  40++E6C8 07 44 30 2C
  41++E6CC 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  41++E6D0 08 55 3C 40
  42++E6D4 08 55 40 38                          DB $08, $55, $40, $38
  43++E6D8              KraitEdgesSize          equ $  - KraitEdges
  44++E6D8              KraitEdgesCnt           equ KraitEdgesSize/4
  45++E6D8 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  46++E6DC 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  46++E6E0 DF 07 30 06
  47++E6E4 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  47++E6E8 3F 4D 00 9A
  48++E6EC BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  49++E6F0              KraitNormalsSize        equ $  - KraitNormals
  50++E6F0              KraitLen                equ $  - Krait
  51++E6F0
# file closed: ./Data/Ships/Krait.asm
 467+ E6F0                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E6F0 00 26 49     Logo:	DB $00, $26, $49
   2++E6F3 02 E8        	DW LogoEdges
   3++E6F5 94           	DB LogoEdgesSize
   4++E6F6 00 36        	DB $00, $36
   5++E6F8 FC           	DB LogoVertSize
   6++E6F9 25           	DB LogoEdgesCnt
   7++E6FA 00 00        	DB $00, $00
   8++E6FC 14           	DB LogoNormalsSize
   9++E6FD 63 FC 24     	DB $63, $FC, $24
  10++E700 96 E8        	DW LogoNormals
  11++E702 01 00        	DB $01, $00
  12++E704 06 E7        	DW LogoVertices
  13++E706
  14++E706 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  14++E70A 00 00
  15++E70C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  15++E710 00 00
  16++E712 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  16++E716 00 00
  17++E718 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  17++E71C 00 00
  18++E71E 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  18++E722 00 00
  19++E724 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  19++E728 00 00
  20++E72A 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  20++E72E 00 00
  21++E730 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  21++E734 00 00
  22++E736 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  22++E73A 00 00
  23++E73C 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  23++E740 00 00
  24++E742 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  24++E746 00 00
  25++E748 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  25++E74C 00 00
  26++E74E 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  26++E752 02 33
  27++E754 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  27++E758 02 44
  28++E75A 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  28++E75E 01 33
  29++E760 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  29++E764 02 33
  30++E766 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  30++E76A 02 44
  31++E76C 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  31++E770 01 44
  32++E772 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  32++E776 00 00
  33++E778 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E77C 00 00
  34++E77E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E782 00 00
  35++E784 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  35++E788 00 00
  36++E78A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  36++E78E 00 00
  37++E790 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  37++E794 00 00
  38++E796 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  38++E79A 00 00
  39++E79C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  39++E7A0 00 00
  40++E7A2 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  40++E7A6 00 00
  41++E7A8 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  41++E7AC 00 00
  42++E7AE 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  42++E7B2 00 00
  43++E7B4 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  43++E7B8 00 00
  44++E7BA 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  44++E7BE 00 00
  45++E7C0 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  45++E7C4 00 00
  46++E7C6 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  46++E7CA 00 00
  47++E7CC 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  47++E7D0 00 00
  48++E7D2 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  48++E7D6 00 00
  49++E7D8 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  49++E7DC 00 00
  50++E7DE 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  50++E7E2 00 00
  51++E7E4 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  51++E7E8 00 00
  52++E7EA 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  52++E7EE 00 00
  53++E7F0 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  53++E7F4 00 00
  54++E7F6 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  54++E7FA 00 00
  55++E7FC 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  55++E800 00 00
  56++E802
  57++E802              LogoVertSize: equ $ - LogoVertices
  58++E802
  59++E802
  60++E802
  61++E802 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  62++E806 1F 00 04 08  	DB $1F, $00, $04, $08
  63++E80A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  64++E80E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  65++E812 1F 00 10 14  	DB $1F, $00, $10, $14
  66++E816 1F 00 14 18  	DB $1F, $00, $14, $18
  67++E81A 1F 00 18 1C  	DB $1F, $00, $18, $1C
  68++E81E 1F 00 1C 20  	DB $1F, $00, $1C, $20
  69++E822 1F 00 20 24  	DB $1F, $00, $20, $24
  70++E826 1F 00 24 28  	DB $1F, $00, $24, $28
  71++E82A 1F 00 28 2C  	DB $1F, $00, $28, $2C
  72++E82E 1F 00 2C 00  	DB $1F, $00, $2C, $00
  73++E832 1E 03 38 3C  	DB $1E, $03, $38, $3C
  74++E836 1E 01 3C 40  	DB $1E, $01, $3C, $40
  75++E83A 1E 04 40 44  	DB $1E, $04, $40, $44
  76++E83E 1E 01 44 38  	DB $1E, $01, $44, $38
  77++E842 1E 03 10 30  	DB $1E, $03, $10, $30
  78++E846 1E 22 30 34  	DB $1E, $22, $30, $34
  79++E84A 1E 04 34 20  	DB $1E, $04, $34, $20
  80++E84E 1E 11 20 10  	DB $1E, $11, $20, $10
  81++E852 1E 13 10 38  	DB $1E, $13, $10, $38
  82++E856 1E 13 30 3C  	DB $1E, $13, $30, $3C
  83++E85A 1E 24 34 40  	DB $1E, $24, $34, $40
  84++E85E 1E 14 20 44  	DB $1E, $14, $20, $44
  85++E862 1E 00 54 58  	DB $1E, $00, $54, $58
  86++E866 1E 00 58 60  	DB $1E, $00, $58, $60
  87++E86A 1E 00 60 64  	DB $1E, $00, $60, $64
  88++E86E 1E 00 5C 68  	DB $1E, $00, $5C, $68
  89++E872 1E 00 6C 70  	DB $1E, $00, $6C, $70
  90++E876 1E 00 70 74  	DB $1E, $00, $70, $74
  91++E87A 1E 00 78 7C  	DB $1E, $00, $78, $7C
  92++E87E 1E 00 80 84  	DB $1E, $00, $80, $84
  93++E882 1E 00 88 8C  	DB $1E, $00, $88, $8C
  94++E886 1E 00 90 94  	DB $1E, $00, $90, $94
  95++E88A 1E 00 94 9C  	DB $1E, $00, $94, $9C
  96++E88E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  97++E892 1E 00 A4 98  	DB $1E, $00, $A4, $98
  98++E896
  99++E896              LogoEdgesSize: equ $ - LogoEdges
 100++E896
 101++E896
 102++E896              LogoEdgesCnt: equ LogoEdgesSize/4
 103++E896
 104++E896
 105++E896 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 106++E89A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 107++E89E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 108++E8A2 9F 51 51 00  	DB $9F, $51, $51, $00
 109++E8A6 1F 51 51 00  	DB $1F, $51, $51, $00
 110++E8AA
 111++E8AA
 112++E8AA              LogoNormalsSize: equ $ - LogoNormals
 113++E8AA              LogoLen: equ $ - Logo
 114++E8AA
# file closed: ./Data/Ships/Logo.asm
 468+ E8AA                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8AA 01 13 24     Mamba:	DB $01, $13, $24
   2++E8AD 56 E9        	DW MambaEdges
   3++E8AF 70           	DB MambaEdgesSize
   4++E8B0 00 22        	DB $00, $22
   5++E8B2 96           	DB MambaVertSize
   6++E8B3 1C           	DB MambaEdgesCnt
   7++E8B4 00 96        	DB $00, $96
   8++E8B6 14           	DB MambaNormalsSize
   9++E8B7 19 5A 1E     	DB $19, $5A, $1E
  10++E8BA C6 E9        	DW MambaNormals
  11++E8BC 02 12        	DB $02, $12
  12++E8BE C0 E8        	DW MambaVertices
  13++E8C0
  14++E8C0 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  14++E8C4 10 32
  15++E8C6 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  15++E8CA 20 44
  16++E8CC 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  16++E8D0 21 44
  17++E8D2 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  17++E8D6 31 44
  18++E8D8 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  18++E8DC 30 44
  19++E8DE 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  19++E8E2 11 11
  20++E8E4 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  20++E8E8 11 11
  21++E8EA 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  21++E8EE 11 11
  22++E8F0 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  22++E8F4 11 11
  23++E8F6 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  23++E8FA 00 00
  24++E8FC 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  24++E900 00 00
  25++E902 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  25++E906 00 00
  26++E908 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  26++E90C 00 00
  27++E90E 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  27++E912 00 00
  28++E914 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  28++E918 00 00
  29++E91A 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  29++E91E 44 44
  30++E920 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  30++E924 44 44
  31++E926 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  31++E92A 44 44
  32++E92C 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  32++E930 44 44
  33++E932 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  33++E936 44 44
  34++E938 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  34++E93C 44 44
  35++E93E 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  35++E942 44 44
  36++E944 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  36++E948 44 44
  37++E94A 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  37++E94E 44 44
  38++E950 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  38++E954 44 44
  39++E956
  40++E956              MambaVertSize: equ $ - MambaVertices
  41++E956
  42++E956
  43++E956
  44++E956 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  45++E95A 1F 30 00 10  	DB $1F, $30, $00, $10
  46++E95E 1F 40 04 10  	DB $1F, $40, $04, $10
  47++E962 1E 42 04 08  	DB $1E, $42, $04, $08
  48++E966 1E 41 08 0C  	DB $1E, $41, $08, $0C
  49++E96A 1E 43 0C 10  	DB $1E, $43, $0C, $10
  50++E96E 0E 11 14 18  	DB $0E, $11, $14, $18
  51++E972 0C 11 18 1C  	DB $0C, $11, $18, $1C
  52++E976 0D 11 1C 20  	DB $0D, $11, $1C, $20
  53++E97A 0C 11 14 20  	DB $0C, $11, $14, $20
  54++E97E 14 00 24 2C  	DB $14, $00, $24, $2C
  55++E982 10 00 24 30  	DB $10, $00, $24, $30
  56++E986 10 00 28 34  	DB $10, $00, $28, $34
  57++E98A 14 00 28 38  	DB $14, $00, $28, $38
  58++E98E 0E 00 34 38  	DB $0E, $00, $34, $38
  59++E992 0E 00 2C 30  	DB $0E, $00, $2C, $30
  60++E996 0D 44 3C 40  	DB $0D, $44, $3C, $40
  61++E99A 0E 44 44 48  	DB $0E, $44, $44, $48
  62++E99E 0C 44 3C 48  	DB $0C, $44, $3C, $48
  63++E9A2 0C 44 40 44  	DB $0C, $44, $40, $44
  64++E9A6 07 44 50 54  	DB $07, $44, $50, $54
  65++E9AA 05 44 50 60  	DB $05, $44, $50, $60
  66++E9AE 05 44 54 60  	DB $05, $44, $54, $60
  67++E9B2 07 44 4C 58  	DB $07, $44, $4C, $58
  68++E9B6 05 44 4C 5C  	DB $05, $44, $4C, $5C
  69++E9BA 05 44 58 5C  	DB $05, $44, $58, $5C
  70++E9BE 1E 21 00 08  	DB $1E, $21, $00, $08
  71++E9C2 1E 31 00 0C  	DB $1E, $31, $00, $0C
  72++E9C6
  73++E9C6              MambaEdgesSize: equ $ - MambaEdges
  74++E9C6
  75++E9C6
  76++E9C6              MambaEdgesCnt: equ MambaEdgesSize/4
  77++E9C6
  78++E9C6
  79++E9C6 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  80++E9CA 1E 00 18 02  	DB $1E, $00, $18, $02
  81++E9CE 9E 20 40 10  	DB $9E, $20, $40, $10
  82++E9D2 1E 20 40 10  	DB $1E, $20, $40, $10
  83++E9D6 3E 00 00 7F  	DB $3E, $00, $00, $7F
  84++E9DA
  85++E9DA              MambaNormalsSize: equ $ - MambaNormals
  86++E9DA              MambaLen: equ $ - Mamba
  87++E9DA
# file closed: ./Data/Ships/Mamba.asm
 469+ E9DA                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++E9DA 00 06 40     Missile:	DB $00, $06, $40
   2++E9DD 56 EA        	DW MissileEdges
   3++E9DF 60           	DB MissileEdgesSize
   4++E9E0 00 0A        	DB $00, $0A
   5++E9E2 66           	DB MissileVertSize
   6++E9E3 18           	DB MissileEdgesCnt
   7++E9E4 00 00        	DB $00, $00
   8++E9E6 24           	DB MissileNormalsSize
   9++E9E7 0E 02 2C     	DB $0E, $02, $2C
  10++E9EA B6 EA        	DW MissileNormals
  11++E9EC 02 00        	DB $02, $00
  12++E9EE F0 E9        	DW MissileVertices
  13++E9F0
  14++E9F0 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  14++E9F4 10 32
  15++E9F6 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  15++E9FA 21 54
  16++E9FC 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  16++EA00 32 74
  17++EA02 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  17++EA06 30 76
  18++EA08 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  18++EA0C 10 65
  19++EA0E 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  19++EA12 74 88
  20++EA14 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  20++EA18 54 88
  21++EA1A 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  21++EA1E 65 88
  22++EA20 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  22++EA24 76 88
  23++EA26 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  23++EA2A 74 88
  24++EA2C 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  24++EA30 54 88
  25++EA32 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  25++EA36 65 88
  26++EA38 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  26++EA3C 76 88
  27++EA3E 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  27++EA42 76 77
  28++EA44 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  28++EA48 65 66
  29++EA4A 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  29++EA4E 74 77
  30++EA50 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  30++EA54 54 55
  31++EA56
  32++EA56              MissileVertSize: equ $ - MissileVertices
  33++EA56
  34++EA56
  35++EA56
  36++EA56 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  37++EA5A 1F 32 00 08  	DB $1F, $32, $00, $08
  38++EA5E 1F 30 00 0C  	DB $1F, $30, $00, $0C
  39++EA62 1F 10 00 10  	DB $1F, $10, $00, $10
  40++EA66 1F 24 04 08  	DB $1F, $24, $04, $08
  41++EA6A 1F 51 04 10  	DB $1F, $51, $04, $10
  42++EA6E 1F 60 0C 10  	DB $1F, $60, $0C, $10
  43++EA72 1F 73 08 0C  	DB $1F, $73, $08, $0C
  44++EA76 1F 74 08 14  	DB $1F, $74, $08, $14
  45++EA7A 1F 54 04 18  	DB $1F, $54, $04, $18
  46++EA7E 1F 65 10 1C  	DB $1F, $65, $10, $1C
  47++EA82 1F 76 0C 20  	DB $1F, $76, $0C, $20
  48++EA86 1F 86 1C 20  	DB $1F, $86, $1C, $20
  49++EA8A 1F 87 14 20  	DB $1F, $87, $14, $20
  50++EA8E 1F 84 14 18  	DB $1F, $84, $14, $18
  51++EA92 1F 85 18 1C  	DB $1F, $85, $18, $1C
  52++EA96 08 85 18 28  	DB $08, $85, $18, $28
  53++EA9A 08 87 14 24  	DB $08, $87, $14, $24
  54++EA9E 08 87 20 30  	DB $08, $87, $20, $30
  55++EAA2 08 85 1C 2C  	DB $08, $85, $1C, $2C
  56++EAA6 08 74 24 3C  	DB $08, $74, $24, $3C
  57++EAAA 08 54 28 40  	DB $08, $54, $28, $40
  58++EAAE 08 76 30 34  	DB $08, $76, $30, $34
  59++EAB2 08 65 2C 38  	DB $08, $65, $2C, $38
  60++EAB6
  61++EAB6              MissileEdgesSize: equ $ - MissileEdges
  62++EAB6
  63++EAB6
  64++EAB6              MissileEdgesCnt: equ MissileEdgesSize/4
  65++EAB6
  66++EAB6
  67++EAB6 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  68++EABA 5F 00 40 10  	DB $5F, $00, $40, $10
  69++EABE 1F 40 00 10  	DB $1F, $40, $00, $10
  70++EAC2 1F 00 40 10  	DB $1F, $00, $40, $10
  71++EAC6 1F 20 00 00  	DB $1F, $20, $00, $00
  72++EACA 5F 00 20 00  	DB $5F, $00, $20, $00
  73++EACE 9F 20 00 00  	DB $9F, $20, $00, $00
  74++EAD2 1F 00 20 00  	DB $1F, $00, $20, $00
  75++EAD6 3F 00 00 B0  	DB $3F, $00, $00, $B0
  76++EADA
  77++EADA
  78++EADA              MissileNormalsSize: equ $ - MissileNormals
  79++EADA              MissileLen: equ $ - Missile
  80++EADA
# file closed: ./Data/Ships/Missile.asm
 470+ EADA                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EADA 04 36 00     Monitor:	            DB $04, $36, $00
   2++EADD 56 EB                                DW MonitorEdges
   3++EADF 5C                                   DB MonitorEdgesSize
   4++EAE0 00 2A                                DB $00, $2A
   5++EAE2 66                                   DB MonitorVertSize
   6++EAE3 17                                   DB MonitorEdgesCnt
   7++EAE4 01 90                                DB $01, $90
   8++EAE6 2C                                   DB MonitorNormalsSize
   9++EAE7 28 84 10                             DB $28, $84, $10
  10++EAEA B2 EB                                DW MonitorNormals
  11++EAEC 00 37                                DB $00, $37
  12++EAEE F0 EA                                DW MonitorVertices
  13++EAF0 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  13++EAF4 FF FF
  14++EAF6 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  14++EAFA 23 01
  15++EAFC 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  15++EB00 50 34
  16++EB02 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  16++EB06 78 12
  17++EB08 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  17++EB0C 96 45
  18++EB0E 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  18++EB12 AA 28
  19++EB14 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  19++EB18 AA 49
  20++EB1A 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  20++EB1E AA 23
  21++EB20 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  21++EB24 AA 34
  22++EB26 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  22++EB2A AA 89
  23++EB2C 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  23++EB30 89 67
  24++EB32 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  24++EB36 00 00
  25++EB38 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  25++EB3C 00 00
  26++EB3E 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  26++EB42 77 77
  27++EB44 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  27++EB48 77 77
  28++EB4A 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  28++EB4E 66 66
  29++EB50 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  29++EB54 66 66
  30++EB56              MonitorVertSize:        equ $ - MonitorVertices
  31++EB56 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  32++EB5A 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  33++EB5E 1F 23 04 1C                          DB $1F, $23, $04, $1C
  34++EB62 1F 34 08 20                          DB $1F, $34, $08, $20
  35++EB66 1F 45 08 10                          DB $1F, $45, $08, $10
  36++EB6A 1F 50 00 08                          DB $1F, $50, $00, $08
  37++EB6E 1F 03 04 08                          DB $1F, $03, $04, $08
  38++EB72 1F 67 00 28                          DB $1F, $67, $00, $28
  39++EB76 1F 78 0C 28                          DB $1F, $78, $0C, $28
  40++EB7A 1F 89 24 28                          DB $1F, $89, $24, $28
  41++EB7E 1F 96 10 28                          DB $1F, $96, $10, $28
  42++EB82 1F 17 00 0C                          DB $1F, $17, $00, $0C
  43++EB86 1F 28 0C 14                          DB $1F, $28, $0C, $14
  44++EB8A 1F 49 18 10                          DB $1F, $49, $18, $10
  45++EB8E 1F 56 10 00                          DB $1F, $56, $10, $00
  46++EB92 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  47++EB96 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  48++EB9A 1F 4A 20 18                          DB $1F, $4A, $20, $18
  49++EB9E 1F 8A 14 24                          DB $1F, $8A, $14, $24
  50++EBA2 1F 9A 18 24                          DB $1F, $9A, $18, $24
  51++EBA6 0A 00 2C 30                          DB $0A, $00, $2C, $30
  52++EBAA 0A 77 34 38                          DB $0A, $77, $34, $38
  53++EBAE 0A 66 3C 40                          DB $0A, $66, $3C, $40
  54++EBB2              MonitorEdgesSize:       equ $ - MonitorEdges
  55++EBB2              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  56++EBB2 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  57++EBB6 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  58++EBBA 3F 36 1C 10                          DB $3F, $36, $1C, $10
  59++EBBE 3F 00 39 1C                          DB $3F, $00, $39, $1C
  60++EBC2 BF 36 1C 10                          DB $BF, $36, $1C, $10
  61++EBC6 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  62++EBCA DF 26 2F 12                          DB $DF, $26, $2F, $12
  63++EBCE 5F 26 2F 12                          DB $5F, $26, $2F, $12
  64++EBD2 7F 27 30 0D                          DB $7F, $27, $30, $0D
  65++EBD6 FF 27 30 0D                          DB $FF, $27, $30, $0D
  66++EBDA 3F 00 00 40                          DB $3F, $00, $00, $40
  67++EBDE              MonitorNormalsSize:     equ $ - MonitorNormals
  68++EBDE              MonitorLen:             equ $ - Monitor
  69++EBDE
# file closed: ./Data/Ships/Monitor.asm
 471+ EBDE                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EBDE 01 03 84     Moray:	                DB $01, $03, $84
   2++EBE1 48 EC                                DW MorayEdges
   3++EBE3 4C                                   DB MorayEdgesSize
   4++EBE4 00 1A                                DB $00, $1A
   5++EBE6 54                                   DB MorayVertSize
   6++EBE7 13                                   DB MorayEdgesCnt
   7++EBE8 00 32                                DB $00, $32
   8++EBEA 24                                   DB MorayNormalsSize
   9++EBEB 28 59 19                             DB $28, $59, $19
  10++EBEE 94 EC                                DW MorayNormals
  11++EBF0 02 2A                                DB $02, $2A
  12++EBF2 F4 EB                                DW MorayVertices
  13++EBF4 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  13++EBF8 02 78
  14++EBFA 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  14++EBFE 01 67
  15++EC00 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  15++EC04 FF FF
  16++EC06 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  16++EC0A 13 66
  17++EC0C 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  17++EC10 25 88
  18++EC12 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  18++EC16 45 78
  19++EC18 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  19++EC1C 34 67
  20++EC1E 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  20++EC22 44 44
  21++EC24 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  21++EC28 44 44
  22++EC2A 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  22++EC2E 44 44
  23++EC30 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  23++EC34 00 00
  24++EC36 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  24++EC3A 00 00
  25++EC3C 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  25++EC40 00 00
  26++EC42 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  26++EC46 00 00
  27++EC48              MorayVertSize:          equ $ - MorayVertices
  28++EC48 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  29++EC4C 1F 16 04 0C                          DB $1F, $16, $04, $0C
  30++EC50 18 36 0C 18                          DB $18, $36, $0C, $18
  31++EC54 18 47 14 18                          DB $18, $47, $14, $18
  32++EC58 18 58 10 14                          DB $18, $58, $10, $14
  33++EC5C 1F 28 00 10                          DB $1F, $28, $00, $10
  34++EC60 0F 67 04 18                          DB $0F, $67, $04, $18
  35++EC64 0F 78 00 14                          DB $0F, $78, $00, $14
  36++EC68 0F 02 00 08                          DB $0F, $02, $00, $08
  37++EC6C 0F 01 04 08                          DB $0F, $01, $04, $08
  38++EC70 11 13 08 0C                          DB $11, $13, $08, $0C
  39++EC74 11 25 08 10                          DB $11, $25, $08, $10
  40++EC78 0D 45 08 14                          DB $0D, $45, $08, $14
  41++EC7C 0D 34 08 18                          DB $0D, $34, $08, $18
  42++EC80 05 44 1C 20                          DB $05, $44, $1C, $20
  43++EC84 07 44 1C 24                          DB $07, $44, $1C, $24
  44++EC88 07 44 20 24                          DB $07, $44, $20, $24
  45++EC8C 05 00 28 2C                          DB $05, $00, $28, $2C
  46++EC90 05 00 30 34                          DB $05, $00, $30, $34
  47++EC94              MorayEdgesSize:         equ $ - MorayEdges
  48++EC94              MorayEdgesCnt:          equ MorayEdgesSize/4
  49++EC94 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  50++EC98 9F 0A 31 07                          DB $9F, $0A, $31, $07
  51++EC9C 1F 0A 31 07                          DB $1F, $0A, $31, $07
  52++ECA0 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  53++ECA4 78 00 34 4E                          DB $78, $00, $34, $4E
  54++ECA8 78 3B 1C 65                          DB $78, $3B, $1C, $65
  55++ECAC DF 48 63 32                          DB $DF, $48, $63, $32
  56++ECB0 5F 00 53 1E                          DB $5F, $00, $53, $1E
  57++ECB4 5F 48 63 32                          DB $5F, $48, $63, $32
  58++ECB8
  59++ECB8              MorayNormalsSize:       equ $ - MorayNormals
  60++ECB8              MorayLen:               equ $ - Moray
  61++ECB8
# file closed: ./Data/Ships/Moray.asm
 472+ ECB8                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECB8 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECBB 46 ED                                DW OphidianEdges
   3++ECBD 78                                   DB OphidianEdgesSize
   4++ECBE 00 3C                                DB $00, $3C
   5++ECC0 78                                   DB OphidianVertSize
   6++ECC1 1E                                   DB OphidianEdgesCnt
   7++ECC2 00 32                                DB $00, $32
   8++ECC4 30                                   DB OphidianNormalsSize
   9++ECC5 14 40 22                             DB $14, $40, $22
  10++ECC8 BE ED                                DW OphidianNormals
  11++ECCA 01 1A                                DB $01, $1A
  12++ECCC CE EC                                DW OphidianVertices
  13++ECCE 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  13++ECD2 68 02
  14++ECD4 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  14++ECD8 67 01
  15++ECDA 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  15++ECDE 22 01
  16++ECE0 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  16++ECE4 8A 24
  17++ECE6 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  17++ECEA 79 13
  18++ECEC 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  18++ECF0 FF FF
  19++ECF2 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  19++ECF6 9B 35
  20++ECF8 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  20++ECFC AB 45
  21++ECFE 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  21++ED02 BB 4A
  22++ED04 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  22++ED08 FF FF
  23++ED0A 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  23++ED0E FF FF
  24++ED10 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  24++ED14 BB 39
  25++ED16 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  25++ED1A FF FF
  26++ED1C 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  26++ED20 FF FF
  27++ED22 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  27++ED26 BB 9A
  28++ED28 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  28++ED2C FF FF
  29++ED2E 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  29++ED32 BB BB
  30++ED34 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  30++ED38 BB BB
  31++ED3A 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  31++ED3E BB BB
  32++ED40 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  32++ED44 BB BB
  33++ED46
  34++ED46              OphidianVertSize:       equ $ - OphidianVertices
  35++ED46 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  36++ED4A 1F 01 04 08                          DB $1F, $01, $04, $08
  37++ED4E 1F 02 00 08                          DB $1F, $02, $00, $08
  38++ED52 1F 12 08 14                          DB $1F, $12, $08, $14
  39++ED56 1F 13 10 14                          DB $1F, $13, $10, $14
  40++ED5A 1F 24 0C 14                          DB $1F, $24, $0C, $14
  41++ED5E 1F 35 14 18                          DB $1F, $35, $14, $18
  42++ED62 1F 45 14 1C                          DB $1F, $45, $14, $1C
  43++ED66 1F 28 00 0C                          DB $1F, $28, $00, $0C
  44++ED6A 1F 17 04 10                          DB $1F, $17, $04, $10
  45++ED6E 1F 39 10 2C                          DB $1F, $39, $10, $2C
  46++ED72 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  47++ED76 1F 67 04 3C                          DB $1F, $67, $04, $3C
  48++ED7A 1F 68 00 3C                          DB $1F, $68, $00, $3C
  49++ED7E 1F 79 10 3C                          DB $1F, $79, $10, $3C
  50++ED82 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  51++ED86 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  52++ED8A 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  53++ED8E 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  54++ED92 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  55++ED96 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  56++ED9A 1F AB 20 38                          DB $1F, $AB, $20, $38
  57++ED9E 10 BB 40 44                          DB $10, $BB, $40, $44
  58++EDA2 10 BB 44 48                          DB $10, $BB, $44, $48
  59++EDA6 10 BB 48 4C                          DB $10, $BB, $48, $4C
  60++EDAA 10 BB 4C 40                          DB $10, $BB, $4C, $40
  61++EDAE 10 39 30 34                          DB $10, $39, $30, $34
  62++EDB2 10 39 2C 30                          DB $10, $39, $2C, $30
  63++EDB6 10 4A 28 24                          DB $10, $4A, $28, $24
  64++EDBA 10 4A 24 20                          DB $10, $4A, $24, $20
  65++EDBE              OphidianEdgesSize:      equ $ - OphidianEdges
  66++EDBE              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  67++EDBE
  68++EDBE 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  69++EDC2 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  70++EDC6 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  71++EDCA 1F 10 22 02                          DB $1F, $10, $22, $02
  72++EDCE 9F 10 22 02                          DB $9F, $10, $22, $02
  73++EDD2 3F 00 25 03                          DB $3F, $00, $25, $03
  74++EDD6 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  75++EDDA 5F 0A 14 02                          DB $5F, $0A, $14, $02
  76++EDDE DF 0A 14 02                          DB $DF, $0A, $14, $02
  77++EDE2 7F 12 20 02                          DB $7F, $12, $20, $02
  78++EDE6 FF 12 20 02                          DB $FF, $12, $20, $02
  79++EDEA 3F 00 00 25                          DB $3F, $00, $00, $25
  80++EDEE
  81++EDEE              OphidianNormalsSize:    equ $ - OphidianNormals
  82++EDEE              OphidianLen:            equ $ - Ophidian
  83++EDEE
# file closed: ./Data/Ships/Ophidian.asm
 473+ EDEE                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EDEE 80 00 64     Plate:	DB $80, $00, $64
   2++EDF1 16 EE        	DW PlateEdges
   3++EDF3 10           	DB PlateEdgesSize
   4++EDF4 00 0A        	DB $00, $0A
   5++EDF6 12           	DB PlateVertSize
   6++EDF7 04           	DB PlateEdgesCnt
   7++EDF8 00 00        	DB $00, $00
   8++EDFA 04           	DB PlateNormalsSize
   9++EDFB 05 10 10     	DB $05, $10, $10
  10++EDFE 26 EE        	DW PlateNormals
  11++EE00 03 00        	DB $03, $00
  12++EE02 04 EE        	DW PlateVertices
  13++EE04
  14++EE04
  15++EE04 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  15++EE08 FF FF
  16++EE0A 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  16++EE0E FF FF
  17++EE10 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  17++EE14 FF FF
  18++EE16
  19++EE16              PlateVertSize: equ $ - PlateVertices
  20++EE16
  21++EE16
  22++EE16
  23++EE16 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  24++EE1A 10 FF 04 08  	DB $10, $FF, $04, $08
  25++EE1E 14 FF 08 0C  	DB $14, $FF, $08, $0C
  26++EE22 10 FF 0C 00  	DB $10, $FF, $0C, $00
  27++EE26
  28++EE26              PlateEdgesSize: equ $ - PlateEdges
  29++EE26
  30++EE26
  31++EE26              PlateEdgesCnt: equ PlateEdgesSize/4
  32++EE26
  33++EE26
  34++EE26 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  35++EE2A
  36++EE2A
  37++EE2A              PlateNormalsSize: equ $ - PlateNormals
  38++EE2A              PlateLen: equ $ - Plate
  39++EE2A
# file closed: ./Data/Ships/Plate.asm
 474+ EE2A                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE2A              ;\ -> &5BA1 \ Python = Type 12
   2++EE2A 05 00 19     Python:                 DB $05, $00, $19
   3++EE2D 82 EE                                DW PythonEdges
   4++EE2F 68                                   DB PythonEdgesSize
   5++EE30 00 2A                                DB $00,$2A
   6++EE32 42                                   DB PythonVertSize
   7++EE33 1A                                   DB PythonEdgesCnt
   8++EE34 00 00                                DB $00,$00
   9++EE36 34                                   DB PythonNormalsSize
  10++EE37 28 FA 14                             DB $28,$FA,$14
  11++EE3A EA EE                                DW PythonNormals
  12++EE3C 00 1B                                DB $00, $1B
  13++EE3E 40 EE                                DW PythonVertices
  14++EE40 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  14++EE44 10 32
  15++EE46 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  15++EE4A 10 54
  16++EE4C 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  16++EE50 FF FF
  17++EE52 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  17++EE56 FF FF
  18++EE58 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  18++EE5C 54 98
  19++EE5E 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  19++EE62 89 CC
  20++EE64 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  20++EE68 B8 CC
  21++EE6A 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  21++EE6E A9 CC
  22++EE70 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  22++EE74 32 76
  23++EE76 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  23++EE7A 76 BA
  24++EE7C 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  24++EE80 BA CC
  25++EE82              PythonVertSize          equ $  - PythonVertices
  26++EE82 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  26++EE86 1F 20 00 0C
  27++EE8A 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  27++EE8E 1E 10 00 04
  28++EE92 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  28++EE96 1D 51 04 08
  29++EE9A 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  29++EE9E 1D 40 04 0C
  30++EEA2 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  30++EEA6 1D A7 08 24
  31++EEAA 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  31++EEAE 1D B6 0C 24
  32++EEB2 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  32++EEB6 05 BB 0C 28
  33++EEBA 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  33++EEBE 05 AA 08 28
  34++EEC2 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  34++EEC6 1F B8 0C 18
  35++EECA 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  35++EECE 1F C9 14 1C
  36++EED2 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  36++EED6 1D CB 18 28
  37++EEDA 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  37++EEDE 1D BA 24 28
  38++EEE2 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  38++EEE6 1D 76 20 24
  39++EEEA              PythonEdgesSize         equ $  - PythonEdges
  40++EEEA              PythonEdgesCnt          equ PythonEdgesSize/4
  41++EEEA 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  41++EEEE 1E 1B 28 0B
  42++EEF2 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  42++EEF6 5E 1B 28 0B
  43++EEFA 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  43++EEFE 1E 13 26 00
  44++EF02 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  44++EF06 5E 13 26 00
  45++EF0A BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  45++EF0E 3E 19 25 0B
  46++EF12 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  46++EF16 FE 19 25 0B
  47++EF1A 3E 00 00 70                          DB $3E, $00, $00, $70
  48++EF1E              PythonNormalsSize       equ $  - PythonNormals
  49++EF1E              PythonLen               equ $  - Python
  50++EF1E
# file closed: ./Data/Ships/Python.asm
 475+ EF1E                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF1E 02 19 00     Python_P:	DB $02, $19, $00
   2++EF21 76 EF        	DW Python_PEdges
   3++EF23 68           	DB Python_PEdgesSize
   4++EF24 00 2A        	DB $00, $2A
   5++EF26 42           	DB Python_PVertSize
   6++EF27 1A           	DB Python_PEdgesCnt
   7++EF28 00 C8        	DB $00, $C8
   8++EF2A 34           	DB Python_PNormalsSize
   9++EF2B 28 FA 14     	DB $28, $FA, $14
  10++EF2E DE EF        	DW Python_PNormals
  11++EF30 00 1B        	DB $00, $1B
  12++EF32 34 EF        	DW Python_PVertices
  13++EF34
  14++EF34 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  14++EF38 10 32
  15++EF3A 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  15++EF3E 10 54
  16++EF40 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  16++EF44 FF FF
  17++EF46 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  17++EF4A FF FF
  18++EF4C 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  18++EF50 54 98
  19++EF52 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  19++EF56 89 CC
  20++EF58 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  20++EF5C B8 CC
  21++EF5E 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  21++EF62 A9 CC
  22++EF64 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  22++EF68 32 76
  23++EF6A 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  23++EF6E 76 BA
  24++EF70 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  24++EF74 BA CC
  25++EF76
  26++EF76              Python_PVertSize: equ $ - Python_PVertices
  27++EF76
  28++EF76
  29++EF76
  30++EF76 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  31++EF7A 1F 20 00 0C  	DB $1F, $20, $00, $0C
  32++EF7E 1F 31 00 08  	DB $1F, $31, $00, $08
  33++EF82 1F 10 00 04  	DB $1F, $10, $00, $04
  34++EF86 1F 59 08 10  	DB $1F, $59, $08, $10
  35++EF8A 1F 51 04 08  	DB $1F, $51, $04, $08
  36++EF8E 1F 37 08 20  	DB $1F, $37, $08, $20
  37++EF92 1F 40 04 0C  	DB $1F, $40, $04, $0C
  38++EF96 1F 62 0C 20  	DB $1F, $62, $0C, $20
  39++EF9A 1F A7 08 24  	DB $1F, $A7, $08, $24
  40++EF9E 1F 84 0C 10  	DB $1F, $84, $0C, $10
  41++EFA2 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  42++EFA6 07 88 0C 14  	DB $07, $88, $0C, $14
  43++EFAA 07 BB 0C 28  	DB $07, $BB, $0C, $28
  44++EFAE 07 99 08 14  	DB $07, $99, $08, $14
  45++EFB2 07 AA 08 28  	DB $07, $AA, $08, $28
  46++EFB6 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  47++EFBA 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  48++EFBE 1F C8 14 18  	DB $1F, $C8, $14, $18
  49++EFC2 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  50++EFC6 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  51++EFCA 1F CB 18 28  	DB $1F, $CB, $18, $28
  52++EFCE 1F 98 10 14  	DB $1F, $98, $10, $14
  53++EFD2 1F BA 24 28  	DB $1F, $BA, $24, $28
  54++EFD6 1F 54 04 10  	DB $1F, $54, $04, $10
  55++EFDA 1F 76 20 24  	DB $1F, $76, $20, $24
  56++EFDE
  57++EFDE              Python_PEdgesSize: equ $ - Python_PEdges
  58++EFDE
  59++EFDE
  60++EFDE              Python_PEdgesCnt: equ Python_PEdgesSize/4
  61++EFDE
  62++EFDE
  63++EFDE 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  64++EFE2 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  65++EFE6 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  66++EFEA 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  67++EFEE 9F 13 26 00  	DB $9F, $13, $26, $00
  68++EFF2 1F 13 26 00  	DB $1F, $13, $26, $00
  69++EFF6 DF 13 26 00  	DB $DF, $13, $26, $00
  70++EFFA 5F 13 26 00  	DB $5F, $13, $26, $00
  71++EFFE BF 19 25 0B  	DB $BF, $19, $25, $0B
  72++F002 3F 19 25 0B  	DB $3F, $19, $25, $0B
  73++F006 7F 19 25 0B  	DB $7F, $19, $25, $0B
  74++F00A FF 19 25 0B  	DB $FF, $19, $25, $0B
  75++F00E 3F 00 00 70  	DB $3F, $00, $00, $70
  76++F012
  77++F012
  78++F012              Python_PNormalsSize: equ $ - Python_PNormals
  79++F012              Python_PLen: equ $ - Python_P
  80++F012
# file closed: ./Data/Ships/Python_P.asm
 476+ F012                                      ENDIF
 477+ F012                                      IFDEF SHIPBANKC
 478+ F012 ~                                    include "Data/Ships/Rattler.asm"
 479+ F012 ~                                    include "Data/Ships/Rock_Hermit.asm"
 480+ F012 ~                                    include "Data/Ships/ShuttleType9.asm"
 481+ F012 ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 482+ F012 ~                                    include "Data/Ships/Sidewinder.asm"
 483+ F012 ~                                    include "Data/Ships/Splinter.asm"
 484+ F012 ~                                    include "Data/Ships/TestVector.asm"
 485+ F012 ~                                    include "Data/Ships/Thargoid.asm"
 486+ F012 ~                                    include "Data/Ships/Thargon.asm"
 487+ F012 ~                                    include "Data/Ships/TransportType10.asm"
 488+ F012 ~                                    include "Data/Ships/Viper.asm"
 489+ F012 ~                                    include "Data/Ships/Worm.asm"
 490+ F012                                      ENDIF
 491+ F012
 492+ F012
 493+ F012              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ F012              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ F012
 496+ F012
 497+ F012              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ F012              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ F012              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ F012              ; hull byte#1-2 area for missile lock, lo, hi
 501+ F012              ; hull byte#3   edges data info offset lo
 502+ F012              ; hull byte#4   faces data info offset lo
 503+ F012              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ F012              ; hull byte#6   gun vertex*4
 505+ F012              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ F012              ; hull byte#8   vertices*6
 507+ F012              ; hull byte#9	edge Count
 508+ F012              ; hull bytes#10-11 bounty lo hi
 509+ F012              ; hull byte#12  faces*4
 510+ F012              ; hull byte#13  dot beyond distance
 511+ F012              ; hull byte#14  energy
 512+ F012              ; hull byte#15  speed (end of 4th row)
 513+ F012              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ F012              ; hull byte#17  faces offset hi
 515+ F012              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ F012              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ F012              ; hull byte#20  Added Vertices for 20,21
 518+ F012
 519+ F012              ; Optimised version to be applied to add data brought in to here:
 520+ F012              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ F012              ; hull byte#1-2 area for missile lock, lo, hi
 522+ F012              ; hull byte#3   edges data info offset lo
 523+ F012              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ F012              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ F012              ; hull byte#6   gun vertex*4
 526+ F012              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ F012              ; hull byte#8   vertices*6
 528+ F012              ; hull byte#9	edge Count
 529+ F012              ; hull bytes#10-11 bounty lo hi
 530+ F012              ; hull byte#12  faces*4
 531+ F012              ; hull byte#13  dot beyond distance
 532+ F012              ; hull byte#14  energy
 533+ F012              ; hull byte#15  speed (end of 4th row)
 534+ F012              ; hull byte#16  faces data info offset lo (was 4)
 535+ F012              ; hull byte#17  faces offset hi
 536+ F012              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ F012              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ F012              ; hull byte#20  Added Vertices for 20,21
 539+ F012              ;
 540+ F012              ; Vertex Data Structure
 541+ F012              ; Byte 0 X1Lo
 542+ F012              ; Byte 1 X1Hi
 543+ F012              ; Byte 2 Y1Lo
 544+ F012              ; Byte 3 Y1Hi
 545+ F012              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ F012              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ F012              ;
 548+ F012              ;
 549+ F012              ; Edge Data Structure
 550+ F012              ; Byte 0
 551+ F012              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ F012              ; Byte 2 - Index to Vertex 1
 553+ F012              ; Byte 3 - Index to Vertex 2
 554+ F012              ;
 555+ F012              ; Normal/Faces Data Structure
 556+ F012              ;
 557+ F012              ;
 558+ F012              ;
 559+ F012              ; Original Data:
 560+ F012              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ F012              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ F012              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ F012              ;		\ hull byte#3   edges data info offset lo
 564+ F012              ;		\ hull byte#4   faces data info offset lo
 565+ F012              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ F012              ;		\ hull byte#6   gun vertex*4
 567+ F012              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ F012              ;		\ hull byte#8   vertices*6
 569+ F012              ;		\ hull bytes#10-11 bounty lo hi
 570+ F012              ;		\ hull byte#12  faces*4
 571+ F012              ;		\ hull byte#13  dot beyond distance
 572+ F012              ;		\ hull byte#14  energy
 573+ F012              ;		\ hull byte#15  speed (end of 4th row)
 574+ F012              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ F012              ;		\ hull byte#17  faces offset hi
 576+ F012              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ F012              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ F012              ; Corrected pointers
 579+ F012              ; &565D \ Cargo cannister = Type 5
 580+ F012              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ F012              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ F012              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ F012              ; Mapping Orginal to new
 584+ F012              ; 0    => 0
 585+ F012              ; 1-2  => 1-2
 586+ F012              ; 3    => EQU Edges
 587+ F012              ; 4    => EQU Normals
 588+ F012              ; 5    => EQU EdgesCnt
 589+ F012              ; 6    => 6
 590+ F012              ; 7    => 7
 591+ F012              ; 8    => EQU VertSize
 592+ F012              ; 9    => EQU EdgesCnt
 593+ F012              ; 10-11=> 10-11
 594+ F012              ; 12   => EQU  NormalsSize
 595+ F012              ; 13   => 13
 596+ F012              ; 14   => 14
 597+ F012              ; 15   => 15
 598+ F012              ; 16   => EQU Edges
 599+ F012              ; 17   => EQU Normals
 600+ F012              ; 18   => 18
 601+ F012              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 860  F012              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 861  F012                  SLOT    ShipModelsAddr
 862  F012                  PAGE    BankShipModelsC
 863  F012              	ORG     ShipModelsAddr, BankShipModelsC
 864  E000                  UNDEFINE SHIPBANKB
 865  E000                  DEFINE   SHIPBANKC 1
 866  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            ;
   8+ E000 ~            LineX4Offset		    equ 5
   9+ E000 ~            GunVertexOffset		    equ 6
  10+ E000 ~            ExplosionCtOffset	    equ 7
  11+ E000 ~            VertexCtX6Offset	    equ 8
  12+ E000 ~            EdgeCountOffset		    equ 9
  13+ E000 ~            BountyLoOffset		    equ 10
  14+ E000 ~            BountyHiOffset		    equ 11
  15+ E000 ~            FaceCtX4Offset		    equ 12
  16+ E000 ~            DotOffset			    equ 13
  17+ E000 ~            EnergyOffset		    equ 14
  18+ E000 ~            SpeedOffset			    equ 15
  19+ E000 ~            ;EdgeHiOffset		    equ	16
  20+ E000 ~            FaceAddyOffset		    equ 16
  21+ E000 ~            ;
  22+ E000 ~            QOffset				    equ 18
  23+ E000 ~            LaserOffset			    equ 19
  24+ E000 ~            VerticiesAddyOffset     equ 20
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000                             ENDIF
  31+ E000
  32+ E000              ;GINF:
  33+ E000                                      IFDEF SHIPBANKA
  34+ E000 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  35+ E000 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  36+ E000                                      ENDIF
  37+ E000                                      IFDEF SHIPBANKB
  38+ E000 ~            GetInfoB:
  39+ E000                                      ENDIF
  40+ E000                                      IFDEF SHIPBANKC
  41+ E000              GetInfoC:
  42+ E000                                      ENDIF
  43+ E000 4F                                   ld          c,a
  44+ E001 CB 2F                                sra         a
  45+ E003 CB 2F                                sra         a
  46+ E005 CB 2F                                sra         a
  47+ E007 CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  48+ E009 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  49+ E00A 21 7B E0                             ld          hl,ShipModelBankA
  50+ E00D ED 31                                add         hl,a
  51+ E00F 7E                                   ld          a,(hl)
  52+ E010                                      MMUSelectShipModelA
  52+ E010 ED 92 57    >					 nextreg ShipModelMMU,	    a
  53+ E013 79                                   ld          a,c
  54+ E014 50                                   ld          d,b
  55+ E015 1E 10                                ld          e,16
  56+ E017 ED 30                                mul
  57+ E019 93                                   sub         a,e
  58+ E01A 21 7E E0                             ld          hl,ShipModelTable
  59+ E01D ED 31                                add         hl,a
  60+ E01F ED 31                                add         hl,a
  61+ E021 5E                                   ld          e,(hl)
  62+ E022 23                                   inc         hl
  63+ E023 56                                   ld          d,(hl)
  64+ E024 C9                                   ret
  65+ E025
  66+ E025
  67+ E025              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
  68+ E025                                      IFDEF SHIPBANKA
  69+ E025 ~            CopyVerticesDataToUBnk:
  70+ E025 ~            CopyVerticesDataToUBnkA:
  71+ E025                                      ENDIF
  72+ E025                                      IFDEF SHIPBANKB
  73+ E025 ~            CopyVerticesDataToUBnkB:
  74+ E025                                      ENDIF
  75+ E025                                      IFDEF SHIPBANKC
  76+ E025              CopyVerticesDataToUBnkC:
  77+ E025                                      ENDIF
  78+ E025 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  79+ E028 11 14 C3                             ld          de,UBnkHullVerticies
  80+ E02B 06 00                                ld          b,0
  81+ E02D 3A 06 C3                             ld			a,(VertexCtX6Addr)
  82+ E030 4F                                   ld          c,a
  83+ E031 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  84+ E032 CD A1 8E                             call        memcopy_dma
  85+ E035 C9                                   ret
  86+ E036
  87+ E036                                      IFDEF SHIPBANKA
  88+ E036 ~            CopyEdgeDataToUBnk:
  89+ E036 ~            CopyEdgeDataToUBnkA:
  90+ E036                                      ENDIF
  91+ E036                                      IFDEF SHIPBANKB
  92+ E036 ~            CopyEdgeDataToUBnkB:
  93+ E036                                      ENDIF
  94+ E036                                      IFDEF SHIPBANKC
  95+ E036              CopyEdgeDataToUBnkC:
  96+ E036                                      ENDIF
  97+ E036 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  98+ E039 11 40 C4                             ld          de,UBnkHullEdges
  99+ E03C 06 00                                ld          b,0
 100+ E03E 3A 03 C3                             ld			a,(LineX4Addr)
 101+ E041 4F                                   ld          c,a
 102+ E042 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 103+ E043 CD A1 8E                             call        memcopy_dma
 104+ E046 C9                                   ret
 105+ E047
 106+ E047                                      IFDEF SHIPBANKA
 107+ E047 ~            CopyNormalDataToUBnk:
 108+ E047 ~            CopyNormalDataToUBnkA:
 109+ E047                                      ENDIF
 110+ E047                                      IFDEF SHIPBANKB
 111+ E047 ~            CopyNormalDataToUBnkB:
 112+ E047                                      ENDIF
 113+ E047                                      IFDEF SHIPBANKC
 114+ E047              CopyNormalDataToUBnkC:
 115+ E047                                      ENDIF
 116+ E047 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 117+ E04A 11 F0 C8                             ld          de,UBnkHullNormals
 118+ E04D 06 00                                ld          b,0
 119+ E04F 3A 0A C3                             ld          a,(FaceCtX4Addr)
 120+ E052 4F                                   ld          c,a
 121+ E053 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 122+ E054 CD A1 8E                             call        memcopy_dma
 123+ E057 C9                                   ret
 124+ E058
 125+ E058                                      IFDEF SHIPBANKA
 126+ E058 ~            CopyShipDataToUBnk:
 127+ E058 ~            CopyShipDataToUBnkA:
 128+ E058                                      ENDIF
 129+ E058                                      IFDEF SHIPBANKB
 130+ E058 ~            CopyShipDataToUBnkB:
 131+ E058                                      ENDIF
 132+ E058                                      IFDEF SHIPBANKC
 133+ E058              CopyShipDataToUBnkC:
 134+ E058                                      ENDIF
 135+ E058 32 FD C2                             ld			(UbnkShipType),a			; mark ship type in bank
 136+ E05B 21 0E E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 137+ E05E ED 31                                add         hl,a
 138+ E060 ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 139+ E062 4E                                   ld          c,(hl)
 140+ E063 23                                   inc         hl
 141+ E064 46                                   ld          b,(hl)                      ; bc now equals length of data set
 142+ E065 CD 00 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 143+ E068 EB                                   ex          de,hl                       ; hl = address of Ship Data
 144+ E069 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 145+ E06C 01 16 00                             ld          bc,22                       ; its now 22 bytes
 146+ E06F ED B0                                ldir                                    ; Copy over 22 bytes
 147+ E071 CD 25 E0                             call        CopyVerticesDataToUBnk
 148+ E074 CD 36 E0                             call        CopyEdgeDataToUBnk
 149+ E077 CD 47 E0                             call        CopyNormalDataToUBnk
 150+ E07A C9                                   ret
 151+ E07B
 152+ E07B              ; change to there are two banks
 153+ E07B              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 154+ E07B              ;
 155+ E07B
 156+ E07B
 157+ E07B
 158+ E07B
 159+ E07B              ; Ships in Bank A
 160+ E07B                                       IFDEF SHIPBANKA
 161+ E07B ~            ShipModelBankA           DB BankShipModelsA
 162+ E07B ~                                     DB BankShipModelsB
 163+ E07B ~                                     DB BankShipModelsC
 164+ E07B                                       ENDIF
 165+ E07B                                       IFDEF SHIPBANKB
 166+ E07B ~            ShipModelBankB           DB BankShipModelsA
 167+ E07B ~                                     DB BankShipModelsB
 168+ E07B ~                                     DB BankShipModelsC
 169+ E07B                                       ENDIF
 170+ E07B                                       IFDEF SHIPBANKC
 171+ E07B 3B           ShipModelBankC           DB BankShipModelsA
 172+ E07C 43                                    DB BankShipModelsB
 173+ E07D 44                                    DB BankShipModelsC
 174+ E07E                                       ENDIF
 175+ E07E                                       IFDEF SHIPBANKA
 176+ E07E ~            ShipModelTableA:         DW Adder
 177+ E07E ~                                     DW Anaconda
 178+ E07E ~                                     DW Asp_Mk_2
 179+ E07E ~                                     DW Asteroid
 180+ E07E ~                                     DW Boa
 181+ E07E ~                                     DW Boulder
 182+ E07E ~                                     DW Bushmaster
 183+ E07E ~                                     DW CargoType5
 184+ E07E ~                                     DW Chameleon
 185+ E07E ~                                     DW CobraMk3
 186+ E07E ~                                     DW Cobra_Mk_1
 187+ E07E ~                                     DW Cobra_Mk_3_P
 188+ E07E ~                                     DW Constrictor
 189+ E07E ~                                     DW Coriolis
 190+ E07E ~                                     DW Cougar
 191+ E07E ~                                     DW Dodo
 192+ E07E ~                                     DW Dragon
 193+ E07E ~                                     DW Escape_Pod
 194+ E07E ~                                     DW Fer_De_Lance
 195+ E07E ~                                     DW Gecko
 196+ E07E ~                                     DW Ghavial
 197+ E07E ~                                     DW Iguana
 198+ E07E ~                                     DW Krait
 199+ E07E ~                                     DW Logo
 200+ E07E ~            ShipVertexTableA:        DW AdderVertices
 201+ E07E ~                                     DW AnacondaVertices
 202+ E07E ~                                     DW Asp_Mk_2Vertices
 203+ E07E ~                                     DW AsteroidVertices
 204+ E07E ~                                     DW BoaVertices
 205+ E07E ~                                     DW BoulderVertices
 206+ E07E ~                                     DW BushmasterVertices
 207+ E07E ~                                     DW CargoType5Vertices
 208+ E07E ~                                     DW ChameleonVertices
 209+ E07E ~                                     DW CobraMk3Vertices
 210+ E07E ~                                     DW Cobra_Mk_1Vertices
 211+ E07E ~                                     DW Cobra_Mk_3_PVertices
 212+ E07E ~                                     DW ConstrictorVertices
 213+ E07E ~                                     DW CoriolisVertices
 214+ E07E ~                                     DW CougarVertices
 215+ E07E ~                                     DW DodoVertices
 216+ E07E ~            ShipEdgeTableA:          DW AdderEdges
 217+ E07E ~                                     DW AnacondaEdges
 218+ E07E ~                                     DW Asp_Mk_2Edges
 219+ E07E ~                                     DW AsteroidEdges
 220+ E07E ~                                     DW BoaEdges
 221+ E07E ~                                     DW BoulderEdges
 222+ E07E ~                                     DW BushmasterEdges
 223+ E07E ~                                     DW CargoType5Edges
 224+ E07E ~                                     DW ChameleonEdges
 225+ E07E ~                                     DW CobraMk3Edges
 226+ E07E ~                                     DW Cobra_Mk_1Edges
 227+ E07E ~                                     DW Cobra_Mk_3_PEdges
 228+ E07E ~                                     DW ConstrictorEdges
 229+ E07E ~                                     DW CoriolisEdges
 230+ E07E ~                                     DW CougarEdges
 231+ E07E ~                                     DW DodoEdges
 232+ E07E ~            ShipNormalTableA:        DW AdderNormals
 233+ E07E ~                                     DW AnacondaNormals
 234+ E07E ~                                     DW Asp_Mk_2Normals
 235+ E07E ~                                     DW AsteroidNormals
 236+ E07E ~                                     DW BoaNormals
 237+ E07E ~                                     DW BoulderNormals
 238+ E07E ~                                     DW BushmasterNormals
 239+ E07E ~                                     DW CargoType5Normals
 240+ E07E ~                                     DW ChameleonNormals
 241+ E07E ~                                     DW CobraMk3Normals
 242+ E07E ~                                     DW Cobra_Mk_1Normals
 243+ E07E ~                                     DW Cobra_Mk_3_PNormals
 244+ E07E ~                                     DW ConstrictorNormals
 245+ E07E ~                                     DW CoriolisNormals
 246+ E07E ~                                     DW CougarNormals
 247+ E07E ~                                     DW DodoNormals
 248+ E07E ~            ShipModelSizeTableA:     DW AdderLen
 249+ E07E ~                                     DW AnacondaLen
 250+ E07E ~                                     DW Asp_Mk_2Len
 251+ E07E ~                                     DW AsteroidLen
 252+ E07E ~                                     DW BoaLen
 253+ E07E ~                                     DW BoulderLen
 254+ E07E ~                                     DW BushmasterLen
 255+ E07E ~                                     DW CargoType5Len
 256+ E07E ~                                     DW ChameleonLen
 257+ E07E ~                                     DW CobraMk3Len
 258+ E07E ~                                     DW Cobra_Mk_1Len
 259+ E07E ~                                     DW Cobra_Mk_3_PLen
 260+ E07E ~                                     DW ConstrictorLen
 261+ E07E ~                                     DW CoriolisLen
 262+ E07E ~                                     DW CougarLen
 263+ E07E ~                                     DW DodoLen
 264+ E07E                                       ENDIF
 265+ E07E                                       IFDEF SHIPBANKB
 266+ E07E ~            ShipModelTableB:         DW Dragon
 267+ E07E ~                                     DW Escape_Pod
 268+ E07E ~                                     DW Fer_De_Lance
 269+ E07E ~                                     DW Gecko
 270+ E07E ~                                     DW Ghavial
 271+ E07E ~                                     DW Iguana
 272+ E07E ~                                     DW Krait
 273+ E07E ~                                     DW Logo
 274+ E07E ~                                     DW Mamba
 275+ E07E ~                                     DW Missile
 276+ E07E ~                                     DW Monitor
 277+ E07E ~                                     DW Moray
 278+ E07E ~                                     DW Ophidian
 279+ E07E ~                                     DW Plate
 280+ E07E ~                                     DW Python
 281+ E07E ~                                     DW Python_P
 282+ E07E ~            ShipVertexTableB:        DW DragonVertices
 283+ E07E ~                                     DW Escape_PodVertices
 284+ E07E ~                                     DW Fer_De_LanceVertices
 285+ E07E ~                                     DW GeckoVertices
 286+ E07E ~                                     DW GhavialVertices
 287+ E07E ~                                     DW IguanaVertices
 288+ E07E ~                                     DW KraitVertices
 289+ E07E ~                                     DW LogoVertices
 290+ E07E ~                                     DW MambaVertices
 291+ E07E ~                                     DW MissileVertices
 292+ E07E ~                                     DW MonitorVertices
 293+ E07E ~                                     DW MorayVertices
 294+ E07E ~                                     DW OphidianVertices
 295+ E07E ~                                     DW PlateVertices
 296+ E07E ~                                     DW PythonVertices
 297+ E07E ~                                     DW Python_PVertices
 298+ E07E ~            ShipEdgeTableB:          DW DragonEdges
 299+ E07E ~                                     DW Escape_PodEdges
 300+ E07E ~                                     DW Fer_De_LanceEdges
 301+ E07E ~                                     DW GeckoEdges
 302+ E07E ~                                     DW GhavialEdges
 303+ E07E ~                                     DW IguanaEdges
 304+ E07E ~                                     DW KraitEdges
 305+ E07E ~                                     DW LogoEdges
 306+ E07E ~                                     DW MambaEdges
 307+ E07E ~                                     DW MissileEdges
 308+ E07E ~                                     DW MonitorEdges
 309+ E07E ~                                     DW MorayEdges
 310+ E07E ~                                     DW OphidianEdges
 311+ E07E ~                                     DW PlateEdges
 312+ E07E ~                                     DW PythonEdges
 313+ E07E ~                                     DW Python_PEdges
 314+ E07E ~            ShipNormalTableB:        DW DragonNormals
 315+ E07E ~                                     DW Escape_PodNormals
 316+ E07E ~                                     DW Fer_De_LanceNormals
 317+ E07E ~                                     DW GeckoNormals
 318+ E07E ~                                     DW GhavialNormals
 319+ E07E ~                                     DW IguanaNormals
 320+ E07E ~                                     DW KraitNormals
 321+ E07E ~                                     DW LogoNormals
 322+ E07E ~                                     DW MambaNormals
 323+ E07E ~                                     DW MissileNormals
 324+ E07E ~                                     DW MonitorNormals
 325+ E07E ~                                     DW MorayNormals
 326+ E07E ~                                     DW OphidianNormals
 327+ E07E ~                                     DW PlateNormals
 328+ E07E ~                                     DW PythonNormals
 329+ E07E ~                                     DW Python_PNormals
 330+ E07E ~            ShipModelSizeTableB:     DW DragonLen
 331+ E07E ~                                     DW Escape_PodLen
 332+ E07E ~                                     DW Fer_De_LanceLen
 333+ E07E ~                                     DW GeckoLen
 334+ E07E ~                                     DW GhavialLen
 335+ E07E ~                                     DW IguanaLen
 336+ E07E ~                                     DW KraitLen
 337+ E07E ~                                     DW LogoLen
 338+ E07E ~                                     DW MambaLen
 339+ E07E ~                                     DW MissileLen
 340+ E07E ~                                     DW MonitorLen
 341+ E07E ~                                     DW MorayLen
 342+ E07E ~                                     DW OphidianLen
 343+ E07E ~                                     DW PlateLen
 344+ E07E ~                                     DW PythonLen
 345+ E07E ~                                     DW Python_PLen
 346+ E07E                                       ENDIF
 347+ E07E                                       IFDEF SHIPBANKC
 348+ E07E 1E E1        ShipModelTableC:         DW Rattler
 349+ E080 2A E2                                 DW Rock_Hermit
 350+ E082 02 E3                                 DW ShuttleType9
 351+ E084 36 E4                                 DW Shuttle_Mk_2
 352+ E086 56 E5                                 DW Sidewinder
 353+ E088 00 E6                                 DW Splinter
 354+ E08A 56 E6                                 DW TestVector
 355+ E08C B6 E6                                 DW Thargoid
 356+ E08E D4 E7                                 DW Thargon
 357+ E090 7E E8                                 DW TransportType10
 358+ E092 62 EA                                 DW Viper
 359+ E094 3E EB                                 DW Worm
 360+ E096 00 00                                 DW 0
 361+ E098 00 00                                 DW 0
 362+ E09A 00 00                                 DW 0
 363+ E09C 00 00                                 DW 0
 364+ E09E 34 E1        ShipVertexTableC:        DW RattlerVertices
 365+ E0A0 40 E2                                 DW Rock_HermitVertices
 366+ E0A2 18 E3                                 DW ShuttleType9Vertices
 367+ E0A4 4C E4                                 DW Shuttle_Mk_2Vertices
 368+ E0A6 6C E5                                 DW SidewinderVertices
 369+ E0A8 16 E6                                 DW SplinterVertices
 370+ E0AA 6C E6                                 DW TestVectorVertices
 371+ E0AC CC E6                                 DW ThargoidVertices
 372+ E0AE EA E7                                 DW ThargonVertices
 373+ E0B0 94 E8                                 DW TransportType10Vertices
 374+ E0B2 78 EA                                 DW ViperVertices
 375+ E0B4 54 EB                                 DW WormVertices
 376+ E0B6 00 00                                 DW 0
 377+ E0B8 00 00                                 DW 0
 378+ E0BA 00 00                                 DW 0
 379+ E0BC 00 00                                 DW 0
 380+ E0BE 8E E1        ShipEdgeTableC:          DW RattlerEdges
 381+ E0C0 76 E2                                 DW Rock_HermitEdges
 382+ E0C2 8A E3                                 DW ShuttleType9Edges
 383+ E0C4 B2 E4                                 DW Shuttle_Mk_2Edges
 384+ E0C6 A8 E5                                 DW SidewinderEdges
 385+ E0C8 2E E6                                 DW SplinterEdges
 386+ E0CA 96 E6                                 DW TestVectorEdges
 387+ E0CC 44 E7                                 DW ThargoidEdges
 388+ E0CE 26 E8                                 DW ThargonEdges
 389+ E0D0 72 E9                                 DW TransportType10Edges
 390+ E0D2 D2 EA                                 DW ViperEdges
 391+ E0D4 90 EB                                 DW WormEdges
 392+ E0D6 00 00                                 DW 0
 393+ E0D8 00 00                                 DW 0
 394+ E0DA 00 00                                 DW 0
 395+ E0DC 00 00                                 DW 0
 396+ E0DE F6 E1        ShipNormalTableC:        DW RattlerNormals
 397+ E0E0 CA E2                                 DW Rock_HermitNormals
 398+ E0E2 02 E4                                 DW ShuttleType9Normals
 399+ E0E4 22 E5                                 DW Shuttle_Mk_2Normals
 400+ E0E6 E4 E5                                 DW SidewinderNormals
 401+ E0E8 46 E6                                 DW SplinterNormals
 402+ E0EA A6 E6                                 DW TestVectorNormals
 403+ E0EC AC E7                                 DW ThargoidNormals
 404+ E0EE 62 E8                                 DW ThargonNormals
 405+ E0F0 2A EA                                 DW TransportType10Normals
 406+ E0F2 22 EB                                 DW ViperNormals
 407+ E0F4 D0 EB                                 DW WormNormals
 408+ E0F6 00 00                                 DW 0
 409+ E0F8 00 00                                 DW 0
 410+ E0FA 00 00                                 DW 0
 411+ E0FC 00 00                                 DW 0
 412+ E0FE 0C 01        ShipModelSizeTableC:     DW RattlerLen
 413+ E100 D8 00                                 DW Rock_HermitLen
 414+ E102 34 01                                 DW ShuttleType9Len
 415+ E104 20 01                                 DW Shuttle_Mk_2Len
 416+ E106 AA 00                                 DW SidewinderLen
 417+ E108 56 00                                 DW SplinterLen
 418+ E10A 60 00                                 DW TestVectorLen
 419+ E10C 1E 01                                 DW ThargoidLen
 420+ E10E AA 00                                 DW ThargonLen
 421+ E110 E4 01                                 DW TransportType10Len
 422+ E112 DC 00                                 DW ViperLen
 423+ E114 B2 00                                 DW WormLen
 424+ E116 00 00                                 DW 0
 425+ E118 00 00                                 DW 0
 426+ E11A 00 00                                 DW 0
 427+ E11C 00 00                                 DW 0
 428+ E11E                                       ENDIF
 429+ E11E
 430+ E11E
 431+ E11E                                      IFNDEF SHIPMODELTABLES
 432+ E11E ~                                    DEFINE SHIPMODELTABLES
 433+ E11E ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 434+ E11E ~            ShipModelBank:          EQU ShipModelBankA
 435+ E11E ~            ShipModelTable:         EQU ShipModelTableA
 436+ E11E ~            ShipVertexTable:        EQU ShipVertexTableA
 437+ E11E ~            ShipEdgeTable:          EQU ShipEdgeTableA
 438+ E11E ~            ShipNormalTable:        EQU ShipNormalTableA
 439+ E11E                                      ENDIF
 440+ E11E
 441+ E11E                                      IFDEF SHIPBANKA
 442+ E11E ~                                    include "Data/Ships/Adder.asm"
 443+ E11E ~                                    include "Data/Ships/Anaconda.asm"
 444+ E11E ~                                    include "Data/Ships/Asp_Mk_2.asm"
 445+ E11E ~                                    include "Data/Ships/Asteroid.asm"
 446+ E11E ~                                    include "Data/Ships/Boa.asm"
 447+ E11E ~                                    include "Data/Ships/Boulder.asm"
 448+ E11E ~                                    include "Data/Ships/Bushmaster.asm"
 449+ E11E ~                                    include "Data/Ships/CargoType5.asm"
 450+ E11E ~                                    include "Data/Ships/Chameleon.asm"
 451+ E11E ~                                    include "Data/Ships/CobraMk3.asm"
 452+ E11E ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 453+ E11E ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 454+ E11E ~                                    include "Data/Ships/Constrictor.asm"
 455+ E11E ~                                    include "Data/Ships/Coriolis.asm"
 456+ E11E ~                                    include "Data/Ships/Cougar.asm"
 457+ E11E ~                                    include "Data/Ships/Dodo.asm"
 458+ E11E                                      ENDIF
 459+ E11E                                      IFDEF SHIPBANKB
 460+ E11E ~                                    include "Data/Ships/Dragon.asm"
 461+ E11E ~                                    include "Data/Ships/Escape_Pod.asm"
 462+ E11E ~                                    include "Data/Ships/Fer_De_Lance.asm"
 463+ E11E ~                                    include "Data/Ships/Gecko.asm"
 464+ E11E ~                                    include "Data/Ships/Ghavial.asm"
 465+ E11E ~                                    include "Data/Ships/Iguana.asm"
 466+ E11E ~                                    include "Data/Ships/Krait.asm"
 467+ E11E ~                                    include "Data/Ships/Logo.asm"
 468+ E11E ~                                    include "Data/Ships/Mamba.asm"
 469+ E11E ~                                    include "Data/Ships/Missile.asm"
 470+ E11E ~                                    include "Data/Ships/Monitor.asm"
 471+ E11E ~                                    include "Data/Ships/Moray.asm"
 472+ E11E ~                                    include "Data/Ships/Ophidian.asm"
 473+ E11E ~                                    include "Data/Ships/Plate.asm"
 474+ E11E ~                                    include "Data/Ships/Python.asm"
 475+ E11E ~                                    include "Data/Ships/Python_P.asm"
 476+ E11E                                      ENDIF
 477+ E11E                                      IFDEF SHIPBANKC
 478+ E11E                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++E11E 02 17 70     Rattler:	DB $02, $17, $70
   2++E121 8E E1                    DW RattlerEdges
   3++E123 68                       DB RattlerEdgesSize
   4++E124 00 2A                    DB $00, $2A
   5++E126 5A                       DB RattlerVertSize
   6++E127 1A                       DB RattlerEdgesCnt
   7++E128 00 96                    DB $00, $96
   8++E12A 34                       DB RattlerNormalsSize
   9++E12B 0A 71 1F                 DB $0A, $71, $1F
  10++E12E F6 E1                    DW RattlerNormals
  11++E130 01 22                    DB $01, $22
  12++E132 34 E1                    DW RattlerVertices
  13++E134
  14++E134
  15++E134 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  15++E138 89 23
  16++E13A 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  16++E13E 9A 34
  17++E140 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  17++E144 78 12
  18++E146 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  18++E14A AB 45
  19++E14C 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  19++E150 67 01
  20++E152 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  20++E156 CC 5B
  21++E158 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  21++E15C CC 06
  22++E15E 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  22++E162 FF FF
  23++E164 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  23++E168 FF FF
  24++E16A 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  24++E16E CC CC
  25++E170 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  25++E174 CC CC
  26++E176 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  26++E17A CC CC
  27++E17C 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  27++E180 CC CC
  28++E182 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  28++E186 CC CC
  29++E188 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  29++E18C CC CC
  30++E18E
  31++E18E              RattlerVertSize: equ $ - RattlerVertices
  32++E18E
  33++E18E
  34++E18E 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  35++E192 1F 17 08 10  	DB $1F, $17, $08, $10
  36++E196 1F 28 00 08  	DB $1F, $28, $00, $08
  37++E19A 1F 39 00 04  	DB $1F, $39, $00, $04
  38++E19E 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  39++E1A2 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  40++E1A6 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  41++E1AA 1F 6C 18 20  	DB $1F, $6C, $18, $20
  42++E1AE 1F 01 10 1C  	DB $1F, $01, $10, $1C
  43++E1B2 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E1B6 1F 12 08 1C  	DB $1F, $12, $08, $1C
  45++E1BA 1F 78 08 20  	DB $1F, $78, $08, $20
  46++E1BE 1F 23 00 1C  	DB $1F, $23, $00, $1C
  47++E1C2 1F 89 00 20  	DB $1F, $89, $00, $20
  48++E1C6 1F 34 04 1C  	DB $1F, $34, $04, $1C
  49++E1CA 1F 9A 04 20  	DB $1F, $9A, $04, $20
  50++E1CE 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  51++E1D2 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  52++E1D6 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  53++E1DA 1F BC 14 20  	DB $1F, $BC, $14, $20
  54++E1DE 0A CC 24 28  	DB $0A, $CC, $24, $28
  55++E1E2 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  56++E1E6 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  57++E1EA 0A CC 30 34  	DB $0A, $CC, $30, $34
  58++E1EE 0A CC 34 38  	DB $0A, $CC, $34, $38
  59++E1F2 0A CC 38 30  	DB $0A, $CC, $38, $30
  60++E1F6
  61++E1F6              RattlerEdgesSize: equ $ - RattlerEdges
  62++E1F6
  63++E1F6
  64++E1F6              RattlerEdgesCnt: equ RattlerEdgesSize/4
  65++E1F6
  66++E1F6
  67++E1F6 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  68++E1FA 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  69++E1FE 9F 09 5D 12  	DB $9F, $09, $5D, $12
  70++E202 1F 09 5D 12  	DB $1F, $09, $5D, $12
  71++E206 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  72++E20A 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  73++E20E DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  74++E212 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  75++E216 DF 09 5D 12  	DB $DF, $09, $5D, $12
  76++E21A 5F 09 5D 12  	DB $5F, $09, $5D, $12
  77++E21E 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  78++E222 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  79++E226 3F 00 00 60  	DB $3F, $00, $00, $60
  80++E22A
  81++E22A              RattlerNormalsSize: equ $ - RattlerNormals
  82++E22A              RattlerLen: equ $ - Rattler
  83++E22A
# file closed: ./Data/Ships/Rattler.asm
 479+ E22A                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E22A 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E22D 76 E2        	DW Rock_HermitEdges
   3++E22F 54           	DB Rock_HermitEdgesSize
   4++E230 00 32        	DB $00, $32
   5++E232 36           	DB Rock_HermitVertSize
   6++E233 15           	DB Rock_HermitEdgesCnt
   7++E234 00 00        	DB $00, $00
   8++E236 38           	DB Rock_HermitNormalsSize
   9++E237 32 B4 1E     	DB $32, $B4, $1E
  10++E23A CA E2        	DW Rock_HermitNormals
  11++E23C 01 02        	DB $01, $02
  12++E23E 40 E2        	DW Rock_HermitVertices
  13++E240
  14++E240
  15++E240 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  15++E244 FF FF
  16++E246 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  16++E24A FF FF
  17++E24C 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  17++E250 FF FF
  18++E252 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  18++E256 FF FF
  19++E258 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  19++E25C 65 DC
  20++E25E 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  20++E262 FF FF
  21++E264 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  21++E268 10 32
  22++E26A 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  22++E26E FF FF
  23++E270 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  23++E274 98 BA
  24++E276
  25++E276
  26++E276              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  27++E276
  28++E276
  29++E276
  30++E276 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  31++E27A 1F D6 00 10  	DB $1F, $D6, $00, $10
  32++E27E 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  33++E282 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  34++E286 1F A3 04 08  	DB $1F, $A3, $04, $08
  35++E28A 1F 32 04 18  	DB $1F, $32, $04, $18
  36++E28E 1F 31 08 18  	DB $1F, $31, $08, $18
  37++E292 1F 41 08 14  	DB $1F, $41, $08, $14
  38++E296 1F 10 14 18  	DB $1F, $10, $14, $18
  39++E29A 1F 60 00 14  	DB $1F, $60, $00, $14
  40++E29E 1F 54 0C 14  	DB $1F, $54, $0C, $14
  41++E2A2 1F 20 00 18  	DB $1F, $20, $00, $18
  42++E2A6 1F 65 10 14  	DB $1F, $65, $10, $14
  43++E2AA 1F A8 04 20  	DB $1F, $A8, $04, $20
  44++E2AE 1F 87 04 1C  	DB $1F, $87, $04, $1C
  45++E2B2 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  46++E2B6 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  47++E2BA 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  48++E2BE 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  49++E2C2 1F BA 08 20  	DB $1F, $BA, $08, $20
  50++E2C6 1F 98 1C 20  	DB $1F, $98, $1C, $20
  51++E2CA
  52++E2CA              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  53++E2CA
  54++E2CA
  55++E2CA              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  56++E2CA
  57++E2CA
  58++E2CA 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  59++E2CE 5F 09 42 51  	DB $5F, $09, $42, $51
  60++E2D2 9F 48 40 1F  	DB $9F, $48, $40, $1F
  61++E2D6 DF 40 49 2F  	DB $DF, $40, $49, $2F
  62++E2DA 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  63++E2DE 1F 87 0F 23  	DB $1F, $87, $0F, $23
  64++E2E2 1F 26 4C 46  	DB $1F, $26, $4C, $46
  65++E2E6 BF 42 3B 27  	DB $BF, $42, $3B, $27
  66++E2EA FF 43 0F 50  	DB $FF, $43, $0F, $50
  67++E2EE 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  68++E2F2 FF 46 50 28  	DB $FF, $46, $50, $28
  69++E2F6 7F 3A 66 33  	DB $7F, $3A, $66, $33
  70++E2FA 3F 51 09 43  	DB $3F, $51, $09, $43
  71++E2FE 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  72++E302
  73++E302
  74++E302              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  75++E302              Rock_HermitLen: equ $ - Rock_Hermit
  76++E302
# file closed: ./Data/Ships/Rock_Hermit.asm
 480+ E302                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E302 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E305 8A E3        	DW ShuttleType9Edges
   3++E307 78           	DB ShuttleType9EdgesSize
   4++E308 00 26        	DB $00, $26
   5++E30A 72           	DB ShuttleType9VertSize
   6++E30B 1E           	DB ShuttleType9EdgesCnt
   7++E30C 00 00        	DB $00, $00
   8++E30E 34           	DB ShuttleType9NormalsSize
   9++E30F 16 20 08     	DB $16, $20, $08
  10++E312 02 E4        	DW ShuttleType9Normals
  11++E314 02 00        	DB $02, $00
  12++E316 18 E3        	DW ShuttleType9Vertices
  13++E318
  14++E318
  15++E318 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  15++E31C FF FF
  16++E31E 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  16++E322 FF FF
  17++E324 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  17++E328 FF FF
  18++E32A 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  18++E32E FF FF
  19++E330 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  19++E334 12 39
  20++E336 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  20++E33A 34 59
  21++E33C 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  21++E340 56 79
  22++E342 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  22++E346 17 89
  23++E348 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  23++E34C 99 99
  24++E34E 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  24++E352 99 99
  25++E354 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  25++E358 99 99
  26++E35A 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  26++E35E 99 99
  27++E360 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  27++E364 0A BC
  28++E366 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  28++E36A FF 02
  29++E36C 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  29++E370 01 F4
  30++E372 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  30++E376 A1 3F
  31++E378 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  31++E37C 6B 23
  32++E37E 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  32++E382 F8 C0
  33++E384 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  33++E388 4F 18
  34++E38A
  35++E38A              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  36++E38A
  37++E38A
  38++E38A
  39++E38A 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  40++E38E 1F 4A 04 08  	DB $1F, $4A, $04, $08
  41++E392 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  42++E396 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  43++E39A 1F 18 00 1C  	DB $1F, $18, $00, $1C
  44++E39E 18 12 00 10  	DB $18, $12, $00, $10
  45++E3A2 1F 23 04 10  	DB $1F, $23, $04, $10
  46++E3A6 18 34 04 14  	DB $18, $34, $04, $14
  47++E3AA 1F 45 08 14  	DB $1F, $45, $08, $14
  48++E3AE 0C 56 08 18  	DB $0C, $56, $08, $18
  49++E3B2 1F 67 0C 18  	DB $1F, $67, $0C, $18
  50++E3B6 18 78 0C 1C  	DB $18, $78, $0C, $1C
  51++E3BA 1F 39 10 14  	DB $1F, $39, $10, $14
  52++E3BE 1F 59 14 18  	DB $1F, $59, $14, $18
  53++E3C2 1F 79 18 1C  	DB $1F, $79, $18, $1C
  54++E3C6 1F 19 10 1C  	DB $1F, $19, $10, $1C
  55++E3CA 10 0C 00 30  	DB $10, $0C, $00, $30
  56++E3CE 10 0A 04 30  	DB $10, $0A, $04, $30
  57++E3D2 10 AB 08 30  	DB $10, $AB, $08, $30
  58++E3D6 10 BC 0C 30  	DB $10, $BC, $0C, $30
  59++E3DA 10 99 20 24  	DB $10, $99, $20, $24
  60++E3DE 07 99 24 28  	DB $07, $99, $24, $28
  61++E3E2 09 99 28 2C  	DB $09, $99, $28, $2C
  62++E3E6 07 99 20 2C  	DB $07, $99, $20, $2C
  63++E3EA 05 BB 34 38  	DB $05, $BB, $34, $38
  64++E3EE 08 BB 38 3C  	DB $08, $BB, $38, $3C
  65++E3F2 07 BB 34 3C  	DB $07, $BB, $34, $3C
  66++E3F6 05 AA 40 44  	DB $05, $AA, $40, $44
  67++E3FA 08 AA 44 48  	DB $08, $AA, $44, $48
  68++E3FE 07 AA 40 48  	DB $07, $AA, $40, $48
  69++E402              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  70++E402              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  71++E402
  72++E402 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  73++E406 5F 00 4A 04  	DB $5F, $00, $4A, $04
  74++E40A DF 33 33 17  	DB $DF, $33, $33, $17
  75++E40E 9F 4A 00 04  	DB $9F, $4A, $00, $04
  76++E412 9F 33 33 17  	DB $9F, $33, $33, $17
  77++E416 1F 00 4A 04  	DB $1F, $00, $4A, $04
  78++E41A 1F 33 33 17  	DB $1F, $33, $33, $17
  79++E41E 1F 4A 00 04  	DB $1F, $4A, $00, $04
  80++E422 5F 33 33 17  	DB $5F, $33, $33, $17
  81++E426 3F 00 00 6B  	DB $3F, $00, $00, $6B
  82++E42A 9F 29 29 5A  	DB $9F, $29, $29, $5A
  83++E42E 1F 29 29 5A  	DB $1F, $29, $29, $5A
  84++E432 5F 37 37 28  	DB $5F, $37, $37, $28
  85++E436
  86++E436
  87++E436              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  88++E436              ShuttleType9Len: equ $ - ShuttleType9
  89++E436
# file closed: ./Data/Ships/ShuttleType9.asm
 481+ E436                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E436 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E439 B2 E4        	DW Shuttle_Mk_2Edges
   3++E43B 70           	DB Shuttle_Mk_2EdgesSize
   4++E43C 00 26        	DB $00, $26
   5++E43E 66           	DB Shuttle_Mk_2VertSize
   6++E43F 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E440 00 00        	DB $00, $00
   8++E442 34           	DB Shuttle_Mk_2NormalsSize
   9++E443 0A 20 09     	DB $0A, $20, $09
  10++E446 22 E5        	DW Shuttle_Mk_2Normals
  11++E448 02 00        	DB $02, $00
  12++E44A 4C E4        	DW Shuttle_Mk_2Vertices
  13++E44C
  14++E44C
  15++E44C 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  15++E450 23 01
  16++E452 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  16++E456 34 00
  17++E458 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  17++E45C 15 00
  18++E45E 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  18++E462 26 11
  19++E464 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  19++E468 37 22
  20++E46A 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  20++E46E 58 04
  21++E470 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  21++E474 69 15
  22++E476 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  22++E47A 7A 26
  23++E47C 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  23++E480 7B 34
  24++E482 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  24++E486 BC 48
  25++E488 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  25++E48C 9C 58
  26++E48E 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  26++E492 AC 69
  27++E494 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  27++E498 BC 7A
  28++E49A 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  28++E49E CC CC
  29++E4A0 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  29++E4A4 CC CC
  30++E4A6 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  30++E4AA CC CC
  31++E4AC 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  31++E4B0 CC CC
  32++E4B2
  33++E4B2              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  34++E4B2
  35++E4B2
  36++E4B2
  37++E4B2 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  38++E4B6 1F 12 00 0C  	DB $1F, $12, $00, $0C
  39++E4BA 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E4BE 1F 30 00 04  	DB $1F, $30, $00, $04
  41++E4C2 1F 04 04 14  	DB $1F, $04, $04, $14
  42++E4C6 1F 05 08 14  	DB $1F, $05, $08, $14
  43++E4CA 1F 15 08 18  	DB $1F, $15, $08, $18
  44++E4CE 1F 16 0C 18  	DB $1F, $16, $0C, $18
  45++E4D2 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  46++E4D6 1F 27 10 1C  	DB $1F, $27, $10, $1C
  47++E4DA 1F 37 10 20  	DB $1F, $37, $10, $20
  48++E4DE 1F 34 04 20  	DB $1F, $34, $04, $20
  49++E4E2 1F 48 14 24  	DB $1F, $48, $14, $24
  50++E4E6 1F 58 14 28  	DB $1F, $58, $14, $28
  51++E4EA 1F 59 18 28  	DB $1F, $59, $18, $28
  52++E4EE 1F 69 18 2C  	DB $1F, $69, $18, $2C
  53++E4F2 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  54++E4F6 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  55++E4FA 1F 7B 20 30  	DB $1F, $7B, $20, $30
  56++E4FE 1F 4B 20 24  	DB $1F, $4B, $20, $24
  57++E502 1F 8C 24 28  	DB $1F, $8C, $24, $28
  58++E506 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  59++E50A 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  60++E50E 1F BC 30 24  	DB $1F, $BC, $30, $24
  61++E512 0A CC 34 38  	DB $0A, $CC, $34, $38
  62++E516 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  63++E51A 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  64++E51E 0A CC 40 34  	DB $0A, $CC, $40, $34
  65++E522
  66++E522              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  67++E522
  68++E522
  69++E522              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  70++E522
  71++E522
  72++E522 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  73++E526 DF 27 27 4E  	DB $DF, $27, $27, $4E
  74++E52A 5F 27 27 4E  	DB $5F, $27, $27, $4E
  75++E52E 1F 27 27 4E  	DB $1F, $27, $27, $4E
  76++E532 1F 00 60 00  	DB $1F, $00, $60, $00
  77++E536 9F 60 00 00  	DB $9F, $60, $00, $00
  78++E53A 5F 00 60 00  	DB $5F, $00, $60, $00
  79++E53E 1F 60 00 00  	DB $1F, $60, $00, $00
  80++E542 BF 42 42 16  	DB $BF, $42, $42, $16
  81++E546 FF 42 42 16  	DB $FF, $42, $42, $16
  82++E54A 7F 42 42 16  	DB $7F, $42, $42, $16
  83++E54E 3F 42 42 16  	DB $3F, $42, $42, $16
  84++E552 3F 00 00 60  	DB $3F, $00, $00, $60
  85++E556
  86++E556
  87++E556              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  88++E556              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  89++E556
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
 482+ E556                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E556 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E559 A8 E5        	DW SidewinderEdges
   3++E55B 3C           	DB SidewinderEdgesSize
   4++E55C 00 1E        	DB $00, $1E
   5++E55E 3C           	DB SidewinderVertSize
   6++E55F 0F           	DB SidewinderEdgesCnt
   7++E560 00 32        	DB $00, $32
   8++E562 1C           	DB SidewinderNormalsSize
   9++E563 14 46 25     	DB $14, $46, $25
  10++E566 E4 E5        	DW SidewinderNormals
  11++E568 02 10        	DB $02, $10
  12++E56A 6C E5        	DW SidewinderVertices
  13++E56C
  14++E56C 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  14++E570 10 54
  15++E572 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  15++E576 20 65
  16++E578 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  16++E57C 32 66
  17++E57E 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  17++E582 31 44
  18++E584 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  18++E588 10 32
  19++E58A 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  19++E58E 43 65
  20++E590 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  20++E594 33 33
  21++E596 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  21++E59A 33 33
  22++E59C 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  22++E5A0 33 33
  23++E5A2 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  23++E5A6 33 33
  24++E5A8
  25++E5A8
  26++E5A8              SidewinderVertSize: equ $ - SidewinderVertices
  27++E5A8
  28++E5A8
  29++E5A8
  30++E5A8 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  31++E5AC 1F 62 04 08  	DB $1F, $62, $04, $08
  32++E5B0 1F 20 04 10  	DB $1F, $20, $04, $10
  33++E5B4 1F 10 00 10  	DB $1F, $10, $00, $10
  34++E5B8 1F 41 00 0C  	DB $1F, $41, $00, $0C
  35++E5BC 1F 31 0C 10  	DB $1F, $31, $0C, $10
  36++E5C0 1F 32 08 10  	DB $1F, $32, $08, $10
  37++E5C4 1F 43 0C 14  	DB $1F, $43, $0C, $14
  38++E5C8 1F 63 08 14  	DB $1F, $63, $08, $14
  39++E5CC 1F 65 04 14  	DB $1F, $65, $04, $14
  40++E5D0 1F 54 00 14  	DB $1F, $54, $00, $14
  41++E5D4 0F 33 18 1C  	DB $0F, $33, $18, $1C
  42++E5D8 0C 33 1C 20  	DB $0C, $33, $1C, $20
  43++E5DC 0C 33 18 24  	DB $0C, $33, $18, $24
  44++E5E0 0C 33 20 24  	DB $0C, $33, $20, $24
  45++E5E4
  46++E5E4              SidewinderEdgesSize: equ $ - SidewinderEdges
  47++E5E4
  48++E5E4
  49++E5E4              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  50++E5E4
  51++E5E4
  52++E5E4 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  53++E5E8 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  54++E5EC 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  55++E5F0 3F 00 00 70  	DB $3F, $00, $00, $70
  56++E5F4 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  57++E5F8 5F 00 20 08  	DB $5F, $00, $20, $08
  58++E5FC 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  59++E600
  60++E600
  61++E600              SidewinderNormalsSize: equ $ - SidewinderNormals
  62++E600              SidewinderLen: equ $ - Sidewinder
  63++E600
# file closed: ./Data/Ships/Sidewinder.asm
 483+ E600                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E600 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E603 2E E6                                DW SplinterEdges
   3++E605 18                                   DB SplinterEdgesSize
   4++E606 00 16                                DB $00, $16
   5++E608 18                                   DB SplinterVertSize
   6++E609 06                                   DB SplinterEdgesCnt
   7++E60A 00 00                                DB $00, $00
   8++E60C 10                                   DB SplinterNormalsSize
   9++E60D 08 14 0A                             DB $08, $14, $0A
  10++E610 46 E6                                DW SplinterNormals
  11++E612 05 00                                DB $05, $00
  12++E614 16 E6                                DW SplinterVertices
  13++E616 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  13++E61A 12 33
  14++E61C 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  14++E620 02 33
  15++E622 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  15++E626 01 33
  16++E628 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  16++E62C 01 22
  17++E62E              SplinterVertSize:       equ $ - SplinterVertices
  18++E62E 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  19++E632 1F 03 04 08                          DB $1F, $03, $04, $08
  20++E636 1F 01 08 0C                          DB $1F, $01, $08, $0C
  21++E63A 1F 12 0C 00                          DB $1F, $12, $0C, $00
  22++E63E 1F 13 00 08                          DB $1F, $13, $00, $08
  23++E642 1F 02 0C 04                          DB $1F, $02, $0C, $04
  24++E646              SplinterEdgesSize:      equ $ - SplinterEdges
  25++E646              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  26++E646 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  27++E64A 1F 03 04 08                          DB $1F, $03, $04, $08
  28++E64E 1F 01 08 0C                          DB $1F, $01, $08, $0C
  29++E652 1F 12 0C 00                          DB $1F, $12, $0C, $00
  30++E656              SplinterNormalsSize:    equ $ - SplinterNormals
  31++E656              SplinterLen:            equ $ - Splinter
  32++E656
# file closed: ./Data/Ships/Splinter.asm
 484+ E656                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E656 03 41 23     TestVector:             DB $03, $41, $23
   2++E659 96 E6                                DW TestVectorEdges
   3++E65B 10                                   DB TestVectorEdgesSize
   4++E65C 54 2A                                DB $54,$2A
   5++E65E 2A                                   DB TestVectorVertSize
   6++E65F 04                                   DB TestVectorEdgesCnt
   7++E660 00 00                                DB $00,$00
   8++E662 10                                   DB TestVectorNormalsSize
   9++E663 32 96 1C                             DB $32,$96,$1C
  10++E666 A6 E6                                DW TestVectorNormals
  11++E668 04 01                                DB $04,$01
  12++E66A 6C E6                                DW TestVectorVertices
  13++E66C 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  13++E670 00 00
  14++E672 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  14++E676 00 00
  15++E678 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  15++E67C 01 01
  16++E67E 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  16++E682 01 01
  17++E684 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  17++E688 02 02
  18++E68A 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  18++E68E 02 02
  19++E690 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  19++E694 03 03
  20++E696              TestVectorVertSize      equ $  - TestVectorVertices
  21++E696 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  22++E69A 1F 00 08 0C                          DB $1F,$00,$08,$0C
  23++E69E 1F 00 10 14                          DB $1F,$00,$10,$14
  24++E6A2 1F 00 18 18                          DB $1F,$00,$18,$18
  25++E6A6              TestVectorEdgesSize     equ $  - TestVectorEdges
  26++E6A6              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  27++E6A6              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  28++E6A6 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  29++E6AA 1F 10 00 00                          DB $1F,$10,$00,$00
  30++E6AE 1F 00 00 10                          DB $1F,$00,$00,$10
  31++E6B2 1F 00 00 10                          DB $1F,$00,$00,$10
  32++E6B6              TestVectorNormalsSize   equ $  - TestVectorNormals
  33++E6B6              TestVectorLen           equ $  - TestVector
  34++E6B6
# file closed: ./Data/Ships/TestVector.asm
 485+ E6B6                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E6B6 00 26 49     Thargoid:	DB $00, $26, $49
   2++E6B9 44 E7        	DW ThargoidEdges
   3++E6BB 68           	DB ThargoidEdgesSize
   4++E6BC 3C 26        	DB $3C, $26
   5++E6BE 78           	DB ThargoidVertSize
   6++E6BF 1A           	DB ThargoidEdgesCnt
   7++E6C0 01 F4        	DB $01, $F4
   8++E6C2 28           	DB ThargoidNormalsSize
   9++E6C3 37 F0 27     	DB $37, $F0, $27
  10++E6C6 AC E7        	DW ThargoidNormals
  11++E6C8 02 16        	DB $02, $16
  12++E6CA CC E6        	DW ThargoidVertices
  13++E6CC
  14++E6CC 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  14++E6D0 40 88
  15++E6D2 20 44 00 5F  	DB $20, $44, $00, $5F, $10, $44
  15++E6D6 10 44
  16++E6D8 20 30 30 7F  	DB $20, $30, $30, $7F, $21, $44
  16++E6DC 21 44
  17++E6DE 20 00 44 3F  	DB $20, $00, $44, $3F, $32, $44
  17++E6E2 32 44
  18++E6E4 20 30 30 3F  	DB $20, $30, $30, $3F, $43, $55
  18++E6E8 43 55
  19++E6EA 20 44 00 1F  	DB $20, $44, $00, $1F, $54, $66
  19++E6EE 54 66
  20++E6F0 20 30 30 1F  	DB $20, $30, $30, $1F, $64, $77
  20++E6F4 64 77
  21++E6F6 20 00 44 1F  	DB $20, $00, $44, $1F, $74, $88
  21++E6FA 74 88
  22++E6FC 18 74 74 DF  	DB $18, $74, $74, $DF, $80, $99
  22++E700 80 99
  23++E702 18 A4 00 DF  	DB $18, $A4, $00, $DF, $10, $99
  23++E706 10 99
  24++E708 18 74 74 FF  	DB $18, $74, $74, $FF, $21, $99
  24++E70C 21 99
  25++E70E 18 00 A4 BF  	DB $18, $00, $A4, $BF, $32, $99
  25++E712 32 99
  26++E714 18 74 74 BF  	DB $18, $74, $74, $BF, $53, $99
  26++E718 53 99
  27++E71A 18 A4 00 9F  	DB $18, $A4, $00, $9F, $65, $99
  27++E71E 65 99
  28++E720 18 74 74 9F  	DB $18, $74, $74, $9F, $76, $99
  28++E724 76 99
  29++E726 18 00 A4 9F  	DB $18, $00, $A4, $9F, $87, $99
  29++E72A 87 99
  30++E72C 18 40 50 9E  	DB $18, $40, $50, $9E, $99, $99
  30++E730 99 99
  31++E732 18 40 50 BE  	DB $18, $40, $50, $BE, $99, $99
  31++E736 99 99
  32++E738 18 40 50 FE  	DB $18, $40, $50, $FE, $99, $99
  32++E73C 99 99
  33++E73E 18 40 50 DE  	DB $18, $40, $50, $DE, $99, $99
  33++E742 99 99
  34++E744
  35++E744              ThargoidVertSize: equ $ - ThargoidVertices
  36++E744
  37++E744
  38++E744
  39++E744 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  40++E748 1F 40 00 04  	DB $1F, $40, $00, $04
  41++E74C 1F 41 04 08  	DB $1F, $41, $04, $08
  42++E750 1F 42 08 0C  	DB $1F, $42, $08, $0C
  43++E754 1F 43 0C 10  	DB $1F, $43, $0C, $10
  44++E758 1F 54 10 14  	DB $1F, $54, $10, $14
  45++E75C 1F 64 14 18  	DB $1F, $64, $14, $18
  46++E760 1F 74 18 1C  	DB $1F, $74, $18, $1C
  47++E764 1F 80 00 20  	DB $1F, $80, $00, $20
  48++E768 1F 10 04 24  	DB $1F, $10, $04, $24
  49++E76C 1F 21 08 28  	DB $1F, $21, $08, $28
  50++E770 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  51++E774 1F 53 10 30  	DB $1F, $53, $10, $30
  52++E778 1F 65 14 34  	DB $1F, $65, $14, $34
  53++E77C 1F 76 18 38  	DB $1F, $76, $18, $38
  54++E780 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  55++E784 1F 98 20 3C  	DB $1F, $98, $20, $3C
  56++E788 1F 90 20 24  	DB $1F, $90, $20, $24
  57++E78C 1F 91 24 28  	DB $1F, $91, $24, $28
  58++E790 1F 92 28 2C  	DB $1F, $92, $28, $2C
  59++E794 1F 93 2C 30  	DB $1F, $93, $2C, $30
  60++E798 1F 95 30 34  	DB $1F, $95, $30, $34
  61++E79C 1F 96 34 38  	DB $1F, $96, $34, $38
  62++E7A0 1F 97 38 3C  	DB $1F, $97, $38, $3C
  63++E7A4 1E 99 40 44  	DB $1E, $99, $40, $44
  64++E7A8 1E 99 48 4C  	DB $1E, $99, $48, $4C
  65++E7AC
  66++E7AC              ThargoidEdgesSize: equ $ - ThargoidEdges
  67++E7AC
  68++E7AC              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  69++E7AC
  70++E7AC 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  71++E7B0 7F 67 3C 19  	DB $7F, $67, $3C, $19
  72++E7B4 7F 67 19 3C  	DB $7F, $67, $19, $3C
  73++E7B8 3F 67 19 3C  	DB $3F, $67, $19, $3C
  74++E7BC 1F 40 00 00  	DB $1F, $40, $00, $00
  75++E7C0 3F 67 3C 19  	DB $3F, $67, $3C, $19
  76++E7C4 1F 67 3C 19  	DB $1F, $67, $3C, $19
  77++E7C8 1F 67 19 3C  	DB $1F, $67, $19, $3C
  78++E7CC 5F 67 19 3C  	DB $5F, $67, $19, $3C
  79++E7D0 9F 30 00 00  	DB $9F, $30, $00, $00
  80++E7D4
  81++E7D4
  82++E7D4              ThargoidNormalsSize: equ $ - ThargoidNormals
  83++E7D4              ThargoidLen: equ $ - Thargoid
  84++E7D4
# file closed: ./Data/Ships/Thargoid.asm
 486+ E7D4                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E7D4 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E7D7 26 E8        	DW ThargonEdges
   3++E7D9 3C           	DB ThargonEdgesSize
   4++E7DA 00 12        	DB $00, $12
   5++E7DC 3C           	DB ThargonVertSize
   6++E7DD 0F           	DB ThargonEdgesCnt
   7++E7DE 00 32        	DB $00, $32
   8++E7E0 1C           	DB ThargonNormalsSize
   9++E7E1 14 14 1E     	DB $14, $14, $1E
  10++E7E4 62 E8        	DW ThargonNormals
  11++E7E6 02 10        	DB $02, $10
  12++E7E8 EA E7        	DW ThargonVertices
  13++E7EA
  14++E7EA
  15++E7EA 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  15++E7EE 01 55
  16++E7F0 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  16++E7F4 01 22
  17++E7F6 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  17++E7FA 02 33
  18++E7FC 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  18++E800 03 44
  19++E802 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  19++E806 04 55
  20++E808 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  20++E80C 15 66
  21++E80E 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  21++E812 12 66
  22++E814 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  22++E818 23 66
  23++E81A 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  23++E81E 34 66
  24++E820 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  24++E824 45 66
  25++E826
  26++E826              ThargonVertSize: equ $ - ThargonVertices
  27++E826
  28++E826
  29++E826 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  30++E82A 1F 20 04 08  	DB $1F, $20, $04, $08
  31++E82E 1F 30 08 0C  	DB $1F, $30, $08, $0C
  32++E832 1F 40 0C 10  	DB $1F, $40, $0C, $10
  33++E836 1F 50 00 10  	DB $1F, $50, $00, $10
  34++E83A 1F 51 00 14  	DB $1F, $51, $00, $14
  35++E83E 1F 21 04 18  	DB $1F, $21, $04, $18
  36++E842 1F 32 08 1C  	DB $1F, $32, $08, $1C
  37++E846 1F 43 0C 20  	DB $1F, $43, $0C, $20
  38++E84A 1F 54 10 24  	DB $1F, $54, $10, $24
  39++E84E 1F 61 14 18  	DB $1F, $61, $14, $18
  40++E852 1F 62 18 1C  	DB $1F, $62, $18, $1C
  41++E856 1F 63 1C 20  	DB $1F, $63, $1C, $20
  42++E85A 1F 64 20 24  	DB $1F, $64, $20, $24
  43++E85E 1F 65 24 14  	DB $1F, $65, $24, $14
  44++E862
  45++E862              ThargonEdgesSize: equ $ - ThargonEdges
  46++E862
  47++E862
  48++E862              ThargonEdgesCnt: equ ThargonEdgesSize/4
  49++E862
  50++E862
  51++E862 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  52++E866 5F 14 05 07  	DB $5F, $14, $05, $07
  53++E86A 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  54++E86E 3F 24 00 68  	DB $3F, $24, $00, $68
  55++E872 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  56++E876 1F 14 05 07  	DB $1F, $14, $05, $07
  57++E87A 1F 24 00 00  	DB $1F, $24, $00, $00
  58++E87E
  59++E87E
  60++E87E              ThargonNormalsSize: equ $ - ThargonNormals
  61++E87E              ThargonLen: equ $ - Thargon
  62++E87E
# file closed: ./Data/Ships/Thargon.asm
 487+ E87E                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E87E 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E881 72 E9        	DW TransportType10Edges
   3++E883 B8           	DB TransportType10EdgesSize
   4++E884 30 1A        	DB $30, $1A
   5++E886 DE           	DB TransportType10VertSize
   6++E887 2E           	DB TransportType10EdgesCnt
   7++E888 00 00        	DB $00, $00
   8++E88A 38           	DB TransportType10NormalsSize
   9++E88B 10 20 0A     	DB $10, $20, $0A
  10++E88E 2A EA        	DW TransportType10Normals
  11++E890 02 00        	DB $02, $00
  12++E892 94 E8        	DW TransportType10Vertices
  13++E894
  14++E894 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  14++E898 06 77
  15++E89A 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  15++E89E 01 77
  16++E8A0 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  16++E8A4 01 22
  17++E8A6 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  17++E8AA 02 33
  18++E8AC 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  18++E8B0 03 44
  19++E8B2 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  19++E8B6 04 55
  20++E8B8 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  20++E8BC 05 66
  21++E8BE 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  21++E8C2 FF FF
  22++E8C4 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  22++E8C8 17 89
  23++E8CA 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  23++E8CE 12 39
  24++E8D0 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  24++E8D4 34 5A
  25++E8D6 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  25++E8DA 56 AB
  26++E8DC 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  26++E8E0 89 CD
  27++E8E2 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  27++E8E6 39 DD
  28++E8E8 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  28++E8EC 3A DD
  29++E8EE 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  29++E8F2 AB CD
  30++E8F4 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  30++E8F8 77 77
  31++E8FA 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  31++E8FE 77 77
  32++E900 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  32++E904 77 77
  33++E906 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  33++E90A 77 77
  34++E90C 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  34++E910 77 77
  35++E912 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  35++E916 77 77
  36++E918 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  36++E91C 66 66
  37++E91E 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  37++E922 66 66
  38++E924 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  38++E928 66 66
  39++E92A 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  39++E92E 66 66
  40++E930 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  40++E934 66 66
  41++E936 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  41++E93A 66 66
  42++E93C 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  42++E940 66 66
  43++E942 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  43++E946 33 33
  44++E948 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  44++E94C 33 33
  45++E94E 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  45++E952 33 33
  46++E954 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  46++E958 33 33
  47++E95A 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  47++E95E 00 00
  48++E960 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  48++E964 00 00
  49++E966 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  49++E96A 00 00
  50++E96C 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  50++E970 00 00
  51++E972
  52++E972              TransportType10VertSize: equ $ - TransportType10Vertices
  53++E972
  54++E972
  55++E972
  56++E972 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  57++E976 1F 01 04 08  	DB $1F, $01, $04, $08
  58++E97A 1F 02 08 0C  	DB $1F, $02, $08, $0C
  59++E97E 1F 03 0C 10  	DB $1F, $03, $0C, $10
  60++E982 1F 04 10 14  	DB $1F, $04, $10, $14
  61++E986 1F 05 14 18  	DB $1F, $05, $14, $18
  62++E98A 1F 06 00 18  	DB $1F, $06, $00, $18
  63++E98E 10 67 00 1C  	DB $10, $67, $00, $1C
  64++E992 1F 17 04 20  	DB $1F, $17, $04, $20
  65++E996 0B 12 08 24  	DB $0B, $12, $08, $24
  66++E99A 1F 23 0C 24  	DB $1F, $23, $0C, $24
  67++E99E 1F 34 10 28  	DB $1F, $34, $10, $28
  68++E9A2 0B 45 14 28  	DB $0B, $45, $14, $28
  69++E9A6 1F 56 18 2C  	DB $1F, $56, $18, $2C
  70++E9AA 11 78 1C 20  	DB $11, $78, $1C, $20
  71++E9AE 11 19 20 24  	DB $11, $19, $20, $24
  72++E9B2 11 5A 28 2C  	DB $11, $5A, $28, $2C
  73++E9B6 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  74++E9BA 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  75++E9BE 13 8C 1C 30  	DB $13, $8C, $1C, $30
  76++E9C2 10 89 20 30  	DB $10, $89, $20, $30
  77++E9C6 1F 39 24 34  	DB $1F, $39, $24, $34
  78++E9CA 1F 3A 28 38  	DB $1F, $3A, $28, $38
  79++E9CE 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  80++E9D2 1F 9D 30 34  	DB $1F, $9D, $30, $34
  81++E9D6 1F 3D 34 38  	DB $1F, $3D, $34, $38
  82++E9DA 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  83++E9DE 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  84++E9E2 07 77 40 44  	DB $07, $77, $40, $44
  85++E9E6 07 77 48 4C  	DB $07, $77, $48, $4C
  86++E9EA 07 77 4C 50  	DB $07, $77, $4C, $50
  87++E9EE 07 77 48 50  	DB $07, $77, $48, $50
  88++E9F2 07 77 50 54  	DB $07, $77, $50, $54
  89++E9F6 07 66 58 5C  	DB $07, $66, $58, $5C
  90++E9FA 07 66 5C 60  	DB $07, $66, $5C, $60
  91++E9FE 07 66 60 58  	DB $07, $66, $60, $58
  92++EA02 07 66 64 68  	DB $07, $66, $64, $68
  93++EA06 07 66 68 6C  	DB $07, $66, $68, $6C
  94++EA0A 07 66 64 6C  	DB $07, $66, $64, $6C
  95++EA0E 07 66 6C 70  	DB $07, $66, $6C, $70
  96++EA12 06 33 74 78  	DB $06, $33, $74, $78
  97++EA16 06 33 7C 80  	DB $06, $33, $7C, $80
  98++EA1A 08 00 84 88  	DB $08, $00, $84, $88
  99++EA1E 05 00 88 8C  	DB $05, $00, $88, $8C
 100++EA22 05 00 8C 90  	DB $05, $00, $8C, $90
 101++EA26 05 00 90 84  	DB $05, $00, $90, $84
 102++EA2A
 103++EA2A              TransportType10EdgesSize: equ $ - TransportType10Edges
 104++EA2A
 105++EA2A
 106++EA2A              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 107++EA2A
 108++EA2A
 109++EA2A 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 110++EA2E BF 6F 30 07  	DB $BF, $6F, $30, $07
 111++EA32 FF 69 3F 15  	DB $FF, $69, $3F, $15
 112++EA36 5F 00 22 00  	DB $5F, $00, $22, $00
 113++EA3A 7F 69 3F 15  	DB $7F, $69, $3F, $15
 114++EA3E 3F 6F 30 07  	DB $3F, $6F, $30, $07
 115++EA42 1F 08 20 03  	DB $1F, $08, $20, $03
 116++EA46 9F 08 20 03  	DB $9F, $08, $20, $03
 117++EA4A 93 08 22 0B  	DB $93, $08, $22, $0B
 118++EA4E 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 119++EA52 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 120++EA56 13 08 22 0B  	DB $13, $08, $22, $0B
 121++EA5A 1F 00 26 11  	DB $1F, $00, $26, $11
 122++EA5E 1F 00 00 79  	DB $1F, $00, $00, $79
 123++EA62
 124++EA62
 125++EA62              TransportType10NormalsSize: equ $ - TransportType10Normals
 126++EA62              TransportType10Len: equ $ - TransportType10
 127++EA62
# file closed: ./Data/Ships/TransportType10.asm
 488+ EA62                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++EA62              ; Mapping Orginal to new
   2++EA62              ; 0    => 0
   3++EA62              ; 1-2  => 1-2
   4++EA62              ; 3    => EQU Edges
   5++EA62              ; 4    => EQU Normals
   6++EA62              ; 5    => EQU EdgesCnt
   7++EA62              ; 6    => 6
   8++EA62              ; 7    => 7
   9++EA62              ; 8    => EQU VertSize
  10++EA62              ; 9    => EQU EdgesCnt
  11++EA62              ; 10-11=> 10-11
  12++EA62              ; 12   => EQU  NormalsSize
  13++EA62              ; 13   => 13
  14++EA62              ; 14   => 14
  15++EA62              ; 15   => 15
  16++EA62              ; 16   => EQU Edges
  17++EA62              ; 17   => EQU Normals
  18++EA62              ; 18   => 18
  19++EA62              ; 19   => 19
  20++EA62              ;\ -> &5C93  \ Viper = Type 16
  21++EA62 00 F9 15     Viper:                  DB $00, $F9, $15
  22++EA65 D2 EA                                DW ViperEdges
  23++EA67 50                                   DB ViperEdgesSize
  24++EA68 00 2A                                DB $00,$2A
  25++EA6A 5A                                   DB ViperVertSize
  26++EA6B 14                                   DB ViperEdgesCnt
  27++EA6C 00 00                                DB $00,$00
  28++EA6E 1C                                   DB ViperNormalsSize
  29++EA6F 17 64 20                             DB $17, $64, $20
  30++EA72 22 EB                                DW ViperNormals
  31++EA74 01 11                                DB $01, $11
  32++EA76 78 EA                                DW ViperVertices
  33++EA78 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  33++EA7C 21 43
  34++EA7E 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  34++EA82 10 22
  35++EA84 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  35++EA88 43 55
  36++EA8A 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  36++EA8E 42 66
  37++EA90 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  37++EA94 31 66
  38++EA96 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  38++EA9A 54 66
  39++EA9C 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  39++EAA0 35 66
  40++EAA2 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  40++EAA6 20 66
  41++EAA8 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  41++EAAC 10 66
  42++EAAE 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  42++EAB2 66 66
  43++EAB4 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  43++EAB8 66 66
  44++EABA 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  44++EABE 66 66
  45++EAC0 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  45++EAC4 66 66
  46++EAC6 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  46++EACA 66 66
  47++EACC 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  47++EAD0 66 66
  48++EAD2              ViperVertSize           equ $  - ViperVertices
  49++EAD2 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  49++EAD6 1E 21 00 04
  50++EADA 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  50++EADE 1F 31 00 10
  51++EAE2 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  51++EAE6 1E 10 04 20
  52++EAEA 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  52++EAEE 1E 53 08 18
  53++EAF2 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  53++EAF6 1E 65 14 18
  54++EAFA 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  54++EAFE 1E 63 10 18
  55++EB02 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  55++EB06 1E 46 0C 14
  56++EB0A 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  56++EB0E 12 66 24 34
  57++EB12 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  57++EB16 12 66 28 38
  58++EB1A 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  58++EB1E 10 66 30 34
  59++EB22              ViperEdgesSize          equ $  - ViperEdges
  60++EB22              ViperEdgesCnt           equ ViperEdgesSize/4
  61++EB22 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  61++EB26 9F 16 21 0B
  62++EB2A 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  62++EB2E DF 16 21 0B
  63++EB32 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  63++EB36 5F 00 20 00
  64++EB3A 3F 00 00 30                          DB $3F, $00, $00, $30
  65++EB3E              ViperNormalsSize        equ $  - ViperNormals
  66++EB3E              ViperLen                equ $  - Viper
  67++EB3E
# file closed: ./Data/Ships/Viper.asm
 489+ EB3E                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EB3E 00 26 49     Worm:	DB $00, $26, $49
   2++EB41 90 EB        	DW WormEdges
   3++EB43 40           	DB WormEdgesSize
   4++EB44 00 12        	DB $00, $12
   5++EB46 3C           	DB WormVertSize
   6++EB47 10           	DB WormEdgesCnt
   7++EB48 00 00        	DB $00, $00
   8++EB4A 20           	DB WormNormalsSize
   9++EB4B 13 1E 17     	DB $13, $1E, $17
  10++EB4E D0 EB        	DW WormNormals
  11++EB50 03 08        	DB $03, $08
  12++EB52 54 EB        	DW WormVertices
  13++EB54
  14++EB54
  15++EB54
  16++EB54
  17++EB54
  18++EB54
  19++EB54
  20++EB54
  21++EB54
  22++EB54 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  22++EB58 02 77
  23++EB5A 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  23++EB5E 03 77
  24++EB60 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  24++EB64 01 24
  25++EB66 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  25++EB6A 01 35
  26++EB6C 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  26++EB70 24 77
  27++EB72 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  27++EB76 35 77
  28++EB78 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  28++EB7C 46 77
  29++EB7E 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  29++EB82 56 77
  30++EB84 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  30++EB88 14 66
  31++EB8A 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  31++EB8E 15 66
  32++EB90
  33++EB90              WormVertSize: equ $ - WormVertices
  34++EB90
  35++EB90
  36++EB90 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  37++EB94 1F 37 04 14  	DB $1F, $37, $04, $14
  38++EB98 1F 57 14 1C  	DB $1F, $57, $14, $1C
  39++EB9C 1F 67 1C 18  	DB $1F, $67, $1C, $18
  40++EBA0 1F 47 18 10  	DB $1F, $47, $18, $10
  41++EBA4 1F 27 10 00  	DB $1F, $27, $10, $00
  42++EBA8 1F 02 00 08  	DB $1F, $02, $00, $08
  43++EBAC 1F 03 04 0C  	DB $1F, $03, $04, $0C
  44++EBB0 1F 24 10 08  	DB $1F, $24, $10, $08
  45++EBB4 1F 35 14 0C  	DB $1F, $35, $14, $0C
  46++EBB8 1F 14 08 20  	DB $1F, $14, $08, $20
  47++EBBC 1F 46 20 18  	DB $1F, $46, $20, $18
  48++EBC0 1F 15 0C 24  	DB $1F, $15, $0C, $24
  49++EBC4 1F 56 24 1C  	DB $1F, $56, $24, $1C
  50++EBC8 1F 01 08 0C  	DB $1F, $01, $08, $0C
  51++EBCC 1F 16 20 24  	DB $1F, $16, $20, $24
  52++EBD0
  53++EBD0              WormEdgesSize: equ $ - WormEdges
  54++EBD0
  55++EBD0
  56++EBD0              WormEdgesCnt: equ WormEdgesSize/4
  57++EBD0
  58++EBD0
  59++EBD0 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  60++EBD4 1F 00 45 0E  	DB $1F, $00, $45, $0E
  61++EBD8 1F 46 42 23  	DB $1F, $46, $42, $23
  62++EBDC 9F 46 42 23  	DB $9F, $46, $42, $23
  63++EBE0 1F 40 31 0E  	DB $1F, $40, $31, $0E
  64++EBE4 9F 40 31 0E  	DB $9F, $40, $31, $0E
  65++EBE8 3F 00 00 C8  	DB $3F, $00, $00, $C8
  66++EBEC 5F 00 50 00  	DB $5F, $00, $50, $00
  67++EBF0
  68++EBF0
  69++EBF0              WormNormalsSize: equ $ - WormNormals
  70++EBF0              WormLen: equ $ - Worm
  71++EBF0
# file closed: ./Data/Ships/Worm.asm
 490+ EBF0                                      ENDIF
 491+ EBF0
 492+ EBF0
 493+ EBF0              ; TODO Later reorg these offsets for better 16 bit read - Done
 494+ EBF0              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 495+ EBF0
 496+ EBF0
 497+ EBF0              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 498+ EBF0              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 499+ EBF0              ; Scoop: 0 = no scoop 1= scoop , anything more?
 500+ EBF0              ; hull byte#1-2 area for missile lock, lo, hi
 501+ EBF0              ; hull byte#3   edges data info offset lo
 502+ EBF0              ; hull byte#4   faces data info offset lo
 503+ EBF0              ; hull byte#5   4*maxlines+1 for ship lines stack
 504+ EBF0              ; hull byte#6   gun vertex*4
 505+ EBF0              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 506+ EBF0              ; hull byte#8   vertices*6
 507+ EBF0              ; hull byte#9	edge Count
 508+ EBF0              ; hull bytes#10-11 bounty lo hi
 509+ EBF0              ; hull byte#12  faces*4
 510+ EBF0              ; hull byte#13  dot beyond distance
 511+ EBF0              ; hull byte#14  energy
 512+ EBF0              ; hull byte#15  speed (end of 4th row)
 513+ EBF0              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 514+ EBF0              ; hull byte#17  faces offset hi
 515+ EBF0              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 516+ EBF0              ; hull byte#19  laser|missile(=lower 3 bits)
 517+ EBF0              ; hull byte#20  Added Vertices for 20,21
 518+ EBF0
 519+ EBF0              ; Optimised version to be applied to add data brought in to here:
 520+ EBF0              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 521+ EBF0              ; hull byte#1-2 area for missile lock, lo, hi
 522+ EBF0              ; hull byte#3   edges data info offset lo
 523+ EBF0              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 524+ EBF0              ; hull byte#5   4*maxlines+1 for ship lines stack
 525+ EBF0              ; hull byte#6   gun vertex*4
 526+ EBF0              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 527+ EBF0              ; hull byte#8   vertices*6
 528+ EBF0              ; hull byte#9	edge Count
 529+ EBF0              ; hull bytes#10-11 bounty lo hi
 530+ EBF0              ; hull byte#12  faces*4
 531+ EBF0              ; hull byte#13  dot beyond distance
 532+ EBF0              ; hull byte#14  energy
 533+ EBF0              ; hull byte#15  speed (end of 4th row)
 534+ EBF0              ; hull byte#16  faces data info offset lo (was 4)
 535+ EBF0              ; hull byte#17  faces offset hi
 536+ EBF0              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 537+ EBF0              ; hull bute#19  laser|missile(=lower 3 bits)
 538+ EBF0              ; hull byte#20  Added Vertices for 20,21
 539+ EBF0              ;
 540+ EBF0              ; Vertex Data Structure
 541+ EBF0              ; Byte 0 X1Lo
 542+ EBF0              ; Byte 1 X1Hi
 543+ EBF0              ; Byte 2 Y1Lo
 544+ EBF0              ; Byte 3 Y1Hi
 545+ EBF0              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 546+ EBF0              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 547+ EBF0              ;
 548+ EBF0              ;
 549+ EBF0              ; Edge Data Structure
 550+ EBF0              ; Byte 0
 551+ EBF0              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 552+ EBF0              ; Byte 2 - Index to Vertex 1
 553+ EBF0              ; Byte 3 - Index to Vertex 2
 554+ EBF0              ;
 555+ EBF0              ; Normal/Faces Data Structure
 556+ EBF0              ;
 557+ EBF0              ;
 558+ EBF0              ;
 559+ EBF0              ; Original Data:
 560+ EBF0              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 561+ EBF0              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 562+ EBF0              ;		\ hull byte#1-2 area for missile lock, lo, hi
 563+ EBF0              ;		\ hull byte#3   edges data info offset lo
 564+ EBF0              ;		\ hull byte#4   faces data info offset lo
 565+ EBF0              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 566+ EBF0              ;		\ hull byte#6   gun vertex*4
 567+ EBF0              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 568+ EBF0              ;		\ hull byte#8   vertices*6
 569+ EBF0              ;		\ hull bytes#10-11 bounty lo hi
 570+ EBF0              ;		\ hull byte#12  faces*4
 571+ EBF0              ;		\ hull byte#13  dot beyond distance
 572+ EBF0              ;		\ hull byte#14  energy
 573+ EBF0              ;		\ hull byte#15  speed (end of 4th row)
 574+ EBF0              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 575+ EBF0              ;		\ hull byte#17  faces offset hi
 576+ EBF0              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 577+ EBF0              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 578+ EBF0              ; Corrected pointers
 579+ EBF0              ; &565D \ Cargo cannister = Type 5
 580+ EBF0              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 581+ EBF0              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 582+ EBF0              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 583+ EBF0              ; Mapping Orginal to new
 584+ EBF0              ; 0    => 0
 585+ EBF0              ; 1-2  => 1-2
 586+ EBF0              ; 3    => EQU Edges
 587+ EBF0              ; 4    => EQU Normals
 588+ EBF0              ; 5    => EQU EdgesCnt
 589+ EBF0              ; 6    => 6
 590+ EBF0              ; 7    => 7
 591+ EBF0              ; 8    => EQU VertSize
 592+ EBF0              ; 9    => EQU EdgesCnt
 593+ EBF0              ; 10-11=> 10-11
 594+ EBF0              ; 12   => EQU  NormalsSize
 595+ EBF0              ; 13   => 13
 596+ EBF0              ; 14   => 14
 597+ EBF0              ; 15   => 15
 598+ EBF0              ; 16   => EQU Edges
 599+ EBF0              ; 17   => EQU Normals
 600+ EBF0              ; 18   => 18
 601+ EBF0              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 867  EBF0              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 868  EBF0                  SLOT    SpritemembankAddr
 869  EBF0                  PAGE    BankSPRITE
 870  EBF0              	ORG     SpritemembankAddr, BankSPRITE
 871  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: ./Layer3Sprites/sprite_routines.asm
 872  E154                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: ./Layer3Sprites/sprite_load.asm
 873  E16B                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: ./Layer3Sprites/SpriteSheet.asm
 874  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 875  ED6B                  SLOT    ConsoleImageAddr
 876  ED6B                  PAGE    BankConsole
 877  ED6B              	ORG     ConsoleImageAddr, BankConsole
 878  E000
 879  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
 880  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 881  E900                  SLOT    ViewFrontAddr
 882  E900                  PAGE    BankFrontView
 883  E900                  ORG     ViewFrontAddr
 884  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010
   4+ C010              draw_front_view:        MMUSelectLayer1
   4+ C010 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   5+ C014 CD 47 E0                             call    l1_cls
   6+ C017 CD 52 E0                             call    l1_attr_cls
   7+ C01A                                      MMUSelectLayer2
   7+ C01A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ C01E CD 02 E0                             call     asm_l2_double_buffer_on
   9+ C021                                      MMUSelectSpriteBank
   9+ C021 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10+ C025 CD 3F E1                             call    sprite_cls_cursors
  11+ C028                                      MMUSelectConsoleBank
  11+ C028 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  12+ C02C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  13+ C02F 11 00 E0                             ld          de,ConsoleImageData
  14+ C032 01 00 08                             ld          bc, ScreenL1BottomLen
  15+ C035 CD A1 8E                             call        memcopy_dma
  16+ C038 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  17+ C03B 11 00 E8                             ld          de,ConsoleAttributes
  18+ C03E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  19+ C041 CD A1 8E                             call        memcopy_dma
  20+ C044 CD 08 8B                             call        InitialiseStars
  21+ C047 AF                                   xor         a
  22+ C048 32 81 92                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  23+ C04B C9                                   ret
  24+ C04C
  25+ C04C              dampenRate:             equ     $04
  26+ C04C 04           dampenRcounter:         DB      dampenRate
  27+ C04D 04           dampenPcounter:         DB      dampenRate
  28+ C04E AF           input_front_view:       xor         a
  29+ C04F 2A 06 8F                             ld      hl,(addr_Pressed_Accellerate)
  30+ C052 7E                                   ld      a,(hl)
  31+ C053                                      IfAIsZeroGoto     TestDecellerate
  31+ C053 FE 00       >				cp	0
  31+ C055 CA 71 C0    >				jp	z,TestDecellerate
  32+ C058 3A 6A 92                             ld      a,(SHIPMAXSPEED)
  33+ C05B 57                                   ld      d,a
  34+ C05C 3A 6B 92                             ld      a,(DELTA)
  35+ C05F                                      JumpIfAGTENusng d,TestDecellerate
  35+ C05F BA          >                        cp     d
  35+ C060 D2 71 C0    >                        jp		nc,TestDecellerate
  36+ C063 3C                                   inc     a
  37+ C064 32 6B 92                             ld      (DELTA),a
  38+ C067 2A 6C 92                             ld      hl,(DELT4Lo)
  39+ C06A ED 34 04 00                          add     hl,4
  40+ C06E 22 6C 92                             ld      (DELT4Lo),hl
  41+ C071 2A 08 8F     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  42+ C074 7E                                   ld      a,(hl)
  43+ C075                                      IfAIsZeroGoto   TestLeftPressed
  43+ C075 FE 00       >				cp	0
  43+ C077 CA 90 C0    >				jp	z,TestLeftPressed
  44+ C07A 3A 6B 92                             ld      a,(DELTA)
  45+ C07D                                      IfAIsZeroGoto   TestLeftPressed
  45+ C07D FE 00       >				cp	0
  45+ C07F CA 90 C0    >				jp	z,TestLeftPressed
  46+ C082 3D                                   dec     a
  47+ C083 32 6B 92                             ld      (DELTA),a
  48+ C086 2A 6C 92                             ld      hl,(DELT4Lo)
  49+ C089 2B                                   dec     hl
  50+ C08A 2B                                   dec     hl
  51+ C08B 2B                                   dec     hl
  52+ C08C 2B                                   dec     hl
  53+ C08D 22 6C 92                             ld      (DELT4Lo),hl
  54+ C090 2A FE 8E     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  55+ C093 7E                                   ld      a,(hl)
  56+ C094                                      IfAIsZeroGoto   TestRightPressed
  56+ C094 FE 00       >				cp	0
  56+ C096 CA C8 C0    >				jp	z,TestRightPressed
  57+ C099 3A 2C 92                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  58+ C09C 21 32 92                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
  59+ C09F BE                                   cp      (hl)
  60+ C0A0 28 26                                jr      z,TestRightPressed
  61+ C0A2                                      ;break
  62+ C0A2 3D                                   dec     a                                   ; increase joystick roll
  63+ C0A3 32 2C 92                             ld      (JSTX),a
  64+ C0A6 47                                   ld      b,a                                 ; b = current roll
  65+ C0A7 E6 80                                and     $80                                 ; a= sign of current rol
  66+ C0A9 32 2F 92                             ld      (ALP2),a                            ; set sign
  67+ C0AC EE 80                                xor     $80
  68+ C0AE 32 30 92                             ld      (ALP2FLIP),a                        ; and oppsite sign
  69+ C0B1 3A 2C 92                             ld      a,(JSTX)
  70+ C0B4                                      JumpOnBitClear a,7,.PositiveRoll
  70+ C0B4 CB 7F       >                        bit 	7,a
  70+ C0B6 CA BB C0    >                        jp      z,.PositiveRoll
  71+ C0B9 ED 44        .NegativeRoll:          neg
  72+ C0BB CB 3F        .PositiveRoll           srl     a
  73+ C0BD CB 3F                                srl     a
  74+ C0BF FE 08                                cp      8
  75+ C0C1 38 02                                jr      c,.NotIncreasedDamp
  76+ C0C3 CB 3F        .IncreasedDamp          srl     a
  77+ C0C5 32 2E 92     .NotIncreasedDamp:      ld      (ALP1),a
  78+ C0C8 2A 00 8F     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
  79+ C0CB 7E                                   ld      a,(hl)
  80+ C0CC                                      IfAIsZeroGoto   .DampenRoll
  80+ C0CC FE 00       >				cp	0
  80+ C0CE CA 02 C1    >				jp	z,.DampenRoll
  81+ C0D1 3A 2C 92                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  82+ C0D4 21 31 92                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
  83+ C0D7 BE                                   cp      (hl)
  84+ C0D8 28 42                                jr      z,TestDivePressed                   ; if its held then we don't dampen
  85+ C0DA                                      ;break
  86+ C0DA 3C                                   inc     a                                   ; increase joystick roll
  87+ C0DB 32 2C 92     .UpdateAlphRoll:        ld      (JSTX),a
  88+ C0DE 47                                   ld      b,a                                 ; b = current roll
  89+ C0DF E6 80                                and     $80                                 ; a= sign of current rol
  90+ C0E1 32 2F 92                             ld      (ALP2),a                            ; set sign
  91+ C0E4 EE 80                                xor     $80
  92+ C0E6 32 30 92                             ld      (ALP2FLIP),a                        ; and oppsite sign
  93+ C0E9 3A 2C 92                             ld      a,(JSTX)
  94+ C0EC ED 27 80                             test    $80
  95+ C0EF 28 02                                jr      z,  .PositiveRoll
  96+ C0F1 ED 44        .NegativeRoll:          neg
  97+ C0F3 CB 3F        .PositiveRoll           srl     a
  98+ C0F5 CB 3F                                srl     a
  99+ C0F7 FE 08                                cp      8
 100+ C0F9 38 02                                jr      c,.NotIncreasedDamp
 101+ C0FB CB 3F        .IncreasedDamp          srl     a
 102+ C0FD 32 2E 92     .NotIncreasedDamp:      ld      (ALP1),a
 103+ C100 18 1A                                jr      TestDivePressed
 104+ C102 21 4C C0     .DampenRoll:            ld      hl,dampenRcounter
 105+ C105 35                                   dec     (hl)
 106+ C106 20 14                                jr      nz,TestDivePressed
 107+ C108 3E 04                                ld      a,dampenRate
 108+ C10A 77                                   ld      (hl),a
 109+ C10B 3A 2C 92                             ld      a,(JSTX)
 110+ C10E FE 00                                cp      0
 111+ C110 28 0A                                jr      z, TestDivePressed
 112+ C112 CB 7F                                bit     7,a
 113+ C114 28 03                                jr      z,.PosRollDampen
 114+ C116 3C           .NegRollDampen:         inc     a
 115+ C117 18 01                                jr      .ApplyRollDampen
 116+ C119 3D           .PosRollDampen:         dec     a
 117+ C11A 18 BF        .ApplyRollDampen:       jr      .UpdateAlphRoll
 118+ C11C              ; Dive and Climb input
 119+ C11C 2A 02 8F     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 120+ C11F 7E                                   ld      a,(hl)
 121+ C120                                      IfAIsZeroGoto   TestClimbPressed
 121+ C120 FE 00       >				cp	0
 121+ C122 CA 54 C1    >				jp	z,TestClimbPressed
 122+ C125 3A 21 92                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 123+ C128 21 26 92                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 124+ C12B BE                                   cp      (hl)
 125+ C12C 28 26                                jr      z,TestClimbPressed
 126+ C12E                                      ;break
 127+ C12E 3D                                   dec     a                                   ; increase joystick roll
 128+ C12F 32 21 92                            ld      (JSTY),a
 129+ C132 47                                   ld      b,a                                 ; b = current roll
 130+ C133 E6 80                                and     $80                                 ; a= sign of current rol
 131+ C135 32 23 92                             ld      (BET2),a                            ; set sign
 132+ C138 EE 80                                xor     $80
 133+ C13A 32 24 92                             ld      (BET2FLIP),a                        ; and oppsite sign
 134+ C13D 3A 21 92                             ld      a,(JSTY)
 135+ C140                                      JumpOnBitClear a,7,.PositiveClimb
 135+ C140 CB 7F       >                        bit 	7,a
 135+ C142 CA 47 C1    >                        jp      z,.PositiveClimb
 136+ C145 ED 44        .NegativeClimb:         neg
 137+ C147 CB 3F        .PositiveClimb          srl     a
 138+ C149 CB 3F                                srl     a
 139+ C14B FE 08                                cp      8
 140+ C14D 38 02                                jr      c,.NotIncreasedDamp
 141+ C14F CB 3F        .IncreasedDamp          srl     a
 142+ C151 32 22 92     .NotIncreasedDamp:      ld      (BET1),a
 143+ C154 2A 04 8F     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 144+ C157 7E                                   ld      a,(hl)
 145+ C158                                      IfAIsZeroGoto   .DampenPitch
 145+ C158 FE 00       >				cp	0
 145+ C15A CA 8E C1    >				jp	z,.DampenPitch
 146+ C15D 3A 21 92                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 147+ C160 21 25 92                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 148+ C163 BE                                   cp      (hl)
 149+ C164 28 42                                jr      z,ForwardViewDoneKeys
 150+ C166                                      ;break
 151+ C166 3C                                   inc     a                                   ; increase joystick roll
 152+ C167 32 21 92     .UpdateAlphPitch:       ld      (JSTY),a
 153+ C16A 47                                   ld      b,a                                 ; b = current roll
 154+ C16B E6 80                                and     $80                                 ; a= sign of current rol
 155+ C16D 32 23 92                             ld      (BET2),a                            ; set sign
 156+ C170 EE 80                                xor     $80
 157+ C172 32 24 92                             ld      (BET2FLIP),a                        ; and oppsite sign
 158+ C175 3A 21 92                             ld      a,(JSTY)
 159+ C178                                      JumpOnBitClear a,7,.PositiveClimb
 159+ C178 CB 7F       >                        bit 	7,a
 159+ C17A CA 7F C1    >                        jp      z,.PositiveClimb
 160+ C17D ED 44        .NegativeClimb:         neg
 161+ C17F CB 3F        .PositiveClimb          srl     a
 162+ C181 CB 3F                                srl     a
 163+ C183 FE 08                                cp      8
 164+ C185 38 02                                jr      c,.NotIncreasedDamp
 165+ C187 CB 3F        .IncreasedDamp          srl     a
 166+ C189 32 22 92     .NotIncreasedDamp:      ld      (BET1),a
 167+ C18C 18 1A                                jr      ForwardViewDoneKeys
 168+ C18E 21 4D C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 169+ C191 35                                   dec     (hl)
 170+ C192 20 14                                jr      nz,ForwardViewDoneKeys
 171+ C194 3E 04                                ld      a,dampenRate
 172+ C196 77                                   ld      (hl),a
 173+ C197 3A 21 92                             ld      a,(JSTY)
 174+ C19A FE 00                                cp      0
 175+ C19C 28 0A                                jr      z,ForwardViewDoneKeys
 176+ C19E CB 7F                                bit     7,a
 177+ C1A0 28 03                                jr      z,.PosPitchDampen
 178+ C1A2 3C           .NegPitchDampen:        inc     a
 179+ C1A3 18 01                                jr      .ApplyPitchDampen
 180+ C1A5 3D           .PosPitchDampen:        dec     a
 181+ C1A6 18 BF        .ApplyPitchDampen:      jr      .UpdateAlphPitch
 182+ C1A8 C9           ForwardViewDoneKeys:    ret
 183+ C1A9
 184+ C1A9
 185+ C1A9
 186+ C1A9
 187+ C1A9
 188+ C1A9
 189+ C1A9
# file closed: ./Views/Front_View.asm
 885  C1A9              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 886  C1A9                  SLOT    MenuStatusAddr
 887  C1A9                  PAGE    BankMenuStatus
 888  C1A9                  ORG     MenuStatusAddr
 889  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 31 AA  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 12 93  						DW $0290,CommanderName
   5+ C018 08 0B 45 AA  						DW $0B08,txt_present_system
   6+ C01C 08 13 58 AA  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 6B AA  						DW $1B08,txt_condition
   8+ C024 08 23 79 AA  						DW $2308,txt_fuel
   9+ C028 08 2B 87 AA  						DW $2B08,txt_cash
  10+ C02C 08 33 95 AA  						DW $3308,txt_legal_status
  11+ C030 08 3B A3 AA  						DW $3B08,txt_rating
  12+ C034 08 4B B1 AA  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A E7 95     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A E5 95                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     2
 156+ CD95 3A 25 93     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                    ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 7B 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 1A                                ld      b,EQ_ITEM_COUNT
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 1A                                ld      b,EQ_ITEM_COUNT                             ; CurrentGameMaxEquipment
 170+ CDB5 DD 21 02 96                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A 25 93     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B 1C 93                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A 25 93     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B 69 93                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 3A 98                             ld		hl, ConditionNameIdx
 223+ CE45 CD 3C 99                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD 0E AB     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 BC AA                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 2E 93     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 1B 9A                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 2A 9A     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 21 9A     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 41 93  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 47 99                             call	getRankIndex
 260+ CEA9 21 26 99                             ld		hl, RankingNameIdx
 261+ CEAC CD 3C 99                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 47 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c,.FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD 80 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A 81 92     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 E7 92     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A 47 93     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E 7E           PrintEquipment:         ld		a,(hl)
 324+ CF1F FE 00                                cp		0
 325+ CF21 C8                                   ret		z
 326+ CF22 78                                   ld		a,b
 327+ CF23 CD 04 9E     PrintEquipmentDirect:	call	expandTokenToString
 328+ CF26 21 C3 9D                             ld		hl,TextBuffer
 329+ CF29 ED 5B 38 C0                          ld		de,(equipment_cursor)
 330+ CF2D CD 80 E0                             call	l1_print_at
 331+ CF30 ED 4B 38 C0                          ld		bc,(equipment_cursor)
 332+ CF34 78                                   ld		a,b
 333+ CF35 C6 08                                add		a,8
 334+ CF37 47                                   ld		b,a
 335+ CF38 ED 43 38 C0                          ld		(equipment_cursor),bc
 336+ CF3C FE FF                                cp		equipmax_row
 337+ CF3E 38 07                                jr		c,.SkipColUpdate
 338+ CF40 21 78 53     .ColUpdate:             ld		hl,equipment_position2
 339+ CF43 22 38 C0                             ld		(equipment_cursor),hl
 340+ CF46 C9                                   ret
 341+ CF47 78           .SkipColUpdate:	        ld		a,b
 342+ CF48 32 39 C0                             ld		(equipment_cursor+1), a
 343+ CF4B C9                                   ret
 344+ CF4C
 345+ CF4C              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF4C
   2++CF4C                  MMUSelectLayer1
   2++CF4C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF50 CD 47 E0     	call	l1_cls
   4++CF53 3E 07        	ld		a,7
   5++CF55 CD 53 E0     	call	l1_attr_cls_to_a
   6++CF58                  MMUSelectLayer2
   6++CF58 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF5C CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF5F CD C9 E0     	call	l2_cls	; Get some space
   9++CF62              	MMUSelectSpriteBank
   9++CF62 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF66 CD 3F E1     	call    sprite_cls_cursors
  11++CF69
  12++CF69
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF69 3E 08                                ld		a,8
 347+ CF6B 32 7B 92                             ld		(MenuIdMax),a
 348+ CF6E 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF71 11 FD BE                             ld		de,$BEFD
 350+ CF74 3E C0                                ld		a,$C0
 351+ CF76                                      MMUSelectLayer2
 351+ CF76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF7A CD F6 E1                             call	l2_draw_box
 353+ CF7D 01 01 0A                             ld		bc,$0A01
 354+ CF80 11 C0 FE                             ld		de,$FEC0
 355+ CF83 CD 62 E2                             call	l2_draw_horz_line
 356+ CF86 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF89 CD BC CE                             call    draw_STAT_items
 358+ CF8C CD F3 CD                             call    draw_STAT_maintext
 359+ CF8F C9                                   ret
 360+ CF90
 361+ CF90              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF90              ; Handles all the input whilst in the market menu
 363+ CF90 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF92 CD F2 8F                             call    is_key_pressed
 365+ CF95 CC A1 CF                             call    z,STAT_UpPressed
 366+ CF98 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF9A CD F2 8F                             call    is_key_pressed
 368+ CF9D CC B3 CF                             call    z,STAT_DownPressed
 369+ CFA0 C9                                   ret
 370+ CFA1
 371+ CFA1              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CFA1 AF           STAT_UpPressed:         xor     a
 373+ CFA2 32 3A C0                             ld      (STAT_selected_row),a
 374+ CFA5 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CFA8 FE 00                                cp      0
 376+ CFAA C8                                   ret     z
 377+ CFAB 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CFAC 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CFAF CD BC CE                             call    draw_STAT_items
 380+ CFB2 C9                                   ret
 381+ CFB3              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CFB3 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CFB5 32 3A C0                             ld      (STAT_selected_row),a
 384+ CFB8 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CFBB 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CFBC 05                                   dec     b
 387+ CFBD 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CFC0 B8                                   cp      b
 389+ CFC1 C8                                   ret     z
 390+ CFC2 FE 09                                cp      STAT_eqip_window_len-1
 391+ CFC4 28 05                                jr      z, .check_scroll_down
 392+ CFC6 21 3A C0                             ld      hl,STAT_selected_row
 393+ CFC9 34                                   inc     (hl)
 394+ CFCA C9                                   ret
 395+ CFCB 47           .check_scroll_down:     ld      b,a
 396+ CFCC 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFCF 80                                   add     b
 398+ CFD0 3C                                   inc     a
 399+ CFD1 21 3C C0                             ld      hl,STAT_current_end
 400+ CFD4                                      ReturnIfAGTEusng      (hl)
 400+ CFD4 BE          >				  cp    (hl)
 400+ CFD5 D0          >                  ret	 nc
 401+ CFD6 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFD9 34                                   inc     (hl)
 403+ CFDA CD BC CE                             call    draw_STAT_items
 404+ CFDD C9                                   ret
 405+ CFDE
# file closed: ./Menus/status_menu.asm
 890  CFDE
 891  CFDE              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 892  CFDE
 893  CFDE                  SLOT    MenuEquipSAddr
 894  CFDE                  PAGE    BankMenuEquipS
 895  CFDE                  ORG     MenuEquipSAddr
 896  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 89 9E  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD 80 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A E7 95     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A E5 95                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD 80 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 7B 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 47 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c,.FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD 80 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 47 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 53 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 7B 92                             ld      (MenuIdMax),a
 380+ D40C 3A 25 93     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 1C 93                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A 25 93     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 04 9E                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD F2 8F                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD F2 8F                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD F2 8F                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD F2 8F                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >				  cp    (hl)
 481+ D4EA D0          >                  ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 25 93     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 33 9F                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 00 96                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 EA 95     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 33 9F                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A 25 93     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 2D 93     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A E7 95     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A E5 95                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 00 96     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 E9 95    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 2D 93     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 EA 95                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 33 9F                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 00 96                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 00 96     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 EA 95                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 46 9F                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 897  D651
 898  D651
 899  D651                  SLOT    LaunchShipAddr
 900  D651                  PAGE    BankLaunchShip
 901  D651                  ORG     LaunchShipAddr
 902  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087              init_countdown          EQU $FF
  33+ C087 00           launch_countdown        DB  $0000
  34+ C088 0E C0        launch_table_idx        DW launchdraw_table
  35+ C08A 00           current_offsetX         db 0
  36+ C08B 00           current_offsetY         db 0
  37+ C08C
  38+ C08C
  39+ C08C              LaunchTubeEdges         MMUSelectLayer2
  39+ C08C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ C090 01 00 00                             ld      bc,$0000
  41+ C093 11 92 01                             ld      de,$0192
  42+ C096 78           .drawLoop1              ld      a,b
  43+ C097 FE 80                                cp      128
  44+ C099 28 25                                jr      z,.DoneEdge
  45+ C09B F5                                   push    af
  46+ C09C C5 D5 C5 D5                          push    bc,,de,,bc,,de
  47+ C0A0 CD 55 E2                             call    l2_draw_horz_dma_bank
  48+ C0A3 D1 C1                                pop     bc,,de
  49+ C0A5 3E FF                                ld      a,$FF
  50+ C0A7 92                                   sub     d
  51+ C0A8 4F                                   ld      c,a
  52+ C0A9 0C                                   inc     c
  53+ C0AA CD 55 E2                             call    l2_draw_horz_dma_bank
  54+ C0AD D1 C1                                pop     bc,,de
  55+ C0AF 78                                   ld      a,b
  56+ C0B0 FE 40                                cp      64
  57+ C0B2 30 06                                jr      nc,.ReduceLoop
  58+ C0B4 14                                   inc     d
  59+ C0B5 14                                   inc     d
  60+ C0B6 F1                                   pop     af
  61+ C0B7 04                                   inc     b
  62+ C0B8 18 DC                                jr      .drawLoop1
  63+ C0BA 15           .ReduceLoop:            dec     d
  64+ C0BB 15                                   dec     d
  65+ C0BC F1                                   pop     af
  66+ C0BD 04                                   inc     b
  67+ C0BE 18 D6                                jr      .drawLoop1
  68+ C0C0 3E 80        .DoneEdge:              ld      a,$80
  69+ C0C2 01 00 00                             ld      bc,$0000                        ; Top Left
  70+ C0C5 11 FF 80                             ld      de,$80FF                        ; Bottom Right
  71+ C0C8 CD 0C E6                             call    l2_draw_diagonal
  72+ C0CB 3E 80                                ld      a,$80
  73+ C0CD 01 00 80                             ld      bc,$8000                        ; Botom Left
  74+ C0D0 11 FF 00                             ld      de,$00FF                        ; Top Right
  75+ C0D3 CD 0C E6                             call    l2_draw_diagonal
  76+ C0D6
  77+ C0D6 01 00 00                             ld      bc,$0000
  78+ C0D9 11 80 00                             ld      DE,$0080
  79+ C0DC 26 60                                ld      h,$60
  80+ C0DE 2E 55                                ld      l,$55
  81+ C0E0 C9                                   ret
  82+ C0E1
  83+ C0E1              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
  83+ C0E1 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  84+ C0E5 21 00 50                             ld      hl,ScreenL1Bottom
  85+ C0E8 11 00 E0                             ld      de,ConsoleImageData
  86+ C0EB 01 00 08                             ld      bc, ScreenL1BottomLen
  87+ C0EE CD A1 8E                             call    memcopy_dma
  88+ C0F1 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  89+ C0F4 11 00 E8                             ld      de,ConsoleAttributes
  90+ C0F7 01 00 01                             ld      bc, ScreenL1AttrBtmLen
  91+ C0FA CD A1 8E                             call    memcopy_dma
  92+ C0FD C9                                   ret
  93+ C0FE
  94+ C0FE              draw_launch_ship:       MMUSelectLayer1
  94+ C0FE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  95+ C102 CD 47 E0                             call    l1_cls
  96+ C105 CD 52 E0                             call    l1_attr_cls
  97+ C108                                      MMUSelectSpriteBank
  97+ C108 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C10C CD 3F E1                             call    sprite_cls_cursors
  99+ C10F                                      MMUSelectLayer2
  99+ C10F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 100+ C113 CD 02 E0                             call    asm_l2_double_buffer_on
 101+ C116 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 102+ C118 32 72 E0                             ld      (l2_cls_byte),a
 103+ C11B CD 92 E0                             call    l2_set_color_upper2
 104+ C11E 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 105+ C120 32 72 E0                             ld      (l2_cls_byte),a
 106+ C123 CD BE E0                             call    l2_cls_lower_third
 107+ C126 CD 8C C0                             call    LaunchTubeEdges
 108+ C129 CD E1 C0                             call    LaunchConsole
 109+ C12C              .NextBuffer:            MMUSelectLayer2
 109+ C12C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C130 CD DD E0                             call    l2_flip_buffers
 111+ C133 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 112+ C135 32 72 E0                             ld      (l2_cls_byte),a
 113+ C138 CD 92 E0                             call    l2_set_color_upper2
 114+ C13B 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 115+ C13D 32 72 E0                             ld      (l2_cls_byte),a
 116+ C140 CD BE E0                             call    l2_cls_lower_third
 117+ C143 CD 8C C0                             call    LaunchTubeEdges
 118+ C146 CD E1 C0                             call    LaunchConsole
 119+ C149 3E FF        .SetUpTimers:           ld      a,init_countdown
 120+ C14B 32 87 C0                             ld      (launch_countdown),a
 121+ C14E 21 0E C0                             ld      hl,launchdraw_table
 122+ C151 22 88 C0                             ld      (launch_table_idx),hl
 123+ C154 AF                                   xor     a
 124+ C155 32 8A C0                             ld      (current_offsetX),a
 125+ C158 32 8B C0                             ld      (current_offsetY),a
 126+ C15B AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 127+ C15C
 128+ C15C                                      MaxThrottle
 128+ C15C 3A 6A 92    >                        ld      a,(SHIPMAXSPEED)
 128+ C15F 32 6B 92    >                        ld      (DELTA),a
 128+ C162 57          >                        ld      d,a
 128+ C163 1E 04       >                        ld      e,4
 128+ C165 ED 30       >                        mul
 128+ C167 ED 53 6C 92 >                        ld      (DELT4Lo),de
 129+ C16B C9                                   ret
 130+ C16C
 131+ C16C CD 8C C0     loop_launch_ship:       call    LaunchTubeEdges
 132+ C16F 3E FF                                ld      a,init_countdown
 133+ C171 32 87 C0                             ld      (launch_countdown),a
 134+ C174 2A 88 C0                             ld      hl,(launch_table_idx)
 135+ C177 4E                                   ld      c,(hl)
 136+ C178 79                                   ld      a,c
 137+ C179 FE FF                                cp      $FF
 138+ C17B 28 1E                                jr      z,.FinishedLaunch
 139+ C17D 23                                   inc     hl
 140+ C17E 46                                   ld      b,(hl)                 ; bc = top left
 141+ C17F 23                                   inc     hl
 142+ C180 5E                                   ld      e,(hl)
 143+ C181 23                                   inc     hl
 144+ C182 56                                   ld      d,(hl)                 ;de = width and height
 145+ C183 23                                   inc     hl
 146+ C184 7E                                   ld      a,(hl)
 147+ C185 23                                   inc     hl
 148+ C186 22 88 C0                             ld      (launch_table_idx),hl
 149+ C189 67                                   ld      h,a
 150+ C18A C5 D5                                push    bc,,de
 151+ C18C                                      MMUSelectLayer2
 151+ C18C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 152+ C190 CD E6 E1                             call    l2_draw_fill_box
 153+ C193 D1 C1                                pop     bc,,de
 154+ C195 3E 80                                ld      a,$80
 155+ C197 CD F6 E1                             call    l2_draw_box
 156+ C19A C9                                   ret
 157+ C19B 3E 09        .FinishedLaunch:        ld      a,ScreenFront
 158+ C19D 32 8E 82                             ld      (ScreenTransitionForced),a
 159+ C1A0 C9                                   ret
 160+ C1A1
 161+ C1A1
 162+ C1A1
# file closed: ./Transitions/launch_ship.asm
 903  C1A1
 904  C1A1              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 905  C1A1                  SLOT    UniverseBankAddr
 906  C1A1                  PAGE    BankUNIVDATA0
 907  C1A1              	ORG	    UniverseBankAddr,BankUNIVDATA0
 908  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   8+ C000              ; This means each gets its own line list, inwork etc
   9+ C000
  10+ C000              ; "Runtime Ship Data paged into in Bank 7"
  11+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  11+ C004 65 72 73 65
  11+ C008 20 50 47
  12+ C00B              ; NOTE we can cheat and pre allocate segs just using a DS for now
  13+ C00B
  14+ C00B              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  15+ C00B              ; Universe map substibute for INWK
  16+ C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  17+ C00B 00           UBnKxlo                     DB  0                       ; INWK+0
  18+ C00C 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  19+ C00D 00           UBnKxsgn                    DB  0                       ; INWK+2
  20+ C00E 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
  21+ C00F 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
  22+ C010 00           UBnKysgn                    DB  0                       ; INWK +5
  23+ C011 00           UBnKzlo                     DB  0                       ; INWK +6
  24+ C012 00           UBnKzhi                     DB  0                       ; INWK +7
  25+ C013 00           UBnKzsgn                    DB  0                       ; INWK +8
  26+ C014              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  27+ C014              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  28+ C014 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  29+ C016              UBnkrotmatSidev             equ UBnkrotmatSidevX
  30+ C016 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  31+ C018 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  32+ C01A 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  33+ C01C              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  34+ C01C 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  35+ C01E 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  36+ C020 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  37+ C022              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  38+ C022 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  39+ C024 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  40+ C026
  41+ C026
  42+ C026 00           UBnkspeed                   DB  0                       ; INWK +27
  43+ C027 00           UBnkAccel                   DB  0                       ; INWK +28
  44+ C028 00           UBnkrotXCounter             DB  0                       ; INWK +29
  45+ C029 00           UBnkrotZCounter             DB  0                       ; INWK +30
  46+ C02A 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  47+ C02B              ; Flags work as follows:
  48+ C02B              ; 7 - Flag ship to be killed with debris
  49+ C02B              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  50+ C02B              ; 5 - Ship is exploding if set
  51+ C02B              ; 4 -
  52+ C02B              ; 3 - Display state - Plot as a Dot
  53+ C02B              ; 2 - Nbr of Missiles bit 2
  54+ C02B              ; 1 - Nbr of Missiles bit 1
  55+ C02B              ; 0 - Nbr of Missiles bit 0
  56+ C02B 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57+ C02C 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  58+ C02D 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  59+ C02E 00           UbnKEnergy                  DB  0                       ; INWK +35
  60+ C02F 00           UbnKNewb                    DB  0                       ; INWK +36 INWK+36
  61+ C030              ; Flags work as follows:
  62+ C030              ; 7 - set then remove ship, if set then to code removes without debris
  63+ C030              ; 6 - Police ship (used to determine fuguitive status)
  64+ C030              ; 4 - Docking
  65+ C030              ; 3 - Pirate
  66+ C030              ; 2 - Angry status (e.g. space station or bounty hunter)
  67+ C030              ; 0 - Trader ship
  68+ C030              INWKxlo                     equ UBnKxlo
  69+ C030              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  70+ C030              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  71+ C030              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  72+ C030              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  73+ C030              INWKysgn                    equ UBnKysgn                ; INWK +5
  74+ C030              INWKzlo                     equ UBnKzlo                 ; INWK +6
  75+ C030              INWKzhi                     equ UBnKzhi                 ; INWK +7
  76+ C030              INWKzsgn                    equ UBnKzsgn                ; INWK +8
  77+ C030              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  78+ C030              ;                    [roofv x y z ] roof vector (up)
  79+ C030              ;                    [sidev x y z ] side vector (right)
  80+ C030              INWKspeed                   equ UBnkspeed               ; INWK +27UBnkTransmat2zLo  DB  0               ; XX16+16
  81+ C030              INWKAccel                   equ UBnkAccel               ; INWK +28          UBnkTransmat2zHi    DB  0               ; XX16+17
  82+ C030              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  83+ C030              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  84+ C030              explDsp                     equ UBnkexplDsp             ; INWK +31 clear exploding/display state|missiles UBnkDrawCam0xHi   DB  0               ; XX18+1
  85+ C030              aiatkecm                    equ UBnkaiatkecm            ; INWK +32 ai_attack_univ_ecm i.e. AI typeUBnkDrawCam0xSgn      DB  0               ; XX18+2
  86+ C030              INWKDrawCam0yLo             equ UBnkDrawCam0yLo         ; INWK +33UBnkDrawCam0yLo   DB  0               ; XX18+3
  87+ C030              INWKDrawCam0yHi             equ UBnkDrawCam0yHi         ; INWK +34UBnkDrawCam0yHi   DB  0               ; XX18+4
  88+ C030              INWKEnergy                  equ UbnKEnergy              ; INWK +35UBnkDrawCam0ySgn      DB  0               ; XX18+5
  89+ C030              ;UBnkDrawCam0ySgn    equ UbnKEnergy              ; Reycles but not a good idea TODO
  90+ C030              INWKNewb                    equ UbnKNewb                ; INWK +36 INWK+36 \ NEWB bit 7 remove ship?UBnkDrawCam0zLo     DB  0               ; XX18+6
  91+ C030              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
  92+ C030 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
  93+ C032              UBnkTransmatSidev           EQU UBnkTransmatSidevX
  94+ C032 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
  95+ C034 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
  96+ C036 00 00        UBnkTransmatRoofvX          DW 0
  97+ C038              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
  98+ C038 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
  99+ C03A 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
 100+ C03C 00 00        UBnkTransmatNosevX          DW 0
 101+ C03E              UBnkTransmatNosev           EQU UBnkTransmatNosevX
 102+ C03E 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
 103+ C040 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
 104+ C042 00 00        UbnkTransmatTransX          DW 0
 105+ C044 00 00        UbnkTransmatTransY          DW 0
 106+ C046 00 00        UbnkTransmatTransZ          DW 0
 107+ C048              XX16                        equ UBnkTransmatSidev
 108+ C048              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 109+ C048 00 00        UbnkTransInvRow0x0          DW 0
 110+ C04A 00 00        UbnkTransInvRow0x1          DW 0
 111+ C04C 00 00        UbnkTransInvRow0x2          DW 0
 112+ C04E 00 00        UbnkTransInvRow0x3          DW 0
 113+ C050 00 00        UbnkTransInvRow1y0          DW 0
 114+ C052 00 00        UbnkTransInvRow1y1          DW 0
 115+ C054 00 00        UbnkTransInvRow1y2          DW 0
 116+ C056 00 00        UbnkTransInvRow1y3          DW 0
 117+ C058 00 00        UbnkTransInvRow2z0          DW 0
 118+ C05A 00 00        UbnkTransInvRow2z1          DW 0
 119+ C05C 00 00        UbnkTransInvRow2z2          DW 0
 120+ C05E 00 00        UbnkTransInvRow2z3          DW 0
 121+ C060
 122+ C060              XX16Inv             equ UbnkTransInvRow0x0
 123+ C060              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 124+ C060 00           UbnkProjxLo                 DB  0
 125+ C061 00           UbnkProjxHi                 DB  0
 126+ C062 00           UbnkProjxSgn                DB  0
 127+ C063              UbnkProjx                   EQU UbnkProjxLo
 128+ C063 00           UbnkProjyLo                 DB  0
 129+ C064 00           UbnkProjyHi                 DB  0
 130+ C065 00           UbnkProjySgn                DB  0
 131+ C066              UbnkProjy                   EQU UbnkProjyLo
 132+ C066 00           UbnkProjzLo                 DB  0
 133+ C067 00           UbnkProjzHi                 DB  0
 134+ C068 00           UbnkProjzSgn                DB  0
 135+ C069              UbnkProjz                   EQU UbnkProjzLo
 136+ C069              XX25                        EQU UbnkProjxLo
 137+ C069              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 138+ C069 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
 139+ C06A 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
 140+ C06B 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
 141+ C06C              UBnkDrawCam0x               equ UBnkDrawCam0xLo
 142+ C06C 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
 143+ C06D 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
 144+ C06E 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
 145+ C06F              UBnkDrawCam0y               equ UBnkDrawCam0yLo
 146+ C06F 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
 147+ C070 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
 148+ C071 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
 149+ C072              UBnkDrawCam0z               equ UBnkDrawCam0zLo
 150+ C072              XX18                        equ UBnkDrawCam0xLo
 151+ C072              ; Used to make 16 bit reads a little cleaner in source code
 152+ C072 00 00 00     UbnkZPoint                  DS  3
 153+ C075              UbnkZPointLo                equ UbnkZPoint
 154+ C075              UbnkZPointHi                equ UbnkZPoint+1
 155+ C075              UbnkZPointSign              equ UbnkZPoint+2
 156+ C075              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
 157+ C075 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
 158+ C076 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
 159+ C077 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
 160+ C078 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
 161+ C079 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
 162+ C07A 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
 163+ C07B
 164+ C07B              XX15                        equ UBnkXScaled
 165+ C07B              XX15VecX                    equ XX15
 166+ C07B              XX15VecY                    equ XX15+1
 167+ C07B              XX15VecZ                    equ XX15+2
 168+ C07B              UbnkXPoint                  equ XX15
 169+ C07B              UbnkXPointLo                equ XX15+0
 170+ C07B              UbnkXPointHi                equ XX15+1
 171+ C07B              UbnkXPointSign              equ XX15+2
 172+ C07B              UbnkYPoint                  equ XX15+3
 173+ C07B              UbnkYPointLo                equ XX15+3
 174+ C07B              UbnkYPointHi                equ XX15+4
 175+ C07B              UbnkYPointSign              equ XX15+5
 176+ C07B              ; Repurposed XX15 pre clip plines
 177+ C07B              UbnkPreClipX1               equ XX15+0
 178+ C07B              UbnkPreClipY1               equ XX15+2
 179+ C07B              UbnkPreClipX2               equ XX15+4
 180+ C07B              UbnkPreClipY2               equ XX15+6
 181+ C07B              ; Repurposed XX15 post clip lines
 182+ C07B              UBnkNewX1                   equ XX15+0
 183+ C07B              UBnkNewY1                   equ XX15+1
 184+ C07B              UBnkNewX2                   equ XX15+2
 185+ C07B              UBnkNewY2                   equ XX15+3
 186+ C07B              ; Repurposed XX15
 187+ C07B              regXX15fx                   equ UBnkXScaled
 188+ C07B              regXX15fxSgn                equ UBnkXScaledSign
 189+ C07B              regXX15fy                   equ UBnkYScaled
 190+ C07B              regXX15fySgn                equ UBnkYScaledSign
 191+ C07B              regXX15fz                   equ UBnkZScaled
 192+ C07B              regXX15fzSgn                equ UBnkZScaledSign
 193+ C07B              ; Repurposed XX15
 194+ C07B              varX1                       equ UBnkXScaled       ; Reused, verify correct position
 195+ C07B              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
 196+ C07B              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
 197+ C07B              ; After clipping the coords are two 8 bit pairs
 198+ C07B              UBnkPoint1Clipped           equ UBnkXScaled
 199+ C07B              UBnkPoint2Clipped           equ UBnkYScaled
 200+ C07B              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 201+ C07B              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 202+ C07B 00           UBnkXX12xLo                 DB  0               ; XX12+0
 203+ C07C 00           UBnkXX12xSign               DB  0               ; XX12+1
 204+ C07D 00           UBnkXX12yLo                 DB  0               ; XX12+2
 205+ C07E 00           UBnkXX12ySign               DB  0               ; XX12+3
 206+ C07F 00           UBnkXX12zLo                 DB  0               ; XX12+4
 207+ C080 00           UBnkXX12zSign               DB  0               ; XX12+5
 208+ C081 00 00 00...  XX12Save                    DS  6
 209+ C087 00 00 00...  XX12Save2                   DS  6
 210+ C08D              XX12                        equ UBnkXX12xLo
 211+ C08D              varXX12                     equ UBnkXX12xLo
 212+ C08D              ; Post clipping the results are now 8 bit
 213+ C08D 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
 214+ C08E
 215+ C08E 00           UBnkProjectedY              DB  0
 216+ C08F 00           UBnkProjectedX              DB  0
 217+ C090              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
 218+ C090 00 00 00...  XX15Save                    DS  8
 219+ C098 00 00 00...  XX15Save2                   DS  8
 220+ C0A0 00           VarBackface                 DB 0
 221+ C0A1              ; Heap (or array) information for lines and normals
 222+ C0A1              ; Coords are stored XY,XY,XY,XY
 223+ C0A1              ; Normals
 224+ C0A1              ; This needs re-oprganising now.
 225+ C0A1              ; Runtime Calculation Store
 226+ C0A1
 227+ C0A1              FaceArraySize               equ 30
 228+ C0A1              EdgeHeapSize                equ 40
 229+ C0A1              NodeArraySize               equ 40
 230+ C0A1              LineArraySize               equ 50
 231+ C0A1              ; Storage arrays for data
 232+ C0A1              ; Structure of arrays
 233+ C0A1              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
 234+ C0A1              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
 235+ C0A1              ; NodeArray         -  4 bytes per element      0           1            2          3
 236+ C0A1              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
 237+ C0A1              ; Line Array        -  4 bytes per eleement     0           1            2          3
 238+ C0A1              ;                                               X1          Y1           X2         Y2
 239+ C0A1 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
 240+ C0BF 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 241+ C15F 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 242+ C1FF 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
 243+ C2C7              UBnkLinesHeapMax            EQU $ - UbnkLineArray
 244+ C2C7 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
 245+ C2EF              ; Array current Lengths
 246+ C2EF 00           UbnkFaceVisArrayLen         DS 1
 247+ C2F0 00           UBnkNodeArrayLen            DS 1
 248+ C2F1 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
 249+ C2F2 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
 250+ C2F3              XX20                        equ UbnkLineArrayLen
 251+ C2F3              varXX20                     equ UbnkLineArrayLen
 252+ C2F3
 253+ C2F3
 254+ C2F3 00           UbnkEdgeHeapSize            DS 1
 255+ C2F4 00           UbnkEdgeHeapBytes           DS 1
 256+ C2F5 00           UBnkLinesHeapLen            DS 1
 257+ C2F6 00           UbnKEdgeHeapCounter         DS 1
 258+ C2F7 00           UbnKEdgeRadius              DS 1
 259+ C2F8 00           UbnKEdgeShipType            DS 1
 260+ C2F9 00           UbnKEdgeExplosionType       DS 1
 261+ C2FA
 262+ C2FA              ; Node heap is used to write out transformed Vertexs
 263+ C2FA
 264+ C2FA              ; Lines
 265+ C2FA 00 00 00     UBnkXX19                    DS  3
 266+ C2FD
 267+ C2FD
 268+ C2FD              ; Used to make 16 bit reads a little cleaner in source code
 269+ C2FD
 270+ C2FD
 271+ C2FD
 272+ C2FD              ; Repurposed XX15 when plotting lines
 273+ C2FD              ; Repurposed XX15 before calling clip routine
 274+ C2FD              UBnkX1                      equ XX15
 275+ C2FD              UBnKx1Lo                    equ XX15
 276+ C2FD              UBnKx1Hi                    equ XX15+1
 277+ C2FD              UBnkY1                      equ XX15+2
 278+ C2FD              UbnKy1Lo                    equ XX15+2
 279+ C2FD              UBnkY1Hi                    equ XX15+3
 280+ C2FD              UBnkX2                      equ XX15+4
 281+ C2FD              UBnkX2Lo                    equ XX15+4
 282+ C2FD              UBnkX2Hi                    equ XX15+5
 283+ C2FD              ; Repurposed XX12 when plotting lines
 284+ C2FD              UBnkY2                      equ XX12+0
 285+ C2FD              UbnKy2Lo                    equ XX12+0
 286+ C2FD              UBnkY2Hi                    equ XX12+1
 287+ C2FD              UBnkDeltaXLo                equ XX12+2
 288+ C2FD              UBnkDeltaXHi                equ XX12+3
 289+ C2FD              UBnkDeltaYLo                equ XX12+4
 290+ C2FD              UBnkDeltaYHi                equ XX12+5
 291+ C2FD              UbnkGradient                equ XX12+2
 292+ C2FD              UBnkTemp1                   equ XX12+2
 293+ C2FD              UBnkTemp1Lo                 equ XX12+2
 294+ C2FD              UBnkTemp1Hi                 equ XX12+3
 295+ C2FD              UBnkTemp2                   equ XX12+3
 296+ C2FD              UBnkTemp2Lo                 equ XX12+3
 297+ C2FD              UBnkTemp2Hi                 equ XX12+4
 298+ C2FD
 299+ C2FD              ;rotmatFx            equ rotmat0xHi
 300+ C2FD              ;rotmatFy            equ rotmat0yHi
 301+ C2FD              ;rotmatFz            equ rotmat0zHi
 302+ C2FD              ;rotmatUx            equ rotmat1xHi
 303+ C2FD              ;rotmatUy            equ rotmat1yHi
 304+ C2FD              ;rotmatUz            equ rotmat1zHi
 305+ C2FD
 306+ C2FD 00           UbnkShipType                DB  0
 307+ C2FE
 308+ C2FE 00 00 00...  UBnkHullCopy                DS  22
 309+ C314              ScoopDebrisAddr             equ UBnkHullCopy + 0
 310+ C314              MissileLockLoAddr           equ UBnkHullCopy + 1
 311+ C314              MissileLockHiAddr           equ UBnkHullCopy + 2
 312+ C314              EdgeAddyAddr                equ UBnkHullCopy + 3
 313+ C314              LineX4Addr                  equ UBnkHullCopy + 5
 314+ C314              GunVertexAddr               equ UBnkHullCopy + 6
 315+ C314              ExplosionCtAddr             equ UBnkHullCopy + 7
 316+ C314              VertexCtX6Addr              equ UBnkHullCopy + 8
 317+ C314              EdgeCountAddr               equ UBnkHullCopy + 9
 318+ C314              BountyLoAddr                equ UBnkHullCopy + 10
 319+ C314              BountyHiAddr                equ UBnkHullCopy + 11
 320+ C314              FaceCtX4Addr                equ UBnkHullCopy + 12
 321+ C314              DotAddr                     equ UBnkHullCopy + 13
 322+ C314              EnergyAddr                  equ UBnkHullCopy + 14
 323+ C314              SpeedAddr                   equ UBnkHullCopy + 15
 324+ C314              FaceAddyAddr                equ UBnkHullCopy + 16
 325+ C314              QAddr                       equ UBnkHullCopy + 18
 326+ C314              LaserAddr                   equ UBnkHullCopy + 19
 327+ C314              VerticesAddyAddr            equ UBnkHullCopy + 20
 328+ C314
 329+ C314              ; Static Ship Data. This is copied in when creating the universe object
 330+ C314              XX0                         equ UBnkHullCopy        ; general hull index pointer
 331+ C314 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 332+ C440 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 333+ C8F0 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 334+ CA1C 0C           OrthagCountdown             DB  12
 335+ CA1D
 336+ CA1D              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 337+ CA1D              UBnk_Data_len               EQU $ - StartOfUniv
 338+ CA1D
 339+ CA1D
 340+ CA1D 47           RequAby256DivQOLD:      ld      b,a ;.LL28  BFRDIV R=A*256/Q   byte from remainder of division
 341+ CA1E 3A 6F 92                             ld      a,(varQ)
 342+ CA21 4F                                   ld      c,a
 343+ CA22 78                                   ld      a,b
 344+ CA23
 345+ CA23
 346+ CA23 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 347+ CA26 11 1D 0A                             ld      de,UBnk_Data_len
 348+ CA29 AF                                   xor     a
 349+ CA2A CD 7B 8E                             call    memfill_dma
 350+ CA2D C9                                   ret
 351+ CA2E
 352+ CA2E              ;divdide by 16 using undocumented instrunctions
 353+ CA2E              ;Input: BC = Dividend, DE = Divisor, HL = 0
 354+ CA2E              ;Output: BC = Quotient, HL = Remainder
 355+ CA2E 47           PROJ256mulAdivQ:        ld      b,a
 356+ CA2F 0E 00                                ld      c,0
 357+ CA31 16 00                                ld      d,0
 358+ CA33 3A 6F 92                             ld      a,(varQ)
 359+ CA36 5F                                   ld      e,a
 360+ CA37 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 361+ CA3A 78                                   ld      a,b
 362+ CA3B 06 10                                ld      b,16
 363+ CA3D CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 364+ CA3F 17                                   rla             ; ...
 365+ CA40 ED 6A                                adc     hl,hl       ; ...
 366+ CA42 ED 52                                sbc     hl,de       ; ...
 367+ CA44 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 368+ CA46 19                                   add     hl,de       ; ...
 369+ CA47 0D                                   dec     c       ; ...
 370+ CA48 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 371+ CA4A 79                                   ld      a,c
 372+ CA4B 32 70 92                             ld      (varR),a
 373+ CA4E C9                                   ret
 374+ CA4F              ;
 375+ CA4F                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 376+ CA4F              ;Output: BC = Quotient, HL = Remainder
 377+ CA4F
 378+ CA4F              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 379+ CA4F              ;OUTPUTS:   cahl = quotient cde = divisor
 380+ CA4F 32 17 92     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 381+ CA52                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 381+ CA52 2A 11 C0    >               ld       hl,(UBnKzlo)
 381+ CA55 22 6F 92    >               ld       (varQ),hl
 382+ CA58 3A 13 C0                             ld      a,(UBnKzsgn)                    ;
 383+ CA5B 32 71 92                             ld      (varS),a                        ; S = inkw z sign
 384+ CA5E ED 5B 15 92  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 385+ CA62 7B                                   ld      a,e                             ; num lo
 386+ CA63 F6 01                                or      1                               ; must be at least 1
 387+ CA65 32 15 92                             ld      (varP),a                        ; store
 388+ CA68 5F                                   ld      e,a                             ; update DE too
 389+ CA69 3A 17 92                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 390+ CA6C 21 71 92                             ld      hl,varS                         ; hl = address of VarS
 391+ CA6F AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 392+ CA70 E6 80                                and     $80                             ;
 393+ CA72 32 90 92                             ld      (varT),a                        ; T = Sign bit of A
 394+ CA75 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 395+ CA78 3A 17 92                             ld      a,(varPhi2)                     ;
 396+ CA7B E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 397+ CA7D              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 397+ CA7D FE 40       >                        cp     $40
 397+ CA7F D2 8D CA    >                        jp		nc,DV14
 398+ CA82                                      ShiftDELeft1                            ; de (or P,P1) > 1
 398+ CA82 CB 23       >			   sla e
 398+ CA84 CB 12       >			   rl  d
 399+ CA86 CB 17                                rl      a                               ; and accumulator as 3rd byte
 400+ CA88 FD 2C                                inc     iyl
 401+ CA8A C2 7D CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 402+ CA8D 32 17 92     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 403+ CA90 ED 53 15 92                          ld      (varP),de                       ; store off the value so far
 404+ CA94 3A 71 92                             ld      a,(varS)                        ; zsign
 405+ CA97 E6 7F                                and     $7F                             ; denom sg7
 406+ CA99                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 407+ CA99 2A 6F 92                             ld      hl,(varQ)                       ; demon lo
 408+ CA9C FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 409+ CA9E                                      ShiftHLLeft1
 409+ CA9E CB 25       >			   sla l
 409+ CAA0 CB 14       >			   rl  h
 410+ CAA2 CB 17                                rl      a                               ; mulitply QRS by 2
 411+ CAA4 F2 9C CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 412+ CAA7 22 6F 92     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 413+ CAAA 32 6F 92                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 414+ CAAD 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 415+ CAAF 32 70 92                             ld      (varR),a                        ;  R
 416+ CAB2 3A 17 92                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 417+ CAB5 CD 2E CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 418+ CAB8 3E 00                                ld      a,0
 419+ CABA 32 88 92                             ld      (varKp1),a
 420+ CABD 32 89 92                             ld      (varKp2),a
 421+ CAC0 32 8A 92                             ld      (varKp3),a                      ; clear out K+1 to K+3
 422+ CAC3 FD 7D                                ld      a,iyl                           ; Y counter for scale
 423+ CAC5                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 423+ CAC5 CB 7F       >                        bit 	7,a
 423+ CAC7 CA F2 CA    >                        jp      z,DV12
 424+ CACA 3A 70 92                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 425+ CACD ED 5B 87 92                          ld      de,(varK)                       ; d= k1
 426+ CAD1 2A 8B 92                             ld      hl,(varK2)                      ; h = k3, l = k2
 427+ CAD4 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 428+ CAD5 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 429+ CAD7 CB 12                                rl      d                               ; k1
 430+ CAD9 CB 15                                rl      l                               ; k2
 431+ CADB CB 14                                rl      h                               ; k3
 432+ CADD FD 2C                                inc     iyl
 433+ CADF 20 F4                                jr      nz,DVL8                         ;
 434+ CAE1 ED 53 87 92  DVL8Save:               ld      (varK),de
 435+ CAE5 22 8B 92                             ld      (varK2),hl                      ; save back K0 to k3
 436+ CAE8 3A 90 92                             ld      a,(varT)
 437+ CAEB 4F                                   ld      c,a                             ; get varT into c reg
 438+ CAEC 7C                                   ld      a,h                             ; a= k3 (sign)
 439+ CAED B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 440+ CAEE 32 91 92                             ld      (varK3),a                       ; load sign bit back into K3
 441+ CAF1 C9                                   ret
 442+ CAF2              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 442+ CAF2 FE 00       >				cp	0
 442+ CAF4 CA 0B CB    >				jp	z,DV13
 443+ CAF7 3A 70 92                             ld      a,(varR)                        ; Reduce Remainder
 444+ CAFA CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 445+ CAFC FD 2D                                dec     iyl
 446+ CAFE C2 FA CA                             jp      nz,DVL10                        ; loop y reduce until y is zero
 447+ CB01 32 87 92                             ld      (varK),a                        ; k Lo
 448+ CB04                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 448+ CB04 3A 90 92    >               ld       a,(varT)
 448+ CB07 32 8A 92    >               ld       (varKp3),a
 449+ CB0A C9                                   ret
 450+ CB0B              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 450+ CB0B 3A 70 92    >               ld       a,(varR)
 450+ CB0E 32 87 92    >               ld       (varK),a
 451+ CB11                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 451+ CB11 3A 90 92    >               ld       a,(varT)
 451+ CB14 32 8A 92    >               ld       (varKp3),a
 452+ CB17 C9                                   ret
 453+ CB18
 454+ CB18
 455+ CB18 CD 4F CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 456+ CB1B 3A 8A 92                             ld      a,(varKp3)
 457+ CB1E E6 7F                                and     $7F
 458+ CB20 21 89 92                             ld      hl,varKp2
 459+ CB23 B6                                   or      (hl)
 460+ CB24 C2 39 CB                             jp      nz,PL44TooBig
 461+ CB27 3A 88 92                             ld      a,(varKp1)
 462+ CB2A FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 463+ CB2C 30 0B                                jr      nc,PL44TooBig
 464+ CB2E                                      ClearCarryFlag                          ; we have a good result regardless
 464+ CB2E B7          >				or a
 465+ CB2F 2A 87 92                             ld      hl,(varK)                       ; get K (0 1)
 466+ CB32 3A 8A 92                             ld      a,(varKp3)                      ; if sign bit high?
 467+ CB35 CB 7F                                bit     7,a
 468+ CB37 C8                                   ret     z                               ; no so we can just return
 469+ CB38 C9           PL44:                   ret
 470+ CB39 37           PL44TooBig:             scf
 471+ CB3A C9                                   ret
 472+ CB3B
 473+ CB3B              ;; calcs HLB + DEC where B and C are signs
 474+ CB3B              ;; result HL with A as sign
 475+ CB3B              ;; special handling if result is zero forcign sign bit to be zero
 476+ CB3B 78           ADDHLDESignBC:          ld      a,b
 477+ CB3C E6 80                                and     SignOnly8Bit
 478+ CB3E A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
 479+ CB3F                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
 479+ CB3F FA 4D CB    >                        jp		m, ADDHLDEsBCOppSGN
 480+ CB42 78           ADDHLDEsBCSameSigns:    ld      a,b
 481+ CB43 B1                                   or      c
 482+ CB44                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
 482+ CB44 FA 49 CB    >                        jp		m, ADDHLDEsBCSameNeg
 483+ CB47 19                                   add     hl,de                       ; both positive so a will already be zero
 484+ CB48 C9                                   ret
 485+ CB49 19           ADDHLDEsBCSameNeg:      add     hl,de
 486+ CB4A 78                                   ld      a,b
 487+ CB4B B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
 488+ CB4C C9                                   ret
 489+ CB4D B7           ADDHLDEsBCOppSGN:       or      a
 490+ CB4E ED 52                                sbc     hl,de
 491+ CB50 38 02                                jr      c,ADDHLDEsBCOppInvert
 492+ CB52 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
 493+ CB53 C9                                   ret
 494+ CB54              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
 494+ CB54 AF          >                xor a
 494+ CB55 95          >                sub l
 494+ CB56 6F          >                ld l,a
 494+ CB57 9F          >                sbc a,a
 494+ CB58 94          >                sub h
 494+ CB59 67          >                ld h,a
 495+ CB5A 78                                   ld      a,b
 496+ CB5B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 497+ CB5D C9                                   ret
 498+ CB5E
 499+ CB5E 7C           ADDHLDESignedv3:        ld      a,h
 500+ CB5F E6 80                                and     SignOnly8Bit
 501+ CB61 47                                   ld      b,a                         ;save sign bit in b
 502+ CB62 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 503+ CB63                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 503+ CB63 FA 7B CB    >                        jp		m, ADDHLDEOppSGN
 504+ CB66 78           ADDHLDESameSigns:       ld      a,b
 505+ CB67 B2                                   or      d
 506+ CB68                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 506+ CB68 FA 6D CB    >                        jp		m, ADDHLDESameNeg
 507+ CB6B 19                                   add     hl,de
 508+ CB6C C9                                   ret
 509+ CB6D 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 510+ CB6E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 511+ CB70 67                                   ld      h,a
 512+ CB71 7A                                   ld      a,d
 513+ CB72 E6 7F                                and     SignMask8Bit
 514+ CB74 57                                   ld      d,a
 515+ CB75 19                                   add     hl,de
 516+ CB76 3E 80                                ld      a,SignOnly8Bit
 517+ CB78 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 518+ CB79 67                                   ld      h,a
 519+ CB7A C9                                   ret
 520+ CB7B 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 521+ CB7C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 522+ CB7E 67                                   ld      h,a
 523+ CB7F 7A                                   ld      a,d
 524+ CB80 E6 7F                                and     SignMask8Bit
 525+ CB82 57                                   ld      d,a
 526+ CB83 B7                                   or      a
 527+ CB84 ED 52                                sbc     hl,de
 528+ CB86 38 04                                jr      c,ADDHLDEOppInvert
 529+ CB88 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 530+ CB89 B4                                   or      h
 531+ CB8A 67                                   ld      h,a                         ; set the previou sign value
 532+ CB8B C9                                   ret
 533+ CB8C              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 533+ CB8C AF          >                xor a
 533+ CB8D 95          >                sub l
 533+ CB8E 6F          >                ld l,a
 533+ CB8F 9F          >                sbc a,a
 533+ CB90 94          >                sub h
 533+ CB91 67          >                ld h,a
 534+ CB92 78                                   ld      a,b
 535+ CB93 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 536+ CB95 B4                                   or      h
 537+ CB96 67                                   ld      h,a                         ; recover sign
 538+ CB97 C9                                   ret
 539+ CB98
 540+ CB98              ; we could cheat, flip the sign of DE and just add but its not very optimised
 541+ CB98 7C           SUBHLDESignedv3:        ld      a,h
 542+ CB99 E6 80                                and     SignOnly8Bit
 543+ CB9B 47                                   ld      b,a                         ;save sign bit in b
 544+ CB9C AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 545+ CB9D                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 545+ CB9D FA CB CB    >                        jp		m, SUBHLDEOppSGN
 546+ CBA0 78           SUBHLDESameSigns:       ld      a,b
 547+ CBA1 B2                                   or      d
 548+ CBA2                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 548+ CBA2 FA AC CB    >                        jp		m, SUBHLDESameNeg
 549+ CBA5 B7                                   or      a
 550+ CBA6 ED 52                                sbc     hl,de
 551+ CBA8                                      JumpIfNegative SUBHLDESameOvrFlw
 551+ CBA8 FA BF CB    >                        jp		m, SUBHLDESameOvrFlw
 552+ CBAB C9                                   ret
 553+ CBAC 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 554+ CBAD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 555+ CBAF 67                                   ld      h,a
 556+ CBB0 7A                                   ld      a,d
 557+ CBB1 E6 7F                                and     SignMask8Bit
 558+ CBB3 57                                   ld      d,a
 559+ CBB4 B7                                   or      a
 560+ CBB5 ED 52                                sbc     hl,de
 561+ CBB7                                      JumpIfNegative SUBHLDESameOvrFlw
 561+ CBB7 FA BF CB    >                        jp		m, SUBHLDESameOvrFlw
 562+ CBBA 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 563+ CBBB F6 80                                or      SignOnly8Bit
 564+ CBBD 67                                   ld      h,a
 565+ CBBE C9                                   ret
 566+ CBBF              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 566+ CBBF AF          >                xor a
 566+ CBC0 95          >                sub l
 566+ CBC1 6F          >                ld l,a
 566+ CBC2 9F          >                sbc a,a
 566+ CBC3 94          >                sub h
 566+ CBC4 67          >                ld h,a
 567+ CBC5 78                                   ld      a,b
 568+ CBC6 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 569+ CBC8 B4                                   or      h
 570+ CBC9 67                                   ld      h,a                         ; recover sign
 571+ CBCA C9                                   ret
 572+ CBCB B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 573+ CBCC 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 574+ CBCD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 575+ CBCF 67                                   ld      h,a
 576+ CBD0 7A                                   ld      a,d
 577+ CBD1 E6 7F                                and     SignMask8Bit
 578+ CBD3 57                                   ld      d,a
 579+ CBD4 19                                   add     hl,de
 580+ CBD5 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 581+ CBD6 B4                                   or      h
 582+ CBD7 67                                   ld      h,a                         ; set the previou sign value
 583+ CBD8 C9                                   ret
 584+ CBD9
 585+ CBD9
 586+ CBD9              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 586+ CBD9 CB 7C       >                        bit 	7,h
 586+ CBDB C2 EC CB    >                        jp      nz,SBCHLDEhlNeg
 587+ CBDE              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 587+ CBDE CB 7C       >                        bit 	7,h
 587+ CBE0 C2 EC CB    >                        jp      nz,SBCHLDEhlNeg
 588+ CBE3 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 589+ CBE5 C9                                   ret
 590+ CBE6 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 591+ CBE8 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 592+ CBE9 CB FA                                set     7,d
 593+ CBEB C9                                   ret
 594+ CBEC CB BC        SBCHLDEhlNeg:           res     7,h
 595+ CBEE                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 595+ CBEE CB 7A       >                        bit 	7,d
 595+ CBF0 C2 F8 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 596+ CBF3 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 597+ CBF5 CB FC                                set     7,h
 598+ CBF7 C9                                   ret
 599+ CBF8 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 600+ CBFA 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 601+ CBFB CB FA                                set     7,d
 602+ CBFD CB FC                                set     7,h
 603+ CBFF C9                                   ret
 604+ CC00
 605+ CC00              ; Roate around axis
 606+ CC00              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 607+ CC00              ; so the axis x1 points to roofv  x , y or z
 608+ CC00              ;             x2           nosev or sidev  x, y or z
 609+ CC00              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 610+ CC00              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 611+ CC00              ; var RAT2 gives direction
 612+ CC00              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 613+ CC00              ;-Set up S R -----------------------------------------
 614+ CC00              ; optimised we don't deal with sign here just the value of roof axis / 512
 615+ CC00 2A 9A 91     MVS5XRotateXAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 616+ CC03 5E                                   ld      e,(hl)
 617+ CC04 23                                   inc     hl
 618+ CC05 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 619+ CC06 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 620+ CC07 7C                                   ld      a,h
 621+ CC08 E6 80                                and     SignOnly8Bit
 622+ CC0A FD 67                                ld      iyh,a           ; iyh = sign Axis1
 623+ CC0C 7C                                   ld      a,h
 624+ CC0D E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 625+ CC0F CB 3F                                srl     a               ; a = Axis1/2
 626+ CC11 5F                                   ld      e,a             ;
 627+ CC12 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 628+ CC14 57                                   ld      d,a             ; de = signed Axis1 / 512
 629+ CC15 B7                                   or      a               ; clear carry
 630+ CC16 CD 98 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 631+ CC19              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 632+ CC19 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 633+ CC1A 7D                                   ld      a,l
 634+ CC1B 32 70 92                             ld      (varR),a
 635+ CC1E 7C                                   ld      a,h
 636+ CC1F 32 71 92                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 637+ CC22              ;-calculate roofv latter half of calc
 638+ CC22 2A 9C 91                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 639+ CC25 5E                                   ld      e,(hl)
 640+ CC26 23                                   inc     hl
 641+ CC27 56                                   ld      d,(hl)          ; de = value of roof axis
 642+ CC28 7A                                   ld      a,d
 643+ CC29 E6 80                                and     SignOnly8Bit
 644+ CC2B FD 67                                ld      iyh,a           ; save sign
 645+ CC2D 7A                                   ld      a,d
 646+ CC2E E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 647+ CC30 57                                   ld      d,a             ; de = abs (nosev)
 648+ CC31                                      ShiftDERight1
 648+ CC31 CB 3A       >			   srl d
 648+ CC33 CB 1B       >			   rr  e
 649+ CC35                                      ShiftDERight1
 649+ CC35 CB 3A       >			   srl d
 649+ CC37 CB 1B       >			   rr  e
 650+ CC39                                      ShiftDERight1
 650+ CC39 CB 3A       >			   srl d
 650+ CC3B CB 1B       >			   rr  e
 651+ CC3D                                      ShiftDERight1           ; de = nosev /16 unsigned
 651+ CC3D CB 3A       >			   srl d
 651+ CC3F CB 1B       >			   rr  e
 652+ CC41 3A 86 92                             ld      a,(varRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 653+ CC44 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 654+ CC46 E6 80                                and     SignOnly8Bit
 655+ CC48 B2                                   or      d
 656+ CC49 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 657+ CC4A              ;;; ld      a,e
 658+ CC4A              ;;;     or      iyh
 659+ CC4A              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 660+ CC4A              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 661+ CC4A E1                                   pop     hl              ; get back RS POP ID 1
 662+ CC4B                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 663+ CC4B              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 664+ CC4B CD 5E CB                             call    ADDHLDESignedv3 ; do add using hl and de
 665+ CC4E E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 666+ CC4F              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 667+ CC4F              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 668+ CC4F 2A 9C 91                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 669+ CC52 5E                               ld      e,(hl)
 670+ CC53 23                               inc     hl
 671+ CC54 56                               ld      d,(hl)
 672+ CC55 EB                               ex      de,hl
 673+ CC56 7C                               ld      a,h
 674+ CC57 E6 80                            and     $80
 675+ CC59 FD 67                            ld      iyh,a
 676+ CC5B 7C                               ld      a,h
 677+ CC5C E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 678+ CC5E CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 679+ CC60 5F                               ld      e,a
 680+ CC61 FD 7C                            ld      a,iyh
 681+ CC63 57                               ld      d,a
 682+ CC64 B7                               or      a               ; clear carry
 683+ CC65 CD 98 CB                         call    SUBHLDESignedv3
 684+ CC68              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 685+ CC68 E5                               push    hl              ; save hl on stack  PUSH ID 3
 686+ CC69 7D                               ld      a,l
 687+ CC6A 32 15 92                         ld      (varP),a        ; p = low of resuilt
 688+ CC6D 7C                               ld      a,h
 689+ CC6E E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 690+ CC70 32 90 92                         ld      (varT),a        ; t = high of result
 691+ CC73              ;-- Set up TQ
 692+ CC73 2A 9A 91                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 693+ CC76              ;   ld      hl,(varAxis2)   ; work on nosev again
 694+ CC76 5E                               ld      e,(hl)
 695+ CC77 23                               inc     hl
 696+ CC78 56                               ld      d,(hl)
 697+ CC79 7A                               ld      a,d
 698+ CC7A E6 80                            and     $80
 699+ CC7C FD 67                            ld      iyh,a           ; save sign
 700+ CC7E 7A                               ld      a,d
 701+ CC7F E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 702+ CC81 57                               ld      d,a             ; de = abs (nosev)
 703+ CC82                                  ShiftDERight1
 703+ CC82 CB 3A       >			   srl d
 703+ CC84 CB 1B       >			   rr  e
 704+ CC86                                  ShiftDERight1
 704+ CC86 CB 3A       >			   srl d
 704+ CC88 CB 1B       >			   rr  e
 705+ CC8A                                  ShiftDERight1
 705+ CC8A CB 3A       >			   srl d
 705+ CC8C CB 1B       >			   rr  e
 706+ CC8E                                  ShiftDERight1           ; de = nosev /16 unsigned
 706+ CC8E CB 3A       >			   srl d
 706+ CC90 CB 1B       >			   rr  e
 707+ CC92 3A 86 92                         ld      a,(varRAT2)
 708+ CC95 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 709+ CC97 E6 80                            and     $80
 710+ CC99 B2                               or      d
 711+ CC9A 57                               ld      d,a
 712+ CC9B              ;;; ld      a,e
 713+ CC9B              ;;;     or      iyh
 714+ CC9B              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 715+ CC9B E1                               pop     hl              ; get back RS   POP ID 3
 716+ CC9C              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 717+ CC9C CD 98 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 718+ CC9F              ;-- Update nosev ---------------------------------------
 719+ CC9F EB                               ex      de,hl           ; save hl to de
 720+ CCA0 2A 9C 91                         ld      hl,(varAxis2)
 721+ CCA3 73                               ld      (hl),e
 722+ CCA4 23                               inc     hl
 723+ CCA5 72                               ld      (hl),d          ; copy result into nosev
 724+ CCA6              ;-- Update roofv ---------------------------------------
 725+ CCA6 D1                               pop     de              ; get calc saved on stack POP ID 2
 726+ CCA7 2A 9A 91                         ld      hl,(varAxis1)
 727+ CCAA 73                               ld      (hl),e
 728+ CCAB 23                               inc     hl
 729+ CCAC 72                               ld      (hl),d          ; copy result into nosev
 730+ CCAD C9                               ret
 731+ CCAE
 732+ CCAE                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCAE              InitialiseOrientation:
   2++CCAE              ZI1:
   3++CCAE              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CCAE              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCAE              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   6++CCAE 21 00 00         ld      hl, 0
   7++CCB1 22 16 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCB4 22 18 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCB7 22 1A C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCBA 22 1E C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCBD 22 20 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCC0 22 22 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCC3 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCC6                  ;ld      hl,1
  15++CCC6 22 14 C0         ld      (UBnkrotmatSidevX),hl
  16++CCC9 22 1C C0         ld      (UBnkrotmatRoofvY),hl
  17++CCCC 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCCF 22 24 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCD2 C9               ret
  20++CCD3
# file closed: ./Universe/InitialiseOrientation.asm
 733+ CCD3              ;----------------------------------------------------------------------------------------------------------------------------------
 734+ CCD3              OrientateVertex:
 735+ CCD3
 736+ CCD3              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 737+ CCD3              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 738+ CCD3              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 739+ CCD3              ;
 740+ CCD3
 741+ CCD3              ;----------------------------------------------------------------------------------------------------------------------------------
 742+ CCD3              TransposeVertex:
 743+ CCD3              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 744+ CCD3              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 745+ CCD3              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 746+ CCD3              VectorToVertex:
 747+ CCD3              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 748+ CCD3              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 749+ CCD3              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 750+ CCD3
 751+ CCD3              Project:
 752+ CCD3 2A 0B C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 753+ CCD6 22 15 92                             ld      (varP),hl
 754+ CCD9 3A 0D C0                             ld      a,(UBnKxsgn)
 755+ CCDC CD 18 CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 756+ CCDF D8                                   ret     c                               ; carry means don't print
 757+ CCE0 2A 87 92                             ld      hl,(varK)                       ; hl = k (0 1)
 758+ CCE3                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 759+ CCE3 3E 80                                ld      a,ViewCenterX
 760+ CCE5 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 761+ CCE7 22 91 92                             ld      (varK3),hl                      ; K3 = X position on screen
 762+ CCEA 2A 0E C0     ProjectY:               ld      hl,(UBnKylo)
 763+ CCED 22 15 92                             ld      (varP),hl
 764+ CCF0 3A 10 C0                             ld      a,(UBnKysgn)
 765+ CCF3 CD 18 CB                             call    PLS6
 766+ CCF6 D8                                   ret     c
 767+ CCF7 2A 87 92                             ld      hl,(varK)                       ; hl = k (0 1)
 768+ CCFA 3E 40                                ld      a,ViewCenterY
 769+ CCFC ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 770+ CCFE 22 97 92                             ld      (varK4),hl                      ; K3 = X position on screen
 771+ CD01 C9                                   ret
 772+ CD02              ;--------------------------------------------------------------------------------------------------------
 773+ CD02                                      include "ModelRender/EraseOldLines-EE51.asm"
# file opened: ./ModelRender/EraseOldLines-EE51.asm
   1++CD02              ;
   2++CD02              ; EraseOldLines:
   3++CD02              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD02              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD02              ;	 	loop + 4
   6++CD02              ; Return
   7++CD02
   8++CD02              EraseOldLines:
   9++CD02              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD02              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD02 3A 2A C0    >                        ld     a,(UBnkexplDsp)
  10++CD05 CB 5F       >                        bit 	3,a
  10++CD07 C8          >                        ret		z
  11++CD08 CB DF        	set		3,a
  12++CD0A 32 2A C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD0D C3 CE E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD10              ; We use the ret from the clearLines so not needed here
  15++CD10
# file closed: ./ModelRender/EraseOldLines-EE51.asm
 774+ CD10                                      include "ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ./ModelRender/TrimToScreenGrad-LL118.asm
   1++CD10              ;TrimToScreenGrad:
   2++CD10              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD10              ;ret
   4++CD10              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD10              ;TODO        bit     7,a
   6++CD10              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD10              ;TODO        ld      a,h
   8++CD10              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD10              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD10              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD10
  12++CD10              ;18                      CLC
  13++CD10              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD10              ;85 36                   STA &36			 \ XX15+2
  15++CD10              ;98                      TYA 			 \ step Y1 hi
  16++CD10              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD10              ;85 37                   STA &37			 \ XX15+3
  18++CD10              ;A9 00                   LDA #0			 \ xleft min
  19++CD10              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD10              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD10              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD10              ;	.LL119	\ x1 hi +ve from LL118
  23++CD10              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD10              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD10              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD10              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD10              ;8A                      TXA 			 \ step Y1 lo
  28++CD10              ;18                      CLC
  29++CD10              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD10              ;85 36                   STA &36			 \ XX15+2
  31++CD10              ;98                      TYA 			 \ step Y1 hi
  32++CD10              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD10              ;85 37                   STA &37			 \ XX15+3
  34++CD10              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD10              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD10              ;E8                      INX 			 \ X = 0
  37++CD10              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD10              ;	.LL134	\ Ytrim
  39++CD10              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD10              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD10              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD10              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD10              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD10              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD10              ;8A                      TXA 			 \ step X1 lo
  46++CD10              ;18                      CLC
  47++CD10              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD10              ;85 34                   STA &34			 \ XX15+0
  49++CD10              ;98                      TYA 			 \ step X1 hi
  50++CD10              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD10              ;85 35                   STA &35			 \ XX15+1
  52++CD10              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD10              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD10              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD10              ;	.LL135	\ y1 hi +ve from LL134
  56++CD10              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD10              ;38                      SEC
  58++CD10              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD10              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD10              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD10              ;E9 00                   SBC #0			 \ any hi
  62++CD10              ;85 83                   STA &83			 \ S
  63++CD10              ;90 16                   BCC LL136		 \ failed, rts
  64++CD10              ;	.LL139
  65++CD10              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD10              ;8A                      TXA 			 \ step X1 lo
  67++CD10              ;18                      CLC
  68++CD10              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD10              ;85 34                   STA &34			 \ XX15+0
  70++CD10              ;98                      TYA 			 \ step X1 hi
  71++CD10              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD10              ;85 35                   STA &35			 \ XX15+1
  73++CD10              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD10              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD10              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD10              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD10              ;	.LL136	\ rts
  78++CD10              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD10              ;
  80++CD10
# file closed: ./ModelRender/TrimToScreenGrad-LL118.asm
 775+ CD10                                      include "ModelRender/CLIP-LL145.asm"
# file opened: ./ModelRender/CLIP-LL145.asm
   1++CD10              ;--------------------------------------------------------------------------------------------------------------------
   2++CD10
   3++CD10 00           clipDx                  DB      0           ; also XX12+2
   4++CD11 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD12 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD13 00           clipDy                  DB      0           ; also XX12+4
   7++CD14 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD15 00           clipGradient            DB      0
   9++CD16 00           clipDxySign             DB      0
  10++CD17              varX12p3                equ     clipDxySign
  11++CD17 00           clipXGTY                DB      0
  12++CD18 00           clipFlags               DB      0
  13++CD19 00           SWAP                    DB      0
  14++CD1A 00 00        varYX                   DW      0
  15++CD1C              ;varRegX                 DB      0
  16++CD1C              ;varXX12p2               DB      0
  17++CD1C 00           clipXX13                 DB      0
  18++CD1D
  19++CD1D
  20++CD1D              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD1D              ;ClipXX15XX12Line:
  22++CD1D ED 4B 77 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD21 DD 2A 7B C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD25 2A 75 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD28 ED 5B 79 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD2C AF                                   xor     a
  27++CD2D 32 19 CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD30 7A                                   ld      a,d                         ; A = X2Hi
  29++CD31 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD34                                      ;       push    af
  31++CD34                                      ;       ld      a,iyh
  32++CD34                                      ;       ld      (regX),a
  33++CD34                                      ;       pop     af
  34++CD34 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD36 20 0A                                jr      nz, .LL107
  36++CD38 DD 7D                                ld      a,ixl
  37++CD3A ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD3D 20 03                                jr      nz,.LL107
  39++CD3F FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD42                                      ;        push    af
  41++CD42                                      ;        ld      a,iyh
  42++CD42                                      ;        ld      (regX),a
  43++CD42                                      ;        pop     af
  44++CD42              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD42              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD42 FD 7C        .LL107                  ld      a,iyh
  47++CD44 32 1C CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD47 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD48 B0                                   or      b                           ;
  50++CD49 20 27                                jr      nz,.LL83                    ;
  51++CD4B 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD4C ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD4F 20 21                                jr      nz,.LL83
  54++CD51              ; If we get here, (x1, y1) is on-screen
  55++CD51 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CD53 FE 00                                cp      0
  57++CD55 20 15                                jr      nz, .LL108
  58++CD57              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CD57 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CD58 32 76 C0                             ld      (UBnkNewY1),a
  61++CD5B DD 7D                                ld      a,ixl
  62++CD5D 32 78 C0                             ld      (UBnkNewY2),a
  63++CD60 7D                                   ld      a,l
  64++CD61 32 75 C0                             ld      (UBnkNewX1),a
  65++CD64 7B                                   ld      a,e
  66++CD65 32 77 C0                             ld      (UBnkNewX2),a
  67++CD68                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CD68 B7          >				or a
  68++CD69 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CD6A              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CD6A 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CD6B C9                                   ret
  72++CD6C FD 7C        .LL108:                 ld      a,iyh
  73++CD6E B7                                   or      a
  74++CD6F 1F                                   rra
  75++CD70 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CD72                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CD72                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CD72                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CD72                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CD72 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CD74 ED 27 80                             test    $80                         ;
  82++CD77 28 28                                jr      z, .LL115                   ;
  83++CD79 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CD7A A2                                   and     d
  85++CD7B                                      JumpIfNegative  .PointsOutofBounds
  85++CD7B FA 6A CD    >                        jp		m, .PointsOutofBounds
  86++CD7E 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CD7F DD A4                                and     ixh
  88++CD81                                      JumpIfNegative  .PointsOutofBounds
  88++CD81 FA 6A CD    >                        jp		m, .PointsOutofBounds
  89++CD84 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CD85 3D                                   dec     a
  91++CD86 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CD88                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CD88                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CD88                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CD88                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CD88 7A                                   ld      a,d                         ; a = x2 hi
  97++CD89 3D                                   dec     a
  98++CD8A FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CD8C                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CD8C F2 6A CD    >                        jp		p, .PointsOutofBounds
 100++CD8F              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CD8F DD 7C                                ld      a,ixh
 102++CD91 3D                                   dec     a
 103++CD92 FD 6F                                ld      iyl,a
 104++CD94 78                                   ld      a,b
 105++CD95 3D                                   dec     a
 106++CD96 FD B5                                or      iyl
 107++CD98                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CD98 F2 6A CD    >                        jp		p, .PointsOutofBounds
 108++CD9B 79                                   ld      a,c
 109++CD9C DD A5                                and     ixl
 110++CD9E                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CD9E FA 6A CD    >                        jp		m, .PointsOutofBounds
 111++CDA1              ; Clip line: calulate the line's gradient
 112++CDA1              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CDA1              .LL115:                 ClearCarryFlag
 113++CDA1 B7          >				or a
 114++CDA2 E5 D5        .CalcDX:                push    hl,,de
 115++CDA4 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CDA5 ED 52                                sbc     hl,de
 117++CDA7                                     ; pop     de                          ; we need de back
 118++CDA7 22 10 CD                             ld      (clipDx),hl
 119++CDAA 7C                                   ld      a,h
 120++CDAB 32 12 CD                             ld      (clipDxHighNonABS),a
 121++CDAE                                     ; ld      a,e                         ;a = x2 lo
 122++CDAE                                     ; sbc     a,l                         ;a= a - x1
 123++CDAE                                     ; ld      (clipDx),a
 124++CDAE                                     ; ld      a,d
 125++CDAE                                     ; sbc     a,h
 126++CDAE                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CDAE                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CDAE              .CalcDy:                ClearCarryFlag
 128++CDAE B7          >				or a
 129++CDAF DD E5 E1                             ld      hl,ix
 130++CDB2 ED 42                                sbc     hl,bc
 131++CDB4 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CDB6 22 13 CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CDB9 7C           .CalcQuadrant:          ld      a,h
 134++CDBA                                     ; ld      a,ixl
 135++CDBA                                     ; sbc     c
 136++CDBA                                     ; ld      (clipDy),a
 137++CDBA                                     ; ld      a,ixh
 138++CDBA                                     ; sbc     a,b
 139++CDBA                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CDBA                                     ; pop     hl
 141++CDBA
 142++CDBA              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CDBA                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CDBA 21 11 CD                             ld      hl,clipDxHigh
 145++CDBD AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CDBE 32 71 92                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CDC1 32 16 CD                             ld      (clipDxySign),a
 148++CDC4 3A 14 CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CDC7 ED 27 80                             test    $80
 150++CDCA 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CDCC 2A 13 CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CDCF                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CDCF AF          >					xor 	a
 152++CDD0 93          >                    sub 	e
 152++CDD1 5F          >                    ld 		e,a
 152++CDD2 9F          >                    sbc 	a,a
 152++CDD3 92          >                    sub 	d
 152++CDD4 57          >                    ld 		d,a
 153++CDD5 22 13 CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CDD8 2A 10 CD     .LL110:                 ld      hl,(clipDx)
 155++CDDB 3A 11 CD                             ld      a,(clipDxHigh)
 156++CDDE ED 27 80                             test    $80                         ; is it a negative X
 157++CDE1 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CDE3                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CDE3                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CDE3 AF          >					xor 	a
 159++CDE4 95          >					sub 	l
 159++CDE5 6F          >					ld 		l,a
 159++CDE6 9F          >					sbc 	a,a
 159++CDE7 94          >					sub 	h
 159++CDE8 67          >					ld 		h,a
 160++CDE9                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CDE9              .LL111:               ;  push    de
 162++CDE9                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CDE9                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CDE9 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CDEA B2                                   or      d
 166++CDEB 28 0A                                jr      z,.CalculateDelta
 166++CDED
 167++CDED                                      ShiftDERight1
 167++CDED CB 3A       >			   srl d
 167++CDEF CB 1B       >			   rr  e
 168++CDF1                                      ShiftHLRight1
 168++CDF1 CB 3C       >			   srl h
 168++CDF3 CB 1D       >			   rr  l
 169++CDF5 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CDF7              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CDF7                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CDF7              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CDF7 AF           .LL113:                 xor     a
 174++CDF8 32 90 92                             ld      (varT),a                    ; t = 0
 175++CDFB 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CDFC                                      JumpIfALTNusng  e, .LL114           ;
 176++CDFC BB          >                        cp      e
 176++CDFD DA 0D CE    >                        jp		c,.LL114
 177++CE00              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CE00 32 6F 92     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CE03 57                                   ld      d,a                         ; d = also Q for calc
 180++CE04 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CE05 CD 43 A9                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CE08 32 70 92                             ld      (varR),a                    ;
 183++CE0B 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CE0D              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CE0D 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CE0E 57                                   ld      d,a
 187++CE0F 32 6F 92                             ld      (varQ),a
 188++CE12 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE13 CD 43 A9                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE16 32 70 92                             ld      (varR),a                    ;
 191++CE19 21 90 92                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE1C 35                                   dec     (hl)
 193++CE1D D1           .LL116:                 pop     de                          ; get back X2
 194++CE1E E1                                   pop     hl                          ; get back X1 into hl,
 195++CE1F 3A 70 92                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE22 32 15 CD                             ld      (clipGradient),a
 197++CE25 FD 6F                                ld      iyl,a
 198++CE27                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE27                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE27                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE27                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE27 3A 71 92                             ld      a,(varS)
 203++CE2A 32 16 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE2D                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE2D FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE2F FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE31 28 05                                jr      z,.LL138                    ;
 208++CE33 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE36 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE38              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE38 CD 5F CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE3B FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE3D ED 27 80                             test    $80
 214++CE40 28 1A                                jr      z,.LL124
 215++CE42              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE42 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE43 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE44 C2 6A CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE47 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE48 FA 6A CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE4B              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE4B              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE4B EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE4C DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE4E C5                                   push    bc
 226++CE4F DD E1                                pop     ix
 227++CE51 C1                                   pop     bc
 228++CE52 CD 5F CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CE55 3A 19 CD                             ld      a,(SWAP)
 230++CE58 3D                                   dec     a
 231++CE59 32 19 CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CE5C C3 57 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CE5F
 234++CE5F              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CE5F              ; iyh still holds XX13 iyl still holds gradient
 236++CE5F 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CE60 ED 27 80                             test    $80
 238++CE63 28 17                                jr      z,.LL119
 239++CE65 32 71 92     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CE68 E5 D5 C5                             push    hl,,de,,bc
 241++CE6B CD E1 CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CE6E                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CE6E                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CE6E C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CE71 2A 1A CD                             ld      hl,(varYX)
 246++CE74              ;                        ex      hl,de
 247++CE74                                  ;    ld      hl,bc
 248++CE74 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CE75 44 4D                                ld      bc,hl
 250++CE77 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CE7A               ;                       pop     de
 252++CE7A 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CE7C FE 00        .LL119:                 cp      0
 254++CE7E 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CE80 3D                                   dec     a
 256++CE81 32 71 92                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CE84 E5 D5 C5                             push    hl,,de,,bc
 258++CE87 CD E1 CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CE8A                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CE8A                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CE8A C1 D1 E1                             pop     hl,,de,,bc
 262++CE8D                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CE8D 2A 1A CD                             ld      hl,(varYX)
 264++CE90                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CE90 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CE91 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CE93                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CE93                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CE93                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CE93 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CE96                                    ;  pop     de
 272++CE96              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CE96 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CE97 ED 27 80                             test    $80                         ;
 275++CE9A 28 1A                                jr      z,.LL135                    ;
 276++CE9C 32 71 92                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CE9F 79                                   ld      a,c                         ; Set R = y1_lo
 278++CEA0 32 70 92                             ld      (varR),a                    ;
 279++CEA3 E5 D5 C5                             push    hl,,de,,bc
 280++CEA6 CD 08 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CEA9                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CEA9                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CEA9 C1 D1 E1                             pop     hl,,de,,bc
 284++CEAC D5                                   push    de
 285++CEAD EB                                   ex      hl,de                       ; de = x1
 286++CEAE 2A 1A CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEB1 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CEB2 D1                                   pop     de                          ; de = x2 again
 289++CEB3 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CEB6 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CEB7 E6 80                                and     $80
 292++CEB9 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CEBA C8                                   ret     z
 294++CEBB E5                                   push    hl
 295++CEBC 60 69                                ld      hl,bc
 296++CEBE 01 80 00                             ld      bc,128
 297++CEC1 B7                                   or      a
 298++CEC2 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CEC4 22 70 92                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CEC7 7C                                   ld      a,h
 301++CEC8 E1                                   pop     hl
 302++CEC9 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CECC C0                                   ret     nz
 304++CECD              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CECD E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CED0 CD 08 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CED3                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CED3                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CED3 C1 D1 E1                             pop     hl,,de,,bc
 310++CED6 D5                                   push    de
 311++CED7 EB                                   ex      hl,de
 312++CED8 2A 1A CD                             ld      hl,(varYX)
 313++CEDB 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CEDC 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CEDF D1                                   pop     de
 316++CEE0 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CEE1
 318++CEE1
 319++CEE1              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CEE1              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CEE1              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CEE1              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CEE1 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CEE2 32 70 92                             ld      (varR),a
 325++CEE5 CD 50 CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CEE8 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CEE9 C5                                   push    bc
 328++CEEA 47                                   ld      b,a
 329++CEEB 3A 90 92                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CEEE FE 00                                cp      0
 331++CEF0 78                                   ld      a,b
 332++CEF1 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CEF2 20 23                                jr      nz, LL121
 334++CEF4              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CEF4 3A 15 CD     LL122:                  ld      a,(clipGradient)
 336++CEF7 32 6F 92                             ld      (varQ),a; optimise
 337++CEFA CD 75 9F                             call    HLequSRmulQdiv256
 338++CEFD 22 1A CD                             ld      (varYX),hl
 339++CF00 F1                                   pop     af
 340++CF01 ED 27 80                             test    $80
 341++CF04 CA 43 CF                             jp      z,LL133
 342++CF07 C9                                   ret
 343++CF08              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CF08              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CF08              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CF08              ;
 347++CF08              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CF08              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CF08              ;                          LL128                Contains an RTS
 350++CF08 CD 50 CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CF0B F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CF0C C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CF0D 47                                   ld      b,a
 354++CF0E 3A 90 92                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF11 FE 00                                cp      0
 356++CF13 78                                   ld      a,b
 357++CF14 C1                                   pop     bc
 358++CF15 20 DD                                jr      nz, LL122
 359++CF17              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF17 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF1A 2A 70 92                             ld      hl,(varRS)                  ; hl = RS
 362++CF1D 3A 6F 92                             ld      a,(varQ)
 363++CF20 47                                   ld      b,a                         ; b = q
 364++CF21              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF21 CB 25       >			   sla l
 364++CF23 CB 14       >			   rl  h
 365++CF25 7C                                   ld      a,h
 366++CF26 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF28                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF28 B8          >                        cp      b
 367++CF29 DA 34 CF    >                        jp		c,.LL132
 368++CF2C 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF2D 98                                   sbc     a,b                         ; q
 370++CF2E 67                                   ld      h,a                         ; h (s)
 371++CF2F 7D                                   ld      a,l                         ; r
 372++CF30 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF32 37                                   scf                                 ; set carry for next rolls
 374++CF33 3F                                   ccf
 375++CF34              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF34 CB 13       >               rl  e
 375++CF36 CB 12       >               rl   d
 376++CF38 38 E7                                jr      c,.LL130                    ;
 377++CF3A ED 53 1A CD                          ld      (varYX),de
 378++CF3E F1                                   pop     af              ; get back sign
 379++CF3F ED 27 80                             test    $80
 380++CF42 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF43 2A 1A CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF46                                      NegHL
 382++CF46 AF          >                xor a
 382++CF47 95          >                sub l
 382++CF48 6F          >                ld l,a
 382++CF49 9F          >                sbc a,a
 382++CF4A 94          >                sub h
 382++CF4B 67          >                ld h,a
 383++CF4C 22 1A CD                             ld      (varYX),hl
 384++CF4F C9           LL128:                  ret
 385++CF50              ; Do the following, in this order:  Q = XX12+2
 386++CF50              ;                                   A = S EOR XX12+3
 387++CF50              ;                                   (S R) = |S R|
 388++CF50              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF50 3A 15 CD     LL129:                  ld      a,(clipGradient)
 390++CF53 32 6F 92                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CF56 3A 71 92                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CF59 E5 F5                                push    hl,,af
 393++CF5B ED 27 80                             test    $80
 394++CF5E 28 0C                                jr      z,.LL127
 395++CF60 2A 70 92                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CF63                                      NegHL
 396++CF63 AF          >                xor a
 396++CF64 95          >                sub l
 396++CF65 6F          >                ld l,a
 396++CF66 9F          >                sbc a,a
 396++CF67 94          >                sub h
 396++CF68 67          >                ld h,a
 397++CF69 22 70 92                             ld      (varRS),hl
 398++CF6C 21 16 CD     .LL127:                 ld      hl,clipDxySign
 399++CF6F F1                                   pop     af
 400++CF70 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CF71 E1                                   pop     hl
 402++CF72 C9                                   ret
 403++CF73
# file closed: ./ModelRender/CLIP-LL145.asm
 776+ CF73              ;--------------------------------------------------------------------------------------------------------
 777+ CF73                                      include "Universe/CopyRotmatToTransMat.asm"
# file opened: ./Universe/CopyRotmatToTransMat.asm
   1++CF73              ; Set TransMatTo
   2++CF73              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CF73              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CF73              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CF73              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CF73              CopyRotmatToTransMat:                       ; Tested
   7++CF73              LL15_CopyRotMat:                            ; unrolled loop
   8++CF73 21 14 C0             ld      hl,UBnkrotmatSidevX
   9++CF76 11 30 C0             ld      de,UBnkTransmatSidevX
  10++CF79                      SixLDIInstrunctions
  10++CF79 ED A0       >                        ldi
  10++CF7B ED A0       >                        ldi
  10++CF7D ED A0       >                        ldi
  10++CF7F ED A0       >                        ldi
  10++CF81 ED A0       >                        ldi
  10++CF83 ED A0       >                        ldi
  11++CF85 21 1A C0             ld      hl,UBnkrotmatRoofvX
  12++CF88 11 36 C0             ld      de, UBnkTransmatRoofvX
  13++CF8B                      SixLDIInstrunctions
  13++CF8B ED A0       >                        ldi
  13++CF8D ED A0       >                        ldi
  13++CF8F ED A0       >                        ldi
  13++CF91 ED A0       >                        ldi
  13++CF93 ED A0       >                        ldi
  13++CF95 ED A0       >                        ldi
  14++CF97 21 20 C0             ld      hl,UBnkrotmatNosevX
  15++CF9A 11 3C C0             ld      de, UBnkTransmatNosevX
  16++CF9D                      SixLDIInstrunctions
  16++CF9D ED A0       >                        ldi
  16++CF9F ED A0       >                        ldi
  16++CFA1 ED A0       >                        ldi
  16++CFA3 ED A0       >                        ldi
  16++CFA5 ED A0       >                        ldi
  16++CFA7 ED A0       >                        ldi
  17++CFA9 C9                   ret
  18++CFAA
# file closed: ./Universe/CopyRotmatToTransMat.asm
 778+ CFAA              ;--------------------------------------------------------------------------------------------------------
 779+ CFAA 21 A1 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 780+ CFAD ED 31                                add     hl,a
 781+ CFAF 3E FF                                ld      a,$FF
 782+ CFB1 77                                   ld      (hl),a
 783+ CFB2 C9                                   ret
 784+ CFB3              ;--------------------------------------------------------------------------------------------------------
 785+ CFB3 21 A1 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 786+ CFB6 ED 31                                add     hl,a
 787+ CFB8 AF                                   xor     a
 788+ CFB9 77                                   ld      (hl),a
 789+ CFBA C9                                   ret
 790+ CFBB              ;--------------------------------------------------------------------------------------------------------
 791+ CFBB 3A 0A C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 792+ CFBE CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 793+ CFC0 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 794+ CFC2 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 795+ CFC3 21 A1 C0                             ld      hl,UbnkFaceVisArray
 796+ CFC6 3E FF                                ld      a,$FF
 797+ CFC8              SetAllFacesVisibleLoop:
 798+ CFC8 77           EE30:                   ld      (hl),a
 799+ CFC9 23                                   inc     hl
 800+ CFCA 10 FC                                djnz    SetAllFacesVisibleLoop
 801+ CFCC C9                                   ret
 802+ CFCD              ;--------------------------------------------------------------------------------------------------------
 803+ CFCD 3A 0A C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 804+ CFD0 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 805+ CFD2 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 806+ CFD4 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 807+ CFD5 06 10                                ld      b,16
 808+ CFD7 21 A1 C0                             ld      hl,UbnkFaceVisArray
 809+ CFDA 3E 00                                ld      a,$00
 810+ CFDC 77           SetAllFacesHiddenLoop:  ld      (hl),a
 811+ CFDD 23                                   inc     hl
 812+ CFDE 10 FC                                djnz    SetAllFacesHiddenLoop
 813+ CFE0 C9                                   ret
 814+ CFE1
 815+ CFE1              ;;;;X = normal scale
 816+ CFE1              ;;;;ZtempHi = zhi
 817+ CFE1              ;;;;......................................................
 818+ CFE1              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 819+ CFE1              ;;;;  Loop                                              ::LL90
 820+ CFE1              ;;;;     inc X
 821+ CFE1              ;;;;     divide X, Y & ZtempHiLo by 2
 822+ CFE1              ;;;;  Until ZtempHi = 0
 823+ CFE1              ;;;;......................................................
 824+ CFE1              ;-LL21---------------------------------------------------------------------------------------------------
 825+ CFE1                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++CFE1              ;divdide by 16 using undocumented instrunctions
   2++CFE1              Norm256mulAdivQ:
   3++CFE1 47               ld      b,a
   4++CFE2 0E 00            ld      c,0
   5++CFE4 16 00            ld      d,0
   6++CFE6 3A 6F 92         ld      a,(varQ)
   7++CFE9 5F               ld      e,a
   8++CFEA              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CFEA              ;Output: BC = Quotient, HL = Remainder
  10++CFEA              NormDIV16UNDOC:
  11++CFEA 21 00 00         ld      hl,0
  12++CFED 78               ld      a,b
  13++CFEE 06 10            ld      b,16
  14++CFF0              NormDIV16UNDOCLOOP:
  15++CFF0 CB 31        	sll	    c		; unroll 16 times
  16++CFF2 17           	rla	    		; ...
  17++CFF3 ED 6A        	adc	    hl,hl		; ...
  18++CFF5 ED 52        	sbc	    hl,de		; ...
  19++CFF7 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CFF9 19           	add	    hl,de		; ...
  21++CFFA 0D           	dec	    c		; ...
  22++CFFB              NormDIV16UNDOCSKIP:
  23++CFFB 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CFFD 79               ld      a,c
  25++CFFE 32 70 92         ld      (varR),a
  26++D001 C9               ret
  27++D002
  28++D002              ; Tested OK
  29++D002              NormaliseTransMat:
  30++D002              ;LL21
  31++D002 21 41 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D005 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D007 79                   ld      a,c
  34++D008 32 6F 92             ld      (varQ),a                    ; set up varQ
  35++D00B 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D00D              LL21Loop:
  37++D00D 56                   ld      d,(hl)
  38++D00E 2B                   dec     hl
  39++D00F 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D010                      ShiftDELeft1                        ; De = DE * 2
  40++D010 CB 23       >			   sla e
  40++D012 CB 12       >			   rl  d
  41++D014 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D015 E5           		push	hl
  43++D016 C5           		push	bc
  44++D017 CD E1 CF             call    Norm256mulAdivQ
  45++D01A              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D01A 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D01B C1           		pop		bc
  48++D01C E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D01D 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D01E 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D01F 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D021 C9                   ret
  53++D022
# file closed: ./Universe/NormaliseTransMat.asm
 826+ D022              ;-LL91---------------------------------------------------------------------------------------------------
 827+ D022 21 0B C0     LoadCraftToCamera:      ld      hl,UBnKxlo
 828+ D025 11 69 C0                             ld      de,UBnkDrawCam0xLo
 829+ D028                                      NineLDIInstrunctions                ; transfer 9 bytes
 829+ D028 ED A0       >		                ldi
 829+ D02A ED A0       >		                ldi
 829+ D02C ED A0       >		                ldi
 829+ D02E ED A0       >		                ldi
 829+ D030 ED A0       >		                ldi
 829+ D032 ED A0       >		                ldi
 829+ D034 ED A0       >		                ldi
 829+ D036 ED A0       >		                ldi
 829+ D038 ED A0       >		                ldi
 830+ D03A C9                                   ret
 831+ D03B              ; Now we have
 832+ D03B              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 833+ D03B              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 834+ D03B              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 835+ D03B              ;
 836+ D03B              ;--------------------------------------------------------------------------------------------------------
 837+ D03B                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D03B              ; TESTEDOK
   2++D03B
   3++D03B              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D03B              ;        ld      a,(XX17)
   5++D03B              ;        ld      ixl,a
   6++D03B              ;        ld      ixh,9
   7++D03B              ;        ld      hl,UBnkTransInv0x
   8++D03B              ;        ld      a,(hl)
   9++D03B              ;ScaleNode:
  10++D03B              ;        ld      b,ixl
  11++D03B              ;ScaleNodeLoop:
  12++D03B              ;        sla      a
  13++D03B              ;        djnz    ScaleNodeLoop
  14++D03B              ;        ld      (hl),a
  15++D03B              ;        inc     hl
  16++D03B              ;        inc     hl
  17++D03B              ;        dec     ixh
  18++D03B              ;        jr      nz,ScaleNode
  19++D03B              ;        ret
  20++D03B
  21++D03B
  22++D03B              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D03B              ; we coudl combine this with move to transmat later as an optimisation
  24++D03B              ; INPUT - All Scaled
  25++D03B              ;  They transmat has already been put into side, roof nose order
  26++D03B              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D03B              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D03B              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D03B              ; OUTPUT
  30++D03B              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D03B              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D03B              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D03B              ; First all side values become compoment 0 of each vector
  34++D03B 2A 30 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D03E ED 5B 36 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D042 ED 4B 3C C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D046 22 48 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D049 ED 53 4A C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D04D ED 43 4C C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D051 2A 32 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D054 ED 5B 38 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D058 ED 4B 3E C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D05C 22 50 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D05F ED 53 52 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D063 ED 43 54 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D067 2A 34 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D06A ED 5B 3A C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D06E ED 4B 40 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D072 22 58 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D075 ED 53 5A C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D079 ED 43 5C C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D07D C9                   ret
  53++D07E
  54++D07E
# file closed: ./Universe/InverseXX16.asm
 838+ D07E              ;--------------------------------------------------------------------------------------------------------
 839+ D07E              ;--------------------------------------------------------------------------------------------------------
 840+ D07E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 841+ D07E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 842+ D07E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 843+ D07E              ; Returns
 844+ D07E              ;
 845+ D07E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 846+ D07E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 847+ D07E              ;
 848+ D07E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 849+ D07E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 850+ D07E              ;
 851+ D07E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 852+ D07E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 853+ D07E              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 854+ D07E ~                                    ld      c,0
 855+ D07E ~                                    ld      a,param3                      ;
 856+ D07E ~                                    bit     7,a
 857+ D07E ~                                    jr      z,.val2Pos
 858+ D07E ~            ;HandleSignebits
 859+ D07E ~                                    neg
 860+ D07E ~                                    ld      c,$80
 861+ D07E ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 862+ D07E ~                                    ld      a,param2                        ; A = XX16 element
 863+ D07E ~                                    bit     7,a
 864+ D07E ~                                    jr      z,.val1Pos
 865+ D07E ~            ;HandleSignebits
 866+ D07E ~                                    neg
 867+ D07E ~                                    ld      b,a
 868+ D07E ~                                    ld      a,c
 869+ D07E ~                                    xor     $80
 870+ D07E ~                                    ld      c,a
 871+ D07E ~                                    ld      a,b
 872+ D07E ~            .val1Pos:               ld      d,a
 873+ D07E ~            ;AequAmulQdiv256:
 874+ D07E ~                                    mul
 875+ D07E ~                                    ld      a,c
 876+ D07E ~                                    bit     7,a
 877+ D07E ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 878+ D07E ~                                    jr      z,.resultPos
 879+ D07E ~                                    neg
 880+ D07E ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 881+ D07E                                      ENDM
 882+ D07E
 883+ D07E              AequN1xorN2:            MACRO  param1,param2
 884+ D07E ~                                    ld      a,(param1)
 885+ D07E ~                                    xor     param2
 886+ D07E                                      ENDM
 887+ D07E
 888+ D07E              N0equN1byN2div256:      MACRO param1,param2,param3
 889+ D07E ~                                    ld      a,param3                        ;
 890+ D07E ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 891+ D07E ~                                    ld      a,param2                        ; A = XX16 element
 892+ D07E ~                                    ld      d,a
 893+ D07E ~                                    mul
 894+ D07E ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 895+ D07E ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 896+ D07E                                      ENDM
 897+ D07E
 898+ D07E               ; TESTEDOK
 899+ D07E              XX12DotOneRow:
 900+ D07E              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 900+ D07E 3A 75 C0    >                        ld      a,(UBnkXScaled)                        ;
 900+ D081 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 900+ D082 7E          >                        ld      a,(hl)                        ; A = XX16 element
 900+ D083 57          >                        ld      d,a
 900+ D084 ED 30       >                        mul
 900+ D086 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 900+ D087 32 90 92    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 901+ D08A 23                                   inc     hl                                  ; move to sign byte
 902+ D08B              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 902+ D08B 3A 76 C0    >                        ld      a,(UBnkXScaledSign)
 902+ D08E AE          >                        xor     (hl)
 903+ D08F 32 71 92                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 904+ D092 23                                   inc     hl
 905+ D093              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 905+ D093 3A 77 C0    >                        ld      a,(UBnkYScaled)                        ;
 905+ D096 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 905+ D097 7E          >                        ld      a,(hl)                        ; A = XX16 element
 905+ D098 57          >                        ld      d,a
 905+ D099 ED 30       >                        mul
 905+ D09B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 905+ D09C 32 6F 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 906+ D09F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 906+ D09F 3A 90 92    >               ld       a,(varT)
 906+ D0A2 32 70 92    >               ld       (varR),a
 907+ D0A5 23                                   inc     hl
 908+ D0A6                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 908+ D0A6 3A 78 C0    >                        ld      a,(UBnkYScaledSign)
 908+ D0A9 AE          >                        xor     (hl)
 909+ D0AA              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 910+ D0AA E5           STequSRplusAQ           push    hl
 911+ D0AB CD F6 A5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 912+ D0AE E1                                   pop     hl
 913+ D0AF 32 90 92                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 914+ D0B2 23                                   inc     hl
 915+ D0B3              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 915+ D0B3 3A 79 C0    >                        ld      a,(UBnkZScaled)                        ;
 915+ D0B6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 915+ D0B7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 915+ D0B8 57          >                        ld      d,a
 915+ D0B9 ED 30       >                        mul
 915+ D0BB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 915+ D0BC 32 6F 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 916+ D0BF                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 916+ D0BF 3A 90 92    >               ld       a,(varT)
 916+ D0C2 32 70 92    >               ld       (varR),a
 917+ D0C5 23                                   inc     hl
 918+ D0C6                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 918+ D0C6 3A 7A C0    >                        ld      a,(UBnkZScaledSign)
 918+ D0C9 AE          >                        xor     (hl)
 919+ D0CA              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 920+ D0CA CD F6 A5                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 921+ D0CD              ; Now we exit with A = result S = Sign
 922+ D0CD C9                                   ret
 923+ D0CE
 924+ D0CE              ; added where sign is separate byte
 925+ D0CE              ;;;XX12DotOneRowV2:
 926+ D0CE              ;;;XX12CalcXV2:
 927+ D0CE              ;;;        ld      a,(hl)
 928+ D0CE              ;;;        ld      de,(UBnkXScaled)
 929+ D0CE              ;;;        ld      b,d
 930+ D0CE              ;;;        ld      d,a
 931+ D0CE              ;;;        mul
 932+ D0CE              ;;;        ld      a,e
 933+ D0CE              ;;;        ld      (varT),a
 934+ D0CE              ;;;XX12CalcXSignV2:
 935+ D0CE              ;;;        inc     hl
 936+ D0CE              ;;;        ld      a,(hl)
 937+ D0CE              ;;;        xor     b
 938+ D0CE              ;;;        ld      (varS),a
 939+ D0CE              ;;;XX12CalcYV2:
 940+ D0CE              ;;;        inc     hl
 941+ D0CE              ;;;        ld      de,(UBnkYScaled)
 942+ D0CE              ;;;        ld      b,d
 943+ D0CE              ;;;        ld      d,a
 944+ D0CE              ;;;        mul
 945+ D0CE              ;;;        ld      a,e
 946+ D0CE              ;;;        ld      (varQ),a
 947+ D0CE              ;;;        ld      a,(varT)
 948+ D0CE              ;;;        ld      (varR),a
 949+ D0CE              ;;;XX12CalcYSignV2:
 950+ D0CE              ;;;        inc     hl
 951+ D0CE              ;;;        ld      a,(hl)
 952+ D0CE              ;;;        xor     b
 953+ D0CE              ;;;        ld      (varS),a
 954+ D0CE              ;;;XX12CalcXPlusYV2:
 955+ D0CE              ;;;        push    hl
 956+ D0CE              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 957+ D0CE              ;;;        pop     hl
 958+ D0CE              ;;;        ld      (varT),a                            ; var S already holds sign
 959+ D0CE              ;;;       ret
 960+ D0CE
 961+ D0CE
 962+ D0CE              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 963+ D0CE              ;TESTED OK
 964+ D0CE              XX12EquXX15DotProductXX16:
 965+ D0CE              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 966+ D0CE 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 967+ D0D1 21 30 C0                             ld      hl,UBnkTransmatSidevX
 968+ D0D4 CD 7E D0                             call    XX12DotOneRow
 969+ D0D7 32 7B C0                             ld      (UBnkXX12xLo),a
 970+ D0DA 3A 71 92                             ld      a,(varS)
 971+ D0DD 32 7C C0                             ld      (UBnkXX12xSign),a
 972+ D0E0 21 36 C0                             ld      hl,UBnkTransmatRoofvX
 973+ D0E3 CD 7E D0                             call    XX12DotOneRow
 974+ D0E6 32 7D C0                             ld      (UBnkXX12yLo),a
 975+ D0E9 3A 71 92                             ld      a,(varS)
 976+ D0EC 32 7E C0                             ld      (UBnkXX12ySign),a
 977+ D0EF 21 3C C0                             ld      hl,UBnkTransmatNosevX
 978+ D0F2 CD 7E D0                             call    XX12DotOneRow
 979+ D0F5 32 7F C0                             ld      (UBnkXX12zLo),a
 980+ D0F8 3A 71 92                             ld      a,(varS)
 981+ D0FB 32 80 C0                             ld      (UBnkXX12zSign),a
 982+ D0FE C9                                   ret
 983+ D0FF              ;--------------------------------------------------------------------------------------------------------
 984+ D0FF                                      include "Universe/CopyXX12ScaledToXX18.asm"
# file opened: ./Universe/CopyXX12ScaledToXX18.asm
   1++D0FF              CopyXX12ScaledToXX18:
   2++D0FF              CopyResultToDrawCam:
   3++D0FF                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D0FF 3A 7B C0    >               ld       a,(XX12)
   3++D102 32 69 C0    >               ld       (XX18),a
   4++D105                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D105 3A 7C C0    >               ld       a,(XX12+1)
   4++D108 32 6B C0    >               ld       (XX18+2),a
   5++D10B                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D10B 3A 7D C0    >               ld       a,(XX12+2)
   5++D10E 32 6C C0    >               ld       (XX18+3),a
   6++D111                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D111 3A 7E C0    >               ld       a,(XX12+3)
   6++D114 32 6E C0    >               ld       (XX18+5),a
   7++D117                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D117 3A 7F C0    >               ld       a,(XX12+4)
   7++D11A 32 6F C0    >               ld       (XX18+6),a
   8++D11D                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D11D 3A 80 C0    >               ld       a,(XX12+5)
   8++D120 32 71 C0    >               ld       (XX18+8),a
   9++D123 C9                   ret
  10++D124
# file closed: ./Universe/CopyXX12ScaledToXX18.asm
 985+ D124              ;--------------------------------------------------------------------------------------------------------
 986+ D124                                      include "Universe/CopyXX18toXX15.asm"
# file opened: ./Universe/CopyXX18toXX15.asm
   1++D124              CopyXX18toXX15:
   2++D124              CopyDrawCamToScaled:
   3++D124                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D124 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D127 32 75 C0    >               ld       (UBnkXScaled),a
   4++D12A                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D12A 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D12D 32 76 C0    >               ld       (UBnkXScaledSign),a
   5++D130                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D130 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D133 32 77 C0    >               ld       (UBnkYScaled),a
   6++D136                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D136 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D139 32 78 C0    >               ld       (UBnkYScaledSign),a
   7++D13C                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D13C 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D13F 32 79 C0    >               ld       (UBnkZScaled),a
   8++D142                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D142 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D145 32 7A C0    >               ld       (UBnkZScaledSign),a
   9++D148 C9                   ret
  10++D149
# file closed: ./Universe/CopyXX18toXX15.asm
 987+ D149              ;--------------------------------------------------------------------------------------------------------
 988+ D149                                      include "Universe/CopyXX18ScaledToXX15.asm"
# file opened: ./Universe/CopyXX18ScaledToXX15.asm
   1++D149              CopyXX18ScaledToXX15:
   2++D149              CopyDrawCamToScaledMatrix:
   3++D149                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
   3++D149 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
   3++D14C 32 7A C0    >               ld       (UBnkZScaledSign),a
   4++D14F                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
   4++D14F 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
   4++D152 32 75 C0    >               ld       (UBnkXScaled),a
   5++D155                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
   5++D155 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
   5++D158 32 76 C0    >               ld       (UBnkXScaledSign),a
   6++D15B                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
   6++D15B 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
   6++D15E 32 77 C0    >               ld       (UBnkYScaled),a
   7++D161                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
   7++D161 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
   7++D164 32 78 C0    >               ld       (UBnkYScaledSign),a
   8++D167                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
   8++D167 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
   8++D16A 32 79 C0    >               ld       (UBnkZScaled),a
   9++D16D C9                   ret
  10++D16E
  11++D16E              CopyXX15ToXX18Scaled:
  12++D16E              CopyScaledMatrixToDrawCam:
  13++D16E                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  13++D16E 3A 7A C0    >               ld       a,(UBnkZScaledSign)
  13++D171 32 71 C0    >               ld       (UBnkDrawCam0zSgn),a
  14++D174                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  14++D174 3A 75 C0    >               ld       a,(UBnkXScaled)
  14++D177 32 69 C0    >               ld       (UBnkDrawCam0xLo),a
  15++D17A                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  15++D17A 3A 76 C0    >               ld       a,(UBnkXScaledSign)
  15++D17D 32 6B C0    >               ld       (UBnkDrawCam0xSgn),a
  16++D180                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  16++D180 3A 77 C0    >               ld       a,(UBnkYScaled)
  16++D183 32 6C C0    >               ld       (UBnkDrawCam0yLo),a
  17++D186                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  17++D186 3A 78 C0    >               ld       a,(UBnkYScaledSign)
  17++D189 32 6E C0    >               ld       (UBnkDrawCam0ySgn),a
  18++D18C                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  18++D18C 3A 79 C0    >               ld       a,(UBnkZScaled)
  18++D18F 32 6F C0    >               ld       (UBnkDrawCam0zLo),a
  19++D192 C9                   ret
  20++D193
  21++D193
  22++D193              XX15EquXX15AddXX18:
  23++D193              LL94Z:
  24++D193 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  25++D195 16 00                ld      d,0                                                     ;
  26++D197 3A 79 C0             ld      a,(UBnkZScaled)                                         ;
  27++D19A 6F                   ld      l,a                                                     ;
  28++D19B 3A 7A C0             ld      a,(UBnkZScaledSign)                                     ;
  29++D19E 47                   ld      b,a                                                     ;
  30++D19F 3A 6F C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  31++D1A2 5F                   ld      e,a                                                     ;
  32++D1A3 3A 71 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  33++D1A6 4F                   ld      c,a                                                     ;
  34++D1A7 CD 3B CB             call    ADDHLDESignBC                                           ;
  35++D1AA 47                   ld      b,a                                                     ;
  36++D1AB 7C                   ld      a,h                                                     ;
  37++D1AC 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  38++D1AD 32 7A C0             ld      (UBnkZScaledSign),a                                     ;
  39++D1B0 7D                   ld      a,l                                                     ;
  40++D1B1 32 79 C0             ld      (UBnkZScaled),a                                         ;           endif
  41++D1B4              LL94X:
  42++D1B4 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  43++D1B6 16 00                ld      d,0                                                     ;
  44++D1B8 3A 75 C0             ld      a,(UBnkXScaled)                                         ;
  45++D1BB 6F                   ld      l,a                                                     ;
  46++D1BC 3A 76 C0             ld      a,(UBnkXScaledSign)                                     ;
  47++D1BF 47                   ld      b,a                                                     ;
  48++D1C0 3A 69 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  49++D1C3 5F                   ld      e,a                                                     ;
  50++D1C4 3A 6B C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  51++D1C7 4F                   ld      c,a                                                     ;
  52++D1C8 CD 3B CB             call    ADDHLDESignBC                                           ;
  53++D1CB 47                   ld      b,a                                                     ;
  54++D1CC 7C                   ld      a,h                                                     ;
  55++D1CD 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  56++D1CE 32 76 C0             ld      (UBnkXScaledSign),a                                     ;
  57++D1D1 7D                   ld      a,l                                                     ;
  58++D1D2 32 75 C0             ld      (UBnkXScaled),a                                         ;           endif
  59++D1D5              LL94Y:
  60++D1D5 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  61++D1D7 16 00                ld      d,0                                                     ;
  62++D1D9 3A 77 C0             ld      a,(UBnkYScaled)                                         ;
  63++D1DC 6F                   ld      l,a                                                     ;
  64++D1DD 3A 78 C0             ld      a,(UBnkYScaledSign)                                     ;
  65++D1E0 47                   ld      b,a                                                     ;
  66++D1E1 3A 6C C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  67++D1E4 5F                   ld      e,a                                                     ;
  68++D1E5 3A 6E C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  69++D1E8 4F                   ld      c,a                                                     ;
  70++D1E9 CD 3B CB             call    ADDHLDESignBC                                           ;
  71++D1EC 47                   ld      b,a                                                     ;
  72++D1ED 7C                   ld      a,h                                                     ;
  73++D1EE 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  74++D1EF 32 78 C0             ld      (UBnkYScaledSign),a                                     ;
  75++D1F2 7D                   ld      a,l                                                     ;
  76++D1F3 32 77 C0             ld      (UBnkYScaled),a                                         ;
  77++D1F6 C9                   ret
  78++D1F7
# file closed: ./Universe/CopyXX18ScaledToXX15.asm
 989+ D1F7              ;--------------------------------------------------------------------------------------------------------
 990+ D1F7                                      include "Universe/CopyXX12ToScaled.asm"
# file opened: ./Universe/CopyXX12ToScaled.asm
   1++D1F7              CopyXX12ToScaled:
   2++D1F7              CopyResultToScaled:
   3++D1F7                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D1F7 3A 7B C0    >               ld       a,(XX12+0)
   3++D1FA 32 75 C0    >               ld       (UBnkXScaled),a
   4++D1FD                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D1FD 3A 7D C0    >               ld       a,(XX12+2)
   4++D200 32 77 C0    >               ld       (UBnkYScaled),a
   5++D203                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D203 3A 7F C0    >               ld       a,(XX12+4)
   5++D206 32 79 C0    >               ld       (UBnkZScaled),a
   6++D209 C9                   ret
   7++D20A
# file closed: ./Universe/CopyXX12ToScaled.asm
 991+ D20A              ;--------------------------------------------------------------------------------------------------------
 992+ D20A                                      include "Universe/DotProductXX12XX15.asm"
# file opened: ./Universe/DotProductXX12XX15.asm
   1++D20A              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D20A              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D20A              ;;; S = XX12 XSign Xor XX15 XSign
   4++D20A              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D20A              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D20A              ;;; R = T
   7++D20A              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D20A              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D20A              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D20A              ;;; Q = A * Q /256 usigned (zdot)
  11++D20A              ;;; R = T
  12++D20A              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D20A
  14++D20A
  15++D20A
  16++D20A
  17++D20A
  18++D20A              MacroAequDxEdiv256usgn:	MACRO
  19++D20A ~            						mul
  20++D20A ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D20A              						ENDM
  22++D20A              DotProductXX12XX15:
  23++D20A 3A 7B C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D20D                      IfAIsZeroGoto dotxskipzero
  24++D20D FE 00       >				cp	0
  24++D20F CA 2D D2    >				jp	z,dotxskipzero
  25++D212 5F                   ld          e,a
  26++D213 3A 75 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D216 57                   ld          d,a                     ; de = xx12 x signed
  28++D217                      IfAIsZeroGoto dotxskipzero
  28++D217 FE 00       >				cp	0
  28++D219 CA 2D D2    >				jp	z,dotxskipzero
  29++D21C ED 30        		mul
  30++D21E 42                   ld          b,d                     ; b = result
  31++D21F 3A 7C C0             ld          a,(UBnkXX12xSign)
  32++D222 21 76 C0             ld          hl,UBnkXScaledSign
  33++D225 AE                   xor         (hl)
  34++D226 E6 80                and         $80                     ; so sign bit only
  35++D228 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D22A C3 31 D2             jp          dotmuly
  37++D22D              dotxskipzero:
  38++D22D AF                   xor         a
  39++D22E 47                   ld          b,a
  40++D22F FD 67                ld          iyh,a
  41++D231              dotmuly:
  42++D231              ; now we have b = XX12 x &d  norm x signed
  43++D231 3A 7D C0             ld          a,(UBnkXX12yLo)
  44++D234                      IfAIsZeroGoto dotyskipzero
  44++D234 FE 00       >				cp	0
  44++D236 CA 56 D2    >				jp	z,dotyskipzero
  45++D239 5F                   ld          e,a
  46++D23A 3A 77 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D23D                      IfAIsZeroGoto dotyskipzero
  47++D23D FE 00       >				cp	0
  47++D23F CA 56 D2    >				jp	z,dotyskipzero
  48++D242 57                   ld          d,a                     ; de = xx12 x signed
  49++D243 ED 30                mul
  50++D245 4A                   ld          c,d                     ; c = result
  51++D246 DD 69                ld          ixl,c
  52++D248 3A 7E C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D24B 21 78 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D24E AE                   xor         (hl)                    ; XX15+3
  55++D24F E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D251 DD 67                ld          ixh,a
  57++D253 C3 5A D2             jp          dotaddxy
  58++D256              dotyskipzero:
  59++D256 AF                   xor         a
  60++D257 4F                   ld          c,a
  61++D258 DD 67                ld          ixh,a
  62++D25A              dotaddxy:
  63++D25A              ; Optimise later as this is 16 bit
  64++D25A 26 00                ld          h,0                     ;
  65++D25C 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D25D 16 00                ld          d,0                     ;
  67++D25F 59                   ld          e,c                     ; de = ylo + yscaled
  68++D260 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D262 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D263 CD 3B CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D266 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D267 3A 7F C0             ld          a,(UBnkXX12zLo)         ;
  73++D26A                      IfAIsZeroGoto dotzskipzero
  73++D26A FE 00       >				cp	0
  73++D26C CA 92 D2    >				jp	z,dotzskipzero
  74++D26F 5F                   ld          e,a                     ;
  75++D270 3A 79 C0             ld          a,(UBnkZScaled)         ;
  76++D273                      IfAIsZeroGoto dotzskipzero
  76++D273 FE 00       >				cp	0
  76++D275 CA 92 D2    >				jp	z,dotzskipzero
  77++D278 57                   ld          d,a
  78++D279 ED 30                mul
  79++D27B E5                   push        hl                      ; save prev result
  80++D27C 3A 7A C0             ld          a,(UBnkZScaledSign)
  81++D27F 21 80 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D282 AE                   xor         (hl)                    ; hi sign
  83++D283 E6 80                and         $80                     ; a = sign of multiply
  84++D285 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D286 E1                   pop         hl
  86++D287 5A                   ld          e,d
  87++D288 16 00                ld          d,0
  88++D28A CD 3B CB             call ADDHLDESignBC
  89++D28D 32 71 92             ld          (varS),a
  90++D290 7D                   ld          a,l
  91++D291 C9                   ret                                 ; returns with A = value, varS = sign
  92++D292              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D292 78                   ld          a,b
  94++D293 32 71 92             ld          (varS),a
  95++D296 7D                   ld          a,l
  96++D297 C9                   ret
  97++D298              ;;;;       DotProductXX12XX15:
  98++D298              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D298              ;;;;       ld          e,a
 100++D298              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D298              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D298              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D298              ;;;;		mul
 104++D298              ;;;;       ld          b,d                     ; b as var T
 105++D298              ;;;;       ld          a,(UBnkXX12xSign)
 106++D298              ;;;;       ld          hl,UBnkXScaledSign
 107++D298              ;;;;       xor         (hl)
 108++D298              ;;;;       and         $80                     ; so sign bit only
 109++D298              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D298              ;;;; now we have b = XX12 x & norm x signed
 111++D298              ;;;; by here B = xlo & xscaled C = result sign
 112++D298              ;;;;       ld          a,(UBnkXX12yLo)
 113++D298              ;;;;       ld          e,a
 114++D298              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D298              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D298              ;;;;       mul
 117++D298              ;;;;       ld          a,d
 118++D298              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D298              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D298              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D298              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D298              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D298              ;;;;       xor         (hl)                    ; XX15+3
 124++D298              ;;;;       and         $80
 125++D298              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D298              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D298              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D298              ;;;;       ld          e,a                     ; use e as var Q
 129++D298              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D298              ;;;;       ld          d,a
 131++D298              ;;;;       mul
 132++D298              ;;;;       ld          a,d
 133++D298              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D298              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D298              ;;;;       ld          a,(UBnkZScaledSign)
 136++D298              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D298              ;;;;       xor         (hl)                    ; hi sign
 138++D298              ;;;;       and         $80
 139++D298              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D298              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D298
# file closed: ./Universe/DotProductXX12XX15.asm
 993+ D298              ;--------------------------------------------------------------------------------------------------------
 994+ D298              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 995+ D298                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D298              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D298              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D298              ScaleNormal:
   4++D298              LL93:
   5++D298 3A 76 92             ld      a,(XX17)                    ; scale--
   6++D29B DD 6F        		ld		ixl,a
   7++D29D 3A 79 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D2A0 DD 2D        		dec		ixl
   9++D2A2 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D2A3              ScaleLoop:
  11++D2A3              LL933:
  12++D2A3 21 75 C0             ld      hl,XX15
  13++D2A6 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D2A8 23                   inc     hl							; looking at XX15 x sign now
  15++D2A9 23                   inc     hl							; looking at XX15 y Lo now
  16++D2AA CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D2AC 23           		inc		hl							; looking at XX15 y sign now
  18++D2AD 23           		inc		hl							; looking at XX15 z Lo now
  19++D2AE CB 3E        		srl		(hl)
  20++D2B0 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D2B1 DD 2D                dec     ixl                         ; reduce scale
  22++D2B3 F2 A3 D2             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D2B6 C9                   ret
  24++D2B7
# file closed: ./Universe/ScaleNormal.asm
 996+ D2B7              ;--------------------------------------------------------------------------------------------------------
 997+ D2B7                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D2B7              ScaleObjectDistance:
   2++D2B7              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D2B7 3A 10 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D2BA 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D2BB              LL90:                                       ; scaling object distance
   6++D2BB 3A 70 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D2BE 47                   ld      b,a                         ; z_hi (yReg)
   8++D2BF                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D2BF FE 00       >                 cp     0
   8++D2C1 C8          >                 ret    z
   9++D2C2              LL90Loop:
  10++D2C2              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D2C2 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D2C3                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D2C3 2A 6C C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D2C6 CB 3C       >                    srl   h
  12++D2C8 CB 1D       >                    rr    l
  12++D2CA 22 6C C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D2CD                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D2CD 2A 69 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D2D0 CB 3C       >                    srl   h
  13++D2D2 CB 1D       >                    rr    l
  13++D2D4 22 69 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D2D7                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D2D7 2A 6F C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D2DA CB 3C       >                    srl   h
  14++D2DC CB 1D       >                    rr    l
  14++D2DE 22 6F C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D2E1 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D2E2                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D2E2 FE 00       >				cp	0
  16++D2E4 C2 C2 D2    >				jp	nz,LL90Loop
  17++D2E7 C9                   ret
  18++D2E8
# file closed: ./Universe/ScaleObjectDistance.asm
 998+ D2E8              ;--------------------------------------------------------------------------------------------------------
 999+ D2E8              ; Copy ship pos to camera work vector
1000+ D2E8 21 0B C0     ShipPosToXX18:          ld  hl,UBnKxlo
1001+ D2EB 11 69 C0                             ld  de,UBnkDrawCam0xLo
1002+ D2EE 01 09 00                             ld  bc,9
1003+ D2F1 ED B0                                ldir
1004+ D2F3 C9                                   ret
1005+ D2F4              ; Backface cull
1006+ D2F4              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
1007+ D2F4              ; normal vector = cross product of ship ccordinates
1008+ D2F4              ;
1009+ D2F4 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
1010+ D2F5 47                                   ld      b,a                                                    ;;;
1011+ D2F6 E6 80                                and     $80
1012+ D2F8 32 76 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
1013+ D2FB 78                                   ld      a,b
1014+ D2FC CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1015+ D2FE 47                                   ld      b,a
1016+ D2FF E6 80                                and     $80
1017+ D301 32 78 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
1018+ D304 78                                   ld      a,b
1019+ D305 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1020+ D307 E6 80                                and     $80
1021+ D309 32 7A C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
1022+ D30C 23                                   inc     hl                          ; move to X ccord
1023+ D30D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
1024+ D30E 32 75 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
1025+ D311 23                                   inc     hl                                                                                                                 ;;;
1026+ D312 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1027+ D313 32 77 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
1028+ D316 23                                   inc     hl                                                                                                                 ;;;
1029+ D317 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1030+ D318 32 79 C0                             ld      (UBnkZScaled),a
1031+ D31B C9                                   ret
1032+ D31C
1033+ D31C 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
1034+ D31D 47                                   ld      b,a                         ; save sign bits to b
1035+ D31E E6 80                                and     $80
1036+ D320 32 7C C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
1037+ D323 78                                   ld      a,b
1038+ D324 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1039+ D326 47                                   ld      b,a
1040+ D327 E6 80                                and     $80
1041+ D329 32 7E C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
1042+ D32C 78                                   ld      a,b
1043+ D32D CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1044+ D32F E6 80                                and     $80
1045+ D331 32 80 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
1046+ D334 23                                   inc     hl                          ; move to X ccord
1047+ D335 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
1048+ D336 32 7B C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
1049+ D339 23                                   inc     hl                                                                                                                 ;;;
1050+ D33A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1051+ D33B 32 7D C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
1052+ D33E 23                                   inc     hl                                                                                                                 ;;;
1053+ D33F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1054+ D340 32 7F C0                             ld      (UBnkXX12zLo),a
1055+ D343 C9                                   ret
1056+ D344
1057+ D344              ;--------------------------------------------------------------
1058+ D344              ; Original loginc in EE29 (LL9 4 of 12)
1059+ D344              ; Enters with XX4 = z distnace scaled to 1 .. 31
1060+ D344              ; get number of faces * 4      FaceCntX4
1061+ D344              ; return if no faces
1062+ D344              ; get Face Normal scale factor FaceScale (XX17)
1063+ D344              ; get ship pos z hi     (XX18)
1064+ D344              ; While Z hi <> 0
1065+ D344              ;    FaceScale = FaceScale + 1           (XX17)
1066+ D344              ;    Ship pos y = ship pos y / 2         (XX18)
1067+ D344              ;    ship pos x = ship pos x / 2         (XX18)
1068+ D344              ;    ship pos z = ship pos z / 2         (XX18)
1069+ D344              ; Loop
1070+ D344              ; Copy Ship Pos (XX18) to Scaled         (XX15)
1071+ D344              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
1072+ D344              ; Copy XX12 into XX18
1073+ D344              ; For each face
1074+ D344              ;     Get Face sign and visibility distance byte
1075+ D344              ;     if normal visibility range  < XX4
1076+ D344              ;        Get Face data into XX12
1077+ D344              ;        if FaceScale (XX17) >= 4
1078+ D344              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
1079+ D344              ;        else
1080+ D344              ;           Copy FaceScale scaled to X  (XX17)
1081+ D344              ;LabelOverflowLoop:
1082+ D344              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
1083+ D344              ;           While X >= 0
1084+ D344              ;              X--                                                                                                  ::LL93
1085+ D344              ;              if  x >= 0
1086+ D344              ;                  XX15x = XX15x / 2
1087+ D344              ;                  XX15y = XX15y / 2
1088+ D344              ;                  XX15y = XX15y / 2
1089+ D344              ;           loop
1090+ D344              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
1091+ D344              ;           if A > 256 (i.e. was overflow)
1092+ D344              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1093+ D344              ;               X = 1
1094+ D344              ;               Goto LabelOverflowLoop
1095+ D344              ;           else
1096+ D344              ;              Scaled (XX15) Z = AddZ
1097+ D344              ;           endif
1098+ D344              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
1099+ D344              ;           if A > 256 (i.e. was overflow)
1100+ D344              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1101+ D344              ;               X = 1
1102+ D344              ;               Goto LabelOverflowLoop
1103+ D344              ;           else
1104+ D344              ;              Scaled (XX15) X = AddX
1105+ D344              ;           endif
1106+ D344              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
1107+ D344              ;           if A > 256 (i.e. was overflow)
1108+ D344              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1109+ D344              ;               X = 1
1110+ D344              ;               Goto LabelOverflowLoop
1111+ D344              ;           else
1112+ D344              ;              Scaled (XX15) Y = AddY
1113+ D344              ;           endif
1114+ D344              ;        endif
1115+ D344              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
1116+ D344              ;        if dot product < 0
1117+ D344              ;           set face visible
1118+ D344              ;        else
1119+ D344              ;           set face invisible
1120+ D344              ;        end if
1121+ D344              ;     else
1122+ D344              ;       Set FaceVisibility to true
1123+ D344              ;     end if
1124+ D344              ; Next Face
1125+ D344
1126+ D344 DD 25        ScaleDownXX15byIXH:     dec     ixh
1127+ D346 F8                                   ret     m
1128+ D347 21 75 C0                             ld      hl,UBnkXScaled
1129+ D34A CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
1130+ D34C 23                                   inc     hl                          ; looking at XX15 x sign now
1131+ D34D 23                                   inc     hl                          ; looking at XX15 y Lo now
1132+ D34E CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
1133+ D350 23                                   inc     hl                          ; looking at XX15 y sign now
1134+ D351 23                                   inc     hl                          ; looking at XX15 z Lo now
1135+ D352 CB 3E                                srl     (hl)
1136+ D354 C3 44 D3                             jp      ScaleDownXX15byIXH
1137+ D357 C9                                   ret
1138+ D358
1139+ D358 21 69 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
1140+ D35B CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
1141+ D35D 23                                   inc     hl                          ; looking at XX18 x sign now
1142+ D35E 23                                   inc     hl                          ; looking at XX18 y Lo now
1143+ D35F CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
1144+ D361 23                                   inc     hl                          ; looking at XX18 y sign now
1145+ D362 23                                   inc     hl                          ; looking at XX18 z Lo now
1146+ D363 CB 3E                                srl     (hl)
1147+ D365 C9                                   ret
1148+ D366
1149+ D366              ;line of sight vector = [x y z] + face normal vector
1150+ D366
1151+ D366              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1152+ D366              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1153+ D366              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1154+ D366              ;
1155+ D366              ;--------------------------------------------------------------
1156+ D366              ; line of sight (eye outwards dot face normal vector < 0
1157+ D366              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1158+ D366              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1159+ D366              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1160+ D366
1161+ D366              RotateXX15ByTransMatXX16:
1162+ D366 21 30 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1163+ D369 CD 22 87                             call    XX12ProcessOneRow
1164+ D36C 47                                   ld      b,a                                 ; get
1165+ D36D 7D                                   ld      a,l
1166+ D36E B0                                   or      b
1167+ D36F 32 7C C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1168+ D372 7D                                   ld      a,l
1169+ D373 32 7B C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1170+ D376
1171+ D376 21 36 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1172+ D379 CD 22 87                             call    XX12ProcessOneRow
1173+ D37C 47                                   ld      b,a                                 ; get
1174+ D37D 7D                                   ld      a,l
1175+ D37E B0                                   or      b
1176+ D37F 32 7E C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1177+ D382 7D                                   ld      a,l
1178+ D383 32 7D C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1179+ D386
1180+ D386 21 3C C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1181+ D389 CD 22 87                             call    XX12ProcessOneRow
1182+ D38C 47                                   ld      b,a                                 ; get
1183+ D38D 7D                                   ld      a,l
1184+ D38E B0                                   or      b
1185+ D38F 32 80 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1186+ D392 7D                                   ld      a,l
1187+ D393 32 7F C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1188+ D396 C9                                   ret
1189+ D397
1190+ D397
1191+ D397 00           CurrentNormIdx  DB 0
1192+ D398              BackFaceCull:
1193+ D398              SomeFacesVisible:
1194+ D398              ;debug:jp debug
1195+ D398              EE29:
1196+ D398              ; DEBUG  force for now
1197+ D398              ;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
1198+ D398              ;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
1199+ D398              ;
1200+ D398              ; DEBUG
1201+ D398 CD E8 D2             call    ShipPosToXX18;
1202+ D39B                      ReturnIfMemisZero FaceCtX4Addr                                  ; get number of faces * 4      FaceCntX4 &  return if no faces
1202+ D39B 3A 0A C3    >                   ld   a,(FaceCtX4Addr)
1202+ D39E FE 00       >                   cp     0
1202+ D3A0 C8          >                   ret    z
1203+ D3A1 32 F1 C2             ld      (varXX20),a
1204+ D3A4                      ;DEBUGcall    ScaleObjectDistance                                     ; get Face Normal scale factor FaceScale into XX17
1205+ D3A4 79                   ld      a,c                                                     ; return and setup XX17 with the adjusted Q
1206+ D3A5 32 76 92             ld      (varXX17),a
1207+ D3A8                    ;  call    CopyXX18ScaledToXX15                                    ; Copy Ship Pos (XX18) to Scaled         (XX15)
1208+ D3A8 CD 73 CF             call    CopyRotmatToTransMat                                    ; Get rotation matrix into tranlation matrix
1209+ D3AB CD 36 85             call    ScaleXX16Matrix197  ; JSUT A TODO DEBUG TEST            ; scaling just tidies it up as per point calcs
1210+ D3AE
1211+ D3AE
1212+ D3AE 21 F0 C8             ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
1213+ D3B1 22 1A 92             ld      (varV),hl
1214+ D3B4 3A 0A C3             ld      a,(FaceCtX4Addr)                                        ; For each face
1215+ D3B7 CB 3F                srl     a                                                       ;
1216+ D3B9 CB 3F                srl     a                                                       ;
1217+ D3BB 47                   ld      b,a                                                     ;
1218+ D3BC AF                   xor     a
1219+ D3BD 32 97 D3             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
1220+ D3C0              ProcessNormalsLoop:                                                     ;
1221+ D3C0 E5                   push    hl
1222+ D3C1 C5                   push    bc
1223+ D3C2 7E                   ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
1224+ D3C3 E6 1F                and     $1F                                                     ;     if normal visibility range  < XX4
1225+ D3C5                      ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
1226+ D3C5
1227+ D3C5 CD F4 D2             call    CopyFaceToXX15                                          ;        Get Face data into XX12
1228+ D3C8 3A 76 C0             ld      a,(UBnkXScaledSign)
1229+ D3CB CD AB 87             call    XX12EquNodeDotOrientation
1230+ D3CE 3A 80 C0             ld      a,(UBnkXX12zSign)
1231+ D3D1 ED 27 80             test    $80
1232+ D3D4 C2 E0 D3             jp      nz, FaceVisible                                         ;        if dot product < 0 set face visible
1233+ D3D7              ;        jp      FaceNotVisible
1234+ D3D7                                               ;        if dot product < 0 set face visible
1235+ D3D7              FaceNotVisible:                                                         ;        else
1236+ D3D7 3A 97 D3             ld          a,(CurrentNormIdx)
1237+ D3DA CD B3 CF             call        SetFaceAHidden                                      ;           set face invisible
1238+ D3DD C3 E6 D3             jp          ProcessNormalLoopEnd                                ;        end if
1239+ D3E0              FaceVisible:
1240+ D3E0 3A 97 D3             ld          a,(CurrentNormIdx)
1241+ D3E3 CD AA CF             call        SetFaceAVisible
1242+ D3E6              ProcessNormalLoopEnd:
1243+ D3E6 21 97 D3             ld          hl, CurrentNormIdx
1244+ D3E9 34                   inc         (hl)                    ; move index pointer up by one
1245+ D3EA C1                   pop         bc
1246+ D3EB E1                   pop         hl                      ; get normal data pointer back
1247+ D3EC 3E 04                ld          a,4
1248+ D3EE ED 31                add         hl,a                    ; move to next normal entry
1249+ D3F0 22 1A 92             ld          (varV),hl               ; save as we need it again
1250+ D3F3 05                   dec         b
1251+ D3F4 C2 C0 D3             jp          nz,ProcessNormalsLoop
1252+ D3F7 C9                   ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
1253+ D3F8              ;--------------------------------------------------------------------------------------------------------
1254+ D3F8              ; Process edges
1255+ D3F8              ; .....................................................
1256+ D3F8              TransposeNodeVal:   MACRO arg0?
1257+ D3F8 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1258+ D3F8 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1259+ D3F8 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1260+ D3F8 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1261+ D3F8 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1262+ D3F8 ~            NodeXPositive\1
1262+ D3F8 ~
1263+ D3F8 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1264+ D3F8 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1265+ D3F8 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1266+ D3F8 ~                    ld          h,0                                 ; but we don;t want the sign
1267+ D3F8 ~                    add         hl,bc                               ; its a 16 bit add
1268+ D3F8 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1269+ D3F8 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1270+ D3F8 ~                    ld          (UbnkXPointSign),a
1271+ D3F8 ~                    jp          FinishedThisNode\1
1272+ D3F8 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1273+ D3F8 ~            NodeNegative\1
1273+ D3F8 ~
1274+ D3F8 ~            LL52\1
1274+ D3F8 ~                                                              ;
1275+ D3F8 ~                    ld          hl,(UBnK\0lo)                       ; Coord
1276+ D3F8 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1277+ D3F8 ~                    ld          b,0                                 ; XX12 lo byte only
1278+ D3F8 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1279+ D3F8 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1280+ D3F8 ~            NodeXNegSignChange\1
1280+ D3F8 ~
1281+ D3F8 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1282+ D3F8 ~                    call        negate16hl                          ; Convert back to positive and flip sign
1283+ D3F8 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1284+ D3F8 ~                    xor         $80                                 ; Flip bit 7
1285+ D3F8 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1286+ D3F8 ~            SetAndMop\1
1286+ D3F8 ~
1287+ D3F8 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1288+ D3F8 ~            FinishedThisNode\1
1289+ D3F8                                  ENDM
1290+ D3F8
1291+ D3F8              ;------------------------------------------------------------------------------------------------------------------------------
1292+ D3F8              CopyByteAtNextHL:   MACRO targetaddr
1293+ D3F8 ~                                inc         hl                                  ; vertex byte#1
1294+ D3F8 ~                                ld          a,(hl)                              ;
1295+ D3F8 ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
1296+ D3F8                                  ENDM
1297+ D3F8              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1298+ D3F8
1299+ D3F8              TransposeXX12NodeToXX15:
1300+ D3F8                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1300+ D3F8 3A 0D C0    >               ld       a,(UBnKxsgn)
1300+ D3FB 32 77 C0    >               ld       (UbnkXPointSign),a
1301+ D3FE ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1302+ D402 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1303+ D403 FA 19 D4             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1304+ D406              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1305+ D406              NodeXPositiveX:
1306+ D406 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1307+ D407 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1308+ D409 2A 0B C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1309+ D40C 26 00                ld          h,0                                 ; but we don;t want the sign
1310+ D40E 09                   add         hl,bc                               ; its a 16 bit add
1311+ D40F 22 75 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1312+ D412 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1313+ D413 32 77 C0             ld          (UbnkXPointSign),a
1314+ D416 C3 35 D4             jp          FinishedThisNodeX
1315+ D419              ; If we get here then _sign and vertv_ have different signs so do subtract
1316+ D419              NodeNegativeX:
1317+ D419              LL52X:                                                 ;
1318+ D419 2A 0B C0             ld          hl,(UBnKxlo)                       ; Coord
1319+ D41C ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1320+ D420 06 00                ld          b,0                                 ; XX12 lo byte only
1321+ D422 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1322+ D424 F2 32 D4             jp          p,SetAndMopX                       ; if result is positive skip to write back
1323+ D427              NodeXNegSignChangeX:
1324+ D427              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1325+ D427 CD EF A2             call        negate16hl                          ; Convert back to positive and flip sign
1326+ D42A 3A 77 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1327+ D42D EE 80                xor         $80                                 ; Flip bit 7
1328+ D42F 32 77 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1329+ D432              SetAndMopX:
1330+ D432 22 0B C0             ld          (UBnKxlo),hl                       ; XX15+0
1331+ D435              FinishedThisNodeX:
1332+ D435
1333+ D435              LL53:
1334+ D435
1335+ D435                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1335+ D435 3A 10 C0    >               ld       a,(UBnKysgn)
1335+ D438 32 7A C0    >               ld       (UbnkYPointSign),a
1336+ D43B ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1337+ D43F A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1338+ D440 FA 56 D4             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1339+ D443              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1340+ D443              NodeXPositiveY:
1341+ D443 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1342+ D444 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1343+ D446 2A 0E C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1344+ D449 26 00                ld          h,0                                 ; but we don;t want the sign
1345+ D44B 09                   add         hl,bc                               ; its a 16 bit add
1346+ D44C 22 78 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1347+ D44F AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1348+ D450 32 77 C0             ld          (UbnkXPointSign),a
1349+ D453 C3 72 D4             jp          FinishedThisNodeY
1350+ D456              ; If we get here then _sign and vertv_ have different signs so do subtract
1351+ D456              NodeNegativeY:
1352+ D456              LL52Y:                                                 ;
1353+ D456 2A 0E C0             ld          hl,(UBnKylo)                       ; Coord
1354+ D459 ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1355+ D45D 06 00                ld          b,0                                 ; XX12 lo byte only
1356+ D45F ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1357+ D461 F2 6F D4             jp          p,SetAndMopY                       ; if result is positive skip to write back
1358+ D464              NodeXNegSignChangeY:
1359+ D464              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1360+ D464 CD EF A2             call        negate16hl                          ; Convert back to positive and flip sign
1361+ D467 3A 7A C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1362+ D46A EE 80                xor         $80                                 ; Flip bit 7
1363+ D46C 32 7A C0             ld          (UbnkYPointSign),a                 ; XX15+2
1364+ D46F              SetAndMopY:
1365+ D46F 22 0E C0             ld          (UBnKylo),hl                       ; XX15+0
1366+ D472              FinishedThisNodeY:
1367+ D472
1368+ D472
1369+ D472              TransposeZ:
1370+ D472              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1371+ D472 3A 80 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1372+ D475                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1372+ D475 CB 7F       >                        bit 	7,a
1372+ D477 C2 8B D4    >                        jp      nz,NegativeNodeZ
1373+ D47A 3A 7F C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1374+ D47D 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1375+ D480 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1376+ D482 7D                   ld          a,l
1377+ D483 32 90 92             ld          (varT),a                            ;                                                                           ;;;
1378+ D486 7C                   ld          a,h
1379+ D487 32 6E 92             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1380+ D48A C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1381+ D48B              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1382+ D48B              NegativeNodeZ:
1383+ D48B              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1384+ D48B 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1385+ D48E ED 4B 7F C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1386+ D492 06 00                ld          b,0                                 ; upper byte will be garbage
1387+ D494                      ClearCarryFlag
1387+ D494 B7          >				or a
1388+ D495 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1389+ D497 7D                   ld          a,l
1390+ D498 32 90 92             ld          (varT),a                            ; t = result low
1391+ D49B 7C                   ld          a,h
1392+ D49C 32 6E 92             ld          (varU),a                            ; u = result high
1393+ D49F E2 AC D4             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1394+ D4A2              LL56Overflow:
1395+ D4A2 FE 00                cp          0                                   ; is varU 0?
1396+ D4A4 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1397+ D4A6 3A 90 92             ld          a,(varT)                            ; T \ restore z lo
1398+ D4A9                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1398+ D4A9 FE 04       >                   cp    4
1398+ D4AB D0          >                   ret	 nc
1399+ D4AC              MakeNodeClose:
1400+ D4AC              LL140:                                                  ; else make node close
1401+ D4AC AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1402+ D4AD 32 6E 92             ld          (varU),a                            ; U
1403+ D4B0 3E 04                ld          a,4                                 ; lo
1404+ D4B2 32 90 92             ld          (varT),a                            ; T
1405+ D4B5 C9                   ret
1406+ D4B6              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1407+ D4B6              ProcessVisibleNode:
1408+ D4B6              RotateNode:                                                                                                                         ;;;
1409+ D4B6 CD CE D0             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1410+ D4B9              LL52LL53LL54LL55
1411+ D4B9              TransposeNode:
1412+ D4B9 CD F8 D3             call        TransposeXX12NodeToXX15
1413+ D4BC
1414+ D4BC              ; ......................................................                                                         ;;;
1415+ D4BC              NodeAdditionsDone:
1416+ D4BC              Scale16BitTo8Bit:
1417+ D4BC              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1418+ D4BC 3A 6E 92             ld          a,(varU)                            ; U \ z hi
1419+ D4BF 21 76 C0             ld          hl,UbnkXPointHi
1420+ D4C2 B6                   or          (hl)                                ; XX15+1    \ x hi
1421+ D4C3 21 79 C0             ld          hl,UbnkYPointHi
1422+ D4C6 B6                   or          (hl)                                ; XX15+4    \ y hi
1423+ D4C7              AreXYZHiAllZero:
1424+ D4C7 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1425+ D4C9              DivideXYZBy2:
1426+ D4C9                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1426+ D4C9 2A 75 C0    >                    ld    hl,(UbnkXPoint)
1426+ D4CC CB 3C       >                    srl   h
1426+ D4CE CB 1D       >                    rr    l
1426+ D4D0 22 75 C0    >                    ld    (UbnkXPoint),hl
1427+ D4D3                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1427+ D4D3 2A 78 C0    >                    ld    hl,(UbnkYPoint)
1427+ D4D6 CB 3C       >                    srl   h
1427+ D4D8 CB 1D       >                    rr    l
1427+ D4DA 22 78 C0    >                    ld    (UbnkYPoint),hl
1428+ D4DD 3A 6E 92             ld          a,(varU)                            ; U \ z hi
1429+ D4E0 67                   ld          h,a
1430+ D4E1 3A 90 92             ld          a,(varT)                            ; T \ z lo
1431+ D4E4 6F                   ld          l,a
1432+ D4E5                      ShiftHLRight1
1432+ D4E5 CB 3C       >			   srl h
1432+ D4E7 CB 1D       >			   rr  l
1433+ D4E9 7C                   ld          a,h
1434+ D4EA 32 6E 92             ld          (varU),a
1435+ D4ED 7D                   ld          a,l
1436+ D4EE 32 90 92             ld          (varT),a                            ; T \ z lo
1437+ D4F1 C3 BC D4             jp          Scale16BitTo8Bit                    ; loop U
1438+ D4F4              NodeScalingDone:
1439+ D4F4              LL60:                                                   ; hi U rolled to 0, exited loop above.
1440+ D4F4              ProjectNodeToScreen:
1441+ D4F4                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1441+ D4F4 3A 90 92    >               ld       a,(varT)
1441+ D4F7 32 6F 92    >               ld       (varQ),a
1442+ D4FA 3A 75 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1443+ D4FD 21 6F 92             ld          hl,varQ
1444+ D500 BE                   cp          (hl)                                ; Q
1445+ D501                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1445+ D501 DA 0A D5    >                        jp		c,DoSmallAngle
1446+ D504 CD 09 A7             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1447+ D507 C3 12 D5             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1448+ D50A              DoSmallAngle:                                           ; small x angle
1449+ D50A              LL69:
1450+ D50A              ; TODO check if we need to retain BC as this trashes it
1451+ D50A              ;Input: BC = Dividend, DE = Divisor, HL = 0
1452+ D50A              ;Output: BC = Quotient, HL = Remainder
1453+ D50A 47                   ld      b,a
1454+ D50B CD 48 A1             call    DIV16UNDOC
1455+ D50E 79                   ld      a,c
1456+ D50F 32 70 92             ld      (varR),a
1457+ D512               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1458+ D512              SkipSmallAngle:
1459+ D512              ScaleX:
1460+ D512              LL65:                                                   ; both continue for scaling based on z
1461+ D512 3A 77 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1462+ D515                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1462+ D515 CB 7F       >                        bit 	7,a
1462+ D517 C2 2A D5    >                        jp      nz,NegativeXPoint
1463+ D51A              ; ......................................................
1464+ D51A              PositiveXPoint:
1465+ D51A 3A 70 92             ld          a,(varR)
1466+ D51D 6F                   ld          l,a
1467+ D51E 3A 6E 92             ld          a,(varU)
1468+ D521 67                   ld          h,a
1469+ D522 3E 80                ld          a,ScreenCenterX
1470+ D524 ED 31                add         hl,a
1471+ D526 EB                   ex          de,hl
1472+ D527 C3 3A D5             jp          StoreXPoint
1473+ D52A              NegativeXPoint:
1474+ D52A              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1475+ D52A 3A 70 92             ld          a,(varR)
1476+ D52D 6F                   ld          l,a
1477+ D52E 3A 6E 92             ld          a,(varU)
1478+ D531 67                   ld          h,a
1479+ D532 0E 80                ld          c,ScreenCenterX
1480+ D534 06 00                ld          b,0
1481+ D536                      ClearCarryFlag
1481+ D536 B7          >				or a
1482+ D537 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1483+ D539 EB                   ex          de,hl
1484+ D53A              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1485+ D53A FD 73 00             ld          (iy+0),e                            ; Update X Point
1486+ D53D FD 72 01             ld          (iy+1),d                            ; Update X Point
1487+ D540 FD 23                inc         iy
1488+ D542 FD 23                inc         iy
1489+ D544              ; ......................................................
1490+ D544              LL66:
1491+ D544              ProcessYPoint:
1492+ D544 AF                   xor         a                                   ; y hi = 0
1493+ D545 32 6E 92             ld          (varU),a                            ; U
1494+ D548                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1494+ D548 3A 90 92    >               ld       a,(varT)
1494+ D54B 32 6F 92    >               ld       (varQ),a
1495+ D54E 3A 78 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1496+ D551 21 6F 92             ld          hl,varQ
1497+ D554 BE                   cp          (hl)                                ; Q
1498+ D555                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1498+ D555 DA 5E D5    >                        jp		c,SmallYHop
1499+ D558              SmallYPoint:
1500+ D558 CD 09 A7             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1501+ D55B C3 61 D5             jp          SkipYScale                          ; LL68 hop over small y yangle
1502+ D55E              SmallYHop:
1503+ D55E              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1504+ D55E CD E6 A6             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1505+ D561              SkipYScale:
1506+ D561              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1507+ D561 3A 7A C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1508+ D564 CB 7F                bit         7,a
1509+ D566 C2 79 D5             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1510+ D569              PositiveYPoint:
1511+ D569 3A 70 92             ld          a,(varR)
1512+ D56C 6F                   ld          l,a
1513+ D56D 3A 6E 92             ld          a,(varU)
1514+ D570 67                   ld          h,a
1515+ D571 3E 60                ld          a,ScreenHeightHalf
1516+ D573 ED 31                add         hl,a
1517+ D575 EB                   ex          de,hl
1518+ D576 C3 89 D5             jp          LL50
1519+ D579              NegativeYPoint:
1520+ D579              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1521+ D579 3A 70 92             ld          a,(varR)
1522+ D57C 6F                   ld          l,a
1523+ D57D 3A 6E 92             ld          a,(varU)
1524+ D580 67                   ld          h,a
1525+ D581 0E 60                ld          c,ScreenHeightHalf
1526+ D583 06 00                ld          b,0
1527+ D585                      ClearCarryFlag
1527+ D585 B7          >				or a
1528+ D586 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1529+ D588 EB                   ex          de,hl
1530+ D589              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1531+ D589 FD 73 00             ld          (iy+0),e                            ; Update X Point
1532+ D58C FD 72 01             ld          (iy+1),d                            ; Update X Point
1533+ D58F FD 23                inc         iy
1534+ D591 FD 23                inc         iy
1535+ D593 C9                   ret
1536+ D594              ;--------------------------------------------------------------------------------------------------------
1537+ D594              ;;;     Byte 0 = X magnitide with origin at middle of ship
1538+ D594              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1539+ D594              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1540+ D594              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1541+ D594              CopyNodeToXX15:
1542+ D594                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1542+ D594 7E          >               ld       a,(hl)
1542+ D595 32 75 C0    >               ld       (UBnkXScaled),a
1543+ D598 23                   inc         hl
1544+ D599                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1544+ D599 7E          >               ld       a,(hl)
1544+ D59A 32 77 C0    >               ld       (UBnkYScaled),a
1545+ D59D 23                   inc         hl
1546+ D59E                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1546+ D59E 7E          >               ld       a,(hl)
1546+ D59F 32 79 C0    >               ld       (UBnkZScaled),a
1547+ D5A2 23                   inc         hl
1548+ D5A3              PopulateXX15SignBits:
1549+ D5A3              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1550+ D5A3 7E                   ld          a,(hl)
1551+ D5A4 4F                   ld          c,a                                 ; copy sign and visibility to c
1552+ D5A5 47                   ld          b,a
1553+ D5A6 E6 80                and         $80                                 ; keep high 3 bits
1554+ D5A8 32 76 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1555+ D5AB 78                   ld          a,b
1556+ D5AC E6 40                and         $40
1557+ D5AE CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1558+ D5B0 32 78 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1559+ D5B3 78                   ld          a,b
1560+ D5B4 E6 20                and         $20
1561+ D5B6 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1562+ D5B8 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1563+ D5BA 32 7A C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1564+ D5BD 79                   ld          a,c                                 ; returns a with visibility sign byte
1565+ D5BE E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1566+ D5C0 32 90 92             ld          (varT),a                            ; and store in varT as its needed later
1567+ D5C3 C9                   ret
1568+ D5C4
1569+ D5C4              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1570+ D5C4              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1571+ D5C4              ;..............................................................................................................................
1572+ D5C4              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1573+ D5C4              LL48GetScale:
1574+ D5C4 3A A6 91             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1575+ D5C7 5F                   ld          e,a
1576+ D5C8 CD 94 D5             call        CopyNodeToXX15
1577+ D5CB              LL48GetVertices:
1578+ D5CB              LL48GetVertSignAndVisDist:
1579+ D5CB                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1579+ D5CB BB          >                        cp      e
1579+ D5CC DA 0D D6    >                        jp		c,NodeIsNotVisible
1580+ D5CF              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1581+ D5CF                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1581+ D5CF 23          >                    inc         hl                                  ; vertex byte#1
1581+ D5D0 7E          >                    ld          a,(hl)                              ;
1581+ D5D1 32 15 92    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1582+ D5D4 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1583+ D5D5 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1584+ D5D7 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1585+ D5D8                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1585+ D5D8 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1585+ D5DB ED 31       >                    add         hl,a
1585+ D5DD 7E          >                    ld          a,(hl)
1586+ D5DE E1                   pop         hl                                  ;                                                                           ;;;
1587+ D5DF                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1587+ D5DF FE 00       >				cp	0
1587+ D5E1 C2 13 D6    >				jp	nz,NodeIsVisible
1588+ D5E4              CheckFace2:                                                                                                                         ;;;
1589+ D5E4 7A                   ld          a,d                                                                                                             ;;;
1590+ D5E5 ED 23                swapnib                                                                                                                     ;;;
1591+ D5E7 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1592+ D5E9                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1592+ D5E9 FE 00       >				cp	0
1592+ D5EB C2 13 D6    >				jp	nz,NodeIsVisible
1593+ D5EE              CheckFace3:                                                                                                                         ;;;
1594+ D5EE                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1594+ D5EE 23          >                    inc         hl                                  ; vertex byte#1
1594+ D5EF 7E          >                    ld          a,(hl)                              ;
1594+ D5F0 32 15 92    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1595+ D5F3 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1596+ D5F4 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1597+ D5F6 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1598+ D5F7                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1598+ D5F7 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1598+ D5FA ED 31       >                    add         hl,a
1598+ D5FC 7E          >                    ld          a,(hl)
1599+ D5FD E1                   pop         hl                                  ;                                                                           ;;;
1600+ D5FE                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1600+ D5FE FE 00       >				cp	0
1600+ D600 C2 13 D6    >				jp	nz,NodeIsVisible
1601+ D603              CheckFace4:                                                                                                                         ;;;
1602+ D603 7A                   ld          a,d                                                                                                             ;;;
1603+ D604 ED 23                swapnib                                                                                                                     ;;;
1604+ D606 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1605+ D608                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1605+ D608 FE 00       >				cp	0
1605+ D60A C2 13 D6    >				jp	nz,NodeIsVisible
1606+ D60D              NodeIsNotVisible:                                                                                                                   ;;;
1607+ D60D 01 04 00             ld          bc,4
1608+ D610 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1609+ D612                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1610+ D612 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1611+ D613              NodeIsVisible:
1612+ D613              LL49:
1613+ D613 CD B6 D4             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1614+ D616 C9                   ret
1615+ D617
1616+ D617
1617+ D617              ProjectNodeToEye:
1618+ D617 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1619+ D61B 79           	ld			a,c                                 ;  so no need for a negative check
1620+ D61C 32 6F 92     	ld			(varQ),a		                    ; VarQ = z
1621+ D61F 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1622+ D622 CD 31 A1     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1623+ D625 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1624+ D628                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1624+ D628 CB 7F       >                        bit 	7,a
1624+ D62A C2 35 D6    >                        jp      nz,EyeNegativeXPoint
1625+ D62D              EyePositiveXPoint:									; x was positive result
1626+ D62D 2E 80            ld          l,ScreenCenterX						;
1627+ D62F 26 00            ld          h,0
1628+ D631 09               add         hl,bc								; hl = Screen Centre + X
1629+ D632 C3 3C D6         jp          EyeStoreXPoint
1630+ D635              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1631+ D635 2E 80            ld          l,ScreenCenterX
1632+ D637 26 00            ld          h,0
1633+ D639                  ClearCarryFlag
1633+ D639 B7          >				or a
1634+ D63A ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1635+ D63C              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1636+ D63C EB               ex          de,hl
1637+ D63D FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1638+ D640 FD 72 01         ld          (iy+1),d                            ; Update X Point
1639+ D643              EyeProcessYPoint:
1640+ D643 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1641+ D647 79           	ld			a,c
1642+ D648 32 6F 92     	ld			(varQ),a
1643+ D64B 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1644+ D64E CD 31 A1     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1645+ D651 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1646+ D654                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1646+ D654 CB 7F       >                        bit 	7,a
1646+ D656 C2 61 D6    >                        jp      nz,EyeNegativeYPoint
1647+ D659              EyePositiveYPoint:									; Y is positive so above the centre line
1648+ D659 2E 60            ld          l,ScreenCenterY
1649+ D65B                  ClearCarryFlag
1649+ D65B B7          >				or a
1650+ D65C ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1651+ D65E C3 66 D6         jp          EyeStoreYPoint
1652+ D661              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1653+ D661 2E 60            ld          l,ScreenCenterY
1654+ D663 26 00            ld          h,0
1655+ D665 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1656+ D666              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1657+ D666 EB               ex          de,hl
1658+ D667 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1659+ D66A FD 72 03         ld          (iy+3),d                            ; Update Y Point
1660+ D66D C9               ret
1661+ D66E
1662+ D66E
1663+ D66E
1664+ D66E              ; Pitch and roll are 2 phases
1665+ D66E              ; 1 - we apply our pitch and roll to the ship position
1666+ D66E              ;       x -> x + alpha * (y - alpha * x)
1667+ D66E              ;       y -> y - alpha * x - beta * z
1668+ D66E              ;       z -> z + beta * (y - alpha * x - beta * z)
1669+ D66E              ; which can be simplified as:
1670+ D66E              ;       1. K2 = y - alpha * x
1671+ D66E              ;       2. z = z + beta * K2
1672+ D66E              ;       3. y = K2 - beta * z
1673+ D66E              ;       4. x = x + alpha * y
1674+ D66E              ; 2 - we apply our patch and roll to the ship orientation
1675+ D66E              ;      Roll calculations:
1676+ D66E              ;
1677+ D66E              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1678+ D66E              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1679+ D66E              ;      Pitch calculations:
1680+ D66E              ;
1681+ D66E              ;        nosev_y = nosev_y - beta * nosev_z_hi
1682+ D66E              ;        nosev_z = nosev_z + beta * nosev_y_hi
1683+ D66E
1684+ D66E
1685+ D66E
1686+ D66E              APPequAPPFlippedMulQ:
1687+ D66E
1688+ D66E 3A 2E 92     ApplyMyRollToNosevY:    ld  a,(ALP1)                ;
1689+ D671 32 6F 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1690+ D674 2A 22 C0                             ld  hl,(UBnkrotmatNosevY)
1691+ D677 22 70 92                             ld  (varR),hl               ; RS =  nosev_y
1692+ D67A 3A 21 C0                             ld  a,(UBnkrotmatNosevX+1)  ; Set A = -nosev_x_hi
1693+ D67D EE 80                                xor $80
1694+ D67F CD 9A 9F                             call  madXAequQmulAaddRS   ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1695+ D682 2A 70 92                             ld  hl,(varR)
1696+ D685 22 22 C0                             ld  (UBnkrotmatNosevY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1697+ D688 2A 20 C0                             ld hl,(UBnkrotmatNosevX)    ; Set (S R) = nosev_x
1698+ D68B 22 70 92                             ld  (varR),hl
1699+ D68E 3A 23 C0                             ld  a,(UBnkrotmatNosevY+1)  ;  Set A = nosev_y_hi
1700+ D691 CD 9A 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1701+ D694 2A 70 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1702+ D697 22 20 C0                             ld  (UBnkrotmatNosevX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1703+ D69A C9                                   ret
1704+ D69B
1705+ D69B 3A 2E 92     ApplyMyRollToSidevY:    ld  a,(ALP1)
1706+ D69E 32 6F 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1707+ D6A1 2A 16 C0                             ld  hl,(UBnkrotmatSidevY)
1708+ D6A4 22 70 92                             ld  (varR),hl               ; RS =  nosev_y
1709+ D6A7 3A 15 C0                             ld  a,(UBnkrotmatSidevX+1)  ; Set A = -nosev_x_hi
1710+ D6AA EE 80                                xor $80
1711+ D6AC CD 9A 9F                             call  madXAequQmulAaddRS    ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1712+ D6AF 2A 70 92                             ld  hl,(varR)
1713+ D6B2 22 16 C0                             ld  (UBnkrotmatSidevY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1714+ D6B5 2A 14 C0                             ld hl,(UBnkrotmatSidevX)    ; Set (S R) = nosev_x
1715+ D6B8 22 70 92                             ld  (varR),hl
1716+ D6BB 3A 17 C0                             ld  a,(UBnkrotmatSidevY+1)  ;  Set A = nosev_y_hi
1717+ D6BE CD 9A 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1718+ D6C1 2A 70 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1719+ D6C4 22 14 C0                             ld  (UBnkrotmatSidevX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1720+ D6C7 C9                                   ret
1721+ D6C8
1722+ D6C8 3A 2E 92     ApplyMyRollToRoofvY:    ld  a,(ALP1)
1723+ D6CB 32 6F 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1724+ D6CE 2A 1C C0                             ld  hl,(UBnkrotmatRoofvY)
1725+ D6D1 22 70 92                             ld  (varR),hl               ; RS =  nosev_y
1726+ D6D4 3A 1B C0                             ld  a,(UBnkrotmatRoofvX+1)  ; Set A = -nosev_x_hi
1727+ D6D7 EE 80                                xor $80
1728+ D6D9 CD 9A 9F                             call  madXAequQmulAaddRS    ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1729+ D6DC 2A 70 92                             ld  hl,(varR)
1730+ D6DF 22 1C C0                             ld  (UBnkrotmatRoofvY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1731+ D6E2 2A 1A C0                             ld hl,(UBnkrotmatRoofvX)    ; Set (S R) = nosev_x
1732+ D6E5 22 70 92                             ld  (varR),hl
1733+ D6E8 3A 1D C0                             ld  a,(UBnkrotmatRoofvY+1)  ;  Set A = nosev_y_hi
1734+ D6EB CD 9A 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1735+ D6EE 2A 70 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1736+ D6F1 22 1A C0                             ld  (UBnkrotmatRoofvX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1737+ D6F4 C9                                   ret
1738+ D6F5
1739+ D6F5
1740+ D6F5
1741+ D6F5
1742+ D6F5              ; 1> (-a)-(-b)=  if ABS(a)> ABS(B), 1A> (ABS(a)-abs(b))*-1 Else 1B> (ABS(b)-abs(a))
1743+ D6F5              ; 2> (+a)-(+b)=  if ABS(a) > ABS(B),2A>  ABS(a)- abs (B)   else 2B> (ABS(B) - abs(A) * -1
1744+ D6F5              ; 3> (-a)-(+b)=  3A> (ABS(a) + ABS(b)) * -1
1745+ D6F5              ; 4> (+a)-(-b)=  4A> ABS(a) + ABS(b)
1746+ D6F5 47           AHLequUbnkYminusAHL:    ld      b,a                 ; b =sign of subtraction
1747+ D6F6 EB                                   ex      de,hl               ; de = amount to subtract
1748+ D6F7 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = unsigned Y position
1749+ D6FA 3A 10 C0                             ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1750+ D6FD 4F                                   ld      c,a                 ; we may need the sign later
1751+ D6FE A8                                   xor     b                   ; now we need to see if signs were different or same
1752+ D6FF                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1752+ D6FF FA 20 D7    >                        jp		m, .SignsDifferent
1753+ D702 CD E9 A2     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1754+ D705 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1755+ D707 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1756+ D70A 7C                                   ld      a,h
1757+ D70B B5                                   or      l
1758+ D70C 28 02                                jr      z,.HLGTDEZero
1759+ D70E 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1760+ D70F C9                                   ret
1761+ D710 AF           .HLGTDEZero:            xor     a
1762+ D711 C9                                   ret                         ; if the result was zero set sign to zero too
1763+ D712 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1764+ D713 B7 ED 52                             sub     hl,de               ;
1765+ D716 7C                                   ld      a,h
1766+ D717 B5                                   or      l
1767+ D718 28 04                                jr      z,.HLLTDEZero
1768+ D71A 79                                   ld      a,c
1769+ D71B EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1770+ D71D C9                                   ret
1771+ D71E AF           .HLLTDEZero:            xor     a
1772+ D71F C9                                   ret
1773+ D720 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1774+ D721 7C                                   ld      a,h
1775+ D722 B5                                   or      l
1776+ D723 28 F9                                jr      z,.HLLTDEZero
1777+ D725 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1778+ D726 C9                                   ret
1779+ D727
1780+ D727              ;----------------------------------------------------------------------------------------------------------
1781+ D727 47           AHLequKminusAHL:        ld      b,a                 ; b =sign of subtraction
1782+ D728 EB                                   ex      de,hl               ; de = amount to subtract
1783+ D729 2A 88 92                             ld      hl,(varKp1)         ; Ahl = K
1784+ D72C 3A 8A 92                             ld      a,(varKp3)          ;
1785+ D72F 4F                                   ld      c,a                 ; we may need the sign later
1786+ D730 A8                                   xor     b                   ; now we need to see if signs were different or same
1787+ D731                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1787+ D731 FA 52 D7    >                        jp		m, .SignsDifferent
1788+ D734 CD E9 A2     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1789+ D737 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1790+ D739 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1791+ D73C 7C                                   ld      a,h
1792+ D73D B5                                   or      l
1793+ D73E 28 02                                jr      z,.HLGTDEZero
1794+ D740 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1795+ D741 C9                                   ret
1796+ D742 AF           .HLGTDEZero:            xor     a
1797+ D743 C9                                   ret                         ; if the result was zero set sign to zero too
1798+ D744 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1799+ D745 B7 ED 52                             sub     hl,de               ;
1800+ D748 7C                                   ld      a,h
1801+ D749 B5                                   or      l
1802+ D74A 28 04                                jr      z,.HLLTDEZero
1803+ D74C 79                                   ld      a,c
1804+ D74D EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1805+ D74F C9                                   ret
1806+ D750 AF           .HLLTDEZero:            xor     a
1807+ D751 C9                                   ret
1808+ D752 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1809+ D753 7C                                   ld      a,h
1810+ D754 B5                                   or      l
1811+ D755 28 F9                                jr      z,.HLLTDEZero
1812+ D757 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1813+ D758 C9                                   ret
1814+ D759              ;-------------------------------------------------------------------------------------------------------------
1815+ D759
1816+ D759 47           AHLequUbnkZplusAHL:     ld      b,a                 ; b =sign of subtraction
1817+ D75A EB                                   ex      de,hl               ; de = amount to subtract
1818+ D75B 2A 11 C0                             ld      hl,(UBnKzlo)        ; hl = unsigned Y position
1819+ D75E 3A 13 C0                             ld      a,(UBnKzsgn)        ; ahl = signed Y corrodinate
1820+ D761 4F                                   ld      c,a                 ; we may need the sign later
1821+ D762 A8                                   xor     b                   ; now we need to see if signs were different or same
1822+ D763                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1822+ D763 FA 71 D7    >                        jp		m, .SignsDifferent
1823+ D766 19           .SignsTheSame:          add     hl,de
1824+ D767 7C                                   ld      a,h
1825+ D768 B5                                   or      l
1826+ D769 28 02                                jr      z,.HLGTDEZero
1827+ D76B 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1828+ D76C C9                                   ret
1829+ D76D AF           .HLGTDEZero:            xor     a
1830+ D76E C9                                   ret                         ; if the result was zero set sign to zero too
1831+ D76F AF           .HLLTDEZero:            xor     a
1832+ D770 C9                                   ret
1833+ D771 CD E9 A2     .SignsDifferent:        call    compare16HLDE       ; if signs were the saem tehn
1834+ D774 38 09                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1835+ D776 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1836+ D779 7C                                   ld      a,h
1837+ D77A B5                                   or      l
1838+ D77B 28 F0                                jr      z,.HLGTDEZero
1839+ D77D 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1840+ D77E C9                                   ret
1841+ D77F EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1842+ D780 B7 ED 52                             sub     hl,de               ;
1843+ D783 7C                                   ld      a,h
1844+ D784 B5                                   or      l
1845+ D785 28 E8                                jr      z,.HLLTDEZero
1846+ D787 79                                   ld      a,c
1847+ D788 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1848+ D78A C9                                   ret
1849+ D78B
1850+ D78B
1851+ D78B
1852+ D78B              ; Test roll only so beta will be 0 therefore:
1853+ D78B              ; 1. K2 = y - alpha * x
1854+ D78B              ; 2. z = z + 0 * K2     so z in untouched
1855+ D78B              ; 3. y = K2 * z
1856+ D78B              ; 4. x = x + alpha * y
1857+ D78B              ; Full version
1858+ D78B              ; 1. K2 = y - alpha * x
1859+ D78B              ; 2. z = z + beta * K2
1860+ D78B              ; 3. y = K2 - beta * z
1861+ D78B              ; 4. x = x + alpha * y
1862+ D78B              ;------1. K2 = y - alpha * x
1863+ D78B 3A 2E 92     ApplyMyRollToPosition:  ld      a,(ALP1)
1864+ D78E 16 00                                ld      d,0
1865+ D790 5F                                   ld      e,a                 ; de = unsigned roll magnitude
1866+ D791 2A 0B C0                             ld      hl,(UBnKxlo)        ; hl = position X unsigned
1867+ D794 6C                                   ld      l,h
1868+ D795 26 00                                ld      h,0
1869+ D797 CD F7 9F                             call    mulDEbyHL          ; hl = de * hl
1870+ D79A 3A 2F 92                             ld      a,(ALP2)
1871+ D79D 47                                   ld      b,a                 ; b = sign
1872+ D79E 3A 0D C0                             ld      a,(UBnKxsgn)        ; a = position sign
1873+ D7A1 A8                                   xor     b                   ; xor so if opposite then
1874+ D7A2 E6 80                                and     $80                 ; so -*- = +, +*+ = + opposite signes = negative
1875+ D7A4 CD F5 D6                             call    AHLequUbnkYminusAHL
1876+ D7A7 22 88 92                             ld      (varKp1),hl
1877+ D7AA 32 8A 92                             ld      (varKp3),a          ; Kp = y - alph * x as 16 bit + sign bit
1878+ D7AD              ;------2. z = z + beta * K2 and store in K2p
1879+ D7AD 3A 22 92     .ZEquZPlusBetaMulK2:    ld      a,(BET1)
1880+ D7B0 16 00                                ld      d,0
1881+ D7B2 5F                                   ld      e,a
1882+ D7B3 CD F7 9F                             call    mulDEbyHL
1883+ D7B6 3A 8A 92                             ld      a,(varKp3)          ; get k2 sign back
1884+ D7B9 4F                                   ld      c,a
1885+ D7BA 3A 23 92                             ld      a,(BET2)
1886+ D7BD A9                                   xor     c                   ; AHL = beta * k2
1887+ D7BE E6 80                                and     $80
1888+ D7C0 CD 59 D7                             call    AHLequUbnkZplusAHL  ; AHL = z + beta * k2
1889+ D7C3 22 8C 92                             ld      (varK2p1),hl
1890+ D7C6 32 8E 92                             ld      (varK2p3),a          ; K2 = z + beta * K2
1891+ D7C9 22 11 C0                             ld      (UBnKzlo),hl; DEBUG
1892+ D7CC 32 13 C0                             ld      (UBnKzsgn),a
1893+ D7CF              ;------3. y = K2 - beta * z and store in K3p
1894+ D7CF 3A 22 92     .YEquK2MinusBetaMulZ:   ld      a,(BET1)
1895+ D7D2 16 00                                ld      d,0
1896+ D7D4 5F                                   ld      e,a
1897+ D7D5 2A 11 C0                             ld      hl,(UBnKzlo)        ; hl = position X unsigned
1898+ D7D8 6C                                   ld      l,h
1899+ D7D9 26 00                                ld      h,0
1900+ D7DB CD F7 9F                             call    mulDEbyHL
1901+ D7DE 3A 23 92                             ld      a,(BET2)
1902+ D7E1 47                                   ld      b,a                 ; b = sign
1903+ D7E2 3A 13 C0                             ld      a,(UBnKzsgn)        ; a = position sign
1904+ D7E5 A8                                   xor     b                   ; xor so if opposite then
1905+ D7E6 E6 80                                and     $80                 ; so -*- = +, +*+ = + opposite signes = negative
1906+ D7E8 CD 27 D7                             call    AHLequKminusAHL
1907+ D7EB 22 0E C0                             ld      (UBnKylo),hl; DEBUG
1908+ D7EE 32 10 C0                             ld      (UBnKysgn),a
1909+ D7F1 22 92 92                             ld      (varK3p1),hl
1910+ D7F4 32 96 92                             ld      (varK3p3),a          ; Kp =  y = K2 - beta * z
1911+ D7F7              ;------4. x = x + alpha * y
1912+ D7F7 3A 2E 92     .XequXPlusAlphaMulY:    ld      a,(ALP1)
1913+ D7FA 16 00                                ld      d,0
1914+ D7FC 5F                                   ld      e,a                 ; de = unsigned roll magnitude
1915+ D7FD 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = position X unsigned
1916+ D800 6C                                   ld      l,h
1917+ D801 26 00                                ld      h,0
1918+ D803 CD F7 9F                             call    mulDEbyHL          ; hl = de * hl
1919+ D806 3A 2F 92                             ld      a,(ALP2)
1920+ D809 47                                   ld      b,a                 ; b = sign
1921+ D80A 3A 10 C0                             ld      a,(UBnKysgn)        ; a = position sign
1922+ D80D A8                                   xor     b                   ; xor so if opposite then
1923+ D80E E6 80                                and     $80                 ; so -*- = +, +*+ = + opposite signes = negative
1924+ D810 4F                                   ld      c,a                 ; save sign in c
1925+ D811 EB                                   ex      de,hl               ; de = alpha & y, c = sign
1926+ D812 2A 0B C0                             ld      hl,(UBnKxlo)        ; hl = x
1927+ D815 3A 0D C0                             ld      a,(UBnKxsgn)        ; a x sign
1928+ D818 47                                   ld      b,a
1929+ D819              ;XX                        ld      h,a
1930+ D819              ;XX                        or      h                   ; hl - xpos S15 format
1931+ D819              ;XX                        ld      a,c; was b?
1932+ D819              ;XX                        or      d
1933+ D819              ;XX                        ld      d,a
1934+ D819
1935+ D819                                      ;; calcs HLB + DEC where B and C are signs
1936+ D819              ;; result HL with A as sign
1937+ D819              ;; special handling if result is zero forcign sign bit to be zero
1938+ D819 CD 3B CB                             call    ADDHLDESignBC
1938+ D81C
1939+ D81C
1940+ D81C
1941+ D81C                                      ;call    ADDHLDESignedv3 *** THIS DOES NOT WORK
1942+ D81C 22 0B C0                             ld      (UBnKxlo), hl
1943+ D81F              ;XX                        ld      a,h
1944+ D81F E6 80                                and     $80
1945+ D821 32 0D C0                             ld      (UBnKxsgn), a
1946+ D824              ;.SaveZPos               ld      hl,(varK2p1)
1947+ D824              ;                        ld      (UBnKzlo),a
1948+ D824              ;                        ld      a,(varK2p3)
1949+ D824              ;                        ld      (UBnKzsgn),a
1950+ D824              ;.SaveYPos               ld      hl,(varK3p1)
1951+ D824              ;                        ld      (UBnKylo),a
1952+ D824              ;                        ld      a,(varK3p3)
1953+ D824              ;                        ld      (UBnKysgn),a
1954+ D824
1955+ D824
1956+ D824 C9                                   ret
1957+ D825
1958+ D825
1959+ D825              ;----------------------------------------------------------------------------------------------------------------------------------
1960+ D825 3A 2E 92     ApplyMyRollAndPitch:    ld      a,(ALP1)
1961+ D828 21 22 92                             ld      hl,BET1
1962+ D82B B6                                   or      (hl)
1963+ D82C FE 00                                cp      0
1964+ D82E 28 03                                jr      z,.NoRotation
1965+ D830                                    ;  break
1966+ D830 CD 8B D7                             call    ApplyMyRollToPosition
1967+ D833                      ;                call    ApplyMyRollToNosevY
1968+ D833                      ;                call    ApplyMyRollToSidevY
1969+ D833                      ;                call    ApplyMyRollToRoofvY
1970+ D833 C9           .NoRotation:            ret
1971+ D834              ; .....................................................
1972+ D834              ; Process Nodes does the following:
1973+ D834              ; for each node:
1974+ D834              ;     see if node >
1975+ D834 00           PNXX20DIV6          DB      0
1976+ D835 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1977+ D837 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1978+ D839 00           PNLASTNORM          DB      0
1979+ D83A              ProcessNodes:
1980+ D83A AF               xor     a
1981+ D83B 32 F1 C2         ld      (UbnkLineArrayLen),a
1982+ D83E CD 73 CF         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1983+ D841 CD 36 85         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1984+ D844 CD 22 D0         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1985+ D847 CD 3B D0         call    InverseXX16                      ;#11; Invert rotation matrix
1986+ D84A 21 14 C3         ld      hl,UBnkHullVerticies
1987+ D84D 3A 06 C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1988+ D850              GetActualVertexCount:
1989+ D850 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1990+ D851 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1991+ D852 16 06            ld      d,6
1992+ D854 CD 61 A1         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1993+ D857 41               ld      b,c                              ; c = number of vertices
1994+ D858 FD 21 BF C0      ld      iy,UBnkNodeArray
1995+ D85C              LL48:
1996+ D85C              PointLoop:
1997+ D85C C5           	push	bc                                  ; save counters
1998+ D85D E5           	push	hl                                  ; save verticies list pointer
1999+ D85E FD E5        	push	iy                                  ; save Screen plot array pointer
2000+ D860 78               ld      a,b
2001+ D861                  ;break
2002+ D861 CD 94 D5         call    CopyNodeToXX15                      ; copy verices at hl to xx15
2003+ D864 3A 76 C0     	ld		a,(UBnkXScaledSign)
2004+ D867 CD AB 87     	call    XX12EquNodeDotOrientation
2005+ D86A CD DC 87     	call    TransposeXX12ByShipToXX15
2006+ D86D CD B7 85     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
2007+ D870 FD E1        	pop		iy                                  ; get back screen plot array pointer
2008+ D872 CD 17 D6     	call    ProjectNodeToEye                     ; set up screen plot list entry
2009+ D875                 ; ld      hl,UbnkLineArrayLen
2010+ D875                ;  inc     (hl)                                ; another node done
2011+ D875              ReadyForNextPoint:
2012+ D875 FD E5        	push	iy                                  ; copy screen plot pointer to hl
2013+ D877 E1           	pop		hl
2014+ D878 3E 04        	ld		a,4
2015+ D87A ED 31        	add		hl,a
2016+ D87C E5           	push	hl                                  ; write it back at iy + 4
2017+ D87D FD E1        	pop		iy								    ; and put it in iy again
2018+ D87F E1           	pop		hl                                  ; get hl back as vertex list
2019+ D880 3E 06        	ld		a,6
2020+ D882 ED 31        	add 	hl,a                                ; and move to next vertex
2021+ D884 C1           	pop		bc                                  ; get counter back
2022+ D885 10 D5        	djnz	PointLoop
2023+ D887              ; ......................................................
2024+ D887 C9               ret
2025+ D888              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
2026+ D888              ;  Entering Here we have the following:
2027+ D888              ;  XX15(1 0) = vertex x-coordinate but sign not populated
2028+ D888              ;  XX15(3 2) = vertex y-coordinate but sign not populated
2029+ D888              ;  XX15(5 4) = vertex z-coordinate but sign not populated
2030+ D888              ;
2031+ D888              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
2032+ D888              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
2033+ D888              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
2034+ D888              ;--------------------------------------------------------------------------------------------------------
2035+ D888              AddLaserBeamLine:
2036+ D888              ; this code is a bag of shit and needs re-writing
2037+ D888              GetGunVertexNode:
2038+ D888 3A 04 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
2039+ D88B 21 BF C0             ld          hl,UBnkNodeArray                    ; list of lines to read
2040+ D88E ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
2041+ D890 FD 2E 00             ld          iyl,0
2042+ D893              MoveX1PointToXX15:
2043+ D893 4E                   ld          c,(hl)                              ;
2044+ D894 23                   inc         hl
2045+ D895 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
2046+ D896 23                   inc         hl
2047+ D897 ED 43 75 C0          ld          (UBnkX1),bc
2048+ D89B 0C                   inc         c
2049+ D89C C8                   ret         z                                   ; was c 255?
2050+ D89D 04                   inc         b
2051+ D89E C8                   ret         z                                   ; was c 255?
2052+ D89F              MoveY1PointToXX15:
2053+ D89F 4E                   ld          c,(hl)                              ;
2054+ D8A0 23                   inc         hl
2055+ D8A1 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
2056+ D8A2 23                   inc         hl
2057+ D8A3 ED 43 77 C0          ld          (UBnkY1),bc
2058+ D8A7              SetX2PointToXX15:
2059+ D8A7 01 00 00             ld          bc,0                                ; set X2 to 0
2060+ D8AA ED 43 79 C0          ld          (UBnkX2),bc
2061+ D8AE 3A 11 C0             ld          a,(UBnKzlo)
2062+ D8B1 4F                   ld          c,a
2063+ D8B2              SetY2PointToXX15:
2064+ D8B2 ED 43 7B C0          ld          (UBnkY2),bc                         ; set Y2to 0
2065+ D8B6 3A 0D C0             ld          a,(UBnKxsgn)
2066+ D8B9                      JumpOnBitClear a,7,LL74SkipDec
2066+ D8B9 CB 7F       >                        bit 	7,a
2066+ D8BB CA C3 D8    >                        jp      z,LL74SkipDec
2067+ D8BE              LL74DecX2:
2068+ D8BE 3E FF                ld          a,$FF
2069+ D8C0 32 79 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
2070+ D8C3              LL74SkipDec:
2071+ D8C3 CD 1D CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
2072+ D8C6 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
2073+ D8C8              ; Here we are usign hl to replace VarU as index
2074+ D8C8 2A 72 92             ld          hl,(varU16)
2075+ D8CB 3A 75 C0             ld          a,(UBnKx1Lo)
2076+ D8CE 77                   ld          (hl),a
2077+ D8CF 23                   inc         hl
2078+ D8D0 3A 77 C0             ld          a,(UbnKy1Lo)
2079+ D8D3 77                   ld          (hl),a
2080+ D8D4 23                   inc         hl
2081+ D8D5 3A 79 C0             ld          a,(UBnkX2Lo)
2082+ D8D8 77                   ld          (hl),a
2083+ D8D9 23                   inc         hl
2084+ D8DA 3A 7B C0             ld          a,(UbnKy2Lo)
2085+ D8DD 77                   ld          (hl),a
2086+ D8DE FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
2087+ D8E0 23                   inc         hl
2088+ D8E1 FD 2C                inc         iyl                                 ; ready for next byte
2089+ D8E3 22 72 92             ld          (varU16),hl
2090+ D8E6 C9                   ret
2091+ D8E7
2092+ D8E7                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++D8E7              ;--------------------------------------------------------------------------------------------------------
   2++D8E7                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++D8E7              ;--------------------------------------------------------------------------------------------------------
   2++D8E7              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D8E7 21 BF C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D8EA ED 31                                add         hl,a                                ; hl = address of Node
   5++D8EC 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D8ED 11 75 C0                             ld          de,UBnkX1
   7++D8F0 ED A0                                ldi                                             ; x1 lo
   8++D8F2 ED A0                                ldi                                             ; x1 hi
   9++D8F4 ED A0                                ldi                                             ; y1 lo
  10++D8F6 ED A0                                ldi                                             ; y1 hi
  11++D8F8 C9                                   ret
  12++D8F9
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++D8F9                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++D8F9              ;--------------------------------------------------------------------------------------------------------
   2++D8F9              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D8F9 21 BF C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D8FC ED 31                                add         hl,a                                ; hl = address of Node
   5++D8FE 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D8FF 11 79 C0                             ld          de,UBnkX2
   7++D902 ED A0                                ldi                                             ; x1 lo
   8++D904 ED A0                                ldi                                             ; x1 hi
   9++D906 ED A0                                ldi                                             ; y1 lo
  10++D908 ED A0                                ldi                                             ; y1 hi
  11++D90A C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++D90B                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++D90B              ;--------------------------------------------------------------------------------------------------------
   2++D90B              GetFaceAtA:         MACRO
   3++D90B ~                                ld          hl,UbnkFaceVisArray
   4++D90B ~                                add         hl,a
   5++D90B ~                                ld          a,(hl)                              ; get face visibility
   6++D90B                                  ENDM
   7++D90B
# file closed: ././ModelRender/GetFaceAtA.asm
   5++D90B              ;--------------------------------------------------------------------------------------------------------
   6++D90B              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++D90B               ;   DEFINE NOBACKFACECULL 1
   8++D90B 00           PLEDGECTR           DB          0
   9++D90C
  10++D90C              PrepLines:
  11++D90C              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++D90C
  13++D90C              ; TODO add in onced DOEXP is finished
  14++D90C              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++D90C              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++D90C              ;        or          8
  17++D90C              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++D90C              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++D90C              ;EE31:                                                   ; no explosion
  20++D90C              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++D90C              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++D90C              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++D90C              ;
  24++D90C              ;--------------------------------------------------------------------------------------------------------
  25++D90C              InitialiseLineRead:
  26++D90C                      ;break
  27++D90C                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++D90C AF          >               xor      a
  27++D90D 32 F1 C2    >               ld       (UbnkLineArrayLen),a
  28++D910                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++D910 AF          >               xor      a
  28++D911 32 F2 C2    >               ld       (UbnkLineArrayBytes),a
  29++D914                      ldWriteZero PLEDGECTR
  29++D914 AF          >               xor      a
  29++D915 32 0B D9    >               ld       (PLEDGECTR),a
  30++D918 3A 07 C3             ld          a,(EdgeCountAddr)
  31++D91B DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++D91D FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++D920 21 FF C1             ld          hl,UbnkLineArray                    ; head of array
  34++D923 22 72 92             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++D926                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++D926 3A 07 C3    >               ld       a,(EdgeCountAddr)
  35++D929 32 76 92    >               ld       (XX17),a
  36++D92C 3A 2A C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  37++D92F                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++D92F CB 77       >                        bit 	6,a
  37++D931 CA 39 D9    >                        jp      z,CalculateNewLines
  38++D934 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++D936 32 2A C0             ld          (UBnkexplDsp),a                     ; INWK+31
  40++D939              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++D939              ; NOw we can calculate hull after including laser line
  42++D939              CalculateNewLines:
  43++D939              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++D939              CheckEdgesForVisibility:
  45++D939 21 40 C4             ld          hl,UBnkHullEdges
  46++D93C                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++D93C 22 1A 92             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++D93F 3A 03 C3             ld          a,(LineX4Addr)
  49++D942 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++D943              LL75Loop:                                               ; count Visible edges
  51++D943              IsEdgeInVisibilityRange:
  52++D943 2A 1A 92             ld          hl,(varV)
  53++D946 E5                   push        hl
  54++D947 FD E1                pop         iy
  55++D949                      IFDEF NOBACKFACECULL
  56++D949 ~                        jp          VisibileEdge; DEBUGTODO
  57++D949                      ENDIF
  58++D949 3A A6 91             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++D94C 57                   ld          d,a                                 ; d holds copy of XX4
  60++D94D              ; Get Edge Byte 0
  61++D94D FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++D950                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++D950 BA          >                        cp      d
  62++D951 DA A5 D9    >                        jp		c,LL78EdgeNotVisible
  63++D954              EdgeMayBeVisibile:
  64++D954              ; Get Edge Byte 1
  65++D954              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++D954 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++D957 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++D958 E6 0F                and         $0F                                 ;
  69++D95A                      GetFaceAtA
  69++D95A 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
  69++D95D ED 31       >                    add         hl,a
  69++D95F 7E          >                    ld          a,(hl)                              ; get face visibility
  70++D960              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++D960                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++D960 FE 00       >				cp	0
  71++D962 C2 77 D9    >				jp	nz,VisibileEdge
  72++D965              IsFace2Visibile:
  73++D965 79                   ld          a,c                                 ; restore byte 1 from c register
  74++D966 ED 23                swapnib                                         ;
  75++D968 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++D96A E5                   push        hl
  77++D96B                      GetFaceAtA
  77++D96B 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
  77++D96E ED 31       >                    add         hl,a
  77++D970 7E          >                    ld          a,(hl)                              ; get face visibility
  78++D971 E1                   pop         hl
  79++D972                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++D972 FE 00       >				cp	0
  79++D974 CA A5 D9    >				jp	z,LL78EdgeNotVisible
  80++D977              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++D977              ;LL79--Visible edge--------------------------------------
  82++D977              ; Get Edge Byte 2
  83++D977 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++D97A CD E7 D8             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++D97D FD 7E 03             ld          a,(IY+3)
  86++D980 CD F9 D8             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++D983 CD 1D CD             call        ClipLine
  88++D986 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++D988              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++D988 ED 5B 72 92          ld          de,(varU16)                         ; clipped edges heap address
  91++D98C 21 75 C0             ld          hl,UBnkNewX1
  92++D98F                      FourLDIInstrunctions
  92++D98F ED A0       >                        ldi
  92++D991 ED A0       >                        ldi
  92++D993 ED A0       >                        ldi
  92++D995 ED A0       >                        ldi
  93++D997 ED 53 72 92          ld          (varU16),de                         ; update U16 with current address
  94++D99B 21 F1 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++D99E 34                   inc         (hl)
  96++D99F 7E                   ld          a,(hl)
  97++D9A0                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++D9A0 FE 32       >                        cp     LineArraySize
  97++D9A2 D2 BB D9    >                        jp		nc,CompletedLineGeneration
  98++D9A5              ; If we hit here we skip the write of line arryay u16
  99++D9A5              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++D9A5              LL78:
 101++D9A5 2A 1A 92             ld          hl,(varV)                           ; varV is current edge address
 102++D9A8 3E 04                ld          a,4
 103++D9AA ED 31                add         hl,a
 104++D9AC 22 1A 92             ld          (varV),hl
 105++D9AF 21 0B D9             ld          hl,PLEDGECTR                        ;
 106++D9B2 34                   inc         (hl)                                ;
 107++D9B3 7E                   ld          a,(hl)                              ; current edge index ++
 108++D9B4                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++D9B4 21 76 92    >                  ld    hl,XX17
 108++D9B7 BE          >                  cp    (hl)
 108++D9B8 C2 43 D9    >                  jp      nz,LL75Loop
 109++D9BB              CompletedLineGeneration:
 110++D9BB              LL81:
 111++D9BB              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++D9BB 3A F1 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++D9BE CB 27                sla         a
 114++D9C0 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++D9C2 32 F2 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++D9C5              ExitEdgeDataLoop:
 117++D9C5 C9                   ret
 118++D9C6
# file closed: ./Universe/PrepLines.asm
2093+ D9C6
2094+ D9C6              UnivBankSize  EQU $ - StartOfUniv
2095+ D9C6
# file closed: ./Universe/univ_ship_data.asm
 909  D9C6
 910  D9C6                  SLOT    UniverseBankAddr
 911  D9C6                  PAGE    BankUNIVDATA1
 912  D9C6              	ORG	UniverseBankAddr,BankUNIVDATA1
 913  C000 FF           UNIVDATABlock1      DB $FF
 914  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 915  E000
 916  E000                  SLOT    UniverseBankAddr
 917  E000                  PAGE    BankUNIVDATA2
 918  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
 919  C000 FF           UNIVDATABlock2      DB $FF
 920  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 921  E000
 922  E000                  SLOT    UniverseBankAddr
 923  E000                  PAGE    BankUNIVDATA3
 924  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
 925  C000 FF           UNIVDATABlock3      DB $FF
 926  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 927  E000
 928  E000                  SLOT    UniverseBankAddr
 929  E000                  PAGE    BankUNIVDATA4
 930  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
 931  C000 FF           UNIVDATABlock4      DB $FF
 932  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 933  E000
 934  E000                  SLOT    UniverseBankAddr
 935  E000                  PAGE    BankUNIVDATA5
 936  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
 937  C000 FF           UNIVDATABlock5      DB $FF
 938  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 939  E000
 940  E000                  SLOT    UniverseBankAddr
 941  E000                  PAGE    BankUNIVDATA6
 942  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
 943  C000 FF           UNIVDATABlock6      DB $FF
 944  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 945  E000
 946  E000                  SLOT    UniverseBankAddr
 947  E000                  PAGE    BankUNIVDATA7
 948  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
 949  C000 FF           UNIVDATABlock7      DB $FF
 950  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 951  E000
 952  E000                  SLOT    UniverseBankAddr
 953  E000                  PAGE    BankUNIVDATA8
 954  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
 955  C000 FF           UNIVDATABlock8      DB $FF
 956  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 957  E000
 958  E000                  SLOT    UniverseBankAddr
 959  E000                  PAGE    BankUNIVDATA8
 960  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
 961  C000 FF           UNIVDATABlock9      DB $FF
 962  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 963  E000
 964  E000                  SLOT    UniverseBankAddr
 965  E000                  PAGE    BankUNIVDATA10
 966  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
 967  C000 FF           UNIVDATABlock10     DB $FF
 968  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 969  E000
 970  E000                  SLOT    UniverseBankAddr
 971  E000                  PAGE    BankUNIVDATA11
 972  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
 973  C000 FF           UNIVDATABlock11     DB $FF
 974  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 975  E000
 976  E000                  SLOT    UniverseBankAddr
 977  E000                  PAGE    BankUNIVDATA12
 978  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
 979  C000 FF           UNIVDATABlock12     DB $FF
 980  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 981  E000
 982  E000                  SLOT    GalaxyDataAddr
 983  E000                  PAGE    BankGalaxyData0
 984  E000              	ORG GalaxyDataAddr, BankGalaxyData0
 985  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 96 99 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 4B 9C 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 7B 99 8C 99                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 92 99 00 00
 316+ F41D A2 99 A9 99                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 96 99 9B 99                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D 81 99 88 99                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 B0 99 B7 99                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 15 9A B0 99                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 E3 99 00 00
 321+ F445 EF 99 F7 99                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 0C 9A 53 9C                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 65 99 C2 99                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 BC 99 00 00
 324+ F45D 76 99 C2 99                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 BC 99 00 00
 325+ F465 71 99 C2 99                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 BC 99 00 00
 326+ F46D 6B 99 C2 99                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 BC 99 00 00
 327+ F475 65 99 C8 99                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 BC 99 00 00
 328+ F47D 76 99 C8 99                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 BC 99 00 00
 329+ F485 71 99 C8 99                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 BC 99 00 00
 330+ F48D 6B 99 C8 99                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 BC 99 00 00
 331+ F495 65 99 D5 99                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 BC 99 00 00
 332+ F49D 76 99 D5 99                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 BC 99 00 00
 333+ F4A5 71 99 D5 99                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 BC 99 00 00
 334+ F4AD 6B 99 D5 99                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 BC 99 00 00
 335+ F4B5 65 99 5E 9C                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 BC 99 00 00
 336+ F4BD 76 99 5E 9C                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 BC 99 00 00
 337+ F4C5 71 99 5E 9C                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 BC 99 00 00
 338+ F4CD 6B 99 5E 9C                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 BC 99 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD 73 96     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD 8B 96     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 89 9E     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A 52 93                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD AA 9E     .LargeSizeName:         call	NamingLoop
 401+ F690 CD AA 9E     .SmallSizeName:         call	NamingLoop
 402+ F693 CD AA 9E                             call	NamingLoop
 403+ F696 CD AA 9E                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A 54 93     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A 55 93                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A 56 93                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A 57 93                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 00 96     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A E9 95     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 2D 93     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD F7 9F                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 5B 92     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 52 93             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 52 93             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 5B 92     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 5B 92     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 5B 92     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 74 92                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A 74 92                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 74 92                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c,nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c,nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                   cp    2
1156+ FBCF D8          >                   ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD 72 A0                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 65 93                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 65 93                             ld      (Distance),a
1229+ FC51 32 66 93                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1233+ FC55 AF           galaxy_system_under_cursor:xor     a
1234+ FC56 32 74 92                             ld		(XSAV),a
1235+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1236+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1237+ FC60 DD E5                                push    ix
1238+ FC62 7D                                   ld      a,l
1239+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1240+ FC66 20 14                                jr      nz,.ItsNotThisX
1241+ FC68 7C                                   ld      a,h
1242+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1243+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1244+ FC6E DD E5                                push    ix
1245+ FC70 E1                                   pop     hl
1246+ FC71 11 52 93                             ld      de,WorkingSeeds
1247+ FC74 CD 5E 96                             call    copy_seed
1248+ FC77 3E FF                                ld      a,$FF
1249+ FC79 DD E1                                pop     ix
1250+ FC7B C9                                   ret
1251+ FC7C E1           .ItsNotThisX:           pop     hl
1252+ FC7D ED 34 08 00                          add     hl,8
1253+ FC81 E5                                   push    hl
1254+ FC82 DD E1                                pop     ix
1255+ FC84 3A 74 92                             ld		a,(XSAV)
1256+ FC87 3D                                   dec		a
1257+ FC88 32 74 92                             ld      (XSAV),a
1258+ FC8B FE 00                                cp		0
1259+ FC8D C8                                   ret		z
1260+ FC8E 18 CD                                jr		.GCCounterLoop
1261+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1262+ FC90 21 5B 92     SeedGalaxy:             ld      hl,SystemSeed
1263+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1264+ FC96 ED A0                                ldi
1265+ FC98 ED A0                                ldi
1266+ FC9A ED A0                                ldi
1267+ FC9C ED A0                                ldi
1268+ FC9E ED A0                                ldi
1269+ FCA0 ED A0                                ldi
1270+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1271+ FCA6 AF                                   xor		a
1272+ FCA7 32 74 92                             ld		(XSAV),a
1273+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1274+ FCAC D1                                   pop     de
1275+ FCAD 21 5B 92                             ld      hl,SystemSeed
1276+ FCB0 CD 5E 96                             call    copy_seed
1277+ FCB3 DD E5                                push    ix
1278+ FCB5 E1                                   pop     hl
1279+ FCB6 ED 34 08 00                          add     hl,8
1280+ FCBA E5                                   push    hl
1281+ FCBB DD E1                                pop     ix
1282+ FCBD CD 93 96                             call    next_system_seed
1283+ FCC0 3A 74 92                             ld		a,(XSAV)
1284+ FCC3 3D                                   dec		a
1285+ FCC4 FE 00                                cp		0
1286+ FCC6 C8                                   ret		z
1287+ FCC7 32 74 92                             ld		(XSAV),a
1288+ FCCA 18 DE                                jr      SeedGalaxyLoop
1289+ FCCC C9                                   ret
1290+ FCCD
1291+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1292+ FCCD
# file closed: ./Universe/galaxy_data.asm
 986  FCCD
 987  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
 988  FCCD
 989  FCCD
 990  FCCD                  SLOT    GalaxyDataAddr
 991  FCCD                  PAGE    BankGalaxyData1
 992  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
 993  E000 FF           GALAXYDATABlock1         DB $FF
 994  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
 995  0000
 996  0000                  SLOT    GalaxyDataAddr
 997  0000                  PAGE    BankGalaxyData2
 998  0000              	ORG GalaxyDataAddr, BankGalaxyData2
 999  E000 FF           GALAXYDATABlock2         DB $FF
1000  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1001  0000                  SLOT    GalaxyDataAddr
1002  0000                  PAGE    BankGalaxyData3
1003  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1004  E000 FF           GALAXYDATABlock3         DB $FF
1005  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1006  0000                  SLOT    GalaxyDataAddr
1007  0000                  PAGE    BankGalaxyData4
1008  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1009  E000 FF           GALAXYDATABlock4         DB $FF
1010  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1011  0000                  SLOT    GalaxyDataAddr
1012  0000                  PAGE    BankGalaxyData5
1013  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1014  E000 FF           GALAXYDATABlock5         DB $FF
1015  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1016  0000                  SLOT    GalaxyDataAddr
1017  0000                  PAGE    BankGalaxyData6
1018  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1019  E000 FF           GALAXYDATABlock6         DB $FF
1020  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1021  0000                  SLOT    GalaxyDataAddr
1022  0000                  PAGE    BankGalaxyData7
1023  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1024  E000 FF           GALAXYDATABlock7         DB $FF
1025  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1026  0000
1027  0000
1028  0000
1029  0000
1030  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1031  0000                  SAVENEX CFG  0,0,0,1
1032  0000                  SAVENEX AUTO
1033  0000                  SAVENEX CLOSE
1034  0000
# file closed: eliteNext.asm
